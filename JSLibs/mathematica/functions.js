/*

Take[Drop[Names["System`*"], 110 + 6], All];
Map[If[! (KeyExistsQ[Information[#] // First, "Usage"] // TrueQ), 
    Missing[], <|"label" -> #, "type" -> "keyword", 
     "info" -> StringLimitTake[
       Information[#]["Usage"] // TextString // ToString, 
       100]|>] &, %];
ExportString[% // DeleteMissing, "JSON"]

*/


/*
{"$[CapitalAlpha]", "$[CapitalBeta]", "$[CapitalGamma]", 
  "$[CapitalDelta]", "$[CapitalEpsilon]", "$[CapitalZeta]", 
  "$[CapitalEta]", "$[CapitalTheta]", "$[CapitalIota]", 
  "$[CapitalKappa]", "$[CapitalLambda]", "$[CapitalMu]", 
  "$[CapitalNu]", "$[CapitalXi]", "$[CapitalOmicron]", "$[CapitalPi]",
   "$[CapitalRho]", "$[CapitalSigma]", "$[CapitalTau]", 
  "$[CapitalUpsilon]", "$[CapitalPhi]", "$[CapitalChi]", 
  "$[CapitalPsi]", "$[CapitalOmega]", "$[Alpha]", "$[Beta]", 
  "$[Gamma]", "$[Delta]", "$[CurlyEpsilon]", "$[Zeta]", "$[Eta]", 
  "$[Theta]", "$[Iota]", "$[Kappa]", "$[Lambda]", "$[Mu]", "$[Nu]", 
  "$[Xi]", "$[Omicron]", "$[Pi]", "$[Rho]", "$[FinalSigma]", 
  "$[Sigma]", "$[Tau]", "$[Upsilon]", "$[CurlyPhi]", "$[Chi]", 
  "$[Psi]", "$[Omega]", "$[CurlyTheta]", "$[CurlyCapitalUpsilon]", 
  "$[Phi]", "$[CurlyPi]", "$[CapitalStigma]", "$[Stigma]", 
  "$[CapitalDigamma]", "$[Digamma]", "$[CapitalKoppa]", "$[Koppa]", 
  "$[CapitalSampi]", "$[Sampi]", "$[CurlyKappa]", "$[CurlyRho]", 
  "$[Epsilon]"};
With[{s = #},
    <|"label" -> Switch[StringDrop[StringTake[s, 4], 2],
       
       "Ca", 
       ToLowerCase[
        StringDrop[StringTake[s, 3], 2] <> 
         StringDrop[StringTake[s, 10], 9]], "Cu", 
       ToLowerCase[
        StringDrop[StringTake[s, 3], 2] <> 
         StringDrop[StringTake[s, 10 - 2], 9 - 2]], _, 
       ToLowerCase[StringDrop[StringTake[s, 3], 2]]],
     "type" -> "text", "apply" -> #, 
     "detail" -> StringDrop[StringDrop[#, 2], -1]
     |>
    
    ] & /@ %;
ExportString[%, "JSON"
*/

export const functions = [
  {
    "label":"AASTriangle",
    "type":"keyword",
    "info":"AASTriangle[Î\\[PlusMinus], Îb2, a] returns a filled triangle with angles Î\\[PlusMinus] and Î\.b2 and side length a, where a is adj"
  },
  {
    "label":"AbelianGroup",
    "type":"keyword",
    "info":"AbelianGroup[{n , n , â¦}] represents the direct product of the cyclic groups of degrees n , n , â¦.\n "
  },
  {
    "label":"Abort",
    "type":"keyword",
    "info":"Abort[] generates an interrupt to abort a computation. "
  },
  {
    "label":"AbortKernels",
    "type":"keyword",
    "info":"AbortKernels[] aborts evaluations running in all parallel subkernels."
  },
  {
    "label":"AbortProtect",
    "type":"keyword",
    "info":"AbortProtect[expr] evaluates expr, saving any aborts until the evaluation is complete. "
  },
  {
    "label":"AbortScheduledTask",
    "type":"keyword",
    "info":"AbortScheduledTask[task] interrupts any currently evaluating instances of the cloud task task."
  },
  {
    "label":"Above",
    "type":"keyword",
    "info":"Above is a symbol that represents the region above an object for purposes of placement."
  },
  {
    "label":"Abs",
    "type":"keyword",
    "info":"Abs[z] gives the absolute value of the real or complex number z. "
  },
  {
    "label":"AbsArg",
    "type":"keyword",
    "info":"AbsArg[z] gives the list {Abs[z], Arg[z]} of the number z."
  },
  {
    "label":"AbsArgPlot",
    "type":"keyword",
    "info":"AbsArgPlot[f, {x, x   , x   }] generates a plot of Abs[f] colored by Arg[f] as a function of x â ï\\[Micro] f"
  },
  {
    "label":"Absolute",
    "type":"keyword",
    "info":"System`Absolute"
  },
  {
    "label":"AbsoluteCorrelation",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"AbsoluteCorrelationFunction",
    "type":"keyword",
    "info":"AbsoluteCorrelationFunction[data, hspec] estimates the absolute correlation function at lags hspec f"
  },
  {
    "label":"AbsoluteCurrentValue",
    "type":"keyword",
    "info":"AbsoluteCurrentValue[item] gives the absolute current value of item at a location in the Wolfram Sys"
  },
  {
    "label":"AbsoluteDashing",
    "type":"keyword",
    "info":"AbsoluteDashing[{d , d , â¦}] is a graphics directive which specifies that lines which follow are to "
  },
  {
    "label":"AbsoluteFileName",
    "type":"keyword",
    "info":"AbsoluteFileName[\"name\"] gives the full absolute version of the name for a file in your filesystem."
  },
  {
    "label":"AbsoluteOptions",
    "type":"keyword",
    "info":"AbsoluteOptions[expr] gives the absolute settings of options specified in an expression such as a gr"
  },
  {
    "label":"AbsolutePointSize",
    "type":"keyword",
    "info":"AbsolutePointSize[d] is a graphics directive which specifies that points which follow are to be show"
  },
  {
    "label":"AbsoluteThickness",
    "type":"keyword",
    "info":"AbsoluteThickness[d] is a graphics directive which specifies that lines which follow are to be drawn"
  },
  {
    "label":"AbsoluteTime",
    "type":"keyword",
    "info":"AbsoluteTime[] gives the total number of seconds since the beginning of January 1, 1900, in your tim"
  },
  {
    "label":"AbsoluteTiming",
    "type":"keyword",
    "info":"AbsoluteTiming[expr] evaluates expr, returning a list of the absolute number of seconds in real time"
  },
  {
    "label":"AcceptanceThreshold",
    "type":"keyword",
    "info":"AcceptanceThreshold is an option that specifies the minimum threshold at which a result is considere"
  },
  {
    "label":"AccountingForm",
    "type":"keyword",
    "info":"AccountingForm[expr] prints with all numbers in expr given in standard accounting notation. Accounti"
  },
  {
    "label":"Accumulate",
    "type":"keyword",
    "info":"Accumulate[list] gives a list of the successive accumulated totals of elements in list. "
  },
  {
    "label":"Accuracy",
    "type":"keyword",
    "info":"Accuracy[x] gives the effective number of digits to the right of the decimal point in the number x. "
  },
  {
    "label":"AccuracyGoal",
    "type":"keyword",
    "info":"AccuracyGoal is an option for various numerical operations which specifies how many effective digits"
  },
  {
    "label":"AcousticAbsorbingValue",
    "type":"keyword",
    "info":"AcousticAbsorbingValue[pred, vars, pars] represents a time or frequency domain absorbing boundary co"
  },
  {
    "label":"AcousticImpedanceValue",
    "type":"keyword",
    "info":"AcousticImpedanceValue[pred, vars, pars] represents a time or frequency domain impedance boundary co"
  },
  {
    "label":"AcousticNormalVelocityValue",
    "type":"keyword",
    "info":"AcousticNormalVelocityValue[pred, vars, pars] represents a time or frequency domain normal velocity "
  },
  {
    "label":"AcousticPDEComponent",
    "type":"keyword",
    "info":"AcousticPDEComponent[vars, pars] yields an acoustic PDE term component with variables vars and param"
  },
  {
    "label":"AcousticPressureCondition",
    "type":"keyword",
    "info":"AcousticPressureCondition[pred, vars, pars] represents a time or frequency domain pressure boundary "
  },
  {
    "label":"AcousticRadiationValue",
    "type":"keyword",
    "info":"AcousticRadiationValue[pred, vars, pars] represents a time or frequency radiation boundary condition"
  },
  {
    "label":"AcousticSoundHardValue",
    "type":"keyword",
    "info":"AcousticSoundHardValue[pred, vars, pars] represents a time or frequency domain sound hard boundary c"
  },
  {
    "label":"AcousticSoundSoftCondition",
    "type":"keyword",
    "info":"AcousticSoundSoftCondition[pred, vars, pars] represents a time or frequency domain sound soft bounda"
  },
  {
    "label":"ActionDelay",
    "type":"keyword",
    "info":"System`ActionDelay"
  },
  {
    "label":"ActionMenu",
    "type":"keyword",
    "info":"ActionMenu[name, {lbl  :> act , lbl  :> act , â¦}] represents an action menu with label name and with"
  },
  {
    "label":"ActionMenuBox",
    "type":"keyword",
    "info":"System`ActionMenuBox"
  },
  {
    "label":"ActionMenuBoxOptions",
    "type":"keyword",
    "info":"ActionMenuBoxOptions ï¢ {opt  ï¢ val , opt  ï¢ val , â¦} is an option that specifies settings for Action"
  },
  {
    "label":"Activate",
    "type":"keyword",
    "info":"Activate[expr] replaces all instances of Inactive[f] in expr with f.Activate[expr, patt] replaces on"
  },
  {
    "label":"Active",
    "type":"keyword",
    "info":"Active is an option for ButtonBox, Cell, and Notebook that specifies whether a button should be acti"
  },
  {
    "label":"ActiveClassification",
    "type":"keyword",
    "info":"ActiveClassification[f, {conf , conf , â¦}] gives an object representing the result of active classif"
  },
  {
    "label":"ActiveClassificationObject",
    "type":"keyword",
    "info":"ActiveClassificationObject[â¦] represents the result of an ActiveClassification process."
  },
  {
    "label":"ActiveItem",
    "type":"keyword",
    "info":"System`ActiveItem"
  },
  {
    "label":"ActivePrediction",
    "type":"keyword",
    "info":"ActivePrediction[f, {conf , conf , â¦}] gives an object representing the result of active prediction "
  },
  {
    "label":"ActivePredictionObject",
    "type":"keyword",
    "info":"ActivePredictionObject[â¦] represents the result of an ActivePrediction process."
  },
  {
    "label":"ActiveStyle",
    "type":"keyword",
    "info":"ActiveStyle is an option for Hyperlink and related constructs that specifies styles to add when the "
  },
  {
    "label":"AcyclicGraphQ",
    "type":"keyword",
    "info":"AcyclicGraphQ[g] yields True if the graph g is an acyclic graph and False otherwise."
  },
  {
    "label":"AddOnHelpPath",
    "type":"keyword",
    "info":"AddOnHelpPath is a global option that specifies which directories are searched for additional help f"
  },
  {
    "label":"AddSides",
    "type":"keyword",
    "info":"AddSides[rel, x] adds x to each side of the equation or inequality rel.AddSides[rel , rel ] adds the"
  },
  {
    "label":"AddTo",
    "type":"keyword",
    "info":"x += dx adds dx to x and returns the new value of x. "
  },
  {
    "label":"AddToSearchIndex",
    "type":"keyword",
    "info":"AddToSearchIndex[obj, content] adds the specified content to the existing search index object obj. A"
  },
  {
    "label":"AddUsers",
    "type":"keyword",
    "info":"AddUsers[group, {user , â¦}] adds the users user  to the permissions group group. \n                  "
  },
  {
    "label":"AdjacencyGraph",
    "type":"keyword",
    "info":"AdjacencyGraph[amat] gives the graph with adjacency matrix amat.AdjacencyGraph[{v , v , â¦}, amat] gi"
  },
  {
    "label":"AdjacencyList",
    "type":"keyword",
    "info":"AdjacencyList[g, v] gives a list of vertices adjacent to vertex v.AdjacencyList[g, patt] gives a lis"
  },
  {
    "label":"AdjacencyMatrix",
    "type":"keyword",
    "info":"AdjacencyMatrix[g] gives the vertexâvertex adjacency matrix of the graph g.AdjacencyMatrix[{v ï¢ w, â¦"
  },
  {
    "label":"AdjacentMeshCells",
    "type":"keyword",
    "info":"AdjacentMeshCells[mr, cellspec, d] gives cells of dimension d adjacent to the cell specified by cell"
  },
  {
    "label":"Adjugate",
    "type":"keyword",
    "info":"Adjugate[m] gives the adjugate of a square matrix m."
  },
  {
    "label":"AdjustmentBox",
    "type":"keyword",
    "info":"AdjustmentBox[box, opts] is a low-level box construct which displays with the placement of box adjus"
  },
  {
    "label":"AdjustmentBoxOptions",
    "type":"keyword",
    "info":"AdjustmentBoxOptions is an option that specifies settings for AdjustmentBox objects."
  },
  {
    "label":"AdjustTimeSeriesForecast",
    "type":"keyword",
    "info":"AdjustTimeSeriesForecast[tproc, forecast, newdata] adjusts forecast using new observations newdata a"
  },
  {
    "label":"AdministrativeDivisionData",
    "type":"keyword",
    "info":"AdministrativeDivisionData[entity, property] gives the value of the specified property for the admin"
  },
  {
    "label":"AffineHalfSpace",
    "type":"keyword",
    "info":"AffineHalfSpace[{p , â¦, p     }, w] represents AffineSpace[{p , â¦, p     }] extended in the directio"
  },
  {
    "label":"AffineSpace",
    "type":"keyword",
    "info":"AffineSpace[{p , â¦, p     }] represents the affine space passing through the points p .AffineSpace[p"
  },
  {
    "label":"AffineStateSpaceModel",
    "type":"keyword",
    "info":"AffineStateSpaceModel[{a, b, c, d}, x] represents the affine state-space model x ' (t) ï\\[PlusMinus] a(x(t)) + b"
  },
  {
    "label":"AffineTransform",
    "type":"keyword",
    "info":"AffineTransform[m] gives a TransformationFunction that represents an affine transform that maps r to"
  },
  {
    "label":"After",
    "type":"keyword",
    "info":"After is a symbol that represents the region after an object for purposes of placement."
  },
  {
    "label":"AggregatedEntityClass",
    "type":"keyword",
    "info":"AggregatedEntityClass[class, \"prop\" ï¢ f] represents an entity class containing a single entity with "
  },
  {
    "label":"AggregationLayer",
    "type":"keyword",
    "info":"AggregationLayer[f] represents a layer that aggregates an array of arbitrary rank into a vector, usi"
  },
  {
    "label":"AircraftData",
    "type":"keyword",
    "info":"AircraftData[entity, property] gives the value of the specified property for the aircraft entity.Air"
  },
  {
    "label":"AirportData",
    "type":"keyword",
    "info":"AirportData[entity, property] gives the value of the specified property for the airport entity.Airpo"
  },
  {
    "label":"AirPressureData",
    "type":"keyword",
    "info":"AirPressureData[] gives the most recent measurement for air pressure near the current location.AirPr"
  },
  {
    "label":"AirSoundAttenuation",
    "type":"keyword",
    "info":"AirSoundAttenuation[spec, frequency] returns the sound attenuation coefficient in moist air for the "
  },
  {
    "label":"AirTemperatureData",
    "type":"keyword",
    "info":"AirTemperatureData[] gives the most recent measurement for air temperature near the current location"
  },
  {
    "label":"AiryAi",
    "type":"keyword",
    "info":"AiryAi[z] gives the Airy function Ai(z). "
  },
  {
    "label":"AiryAiPrime",
    "type":"keyword",
    "info":"                                                           â\.b2\nAiryAiPrime[z] gives the derivative of "
  },
  {
    "label":"AiryAiZero",
    "type":"keyword",
    "info":"                               th                                                                   "
  },
  {
    "label":"AiryBi",
    "type":"keyword",
    "info":"AiryBi[z] gives the Airy function Bi(z). "
  },
  {
    "label":"AiryBiPrime",
    "type":"keyword",
    "info":"                                                           â\.b2\nAiryBiPrime[z] gives the derivative of "
  },
  {
    "label":"AiryBiZero",
    "type":"keyword",
    "info":"                               th                                                                   "
  },
  {
    "label":"AlgebraicIntegerQ",
    "type":"keyword",
    "info":"AlgebraicIntegerQ[a] yields True if a is an algebraic integer, and yields False otherwise."
  },
  {
    "label":"AlgebraicNumber",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"AlgebraicNumberDenominator",
    "type":"keyword",
    "info":"AlgebraicNumberDenominator[a] gives the smallest positive integer n such that n a is an algebraic in"
  },
  {
    "label":"AlgebraicNumberNorm",
    "type":"keyword",
    "info":"AlgebraicNumberNorm[a] gives the norm of the algebraic number a."
  },
  {
    "label":"AlgebraicNumberPolynomial",
    "type":"keyword",
    "info":"AlgebraicNumberPolynomial[a, x] gives the polynomial in x corresponding to the AlgebraicNumber objec"
  },
  {
    "label":"AlgebraicNumberTrace",
    "type":"keyword",
    "info":"AlgebraicNumberTrace[a] gives the trace of the algebraic number a."
  },
  {
    "label":"AlgebraicRules",
    "type":"keyword",
    "info":"System`AlgebraicRules"
  },
  {
    "label":"AlgebraicRulesData",
    "type":"keyword",
    "info":"AlgebraicRulesData is an object returned by AlgebraicRules. Its OutputForm appears to be a list of r"
  },
  {
    "label":"Algebraics",
    "type":"keyword",
    "info":"Algebraics represents the domain of algebraic numbers, as in x â Algebraics. "
  },
  {
    "label":"AlgebraicUnitQ",
    "type":"keyword",
    "info":"AlgebraicUnitQ[a] yields True if a is an algebraic unit, and yields False otherwise."
  },
  {
    "label":"Alignment",
    "type":"keyword",
    "info":"Alignment is an option which specifies how the contents of a displayed object should be aligned with"
  },
  {
    "label":"AlignmentMarker",
    "type":"keyword",
    "info":"System`AlignmentMarker"
  },
  {
    "label":"AlignmentPoint",
    "type":"keyword",
    "info":"AlignmentPoint is an option which specifies how objects should by default be aligned when they appea"
  },
  {
    "label":"All",
    "type":"keyword",
    "info":"All is a setting used for certain options. In Part and related functions, All specifies all parts at"
  },
  {
    "label":"AllowAdultContent",
    "type":"keyword",
    "info":"System`AllowAdultContent"
  },
  {
    "label":"AllowedCloudExtraParameters",
    "type":"keyword",
    "info":"AllowedCloudExtraParameters is an option for APIFunction and related functions that specifies whethe"
  },
  {
    "label":"AllowedCloudParameterExtensions",
    "type":"keyword",
    "info":"AllowedCloudParameterExtensions is an option for APIFunction and related functions that specifies wh"
  },
  {
    "label":"AllowedDimensions",
    "type":"keyword",
    "info":"AllowedDimensions is an option for Grid and related functions that specifies the allowed minimum and"
  },
  {
    "label":"AllowedFrequencyRange",
    "type":"keyword",
    "info":"AllowedFrequencyRange is an option for audio and signal processing functions that specifies the rang"
  },
  {
    "label":"AllowedHeads",
    "type":"keyword",
    "info":"AllowedHeads is an option that specifies the heads of subexpressions into which a function may desce"
  },
  {
    "label":"AllowGroupClose",
    "type":"keyword",
    "info":"AllowGroupClose is an option for Cell that specifies whether a cell group can be closed normally."
  },
  {
    "label":"AllowIncomplete",
    "type":"keyword",
    "info":"System`AllowIncomplete"
  },
  {
    "label":"AllowInlineCells",
    "type":"keyword",
    "info":"AllowInlineCells is an option for SelectedCells, Cell, and related constructs that specifies whether"
  },
  {
    "label":"AllowKernelInitialization",
    "type":"keyword",
    "info":"System`AllowKernelInitialization"
  },
  {
    "label":"AllowLooseGrammar",
    "type":"keyword",
    "info":"AllowLooseGrammar is an option for GrammarRules and related functions that specifies whether grammat"
  },
  {
    "label":"AllowReverseGroupClose",
    "type":"keyword",
    "info":"AllowReverseGroupClose is an option for Cell that specifies whether a cell group can be reverse clos"
  },
  {
    "label":"AllowScriptLevelChange",
    "type":"keyword",
    "info":"AllowScriptLevelChange is an option for fractions and grids that controls whether certain operators,"
  },
  {
    "label":"AllowVersionUpdate",
    "type":"keyword",
    "info":"AllowVersionUpdate is an option for PacletInstall and PacletInstallSubmit that specifies whether a n"
  },
  {
    "label":"AllTrue",
    "type":"keyword",
    "info":"AllTrue[{e , e , â¦}, test] yields True if test[e ] is True for all of the e .AllTrue[expr, test, lev"
  },
  {
    "label":"Alphabet",
    "type":"keyword",
    "info":"Alphabet[] gives a list of the lowercase letters a through z in the English alphabet.Alphabet[type] "
  },
  {
    "label":"AlphabeticOrder",
    "type":"keyword",
    "info":"AlphabeticOrder[string , string ] gives 1 if \"string \" appears before \"string \" in alphabetical orde"
  },
  {
    "label":"AlphabeticSort",
    "type":"keyword",
    "info":"AlphabeticSort[list] sorts the elements of list into alphabetical order.AlphabeticSort[list, lang] s"
  },
  {
    "label":"AlphaChannel",
    "type":"keyword",
    "info":"AlphaChannel[color] returns the opacity of color.AlphaChannel[image] returns the alpha channel of im"
  },
  {
    "label":"AlternateImage",
    "type":"keyword",
    "info":"AlternateImage is an option to CDFInformation that specifies an image that should be used if the plu"
  },
  {
    "label":"AlternatingFactorial",
    "type":"keyword",
    "info":"AlternatingFactorial[n] gives the alternating factorial a(n)."
  },
  {
    "label":"AlternatingGroup",
    "type":"keyword",
    "info":"AlternatingGroup[n] represents the alternating group of degree n."
  },
  {
    "label":"AlternativeHypothesis",
    "type":"keyword",
    "info":"AlternativeHypothesis is an option for hypothesis testing functions like LocationTest that specifies"
  },
  {
    "label":"Alternatives",
    "type":"keyword",
    "info":"p  | p  | â¦ is a pattern object that represents any of the patterns p . \n 1    2                    "
  },
  {
    "label":"AltitudeMethod",
    "type":"keyword",
    "info":"AltitudeMethod is an option for SunPosition, MoonPosition, and related functions that determines whe"
  },
  {
    "label":"AmbientLight",
    "type":"keyword",
    "info":"AmbientLight[col] is a three-dimensional graphics directive that specifies the uniform ambient light"
  },
  {
    "label":"AmbiguityFunction",
    "type":"keyword",
    "info":"AmbiguityFunction is an option for SemanticInterpretation, Interpreter, and related functions that s"
  },
  {
    "label":"AmbiguityList",
    "type":"keyword",
    "info":"AmbiguityList[{expr , expr , â¦}] represents possible results derived from an ambiguous semantic inte"
  },
  {
    "label":"Analytic",
    "type":"keyword",
    "info":"Analytic is an option for Limit and Series. With Analytic -> True, unrecognized functions are treate"
  },
  {
    "label":"AnatomyData",
    "type":"keyword",
    "info":"AnatomyData[entity, property] gives the value of the specified property for the anatomical structure"
  },
  {
    "label":"AnatomyForm",
    "type":"keyword",
    "info":"AnatomyForm[g] is a graphics directive used in AnatomyPlot3D that specifies how anatomy entityâbased"
  },
  {
    "label":"AnatomyPlot3D",
    "type":"keyword",
    "info":"AnatomyPlot3D[primitives, options] represents a three-dimensional graphical image that works with an"
  },
  {
    "label":"AnatomySkinStyle",
    "type":"keyword",
    "info":"AnatomySkinStyle is an option of AnatomyPlot3D that specifies what style to use for automatically in"
  },
  {
    "label":"AnatomyStyling",
    "type":"keyword",
    "info":"AnatomyStyling[g] is a graphics directive used in AnatomyPlot3D that specifies how anatomy entityâba"
  },
  {
    "label":"AnchoredSearch",
    "type":"keyword",
    "info":"AnchoredSearch is an option for Find and FindList that specifies whether the text searched for must "
  },
  {
    "label":"And",
    "type":"keyword",
    "info":"e  && e  && â¦ is the logical AND function. It evaluates its arguments in order, giving False immedia"
  },
  {
    "label":"AndersonDarlingTest",
    "type":"keyword",
    "info":"AndersonDarlingTest[data] tests whether data is normally distributed using the AndersonâDarling test"
  },
  {
    "label":"AngerJ",
    "type":"keyword",
    "info":"                                                                                                 Î¼\nA"
  },
  {
    "label":"AngleBisector",
    "type":"keyword",
    "info":"AngleBisector[{q , p, q }] gives the bisector of the interior angle at p formed by the triangle with"
  },
  {
    "label":"AngleBracket",
    "type":"keyword",
    "info":"AngleBracket[x, y, â¦] displays as â© x, y, â¦ âª."
  },
  {
    "label":"AnglePath",
    "type":"keyword",
    "info":"AnglePath[{Î¸ , Î¸ , Î¸ , â¦}] gives the list of 2D coordinates corresponding to a path that starts at {"
  },
  {
    "label":"AnglePath3D",
    "type":"keyword",
    "info":"AnglePath3D[{{Î\\[PlusMinus] , Î\.b2 , Î\.b3 }, {Î\\[PlusMinus] , Î\.b2 , Î\.b3 }, â¦}] gives the list of 3D coordinates of a path of an object"
  },
  {
    "label":"AngleVector",
    "type":"keyword",
    "info":"AngleVector[Î¸] gives the list representing the 2D unit vector at angle Î¸ relative to the x axis.Angl"
  },
  {
    "label":"AngularGauge",
    "type":"keyword",
    "info":"AngularGauge[value] draws a gauge showing value in the range 0 to 1.AngularGauge[value, {min, max}] "
  },
  {
    "label":"Animate",
    "type":"keyword",
    "info":"Animate[expr, {u, u   , u   }] generates an animation of expr in which u varies continuously from u "
  },
  {
    "label":"AnimatedImage",
    "type":"keyword",
    "info":"AnimatedImage[{image , image , â¦}] generates an animation whose frames are the successive image . An"
  },
  {
    "label":"AnimationCycleOffset",
    "type":"keyword",
    "info":"AnimationCycleOffset is an option for cells that specifies the relative position of the next graphic"
  },
  {
    "label":"AnimationCycleRepetitions",
    "type":"keyword",
    "info":"AnimationCycleRepetitions is an option for cells that specifies the number of times a given animatio"
  },
  {
    "label":"AnimationDirection",
    "type":"keyword",
    "info":"AnimationDirection is an option which specifies the direction to run an animation. "
  },
  {
    "label":"AnimationDisplayTime",
    "type":"keyword",
    "info":"AnimationDisplayTime is an option for Cell that specifies the minimum time in seconds for which a ce"
  },
  {
    "label":"AnimationRate",
    "type":"keyword",
    "info":"AnimationRate is an option for Animate and Animator that specifies at what rate an animation should "
  },
  {
    "label":"AnimationRepetitions",
    "type":"keyword",
    "info":"AnimationRepetitions is an option to Animate and related functions that specifies how many times the"
  },
  {
    "label":"AnimationRunning",
    "type":"keyword",
    "info":"AnimationRunning is an option to Animate and related functions that specifies whether the animation "
  },
  {
    "label":"AnimationRunTime",
    "type":"keyword",
    "info":"AnimationRunTime is an option to Animator and related functions that indicates how long the animatio"
  },
  {
    "label":"AnimationTimeIndex",
    "type":"keyword",
    "info":"AnimationTimeIndex is an option to Animator and related functions that specifies the current time in"
  },
  {
    "label":"AnimationVideo",
    "type":"keyword",
    "info":"AnimationVideo[fexpr, {u, u   , u   }] generates a video of fexpr in which u varies from u    to u  "
  },
  {
    "label":"Animator",
    "type":"keyword",
    "info":"Animator[u] represents an object that displays with the value of u being continually increased from "
  },
  {
    "label":"AnimatorBox",
    "type":"keyword",
    "info":"System`AnimatorBox"
  },
  {
    "label":"AnimatorBoxOptions",
    "type":"keyword",
    "info":"AnimatorBoxOptions ï¢ {opt  ï¢ val , opt  ï¢ val , â¦} is an option that specifies settings for Animator"
  },
  {
    "label":"AnimatorElements",
    "type":"keyword",
    "info":"System`AnimatorElements"
  },
  {
    "label":"Annotate",
    "type":"keyword",
    "info":"Annotate[obj, key ï¢ value] sets the annotation key ï¢ value for the object obj.Annotate[{obj, itemspe"
  },
  {
    "label":"Annotation",
    "type":"keyword",
    "info":"Annotation[expr, data] represents an expression expr, with annotation data.Annotation[expr, data, \"t"
  },
  {
    "label":"AnnotationDelete",
    "type":"keyword",
    "info":"AnnotationDelete[obj] deletes all annotations of the object obj.AnnotationDelete[{obj, itemspec}] de"
  },
  {
    "label":"AnnotationKeys",
    "type":"keyword",
    "info":"AnnotationKeys[obj] lists all annotation keys available for the object obj.AnnotationKeys[{obj, item"
  },
  {
    "label":"AnnotationRules",
    "type":"keyword",
    "info":"AnnotationRules is an option that allows specification of annotations to objects and items in object"
  },
  {
    "label":"AnnotationValue",
    "type":"keyword",
    "info":"AnnotationValue[obj, key] gives the annotation value associated with key for the object obj.Annotati"
  },
  {
    "label":"Annuity",
    "type":"keyword",
    "info":"Annuity[p, t] represents an annuity of fixed payments p made over t periods.Annuity[p, t, q] represe"
  },
  {
    "label":"AnnuityDue",
    "type":"keyword",
    "info":"AnnuityDue[p, t] represents an annuity due of fixed payments p made over t periods.AnnuityDue[p, t, "
  },
  {
    "label":"Annulus",
    "type":"keyword",
    "info":"Annulus[{x, y}, {r     , r     }] represents an annulus centered at {x, y} with inner radius r      "
  },
  {
    "label":"AnomalyDetection",
    "type":"keyword",
    "info":"AnomalyDetection[{example , example , â¦}] generates an AnomalyDetectorFunction[â¦] based on the examp"
  },
  {
    "label":"AnomalyDetector",
    "type":"keyword",
    "info":"AnomalyDetector is an option for functions such as Classify that specifies an anomaly detector for t"
  },
  {
    "label":"AnomalyDetectorFunction",
    "type":"keyword",
    "info":"AnomalyDetectorFunction[â¦] represents a function generated by AnomalyDetection for detecting whether"
  },
  {
    "label":"Anonymous",
    "type":"keyword",
    "info":"Anonymous represents an option or other value that indicates the absence of a name."
  },
  {
    "label":"Antialiasing",
    "type":"keyword",
    "info":"Antialiasing is an option that specifies whether antialiasing should be done."
  },
  {
    "label":"Antihermitian",
    "type":"keyword",
    "info":"Antihermitian[{1, 2}] represents the symmetry of an antihermitian matrix."
  },
  {
    "label":"AntihermitianMatrixQ",
    "type":"keyword",
    "info":"AntihermitianMatrixQ[m] gives True if m is explicitly antihermitian, and False otherwise."
  },
  {
    "label":"Antisymmetric",
    "type":"keyword",
    "info":"Antisymmetric[{s , â¦, s }] represents the symmetry of a tensor that is antisymmetric in the slots s "
  },
  {
    "label":"AntisymmetricMatrixQ",
    "type":"keyword",
    "info":"AntisymmetricMatrixQ[m] gives True if m is explicitly antisymmetric, and False otherwise."
  },
  {
    "label":"Antonyms",
    "type":"keyword",
    "info":"Antonyms[\"word\"] returns the antonyms associated with the specified word."
  },
  {
    "label":"AnyOrder",
    "type":"keyword",
    "info":"AnyOrder[p , p , â¦] is a grammar rules pattern object that represents a sequence of elements matchin"
  },
  {
    "label":"AnySubset",
    "type":"keyword",
    "info":"AnySubset[{c , c , â¦}] represents an element in an interpreter or form that accepts any subset of th"
  },
  {
    "label":"AnyTrue",
    "type":"keyword",
    "info":"AnyTrue[{e , e , â¦}, test] yields True if test[e ] is True for any of the e .AnyTrue[expr, test, lev"
  },
  {
    "label":"Apart",
    "type":"keyword",
    "info":"Apart[expr] rewrites a rational expression as a sum of terms with minimal denominators. Apart[expr, "
  },
  {
    "label":"ApartSquareFree",
    "type":"keyword",
    "info":"ApartSquareFree[expr] rewrites a rational expression as a sum of terms whose denominators are powers"
  },
  {
    "label":"APIFunction",
    "type":"keyword",
    "info":"APIFunction[{name  ï¢ type , name  ï¢ type , â¦}, fun] represents an API with parameters name  that eva"
  },
  {
    "label":"Appearance",
    "type":"keyword",
    "info":"Appearance is an option for displayed objects such as Button and Slider that specifies the general t"
  },
  {
    "label":"AppearanceElements",
    "type":"keyword",
    "info":"AppearanceElements is an option for functions like Manipulate that specifies what elements should be"
  },
  {
    "label":"AppearanceRules",
    "type":"keyword",
    "info":"AppearanceRules is an option for form and page generation functions that specifies the overall appea"
  },
  {
    "label":"AppellF1",
    "type":"keyword",
    "info":"AppellF1[a, b , b , c, x, y] is the Appell hypergeometric function of two variables F  (a ; b , b  ;"
  },
  {
    "label":"Append",
    "type":"keyword",
    "info":"Append[expr, elem] gives expr with elem appended. Append[elem] represents an operator form of Append"
  },
  {
    "label":"AppendCheck",
    "type":"keyword",
    "info":"System`AppendCheck"
  },
  {
    "label":"AppendLayer",
    "type":"keyword",
    "info":"AppendLayer[] represents a net layer that takes an input array and appends another array to it."
  },
  {
    "label":"AppendTo",
    "type":"keyword",
    "info":"AppendTo[x, elem] appends elem to the value of x, and resets x to the result. "
  },
  {
    "label":"Application",
    "type":"keyword",
    "info":"f ï\\[Degree] g or Application[f, g] represents the formal application of f to g."
  },
  {
    "label":"ApplicationIdentificationKey",
    "type":"keyword",
    "info":"System`ApplicationIdentificationKey"
  },
  {
    "label":"Apply",
    "type":"keyword",
    "info":"f @@ expr or Apply[f, expr] replaces the head of expr by f. f@@@expr or Apply[f, expr, {1}] replaces"
  },
  {
    "label":"ApplySides",
    "type":"keyword",
    "info":"ApplySides[f, rel] applies f to each side of the equation or inequality rel."
  },
  {
    "label":"ApplyTo",
    "type":"keyword",
    "info":"ApplyTo[x, f] or x\/\/= f computes f[x] and resets x to the result."
  },
  {
    "label":"ArcCos",
    "type":"keyword",
    "info":"                                  -1\nArcCos[z] gives the arc cosine cos  (z) of the complex number z"
  },
  {
    "label":"ArcCosh",
    "type":"keyword",
    "info":"                                                   -1\nArcCosh[z] gives the inverse hyperbolic cosine"
  },
  {
    "label":"ArcCot",
    "type":"keyword",
    "info":"                                     -1\nArcCot[z] gives the arc cotangent cot  (z) of the complex nu"
  },
  {
    "label":"ArcCoth",
    "type":"keyword",
    "info":"                                                      -1\nArcCoth[z] gives the inverse hyperbolic cot"
  },
  {
    "label":"ArcCsc",
    "type":"keyword",
    "info":"                                    -1\nArcCsc[z] gives the arc cosecant csc  (z) of the complex numb"
  },
  {
    "label":"ArcCsch",
    "type":"keyword",
    "info":"                                                     -1\nArcCsch[z] gives the inverse hyperbolic cose"
  },
  {
    "label":"ArcCurvature",
    "type":"keyword",
    "info":"ArcCurvature[{x , â¦, x }, t] gives the curvature of the parametrized curve whose Cartesian coordinat"
  },
  {
    "label":"ARCHProcess",
    "type":"keyword",
    "info":"ARCHProcess[Îº, {Î\\[PlusMinus] , â¦, Î\\[PlusMinus] }] represents an autoregressive conditionally heteroscedastic process of or"
  },
  {
    "label":"ArcLength",
    "type":"keyword",
    "info":"ArcLength[reg] gives the length of the one-dimensional region reg.ArcLength[{x , â¦, x }, {t, t   , t"
  },
  {
    "label":"ArcSec",
    "type":"keyword",
    "info":"                                  -1\nArcSec[z] gives the arc secant sec  (z) of the complex number z"
  },
  {
    "label":"ArcSech",
    "type":"keyword",
    "info":"                                                   -1\nArcSech[z] gives the inverse hyperbolic secant"
  },
  {
    "label":"ArcSin",
    "type":"keyword",
    "info":"                                -1\nArcSin[z] gives the arc sine sin  (z) of the complex number z. "
  },
  {
    "label":"ArcSinDistribution",
    "type":"keyword",
    "info":"ArcSinDistribution[{x   , x   }] represents the arc sine distribution supported between x    and x  "
  },
  {
    "label":"ArcSinh",
    "type":"keyword",
    "info":"                                                 -1\nArcSinh[z] gives the inverse hyperbolic sine sin"
  },
  {
    "label":"ArcTan",
    "type":"keyword",
    "info":"                                   -1                                                               "
  },
  {
    "label":"ArcTanh",
    "type":"keyword",
    "info":"                                                    -1\nArcTanh[z] gives the inverse hyperbolic tange"
  },
  {
    "label":"Area",
    "type":"keyword",
    "info":"Area[reg] gives the area of the two-dimensional region reg.Area[{x , â¦, x }, {s, s   , s   }, {t, t "
  },
  {
    "label":"Arg",
    "type":"keyword",
    "info":"Arg[z] gives the argument of the complex number z. "
  },
  {
    "label":"ArgMax",
    "type":"keyword",
    "info":"ArgMax[f, x] gives a position x    at which f is maximized.ArgMax[f, {x, y, â¦}] gives a position {x "
  },
  {
    "label":"ArgMin",
    "type":"keyword",
    "info":"ArgMin[f, x] gives a position x    at which f is minimized.ArgMin[f, {x, y, â¦}] gives a position {x "
  },
  {
    "label":"ArgumentCountQ",
    "type":"keyword",
    "info":"ArgumentCountQ[head, len, min, max] tests whether the number len of arguments of a function head is "
  },
  {
    "label":"ArgumentsOptions",
    "type":"keyword",
    "info":"ArgumentsOptions[f[args], n] tries to separate args into a list of n positional arguments followed b"
  },
  {
    "label":"ARIMAProcess",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"ArithmeticGeometricMean",
    "type":"keyword",
    "info":"ArithmeticGeometricMean[a, b] gives the arithmeticâgeometric mean of a and b. "
  },
  {
    "label":"ARMAProcess",
    "type":"keyword",
    "info":"ARMAProcess[{a , â¦, a }, {b , â¦, b }, v] represents a weakly stationary autoregressive moving-averag"
  },
  {
    "label":"Around",
    "type":"keyword",
    "info":"Around[x, Î\.b4] represents an approximate number or quantity with a value around x and an uncertainty Î\.b4"
  },
  {
    "label":"AroundReplace",
    "type":"keyword",
    "info":"AroundReplace[expr, {s  ï¢ Around[x , Î\.b4 ], s  ï¢ Around[x , Î\.b4 ], â¦}] propagates uncertainty in expr by"
  },
  {
    "label":"ARProcess",
    "type":"keyword",
    "info":"ARProcess[{a , â¦, a }, v] represents a weakly stationary autoregressive process of order p with norm"
  },
  {
    "label":"Array",
    "type":"keyword",
    "info":"Array[f, n] generates a list of length n, with elements f[i]. Array[f, n, r] generates a list using "
  },
  {
    "label":"ArrayComponents",
    "type":"keyword",
    "info":"ArrayComponents[array] gives an array in which all identical elements of array are replaced by an in"
  },
  {
    "label":"ArrayDepth",
    "type":"keyword",
    "info":"ArrayDepth[expr] gives the depth to which expr is a full array, with all the parts at a particular l"
  },
  {
    "label":"ArrayFilter",
    "type":"keyword",
    "info":"ArrayFilter[f, array, r] applies f to all range-r blocks in the specified array.ArrayFilter[f, array"
  },
  {
    "label":"ArrayFlatten",
    "type":"keyword",
    "info":"ArrayFlatten[{{m  , m  , â¦}, {m  , m  , â¦}, â¦}] creates a single flattened matrix from a matrix of m"
  },
  {
    "label":"ArrayMesh",
    "type":"keyword",
    "info":"ArrayMesh[array] generates a mesh region from an array of rank d in which each cell has a geometric "
  },
  {
    "label":"ArrayPad",
    "type":"keyword",
    "info":"ArrayPad[array, m] gives an array with m zeros of padding on every side. ArrayPad[array, m, padding]"
  },
  {
    "label":"ArrayPlot",
    "type":"keyword",
    "info":"ArrayPlot[array] generates a plot in which the values in an array are shown in a discrete array of s"
  },
  {
    "label":"ArrayPlot3D",
    "type":"keyword",
    "info":"ArrayPlot3D[array] generates a plot in which the values in an array are shown in a discrete array of"
  },
  {
    "label":"ArrayQ",
    "type":"keyword",
    "info":"ArrayQ[expr] gives True if expr is a full array or a SparseArray object, and gives False otherwise. "
  },
  {
    "label":"ArrayReduce",
    "type":"keyword",
    "info":"ArrayReduce[f, array, n] reduces dimension n of array by applying f.ArrayReduce[f, array, n  ;; n ] "
  },
  {
    "label":"ArrayResample",
    "type":"keyword",
    "info":"ArrayResample[array, {n , n , â¦}] resamples array to have dimensions {n , n , â¦}.ArrayResample[array"
  },
  {
    "label":"ArrayReshape",
    "type":"keyword",
    "info":"ArrayReshape[list, dims] arranges the elements of list into a rectangular array with dimensions dims"
  },
  {
    "label":"ArrayRules",
    "type":"keyword",
    "info":"ArrayRules[SparseArray[â¦]] gives the rules {pos  ï¢ val , pos  ï¢ val , â¦} specifying elements in a sp"
  },
  {
    "label":"Arrays",
    "type":"keyword",
    "info":"Arrays[{d , â¦, d }] represents the domain of arrays of rank r and dimensions d .Arrays[{d , â¦, d }, "
  },
  {
    "label":"Arrow",
    "type":"keyword",
    "info":"Arrow[{pt , pt }] is a graphics primitive that represents an arrow from pt  to pt .Arrow[{pt , pt },"
  },
  {
    "label":"Arrow3DBox",
    "type":"keyword",
    "info":"System`Arrow3DBox"
  },
  {
    "label":"ArrowBox",
    "type":"keyword",
    "info":"System`ArrowBox"
  },
  {
    "label":"Arrowheads",
    "type":"keyword",
    "info":"Arrowheads[spec] is a graphics directive specifying that arrows that follow should have arrowheads w"
  },
  {
    "label":"ASATriangle",
    "type":"keyword",
    "info":"ASATriangle[Î\\[PlusMinus], c, Î\.b2] returns a filled triangle with angles Î\\[PlusMinus] and Î\.b2 and side length c, and c is adjac"
  },
  {
    "label":"Ask",
    "type":"keyword",
    "info":"Ask[\"key\"] is a construct for use inside AskFunction that gives the value associated with key, or in"
  },
  {
    "label":"AskAppend",
    "type":"keyword",
    "info":"AskAppend[\"key\"] is a construct for use inside AskFunction that asks for a new value, appends it to "
  },
  {
    "label":"AskConfirm",
    "type":"keyword",
    "info":"AskConfirm[\"key\"] is a construct for use inside AskFunction that asks for confirmation of the curren"
  },
  {
    "label":"AskDisplay",
    "type":"keyword",
    "info":"AskDisplay[expr] is a construct for use inside AskFunction that displays the result of evaluating ex"
  },
  {
    "label":"AskedQ",
    "type":"keyword",
    "info":"AskedQ[\"key\"] is a construct for use inside AskFunction that gives True if a value is currently asso"
  },
  {
    "label":"AskedValue",
    "type":"keyword",
    "info":"AskedValue[\"key\"] is a construct for use inside AskFunction that gives the value associated with key"
  },
  {
    "label":"AskFunction",
    "type":"keyword",
    "info":"AskFunction[body] evaluates body, interactively asking for values specified by Ask[â¦] and related co"
  },
  {
    "label":"AskState",
    "type":"keyword",
    "info":"AskState[] is a construct for use inside AskFunction that returns an association of all values in th"
  },
  {
    "label":"AskTemplateDisplay",
    "type":"keyword",
    "info":"AskTemplateDisplay[fun] is a construct for use inside AskFunction that displays the result of applyi"
  },
  {
    "label":"AspectRatio",
    "type":"keyword",
    "info":"AspectRatio is an option for Graphics and related functions that specifies the ratio of height to wi"
  },
  {
    "label":"AspectRatioFixed",
    "type":"keyword",
    "info":"AspectRatioFixed is an option for Cell that specifies whether graphics in the cell should be constra"
  },
  {
    "label":"Assert",
    "type":"keyword",
    "info":"Assert[test] represents the assertion that test is True. If assertions have been enabled, test is ev"
  },
  {
    "label":"AssessmentFunction",
    "type":"keyword",
    "info":"AssessmentFunction[key] represents a tool for assessing whether answers are correct according to the"
  },
  {
    "label":"AssessmentResultObject",
    "type":"keyword",
    "info":"AssessmentResultObject[assoc] represents the results of an assessment.AssessmentResultObject[{aro , "
  },
  {
    "label":"AssociateTo",
    "type":"keyword",
    "info":"AssociateTo[a, key ï¢ val] changes the association a by adding the key-value pair key ï¢ val.Associate"
  },
  {
    "label":"Association",
    "type":"keyword",
    "info":"Association[key  ï¢ val , key  ï¢ val , â¦] or ï key  ï¢ val , key  ï¢ val , â¦ ï represents an associatio"
  },
  {
    "label":"AssociationFormat",
    "type":"keyword",
    "info":"AssociationFormat is an option to TextString and related functions that determines how associations "
  },
  {
    "label":"AssociationMap",
    "type":"keyword",
    "info":"AssociationMap[f, {key , key , â¦}] creates the association ï key  ï¢ f[key ], key  ï¢ f[key ], â¦ ï.Ass"
  },
  {
    "label":"AssociationQ",
    "type":"keyword",
    "info":"AssociationQ[expr] gives True if expr is a valid Association object, and False otherwise."
  },
  {
    "label":"AssociationThread",
    "type":"keyword",
    "info":"AssociationThread[{key , key , â¦} ï¢ {val , val , â¦}] gives the association ï key  ï¢ val , key  ï¢ val"
  },
  {
    "label":"AssumeDeterministic",
    "type":"keyword",
    "info":"AssumeDeterministic is an option for functions such as BayesianMinimization that specifies whether o"
  },
  {
    "label":"Assuming",
    "type":"keyword",
    "info":"Assuming[assum, expr] evaluates expr with assum appended to $Assumptions, so that assum is included "
  },
  {
    "label":"Assumptions",
    "type":"keyword",
    "info":"Assumptions is an option for functions such as Simplify, Refine, and Integrate that specifies defaul"
  },
  {
    "label":"AstronomicalData",
    "type":"keyword",
    "info":"AstronomicalData[\"name\", \"property\"] gives the value of the specified property of the astronomical o"
  },
  {
    "label":"Asymptotic",
    "type":"keyword",
    "info":"Asymptotic[expr, x ï¢ x ] gives an asymptotic approximation for expr near x .Asymptotic[expr, {x, x ,"
  },
  {
    "label":"AsymptoticDSolveValue",
    "type":"keyword",
    "info":"AsymptoticDSolveValue[eqn, f, x ï¢ x ] computes an asymptotic approximation to the differential equat"
  },
  {
    "label":"AsymptoticEqual",
    "type":"keyword",
    "info":"                           *                                                             *          "
  },
  {
    "label":"AsymptoticEquivalent",
    "type":"keyword",
    "info":"                                *                                           *                       "
  },
  {
    "label":"AsymptoticExpectation",
    "type":"keyword",
    "info":"AsymptoticExpectation[expr, x ï dist, a ï¢ a ] computes an asymptotic approximation for the expectati"
  },
  {
    "label":"AsymptoticGreater",
    "type":"keyword",
    "info":"                             *                                                             *        "
  },
  {
    "label":"AsymptoticGreaterEqual",
    "type":"keyword",
    "info":"                                  *                                                             *   "
  },
  {
    "label":"AsymptoticIntegrate",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"AsymptoticLess",
    "type":"keyword",
    "info":"                          *                                                             *           "
  },
  {
    "label":"AsymptoticLessEqual",
    "type":"keyword",
    "info":"                               *                                                             *      "
  },
  {
    "label":"AsymptoticOutputTracker",
    "type":"keyword",
    "info":"AsymptoticOutputTracker[sys, {f , â¦}, {p , â¦}] gives the state feedback control law that causes the "
  },
  {
    "label":"AsymptoticProbability",
    "type":"keyword",
    "info":"AsymptoticProbability[pred, x ï dist, a ï¢ a ] computes an asymptotic approximation for the probabili"
  },
  {
    "label":"AsymptoticProduct",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"AsymptoticRSolveValue",
    "type":"keyword",
    "info":"AsymptoticRSolveValue[eqn, f, x ï¢ â] computes an asymptotic approximation to the difference equation"
  },
  {
    "label":"AsymptoticSolve",
    "type":"keyword",
    "info":"AsymptoticSolve[eqn, y ï¢ b, x -> a] computes asymptotic approximations of solutions y[x] of the equa"
  },
  {
    "label":"AsymptoticSum",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"Asynchronous",
    "type":"keyword",
    "info":"Asynchronous is an option for WolframAlpha that determines whether to use the asynchronous features "
  },
  {
    "label":"AsynchronousTaskObject",
    "type":"keyword",
    "info":"AsynchronousTaskObject[\"name\", id, sessionid] is an object that represents asynchronous evaluations "
  },
  {
    "label":"AsynchronousTasks",
    "type":"keyword",
    "info":"AsynchronousTasks[] returns a list of running asynchronous tasks."
  },
  {
    "label":"Atom",
    "type":"keyword",
    "info":"Atom[\"sym\"] represents an atom with atomic symbol \"sym\".Atom[\"sym\", name ï¢ value, â¦] represents an a"
  },
  {
    "label":"AtomCoordinates",
    "type":"keyword",
    "info":"AtomCoordinates is an option for Molecule and related functions that specifies the three-dimensional"
  },
  {
    "label":"AtomCount",
    "type":"keyword",
    "info":"AtomCount[mol] gives the number of atoms in the molecule represented by mol.AtomCount[mol, patt] giv"
  },
  {
    "label":"AtomDiagramCoordinates",
    "type":"keyword",
    "info":"AtomDiagramCoordinates is an option for Molecule and related functions that specifies the two-dimens"
  },
  {
    "label":"AtomLabels",
    "type":"keyword",
    "info":"AtomLabels is an option for MoleculePlot and MoleculePlot3D that specifies what labels and label pos"
  },
  {
    "label":"AtomLabelStyle",
    "type":"keyword",
    "info":"AtomLabelStyle is an option for MoleculePlot and MoleculePlot3D that specifies the style to use for "
  },
  {
    "label":"AtomList",
    "type":"keyword",
    "info":"AtomList[mol] gives the list of atoms in the molecule represented by mol.AtomList[mol, patt] gives t"
  },
  {
    "label":"AtomQ",
    "type":"keyword",
    "info":"AtomQ[expr] yields True if expr is an expression which cannot be divided into subexpressions, and yi"
  },
  {
    "label":"AttachCell",
    "type":"keyword",
    "info":"AttachCell[expr] makes expr a cell attached to the current cell being evaluated.AttachCell[obj, expr"
  },
  {
    "label":"AttachedCell",
    "type":"keyword",
    "info":"AttachedCell is an option for Cells that indicates whether to find cells that created with AttachCel"
  },
  {
    "label":"AttentionLayer",
    "type":"keyword",
    "info":"AttentionLayer[] represents a trainable net layer that learns to pay attention to certain portions o"
  },
  {
    "label":"Attributes",
    "type":"keyword",
    "info":"Attributes[symbol] gives the list of attributes for a symbol. Attributes[\"symbol\"] gives the attribu"
  },
  {
    "label":"Audio",
    "type":"keyword",
    "info":"Audio[file] represents audio stored in the given file.Audio[url] represents audio stored in the give"
  },
  {
    "label":"AudioAmplify",
    "type":"keyword",
    "info":"AudioAmplify[audio, s] multiplies all samples of audio by a factor s. "
  },
  {
    "label":"AudioAnnotate",
    "type":"keyword",
    "info":"AudioAnnotate[audio, prop] computes the property prop and adds it as an annotation to audio.AudioAnn"
  },
  {
    "label":"AudioAnnotationLookup",
    "type":"keyword",
    "info":"AudioAnnotationLookup[audio] gives all annotations associated to audio.AudioAnnotationLookup[audio, "
  },
  {
    "label":"AudioBlockMap",
    "type":"keyword",
    "info":"AudioBlockMap[f, audio, dur] applies f to non-overlapping partitions of length dur in audio. AudioBl"
  },
  {
    "label":"AudioCapture",
    "type":"keyword",
    "info":"AudioCapture[] creates a temporary interactive interface for capturing an audio signal.AudioCapture["
  },
  {
    "label":"AudioChannelAssignment",
    "type":"keyword",
    "info":"AudioChannelAssignment is an option for Audio and related functions that specifies a mapping from au"
  },
  {
    "label":"AudioChannelCombine",
    "type":"keyword",
    "info":"AudioChannelCombine[{audio , audio , â¦}] creates a multichannel audio object by combining the sequen"
  },
  {
    "label":"AudioChannelMix",
    "type":"keyword",
    "info":"AudioChannelMix[audio] mixes channels of audio by averaging and returns a center-panned stereo audio"
  },
  {
    "label":"AudioChannels",
    "type":"keyword",
    "info":"AudioChannels[audio] returns the number of channels in the Audio object audio.AudioChannels[video] r"
  },
  {
    "label":"AudioChannelSeparate",
    "type":"keyword",
    "info":"AudioChannelSeparate[audio] gives a list of Audio objects, each of which represents one channel of a"
  },
  {
    "label":"AudioData",
    "type":"keyword",
    "info":"AudioData[audio] gives an array of audio samples.AudioData[audio, \"type\"] gives an array of audio sa"
  },
  {
    "label":"AudioDelay",
    "type":"keyword",
    "info":"AudioDelay[audio, delay] creates audio by adding repeated decaying echos to audio spaced by the spec"
  },
  {
    "label":"AudioDelete",
    "type":"keyword",
    "info":"AudioDelete[audio, t] deletes the first t seconds of audio.AudioDelete[audio, -t] deletes the last t"
  },
  {
    "label":"AudioDevice",
    "type":"keyword",
    "info":"AudioDevice is an option for Audio and related functions that specifies the device to use for playba"
  },
  {
    "label":"AudioDistance",
    "type":"keyword",
    "info":"AudioDistance[audio , audio ] returns a distance measure between audio  and audio .\n                "
  },
  {
    "label":"AudioEncoding",
    "type":"keyword",
    "info":"AudioEncoding is an option for Export and other functions that specifies the audio encoding to use w"
  },
  {
    "label":"AudioFade",
    "type":"keyword",
    "info":"AudioFade[audio] returns audio in which the beginning and end of audio are faded.AudioFade[audio, t]"
  },
  {
    "label":"AudioFrequencyShift",
    "type":"keyword",
    "info":"AudioFrequencyShift[audio, freq] gives audio by shifting the spectrum of audio by freq.AudioFrequenc"
  },
  {
    "label":"AudioGenerator",
    "type":"keyword",
    "info":"AudioGenerator[model] generates one second of audio of a given model.AudioGenerator[model, t] genera"
  },
  {
    "label":"AudioIdentify",
    "type":"keyword",
    "info":"AudioIdentify[audio] yields the result of attempting to identify what audio is a recording of.AudioI"
  },
  {
    "label":"AudioInputDevice",
    "type":"keyword",
    "info":"AudioInputDevice is an option for AudioCapture that specifies the device to use for audio recording."
  },
  {
    "label":"AudioInsert",
    "type":"keyword",
    "info":"AudioInsert[audio, t ï¢ new] inserts the audio signal new at time t.AudioInsert[audio, {t , t , â¦} ï¢ "
  },
  {
    "label":"AudioInstanceQ",
    "type":"keyword",
    "info":"AudioInstanceQ[audio, obj] gives True if audio sounds to be an instance of the object obj, and gives"
  },
  {
    "label":"AudioIntervals",
    "type":"keyword",
    "info":"AudioIntervals[audio] returns audible intervals of audio.AudioIntervals[audio, crit] returns interva"
  },
  {
    "label":"AudioJoin",
    "type":"keyword",
    "info":"AudioJoin[audio , audio , â¦] or AudioJoin[{audio , audio , â¦}] concatenates all audio  and returns a"
  },
  {
    "label":"AudioLabel",
    "type":"keyword",
    "info":"AudioLabel is an option for an Audio object that specifies the label to show on the object."
  },
  {
    "label":"AudioLength",
    "type":"keyword",
    "info":"AudioLength[audio] returns the number of samples in the Audio object audio."
  },
  {
    "label":"AudioLocalMeasurements",
    "type":"keyword",
    "info":"AudioLocalMeasurements[audio, \"prop\"] computes the property \"prop\" locally for partitions of audio.A"
  },
  {
    "label":"AudioLooping",
    "type":"keyword",
    "info":"AudioLooping is an option for AudioStream and related functions to specify the playback looping."
  },
  {
    "label":"AudioLoudness",
    "type":"keyword",
    "info":"AudioLoudness[audio] computes the loudness of audio according to the EBU momentary definition.AudioL"
  },
  {
    "label":"AudioMeasurements",
    "type":"keyword",
    "info":"AudioMeasurements[audio, \"prop\"] computes the property \"prop\" for the entire audio.AudioMeasurements"
  },
  {
    "label":"AudioNormalize",
    "type":"keyword",
    "info":"AudioNormalize[audio] normalizes audio so that the maximum absolute value of its samples is 1.AudioN"
  },
  {
    "label":"AudioOutputDevice",
    "type":"keyword",
    "info":"AudioOutputDevice is an option for Audio and related functions that specifies the device to use for "
  },
  {
    "label":"AudioOverlay",
    "type":"keyword",
    "info":"AudioOverlay[{audio , audio , â¦}] returns an audio object by overlaying all audio .\n                "
  },
  {
    "label":"AudioPad",
    "type":"keyword",
    "info":"AudioPad[audio, t] adds t seconds of silence to the end of audio.AudioPad[audio, {t , t }] adds t  s"
  },
  {
    "label":"AudioPan",
    "type":"keyword",
    "info":"AudioPan[audio] returns a center-panned stereo audio object from a mono audio. AudioPan[audio, pan] "
  },
  {
    "label":"AudioPartition",
    "type":"keyword",
    "info":"AudioPartition[audio, dur] partitions an audio object into non-overlapping segments of duration dur."
  },
  {
    "label":"AudioPause",
    "type":"keyword",
    "info":"AudioPause[] pauses the playback of all AudioStream objects.AudioPause[astream] pauses the playback "
  },
  {
    "label":"AudioPitchShift",
    "type":"keyword",
    "info":"AudioPitchShift[audio, r] applies pitch shifting to audio by the ratio r, shifting every frequency f"
  },
  {
    "label":"AudioPlay",
    "type":"keyword",
    "info":"AudioPlay[audio] returns a new AudioStream object from audio and starts the playback.AudioPlay[astre"
  },
  {
    "label":"AudioPlot",
    "type":"keyword",
    "info":"AudioPlot[audio] plots the waveform of audio.AudioPlot[{audio , audio , â¦}] plots waveforms of all a"
  },
  {
    "label":"AudioQ",
    "type":"keyword",
    "info":"AudioQ[audio] yields True if audio has the form of a valid Audio object, and False otherwise."
  },
  {
    "label":"AudioRecord",
    "type":"keyword",
    "info":"AudioRecord[] returns a new AudioStream object and starts to record from the default input audio dev"
  },
  {
    "label":"AudioReplace",
    "type":"keyword",
    "info":"AudioReplace[audio, {t , t } ï¢ new] replaces the audio signal between t  and t  with the new signal "
  },
  {
    "label":"AudioResample",
    "type":"keyword",
    "info":"AudioResample[audio, sr] resamples audio to have the sample rate of sr."
  },
  {
    "label":"AudioReverb",
    "type":"keyword",
    "info":"AudioReverb[audio] adds reverberation to audio.AudioReverb[audio, model] adds reverberation followin"
  },
  {
    "label":"AudioReverse",
    "type":"keyword",
    "info":"AudioReverse[audio] reverses audio so that the signal is played backward."
  },
  {
    "label":"AudioSampleRate",
    "type":"keyword",
    "info":"AudioSampleRate[audio] returns the sample rate of the Audio object audio.AudioSampleRate[video] retu"
  },
  {
    "label":"AudioSpectralMap",
    "type":"keyword",
    "info":"AudioSpectralMap[f, audio] transforms audio by applying the function f to its short-time Fourier tra"
  },
  {
    "label":"AudioSpectralTransformation",
    "type":"keyword",
    "info":"AudioSpectralTransformation[f, audio] returns a modified version of audio by applying a time-frequen"
  },
  {
    "label":"AudioSplit",
    "type":"keyword",
    "info":"AudioSplit[audio, t] splits audio at time t.AudioSplit[audio, {t , t , â¦}] splits audio at times t ."
  },
  {
    "label":"AudioStop",
    "type":"keyword",
    "info":"AudioStop[] stops the playback of all AudioStream objects.AudioStop[astream] stops the playback of t"
  },
  {
    "label":"AudioStream",
    "type":"keyword",
    "info":"AudioStream[source] creates a new AudioStream object from source.AudioStream[id] is an object that r"
  },
  {
    "label":"AudioStreams",
    "type":"keyword",
    "info":"AudioStreams[] returns all existing streams.AudioStreams[audio] returns all existing streams that or"
  },
  {
    "label":"AudioTimeStretch",
    "type":"keyword",
    "info":"AudioTimeStretch[audio, r] applies time stretching to audio by the specified factor r."
  },
  {
    "label":"AudioTrackApply",
    "type":"keyword",
    "info":"AudioTrackApply[f, video] applies the function f to the first audio track of the Video object video."
  },
  {
    "label":"AudioTrackSelection",
    "type":"keyword",
    "info":"AudioTrackSelection is an option that specifies the audio tracks of interest."
  },
  {
    "label":"AudioTrim",
    "type":"keyword",
    "info":"AudioTrim[audio] trims silence from the beginning and end of audio.AudioTrim[audio, t] returns the f"
  },
  {
    "label":"AudioType",
    "type":"keyword",
    "info":"AudioType[audio] returns the data type used to represent samples in the Audio object audio."
  },
  {
    "label":"AugmentedPolyhedron",
    "type":"keyword",
    "info":"AugmentedPolyhedron[poly] gives the augmented polyhedron poly by replacing each face by a pyramid. A"
  },
  {
    "label":"AugmentedSymmetricPolynomial",
    "type":"keyword",
    "info":"AugmentedSymmetricPolynomial[{r , r , â¦}] represents a formal augmented symmetric polynomial with ex"
  },
  {
    "label":"Authenticate",
    "type":"keyword",
    "info":"System`Authenticate"
  },
  {
    "label":"Authentication",
    "type":"keyword",
    "info":"Authentication is an option for cloud, web and SSH access functions that allows authentication param"
  },
  {
    "label":"AuthenticationDialog",
    "type":"keyword",
    "info":"AuthenticationDialog[] initiates a standard dialog for entering username\/password authentication inf"
  },
  {
    "label":"AutoAction",
    "type":"keyword",
    "info":"AutoAction is an option for objects such as Slider, Locator, and Button that specifies whether they "
  },
  {
    "label":"Autocomplete",
    "type":"keyword",
    "info":"Autocomplete[{string , string , â¦}, \"string\"] gives a list of the string  that can complete string.A"
  },
  {
    "label":"AutocompletionFunction",
    "type":"keyword",
    "info":"AutocompletionFunction[â¦] represents a function to be applied to a string to generate possible compl"
  },
  {
    "label":"AutoCopy",
    "type":"keyword",
    "info":"AutoCopy is an option for notebooks and cloud objects that specifies whether to automatically make a"
  },
  {
    "label":"AutocorrelationTest",
    "type":"keyword",
    "info":"AutocorrelationTest[data] tests whether the data is autocorrelated.AutocorrelationTest[data, k] test"
  },
  {
    "label":"AutoDelete",
    "type":"keyword",
    "info":"AutoDelete is an option for boxes that specifies whether a box is automatically deleted when its con"
  },
  {
    "label":"AutoEvaluateEvents",
    "type":"keyword",
    "info":"System`AutoEvaluateEvents"
  },
  {
    "label":"AutoGeneratedPackage",
    "type":"keyword",
    "info":"AutoGeneratedPackage is an option for notebooks that specifies whether a package is automatically cr"
  },
  {
    "label":"AutoIndent",
    "type":"keyword",
    "info":"AutoIndent is an option for Style and Cell that specifies what automatic indentation should be done "
  },
  {
    "label":"AutoIndentSpacings",
    "type":"keyword",
    "info":"System`AutoIndentSpacings"
  },
  {
    "label":"AutoItalicWords",
    "type":"keyword",
    "info":"AutoItalicWords is an option for Cell that gives a list of words that should automatically be put in"
  },
  {
    "label":"AutoloadPath",
    "type":"keyword",
    "info":"AutoloadPath is a global option that specifies from which directories packages are automatically loa"
  },
  {
    "label":"AutoMatch",
    "type":"keyword",
    "info":"System`AutoMatch"
  },
  {
    "label":"Automatic",
    "type":"keyword",
    "info":"Automatic represents an option or other value that is to be chosen automatically by a builtâin funct"
  },
  {
    "label":"AutomaticImageSize",
    "type":"keyword",
    "info":"System`AutomaticImageSize"
  },
  {
    "label":"AutoMultiplicationSymbol",
    "type":"keyword",
    "info":"AutoMultiplicationSymbol is an option for objects such as Cell and Notebook that specifies when to a"
  },
  {
    "label":"AutoNumberFormatting",
    "type":"keyword",
    "info":"System`AutoNumberFormatting"
  },
  {
    "label":"AutoOpenNotebooks",
    "type":"keyword",
    "info":"AutoOpenNotebooks is a global option that specifies which notebooks should be automatically opened w"
  },
  {
    "label":"AutoOpenPalettes",
    "type":"keyword",
    "info":"AutoOpenPalettes is a global option that specifies the palettes that are automatically opened when t"
  },
  {
    "label":"AutoOperatorRenderings",
    "type":"keyword",
    "info":"AutoOperatorRenderings is an option for cells and notebooks that specifies automatic renderings to b"
  },
  {
    "label":"AutoQuoteCharacters",
    "type":"keyword",
    "info":"System`AutoQuoteCharacters"
  },
  {
    "label":"AutoRefreshed",
    "type":"keyword",
    "info":"AutoRefreshed[expr] represents an expression to be reevaluated every hour and made available in the "
  },
  {
    "label":"AutoRemove",
    "type":"keyword",
    "info":"AutoRemove is an option specifying whether tasks, generators, cloud objects and related constructs s"
  },
  {
    "label":"AutorunSequencing",
    "type":"keyword",
    "info":"AutorunSequencing is an option for Manipulate that specifies how autorun should use the controls pro"
  },
  {
    "label":"AutoScaling",
    "type":"keyword",
    "info":"System`AutoScaling"
  },
  {
    "label":"AutoScroll",
    "type":"keyword",
    "info":"AutoScroll is an option to SelectionMove and related functions that specifies whether a notebook sho"
  },
  {
    "label":"AutoSpacing",
    "type":"keyword",
    "info":"AutoSpacing is an option for Style and Cell that specifies whether spaces between successive charact"
  },
  {
    "label":"AutoStyleOptions",
    "type":"keyword",
    "info":"System`AutoStyleOptions"
  },
  {
    "label":"AutoStyleWords",
    "type":"keyword",
    "info":"System`AutoStyleWords"
  },
  {
    "label":"AutoSubmitting",
    "type":"keyword",
    "info":"AutoSubmitting[spec] represents an element of a form that automatically submits the whole form if it"
  },
  {
    "label":"Axes",
    "type":"keyword",
    "info":"Axes is an option for graphics functions that specifies whether axes should be drawn. "
  },
  {
    "label":"AxesEdge",
    "type":"keyword",
    "info":"AxesEdge is an option for three-dimensional graphics functions that specifies on which edges of the "
  },
  {
    "label":"AxesLabel",
    "type":"keyword",
    "info":"AxesLabel is an option for graphics functions that specifies labels for axes. "
  },
  {
    "label":"AxesOrigin",
    "type":"keyword",
    "info":"AxesOrigin is an option for graphics functions that specifies where any axes drawn should cross. "
  },
  {
    "label":"AxesStyle",
    "type":"keyword",
    "info":"AxesStyle is an option for graphics functions that specifies how axes should be rendered. "
  },
  {
    "label":"AxiomaticTheory",
    "type":"keyword",
    "info":"AxiomaticTheory[\"theory\"] gives an axiomatic representation of the specified axiomatic theory.Axioma"
  },
  {
    "label":"Axis",
    "type":"keyword",
    "info":"Axis is a symbol that represents the axis for purposes of alignment and positioning. "
  },
  {
    "label":"Axis3DBox",
    "type":"keyword",
    "info":"System`Axis3DBox"
  },
  {
    "label":"Axis3DBoxOptions",
    "type":"keyword",
    "info":"System`Axis3DBoxOptions"
  },
  {
    "label":"AxisBox",
    "type":"keyword",
    "info":"System`AxisBox"
  },
  {
    "label":"AxisBoxOptions",
    "type":"keyword",
    "info":"System`AxisBoxOptions"
  },
  {
    "label":"AxisLabel",
    "type":"keyword",
    "info":"AxisLabel is an option for AxisObject that specifies a label for the axis."
  },
  {
    "label":"AxisObject",
    "type":"keyword",
    "info":"AxisObject[path] is a Graphics primitive that represents an axis with a quantitative scale along the"
  },
  {
    "label":"AxisStyle",
    "type":"keyword",
    "info":"AxisStyle is an option for AxisObject that specifies how to style the path of an axis."
  },
  {
    "label":"BabyMonsterGroupB",
    "type":"keyword",
    "info":"BabyMonsterGroupB[] represents the sporadic simple baby monster group B."
  },
  {
    "label":"Back",
    "type":"keyword",
    "info":"Back is a symbol that represents the back of a graphic for purposes of placement and alignment."
  },
  {
    "label":"BackFaceColor",
    "type":"keyword",
    "info":"System`BackFaceColor"
  },
  {
    "label":"BackFaceGlowColor",
    "type":"keyword",
    "info":"System`BackFaceGlowColor"
  },
  {
    "label":"BackFaceOpacity",
    "type":"keyword",
    "info":"System`BackFaceOpacity"
  },
  {
    "label":"BackFaceSpecularColor",
    "type":"keyword",
    "info":"System`BackFaceSpecularColor"
  },
  {
    "label":"BackFaceSpecularExponent",
    "type":"keyword",
    "info":"System`BackFaceSpecularExponent"
  },
  {
    "label":"BackFaceSurfaceAppearance",
    "type":"keyword",
    "info":"System`BackFaceSurfaceAppearance"
  },
  {
    "label":"BackFaceTexture",
    "type":"keyword",
    "info":"System`BackFaceTexture"
  },
  {
    "label":"Background",
    "type":"keyword",
    "info":"Background is an option that specifies what background color to use. "
  },
  {
    "label":"BackgroundAppearance",
    "type":"keyword",
    "info":"System`BackgroundAppearance"
  },
  {
    "label":"BackgroundTasksSettings",
    "type":"keyword",
    "info":"System`BackgroundTasksSettings"
  },
  {
    "label":"Backslash",
    "type":"keyword",
    "info":"Backslash[x, y, â¦] displays as x â y â â¦."
  },
  {
    "label":"Backsubstitution",
    "type":"keyword",
    "info":"System`Backsubstitution"
  },
  {
    "label":"Backward",
    "type":"keyword",
    "info":"Backward is a symbol that represents the backward direction for purposes of motion and animation."
  },
  {
    "label":"Ball",
    "type":"keyword",
    "info":"Ball[p] represents the unit ball centered at the point p.Ball[p, r] represents the ball of radius r "
  },
  {
    "label":"Band",
    "type":"keyword",
    "info":"Band[{i, j}] represents the sequence of positions on the diagonal band that starts with {i, j} in a "
  },
  {
    "label":"BandpassFilter",
    "type":"keyword",
    "info":"BandpassFilter[data, {Ï , Ï }] applies a bandpass filter with cutoff frequencies Ï  and Ï  to an arr"
  },
  {
    "label":"BandstopFilter",
    "type":"keyword",
    "info":"BandstopFilter[data, {Ï , Ï }] applies a bandstop filter with cutoff frequencies Ï  and Ï  to an arr"
  },
  {
    "label":"BarabasiAlbertGraphDistribution",
    "type":"keyword",
    "info":"BarabasiAlbertGraphDistribution[n, k] represents a BarabasiâAlbert graph distribution for n-vertex g"
  },
  {
    "label":"BarChart",
    "type":"keyword",
    "info":"BarChart[{y , y , â¦, y }] makes a bar chart with bar lengths y ,  y , â¦.BarChart[{â¦, w [y , â¦], â¦, w"
  },
  {
    "label":"BarChart3D",
    "type":"keyword",
    "info":"BarChart3D[{y , y , â¦}] makes a 3D bar chart with bar lengths y , y , â¦ .BarChart3D[{â¦, w [y , â¦], â¦"
  },
  {
    "label":"BarcodeImage",
    "type":"keyword",
    "info":"BarcodeImage[\"string\", format] generates a barcode image of \"string\" in the specified format.Barcode"
  },
  {
    "label":"BarcodeRecognize",
    "type":"keyword",
    "info":"BarcodeRecognize[image] recognizes a barcode in image and returns it as a string.BarcodeRecognize[im"
  },
  {
    "label":"BaringhausHenzeTest",
    "type":"keyword",
    "info":"BaringhausHenzeTest[data] tests whether data follows a MultinormalDistribution using the Baringhausâ"
  },
  {
    "label":"BarLegend",
    "type":"keyword",
    "info":"BarLegend[cf] generates a legend that identifies colors from the color function cf with an automatic"
  },
  {
    "label":"BarlowProschanImportance",
    "type":"keyword",
    "info":"BarlowProschanImportance[rdist] gives the BarlowâProschan importances for all components in the Reli"
  },
  {
    "label":"BarnesG",
    "type":"keyword",
    "info":"BarnesG[z] gives the Barnes G-function G(z)."
  },
  {
    "label":"BarOrigin",
    "type":"keyword",
    "info":"BarOrigin is an option to BarChart and related functions that specifies the origin placement for bar"
  },
  {
    "label":"BarSpacing",
    "type":"keyword",
    "info":"BarSpacing is an option to BarChart and related functions that controls the spacing between bars and"
  },
  {
    "label":"BartlettHannWindow",
    "type":"keyword",
    "info":"BartlettHannWindow[x] represents a BartlettâHann window function of x."
  },
  {
    "label":"BartlettWindow",
    "type":"keyword",
    "info":"BartlettWindow[x] represents a Bartlett window function of x."
  },
  {
    "label":"BaseDecode",
    "type":"keyword",
    "info":"BaseDecode[\"string\"] decodes the Base64 data contained in a string and returns the result as a byte "
  },
  {
    "label":"BaseEncode",
    "type":"keyword",
    "info":"BaseEncode[ba] encodes the byte array ba as a Base64 string.BaseEncode[ba, \"encoding\"] encodes using"
  },
  {
    "label":"BaseForm",
    "type":"keyword",
    "info":"BaseForm[expr, n] prints with the numbers in expr given in base n. "
  },
  {
    "label":"Baseline",
    "type":"keyword",
    "info":"Baseline is a symbol that represents the baseline for purposes of alignment and positioning. "
  },
  {
    "label":"BaselinePosition",
    "type":"keyword",
    "info":"BaselinePosition is an option that specifies where the baseline of an object is considered to be for"
  },
  {
    "label":"BaseStyle",
    "type":"keyword",
    "info":"BaseStyle is an option for formatting and related constructs that specifies the base style to use fo"
  },
  {
    "label":"BasicRecurrentLayer",
    "type":"keyword",
    "info":"BasicRecurrentLayer[n] represents a trainable recurrent layer that takes a sequence of vectors and p"
  },
  {
    "label":"BatchNormalizationLayer",
    "type":"keyword",
    "info":"BatchNormalizationLayer[] represents a trainable net layer that normalizes its input data by learnin"
  },
  {
    "label":"BatchSize",
    "type":"keyword",
    "info":"BatchSize is an option for NetTrain and related functions that specifies the size of a batch of exam"
  },
  {
    "label":"BatesDistribution",
    "type":"keyword",
    "info":"BatesDistribution[n] represents the distribution of a mean of n random variables uniformly distribut"
  },
  {
    "label":"BattleLemarieWavelet",
    "type":"keyword",
    "info":"BattleLemarieWavelet[] represents the BattleâLemariÃ© wavelet of order 3.BattleLemarieWavelet[n] repr"
  },
  {
    "label":"BayesianMaximization",
    "type":"keyword",
    "info":"BayesianMaximization[f, {conf , conf , â¦}] gives an object representing the result of Bayesian maxim"
  },
  {
    "label":"BayesianMaximizationObject",
    "type":"keyword",
    "info":"BayesianMaximizationObject[â¦] represents the result of a Bayesian maximization process."
  },
  {
    "label":"BayesianMinimization",
    "type":"keyword",
    "info":"BayesianMinimization[f, {conf , conf , â¦}] gives an object representing the result of Bayesian minim"
  },
  {
    "label":"BayesianMinimizationObject",
    "type":"keyword",
    "info":"BayesianMinimizationObject[â¦] represents the result of a Bayesian minimization process. "
  },
  {
    "label":"Because",
    "type":"keyword",
    "info":"Because[x, y] displays as x â\\[Micro] y."
  },
  {
    "label":"BeckmannDistribution",
    "type":"keyword",
    "info":"BeckmannDistribution[Î¼ , Î¼ , Ï , Ï ] represents the Beckmann distribution with means Î¼  and Î¼  and s"
  },
  {
    "label":"Beep",
    "type":"keyword",
    "info":"Beep[] generates an audible beep when evaluated. "
  },
  {
    "label":"Before",
    "type":"keyword",
    "info":"Before is a symbol that represents the region before an object for purposes of placement."
  },
  {
    "label":"Begin",
    "type":"keyword",
    "info":"Begin[\"context`\"] resets the current context. "
  },
  {
    "label":"BeginDialogPacket",
    "type":"keyword",
    "info":"BeginDialogPacket[integer] is a WSTP packet that indicates the start of the Dialog subsession refere"
  },
  {
    "label":"BeginFrontEndInteractionPacket",
    "type":"keyword",
    "info":"System`BeginFrontEndInteractionPacket"
  },
  {
    "label":"BeginPackage",
    "type":"keyword",
    "info":"BeginPackage[\"context`\"] makes context` and System` the only active contexts. BeginPackage[\"context`"
  },
  {
    "label":"BellB",
    "type":"keyword",
    "info":"BellB[n] gives the Bell number B . BellB[n, x] gives the Bell polynomial B (x). \n                   "
  },
  {
    "label":"BellY",
    "type":"keyword",
    "info":"BellY[n, k, {x , â¦, x         }] gives the partial Bell polynomial Y    (x , â¦, x         ).BellY[n,"
  },
  {
    "label":"Below",
    "type":"keyword",
    "info":"Below is a symbol that represents the region below an object for purposes of placement."
  },
  {
    "label":"BenfordDistribution",
    "type":"keyword",
    "info":"BenfordDistribution[b] represents a Benford distribution with base parameter b."
  },
  {
    "label":"BeniniDistribution",
    "type":"keyword",
    "info":"BeniniDistribution[Î\\[PlusMinus], Î\.b2, Ï] represents a Benini distribution with shape parameters Î\\[PlusMinus] and Î\.b2 and scale"
  },
  {
    "label":"BenktanderGibratDistribution",
    "type":"keyword",
    "info":"BenktanderGibratDistribution[a, b] represents a Benktander distribution of type I with parameters a "
  },
  {
    "label":"BenktanderWeibullDistribution",
    "type":"keyword",
    "info":"BenktanderWeibullDistribution[a, b] represents a Benktander distribution of type II with parameters "
  },
  {
    "label":"BernoulliB",
    "type":"keyword",
    "info":"BernoulliB[n] gives the Bernoulli number B . BernoulliB[n, x] gives the Bernoulli polynomial B (x). "
  },
  {
    "label":"BernoulliDistribution",
    "type":"keyword",
    "info":"BernoulliDistribution[p] represents a Bernoulli distribution with probability parameter p."
  },
  {
    "label":"BernoulliGraphDistribution",
    "type":"keyword",
    "info":"BernoulliGraphDistribution[n, p] represents a Bernoulli graph distribution for n-vertex graphs with "
  },
  {
    "label":"BernoulliProcess",
    "type":"keyword",
    "info":"BernoulliProcess[p] represents a Bernoulli process with event probability p."
  },
  {
    "label":"BernsteinBasis",
    "type":"keyword",
    "info":"                                         th\nBernsteinBasis[d, n, x] represents the nï    Bernstein ba"
  },
  {
    "label":"BesagL",
    "type":"keyword",
    "info":"BesagL[pdata, r] estimates Besag's L function L(r) for point data pdata at radius r.BesagL[pproc, r]"
  },
  {
    "label":"BesselFilterModel",
    "type":"keyword",
    "info":"BesselFilterModel[n] designs a lowpass Bessel filter of order n and cutoff frequency 1.BesselFilterM"
  },
  {
    "label":"BesselI",
    "type":"keyword",
    "info":"BesselI[n, z] gives the modified Bessel function of the first kind I (z). \n                         "
  },
  {
    "label":"BesselJ",
    "type":"keyword",
    "info":"BesselJ[n, z] gives the Bessel function of the first kind J (z). \n                                  "
  },
  {
    "label":"BesselJZero",
    "type":"keyword",
    "info":"                                   th                                                               "
  },
  {
    "label":"BesselK",
    "type":"keyword",
    "info":"BesselK[n, z] gives the modified Bessel function of the second kind K (z). \n                        "
  },
  {
    "label":"BesselY",
    "type":"keyword",
    "info":"BesselY[n, z] gives the Bessel function of the second kind Y (z). \n                                 "
  },
  {
    "label":"BesselYZero",
    "type":"keyword",
    "info":"                                   th                                                               "
  },
  {
    "label":"Beta",
    "type":"keyword",
    "info":"Beta[a, b] gives the Euler beta function Î(a, b). Beta[z, a, b] gives the incomplete beta function Î"
  },
  {
    "label":"BetaBinomialDistribution",
    "type":"keyword",
    "info":"BetaBinomialDistribution[Î\\[PlusMinus], Î\.b2, n] represents a beta binomial mixture distribution with beta distribu"
  },
  {
    "label":"BetaDistribution",
    "type":"keyword",
    "info":"BetaDistribution[Î\\[PlusMinus], Î\.b2] represents a continuous beta distribution with shape parameters Î\\[PlusMinus] and Î\.b2."
  },
  {
    "label":"BetaNegativeBinomialDistribution",
    "type":"keyword",
    "info":"BetaNegativeBinomialDistribution[Î\\[PlusMinus], Î\.b2, n] represents a beta negative binomial mixture distribution w"
  },
  {
    "label":"BetaPrimeDistribution",
    "type":"keyword",
    "info":"BetaPrimeDistribution[p, q] represents a beta prime distribution with shape parameters p and q. Beta"
  },
  {
    "label":"BetaRegularized",
    "type":"keyword",
    "info":"BetaRegularized[z, a, b] gives the regularized incomplete beta function I (a, b). \n                 "
  },
  {
    "label":"Between",
    "type":"keyword",
    "info":"Between[x, {min, max}] is equivalent to min â¤ x â¤ max.Between[x, {{min , max }, {min , max }, â¦}] is"
  },
  {
    "label":"BetweennessCentrality",
    "type":"keyword",
    "info":"BetweennessCentrality[g] gives a list of betweenness centralities for the vertices in the graph g.Be"
  },
  {
    "label":"Beveled",
    "type":"keyword",
    "info":"System`Beveled"
  },
  {
    "label":"BeveledPolyhedron",
    "type":"keyword",
    "info":"BeveledPolyhedron[poly] gives the beveled polyhedron of poly, by beveling each edge. BeveledPolyhedr"
  },
  {
    "label":"BezierCurve",
    "type":"keyword",
    "info":"BezierCurve[{pt , pt , â¦}] is a graphics primitive that represents a BÃ©zier curve with control point"
  },
  {
    "label":"BezierCurve3DBox",
    "type":"keyword",
    "info":"System`BezierCurve3DBox"
  },
  {
    "label":"BezierCurve3DBoxOptions",
    "type":"keyword",
    "info":"BezierCurve3DBoxOptions ï¢ {opt  ï¢ val , opt  ï¢ val , â¦} is an option that specifies settings for Bez"
  },
  {
    "label":"BezierCurveBox",
    "type":"keyword",
    "info":"System`BezierCurveBox"
  },
  {
    "label":"BezierCurveBoxOptions",
    "type":"keyword",
    "info":"BezierCurveBoxOptions ï¢ {opt  ï¢ val , opt  ï¢ val , â¦} is an option that specifies settings for Bezie"
  },
  {
    "label":"BezierFunction",
    "type":"keyword",
    "info":"BezierFunction[{pt , pt , â¦}] represents a BÃ©zier function for a curve defined by the control points"
  },
  {
    "label":"BilateralFilter",
    "type":"keyword",
    "info":"BilateralFilter[data, Ï, Î¼] applies a bilateral filter of spatial spread Ï and pixel value spread Î¼ "
  },
  {
    "label":"BilateralLaplaceTransform",
    "type":"keyword",
    "info":"BilateralLaplaceTransform[expr, t, s] gives the bilateral Laplace transform of expr. BilateralLaplac"
  },
  {
    "label":"BilateralZTransform",
    "type":"keyword",
    "info":"BilateralZTransform[expr, n, z] gives the bilateral Z transform of expr.BilateralZTransform[expr, {n"
  },
  {
    "label":"Binarize",
    "type":"keyword",
    "info":"Binarize[image] creates a binary image from image by replacing all values above a globally determine"
  },
  {
    "label":"BinaryDeserialize",
    "type":"keyword",
    "info":"BinaryDeserialize[ByteArray[â¦]] recovers an expression from a binary representation generated by Bin"
  },
  {
    "label":"BinaryDistance",
    "type":"keyword",
    "info":"BinaryDistance[u, v] gives the binary distance between vectors u and v, equal to 0 if they are ident"
  },
  {
    "label":"BinaryFormat",
    "type":"keyword",
    "info":"BinaryFormat is an option for OpenRead and related functions that specifies that a stream should be "
  },
  {
    "label":"BinaryImageQ",
    "type":"keyword",
    "info":"BinaryImageQ[image] yields True if image has the form of a binary Image or Image3D object, and False"
  },
  {
    "label":"BinaryRead",
    "type":"keyword",
    "info":"BinaryRead[stream] reads one byte of raw binary data from an input stream, and returns an integer fr"
  },
  {
    "label":"BinaryReadList",
    "type":"keyword",
    "info":"BinaryReadList[\"file\"] reads all remaining bytes from a file, and returns them as a list of integers"
  },
  {
    "label":"BinarySerialize",
    "type":"keyword",
    "info":"BinarySerialize[expr] gives a binary representation of any expression expr as a ByteArray object."
  },
  {
    "label":"BinaryWrite",
    "type":"keyword",
    "info":"BinaryWrite[channel, b] writes a byte of data, specified as an integer from 0 to 255. BinaryWrite[ch"
  },
  {
    "label":"BinCounts",
    "type":"keyword",
    "info":"BinCounts[{x , x , â¦}] counts the number of elements x  whose values lie in successive integer bins."
  },
  {
    "label":"BinLists",
    "type":"keyword",
    "info":"BinLists[{x , x , â¦}] gives lists of the elements x  whose values lie in successive integer bins.Bin"
  },
  {
    "label":"BinnedVariogramList",
    "type":"keyword",
    "info":"BinnedVariogramList[{loc  ï¢ val , loc  ï¢ val , â¦}] computes a variogram using binned values. BinnedV"
  },
  {
    "label":"Binomial",
    "type":"keyword",
    "info":"Binomial[n, m] gives the binomial coefficient (n).\n\n                                               m"
  },
  {
    "label":"BinomialDistribution",
    "type":"keyword",
    "info":"BinomialDistribution[n, p] represents a binomial distribution with n trials and success probability "
  },
  {
    "label":"BinomialPointProcess",
    "type":"keyword",
    "info":"BinomialPointProcess[n, reg] represents a binomial point process with n points in the region reg."
  },
  {
    "label":"BinomialProcess",
    "type":"keyword",
    "info":"BinomialProcess[p] represents a binomial process with event probability p."
  },
  {
    "label":"BinormalDistribution",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"BiorthogonalSplineWavelet",
    "type":"keyword",
    "info":"BiorthogonalSplineWavelet[] represents a biorthogonal spline wavelet of order 4 and dual order 2.Bio"
  },
  {
    "label":"BioSequence",
    "type":"keyword",
    "info":"BioSequence[type, \"seq\"] represents the biomolecular sequence of the given type corresponding to a s"
  },
  {
    "label":"BioSequenceBackTranslateList",
    "type":"keyword",
    "info":"BioSequenceBackTranslateList[bioseq] gives the generalized back translations of a peptide sequence b"
  },
  {
    "label":"BioSequenceComplement",
    "type":"keyword",
    "info":"BioSequenceComplement[bioseq] gives the biological complement of the sequence bioseq."
  },
  {
    "label":"BioSequenceInstances",
    "type":"keyword",
    "info":"BioSequenceInstances[bioseq] expands the possibly degenerate sequence bioseq into all fully specifie"
  },
  {
    "label":"BioSequenceModify",
    "type":"keyword",
    "info":"BioSequenceModify[seq, \"mod\"] gives the result of applying the modification \"mod\" to the sequence se"
  },
  {
    "label":"BioSequencePlot",
    "type":"keyword",
    "info":"BioSequencePlot[bioseq] creates a two-dimensional schematic diagram of the biomolecular sequence bio"
  },
  {
    "label":"BioSequenceQ",
    "type":"keyword",
    "info":"BioSequenceQ[bioseq] returns True if bioseq is a valid BioSequence expression, and False otherwise.B"
  },
  {
    "label":"BioSequenceReverseComplement",
    "type":"keyword",
    "info":"BioSequenceReverseComplement[bioseq] biologically complements and reverses the sequence bioseq."
  },
  {
    "label":"BioSequenceTranscribe",
    "type":"keyword",
    "info":"BioSequenceTranscribe[bioseq] transcribes DNA into RNA or inverts the transcription of RNA back to D"
  },
  {
    "label":"BioSequenceTranslate",
    "type":"keyword",
    "info":"BioSequenceTranslate[bioseq] translates a DNA or RNA sequence bioseq to a peptide sequence.BioSequen"
  },
  {
    "label":"BipartiteGraphQ",
    "type":"keyword",
    "info":"BipartiteGraphQ[g] yields True if the graph g is a bipartite graph and False otherwise."
  },
  {
    "label":"BiquadraticFilterModel",
    "type":"keyword",
    "info":"BiquadraticFilterModel[{Ï, q}] creates a lowpass biquadratic filter using the characteristic frequen"
  },
  {
    "label":"BirnbaumImportance",
    "type":"keyword",
    "info":"BirnbaumImportance[rdist, t] gives the Birnbaum importances for all components in the ReliabilityDis"
  },
  {
    "label":"BirnbaumSaundersDistribution",
    "type":"keyword",
    "info":"BirnbaumSaundersDistribution[Î\\[PlusMinus], Î»] represents the BirnbaumâSaunders distribution with shape paramete"
  },
  {
    "label":"BitAnd",
    "type":"keyword",
    "info":"BitAnd[n , n , â¦] gives the bitwise AND of the integers n . \n        1   2                          "
  },
  {
    "label":"BitClear",
    "type":"keyword",
    "info":"                                                                      k\nBitClear[n, k] sets to 0 the"
  },
  {
    "label":"BitGet",
    "type":"keyword",
    "info":"                                                               k\nBitGet[n, k] gets the bit correspon"
  },
  {
    "label":"BitLength",
    "type":"keyword",
    "info":"BitLength[n] gives the number of binary bits necessary to represent the integer n. "
  },
  {
    "label":"BitNot",
    "type":"keyword",
    "info":"BitNot[n] gives the bitwise NOT of the integer n. "
  },
  {
    "label":"BitOr",
    "type":"keyword",
    "info":"BitOr[n , n , â¦] gives the bitwise OR of the integers n . \n       1   2                             "
  },
  {
    "label":"BitRate",
    "type":"keyword",
    "info":"BitRate is an option that specifies an approximate number of bits per second when creating video and"
  },
  {
    "label":"BitSet",
    "type":"keyword",
    "info":"                                                                    k\nBitSet[n, k] sets to 1 the bit"
  },
  {
    "label":"BitShiftLeft",
    "type":"keyword",
    "info":"BitShiftLeft[n, k] shifts the binary bits in the integer n to the left by k places, padding with zer"
  },
  {
    "label":"BitShiftRight",
    "type":"keyword",
    "info":"BitShiftRight[n, k] shifts the binary bits in the integer n to the right by k places, dropping bits "
  },
  {
    "label":"BitXor",
    "type":"keyword",
    "info":"BitXor[n , n , â¦] gives the bitwise XOR of the integers n . \n        1   2                          "
  },
  {
    "label":"BiweightLocation",
    "type":"keyword",
    "info":"BiweightLocation[list] gives the value of the biweight location estimator of the elements in list.Bi"
  },
  {
    "label":"BiweightMidvariance",
    "type":"keyword",
    "info":"BiweightMidvariance[list] gives the value of the biweight midvariance of the elements in list.Biweig"
  },
  {
    "label":"Black",
    "type":"keyword",
    "info":"Black represents the color black in graphics or style specifications. "
  },
  {
    "label":"BlackmanHarrisWindow",
    "type":"keyword",
    "info":"BlackmanHarrisWindow[x] represents a BlackmanâHarris window function of x."
  },
  {
    "label":"BlackmanNuttallWindow",
    "type":"keyword",
    "info":"BlackmanNuttallWindow[x] represents a BlackmanâNuttall window function of x."
  },
  {
    "label":"BlackmanWindow",
    "type":"keyword",
    "info":"BlackmanWindow[x] represents a Blackman window function of x."
  },
  {
    "label":"Blank",
    "type":"keyword",
    "info":"_ or Blank[] is a pattern object that can stand for any Wolfram Language expression. _h or Blank[h] "
  },
  {
    "label":"BlankForm",
    "type":"keyword",
    "info":"BlankForm is an internal symbol used for formatting and printing."
  },
  {
    "label":"BlankNullSequence",
    "type":"keyword",
    "info":"___ (three _ characters) or BlankNullSequence[] is a pattern object that can stand for any sequence "
  },
  {
    "label":"BlankSequence",
    "type":"keyword",
    "info":"__ (two _ characters) or BlankSequence[] is a pattern object that can stand for any sequence of one "
  },
  {
    "label":"Blend",
    "type":"keyword",
    "info":"Blend[{col , col }, x] gives a color obtained by blending a fraction 1 - x of color col  and x of co"
  },
  {
    "label":"Block",
    "type":"keyword",
    "info":"Block[{x, y, â¦}, expr] specifies that expr is to be evaluated with local values for the symbols x, y"
  },
  {
    "label":"BlockchainAddressData",
    "type":"keyword",
    "info":"BlockchainAddressData[\"address\"] gives available information connected with the specified address on"
  },
  {
    "label":"BlockchainBase",
    "type":"keyword",
    "info":"BlockchainBase is an option for various blockchain functions that specifies which blockchain to use."
  },
  {
    "label":"BlockchainBlockData",
    "type":"keyword",
    "info":"BlockchainBlockData[\"hash\"] gives information about the block with the specified hash on the blockch"
  },
  {
    "label":"BlockchainContractValue",
    "type":"keyword",
    "info":"BlockchainContractValue[caddr] gets the result obtained from a Wolfram expression contract at blockc"
  },
  {
    "label":"BlockchainData",
    "type":"keyword",
    "info":"BlockchainData[] gives information about the blockchain specified by $BlockchainBase.BlockchainData["
  },
  {
    "label":"BlockchainGet",
    "type":"keyword",
    "info":"BlockchainGet[id] retrieves data from the Wolfram blockchain for the transaction with the specified "
  },
  {
    "label":"BlockchainKeyEncode",
    "type":"keyword",
    "info":"BlockchainKeyEncode[key, form] encodes a private or public key in the specified blockchain format."
  },
  {
    "label":"BlockchainPut",
    "type":"keyword",
    "info":"BlockchainPut[expr] adds expr to the Wolfram blockchain."
  },
  {
    "label":"BlockchainTokenData",
    "type":"keyword",
    "info":"BlockchainTokenData[\"name\"] gives information about the use of tokens with the specified name on a b"
  },
  {
    "label":"BlockchainTransaction",
    "type":"keyword",
    "info":"BlockchainTransaction[assoc] represents a blockchain transaction built from the components in the as"
  },
  {
    "label":"BlockchainTransactionData",
    "type":"keyword",
    "info":"BlockchainTransactionData[txid] gives information about the blockchain transaction with ID txid on t"
  },
  {
    "label":"BlockchainTransactionSign",
    "type":"keyword",
    "info":"BlockchainTransactionSign[obj, key] digitally signs a blockchain transaction using the specified pri"
  },
  {
    "label":"BlockchainTransactionSubmit",
    "type":"keyword",
    "info":"BlockchainTransactionSubmit[obj] submits the transaction specified in the BlockchainTransaction obje"
  },
  {
    "label":"BlockMap",
    "type":"keyword",
    "info":"BlockMap[f, list, n] applies f to non-overlapping sublists of length n in list. BlockMap[f, list, n,"
  },
  {
    "label":"BlockRandom",
    "type":"keyword",
    "info":"BlockRandom[expr] evaluates expr with all pseudorandom generators localized, so that uses of SeedRan"
  },
  {
    "label":"BlomqvistBeta",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"BlomqvistBetaTest",
    "type":"keyword",
    "info":"BlomqvistBetaTest[v , v ] tests whether the vectors v  and v  are independent.BlomqvistBetaTest[m , "
  },
  {
    "label":"Blue",
    "type":"keyword",
    "info":"Blue represents the color blue in graphics or style specifications. "
  },
  {
    "label":"Blur",
    "type":"keyword",
    "info":"Blur[image] gives a blurred version of image.Blur[image, r] gives a version of image blurred over pi"
  },
  {
    "label":"BodePlot",
    "type":"keyword",
    "info":"BodePlot[lsys] generates a Bode plot of a linear time-invariant system lsys.BodePlot[lsys, {Ï   , Ï "
  },
  {
    "label":"BohmanWindow",
    "type":"keyword",
    "info":"BohmanWindow[x] represents a Bohman window function of x."
  },
  {
    "label":"Bold",
    "type":"keyword",
    "info":"Bold represents a bold font weight."
  },
  {
    "label":"Bond",
    "type":"keyword",
    "info":"Bond[{id , id }] represents a single chemical bond between atoms with indices id  and id .Bond[{id ,"
  },
  {
    "label":"BondCount",
    "type":"keyword",
    "info":"BondCount[mol] gives the number of bonds in the molecule mol.BondCount[mol, patt] gives the number o"
  },
  {
    "label":"BondLabels",
    "type":"keyword",
    "info":"BondLabels is an option for MoleculePlot and MoleculePlot3D that specifies what labels and label pos"
  },
  {
    "label":"BondLabelStyle",
    "type":"keyword",
    "info":"BondLabelStyle is an option for MoleculePlot and MoleculePlot3D that specifies the style to use for "
  },
  {
    "label":"BondList",
    "type":"keyword",
    "info":"BondList[mol] gives the list of bonds in the molecule mol.BondList[mol, patt] gives the list of bond"
  },
  {
    "label":"BondQ",
    "type":"keyword",
    "info":"BondQ[m, bond] gives True if bond is a bond in the molecule m, and False otherwise."
  },
  {
    "label":"Bookmarks",
    "type":"keyword",
    "info":"Bookmarks is an option for Manipulate and related functions that gives a list of bookmark settings."
  },
  {
    "label":"Boole",
    "type":"keyword",
    "info":"Boole[expr] yields 1 if expr is True and 0 if it is False. "
  },
  {
    "label":"BooleanConsecutiveFunction",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"BooleanConvert",
    "type":"keyword",
    "info":"BooleanConvert[expr] converts the Boolean expression expr to disjunctive normal form.BooleanConvert["
  },
  {
    "label":"BooleanCountingFunction",
    "type":"keyword",
    "info":"BooleanCountingFunction[k   , n] represents a Boolean function of n variables that gives True if at "
  },
  {
    "label":"BooleanFunction",
    "type":"keyword",
    "info":"                                       th\nBooleanFunction[k, n] represents the kï    Boolean function"
  },
  {
    "label":"BooleanGraph",
    "type":"keyword",
    "info":"BooleanGraph[bfunc, g , â¦, g ] gives the Boolean graph defined by the Boolean function bfunc on the "
  },
  {
    "label":"BooleanMaxterms",
    "type":"keyword",
    "info":"                                       th\nBooleanMaxterms[k, n] represents the kï    maxterm in n var"
  },
  {
    "label":"BooleanMinimize",
    "type":"keyword",
    "info":"BooleanMinimize[expr] finds a minimal-length disjunctive normal form representation of expr.BooleanM"
  },
  {
    "label":"BooleanMinterms",
    "type":"keyword",
    "info":"                                       th\nBooleanMinterms[k, n] represents the kï    minterm in n var"
  },
  {
    "label":"BooleanQ",
    "type":"keyword",
    "info":"BooleanQ[expr] returns True if expr is either True or False."
  },
  {
    "label":"BooleanRegion",
    "type":"keyword",
    "info":"BooleanRegion[bfunc, {reg , reg , â¦}] represents the Boolean combination bfunc of regions reg , reg "
  },
  {
    "label":"Booleans",
    "type":"keyword",
    "info":"Booleans represents the domain of Booleans, as in x â Booleans. "
  },
  {
    "label":"BooleanStrings",
    "type":"keyword",
    "info":"BooleanStrings is an option to TextString and related functions that determines what strings corresp"
  },
  {
    "label":"BooleanTable",
    "type":"keyword",
    "info":"BooleanTable[bf] gives a list of truth values for all possible combinations of variable values suppl"
  },
  {
    "label":"BooleanVariables",
    "type":"keyword",
    "info":"BooleanVariables[expr] gives a list of the Boolean variables in the Boolean expression expr.BooleanV"
  },
  {
    "label":"BorderDimensions",
    "type":"keyword",
    "info":"BorderDimensions[image] gives the pixel width of uniform borders of image in the form {{left, right}"
  },
  {
    "label":"BorelTannerDistribution",
    "type":"keyword",
    "info":"BorelTannerDistribution[Î\\[PlusMinus], n] represents a BorelâTanner distribution with shape parameters Î\\[PlusMinus] and n."
  },
  {
    "label":"Bottom",
    "type":"keyword",
    "info":"Bottom is a symbol that represents the bottom for purposes of alignment and positioning. "
  },
  {
    "label":"BottomHatTransform",
    "type":"keyword",
    "info":"BottomHatTransform[image, ker] gives the morphological bottom-hat transform of image with respect to"
  },
  {
    "label":"BoundaryDiscretizeGraphics",
    "type":"keyword",
    "info":"BoundaryDiscretizeGraphics[g] discretizes a 2D or 3D graphic g into a BoundaryMeshRegion.BoundaryDis"
  },
  {
    "label":"BoundaryDiscretizeRegion",
    "type":"keyword",
    "info":"BoundaryDiscretizeRegion[reg] discretizes the region reg into a BoundaryMeshRegion.BoundaryDiscretiz"
  },
  {
    "label":"BoundaryMesh",
    "type":"keyword",
    "info":"BoundaryMesh[mreg] gives a BoundaryMeshRegion from a MeshRegion mreg. "
  },
  {
    "label":"BoundaryMeshRegion",
    "type":"keyword",
    "info":"BoundaryMeshRegion[{p , p , â¦}, {bcell [{i , â¦}], bcell [{j , â¦}], â¦}] yields a mesh with boundary c"
  },
  {
    "label":"BoundaryMeshRegionQ",
    "type":"keyword",
    "info":"BoundaryMeshRegionQ[reg] yields True if the region reg is a valid BoundaryMeshRegion object and Fals"
  },
  {
    "label":"BoundaryStyle",
    "type":"keyword",
    "info":"BoundaryStyle is an option for plotting functions that specifies the style in which boundaries of re"
  },
  {
    "label":"BoundedRegionQ",
    "type":"keyword",
    "info":"BoundedRegionQ[reg] gives True if reg is a bounded region and False otherwise. "
  },
  {
    "label":"BoundingRegion",
    "type":"keyword",
    "info":"BoundingRegion[{pt , pt , â¦}] gives the minimal axis-aligned bounding box for the points pt , pt , â¦"
  },
  {
    "label":"Bounds",
    "type":"keyword",
    "info":"System`Bounds"
  },
  {
    "label":"Box",
    "type":"keyword",
    "info":"System`Box"
  },
  {
    "label":"BoxBaselineShift",
    "type":"keyword",
    "info":"BoxBaselineShift is an option for AdjustmentBox that specifies how much the baseline of the box shou"
  },
  {
    "label":"BoxData",
    "type":"keyword",
    "info":"BoxData[boxes] is a low-level representation of the contents of a typesetting cell."
  },
  {
    "label":"BoxDimensions",
    "type":"keyword",
    "info":"System`BoxDimensions"
  },
  {
    "label":"Boxed",
    "type":"keyword",
    "info":"Boxed is an option for Graphics3D that specifies whether to draw the edges of the bounding box in a "
  },
  {
    "label":"Boxes",
    "type":"keyword",
    "info":"Boxes is a symbol that represents typeset boxes in InputField and related functions."
  },
  {
    "label":"BoxForm",
    "type":"keyword",
    "info":"System`BoxForm"
  },
  {
    "label":"BoxFormFormatTypes",
    "type":"keyword",
    "info":"BoxFormFormatTypes is a global option that specifies the list of typeset format types that are curre"
  },
  {
    "label":"BoxFrame",
    "type":"keyword",
    "info":"BoxFrame is an option for FrameBox objects that specifies whether to draw a frame around the content"
  },
  {
    "label":"BoxID",
    "type":"keyword",
    "info":"System`BoxID"
  },
  {
    "label":"BoxMargins",
    "type":"keyword",
    "info":"BoxMargins is an option for AdjustmentBox objects that specifies the margins to leave around the con"
  },
  {
    "label":"BoxMatrix",
    "type":"keyword",
    "info":"BoxMatrix[r] gives a (2 r + 1) Ã (2r + 1) matrix of 1s.BoxMatrix[r, w] gives a (2 r + 1) Ã (2r + 1) "
  },
  {
    "label":"BoxObject",
    "type":"keyword",
    "info":"BoxObject[id] is an object that represents a box structure in an open notebook in the front end."
  },
  {
    "label":"BoxRatios",
    "type":"keyword",
    "info":"BoxRatios is an option for Graphics3D that gives the ratios of side lengths for the bounding box of "
  },
  {
    "label":"BoxRotation",
    "type":"keyword",
    "info":"System`BoxRotation"
  },
  {
    "label":"BoxRotationPoint",
    "type":"keyword",
    "info":"System`BoxRotationPoint"
  },
  {
    "label":"BoxStyle",
    "type":"keyword",
    "info":"BoxStyle is an option for three-dimensional graphics functions that specifies how the bounding box s"
  },
  {
    "label":"BoxWhiskerChart",
    "type":"keyword",
    "info":"BoxWhiskerChart[{x , x , â¦}] makes a boxâandâwhisker chart for the values x .BoxWhiskerChart[{x , x "
  },
  {
    "label":"Bra",
    "type":"keyword",
    "info":"System`Bra"
  },
  {
    "label":"BracketingBar",
    "type":"keyword",
    "info":"BracketingBar[x, y, â¦] displays as ï x, y, â¦ ï."
  },
  {
    "label":"BraKet",
    "type":"keyword",
    "info":"System`BraKet"
  },
  {
    "label":"BrayCurtisDistance",
    "type":"keyword",
    "info":"BrayCurtisDistance[u, v] gives the BrayâCurtis distance between vectors u and v."
  },
  {
    "label":"BreadthFirstScan",
    "type":"keyword",
    "info":"BreadthFirstScan[g, s, {event  ï¢ f , event  ï¢ f , â¦}] performs a breadth-first scan (bfs) of the gra"
  },
  {
    "label":"Break",
    "type":"keyword",
    "info":"Break[] exits the nearest enclosing Do, For, or While. "
  },
  {
    "label":"BridgeData",
    "type":"keyword",
    "info":"BridgeData[entity, property] gives the value of the specified property for the bridge entity.BridgeD"
  },
  {
    "label":"BrightnessEqualize",
    "type":"keyword",
    "info":"BrightnessEqualize[image] adjusts the brightness across image, correcting uneven illumination.Bright"
  },
  {
    "label":"BroadcastStationData",
    "type":"keyword",
    "info":"BroadcastStationData[entity, property] gives the value of the specified property for the broadcast s"
  },
  {
    "label":"Brown",
    "type":"keyword",
    "info":"Brown represents the color brown in graphics or style specifications. "
  },
  {
    "label":"BrownForsytheTest",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"BrownianBridgeProcess",
    "type":"keyword",
    "info":"BrownianBridgeProcess[Ï, {t , a}, {t , b}] represents the Brownian bridge process from value a at ti"
  },
  {
    "label":"BrowserCategory",
    "type":"keyword",
    "info":"System`BrowserCategory"
  },
  {
    "label":"BSplineBasis",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"BSplineCurve",
    "type":"keyword",
    "info":"BSplineCurve[{pt , pt , â¦}] is a graphics primitive that represents a nonuniform rational B-spline c"
  },
  {
    "label":"BSplineCurve3DBox",
    "type":"keyword",
    "info":"System`BSplineCurve3DBox"
  },
  {
    "label":"BSplineCurve3DBoxOptions",
    "type":"keyword",
    "info":"BSplineCurve3DBoxOptions ï¢ {opt  ï¢ val , opt  ï¢ val , â¦} is an option that specifies settings for BS"
  },
  {
    "label":"BSplineCurveBox",
    "type":"keyword",
    "info":"System`BSplineCurveBox"
  },
  {
    "label":"BSplineCurveBoxOptions",
    "type":"keyword",
    "info":"BSplineCurveBoxOptions ï¢ {opt  ï¢ val , opt  ï¢ val , â¦} is an option that specifies settings for BSpl"
  },
  {
    "label":"BSplineFunction",
    "type":"keyword",
    "info":"BSplineFunction[{pt , pt , â¦}] represents a B-spline function for a curve defined by the control poi"
  },
  {
    "label":"BSplineSurface",
    "type":"keyword",
    "info":"BSplineSurface[array] is a graphics primitive that represents a nonuniform rational B-spline surface"
  },
  {
    "label":"BSplineSurface3DBox",
    "type":"keyword",
    "info":"System`BSplineSurface3DBox"
  },
  {
    "label":"BSplineSurface3DBoxOptions",
    "type":"keyword",
    "info":"BSplineSurface3DBoxOptions ï¢ {opt  ï¢ val , opt  ï¢ val , â¦} is an option that specifies settings for "
  },
  {
    "label":"BubbleChart",
    "type":"keyword",
    "info":"BubbleChart[{{x , y , z }, {x , y , z }, â¦}] makes a bubble chart with bubbles at positions {x , y }"
  },
  {
    "label":"BubbleChart3D",
    "type":"keyword",
    "info":"BubbleChart3D[{{x , y , z , u }, {x , y , z , u }, â¦}] makes a 3D bubble chart with bubbles at posit"
  },
  {
    "label":"BubbleScale",
    "type":"keyword",
    "info":"BubbleScale is an option to BubbleChart and related functions that specifies how the scale of each b"
  },
  {
    "label":"BubbleSizes",
    "type":"keyword",
    "info":"BubbleSizes is an option to BubbleChart and related functions that specifies the range of sizes used"
  },
  {
    "label":"BuildingData",
    "type":"keyword",
    "info":"BuildingData[entity, property] gives the value of the specified property for the building entity.Bui"
  },
  {
    "label":"BulletGauge",
    "type":"keyword",
    "info":"BulletGauge[value, reference, {min, max}] draws a bullet gauge showing value and reference in a rang"
  },
  {
    "label":"BusinessDayQ",
    "type":"keyword",
    "info":"BusinessDayQ[date] returns True if the date is a business day and returns False otherwise."
  },
  {
    "label":"ButterflyGraph",
    "type":"keyword",
    "info":"ButterflyGraph[n] gives the order-n butterfly graph. ButterflyGraph[n, b] gives the base-b order-n b"
  },
  {
    "label":"ButterworthFilterModel",
    "type":"keyword",
    "info":"ButterworthFilterModel[n] creates a lowpass Butterworth filter of order n and cutoff frequency of 1."
  },
  {
    "label":"Button",
    "type":"keyword",
    "info":"Button[label, action] represents a button that is labeled with label, and evaluates action whenever "
  },
  {
    "label":"ButtonBar",
    "type":"keyword",
    "info":"ButtonBar[{lbl  :> act , lbl  :> act , â¦}] represents a bar of buttons with labels lbl  that perform"
  },
  {
    "label":"ButtonBox",
    "type":"keyword",
    "info":"ButtonBox[boxes] is a low-level box construct that represents a button in a notebook expression."
  },
  {
    "label":"ButtonBoxOptions",
    "type":"keyword",
    "info":"ButtonBoxOptions is an option that specifies settings for ButtonBox."
  },
  {
    "label":"ButtonCell",
    "type":"keyword",
    "info":"System`ButtonCell"
  },
  {
    "label":"ButtonContents",
    "type":"keyword",
    "info":"System`ButtonContents"
  },
  {
    "label":"ButtonData",
    "type":"keyword",
    "info":"ButtonData is an option for the low-level function ButtonBox that specifies the second argument to g"
  },
  {
    "label":"ButtonEvaluator",
    "type":"keyword",
    "info":"ButtonEvaluator is an option for the low-level function ButtonBox that specifies where the expressio"
  },
  {
    "label":"ButtonExpandable",
    "type":"keyword",
    "info":"ButtonExpandable is an option for the low-level function ButtonBox that specifies whether the button"
  },
  {
    "label":"ButtonFrame",
    "type":"keyword",
    "info":"ButtonFrame is an option for the low-level function ButtonBox that specifies the type of frame to di"
  },
  {
    "label":"ButtonFunction",
    "type":"keyword",
    "info":"ButtonFunction is an option for the low-level function ButtonBox that specifies the function to exec"
  },
  {
    "label":"ButtonMargins",
    "type":"keyword",
    "info":"ButtonMargins is an option for ButtonBox that specifies how much space in printer's points to leave "
  },
  {
    "label":"ButtonMinHeight",
    "type":"keyword",
    "info":"ButtonMinHeight is an option for the low-level function ButtonBox that specifies the minimum total h"
  },
  {
    "label":"ButtonNote",
    "type":"keyword",
    "info":"ButtonNote is an option for ButtonBox that specifies what should be displayed in the status line of "
  },
  {
    "label":"ButtonNotebook",
    "type":"keyword",
    "info":"ButtonNotebook[] gives the notebook, if any, that contains the button which initiated the current ev"
  },
  {
    "label":"ButtonSource",
    "type":"keyword",
    "info":"ButtonSource is an option for the low-level function ButtonBox that specifies the first argument to "
  },
  {
    "label":"ButtonStyle",
    "type":"keyword",
    "info":"ButtonStyle is an option for ButtonBox that specifies the default properties for the button. "
  },
  {
    "label":"ButtonStyleMenuListing",
    "type":"keyword",
    "info":"System`ButtonStyleMenuListing"
  },
  {
    "label":"Byte",
    "type":"keyword",
    "info":"Byte represents a single byte of data in Read. "
  },
  {
    "label":"ByteArray",
    "type":"keyword",
    "info":"ByteArray[{b , b , â¦}] constructs a ByteArray object containing the byte values b .ByteArray[\"string"
  },
  {
    "label":"ByteArrayFormat",
    "type":"keyword",
    "info":"ByteArrayFormat[ba] attempts to determine what ImportByteArray format could be used to import the By"
  },
  {
    "label":"ByteArrayFormatQ",
    "type":"keyword",
    "info":"ByteArrayFormatQ[ba, \"fmt\"] gives True if the ByteArray object ba might be imported as format \"fmt\" "
  },
  {
    "label":"ByteArrayQ",
    "type":"keyword",
    "info":"ByteArrayQ[expr] gives True if expr is a valid ByteArray object, and False otherwise."
  },
  {
    "label":"ByteArrayToString",
    "type":"keyword",
    "info":"ByteArrayToString[ba] returns a string by decoding the data in the byte array ba, assuming UTF-8 enc"
  },
  {
    "label":"ByteCount",
    "type":"keyword",
    "info":"ByteCount[expr] gives the number of bytes used internally by the Wolfram System to store expr. "
  },
  {
    "label":"ByteOrdering",
    "type":"keyword",
    "info":"ByteOrdering is an option for BinaryRead, BinaryWrite, and related functions that specifies what ord"
  },
  {
    "label":"C",
    "type":"keyword",
    "info":"                                    th\nC[i] is the default form for the iï ï    parameter or constant "
  },
  {
    "label":"CachedValue",
    "type":"keyword",
    "info":"System`CachedValue"
  },
  {
    "label":"CacheGraphics",
    "type":"keyword",
    "info":"System`CacheGraphics"
  },
  {
    "label":"CachePersistence",
    "type":"keyword",
    "info":"CachePersistence is an option for CloudObject and related cloud functions that specifies the time du"
  },
  {
    "label":"CalendarConvert",
    "type":"keyword",
    "info":"CalendarConvert[date, calendar] converts the date object date to the specified calendar type calenda"
  },
  {
    "label":"CalendarData",
    "type":"keyword",
    "info":"CalendarData[cal] gives the default parameters associated with the date calendar cal.CalendarData[co"
  },
  {
    "label":"CalendarType",
    "type":"keyword",
    "info":"CalendarType is an option that determines the calendar system in which all dates are to be interpret"
  },
  {
    "label":"Callout",
    "type":"keyword",
    "info":"Callout[data, expr] displays expr in a plot as a callout pointing to data.Callout[data, expr, pos] d"
  },
  {
    "label":"CalloutMarker",
    "type":"keyword",
    "info":"CalloutMarker is an option for Callout that specifies what marker to draw at the end of the leader i"
  },
  {
    "label":"CalloutStyle",
    "type":"keyword",
    "info":"CalloutStyle is an option for Callout that specifies what style to use for callouts."
  },
  {
    "label":"CallPacket",
    "type":"keyword",
    "info":"CallPacket[integer, list] is a WSTP packet encapsulating a request to invoke the external function n"
  },
  {
    "label":"CanberraDistance",
    "type":"keyword",
    "info":"CanberraDistance[u, v] gives the Canberra distance between vectors u and v."
  },
  {
    "label":"Cancel",
    "type":"keyword",
    "info":"Cancel[expr] cancels out common factors in the numerator and denominator of expr. "
  },
  {
    "label":"CancelButton",
    "type":"keyword",
    "info":"CancelButton[] represents a Cancel button in a dialog that closes the dialog window when clicked.Can"
  },
  {
    "label":"CandlestickChart",
    "type":"keyword",
    "info":"CandlestickChart[{{date , {open , high , low , close }}, â¦}] makes a chart with candles representing"
  },
  {
    "label":"CanonicalGraph",
    "type":"keyword",
    "info":"CanonicalGraph[g] gives a canonical form of the graph g.CanonicalGraph[{v ï¢ w, â¦}] uses rules v ï¢ w "
  },
  {
    "label":"CanonicalizePolygon",
    "type":"keyword",
    "info":"CanonicalizePolygon[poly] gives a canonical representation of the polygon poly with shared coordinat"
  },
  {
    "label":"CanonicalizePolyhedron",
    "type":"keyword",
    "info":"CanonicalizePolyhedron[poly] gives a canonical representation of the polyhedron poly with shared coo"
  },
  {
    "label":"CanonicalizeRegion",
    "type":"keyword",
    "info":"CanonicalizeRegion[reg] gives a canonical representation of the region reg."
  },
  {
    "label":"CanonicalName",
    "type":"keyword",
    "info":"CanonicalName[entity] gives the canonical name for the entity specified by entity.CanonicalName[{ent"
  },
  {
    "label":"CanonicalWarpingCorrespondence",
    "type":"keyword",
    "info":"CanonicalWarpingCorrespondence[s , s ] gives the canonical time warping (CTW) correspondence between"
  },
  {
    "label":"CanonicalWarpingDistance",
    "type":"keyword",
    "info":"CanonicalWarpingDistance[s , s ] gives the canonical time warping (CTW) distance between sequences s"
  },
  {
    "label":"CantorMesh",
    "type":"keyword",
    "info":"                                                     th                                             "
  },
  {
    "label":"CantorStaircase",
    "type":"keyword",
    "info":"CantorStaircase[x] gives the Cantor staircase function F (x).\n                                      "
  },
  {
    "label":"Canvas",
    "type":"keyword",
    "info":"Canvas[] represents an empty canvas in the current notebook in which you can do free-form drawing.Ca"
  },
  {
    "label":"Cap",
    "type":"keyword",
    "info":"Cap[x, y, â¦] displays as x â¢ y â¢ â¦."
  },
  {
    "label":"CapForm",
    "type":"keyword",
    "info":"CapForm[type] is a graphics primitive that specifies what type of caps should be used at the ends of"
  },
  {
    "label":"CapitalDifferentialD",
    "type":"keyword",
    "info":"CapitalDifferentialD[x] displays as ï x."
  },
  {
    "label":"Capitalize",
    "type":"keyword",
    "info":"Capitalize[string] yields a string in which the first character has been made uppercase.Capitalize[s"
  },
  {
    "label":"CapsuleShape",
    "type":"keyword",
    "info":"CapsuleShape[{{x , y , z }, {x , y , z }}, r] represents the filled capsule between points {x , y , "
  },
  {
    "label":"CaptureRunning",
    "type":"keyword",
    "info":"CaptureRunning is an option for signal acquisition functions that specifies whether to immediately s"
  },
  {
    "label":"CardinalBSplineBasis",
    "type":"keyword",
    "info":"System`CardinalBSplineBasis"
  },
  {
    "label":"CarlemanLinearize",
    "type":"keyword",
    "info":"CarlemanLinearize[sys, spec] Carleman linearizes the nonlinear state-space model sys according to sp"
  },
  {
    "label":"CarlsonRC",
    "type":"keyword",
    "info":"CarlsonRC[x, y] gives the Carlson's elliptic integral R (x, y).\n                                    "
  },
  {
    "label":"CarlsonRD",
    "type":"keyword",
    "info":"CarlsonRD[x, y, z] gives the Carlson's elliptic integral R (x, y, z).\n                              "
  },
  {
    "label":"CarlsonRE",
    "type":"keyword",
    "info":"CarlsonRE[x, y] gives the Carlson's elliptic integral R (x, y).\n                                    "
  },
  {
    "label":"CarlsonRF",
    "type":"keyword",
    "info":"CarlsonRF[x, y, z] gives the Carlson's elliptic integral R (x, y, z).\n                              "
  },
  {
    "label":"CarlsonRG",
    "type":"keyword",
    "info":"CarlsonRG[x, y, z] gives the Carlson's elliptic integral R (x, y, z).\n                              "
  },
  {
    "label":"CarlsonRJ",
    "type":"keyword",
    "info":"CarlsonRJ[x, y, z, Ï] gives Carlson's elliptic integral R (x, y, z, Ï).\n                            "
  },
  {
    "label":"CarlsonRK",
    "type":"keyword",
    "info":"CarlsonRK[x, y] gives the Carlson's elliptic integral R (x, y).\n                                    "
  },
  {
    "label":"CarlsonRM",
    "type":"keyword",
    "info":"CarlsonRM[x, y, Ï] gives Carlson's elliptic integral R (x, y, Ï).\n                                  "
  },
  {
    "label":"CarmichaelLambda",
    "type":"keyword",
    "info":"CarmichaelLambda[n] gives the Carmichael function Î»(n)."
  },
  {
    "label":"CaseOrdering",
    "type":"keyword",
    "info":"CaseOrdering is an option for AlphabeticSort and related functions that specifies how upper versus l"
  },
  {
    "label":"Cases",
    "type":"keyword",
    "info":"Cases[{e , e , â¦}, pattern] gives a list of the e  that match the pattern. Cases[{e , â¦}, pattern ï¢ "
  },
  {
    "label":"CaseSensitive",
    "type":"keyword",
    "info":"CaseSensitive[patt] represents a string pattern that requires matching typographical case, even with"
  },
  {
    "label":"Cashflow",
    "type":"keyword",
    "info":"Cashflow[{c , c , â¦, c }] represents a series of cash flows occurring at unit time intervals.Cashflo"
  },
  {
    "label":"Casoratian",
    "type":"keyword",
    "info":"Casoratian[{y , y , â¦}, n] gives the Casoratian determinant for the sequences y , y , â¦ depending on"
  },
  {
    "label":"Catalan",
    "type":"keyword",
    "info":"Catalan is Catalan's constant, with numerical value â 0.915966. "
  },
  {
    "label":"CatalanNumber",
    "type":"keyword",
    "info":"                             th\nCatalanNumber[n] gives the nï    Catalan number C .\n                 "
  },
  {
    "label":"Catch",
    "type":"keyword",
    "info":"Catch[expr] returns the argument of the first Throw generated in the evaluation of expr. Catch[expr,"
  },
  {
    "label":"CategoricalDistribution",
    "type":"keyword",
    "info":"CategoricalDistribution[{c , c , â¦}] generates a uniform categorical distribution over classes c , c"
  },
  {
    "label":"Catenate",
    "type":"keyword",
    "info":"Catenate[{list , list , â¦}] yields a single list with all elements from the list  in order. Catenate"
  },
  {
    "label":"CatenateLayer",
    "type":"keyword",
    "info":"CatenateLayer[] represents a net layer that takes a list of input arrays and catenates them.Catenate"
  },
  {
    "label":"CauchyDistribution",
    "type":"keyword",
    "info":"CauchyDistribution[a, b] represents a Cauchy distribution with location parameter a and scale parame"
  },
  {
    "label":"CauchyPointProcess",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"CauchyWindow",
    "type":"keyword",
    "info":"CauchyWindow[x] represents a Cauchy window function of x.CauchyWindow[x, Î\\[PlusMinus]] uses the parameter Î\\[PlusMinus].\n"
  },
  {
    "label":"CayleyGraph",
    "type":"keyword",
    "info":"CayleyGraph[group] returns a Cayley graph representation of group."
  },
  {
    "label":"CDF",
    "type":"keyword",
    "info":"CDF[dist, x] gives the cumulative distribution function for the distribution dist evaluated at x.CDF"
  },
  {
    "label":"CDFDeploy",
    "type":"keyword",
    "info":"CDFDeploy[\"file.cdf\", expr] deploys expr in a form that can be played by Wolfram Player.CDFDeploy[\"f"
  },
  {
    "label":"CDFInformation",
    "type":"keyword",
    "info":"CDFInformation[expr] gives a list of properties relevant to a CDF deployed with the content expr.CDF"
  },
  {
    "label":"CDFWavelet",
    "type":"keyword",
    "info":"CDFWavelet[] represents a CohenâDaubechiesâFeauveau wavelet of type \"9\/7\". CDFWavelet[\"type\"] repres"
  },
  {
    "label":"Ceiling",
    "type":"keyword",
    "info":"Ceiling[x] gives the smallest integer greater than or equal to x. Ceiling[x, a] gives the smallest m"
  },
  {
    "label":"CelestialSystem",
    "type":"keyword",
    "info":"CelestialSystem is an option for SunPosition, MoonPosition, and related functions that specifies the"
  },
  {
    "label":"Cell",
    "type":"keyword",
    "info":"Cell[contents] is the low-level representation of a cell inside a Wolfram System notebook. Cell[cont"
  },
  {
    "label":"CellAutoOverwrite",
    "type":"keyword",
    "info":"CellAutoOverwrite is an option for Cell which specifies whether an output cell should be overwritten"
  },
  {
    "label":"CellBaseline",
    "type":"keyword",
    "info":"CellBaseline is an option for Cell which specifies where the baseline of the cell should be assumed "
  },
  {
    "label":"CellBoundingBox",
    "type":"keyword",
    "info":"System`CellBoundingBox"
  },
  {
    "label":"CellBracketOptions",
    "type":"keyword",
    "info":"CellBracketOptions is an option for cells that specifies settings for cell brackets."
  },
  {
    "label":"CellChangeTimes",
    "type":"keyword",
    "info":"CellChangeTimes is an option to Cell that specifies when changes were made to the cell."
  },
  {
    "label":"CellContents",
    "type":"keyword",
    "info":"System`CellContents"
  },
  {
    "label":"CellContext",
    "type":"keyword",
    "info":"CellContext is an option for Cell which specifies the context to use for the evaluation of the conte"
  },
  {
    "label":"CellDingbat",
    "type":"keyword",
    "info":"CellDingbat is an option for Cell which specifies what dingbat to use to emphasize a cell. "
  },
  {
    "label":"CellDynamicExpression",
    "type":"keyword",
    "info":"CellDynamicExpression is an option for cells that specifies an expression to be dynamically updated "
  },
  {
    "label":"CellEditDuplicate",
    "type":"keyword",
    "info":"CellEditDuplicate is an option for Cell which specifies whether the front end should make a copy of "
  },
  {
    "label":"CellElementsBoundingBox",
    "type":"keyword",
    "info":"System`CellElementsBoundingBox"
  },
  {
    "label":"CellElementSpacings",
    "type":"keyword",
    "info":"System`CellElementSpacings"
  },
  {
    "label":"CellEpilog",
    "type":"keyword",
    "info":"CellEpilog is an option for Cell which gives an expression to evaluate after each ordinary evaluatio"
  },
  {
    "label":"CellEvaluationDuplicate",
    "type":"keyword",
    "info":"CellEvaluationDuplicate is an option for Cell which specifies whether the front end should make a co"
  },
  {
    "label":"CellEvaluationFunction",
    "type":"keyword",
    "info":"CellEvaluationFunction is an option for Cell that gives a function to be applied to every expression"
  },
  {
    "label":"CellEvaluationLanguage",
    "type":"keyword",
    "info":"System`CellEvaluationLanguage"
  },
  {
    "label":"CellEventActions",
    "type":"keyword",
    "info":"CellEventActions is an option for Cell that gives a list of actions to perform when specified events"
  },
  {
    "label":"CellFrame",
    "type":"keyword",
    "info":"CellFrame is an option for Cell that specifies whether a frame should be drawn around a cell. "
  },
  {
    "label":"CellFrameColor",
    "type":"keyword",
    "info":"CellFrameColor is an option that specifies the color of the frame around a cell."
  },
  {
    "label":"CellFrameLabelMargins",
    "type":"keyword",
    "info":"CellFrameLabelMargins is an option for cells that specifies the absolute margins in printer's points"
  },
  {
    "label":"CellFrameLabels",
    "type":"keyword",
    "info":"CellFrameLabels is an option that specifies the labels associated with the frame around a cell."
  },
  {
    "label":"CellFrameMargins",
    "type":"keyword",
    "info":"CellFrameMargins is an option for Cell that specifies the absolute margins in printerâs points to le"
  },
  {
    "label":"CellFrameStyle",
    "type":"keyword",
    "info":"System`CellFrameStyle"
  },
  {
    "label":"CellGroup",
    "type":"keyword",
    "info":"CellGroup[{cell , cell , â¦}] gives an open group of cells that can appear in a Wolfram System notebo"
  },
  {
    "label":"CellGroupData",
    "type":"keyword",
    "info":"CellGroupData[{cell , cell , â¦}] is a low-level construct that represents an open group of cells in "
  },
  {
    "label":"CellGrouping",
    "type":"keyword",
    "info":"CellGrouping is a notebook option that specifies how cells in the notebook should be assembled into "
  },
  {
    "label":"CellGroupingRules",
    "type":"keyword",
    "info":"CellGroupingRules is an option for cells that specifies the rules used for grouping a cell."
  },
  {
    "label":"CellHorizontalScrolling",
    "type":"keyword",
    "info":"CellHorizontalScrolling is an option for cells that specifies whether the contents of a cell can be "
  },
  {
    "label":"CellID",
    "type":"keyword",
    "info":"CellID is an option for Cell that specifies a unique ID number for a cell."
  },
  {
    "label":"CellInsertionPointCell",
    "type":"keyword",
    "info":"System`CellInsertionPointCell"
  },
  {
    "label":"CellLabel",
    "type":"keyword",
    "info":"CellLabel is an option for Cell which gives the label to use for a particular cell. "
  },
  {
    "label":"CellLabelAutoDelete",
    "type":"keyword",
    "info":"CellLabelAutoDelete is an option for Cell which specifies whether a label for the cell should be aut"
  },
  {
    "label":"CellLabelMargins",
    "type":"keyword",
    "info":"CellLabelMargins is an option for cells that specifies the absolute margins in printer's points arou"
  },
  {
    "label":"CellLabelPositioning",
    "type":"keyword",
    "info":"CellLabelPositioning is an option for cells that specifies where the label for a cell is positioned."
  },
  {
    "label":"CellLabelStyle",
    "type":"keyword",
    "info":"CellLabelStyle is an option for Cell that specifies the style to use in displaying cell labels marki"
  },
  {
    "label":"CellLabelTemplate",
    "type":"keyword",
    "info":"System`CellLabelTemplate"
  },
  {
    "label":"CellMargins",
    "type":"keyword",
    "info":"CellMargins is an option for Cell that specifies the absolute margins in printer's points to leave a"
  },
  {
    "label":"CellObject",
    "type":"keyword",
    "info":"CellObject[id] is an object that represents a cell in an open notebook in the front end."
  },
  {
    "label":"CellOpen",
    "type":"keyword",
    "info":"CellOpen is an option for Cell that specifies whether the contents of a cell should be explicitly di"
  },
  {
    "label":"CellPrint",
    "type":"keyword",
    "info":"CellPrint[expr] inserts expr as a complete cell in the current notebook just below the cell being ev"
  },
  {
    "label":"CellProlog",
    "type":"keyword",
    "info":"CellProlog is an option to Cell that gives an expression to evaluate before each ordinary evaluation"
  },
  {
    "label":"Cells",
    "type":"keyword",
    "info":"Cells[] returns a list of CellObject expressions corresponding to cells in the current notebook.Cell"
  },
  {
    "label":"CellSize",
    "type":"keyword",
    "info":"CellSize is an option for cells that specifies the width and height of an inline cell."
  },
  {
    "label":"CellStyle",
    "type":"keyword",
    "info":"CellStyle is a setting for functions such as NotebookFind and Cells that specifies the name of a cel"
  },
  {
    "label":"CellTags",
    "type":"keyword",
    "info":"CellTags is an option for Cell that gives a list of tags to associate with a cell. "
  },
  {
    "label":"CellTrayWidgets",
    "type":"keyword",
    "info":"System`CellTrayWidgets"
  },
  {
    "label":"CellularAutomaton",
    "type":"keyword",
    "info":"CellularAutomaton[rule, init, t] generates a list representing the evolution of the cellular automat"
  },
  {
    "label":"CensoredDistribution",
    "type":"keyword",
    "info":"CensoredDistribution[{x   , x   }, dist] represents the distribution of values that come from dist a"
  },
  {
    "label":"Censoring",
    "type":"keyword",
    "info":"Censoring[t, c] represents a censored event time t with censoring c.Censoring[{t , t , â¦}, c] repres"
  },
  {
    "label":"Center",
    "type":"keyword",
    "info":"Center is a symbol that represents the center for purposes of alignment and positioning. "
  },
  {
    "label":"CenterArray",
    "type":"keyword",
    "info":"CenterArray[a, n] creates a list of length n with the elements of a at the center and zeros elsewher"
  },
  {
    "label":"CenterDot",
    "type":"keyword",
    "info":"CenterDot[x, y, â¦] displays as x Â\\[CenterDot] y Â\\[CenterDot] â¦."
  },
  {
    "label":"CenteredInterval",
    "type":"keyword",
    "info":"CenteredInterval[x, dx] for real numbers x and dx gives a centered interval that contains the real i"
  },
  {
    "label":"CentralFeature",
    "type":"keyword",
    "info":"CentralFeature[{x , x , â¦}] gives the central feature of the elements x .CentralFeature[{x  ï¢ v , x "
  },
  {
    "label":"CentralMoment",
    "type":"keyword",
    "info":"                                   th                                                               "
  },
  {
    "label":"CentralMomentGeneratingFunction",
    "type":"keyword",
    "info":"CentralMomentGeneratingFunction[dist, t] gives the central moment-generating function for the distri"
  },
  {
    "label":"Cepstrogram",
    "type":"keyword",
    "info":"Cepstrogram[data] plots the array of power cepstra computed on each partition of data.Cepstrogram[da"
  },
  {
    "label":"CepstrogramArray",
    "type":"keyword",
    "info":"CepstrogramArray[data] computes an array of cepstra on data.CepstrogramArray[data, n] uses partition"
  },
  {
    "label":"CepstrumArray",
    "type":"keyword",
    "info":"CepstrumArray[data] computes the power cepstrum of data.CepstrumArray[data, type] computes the speci"
  },
  {
    "label":"CForm",
    "type":"keyword",
    "info":"CForm[expr] prints as a C language version of expr. "
  },
  {
    "label":"ChampernowneNumber",
    "type":"keyword",
    "info":"ChampernowneNumber[b] gives the base-b Champernowne number C .ChampernowneNumber[] gives the base-10"
  },
  {
    "label":"ChangeOptions",
    "type":"keyword",
    "info":"System`ChangeOptions"
  },
  {
    "label":"ChannelBase",
    "type":"keyword",
    "info":"ChannelBase is an option specifying the base URL of the server to use for brokering channel communic"
  },
  {
    "label":"ChannelBrokerAction",
    "type":"keyword",
    "info":"ChannelBrokerAction is an option specifying the action to execute on the channel broker server in ad"
  },
  {
    "label":"ChannelDatabin",
    "type":"keyword",
    "info":"System`ChannelDatabin"
  },
  {
    "label":"ChannelHistoryLength",
    "type":"keyword",
    "info":"ChannelHistoryLength is an option to ChannelListen that specifies the maximum number of messages to "
  },
  {
    "label":"ChannelListen",
    "type":"keyword",
    "info":"ChannelListen[channel] starts listening on the specified channel.ChannelListen[channel, func] applie"
  },
  {
    "label":"ChannelListener",
    "type":"keyword",
    "info":"ChannelListener[â¦] represents a channel listener created by ChannelListen."
  },
  {
    "label":"ChannelListeners",
    "type":"keyword",
    "info":"ChannelListeners[] gives a list of currently active channel listeners."
  },
  {
    "label":"ChannelListenerWait",
    "type":"keyword",
    "info":"System`ChannelListenerWait"
  },
  {
    "label":"ChannelObject",
    "type":"keyword",
    "info":"ChannelObject[] gives a new anonymous channel specification.\\!ïïRowBox[{\"ChannelObject\", \"[\", \"\"mqtt"
  },
  {
    "label":"ChannelPreSendFunction",
    "type":"keyword",
    "info":"System`ChannelPreSendFunction"
  },
  {
    "label":"ChannelReceiverFunction",
    "type":"keyword",
    "info":"ChannelReceiverFunction[fun] represents a channel receiver function that applies fun to any channel "
  },
  {
    "label":"ChannelSend",
    "type":"keyword",
    "info":"ChannelSend[channel, msg] sends the specified message msg to the specified channel."
  },
  {
    "label":"ChannelSubscribers",
    "type":"keyword",
    "info":"ChannelSubscribers[channel] gives a list of users currently subscribed to the specified channel.Chan"
  },
  {
    "label":"ChanVeseBinarize",
    "type":"keyword",
    "info":"ChanVeseBinarize[image] finds a two-level segmentation of image by computing optimal contours around"
  },
  {
    "label":"Character",
    "type":"keyword",
    "info":"Character represents a single character in Read. "
  },
  {
    "label":"CharacterCounts",
    "type":"keyword",
    "info":"CharacterCounts[\"string\"] gives an association whose keys are the distinct characters in string, and"
  },
  {
    "label":"CharacterEncoding",
    "type":"keyword",
    "info":"CharacterEncoding is an option for input and output functions which specifies what raw character enc"
  },
  {
    "label":"CharacterEncodingsPath",
    "type":"keyword",
    "info":"CharacterEncodingsPath is a global option that specifies which directories are searched for characte"
  },
  {
    "label":"CharacteristicFunction",
    "type":"keyword",
    "info":"CharacteristicFunction[dist, t] gives the characteristic function for the distribution dist as a fun"
  },
  {
    "label":"CharacteristicPolynomial",
    "type":"keyword",
    "info":"CharacteristicPolynomial[m, x] gives the characteristic polynomial for the matrix m. CharacteristicP"
  },
  {
    "label":"CharacterName",
    "type":"keyword",
    "info":"CharacterName[\"c\"] gives the name of the character c.CharacterName[n] gives the name of the characte"
  },
  {
    "label":"CharacterNormalize",
    "type":"keyword",
    "info":"CharacterNormalize[\"text\", form] converts the characters in text to the specified normalization form"
  },
  {
    "label":"CharacterRange",
    "type":"keyword",
    "info":"CharacterRange[c , c ] yields a list of the characters in the range from \"c \" to \"c \". CharacterRang"
  },
  {
    "label":"Characters",
    "type":"keyword",
    "info":"Characters[\"string\"] gives a list of the characters in a string. "
  },
  {
    "label":"ChartBaseStyle",
    "type":"keyword",
    "info":"ChartBaseStyle is an option for charting functions that specifies the base style for all chart eleme"
  },
  {
    "label":"ChartElementData",
    "type":"keyword",
    "info":"System`ChartElementData"
  },
  {
    "label":"ChartElementDataFunction",
    "type":"keyword",
    "info":"System`ChartElementDataFunction"
  },
  {
    "label":"ChartElementFunction",
    "type":"keyword",
    "info":"ChartElementFunction is an option for charting functions such as BarChart that gives a function to u"
  },
  {
    "label":"ChartElements",
    "type":"keyword",
    "info":"ChartElements is an option to charting functions such as BarChart that specifies the graphics to use"
  },
  {
    "label":"ChartLabels",
    "type":"keyword",
    "info":"ChartLabels is an option for charting functions that specifies what labels should be used for chart "
  },
  {
    "label":"ChartLayout",
    "type":"keyword",
    "info":"ChartLayout is an option to charting functions that specifies the overall layout to use."
  },
  {
    "label":"ChartLegends",
    "type":"keyword",
    "info":"ChartLegends is an option for charting functions that specifies what legends should be used for char"
  },
  {
    "label":"ChartStyle",
    "type":"keyword",
    "info":"ChartStyle is an option for charting functions that specifies styles in which chart elements should "
  },
  {
    "label":"Chebyshev1FilterModel",
    "type":"keyword",
    "info":"Chebyshev1FilterModel[n] creates a lowpass Chebyshev type 1 filter of order n.Chebyshev1FilterModel["
  },
  {
    "label":"Chebyshev2FilterModel",
    "type":"keyword",
    "info":"Chebyshev2FilterModel[n] creates a lowpass Chebyshev type 2 filter of order n.Chebyshev2FilterModel["
  },
  {
    "label":"ChebyshevDistance",
    "type":"keyword",
    "info":"ChebyshevDistance[u, v] gives the Chebyshev or sup norm distance between vectors u and v."
  },
  {
    "label":"ChebyshevT",
    "type":"keyword",
    "info":"ChebyshevT[n, x] gives the Chebyshev polynomial of the first kind T (x). \n                          "
  },
  {
    "label":"ChebyshevU",
    "type":"keyword",
    "info":"ChebyshevU[n, x] gives the Chebyshev polynomial of the second kind U (x). \n                         "
  },
  {
    "label":"Check",
    "type":"keyword",
    "info":"Check[expr, failexpr] evaluates expr, and returns the result, unless messages were generated, in whi"
  },
  {
    "label":"CheckAbort",
    "type":"keyword",
    "info":"CheckAbort[expr, failexpr] evaluates expr, returning failexpr if an abort occurs. "
  },
  {
    "label":"CheckAll",
    "type":"keyword",
    "info":"CheckAll[expr, f] evaluates expr and returns f[expr, HoldComplete[control , â¦]] where the control  e"
  },
  {
    "label":"CheckArguments",
    "type":"keyword",
    "info":"CheckArguments[f[args], n] gives True if args consists of exactly n positional arguments followed by"
  },
  {
    "label":"Checkbox",
    "type":"keyword",
    "info":"Checkbox[x] represents a checkbox with setting x, displayed as CheckboxBox[True] when x is True and "
  },
  {
    "label":"CheckboxBar",
    "type":"keyword",
    "info":"CheckboxBar[x, {val , val , â¦}] represents a checkbox bar with setting x and with checkboxes for val"
  },
  {
    "label":"CheckboxBox",
    "type":"keyword",
    "info":"System`CheckboxBox"
  },
  {
    "label":"CheckboxBoxOptions",
    "type":"keyword",
    "info":"CheckboxBoxOptions ï¢ {opt  ï¢ val , opt  ï¢ val , â¦} is an option that specifies settings for Checkbox"
  },
  {
    "label":"ChemicalData",
    "type":"keyword",
    "info":"ChemicalData[\"name\", \"property\"] gives the value of the specified property for the chemical \"name\".C"
  },
  {
    "label":"ChemicalFormula",
    "type":"keyword",
    "info":"ChemicalFormula[ï elem  ï¢ n , elem  ï¢ n , â¦|>] represents a chemical species with n  atoms of the el"
  },
  {
    "label":"ChemicalReaction",
    "type":"keyword",
    "info":"ChemicalReaction[reactants ï¢ products] represents a chemical reaction between the given reactants an"
  },
  {
    "label":"ChessboardDistance",
    "type":"keyword",
    "info":"ChessboardDistance[u, v] gives the chessboard, Chebyshev, or sup norm distance between vectors u and"
  },
  {
    "label":"ChiDistribution",
    "type":"keyword",
    "info":"ChiDistribution[Î½] represents a Ï distribution with Î½ degrees of freedom."
  },
  {
    "label":"ChineseRemainder",
    "type":"keyword",
    "info":"ChineseRemainder[{r , r , â¦}, {m , m , â¦}] gives the smallest x with x â¥ 0 that satisfies all the in"
  },
  {
    "label":"ChiSquareDistribution",
    "type":"keyword",
    "info":"                                       2\nChiSquareDistribution[Î½] represents a Ï  distribution with "
  },
  {
    "label":"ChoiceButtons",
    "type":"keyword",
    "info":"ChoiceButtons[] represents a pair of OK and Cancel buttons that close a dialog.ChoiceButtons[{act  ,"
  },
  {
    "label":"ChoiceDialog",
    "type":"keyword",
    "info":"ChoiceDialog[expr] puts up a standard choice dialog that displays expr together with OK and Cancel b"
  },
  {
    "label":"CholeskyDecomposition",
    "type":"keyword",
    "info":"CholeskyDecomposition[m] gives the Cholesky decomposition of a matrix m. "
  },
  {
    "label":"Chop",
    "type":"keyword",
    "info":"Chop[expr] replaces approximate real numbers in expr that are close to zero by the exact integer 0. "
  },
  {
    "label":"ChromaticityPlot",
    "type":"keyword",
    "info":"ChromaticityPlot[colspace] plots a 2D slice of the color space colspace. ChromaticityPlot[color] plo"
  },
  {
    "label":"ChromaticityPlot3D",
    "type":"keyword",
    "info":"ChromaticityPlot3D[colspace] returns a 3D gamut of the color space colspace.ChromaticityPlot3D[color"
  },
  {
    "label":"ChromaticPolynomial",
    "type":"keyword",
    "info":"ChromaticPolynomial[g, k] gives the chromatic polynomial of the graph g.ChromaticPolynomial[{v ï¢ w, "
  },
  {
    "label":"Circle",
    "type":"keyword",
    "info":"Circle[{x, y}, r] represents a circle of radius r centered at {x, y}.Circle[{x, y}] gives a circle o"
  },
  {
    "label":"CircleBox",
    "type":"keyword",
    "info":"System`CircleBox"
  },
  {
    "label":"CircleDot",
    "type":"keyword",
    "info":"CircleDot[x, y, â¦] displays as x â y â â¦."
  },
  {
    "label":"CircleMinus",
    "type":"keyword",
    "info":"CircleMinus[x, y] displays as x â y. "
  },
  {
    "label":"CirclePlus",
    "type":"keyword",
    "info":"CirclePlus[x, y, â¦] displays as x â y â â¦."
  },
  {
    "label":"CirclePoints",
    "type":"keyword",
    "info":"CirclePoints[n] gives the positions of n points equally spaced around the unit circle.CirclePoints[r"
  },
  {
    "label":"CircleThrough",
    "type":"keyword",
    "info":"CircleThrough[{p , p , â¦}] represents a circle passing through the points p .CircleThrough[{p , p , "
  },
  {
    "label":"CircleTimes",
    "type":"keyword",
    "info":"CircleTimes[x] displays as â x.CircleTimes[x, y, â¦] displays as x â y â â¦.\n"
  },
  {
    "label":"CirculantGraph",
    "type":"keyword",
    "info":"CirculantGraph[n, j] gives the circulant graph C (j) with n vertices and jump j.CirculantGraph[n, {j"
  },
  {
    "label":"CircularOrthogonalMatrixDistribution",
    "type":"keyword",
    "info":"CircularOrthogonalMatrixDistribution[n] represents a circular orthogonal matrix distribution with ma"
  },
  {
    "label":"CircularQuaternionMatrixDistribution",
    "type":"keyword",
    "info":"CircularQuaternionMatrixDistribution[n] represents a circular quaternion matrix distribution with ma"
  },
  {
    "label":"CircularRealMatrixDistribution",
    "type":"keyword",
    "info":"CircularRealMatrixDistribution[n] represents a circular real matrix distribution with matrix dimensi"
  },
  {
    "label":"CircularSymplecticMatrixDistribution",
    "type":"keyword",
    "info":"CircularSymplecticMatrixDistribution[n] represents a circular symplectic matrix distribution with ma"
  },
  {
    "label":"CircularUnitaryMatrixDistribution",
    "type":"keyword",
    "info":"CircularUnitaryMatrixDistribution[n] represents a circular unitary matrix distribution with matrix d"
  },
  {
    "label":"Circumsphere",
    "type":"keyword",
    "info":"                                                                                    n\nCircumsphere[{"
  },
  {
    "label":"CityData",
    "type":"keyword",
    "info":"CityData[name, \"property\"] gives the value of the specified property for the city with the specified"
  },
  {
    "label":"ClassifierFunction",
    "type":"keyword",
    "info":"ClassifierFunction[â¦] represents a function generated by Classify that classifies data into classes."
  },
  {
    "label":"ClassifierInformation",
    "type":"keyword",
    "info":"ClassifierInformation[classifier] generates a report giving information on the classifier function c"
  },
  {
    "label":"ClassifierMeasurements",
    "type":"keyword",
    "info":"ClassifierMeasurements[classifier, testset, prop] gives measurements associated with property prop w"
  },
  {
    "label":"ClassifierMeasurementsObject",
    "type":"keyword",
    "info":"ClassifierMeasurementsObject[â¦] represents an object generated by ClassifierMeasurements that can be"
  },
  {
    "label":"Classify",
    "type":"keyword",
    "info":"Classify[{example  ï¢ class , example  ï¢ class , â¦}] generates a ClassifierFunction[â¦] based on the e"
  },
  {
    "label":"ClassPriors",
    "type":"keyword",
    "info":"ClassPriors is an option for Classify and related functions that specifies explicit prior probabilit"
  },
  {
    "label":"Clear",
    "type":"keyword",
    "info":"Clear[symbol , symbol , â¦] clears values and definitions for the symbol . Clear[\"form \", \"form \", â¦]"
  },
  {
    "label":"ClearAll",
    "type":"keyword",
    "info":"ClearAll[symb , symb , â¦] clears all values, definitions, attributes, messages, and defaults associa"
  },
  {
    "label":"ClearAttributes",
    "type":"keyword",
    "info":"ClearAttributes[symbol, attr] removes attr from the list of attributes of the symbol symbol. ClearAt"
  },
  {
    "label":"ClearCookies",
    "type":"keyword",
    "info":"ClearCookies[domain] clears all persistent and session cookies associated with the specified domain."
  },
  {
    "label":"ClearPermissions",
    "type":"keyword",
    "info":"ClearPermissions[obj, class] clears permissions for the specified class of users for the cloud objec"
  },
  {
    "label":"ClearSystemCache",
    "type":"keyword",
    "info":"ClearSystemCache[] clears internal system caches of stored results.ClearSystemCache[type] clears onl"
  },
  {
    "label":"ClebschGordan",
    "type":"keyword",
    "info":"ClebschGordan[{j , m }, {j , m }, {j, m}] gives the ClebschâGordan coefficient for the decomposition"
  },
  {
    "label":"ClickPane",
    "type":"keyword",
    "info":"ClickPane[image, func] represents a clickable pane that displays as image and applies func to the x,"
  },
  {
    "label":"ClickToCopy",
    "type":"keyword",
    "info":"ClickToCopy[expr] represents a button that copies expr whenever it is clicked.ClickToCopy[label, exp"
  },
  {
    "label":"ClickToCopyEnabled",
    "type":"keyword",
    "info":"ClickToCopyEnabled is an option for Cell that specifies whether to show a click-to-copy overlay when"
  },
  {
    "label":"Clip",
    "type":"keyword",
    "info":"Clip[x] gives x clipped to be between -1 and +1. Clip[x, {min, max}] gives x for min â¤ x â¤ max, min "
  },
  {
    "label":"ClipboardNotebook",
    "type":"keyword",
    "info":"System`ClipboardNotebook"
  },
  {
    "label":"ClipFill",
    "type":"keyword",
    "info":"ClipFill is an option for plotting functions that specifies what should be shown where curves or sur"
  },
  {
    "label":"ClippingStyle",
    "type":"keyword",
    "info":"ClippingStyle is an option for plotting functions that specifies the style of what should be drawn w"
  },
  {
    "label":"ClipPlanes",
    "type":"keyword",
    "info":"ClipPlanes is an option to Graphics3D that specifies a list of clipping planes that can cut away por"
  },
  {
    "label":"ClipPlanesStyle",
    "type":"keyword",
    "info":"ClipPlanesStyle is an option to Graphics3D that specifies how clipping planes defined with the ClipP"
  },
  {
    "label":"ClipRange",
    "type":"keyword",
    "info":"ClipRange is an option to Raster3D that specifies a rectangular region that is cut away from the res"
  },
  {
    "label":"Clock",
    "type":"keyword",
    "info":"Clock[] represents a clock variable whose value cycles continuously from 0 to 1 once per second when"
  },
  {
    "label":"ClockGauge",
    "type":"keyword",
    "info":"ClockGauge[] draws an analog clock face showing the local time with hours, minutes, and seconds.Cloc"
  },
  {
    "label":"ClockwiseContourIntegral",
    "type":"keyword",
    "info":"System`ClockwiseContourIntegral"
  },
  {
    "label":"Close",
    "type":"keyword",
    "info":"Close[obj] closes a stream or socket. "
  },
  {
    "label":"Closed",
    "type":"keyword",
    "info":"System`Closed"
  },
  {
    "label":"CloseKernels",
    "type":"keyword",
    "info":"CloseKernels[] terminates all parallel kernels from the list Kernels[].CloseKernels[k] terminates th"
  },
  {
    "label":"ClosenessCentrality",
    "type":"keyword",
    "info":"ClosenessCentrality[g] gives a list of closeness centralities for the vertices in the graph g.Closen"
  },
  {
    "label":"Closing",
    "type":"keyword",
    "info":"Closing[image, ker] gives the morphological closing of image with respect to the structuring element"
  },
  {
    "label":"ClosingAutoSave",
    "type":"keyword",
    "info":"ClosingAutoSave is an option for notebooks that specifies whether a notebook is automatically saved "
  },
  {
    "label":"ClosingEvent",
    "type":"keyword",
    "info":"System`ClosingEvent"
  },
  {
    "label":"CloudAccountData",
    "type":"keyword",
    "info":"CloudAccountData[] gives data associated with the cloud account currently being used.CloudAccountDat"
  },
  {
    "label":"CloudBase",
    "type":"keyword",
    "info":"CloudBase is an option specifying the base URI of the server to use for cloud operations."
  },
  {
    "label":"CloudConnect",
    "type":"keyword",
    "info":"CloudConnect[userid, password] authenticates to the Wolfram Cloud using the specified cloud user ID "
  },
  {
    "label":"CloudConnections",
    "type":"keyword",
    "info":"CloudConnections[] gives a list of cloud accounts that are authenticated."
  },
  {
    "label":"CloudDeploy",
    "type":"keyword",
    "info":"CloudDeploy[expr] deploys expr to a new anonymous cloud object.CloudDeploy[expr, location] deploys e"
  },
  {
    "label":"CloudDirectory",
    "type":"keyword",
    "info":"CloudDirectory[] gives a CloudObject representing the current working directory used for cloud objec"
  },
  {
    "label":"CloudDisconnect",
    "type":"keyword",
    "info":"CloudDisconnect[] disconnects a non-cloud instance of the Wolfram Language from the Wolfram Cloud."
  },
  {
    "label":"CloudEvaluate",
    "type":"keyword",
    "info":"CloudEvaluate[expr] evaluates expr in the cloud and returns the result.CloudEvaluate[expr, h] wraps "
  },
  {
    "label":"CloudExport",
    "type":"keyword",
    "info":"CloudExport[expr, \"format\"] exports expr to a new anonymous cloud object in the specified format.Clo"
  },
  {
    "label":"CloudExpression",
    "type":"keyword",
    "info":"CloudExpression[\"name\"] represents an expression whose value is persistently stored in the cloud.htt"
  },
  {
    "label":"CloudExpressions",
    "type":"keyword",
    "info":"CloudExpressions[] gives a list of named cloud expressions owned by you. CloudExpressions[None] give"
  },
  {
    "label":"CloudFunction",
    "type":"keyword",
    "info":"CloudFunction[fun] represents a pure function that evaluates fun[args] in the cloud.CloudFunction[Cl"
  },
  {
    "label":"CloudGet",
    "type":"keyword",
    "info":"CloudGet[\"uri\"] reads in a cloud object at a given URI, evaluating each expression in it and returni"
  },
  {
    "label":"CloudImport",
    "type":"keyword",
    "info":"CloudImport[\"uri\"] imports from a cloud object at a given URI.CloudImport[\"uri\", elements] imports t"
  },
  {
    "label":"CloudLoggingData",
    "type":"keyword",
    "info":"CloudLoggingData[] gives summary logging data for all your cloud objects.CloudLoggingData[category] "
  },
  {
    "label":"CloudObject",
    "type":"keyword",
    "info":"CloudObject[] represents a new anonymous cloud object.http:\/\/â¦\"], CloudObject[\"https:\/\/â¦\"] represent"
  },
  {
    "label":"CloudObjectInformation",
    "type":"keyword",
    "info":"CloudObjectInformation[obj] gives information about a cloud object.\nCloudObjectInformation[{obj, ..."
  },
  {
    "label":"CloudObjectInformationData",
    "type":"keyword",
    "info":"System`CloudObjectInformationData"
  },
  {
    "label":"CloudObjectNameFormat",
    "type":"keyword",
    "info":"CloudObjectNameFormat is an option for CloudObject and related objects that determines how the name "
  },
  {
    "label":"CloudObjects",
    "type":"keyword",
    "info":"CloudObjects[] gives a list of cloud objects in your current cloud directory.CloudObjects[dir] gives"
  },
  {
    "label":"CloudObjectURLType",
    "type":"keyword",
    "info":"CloudObjectURLType is an option for CloudObject and related objects that specifies the base type of "
  },
  {
    "label":"CloudPublish",
    "type":"keyword",
    "info":"CloudPublish[] makes a public copy in the cloud of the current document.CloudPublish[obj] makes a pu"
  },
  {
    "label":"CloudPut",
    "type":"keyword",
    "info":"CloudPut[expr] writes expr to a new anonymous cloud object.CloudPut[expr, \"uri\"] writes expr to a cl"
  },
  {
    "label":"CloudRenderingMethod",
    "type":"keyword",
    "info":"CloudRenderingMethod is an option for Cell and Notebook that specifies how to render cells in the cl"
  },
  {
    "label":"CloudSave",
    "type":"keyword",
    "info":"CloudSave[symbol] saves definitions associated with the specified symbol to a new anonymous cloud ob"
  },
  {
    "label":"CloudShare",
    "type":"keyword",
    "info":"CloudShare[user] shares the current cloud document with the specified user.CloudShare[{user , user ,"
  },
  {
    "label":"CloudSubmit",
    "type":"keyword",
    "info":"CloudSubmit[expr] submits expr for immediate asynchronous cloud evaluation. CloudSubmit[ScheduledTas"
  },
  {
    "label":"CloudSymbol",
    "type":"keyword",
    "info":"CloudSymbol[\"name\"] represents a symbol whose value is persistently stored in the cloud.CloudSymbol["
  },
  {
    "label":"CloudUnshare",
    "type":"keyword",
    "info":"CloudUnshare[obj] cancels sharing of the cloud object obj with everyone.CloudUnshare[obj, users] can"
  },
  {
    "label":"CloudUsageData",
    "type":"keyword",
    "info":"CloudUsageData[] gives usage data for all of your cloud objects.\nCloudUsageData[\"Periods\"] lists all"
  },
  {
    "label":"CloudUserID",
    "type":"keyword",
    "info":"System`CloudUserID"
  },
  {
    "label":"ClusterClassify",
    "type":"keyword",
    "info":"ClusterClassify[data] generates a ClassifierFunction[â¦] by partitioning data into clusters of simila"
  },
  {
    "label":"ClusterDissimilarityFunction",
    "type":"keyword",
    "info":"ClusterDissimilarityFunction is an option for ClusteringTree and Dendrogram that specifies the inter"
  },
  {
    "label":"ClusteringComponents",
    "type":"keyword",
    "info":"ClusteringComponents[array] gives an array in which each element at the lowest level of array is rep"
  },
  {
    "label":"ClusteringTree",
    "type":"keyword",
    "info":"ClusteringTree[{e , e , â¦}] constructs a weighted tree from the hierarchical clustering of the eleme"
  },
  {
    "label":"CMYKColor",
    "type":"keyword",
    "info":"CMYKColor[c, m, y, k] represents a color in the CMYK color space with cyan, magenta, yellow and blac"
  },
  {
    "label":"Coarse",
    "type":"keyword",
    "info":"System`Coarse"
  },
  {
    "label":"CodeAssistOptions",
    "type":"keyword",
    "info":"CodeAssistOptions is an option for cells that specifies settings for controlling code input assistan"
  },
  {
    "label":"Coefficient",
    "type":"keyword",
    "info":"Coefficient[expr, form] gives the coefficient of form in the polynomial expr. Coefficient[expr, form"
  },
  {
    "label":"CoefficientArrays",
    "type":"keyword",
    "info":"CoefficientArrays[polys, vars] gives the arrays of coefficients of the variables vars in the polynom"
  },
  {
    "label":"CoefficientDomain",
    "type":"keyword",
    "info":"System`CoefficientDomain"
  },
  {
    "label":"CoefficientList",
    "type":"keyword",
    "info":"CoefficientList[poly, var] gives a list of coefficients of powers of var in poly, starting with powe"
  },
  {
    "label":"CoefficientRules",
    "type":"keyword",
    "info":"CoefficientRules[poly, {x , x , â¦}] gives the list {{e  , e  , â¦} ï¢ c , {e  , â¦} ï¢ c , â¦} of exponen"
  },
  {
    "label":"CoifletWavelet",
    "type":"keyword",
    "info":"CoifletWavelet[] represents a Coiflet wavelet of order 2.CoifletWavelet[n] represents a Coiflet wave"
  },
  {
    "label":"Collect",
    "type":"keyword",
    "info":"Collect[expr, x] collects together terms involving the same powers of objects matching x. Collect[ex"
  },
  {
    "label":"CollinearPoints",
    "type":"keyword",
    "info":"CollinearPoints[{p , p , p , â¦, p }] tests whether the points p , p , p , â¦, p  are collinear.\n     "
  },
  {
    "label":"Colon",
    "type":"keyword",
    "info":"Colon[x, y, â¦] displays as x â\\[Paragraph] y â\\[Paragraph] â¦."
  },
  {
    "label":"ColonForm",
    "type":"keyword",
    "info":"ColonForm[a, b] prints as a : b."
  },
  {
    "label":"ColorBalance",
    "type":"keyword",
    "info":"ColorBalance[image] adjusts the colors in image to achieve a balance that simulates the effect of ne"
  },
  {
    "label":"ColorCombine",
    "type":"keyword",
    "info":"ColorCombine[{image , image , â¦}] creates a multichannel image by combining the sequence of channels"
  },
  {
    "label":"ColorConvert",
    "type":"keyword",
    "info":"ColorConvert[color, colspace] converts the color space of a color to the specified color space colsp"
  },
  {
    "label":"ColorCoverage",
    "type":"keyword",
    "info":"ColorCoverage is an option for DominantColors that specifies the minimum image coverage that each co"
  },
  {
    "label":"ColorData",
    "type":"keyword",
    "info":"ColorData[\"scheme\"] gives a function that generates colors in the named color scheme when applied to"
  },
  {
    "label":"ColorDataFunction",
    "type":"keyword",
    "info":"ColorDataFunction[range, â¦] is a function that represents a color scheme. "
  },
  {
    "label":"ColorDetect",
    "type":"keyword",
    "info":"ColorDetect[image, cspec] returns a mask image representing regions in image with colors within the "
  },
  {
    "label":"ColorDistance",
    "type":"keyword",
    "info":"ColorDistance[c , c ] gives the approximate perceptual distance between color directives c  and c .C"
  },
  {
    "label":"ColorFunction",
    "type":"keyword",
    "info":"ColorFunction is an option for graphics functions that specifies a function to apply to determine co"
  },
  {
    "label":"ColorFunctionBinning",
    "type":"keyword",
    "info":"ColorFunctionBinning is an option for plotting functions that divides values into a limited set of b"
  },
  {
    "label":"ColorFunctionScaling",
    "type":"keyword",
    "info":"ColorFunctionScaling is an option for graphics functions that specifies whether arguments supplied t"
  },
  {
    "label":"Colorize",
    "type":"keyword",
    "info":"Colorize[m] generates an image from an integer matrix m, using colors for positive integers and blac"
  },
  {
    "label":"ColorNegate",
    "type":"keyword",
    "info":"ColorNegate[color] gives the negative of a color.ColorNegate[image] gives the negative of image, in "
  },
  {
    "label":"ColorOutput",
    "type":"keyword",
    "info":"ColorOutput is an option for graphics functions that specifies the type of color output to produce. "
  },
  {
    "label":"ColorProfileData",
    "type":"keyword",
    "info":"ColorProfileData[<>, \"Description\" ï¢ \"desc\", \"DeviceColorSpace\" ï¢ \"device\", \"IndependentColorSpace\" "
  },
  {
    "label":"ColorQ",
    "type":"keyword",
    "info":"ColorQ[color] yields True if color is a valid color directive and False otherwise."
  },
  {
    "label":"ColorQuantize",
    "type":"keyword",
    "info":"ColorQuantize[image] gives an approximation to image by quantizing to distinct colors.ColorQuantize["
  },
  {
    "label":"ColorReplace",
    "type":"keyword",
    "info":"ColorReplace[image, color] finds regions in image whose pixel values are similar to color and replac"
  },
  {
    "label":"ColorRules",
    "type":"keyword",
    "info":"ColorRules is an option that specifies how colors of cells should be determined from values. "
  },
  {
    "label":"ColorSelectorSettings",
    "type":"keyword",
    "info":"ColorSelectorSettings is a global option that specifies settings for the Color dialog box."
  },
  {
    "label":"ColorSeparate",
    "type":"keyword",
    "info":"ColorSeparate[image] gives a list of single-channel images corresponding to each of the color channe"
  },
  {
    "label":"ColorSetter",
    "type":"keyword",
    "info":"ColorSetter[color] represents a color setter which displays as a swatch of the specified color and w"
  },
  {
    "label":"ColorSetterBox",
    "type":"keyword",
    "info":"System`ColorSetterBox"
  },
  {
    "label":"ColorSetterBoxOptions",
    "type":"keyword",
    "info":"ColorSetterBoxOptions ï¢ {opt  ï¢ val , opt  ï¢ val , â¦} is an option that specifies settings for Color"
  },
  {
    "label":"ColorSlider",
    "type":"keyword",
    "info":"ColorSlider[color] represents a color slider currently set to the color corresponding to color.Color"
  },
  {
    "label":"ColorsNear",
    "type":"keyword",
    "info":"ColorsNear[color] represents a region around color.ColorsNear[color, d] represents a region with max"
  },
  {
    "label":"ColorSpace",
    "type":"keyword",
    "info":"ColorSpace is an option for Image and related functions that specifies the color space to which colo"
  },
  {
    "label":"ColorToneMapping",
    "type":"keyword",
    "info":"ColorToneMapping[image] applies a tone mapping to color values in image so as to make variations of "
  },
  {
    "label":"Column",
    "type":"keyword",
    "info":"Column[{expr , expr , â¦}] is an object that formats with the expr  arranged in a column, with expr  "
  },
  {
    "label":"ColumnAlignments",
    "type":"keyword",
    "info":"ColumnAlignments is an option for the low-level function GridBox that specifies how entries in each "
  },
  {
    "label":"ColumnBackgrounds",
    "type":"keyword",
    "info":"System`ColumnBackgrounds"
  },
  {
    "label":"ColumnForm",
    "type":"keyword",
    "info":"ColumnForm[{e , e , â¦}] prints as a column with e  above e , etc. ColumnForm[list, horiz] specifies "
  },
  {
    "label":"ColumnLines",
    "type":"keyword",
    "info":"ColumnLines is an option for the low-level function GridBox which specifies whether lines should be "
  },
  {
    "label":"ColumnsEqual",
    "type":"keyword",
    "info":"ColumnsEqual is an option for the low-level function GridBox which specifies whether all columns in "
  },
  {
    "label":"ColumnSpacings",
    "type":"keyword",
    "info":"ColumnSpacings is an option for the low-level function GridBox which specifies the spaces in ems tha"
  },
  {
    "label":"ColumnWidths",
    "type":"keyword",
    "info":"ColumnWidths is an option for the low-level function GridBox which specifies the widths to use for c"
  },
  {
    "label":"CombinatorB",
    "type":"keyword",
    "info":"CombinatorB represents the B combinator."
  },
  {
    "label":"CombinatorC",
    "type":"keyword",
    "info":"CombinatorC represents the C combinator."
  },
  {
    "label":"CombinatorI",
    "type":"keyword",
    "info":"CombinatorI represents the I combinator."
  },
  {
    "label":"CombinatorK",
    "type":"keyword",
    "info":"CombinatorK represents the K combinator."
  },
  {
    "label":"CombinatorS",
    "type":"keyword",
    "info":"CombinatorS represents the S combinator."
  },
  {
    "label":"CombinatorW",
    "type":"keyword",
    "info":"CombinatorW represents the W combinator."
  },
  {
    "label":"CombinatorY",
    "type":"keyword",
    "info":"CombinatorY represents the Y combinator."
  },
  {
    "label":"CombinedEntityClass",
    "type":"keyword",
    "info":"CombinedEntityClass[class , class , prop] represents a class of entities obtained by combining the p"
  },
  {
    "label":"CombinerFunction",
    "type":"keyword",
    "info":"CombinerFunction is an option for template functions that specifies how fragments should be assemble"
  },
  {
    "label":"CometData",
    "type":"keyword",
    "info":"CometData[entity, property] gives the value of the specified property for the comet entity.CometData"
  },
  {
    "label":"CommonDefaultFormatTypes",
    "type":"keyword",
    "info":"CommonDefaultFormatTypes is an option that specifies default formats for newly created cells."
  },
  {
    "label":"Commonest",
    "type":"keyword",
    "info":"Commonest[list] gives a list of the elements that are the most common in list.Commonest[list, n] giv"
  },
  {
    "label":"CommonestFilter",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"CommonName",
    "type":"keyword",
    "info":"CommonName[entity] gives the common name for the entity specified by entity.CommonName[{entity , â¦, "
  },
  {
    "label":"CommonUnits",
    "type":"keyword",
    "info":"CommonUnits[{quantity , quantity , â¦, quantity }] converts quantity  through quantity  to common uni"
  },
  {
    "label":"CommunityBoundaryStyle",
    "type":"keyword",
    "info":"CommunityBoundaryStyle is an option to CommunityGraphPlot that specifies how to style community boun"
  },
  {
    "label":"CommunityGraphPlot",
    "type":"keyword",
    "info":"CommunityGraphPlot[g] generates a plot showing the community structure of the graph g.CommunityGraph"
  },
  {
    "label":"CommunityLabels",
    "type":"keyword",
    "info":"CommunityLabels is an option to CommunityGraphPlot that controls what labels and placement to use fo"
  },
  {
    "label":"CommunityRegionStyle",
    "type":"keyword",
    "info":"CommunityRegionStyle is an option to CommunityGraphPlot that specifies how to style community region"
  },
  {
    "label":"CompanyData",
    "type":"keyword",
    "info":"CompanyData[entity, property] gives the value of the specified property for the company entity.Compa"
  },
  {
    "label":"CompatibleUnitQ",
    "type":"keyword",
    "info":"CompatibleUnitQ[quantity , quantity ] returns True if quantity  and quantity  have compatible units,"
  },
  {
    "label":"CompilationOptions",
    "type":"keyword",
    "info":"CompilationOptions is an option for Compile that specifies settings for the compilation process. "
  },
  {
    "label":"CompilationTarget",
    "type":"keyword",
    "info":"CompilationTarget is an option for Compile that specifies the target runtime for the compiled functi"
  },
  {
    "label":"Compile",
    "type":"keyword",
    "info":"Compile[{x , x , â¦}, expr] creates a compiled function that evaluates expr assuming numerical values"
  },
  {
    "label":"Compiled",
    "type":"keyword",
    "info":"Compiled is an option for various numerical and plotting functions which specifies whether the expre"
  },
  {
    "label":"CompiledCodeFunction",
    "type":"keyword",
    "info":"CompiledCodeFunction[â¦] is a function created by FunctionCompile that contains compiled code that is"
  },
  {
    "label":"CompiledFunction",
    "type":"keyword",
    "info":"CompiledFunction[argsâ¦] represents compiled code for evaluating a compiled function. "
  },
  {
    "label":"CompiledLayer",
    "type":"keyword",
    "info":"CompiledLayer[func] represents a net layer whose computation is defined by the compilable function f"
  },
  {
    "label":"CompilerEnvironment",
    "type":"keyword",
    "info":"CompilerEnvironment is an option for FunctionCompile and related functions that allows definitions t"
  },
  {
    "label":"CompilerEnvironmentAppend",
    "type":"keyword",
    "info":"System`CompilerEnvironmentAppend"
  },
  {
    "label":"CompilerEnvironmentAppendTo",
    "type":"keyword",
    "info":"CompilerEnvironmentAppendTo[{def , def , â¦}] appends declarations to $CompilerEnvironment.CompilerEn"
  },
  {
    "label":"CompilerEnvironmentObject",
    "type":"keyword",
    "info":"CompilerEnvironmentObject represents a collection of definitions that can be included in compilation"
  },
  {
    "label":"CompilerOptions",
    "type":"keyword",
    "info":"CompilerOptions is an option for FunctionCompile and related functions that allows options for the c"
  },
  {
    "label":"Complement",
    "type":"keyword",
    "info":"Complement[e   , e , e , â¦] gives the elements in e    that are not in any of the e . \n            a"
  },
  {
    "label":"ComplementedEntityClass",
    "type":"keyword",
    "info":"ComplementedEntityClass[class   , class , â¦] represents an entity class containing all the entities "
  },
  {
    "label":"CompleteGraph",
    "type":"keyword",
    "info":"CompleteGraph[n] gives the complete graph with n vertices K .CompleteGraph[{n , n , â¦, n }] gives th"
  },
  {
    "label":"CompleteGraphQ",
    "type":"keyword",
    "info":"CompleteGraphQ[g] yields True if the graph g is a complete graph, and False otherwise.CompleteGraphQ"
  },
  {
    "label":"CompleteIntegral",
    "type":"keyword",
    "info":"CompleteIntegral[pde, u, {x , â¦, x }] gives a complete integral u for the first-order partial differ"
  },
  {
    "label":"CompleteKaryTree",
    "type":"keyword",
    "info":"CompleteKaryTree[n] gives the complete binary tree with n levels.CompleteKaryTree[n, k] gives the co"
  },
  {
    "label":"CompletionsListPacket",
    "type":"keyword",
    "info":"System`CompletionsListPacket"
  },
  {
    "label":"Complex",
    "type":"keyword",
    "info":"Complex is the head used for complex numbers. "
  },
  {
    "label":"ComplexArrayPlot",
    "type":"keyword",
    "info":"ComplexArrayPlot[array] generates a plot in which complex values z   in an array array are shown in "
  },
  {
    "label":"ComplexContourPlot",
    "type":"keyword",
    "info":"ComplexContourPlot[f, {z, z   , z   }] generates a filled contour plot of f as a function of z. Comp"
  },
  {
    "label":"Complexes",
    "type":"keyword",
    "info":"Complexes represents the domain of complex numbers, as in x â Complexes. "
  },
  {
    "label":"ComplexExpand",
    "type":"keyword",
    "info":"ComplexExpand[expr] expands expr assuming that all variables are real. ComplexExpand[expr, {x , x , "
  },
  {
    "label":"ComplexInfinity",
    "type":"keyword",
    "info":"ComplexInfinity represents a quantity with infinite magnitude, but undetermined complex phase. "
  },
  {
    "label":"ComplexityFunction",
    "type":"keyword",
    "info":"ComplexityFunction is an option for Simplify and other functions which gives a function to rank the "
  },
  {
    "label":"ComplexListPlot",
    "type":"keyword",
    "info":"ComplexListPlot[{z , z , â¦}] plots complex numbers z , z , â¦ as points in the complex plane.ComplexL"
  },
  {
    "label":"ComplexPlot",
    "type":"keyword",
    "info":"ComplexPlot[f, {z, z   , z   }] generates a plot of Arg[f] over the complex rectangle with corners z"
  },
  {
    "label":"ComplexPlot3D",
    "type":"keyword",
    "info":"ComplexPlot3D[f, {z, z   , z   }] generates a 3D plot of Abs[f] colored by Arg[f] over the complex r"
  },
  {
    "label":"ComplexRegionPlot",
    "type":"keyword",
    "info":"ComplexRegionPlot[pred, {z, z   , z   }] makes a plot showing the region in the complex plane for wh"
  },
  {
    "label":"ComplexStreamPlot",
    "type":"keyword",
    "info":"ComplexStreamPlot[f, {z, z   , z   }] generates a streamline plot of the vector field {Re[f], Im[f]}"
  },
  {
    "label":"ComplexVectorPlot",
    "type":"keyword",
    "info":"ComplexVectorPlot[f, {z, z   , z   }] generates a vector plot of the vector field {Re[f], Im[f]} ove"
  },
  {
    "label":"ComponentMeasurements",
    "type":"keyword",
    "info":"ComponentMeasurements[{image, lmat}, \"prop\"] computes the property \"prop\" for components of image in"
  },
  {
    "label":"ComponentwiseContextMenu",
    "type":"keyword",
    "info":"System`ComponentwiseContextMenu"
  },
  {
    "label":"Compose",
    "type":"keyword",
    "info":"System`Compose"
  },
  {
    "label":"ComposeList",
    "type":"keyword",
    "info":"ComposeList[{f , f , â¦}, x] generates a list of the form {x, f [x], f [f [x]], â¦}. \n              1 "
  },
  {
    "label":"ComposeSeries",
    "type":"keyword",
    "info":"ComposeSeries[series , series , â¦] composes several power series. \n                    1        2"
  },
  {
    "label":"CompositeQ",
    "type":"keyword",
    "info":"CompositeQ[n] yields True if n is a composite number, and yields False otherwise. "
  },
  {
    "label":"Composition",
    "type":"keyword",
    "info":"Composition[f , f , f , â¦] represents a composition of the functions f , f , f , â¦. \n             1 "
  },
  {
    "label":"CompoundElement",
    "type":"keyword",
    "info":"CompoundElement[{spec , spec , â¦}] represents a form or interpreter specification for a list of fiel"
  },
  {
    "label":"CompoundExpression",
    "type":"keyword",
    "info":"expr  ; expr  ; â¦ evaluates the expr  in turn, giving the last one as the result. \n    1       2    "
  },
  {
    "label":"CompoundPoissonDistribution",
    "type":"keyword",
    "info":"CompoundPoissonDistribution[Î», dist] represents a compound Poisson distribution with rate parameter "
  },
  {
    "label":"CompoundPoissonProcess",
    "type":"keyword",
    "info":"CompoundPoissonProcess[Î», jdist] represents a compound Poisson process with rate parameter Î» and jum"
  },
  {
    "label":"CompoundRenewalProcess",
    "type":"keyword",
    "info":"CompoundRenewalProcess[rdist, jdist] represents a compound renewal process with renewal-time distrib"
  },
  {
    "label":"Compress",
    "type":"keyword",
    "info":"Compress[expr] gives a compressed representation of expr as a string. "
  },
  {
    "label":"CompressedData",
    "type":"keyword",
    "info":"System`CompressedData"
  },
  {
    "label":"CompressionLevel",
    "type":"keyword",
    "info":"CompressionLevel is an option for Export and CreateArchive that specifies the amount of compression "
  },
  {
    "label":"ComputeUncertainty",
    "type":"keyword",
    "info":"ComputeUncertainty is an option for ClassifierMeasurements, LearnedDistribution and other functions "
  },
  {
    "label":"ConcaveHullMesh",
    "type":"keyword",
    "info":"ConcaveHullMesh[{p , p , â¦}] gives the concave hull mesh from the points p , p , â¦.ConcaveHullMesh[{"
  },
  {
    "label":"Condition",
    "type":"keyword",
    "info":"patt\/;test is a pattern which matches only if the evaluation of test yields True. lhs :> rhs\/;test r"
  },
  {
    "label":"ConditionalExpression",
    "type":"keyword",
    "info":"ConditionalExpression[expr, cond] is a symbolic construct that represents the expression expr when t"
  },
  {
    "label":"Conditioned",
    "type":"keyword",
    "info":"Conditioned[expr, cond] or expr ï cond represents expr conditioned by the predicate cond."
  },
  {
    "label":"Cone",
    "type":"keyword",
    "info":"Cone[{{x , y , z }, {x , y , z }}, r] represents a cone with a base of radius r centered at (x , y ,"
  },
  {
    "label":"ConeBox",
    "type":"keyword",
    "info":"System`ConeBox"
  },
  {
    "label":"ConfidenceLevel",
    "type":"keyword",
    "info":"ConfidenceLevel is an option for LinearModelFit and other fitting functions that specifies the level"
  },
  {
    "label":"ConfidenceRange",
    "type":"keyword",
    "info":"ConfidenceRange is an option for SurvivalModelFit and other functions that specifies the range over "
  },
  {
    "label":"ConfidenceTransform",
    "type":"keyword",
    "info":"ConfidenceTransform is an option for functions such as SurvivalModelFit that specifies the transform"
  },
  {
    "label":"ConfigurationPath",
    "type":"keyword",
    "info":"ConfigurationPath is a global option that specifies which directories are searched for systemwide co"
  },
  {
    "label":"Confirm",
    "type":"keyword",
    "info":"Confirm[expr] confirms that expr is not considered a failure, otherwise throwing an error to the nea"
  },
  {
    "label":"ConfirmAssert",
    "type":"keyword",
    "info":"ConfirmAssert[test] confirms that test is True, otherwise throwing an error to the nearest surroundi"
  },
  {
    "label":"ConfirmBy",
    "type":"keyword",
    "info":"ConfirmBy[expr, f] confirms that f[expr] returns True, otherwise throwing an error to the nearest su"
  },
  {
    "label":"ConfirmMatch",
    "type":"keyword",
    "info":"ConfirmMatch[expr, form] confirms that expr matches the pattern form, otherwise throwing an error to"
  },
  {
    "label":"ConfirmQuiet",
    "type":"keyword",
    "info":"ConfirmQuiet[expr] confirms that no messages are generated during the evaluation of expr, otherwise "
  },
  {
    "label":"ConformationMethod",
    "type":"keyword",
    "info":"ConformationMethod is an option for VideoJoin and others that specifies how to conform frames of dif"
  },
  {
    "label":"ConformAudio",
    "type":"keyword",
    "info":"ConformAudio[{audio , audio , â¦}] returns a list of audio objects where all audio  are made to have "
  },
  {
    "label":"ConformImages",
    "type":"keyword",
    "info":"ConformImages[{image , image , â¦}] returns a list of images where all image  are made to have confor"
  },
  {
    "label":"Congruent",
    "type":"keyword",
    "info":"Congruent[x, y, â¦] displays as x â¡ y â¡ â¦."
  },
  {
    "label":"ConicGradientFilling",
    "type":"keyword",
    "info":"ConicGradientFilling[{col , col , â¦, col }] is a two-dimensional graphics directive specifying that "
  },
  {
    "label":"ConicHullRegion",
    "type":"keyword",
    "info":"ConicHullRegion[{p , â¦, p     }] represents the m-dimensional affine hull region passing through poi"
  },
  {
    "label":"ConicHullRegion3DBox",
    "type":"keyword",
    "info":"System`ConicHullRegion3DBox"
  },
  {
    "label":"ConicHullRegionBox",
    "type":"keyword",
    "info":"System`ConicHullRegionBox"
  },
  {
    "label":"ConicOptimization",
    "type":"keyword",
    "info":"ConicOptimization[f, cons, vars] finds values of variables vars that minimize the linear objective f"
  },
  {
    "label":"Conjugate",
    "type":"keyword",
    "info":"Conjugate[z] or z ï gives the complex conjugate of the complex number z. "
  },
  {
    "label":"ConjugateTranspose",
    "type":"keyword",
    "info":"                          ï\nConjugateTranspose[m] or m  gives the conjugate transpose of m. "
  },
  {
    "label":"Conjunction",
    "type":"keyword",
    "info":"Conjunction[expr, {a , a , â¦}] gives the conjunction of expr over all choices of the Boolean variabl"
  },
  {
    "label":"Connect",
    "type":"keyword",
    "info":"Connect is a setting for the LinkMode option of LinkOpen.  LinkMode->Connect causes a link to be cre"
  },
  {
    "label":"ConnectedComponents",
    "type":"keyword",
    "info":"ConnectedComponents[g] gives the connected components of the graph g.ConnectedComponents[g, {v , v ,"
  },
  {
    "label":"ConnectedGraphComponents",
    "type":"keyword",
    "info":"ConnectedGraphComponents[g] gives the connected components of the graph g.ConnectedGraphComponents[g"
  },
  {
    "label":"ConnectedGraphQ",
    "type":"keyword",
    "info":"ConnectedGraphQ[g] yields True if the graph g is connected, and False otherwise."
  },
  {
    "label":"ConnectedMeshComponents",
    "type":"keyword",
    "info":"ConnectedMeshComponents[mr] gives a list {c , c , â¦} of disjoint path connected meshed regions.\n    "
  },
  {
    "label":"ConnectedMoleculeComponents",
    "type":"keyword",
    "info":"ConnectedMoleculeComponents[mol] gives the connected components of the molecule mol."
  },
  {
    "label":"ConnectedMoleculeQ",
    "type":"keyword",
    "info":"ConnectedMoleculeQ[mol] returns True if the atoms in mol form are connected by bonds, and False othe"
  },
  {
    "label":"ConnectionSettings",
    "type":"keyword",
    "info":"ConnectionSettings is an option for URLRead and related functions to specify advanced connection set"
  },
  {
    "label":"ConnectLibraryCallbackFunction",
    "type":"keyword",
    "info":"ConnectLibraryCallbackFunction[mname, cf] connects a CompiledFunction cf with the library callback m"
  },
  {
    "label":"ConnectSystemModelComponents",
    "type":"keyword",
    "info":"ConnectSystemModelComponents[{c  â comp , â¦}, {c  . a ï¢ c  . b, â¦}] creates a system model by connec"
  },
  {
    "label":"ConnectSystemModelController",
    "type":"keyword",
    "info":"ConnectSystemModelController[model, controller] connects the system model model with a controller ac"
  },
  {
    "label":"ConnesWindow",
    "type":"keyword",
    "info":"ConnesWindow[x] represents a Connes window function of x.ConnesWindow[x, Î\\[PlusMinus]] uses the parameter Î\\[PlusMinus].\n"
  },
  {
    "label":"ConoverTest",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"ConservativeConvectionPDETerm",
    "type":"keyword",
    "info":"ConservativeConvectionPDETerm[vars, Î\\[PlusMinus]] represents a conservative convection term â            Â\\[CenterDot] (-Î\\[PlusMinus] "
  },
  {
    "label":"ConsoleMessage",
    "type":"keyword",
    "info":"ConsoleMessage[expr] prints expr as a message to the Messages window of the frontend."
  },
  {
    "label":"ConsoleMessagePacket",
    "type":"keyword",
    "info":"System`ConsoleMessagePacket"
  },
  {
    "label":"Constant",
    "type":"keyword",
    "info":"Constant is an attribute that indicates zero derivative of a symbol with respect to all parameters. "
  },
  {
    "label":"ConstantArray",
    "type":"keyword",
    "info":"ConstantArray[c, n] generates a list of n copies of the element c.ConstantArray[c, {n , n , â¦}] gene"
  },
  {
    "label":"ConstantArrayLayer",
    "type":"keyword",
    "info":"ConstantArrayLayer[] represents a layer that has no input and produces as output a constant array.Co"
  },
  {
    "label":"ConstantImage",
    "type":"keyword",
    "info":"ConstantImage[val, size] gives an image of the specified size with constant pixel values of val.Cons"
  },
  {
    "label":"ConstantPlusLayer",
    "type":"keyword",
    "info":"ConstantPlusLayer[] represents a layer that adds a learnable bias to its input.ConstantPlusLayer[opt"
  },
  {
    "label":"ConstantRegionQ",
    "type":"keyword",
    "info":"ConstantRegionQ[reg] gives True if the reg is a constant region and False otherwise."
  },
  {
    "label":"Constants",
    "type":"keyword",
    "info":"Constants is an option for Dt which gives a list of objects to be taken as constants. "
  },
  {
    "label":"ConstantTimesLayer",
    "type":"keyword",
    "info":"ConstantTimesLayer[] represents a layer that multiplies its input by a learnable scaling array.Const"
  },
  {
    "label":"ConstellationData",
    "type":"keyword",
    "info":"ConstellationData[entity, property] gives the value of the specified property for the constellation "
  },
  {
    "label":"ConstrainedMax",
    "type":"keyword",
    "info":"System`ConstrainedMax"
  },
  {
    "label":"ConstrainedMin",
    "type":"keyword",
    "info":"System`ConstrainedMin"
  },
  {
    "label":"Construct",
    "type":"keyword",
    "info":"Construct[f, x] gives f[x].Construct[f, x , â¦, x ] gives f[x , â¦, x ].\n                             "
  },
  {
    "label":"Containing",
    "type":"keyword",
    "info":"Containing[\"outer\", \"inner\"] represents an object of type outer containing objects of type inner."
  },
  {
    "label":"ContainsAll",
    "type":"keyword",
    "info":"ContainsAll[e , e ] yields True if e  contains all of the elements of e .ContainsAll[e ] is an opera"
  },
  {
    "label":"ContainsAny",
    "type":"keyword",
    "info":"ContainsAny[e , e ] yields True if e  contains any of the elements of e .ContainsAny[e ] is an opera"
  },
  {
    "label":"ContainsExactly",
    "type":"keyword",
    "info":"ContainsExactly[e , e ] yields True if e  contains exactly the same elements as e .ContainsExactly[e"
  },
  {
    "label":"ContainsNone",
    "type":"keyword",
    "info":"ContainsNone[e , e ] yields True if e  contains none of the elements in e .ContainsNone[e ] is an op"
  },
  {
    "label":"ContainsOnly",
    "type":"keyword",
    "info":"ContainsOnly[e , e ] yields True if e  contains only elements that appear in e .ContainsOnly[e ] is "
  },
  {
    "label":"ContentDetectorFunction",
    "type":"keyword",
    "info":"ContentDetectorFunction[â¦] represents a function generated by TrainImageContentDetector or TrainText"
  },
  {
    "label":"ContentFieldOptions",
    "type":"keyword",
    "info":"ContentFieldOptions is an option for CreateSearchIndex and related functions that allows options to "
  },
  {
    "label":"ContentLocationFunction",
    "type":"keyword",
    "info":"ContentLocationFunction is an option to CreateSearchIndex and related functions that specifies how t"
  },
  {
    "label":"ContentObject",
    "type":"keyword",
    "info":"ContentObject[\"string\"] gives a content object whose content is string.ContentObject[File[â¦]] gives "
  },
  {
    "label":"ContentPadding",
    "type":"keyword",
    "info":"ContentPadding is an option for objects that can be displayed with frames that specifies whether the"
  },
  {
    "label":"ContentsBoundingBox",
    "type":"keyword",
    "info":"System`ContentsBoundingBox"
  },
  {
    "label":"ContentSelectable",
    "type":"keyword",
    "info":"ContentSelectable is an option to constructs such as Inset, Graphics, and GraphicsGroup that specifi"
  },
  {
    "label":"ContentSize",
    "type":"keyword",
    "info":"ContentSize is an option for Manipulate and other functions that specifies the size of the content a"
  },
  {
    "label":"Context",
    "type":"keyword",
    "info":"Context[] gives the current context. Context[symbol] gives the context in which a symbol appears. Co"
  },
  {
    "label":"ContextMenu",
    "type":"keyword",
    "info":"System`ContextMenu"
  },
  {
    "label":"Contexts",
    "type":"keyword",
    "info":"Contexts[] gives a list of all contexts. Contexts[\"string\"] gives a list of the contexts that match "
  },
  {
    "label":"ContextToFileName",
    "type":"keyword",
    "info":"ContextToFileName[\"context\"] gives the string specifying the file name that is by convention associa"
  },
  {
    "label":"Continuation",
    "type":"keyword",
    "info":"System`Continuation"
  },
  {
    "label":"Continue",
    "type":"keyword",
    "info":"Continue[] exits to the nearest enclosing Do, For, or While in a procedural program. "
  },
  {
    "label":"ContinuedFraction",
    "type":"keyword",
    "info":"ContinuedFraction[x, n] generates a list of the first n terms in the continued fraction representati"
  },
  {
    "label":"ContinuedFractionK",
    "type":"keyword",
    "info":"                                                                             i                      "
  },
  {
    "label":"ContinuousAction",
    "type":"keyword",
    "info":"ContinuousAction is an option for Manipulate, Slider, and related functions that specifies whether a"
  },
  {
    "label":"ContinuousMarkovProcess",
    "type":"keyword",
    "info":"ContinuousMarkovProcess[i , q] represents a continuous-time finite-state Markov process with transit"
  },
  {
    "label":"ContinuousTask",
    "type":"keyword",
    "info":"ContinuousTask[expr] represents a task in which expr is continuously reevaluated.ContinuousTask[expr"
  },
  {
    "label":"ContinuousTimeModelQ",
    "type":"keyword",
    "info":"ContinuousTimeModelQ[lsys] gives True if lsys is a continuous-time systems model, and False otherwis"
  },
  {
    "label":"ContinuousWaveletData",
    "type":"keyword",
    "info":"ContinuousWaveletData[{{oct , voc } -> coef , â¦}, wave] yields a continuous wavelet data object with"
  },
  {
    "label":"ContinuousWaveletTransform",
    "type":"keyword",
    "info":"ContinuousWaveletTransform[{x , x , â¦}] gives the continuous wavelet transform of a list of values x"
  },
  {
    "label":"ContourDetect",
    "type":"keyword",
    "info":"ContourDetect[image] gives a binary image in which white pixels correspond to the zeros and zero cro"
  },
  {
    "label":"ContourGraphics",
    "type":"keyword",
    "info":"ContourGraphics[array] is a representation of a contour plot. "
  },
  {
    "label":"ContourIntegral",
    "type":"keyword",
    "info":"System`ContourIntegral"
  },
  {
    "label":"ContourLabels",
    "type":"keyword",
    "info":"ContourLabels is an option for contour plots that specifies how to label contours. "
  },
  {
    "label":"ContourLines",
    "type":"keyword",
    "info":"ContourLines is an option for contour plots that specifies whether to draw explicit contour lines. "
  },
  {
    "label":"ContourPlot",
    "type":"keyword",
    "info":"ContourPlot[f, {x, x   , x   }, {y, y   , y   }] generates a contour plot of f as a function of x an"
  },
  {
    "label":"ContourPlot3D",
    "type":"keyword",
    "info":"ContourPlot3D[f, {x, x   , x   }, {y, y   , y   }, {z, z   , z   }] produces a three-dimensional con"
  },
  {
    "label":"Contours",
    "type":"keyword",
    "info":"Contours is an option for contour plots that specifies the contours to draw. "
  },
  {
    "label":"ContourShading",
    "type":"keyword",
    "info":"ContourShading is an option for contour plots that specifies how the regions between contour lines s"
  },
  {
    "label":"ContourSmoothing",
    "type":"keyword",
    "info":"System`ContourSmoothing"
  },
  {
    "label":"ContourStyle",
    "type":"keyword",
    "info":"ContourStyle is an option for contour plots that specifies the style in which contour lines or surfa"
  },
  {
    "label":"ContraharmonicMean",
    "type":"keyword",
    "info":"ContraharmonicMean[list] gives the contraharmonic mean of the values in list.ContraharmonicMean[list"
  },
  {
    "label":"ContrastiveLossLayer",
    "type":"keyword",
    "info":"ContrastiveLossLayer[] represents a loss layer that computes a loss based on a distance metric and a"
  },
  {
    "label":"Control",
    "type":"keyword",
    "info":"Control[{u, dom}] represents an interactive control for the variable u in the domain dom, with the t"
  },
  {
    "label":"ControlActive",
    "type":"keyword",
    "info":"ControlActive[act, norm] evaluates to act if a control that affects act is actively being used, and "
  },
  {
    "label":"ControlAlignment",
    "type":"keyword",
    "info":"System`ControlAlignment"
  },
  {
    "label":"ControlGroupContentsBox",
    "type":"keyword",
    "info":"System`ControlGroupContentsBox"
  },
  {
    "label":"ControllabilityGramian",
    "type":"keyword",
    "info":"ControllabilityGramian[ssm] gives the controllability Gramian of the state-space model ssm."
  },
  {
    "label":"ControllabilityMatrix",
    "type":"keyword",
    "info":"ControllabilityMatrix[ssm] gives the controllability matrix of the state-space model ssm."
  },
  {
    "label":"ControllableDecomposition",
    "type":"keyword",
    "info":"ControllableDecomposition[sys] yields the controllable subsystem of the state-space model sys.Contro"
  },
  {
    "label":"ControllableModelQ",
    "type":"keyword",
    "info":"ControllableModelQ[sys] yields True if the state-space model sys is controllable, and False otherwis"
  },
  {
    "label":"ControllerDuration",
    "type":"keyword",
    "info":"System`ControllerDuration"
  },
  {
    "label":"ControllerInformation",
    "type":"keyword",
    "info":"ControllerInformation[] gives dynamically updated information on currently connected controller devi"
  },
  {
    "label":"ControllerInformationData",
    "type":"keyword",
    "info":"System`ControllerInformationData"
  },
  {
    "label":"ControllerLinking",
    "type":"keyword",
    "info":"ControllerLinking is an option for Manipulate, Graphics3D, Plot3D, and related functions that specif"
  },
  {
    "label":"ControllerManipulate",
    "type":"keyword",
    "info":"ControllerManipulate[expr, {u, u   , u   }] generates a version of expr set up to allow interactive "
  },
  {
    "label":"ControllerMethod",
    "type":"keyword",
    "info":"ControllerMethod is an option for Manipulate, Graphics3D, Plot3D, and related functions that specifi"
  },
  {
    "label":"ControllerPath",
    "type":"keyword",
    "info":"ControllerPath is an option that gives a list of external controllers or classes of controllers to t"
  },
  {
    "label":"ControllerState",
    "type":"keyword",
    "info":"ControllerState[\"c\"] gives the state of the control c for the first connected controller device on w"
  },
  {
    "label":"ControlPlacement",
    "type":"keyword",
    "info":"ControlPlacement is an option for Manipulate, TabView, and other control objects that specifies wher"
  },
  {
    "label":"ControlsRendering",
    "type":"keyword",
    "info":"ControlsRendering is a Style option that specifies how controls should be rendered."
  },
  {
    "label":"ControlType",
    "type":"keyword",
    "info":"ControlType is an option for Manipulate and related functions that specifies what type of controls s"
  },
  {
    "label":"ConvectionPDETerm",
    "type":"keyword",
    "info":"ConvectionPDETerm[vars, Î\.b2] represents a convection term Î\.b2 Â\\[CenterDot] â            u with convection coefficie"
  },
  {
    "label":"Convergents",
    "type":"keyword",
    "info":"Convergents[list] gives a list of the convergents corresponding to the continued fraction terms list"
  },
  {
    "label":"ConversionOptions",
    "type":"keyword",
    "info":"ConversionOptions is an option to Import and Export used to pass special options to a particular for"
  },
  {
    "label":"ConversionRules",
    "type":"keyword",
    "info":"ConversionRules is an option for Cell that can be set to a list of rules specifying how the contents"
  },
  {
    "label":"ConvertToBitmapPacket",
    "type":"keyword",
    "info":"System`ConvertToBitmapPacket"
  },
  {
    "label":"ConvertToPostScript",
    "type":"keyword",
    "info":"System`ConvertToPostScript"
  },
  {
    "label":"ConvertToPostScriptPacket",
    "type":"keyword",
    "info":"ConvertToPostScriptPacket is an internal symbol used for formatting."
  },
  {
    "label":"ConvexHullMesh",
    "type":"keyword",
    "info":"ConvexHullMesh[{p , p , â¦}] gives a BoundaryMeshRegion representing the convex hull from the points "
  },
  {
    "label":"ConvexHullRegion",
    "type":"keyword",
    "info":"ConvexHullRegion[{p , p , â¦}] gives the convex hull from the points p , p , â¦.ConvexHullRegion[reg] "
  },
  {
    "label":"ConvexOptimization",
    "type":"keyword",
    "info":"ConvexOptimization[f, cons, vars] finds values of variables vars that minimize the convex objective "
  },
  {
    "label":"ConvexPolygonQ",
    "type":"keyword",
    "info":"ConvexPolygonQ[poly] gives True if the polygon poly is convex, and False otherwise."
  },
  {
    "label":"ConvexPolyhedronQ",
    "type":"keyword",
    "info":"ConvexPolyhedronQ[poly] gives True if the polyhedron poly is convex, and False otherwise."
  },
  {
    "label":"ConvexRegionQ",
    "type":"keyword",
    "info":"ConvexRegionQ[reg] gives True if reg is a convex region and False otherwise. "
  },
  {
    "label":"ConvolutionLayer",
    "type":"keyword",
    "info":"ConvolutionLayer[n, s] represents a trainable convolutional net layer having n output channels and u"
  },
  {
    "label":"Convolve",
    "type":"keyword",
    "info":"Convolve[f, g, x, y] gives the convolution with respect to x of the expressions f and g.Convolve[f, "
  },
  {
    "label":"ConwayGroupCo1",
    "type":"keyword",
    "info":"ConwayGroupCo1[] represents the sporadic simple Conway group Co .\n                                  "
  },
  {
    "label":"ConwayGroupCo2",
    "type":"keyword",
    "info":"ConwayGroupCo2[] represents the sporadic simple Conway group Co .\n                                  "
  },
  {
    "label":"ConwayGroupCo3",
    "type":"keyword",
    "info":"ConwayGroupCo3[] represents the sporadic simple Conway group Co .\n                                  "
  },
  {
    "label":"CookieFunction",
    "type":"keyword",
    "info":"CookieFunction is an option for URLRead, HTTPRequest, and related functions that gives a function to"
  },
  {
    "label":"Cookies",
    "type":"keyword",
    "info":"System`Cookies"
  },
  {
    "label":"CoordinateBoundingBox",
    "type":"keyword",
    "info":"CoordinateBoundingBox[coords] gives the corners {{x   , y   , â¦}, {x   , y   , â¦}} of the bounding b"
  },
  {
    "label":"CoordinateBoundingBoxArray",
    "type":"keyword",
    "info":"CoordinateBoundingBoxArray[{{x   , y   , â¦}, {x   , y   , â¦}}] generates an array of {x, y, â¦} coord"
  },
  {
    "label":"CoordinateBounds",
    "type":"keyword",
    "info":"CoordinateBounds[coords] gives a list {{x   , x   }, {y   , y   }, â¦} of the bounds in each dimensio"
  },
  {
    "label":"CoordinateBoundsArray",
    "type":"keyword",
    "info":"CoordinateBoundsArray[{{x   , x   }, {y   , y   }, â¦}] generates an array of {x, y, â¦} coordinates w"
  },
  {
    "label":"CoordinateChartData",
    "type":"keyword",
    "info":"CoordinateChartData[chart, property] gives the value of the specified property for chart.CoordinateC"
  },
  {
    "label":"CoordinatesToolOptions",
    "type":"keyword",
    "info":"CoordinatesToolOptions is an option for Graphics that gives values of options associated with the Ge"
  },
  {
    "label":"CoordinateTransform",
    "type":"keyword",
    "info":"CoordinateTransform[t, pt] performs the coordinate transformation t on the point pt.CoordinateTransf"
  },
  {
    "label":"CoordinateTransformData",
    "type":"keyword",
    "info":"CoordinateTransformData[t, property] gives the value of the specified property for the coordinate tr"
  },
  {
    "label":"CoplanarPoints",
    "type":"keyword",
    "info":"CoplanarPoints[{p , p , p , p , â¦, p }] tests whether the points p , p , p , p , â¦, p  are coplanar."
  },
  {
    "label":"CoprimeQ",
    "type":"keyword",
    "info":"CoprimeQ[n , n ] yields True if n  and n  are relatively prime, and yields False otherwise. CoprimeQ"
  },
  {
    "label":"Coproduct",
    "type":"keyword",
    "info":"Coproduct[x, y, â¦] displays as x â y â â¦."
  },
  {
    "label":"CopulaDistribution",
    "type":"keyword",
    "info":"CopulaDistribution[ker, {dist , dist , â¦}] represents a copula distribution with kernel distribution"
  },
  {
    "label":"Copyable",
    "type":"keyword",
    "info":"Copyable is an option for Cell that specifies whether a cell can be copied interactively using the f"
  },
  {
    "label":"CopyDatabin",
    "type":"keyword",
    "info":"CopyDatabin[bin] creates a copy of a databin.CopyDatabin[bin, options] creates a copy with the speci"
  },
  {
    "label":"CopyDirectory",
    "type":"keyword",
    "info":"CopyDirectory[dir , dir ] copies the directory dir  to dir . \n                 1     2              "
  },
  {
    "label":"CopyFile",
    "type":"keyword",
    "info":"CopyFile[file , file ] copies from the local, remote or cloud file file  to the local, remote or clo"
  },
  {
    "label":"CopyFunction",
    "type":"keyword",
    "info":"CopyFunction is an option for TemplateBox that specifies how the box is to be copied."
  },
  {
    "label":"CopyTag",
    "type":"keyword",
    "info":"System`CopyTag"
  },
  {
    "label":"CopyToClipboard",
    "type":"keyword",
    "info":"CopyToClipboard[expr] replaces the contents of the clipboard with expr."
  },
  {
    "label":"CoreNilpotentDecomposition",
    "type":"keyword",
    "info":"CoreNilpotentDecomposition[m] yields the core-nilpotent decomposition of a square matrix m."
  },
  {
    "label":"CornerFilter",
    "type":"keyword",
    "info":"CornerFilter[image] computes a measure for the presence of a corner for each pixel in image and retu"
  },
  {
    "label":"CornerNeighbors",
    "type":"keyword",
    "info":"CornerNeighbors is an option for various array and image processing functions that specifies whether"
  },
  {
    "label":"Correlation",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"CorrelationDistance",
    "type":"keyword",
    "info":"CorrelationDistance[u, v] gives the correlation coefficient distance between vectors u and v."
  },
  {
    "label":"CorrelationFunction",
    "type":"keyword",
    "info":"CorrelationFunction[data, hspec] estimates the correlation function at lags hspec from data.Correlat"
  },
  {
    "label":"CorrelationTest",
    "type":"keyword",
    "info":"CorrelationTest[{{x , y }, {x , y }, â¦}] tests whether the correlation coefficient for a bivariate p"
  },
  {
    "label":"Cos",
    "type":"keyword",
    "info":"Cos[z] gives the cosine of z. "
  },
  {
    "label":"Cosh",
    "type":"keyword",
    "info":"Cosh[z] gives the hyperbolic cosine of z. "
  },
  {
    "label":"CoshIntegral",
    "type":"keyword",
    "info":"CoshIntegral[z] gives the hyperbolic cosine integral Chi(z)."
  },
  {
    "label":"CosineDistance",
    "type":"keyword",
    "info":"CosineDistance[u, v] gives the angular cosine distance between vectors u and v."
  },
  {
    "label":"CosineWindow",
    "type":"keyword",
    "info":"CosineWindow[x] represents a cosine window function of x.CosineWindow[x, Î\\[PlusMinus]] uses the exponent Î\\[PlusMinus].\n"
  },
  {
    "label":"CosIntegral",
    "type":"keyword",
    "info":"CosIntegral[z] gives the cosine integral function Ci(z). "
  },
  {
    "label":"Cot",
    "type":"keyword",
    "info":"Cot[z] gives the cotangent of z. "
  },
  {
    "label":"Coth",
    "type":"keyword",
    "info":"Coth[z] gives the hyperbolic cotangent of z. "
  },
  {
    "label":"CoulombF",
    "type":"keyword",
    "info":"CoulombF[l, Î\\[CenterDot], r] gives the regular Coulomb wavefunction F (Î\\[CenterDot], r).\n                                 "
  },
  {
    "label":"CoulombG",
    "type":"keyword",
    "info":"CoulombG[l, Î\\[CenterDot], r] gives the irregular Coulomb wavefunction G (Î\\[CenterDot], r).\n                               "
  },
  {
    "label":"CoulombH1",
    "type":"keyword",
    "info":"                                                                      (+)\nCoulombH1[l, Î\\[CenterDot], r] gives t"
  },
  {
    "label":"CoulombH2",
    "type":"keyword",
    "info":"                                                                      (-)\nCoulombH2[l, Î\\[CenterDot], r] gives t"
  },
  {
    "label":"Count",
    "type":"keyword",
    "info":"Count[list, pattern] gives the number of elements in list that match pattern. Count[expr, pattern, l"
  },
  {
    "label":"CountDistinct",
    "type":"keyword",
    "info":"CountDistinct[list] gives the number of distinct elements that appear in list."
  },
  {
    "label":"CountDistinctBy",
    "type":"keyword",
    "info":"CountDistinctBy[{e , e , â¦}, f] gives the number of distinct values of f[e ] that occur.CountDistinc"
  },
  {
    "label":"CounterAssignments",
    "type":"keyword",
    "info":"CounterAssignments is an option for selections that sets the value of a specified counter."
  },
  {
    "label":"CounterBox",
    "type":"keyword",
    "info":"System`CounterBox"
  },
  {
    "label":"CounterBoxOptions",
    "type":"keyword",
    "info":"CounterBoxOptions ï¢ {opt  ï¢ val , opt  ï¢ val , â¦} is an option that specifies settings for CounterBo"
  },
  {
    "label":"CounterClockwiseContourIntegral",
    "type":"keyword",
    "info":"System`CounterClockwiseContourIntegral"
  },
  {
    "label":"CounterEvaluator",
    "type":"keyword",
    "info":"System`CounterEvaluator"
  },
  {
    "label":"CounterFunction",
    "type":"keyword",
    "info":"CounterFunction is an option for counters that specifies the symbols used to display the value of th"
  },
  {
    "label":"CounterIncrements",
    "type":"keyword",
    "info":"CounterIncrements is an option for selections that specifies whether the value of a specified counte"
  },
  {
    "label":"CounterStyle",
    "type":"keyword",
    "info":"System`CounterStyle"
  },
  {
    "label":"CounterStyleMenuListing",
    "type":"keyword",
    "info":"CounterStyleMenuListing is an option for cells that specifies what counter styles are listed in the "
  },
  {
    "label":"CountRoots",
    "type":"keyword",
    "info":"CountRoots[f, x] gives the number of real roots of the univariate function f in x.CountRoots[f, {x, "
  },
  {
    "label":"CountryData",
    "type":"keyword",
    "info":"CountryData[\"tag\", property] gives the value of the specified property for the country, country-like"
  },
  {
    "label":"Counts",
    "type":"keyword",
    "info":"Counts[list] gives an association whose keys are the distinct elements of list, and whose values giv"
  },
  {
    "label":"CountsBy",
    "type":"keyword",
    "info":"CountsBy[{e , e , â¦}, f] gives an association whose keys are the distinct values of the f[e ], and w"
  },
  {
    "label":"Covariance",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"CovarianceEstimatorFunction",
    "type":"keyword",
    "info":"CovarianceEstimatorFunction is an option for generalized linear model fitting functions that specifi"
  },
  {
    "label":"CovarianceFunction",
    "type":"keyword",
    "info":"CovarianceFunction[data, hspec] estimates the covariance function at lags hspec from data.Covariance"
  },
  {
    "label":"CoxianDistribution",
    "type":"keyword",
    "info":"CoxianDistribution[{Î\\[PlusMinus] , â¦, Î\\[PlusMinus]     }, {Î» , â¦, Î» }] represent an m-phase Coxian distribution with phase"
  },
  {
    "label":"CoxIngersollRossProcess",
    "type":"keyword",
    "info":"CoxIngersollRossProcess[Î¼, Ï, Î¸, x ] represents a CoxâIngersollâRoss process with longâterm mean Î¼, "
  },
  {
    "label":"CoxModel",
    "type":"keyword",
    "info":"CoxModel[â¦] represents the symbolic proportional hazards model obtained from CoxModelFit."
  },
  {
    "label":"CoxModelFit",
    "type":"keyword",
    "info":"CoxModelFit[{e , â¦, e }] constructs a model of the baseline hazard h (t) for events times e .CoxMode"
  },
  {
    "label":"CramerVonMisesTest",
    "type":"keyword",
    "info":"CramerVonMisesTest[data] tests whether data is normally distributed using the CramÃ©râvon Mises test."
  },
  {
    "label":"CreateArchive",
    "type":"keyword",
    "info":"CreateArchive[source] creates a compressed archive in the current directory from source.CreateArchiv"
  },
  {
    "label":"CreateCellID",
    "type":"keyword",
    "info":"CreateCellID is an option for Notebook that specifies whether to assign a CellID to cells created in"
  },
  {
    "label":"CreateChannel",
    "type":"keyword",
    "info":"CreateChannel[] creates a new channel for channel communication, with a generated name.CreateChannel"
  },
  {
    "label":"CreateCloudExpression",
    "type":"keyword",
    "info":"CreateCloudExpression[value] creates a new anonymous cloud expression that stores the specified init"
  },
  {
    "label":"CreateCompilerEnvironment",
    "type":"keyword",
    "info":"CreateCompilerEnvironment[] creates a compiler environment that can be used in FunctionCompile and r"
  },
  {
    "label":"CreateDatabin",
    "type":"keyword",
    "info":"CreateDatabin[] creates a databin in the Wolfram Data Drop and returns the corresponding Databin obj"
  },
  {
    "label":"CreateDataStructure",
    "type":"keyword",
    "info":"CreateDataStructure[\"type\", arg , arg , â¦] creates a data structure with the specified type.\n       "
  },
  {
    "label":"CreateDataSystemModel",
    "type":"keyword",
    "info":"CreateDataSystemModel[{v , v , â¦}] creates a SystemModel generating a signal of values v . CreateDat"
  },
  {
    "label":"CreateDialog",
    "type":"keyword",
    "info":"CreateDialog[expr] creates a dialog notebook containing expr and opens it in the front end.CreateDia"
  },
  {
    "label":"CreateDirectory",
    "type":"keyword",
    "info":"CreateDirectory[\"dir\"] creates a directory with name dir. CreateDirectory[] creates a directory in t"
  },
  {
    "label":"CreateDocument",
    "type":"keyword",
    "info":"CreateDocument[] creates an empty document notebook and opens it in the front end.CreateDocument[exp"
  },
  {
    "label":"CreateFile",
    "type":"keyword",
    "info":"CreateFile[\"file\"] creates a file with name file. CreateFile[] creates a file in the default area fo"
  },
  {
    "label":"CreateIntermediateDirectories",
    "type":"keyword",
    "info":"CreateIntermediateDirectories is an option for CreateDirectory and related functions that specifies "
  },
  {
    "label":"CreateLicenseEntitlement",
    "type":"keyword",
    "info":"CreateLicenseEntitlement[settings] creates an on-demand license entitlement using settings.CreateLic"
  },
  {
    "label":"CreateManagedLibraryExpression",
    "type":"keyword",
    "info":"CreateManagedLibraryExpression[mname, f] creates a managed library expression by applying f to a pos"
  },
  {
    "label":"CreateNotebook",
    "type":"keyword",
    "info":"CreateNotebook[] creates a generic empty notebook and opens it in the front end.CreateNotebook[\"type"
  },
  {
    "label":"CreatePacletArchive",
    "type":"keyword",
    "info":"CreatePacletArchive[source] creates a paclet archive file from source.CreatePacletArchive[source, de"
  },
  {
    "label":"CreatePalette",
    "type":"keyword",
    "info":"CreatePalette[expr] creates a palette notebook containing expr, and opens it in the front end.Create"
  },
  {
    "label":"CreatePalettePacket",
    "type":"keyword",
    "info":"System`CreatePalettePacket"
  },
  {
    "label":"CreatePermissionsGroup",
    "type":"keyword",
    "info":"CreatePermissionsGroup[\"name\"] creates a permissions group with the specified name.CreatePermissions"
  },
  {
    "label":"CreateScheduledTask",
    "type":"keyword",
    "info":"CreateScheduledTask[expr] creates a local scheduled task that will repeatedly evaluate expr once per"
  },
  {
    "label":"CreateSearchIndex",
    "type":"keyword",
    "info":"CreateSearchIndex[dir] creates a search index from all files in the directory dir and its subdirecto"
  },
  {
    "label":"CreateSystemModel",
    "type":"keyword",
    "info":"CreateSystemModel[sys] creates a Modelica SystemModel from the systems model sys. CreateSystemModel["
  },
  {
    "label":"CreateTemporary",
    "type":"keyword",
    "info":"CreateTemporary[] creates a temporary file with a unique name in the default temporary directory and"
  },
  {
    "label":"CreateUUID",
    "type":"keyword",
    "info":"CreateUUID[] creates a random, universally unique UUID string.CreateUUID[\"base\"] appends a UUID stri"
  },
  {
    "label":"CreateWindow",
    "type":"keyword",
    "info":"CreateWindow[] creates an empty window in the front end.CreateWindow[expr] creates a window displayi"
  },
  {
    "label":"CriterionFunction",
    "type":"keyword",
    "info":"CriterionFunction is an option in functions such as ClusterClassify that specifies the criterion to "
  },
  {
    "label":"CriticalityFailureImportance",
    "type":"keyword",
    "info":"CriticalityFailureImportance[rdist, t] gives the criticality failure importances for all components "
  },
  {
    "label":"CriticalitySuccessImportance",
    "type":"keyword",
    "info":"CriticalitySuccessImportance[rdist, t] gives the criticality success importances for all components "
  },
  {
    "label":"CriticalSection",
    "type":"keyword",
    "info":"CriticalSection[var, expr] locks the variable var with respect to parallel computation, evaluates ex"
  },
  {
    "label":"Cross",
    "type":"keyword",
    "info":"Cross[a, b] gives the vector cross product of a and b. "
  },
  {
    "label":"CrossEntropyLossLayer",
    "type":"keyword",
    "info":"CrossEntropyLossLayer[\"Index\"] represents a net layer that computes the cross-entropy loss by compar"
  },
  {
    "label":"CrossingCount",
    "type":"keyword",
    "info":"CrossingCount[contour, p] gives a count of the number of times a ray starting from the point p cross"
  },
  {
    "label":"CrossingDetect",
    "type":"keyword",
    "info":"CrossingDetect[image] gives a binary image in which white pixels correspond to the zero crossings in"
  },
  {
    "label":"CrossingPolygon",
    "type":"keyword",
    "info":"CrossingPolygon[{p , p , â¦, p }] gives a Polygon representing all points for which a ray from the po"
  },
  {
    "label":"CrossMatrix",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"Csc",
    "type":"keyword",
    "info":"Csc[z] gives the cosecant of z. "
  },
  {
    "label":"Csch",
    "type":"keyword",
    "info":"Csch[z] gives the hyperbolic cosecant of z. "
  },
  {
    "label":"CSGRegion",
    "type":"keyword",
    "info":"CSGRegion[\"op\", {reg , reg , â¦}] represents the solid region corresponding to the Boolean combinatio"
  },
  {
    "label":"CSGRegionQ",
    "type":"keyword",
    "info":"CSGRegionQ[reg] yields True if the region reg is a valid CSGRegion object and False otherwise."
  },
  {
    "label":"CSGRegionTree",
    "type":"keyword",
    "info":"CSGRegionTree[reg] gives the tree expression representing the CSG region reg."
  },
  {
    "label":"CTCLossLayer",
    "type":"keyword",
    "info":"CTCLossLayer[] represents a net layer that computes the connectionist temporal classification loss b"
  },
  {
    "label":"Cube",
    "type":"keyword",
    "info":"Cube[] represents a regular cube centered at the origin with unit edge length.Cube[l] represents a c"
  },
  {
    "label":"CubeRoot",
    "type":"keyword",
    "info":"CubeRoot[x] gives the real-valued cube root of x."
  },
  {
    "label":"Cubics",
    "type":"keyword",
    "info":"Cubics is an option for functions that involve solving algebraic equations, that specifies whether e"
  },
  {
    "label":"Cuboid",
    "type":"keyword",
    "info":"Cuboid[p   ] represents a unit hypercube with its lower corner at p   .Cuboid[p   , p   ] represents"
  },
  {
    "label":"CuboidBox",
    "type":"keyword",
    "info":"System`CuboidBox"
  },
  {
    "label":"Cumulant",
    "type":"keyword",
    "info":"                              th                                                                 th "
  },
  {
    "label":"CumulantGeneratingFunction",
    "type":"keyword",
    "info":"CumulantGeneratingFunction[dist, t] gives the cumulant-generating function for the distribution dist"
  },
  {
    "label":"Cup",
    "type":"keyword",
    "info":"Cup[x, y, â¦] displays as x â£ y â£ â¦."
  },
  {
    "label":"CupCap",
    "type":"keyword",
    "info":"CupCap[x, y, â¦] displays as x â y â â¦."
  },
  {
    "label":"Curl",
    "type":"keyword",
    "info":"Curl[{f , f }, {x , x }] gives the curl â f \/â x  - â f \/â x .Curl[{f , f , f }, {x , x , x }] gives"
  },
  {
    "label":"CurlyDoubleQuote",
    "type":"keyword",
    "info":"System`CurlyDoubleQuote"
  },
  {
    "label":"CurlyQuote",
    "type":"keyword",
    "info":"System`CurlyQuote"
  },
  {
    "label":"CurrencyConvert",
    "type":"keyword",
    "info":"CurrencyConvert[quantity, target] attempts to convert the specified currency quantity to the specifi"
  },
  {
    "label":"CurrentDate",
    "type":"keyword",
    "info":"CurrentDate[gran] gives the current date of the specified granularity type gran.CurrentDate[date, gr"
  },
  {
    "label":"CurrentImage",
    "type":"keyword",
    "info":"CurrentImage[] returns the current image captured from a connected camera.CurrentImage[n] returns n "
  },
  {
    "label":"CurrentlySpeakingPacket",
    "type":"keyword",
    "info":"System`CurrentlySpeakingPacket"
  },
  {
    "label":"CurrentNotebookImage",
    "type":"keyword",
    "info":"CurrentNotebookImage[nb] returns an image captured from the portion of the notebook nb that appears "
  },
  {
    "label":"CurrentScreenImage",
    "type":"keyword",
    "info":"CurrentScreenImage[] returns an image captured from all current display screens on your computer. Cu"
  },
  {
    "label":"CurrentValue",
    "type":"keyword",
    "info":"CurrentValue[item] gives the current value of item at a location in the Wolfram System and interface"
  },
  {
    "label":"Curry",
    "type":"keyword",
    "info":"Curry[f, n] represents an operator form of the function f of n arguments so that Curry[f, n][x ] â¦[x"
  },
  {
    "label":"CurryApplied",
    "type":"keyword",
    "info":"CurryApplied[f, n] represents an operator form of the function f of n arguments so that CurryApplied"
  },
  {
    "label":"CurvatureFlowFilter",
    "type":"keyword",
    "info":"CurvatureFlowFilter[image] applies a mean curvature flow filter to image.CurvatureFlowFilter[image, "
  },
  {
    "label":"CurveClosed",
    "type":"keyword",
    "info":"CurveClosed is an option for JoinedCurve that specifies whether individual curve components should b"
  },
  {
    "label":"Cyan",
    "type":"keyword",
    "info":"Cyan represents the color cyan in graphics or style specifications. "
  },
  {
    "label":"CycleGraph",
    "type":"keyword",
    "info":"CycleGraph[n] gives the cycle graph with n vertices C .\n                                            "
  },
  {
    "label":"CycleIndexPolynomial",
    "type":"keyword",
    "info":"CycleIndexPolynomial[perm, {x , â¦, x }] constructs the cycle index monomial of the permutation perm "
  },
  {
    "label":"Cycles",
    "type":"keyword",
    "info":"Cycles[{cyc , cyc , â¦}] represents a permutation with disjoint cycles cyc .\n           1     2      "
  },
  {
    "label":"CyclicGroup",
    "type":"keyword",
    "info":"CyclicGroup[n] represents the cyclic group of degree n."
  },
  {
    "label":"Cyclotomic",
    "type":"keyword",
    "info":"                             th\nCyclotomic[n, x] gives the nï    cyclotomic polynomial in x. "
  },
  {
    "label":"Cylinder",
    "type":"keyword",
    "info":"Cylinder[{{x , y , z }, {x , y , z }}, r] represents a cylinder of radius r around the line from (x "
  },
  {
    "label":"CylinderBox",
    "type":"keyword",
    "info":"System`CylinderBox"
  },
  {
    "label":"CylindricalDecomposition",
    "type":"keyword",
    "info":"CylindricalDecomposition[expr, {x , x , â¦}] finds a decomposition of the region represented by the s"
  },
  {
    "label":"CylindricalDecompositionFunction",
    "type":"keyword",
    "info":"CylindricalDecompositionFunction[data][x , x , â¦] represents a cylindrical algebraic formula in x , "
  },
  {
    "label":"C$",
    "type":"keyword",
    "info":"System`C$"
  },
  {
    "label":"D",
    "type":"keyword",
    "info":"                                                                                          n      n  "
  },
  {
    "label":"DagumDistribution",
    "type":"keyword",
    "info":"DagumDistribution[p, a, b] represents a Dagum distribution with shape parameters p and a and scale p"
  },
  {
    "label":"DamData",
    "type":"keyword",
    "info":"DamData[entity, property] gives the value of the specified property for the dam entity.DamData[{enti"
  },
  {
    "label":"DamerauLevenshteinDistance",
    "type":"keyword",
    "info":"DamerauLevenshteinDistance[u, v] gives the DamerauâLevenshtein distance between strings or vectors u"
  },
  {
    "label":"DampingFactor",
    "type":"keyword",
    "info":"DampingFactor is an option for FindRoot, which can be used to control convergence behavior. DampingF"
  },
  {
    "label":"Darker",
    "type":"keyword",
    "info":"Darker[color] represents a darker version of the specified color. Darker[color, f] represents a vers"
  },
  {
    "label":"Dashed",
    "type":"keyword",
    "info":"Dashed is a graphics directive specifying that lines that follow should be drawn dashed."
  },
  {
    "label":"Dashing",
    "type":"keyword",
    "info":"Dashing[{r , r , â¦}] is a two-dimensional graphics directive specifying that lines that follow are t"
  },
  {
    "label":"DatabaseConnect",
    "type":"keyword",
    "info":"DatabaseConnect[db] activates a connection to the database db."
  },
  {
    "label":"DatabaseDisconnect",
    "type":"keyword",
    "info":"DatabaseDisconnect[db] deactivates a connection to the database db. "
  },
  {
    "label":"DatabaseReference",
    "type":"keyword",
    "info":"DatabaseReference[File[\"filename\"]] represents a reference to a local file-based SQL database.Databa"
  },
  {
    "label":"Databin",
    "type":"keyword",
    "info":"Databin[\"id\"] represents a databin in the Wolfram Data Drop.Databin[\"id\", n] represents the first n "
  },
  {
    "label":"DatabinAdd",
    "type":"keyword",
    "info":"DatabinAdd[bin, data] adds the specified data to a databin."
  },
  {
    "label":"DatabinRemove",
    "type":"keyword",
    "info":"                                    th\nDatabinRemove[bin, i] removes the iï   entry from a databin.Da"
  },
  {
    "label":"Databins",
    "type":"keyword",
    "info":"Databins[] gives a list of databins associated with the currently connected user."
  },
  {
    "label":"DatabinSubmit",
    "type":"keyword",
    "info":"DatabinSubmit[bin, data] submits the specified data to be added to the databin bin asynchronously."
  },
  {
    "label":"DatabinUpload",
    "type":"keyword",
    "info":"DatabinUpload[bin, {entry , entry , â¦}] bulk uploads all the entries entry  to a databin.DatabinUplo"
  },
  {
    "label":"DataCompression",
    "type":"keyword",
    "info":"System`DataCompression"
  },
  {
    "label":"DataDistribution",
    "type":"keyword",
    "info":"DataDistribution[ddist, â¦] represents a probability distribution of type ddist, estimated from a set"
  },
  {
    "label":"DataRange",
    "type":"keyword",
    "info":"DataRange is an option for functions such as ListPlot and ListDensityPlot that specifies what range "
  },
  {
    "label":"DataReversed",
    "type":"keyword",
    "info":"DataReversed is an option for ArrayPlot and related functions that specifies whether data should be "
  },
  {
    "label":"Dataset",
    "type":"keyword",
    "info":"Dataset[data] represents a structured dataset based on a hierarchy of lists and associations."
  },
  {
    "label":"DatasetDisplayPanel",
    "type":"keyword",
    "info":"System`DatasetDisplayPanel"
  },
  {
    "label":"DatasetTheme",
    "type":"keyword",
    "info":"DatasetTheme is an option for Dataset that specifies an overall theme for a dataset and its elements"
  },
  {
    "label":"DataStructure",
    "type":"keyword",
    "info":"DataStructure[\"type\", data] represents a data structure."
  },
  {
    "label":"DataStructureQ",
    "type":"keyword",
    "info":"DataStructureQ[ds] yields True if ds is a valid data structure and False otherwise.DataStructureQ[ds"
  },
  {
    "label":"Date",
    "type":"keyword",
    "info":"Date[] gives the current local date and time in the form {year, month, day, hour, minute, second}. "
  },
  {
    "label":"DateBounds",
    "type":"keyword",
    "info":"DateBounds[{date , date , â¦}] gives the earliest and latest of the date .DateBounds[tseries] gives t"
  },
  {
    "label":"Dated",
    "type":"keyword",
    "info":"Dated[obj, year] represents the object obj associated with a particular year.Dated[obj, date] repres"
  },
  {
    "label":"DateDelimiters",
    "type":"keyword",
    "info":"System`DateDelimiters"
  },
  {
    "label":"DateDifference",
    "type":"keyword",
    "info":"DateDifference[date , date ] gives the number of days from date  to date .DateDifference[date , date"
  },
  {
    "label":"DatedUnit",
    "type":"keyword",
    "info":"DatedUnit[unit, date] represents the specified unit at a specific date."
  },
  {
    "label":"DateFormat",
    "type":"keyword",
    "info":"DateFormat is an option that determines the date formatting of dates."
  },
  {
    "label":"DateFunction",
    "type":"keyword",
    "info":"DateFunction is an option for DateListPlot and TemporalData that specifies how dates given as input "
  },
  {
    "label":"DateHistogram",
    "type":"keyword",
    "info":"DateHistogram[{date , date , â¦}] plots a histogram of the dates date .DateHistogram[{date , date , â¦"
  },
  {
    "label":"DateInterval",
    "type":"keyword",
    "info":"DateInterval[{start, end}] represents the continuous interval of time between start and end.DateInte"
  },
  {
    "label":"DateList",
    "type":"keyword",
    "info":"DateList[] gives the current local date and time in the form {year, month, day, hour, minute, second"
  },
  {
    "label":"DateListLogPlot",
    "type":"keyword",
    "info":"DateListLogPlot[{{date , v }, {date , v }, â¦}] makes a log plot with values v  at a sequence of date"
  },
  {
    "label":"DateListPlot",
    "type":"keyword",
    "info":"DateListPlot[{{date , v }, {date , v }, â¦, {date , v }}] plots points with values v  at a sequence o"
  },
  {
    "label":"DateListStepPlot",
    "type":"keyword",
    "info":"DateListStepPlot[{{date , v }, {date , v }, â¦}] plots the values v  in steps at a sequence of dates."
  },
  {
    "label":"DateObject",
    "type":"keyword",
    "info":"DateObject[] gives the current local date.DateObject[date] gives a date object corresponding to the "
  },
  {
    "label":"DateObjectQ",
    "type":"keyword",
    "info":"DateObjectQ[expr] gives True if expr is a DateObject with valid arguments, and False otherwise."
  },
  {
    "label":"DateOverlapsQ",
    "type":"keyword",
    "info":"DateOverlapsQ[date , date ] returns True if the calendar dates date  and date  overlap, and False ot"
  },
  {
    "label":"DatePattern",
    "type":"keyword",
    "info":"DatePattern[{\"e \", \"e \", â¦}] represents the characters of a date with elements of type \"e \" in Strin"
  },
  {
    "label":"DatePlus",
    "type":"keyword",
    "info":"DatePlus[date, n] gives the date n days after date.DatePlus[date, {n, step}] gives the date n calend"
  },
  {
    "label":"DateRange",
    "type":"keyword",
    "info":"DateRange[date , date ] gives all dates in the range from date  to date .DateRange[date , date , inc"
  },
  {
    "label":"DateReduction",
    "type":"keyword",
    "info":"DateReduction is an option for DateHistogram that specifies the length for cyclic periods of time."
  },
  {
    "label":"DateScale",
    "type":"keyword",
    "info":"DateScale[] represents the canonical mapping of continuous dates and times to a quantitative scale."
  },
  {
    "label":"DateSelect",
    "type":"keyword",
    "info":"DateSelect[list, crit] picks out all dates date  of a list for which crit[date ] is True.DateSelect["
  },
  {
    "label":"DateString",
    "type":"keyword",
    "info":"DateString[] gives a string representing the complete current local date and time. DateString[date] "
  },
  {
    "label":"DateTicksFormat",
    "type":"keyword",
    "info":"DateTicksFormat is an option for DateListPlot which specifies how date tick labels should be formatt"
  },
  {
    "label":"DateValue",
    "type":"keyword",
    "info":"DateValue[\"elem\"] gives the specified element of the current date and time.DateValue[{elem , elem , "
  },
  {
    "label":"DateWithinQ",
    "type":"keyword",
    "info":"DateWithinQ[date , date ] returns True if the calendar date date  is entirely contained within date "
  },
  {
    "label":"DaubechiesWavelet",
    "type":"keyword",
    "info":"DaubechiesWavelet[] represents a Daubechies wavelet of order 2. DaubechiesWavelet[n] represents a Da"
  },
  {
    "label":"DavisDistribution",
    "type":"keyword",
    "info":"DavisDistribution[b, n, Î¼] represents a Davis distribution with scale parameter b, shape parameter n"
  },
  {
    "label":"DawsonF",
    "type":"keyword",
    "info":"DawsonF[z] gives the Dawson integral F(z)."
  },
  {
    "label":"DayCount",
    "type":"keyword",
    "info":"DayCount[date , date ] gives the number of days from date  to date .DayCount[date , date , daytype] "
  },
  {
    "label":"DayCountConvention",
    "type":"keyword",
    "info":"DayCountConvention is an option that specifies the day count convention used by DateDifference."
  },
  {
    "label":"DayHemisphere",
    "type":"keyword",
    "info":"DayHemisphere[] is a two-dimensional GeoGraphics primitive that represents the half of the Earth tha"
  },
  {
    "label":"DaylightQ",
    "type":"keyword",
    "info":"DaylightQ[] gives True if it is currently daylight from the user's location.DaylightQ[datespec] give"
  },
  {
    "label":"DayMatchQ",
    "type":"keyword",
    "info":"DayMatchQ[date, daytype] returns True if the date matches the daytype specification and returns Fals"
  },
  {
    "label":"DayName",
    "type":"keyword",
    "info":"DayName[] gives the current day of the week.DayName[date] gives the day of the week for the given da"
  },
  {
    "label":"DayNightTerminator",
    "type":"keyword",
    "info":"DayNightTerminator[] is a one-dimensional GeoGraphics primitive that represents the separation line "
  },
  {
    "label":"DayPlus",
    "type":"keyword",
    "info":"DayPlus[date, n] gives the date n days away from date.DayPlus[date, n, daytype] gives the date that "
  },
  {
    "label":"DayRange",
    "type":"keyword",
    "info":"DayRange[date , date ] gives the dates in the range from date  to date .DayRange[date , date , dayty"
  },
  {
    "label":"DayRound",
    "type":"keyword",
    "info":"DayRound[date, daytype] rounds date to the nearest day of daytype, using the next-day rounding conve"
  },
  {
    "label":"DeBruijnGraph",
    "type":"keyword",
    "info":"DeBruijnGraph[m, n] gives the n-dimensional De Bruijn graph with m symbols.DeBruijnGraph[m, n, type]"
  },
  {
    "label":"DeBruijnSequence",
    "type":"keyword",
    "info":"DeBruijnSequence[list, n] gives a de Bruijn sequence on the elements in list taken n at a time.DeBru"
  },
  {
    "label":"Debug",
    "type":"keyword",
    "info":"System`Debug"
  },
  {
    "label":"DebugTag",
    "type":"keyword",
    "info":"System`DebugTag"
  },
  {
    "label":"Decapitalize",
    "type":"keyword",
    "info":"Decapitalize[string] yields a string in which the first character has been made lowercase."
  },
  {
    "label":"Decimal",
    "type":"keyword",
    "info":"Decimal is a setting for the ColumnAlignments option of GridBox which states that numbers should ali"
  },
  {
    "label":"DecimalForm",
    "type":"keyword",
    "info":"DecimalForm[expr] prints with approximate real numbers in expr always given in decimal form, without"
  },
  {
    "label":"DeclareKnownSymbols",
    "type":"keyword",
    "info":"System`DeclareKnownSymbols"
  },
  {
    "label":"DeclarePackage",
    "type":"keyword",
    "info":"DeclarePackage[\"context`\", {\"name \", \"name \", â¦}] declares that Needs[\"context`\"] should automatical"
  },
  {
    "label":"Decompose",
    "type":"keyword",
    "info":"Decompose[poly, x] decomposes a polynomial, if possible, into a composition of simpler polynomials. "
  },
  {
    "label":"DeconvolutionLayer",
    "type":"keyword",
    "info":"DeconvolutionLayer[n, sz] represents a trainable deconvolutional net layer having n output channels "
  },
  {
    "label":"Decrement",
    "type":"keyword",
    "info":"x -- decreases the value of x by 1, returning the old value of x. "
  },
  {
    "label":"Decrypt",
    "type":"keyword",
    "info":"Decrypt[\"password\", enc] attempts to decrypt the encrypted object enc using the specified password.D"
  },
  {
    "label":"DecryptFile",
    "type":"keyword",
    "info":"DecryptFile[\"password\", file] generates a decrypted version of a file, using the specified password."
  },
  {
    "label":"DedekindEta",
    "type":"keyword",
    "info":"DedekindEta[Ï] gives the Dedekind eta modular elliptic function Î\\[CenterDot](Ï)."
  },
  {
    "label":"DeepSpaceProbeData",
    "type":"keyword",
    "info":"DeepSpaceProbeData[entity, property] gives the value of the specified property for the deep space pr"
  },
  {
    "label":"Default",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"Default2DTool",
    "type":"keyword",
    "info":"System`Default2DTool"
  },
  {
    "label":"Default3DTool",
    "type":"keyword",
    "info":"System`Default3DTool"
  },
  {
    "label":"DefaultAttachedCellStyle",
    "type":"keyword",
    "info":"System`DefaultAttachedCellStyle"
  },
  {
    "label":"DefaultAxesStyle",
    "type":"keyword",
    "info":"DefaultAxesStyle is a low-level option for graphics functions that specifies the default style to us"
  },
  {
    "label":"DefaultBaseStyle",
    "type":"keyword",
    "info":"DefaultBaseStyle is a low-level option for formatting and related constructs that specifies a defaul"
  },
  {
    "label":"DefaultBoxStyle",
    "type":"keyword",
    "info":"DefaultBoxStyle is a low-level option for three-dimensional graphics functions that specifies the de"
  },
  {
    "label":"DefaultButton",
    "type":"keyword",
    "info":"DefaultButton[] represents an OK button that closes a dialog, and is the default when StyleBox[Dynam"
  },
  {
    "label":"DefaultColor",
    "type":"keyword",
    "info":"DefaultColor is an option for graphics functions that specifies the default color to use for lines, "
  },
  {
    "label":"DefaultControlPlacement",
    "type":"keyword",
    "info":"System`DefaultControlPlacement"
  },
  {
    "label":"DefaultDockedCellStyle",
    "type":"keyword",
    "info":"System`DefaultDockedCellStyle"
  },
  {
    "label":"DefaultDuplicateCellStyle",
    "type":"keyword",
    "info":"DefaultDuplicateCellStyle is a notebook option that specifies the default style to use for cells cre"
  },
  {
    "label":"DefaultDuration",
    "type":"keyword",
    "info":"DefaultDuration is an option to Animate and related functions that specifies the default total durat"
  },
  {
    "label":"DefaultElement",
    "type":"keyword",
    "info":"DefaultElement is an option for Grid and related constructs which specifies what to insert when a ne"
  },
  {
    "label":"DefaultFaceGridsStyle",
    "type":"keyword",
    "info":"DefaultFaceGridsStyle is a low-level option for 3D graphics functions that specifies the default sty"
  },
  {
    "label":"DefaultFieldHintStyle",
    "type":"keyword",
    "info":"DefaultFieldHintStyle is a low-level option for InputField that specifies the default style to use f"
  },
  {
    "label":"DefaultFont",
    "type":"keyword",
    "info":"System`DefaultFont"
  },
  {
    "label":"DefaultFontProperties",
    "type":"keyword",
    "info":"DefaultFontProperties is a global option that specifies various properties of a font family, such as"
  },
  {
    "label":"DefaultFormatType",
    "type":"keyword",
    "info":"DefaultFormatType is an option for cells that specifies the format used for displaying expressions i"
  },
  {
    "label":"DefaultFormatTypeForStyle",
    "type":"keyword",
    "info":"System`DefaultFormatTypeForStyle"
  },
  {
    "label":"DefaultFrameStyle",
    "type":"keyword",
    "info":"DefaultFrameStyle is a low-level option for graphics and related constructs that specifies the defau"
  },
  {
    "label":"DefaultFrameTicksStyle",
    "type":"keyword",
    "info":"DefaultFrameTicksStyle is a low-level option for 2D graphics functions that specifies the default st"
  },
  {
    "label":"DefaultGridLinesStyle",
    "type":"keyword",
    "info":"DefaultGridLinesStyle is a low-level option for 2D graphics functions that specifies the default sty"
  },
  {
    "label":"DefaultInlineFormatType",
    "type":"keyword",
    "info":"DefaultInlineFormatType is an option for cells that specifies the format used for displaying express"
  },
  {
    "label":"DefaultInputFormatType",
    "type":"keyword",
    "info":"System`DefaultInputFormatType"
  },
  {
    "label":"DefaultLabelStyle",
    "type":"keyword",
    "info":"DefaultLabelStyle is a low-level option for formatting and related constructs that specifies the def"
  },
  {
    "label":"DefaultMenuStyle",
    "type":"keyword",
    "info":"DefaultMenuStyle is a low-level option for menu-generating constructs that specifies the default sty"
  },
  {
    "label":"DefaultNaturalLanguage",
    "type":"keyword",
    "info":"DefaultNaturalLanguage is an option for character selections that specifies the language used when c"
  },
  {
    "label":"DefaultNewCellStyle",
    "type":"keyword",
    "info":"DefaultNewCellStyle is a notebook option which specifies the default style to use for new cells crea"
  },
  {
    "label":"DefaultNewInlineCellStyle",
    "type":"keyword",
    "info":"DefaultNewInlineCellStyle is an option for cells that specifies the default style to use for new inl"
  },
  {
    "label":"DefaultNotebook",
    "type":"keyword",
    "info":"DefaultNotebook is a global option that specifies which notebook is used as a template for all new n"
  },
  {
    "label":"DefaultOptions",
    "type":"keyword",
    "info":"DefaultOptions is a style option that allows default options to be specified for particular formatti"
  },
  {
    "label":"DefaultOutputFormatType",
    "type":"keyword",
    "info":"System`DefaultOutputFormatType"
  },
  {
    "label":"DefaultPrintPrecision",
    "type":"keyword",
    "info":"DefaultPrintPrecision is an option for NumberForm, DecimalForm and related functions that specifies "
  },
  {
    "label":"DefaultStyle",
    "type":"keyword",
    "info":"System`DefaultStyle"
  },
  {
    "label":"DefaultStyleDefinitions",
    "type":"keyword",
    "info":"DefaultStyleDefinitions is a global option that specifies the default stylesheet for all new noteboo"
  },
  {
    "label":"DefaultTextFormatType",
    "type":"keyword",
    "info":"System`DefaultTextFormatType"
  },
  {
    "label":"DefaultTextInlineFormatType",
    "type":"keyword",
    "info":"System`DefaultTextInlineFormatType"
  },
  {
    "label":"DefaultTicksStyle",
    "type":"keyword",
    "info":"DefaultTicksStyle is a low-level option for graphics functions that specifies the default style to u"
  },
  {
    "label":"DefaultTooltipStyle",
    "type":"keyword",
    "info":"DefaultTooltipStyle is a low-level option for tooltips that specifies the default style to use in di"
  },
  {
    "label":"DefaultValue",
    "type":"keyword",
    "info":"System`DefaultValue"
  },
  {
    "label":"DefaultValues",
    "type":"keyword",
    "info":"DefaultValues[f] gives a list of transformation rules corresponding to all default argument values ("
  },
  {
    "label":"Defer",
    "type":"keyword",
    "info":"Defer[expr] yields an object that displays as the unevaluated form of expr, but that is evaluated if"
  },
  {
    "label":"DefineExternal",
    "type":"keyword",
    "info":"System`DefineExternal"
  },
  {
    "label":"DefineInputStreamMethod",
    "type":"keyword",
    "info":"DefineInputStreamMethod[\"name\", {fname  ï¢ function , fname  ï¢ function , â¦ }] defines a custom input"
  },
  {
    "label":"DefineOutputStreamMethod",
    "type":"keyword",
    "info":"DefineOutputStreamMethod[\"name\", {fname  ï¢ function , fname  ï¢ function , â¦ }] defines a custom outp"
  },
  {
    "label":"DefineResourceFunction",
    "type":"keyword",
    "info":"DefineResourceFunction[f] defines a resource function that can be applied to arguments to give the s"
  },
  {
    "label":"Definition",
    "type":"keyword",
    "info":"Definition[symbol] prints as the definitions given for a symbol.Definition[\"symbol\"] prints as the d"
  },
  {
    "label":"Degree",
    "type":"keyword",
    "info":"                                                                               Ï\nDegree gives the nu"
  },
  {
    "label":"DegreeCentrality",
    "type":"keyword",
    "info":"DegreeCentrality[g] gives a list of vertex degrees for the vertices in the underlying simple graph o"
  },
  {
    "label":"DegreeGraphDistribution",
    "type":"keyword",
    "info":"DegreeGraphDistribution[dlist] represents a degree graph distribution with vertex degree dlist."
  },
  {
    "label":"DegreeLexicographic",
    "type":"keyword",
    "info":"System`DegreeLexicographic"
  },
  {
    "label":"DegreeReverseLexicographic",
    "type":"keyword",
    "info":"System`DegreeReverseLexicographic"
  },
  {
    "label":"DEigensystem",
    "type":"keyword",
    "info":"DEigensystem[â[u[x, y, â¦]], u, {x, y, â¦} â Î©, n] gives the n smallest magnitude eigenvalues and eige"
  },
  {
    "label":"DEigenvalues",
    "type":"keyword",
    "info":"DEigenvalues[â[u[x, y, â¦], u, {x, y, â¦} â Î©, n] gives the n smallest magnitude eigenvalues for the l"
  },
  {
    "label":"Deinitialization",
    "type":"keyword",
    "info":"Deinitialization is an option for Dynamic, DynamicModule, Manipulate, and related constructs that sp"
  },
  {
    "label":"Del",
    "type":"keyword",
    "info":"Del[x] displays as â x."
  },
  {
    "label":"DelaunayMesh",
    "type":"keyword",
    "info":"DelaunayMesh[{p , p , â¦}] gives a MeshRegion representing the Delaunay mesh from the points p , p , "
  },
  {
    "label":"Delayed",
    "type":"keyword",
    "info":"Delayed[expr] represents an expression whose evaluation is delayed until its value is externally req"
  },
  {
    "label":"Deletable",
    "type":"keyword",
    "info":"Deletable is an option for Cell that specifies whether the cell can be deleted interactively using t"
  },
  {
    "label":"Delete",
    "type":"keyword",
    "info":"Delete[expr, n] deletes the element at position n in expr. If n is negative, the position is counted"
  },
  {
    "label":"DeleteAnomalies",
    "type":"keyword",
    "info":"DeleteAnomalies[{example , example , â¦}] gives a list in which example  that are considered anomalou"
  },
  {
    "label":"DeleteBorderComponents",
    "type":"keyword",
    "info":"DeleteBorderComponents[image] replaces connected components adjacent to the border in a binary image"
  },
  {
    "label":"DeleteCases",
    "type":"keyword",
    "info":"DeleteCases[expr, pattern] removes all elements of expr that match pattern. DeleteCases[expr, patter"
  },
  {
    "label":"DeleteChannel",
    "type":"keyword",
    "info":"DeleteChannel[channel] deletes the specified channel from the channel broker server.DeleteChannel[{c"
  },
  {
    "label":"DeleteCloudExpression",
    "type":"keyword",
    "info":"DeleteCloudExpression[\"name\"] deletes the cloud expression identified by \"name\".DeleteCloudExpressio"
  },
  {
    "label":"DeleteContents",
    "type":"keyword",
    "info":"DeleteContents is an option for DeleteDirectory that specifies whether the contents of directories s"
  },
  {
    "label":"DeleteDirectory",
    "type":"keyword",
    "info":"DeleteDirectory[\"dir\"] deletes the specified directory. "
  },
  {
    "label":"DeleteDuplicates",
    "type":"keyword",
    "info":"DeleteDuplicates[list] deletes all duplicates from list.DeleteDuplicates[list, test] applies test to"
  },
  {
    "label":"DeleteDuplicatesBy",
    "type":"keyword",
    "info":"DeleteDuplicatesBy[{e , e , â¦}, f] deletes those e  that yield duplicates in the list {f[e ], f[e ],"
  },
  {
    "label":"DeleteFile",
    "type":"keyword",
    "info":"DeleteFile[\"file\"] deletes a file. DeleteFile[{\"file \", \"file \", â¦}] deletes a list of files. \n     "
  },
  {
    "label":"DeleteMissing",
    "type":"keyword",
    "info":"DeleteMissing[list] drops elements with head Missing from a list.DeleteMissing[assoc] drops elements"
  },
  {
    "label":"DeleteObject",
    "type":"keyword",
    "info":"DeleteObject[obj] deletes the object obj.DeleteObject[{obj , obj , â¦}] deletes all the obj .\n       "
  },
  {
    "label":"DeletePermissionsKey",
    "type":"keyword",
    "info":"DeletePermissionsKey[key] deletes a permissions key, rendering it invalid.DeletePermissionsKey[{key "
  },
  {
    "label":"DeleteSearchIndex",
    "type":"keyword",
    "info":"DeleteSearchIndex[obj] deletes the search index represented by the search index object obj.DeleteSea"
  },
  {
    "label":"DeleteSmallComponents",
    "type":"keyword",
    "info":"DeleteSmallComponents[image] replaces small connected components in a binary image image with backgr"
  },
  {
    "label":"DeleteStopwords",
    "type":"keyword",
    "info":"DeleteStopwords[list] deletes stopwords from a list of words.DeleteStopwords[\"string\"] deletes stopw"
  },
  {
    "label":"DeleteWithContents",
    "type":"keyword",
    "info":"System`DeleteWithContents"
  },
  {
    "label":"DeletionWarning",
    "type":"keyword",
    "info":"DeletionWarning is an option for InterpretationBox or TagBox objects that specifies whether a warnin"
  },
  {
    "label":"DelimitedArray",
    "type":"keyword",
    "info":"System`DelimitedArray"
  },
  {
    "label":"DelimitedSequence",
    "type":"keyword",
    "info":"DelimitedSequence[form] represents a delimited sequence of elements of the specified form in Interpr"
  },
  {
    "label":"Delimiter",
    "type":"keyword",
    "info":"Delimiter represents a delimiter to be displayed in objects such as PopupMenu, Manipulate, and FormO"
  },
  {
    "label":"DelimiterAutoMatching",
    "type":"keyword",
    "info":"DelimiterAutoMatching is an option for cells and notebooks that specifies whether matching delimiter"
  },
  {
    "label":"DelimiterFlashTime",
    "type":"keyword",
    "info":"DelimiterFlashTime is an option for cells and notebooks that specifies how long in seconds a delimit"
  },
  {
    "label":"DelimiterMatching",
    "type":"keyword",
    "info":"DelimiterMatching is an option for selections that specifies whether an opening delimiter will match"
  },
  {
    "label":"Delimiters",
    "type":"keyword",
    "info":"Delimiters is an option to various functions that specifies what delimiters to use or look for."
  },
  {
    "label":"DeliveryFunction",
    "type":"keyword",
    "info":"DeliveryFunction is an option that specifies how material such as documents generated by DocumentGen"
  },
  {
    "label":"Dendrogram",
    "type":"keyword",
    "info":"Dendrogram[{e , e , â¦}] constructs a dendrogram from the hierarchical clustering of the elements e ,"
  },
  {
    "label":"Denominator",
    "type":"keyword",
    "info":"Denominator[expr] gives the denominator of expr. "
  },
  {
    "label":"DensityGraphics",
    "type":"keyword",
    "info":"DensityGraphics[array] is a representation of a density plot. "
  },
  {
    "label":"DensityHistogram",
    "type":"keyword",
    "info":"DensityHistogram[{{x , y }, {x , y }, â¦}] plots a density histogram of the values {x , y }.DensityHi"
  },
  {
    "label":"DensityPlot",
    "type":"keyword",
    "info":"DensityPlot[f, {x, x   , x   }, {y, y   , y   }] makes a density plot of f as a function of x and y."
  },
  {
    "label":"DensityPlot3D",
    "type":"keyword",
    "info":"DensityPlot3D[f, {x, x   , x   }, {y, y   , y   }, {z, z   , z   }] makes a density plot of f as a f"
  },
  {
    "label":"DependentVariables",
    "type":"keyword",
    "info":"DependentVariables is an option for NDSolve and other functions that specifies the list of all objec"
  },
  {
    "label":"Deploy",
    "type":"keyword",
    "info":"Deploy[expr] yields a deployed version of expr in which elements such as Slider, InputField, Locator"
  },
  {
    "label":"Deployed",
    "type":"keyword",
    "info":"Deployed is an option for displayed objects, cells, and notebooks that specifies whether their conte"
  },
  {
    "label":"Depth",
    "type":"keyword",
    "info":"Depth[expr] gives the maximum number of indices needed to specify any part of expr, plus 1. "
  },
  {
    "label":"DepthFirstScan",
    "type":"keyword",
    "info":"DepthFirstScan[g, s, {event  ï¢ f , event  ï¢ f , â¦}] performs a depth-first scan of the graph g start"
  },
  {
    "label":"Derivative",
    "type":"keyword",
    "info":"f ' represents the derivative of a function f of one argument. Derivative[n , n , â¦][f] is the gener"
  },
  {
    "label":"DerivativeFilter",
    "type":"keyword",
    "info":"                                                    th\nDerivativeFilter[data, {n , n , â¦}] computes "
  },
  {
    "label":"DerivativePDETerm",
    "type":"keyword",
    "info":"DerivativePDETerm[vars, Î\.b3] represents a load derivative term â            Â\\[CenterDot] (Î\.b3) with load derivative"
  },
  {
    "label":"DerivedKey",
    "type":"keyword",
    "info":"DerivedKey[assoc] represents a derived key generated by GenerateDerivedKey."
  },
  {
    "label":"DescriptorStateSpace",
    "type":"keyword",
    "info":"DescriptorStateSpace is an option to StateSpaceModel and StateSpaceTransform that specifies whether "
  },
  {
    "label":"DesignMatrix",
    "type":"keyword",
    "info":"DesignMatrix[{{x  , x  , â¦, y }, {x  , x  , â¦, y }, â¦}, {f , f , â¦}, {x , x , â¦}] constructs the des"
  },
  {
    "label":"DestroyAfterEvaluation",
    "type":"keyword",
    "info":"System`DestroyAfterEvaluation"
  },
  {
    "label":"Det",
    "type":"keyword",
    "info":"Det[m] gives the determinant of the square matrix m. "
  },
  {
    "label":"DeviceClose",
    "type":"keyword",
    "info":"DeviceClose[device] closes the connection to a device and frees related resources."
  },
  {
    "label":"DeviceConfigure",
    "type":"keyword",
    "info":"DeviceConfigure[device, config] configures the specified device according to config."
  },
  {
    "label":"DeviceExecute",
    "type":"keyword",
    "info":"DeviceExecute[device, \"command\"] executes the specified command on a device.DeviceExecute[device, \"c"
  },
  {
    "label":"DeviceExecuteAsynchronous",
    "type":"keyword",
    "info":"DeviceExecuteAsynchronous[device, \"command\", fun] initiates asynchronous execution of the specified "
  },
  {
    "label":"DeviceObject",
    "type":"keyword",
    "info":"DeviceObject[â¦] represents a device that can be accessed in a Wolfram Language session."
  },
  {
    "label":"DeviceOpen",
    "type":"keyword",
    "info":"DeviceOpen[\"devclass\"] opens a connection to the first available device in the class specified by \"d"
  },
  {
    "label":"DeviceOpenQ",
    "type":"keyword",
    "info":"System`DeviceOpenQ"
  },
  {
    "label":"DeviceRead",
    "type":"keyword",
    "info":"DeviceRead[devobj] reads a single default item from the open device corresponding to the specified D"
  },
  {
    "label":"DeviceReadBuffer",
    "type":"keyword",
    "info":"DeviceReadBuffer[device] reads the complete contents of the buffer on a device.DeviceReadBuffer[devi"
  },
  {
    "label":"DeviceReadLatest",
    "type":"keyword",
    "info":"DeviceReadLatest[device] returns the most recently collected default item from a device.DeviceReadLa"
  },
  {
    "label":"DeviceReadList",
    "type":"keyword",
    "info":"DeviceReadList[device, n] reads from the specified device n times, returning a list of the results.D"
  },
  {
    "label":"DeviceReadTimeSeries",
    "type":"keyword",
    "info":"DeviceReadTimeSeries[device, {t, dt}] repeatedly reads default items from the specified device at in"
  },
  {
    "label":"Devices",
    "type":"keyword",
    "info":"Devices[] gives a list of registered devices on a particular system.Devices[form] gives a list of de"
  },
  {
    "label":"DeviceStreams",
    "type":"keyword",
    "info":"DeviceStreams[device] gives a list of all open streams associated with a device.DeviceStreams[device"
  },
  {
    "label":"DeviceWrite",
    "type":"keyword",
    "info":"DeviceWrite[device, val] writes the value val to the specified device.DeviceWrite[device, {val , val"
  },
  {
    "label":"DeviceWriteBuffer",
    "type":"keyword",
    "info":"DeviceWriteBuffer[device, vals] fills the buffer on a device with the values vals.DeviceWriteBuffer["
  },
  {
    "label":"DGaussianWavelet",
    "type":"keyword",
    "info":"DGaussianWavelet[] represents a derivative of Gaussian wavelet of derivative order 2.DGaussianWavele"
  },
  {
    "label":"DiacriticalPositioning",
    "type":"keyword",
    "info":"DiacriticalPositioning is an option for UnderscriptBox and related boxes that specifies how close di"
  },
  {
    "label":"Diagonal",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"DiagonalizableMatrixQ",
    "type":"keyword",
    "info":"DiagonalizableMatrixQ[m] gives True if m is diagonalizable, and False otherwise. "
  },
  {
    "label":"DiagonalMatrix",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"DiagonalMatrixQ",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"Dialog",
    "type":"keyword",
    "info":"Dialog[] initiates a dialog. Dialog[expr] initiates a dialog with expr as the current value of %. \n"
  },
  {
    "label":"DialogIndent",
    "type":"keyword",
    "info":"System`DialogIndent"
  },
  {
    "label":"DialogInput",
    "type":"keyword",
    "info":"DialogInput[expr] interactively puts up expr as a dialog notebook, waits until a DialogReturn[e] is "
  },
  {
    "label":"DialogLevel",
    "type":"keyword",
    "info":"System`DialogLevel"
  },
  {
    "label":"DialogNotebook",
    "type":"keyword",
    "info":"DialogNotebook[{cell , cell , â¦}] represents a dialog notebook that can be manipulated by the Wolfra"
  },
  {
    "label":"DialogProlog",
    "type":"keyword",
    "info":"DialogProlog is an option for Dialog that can give an expression to evaluate before the dialog start"
  },
  {
    "label":"DialogReturn",
    "type":"keyword",
    "info":"DialogReturn[expr] closes a dialog window, returning the expression expr from the dialog.DialogRetur"
  },
  {
    "label":"DialogSymbols",
    "type":"keyword",
    "info":"DialogSymbols is an option for Dialog that gives a list of symbols whose values should be localized "
  },
  {
    "label":"Diamond",
    "type":"keyword",
    "info":"Diamond[x, y, â¦] displays as x â y â â¦."
  },
  {
    "label":"DiamondMatrix",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"DiceDissimilarity",
    "type":"keyword",
    "info":"DiceDissimilarity[x, y] gives the Dice dissimilarity between Boolean vectors x and y."
  },
  {
    "label":"DictionaryLookup",
    "type":"keyword",
    "info":"DictionaryLookup[patt] finds all words in an English dictionary that match the string pattern patt.D"
  },
  {
    "label":"DictionaryWordQ",
    "type":"keyword",
    "info":"DictionaryWordQ[\"word\"] tests whether \"word\" is a recognized dictionary word."
  },
  {
    "label":"DifferenceDelta",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"DifferenceOrder",
    "type":"keyword",
    "info":"System`DifferenceOrder"
  },
  {
    "label":"DifferenceQuotient",
    "type":"keyword",
    "info":"DifferenceQuotient[f, {x, h}]  gives the difference quotient (f(x + h) - f(x))\/h.DifferenceQuotient["
  },
  {
    "label":"DifferenceRoot",
    "type":"keyword",
    "info":"DifferenceRoot[lde][k] gives the holonomic sequence h(k), specified by the linear difference equatio"
  },
  {
    "label":"DifferenceRootReduce",
    "type":"keyword",
    "info":"DifferenceRootReduce[expr, n] attempts to reduce expr to a single DifferenceRoot object as a functio"
  },
  {
    "label":"Differences",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"DifferentialD",
    "type":"keyword",
    "info":"DifferentialD[x] displays as ï x."
  },
  {
    "label":"DifferentialRoot",
    "type":"keyword",
    "info":"DifferentialRoot[lde][x] gives the holonomic function h(x), specified by the linear differential equ"
  },
  {
    "label":"DifferentialRootReduce",
    "type":"keyword",
    "info":"DifferentialRootReduce[expr, x] attempts to reduce expr to a single DifferentialRoot object as a fun"
  },
  {
    "label":"DifferentiatorFilter",
    "type":"keyword",
    "info":"DifferentiatorFilter[data, Ï ] applies a differentiator filter with a cutoff frequency Ï  to an arra"
  },
  {
    "label":"DiffusionPDETerm",
    "type":"keyword",
    "info":"DiffusionPDETerm[vars] represents a diffusion term â            Â\\[CenterDot] (-â            u) with model varia"
  },
  {
    "label":"DiggleGatesPointProcess",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"DiggleGrattonPointProcess",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"DigitalSignature",
    "type":"keyword",
    "info":"DigitalSignature[assoc] represents a digital signature object."
  },
  {
    "label":"DigitBlock",
    "type":"keyword",
    "info":"DigitBlock is an option for NumberForm and related functions that specifies the maximum length of bl"
  },
  {
    "label":"DigitBlockMinimum",
    "type":"keyword",
    "info":"System`DigitBlockMinimum"
  },
  {
    "label":"DigitCharacter",
    "type":"keyword",
    "info":"DigitCharacter represents a digit character 0â9 in StringExpression. "
  },
  {
    "label":"DigitCount",
    "type":"keyword",
    "info":"DigitCount[n, b, d] gives the number of d digits in the base-b representation of n. DigitCount[n, b]"
  },
  {
    "label":"DigitQ",
    "type":"keyword",
    "info":"DigitQ[string] yields True if all the characters in the string are digits in the range 0 through 9, "
  },
  {
    "label":"DihedralAngle",
    "type":"keyword",
    "info":"DihedralAngle[{p , p }, {v, w}] gives the angle between two half-planes bounded by the line through "
  },
  {
    "label":"DihedralGroup",
    "type":"keyword",
    "info":"DihedralGroup[n] represents the dihedral group of order 2n."
  },
  {
    "label":"Dilation",
    "type":"keyword",
    "info":"Dilation[image, ker] gives the morphological dilation of image with respect to the structuring eleme"
  },
  {
    "label":"DimensionalCombinations",
    "type":"keyword",
    "info":"DimensionalCombinations[{pq , pq , â¦}] returns the possible combinations of the list of physical qua"
  },
  {
    "label":"DimensionalMeshComponents",
    "type":"keyword",
    "info":"DimensionalMeshComponents[mr] gives a list {r , r , â¦} of regions such that r  has dimension d for a"
  },
  {
    "label":"DimensionReduce",
    "type":"keyword",
    "info":"DimensionReduce[{example , example , â¦}] projects the examples example  to a lower-dimensional appro"
  },
  {
    "label":"DimensionReducerFunction",
    "type":"keyword",
    "info":"DimensionReducerFunction[â¦] represents a function generated by DimensionReduction that projects data"
  },
  {
    "label":"DimensionReduction",
    "type":"keyword",
    "info":"DimensionReduction[{example , example , â¦}] generates a DimensionReducerFunction[â¦] that projects fr"
  },
  {
    "label":"Dimensions",
    "type":"keyword",
    "info":"Dimensions[expr] gives a list of the dimensions of expr. Dimensions[expr, n] gives a list of the dim"
  },
  {
    "label":"DiracComb",
    "type":"keyword",
    "info":"DiracComb[x] represents the Dirac comb function ï(x) giving a delta function at every integer point."
  },
  {
    "label":"DiracDelta",
    "type":"keyword",
    "info":"DiracDelta[x] represents the Dirac delta function Î\.b4(x). DiracDelta[x , x , â¦] represents the multidi"
  },
  {
    "label":"DirectedEdge",
    "type":"keyword",
    "info":"                                                                                              t\nDire"
  },
  {
    "label":"DirectedEdges",
    "type":"keyword",
    "info":"DirectedEdges is an option for Graph, GraphPlot, and related functions that specifies whether edges "
  },
  {
    "label":"DirectedGraph",
    "type":"keyword",
    "info":"DirectedGraph[g] gives a directed graph from the undirected graph g.DirectedGraph[g, conv] gives a d"
  },
  {
    "label":"DirectedGraphQ",
    "type":"keyword",
    "info":"DirectedGraphQ[g] yields True if the graph g is a directed graph and False otherwise."
  },
  {
    "label":"DirectedInfinity",
    "type":"keyword",
    "info":"DirectedInfinity[] represents an infinite numerical quantity whose direction in the complex plane is"
  },
  {
    "label":"Direction",
    "type":"keyword",
    "info":"Direction is an option for Limit and related functions that specifies the direction in which the lim"
  },
  {
    "label":"DirectionalLight",
    "type":"keyword",
    "info":"DirectionalLight[col, pt] is a threeâdimensional graphics directive that specifies the directional l"
  },
  {
    "label":"Directive",
    "type":"keyword",
    "info":"Directive[g , g , â¦] represents a single graphics directive composed of the directives g , g , â¦.\n  "
  },
  {
    "label":"Directory",
    "type":"keyword",
    "info":"Directory[] gives the current working directory. "
  },
  {
    "label":"DirectoryName",
    "type":"keyword",
    "info":"DirectoryName[\"name\"] extracts the directory name from the specification for a file. "
  },
  {
    "label":"DirectoryQ",
    "type":"keyword",
    "info":"DirectoryQ[\"name\"] gives True if the directory with the specified name exists, and gives False other"
  },
  {
    "label":"DirectoryStack",
    "type":"keyword",
    "info":"DirectoryStack[] gives the directory stack that represents the sequence of current directories used."
  },
  {
    "label":"DirichletBeta",
    "type":"keyword",
    "info":"DirichletBeta[s] gives the Dirichlet beta function Î\.b2(s)."
  },
  {
    "label":"DirichletCharacter",
    "type":"keyword",
    "info":"DirichletCharacter[k, j, n] gives the Dirichlet character Ï    (n) with modulus k and index j.\n     "
  },
  {
    "label":"DirichletCondition",
    "type":"keyword",
    "info":"DirichletCondition[beqn, pred] represents a Dirichlet boundary condition given by equation beqn, sat"
  },
  {
    "label":"DirichletConvolve",
    "type":"keyword",
    "info":"DirichletConvolve[f, g, n, m] gives the Dirichlet convolution of the expressions f and g. "
  },
  {
    "label":"DirichletDistribution",
    "type":"keyword",
    "info":"DirichletDistribution[{Î\\[PlusMinus] , â¦, Î\\[PlusMinus]     }] represents a Dirichlet distribution of dimension k with shape"
  },
  {
    "label":"DirichletEta",
    "type":"keyword",
    "info":"DirichletEta[s] gives the Dirichlet eta function Î\\[CenterDot](s)."
  },
  {
    "label":"DirichletL",
    "type":"keyword",
    "info":"DirichletL[k, j, s] gives the Dirichlet L-function L(Ï, s) for the Dirichlet character Ï(n) with mod"
  },
  {
    "label":"DirichletLambda",
    "type":"keyword",
    "info":"DirichletLambda[s] gives the Dirichlet lambda function Î»(s)."
  },
  {
    "label":"DirichletTransform",
    "type":"keyword",
    "info":"DirichletTransform[expr, n, s] gives the Dirichlet transform of expr with respect to n."
  },
  {
    "label":"DirichletWindow",
    "type":"keyword",
    "info":"DirichletWindow[x] represents a Dirichlet window function of x."
  },
  {
    "label":"DisableConsolePrintPacket",
    "type":"keyword",
    "info":"System`DisableConsolePrintPacket"
  },
  {
    "label":"DisableFormatting",
    "type":"keyword",
    "info":"DisableFormatting[expr] is a form that disables the formatting of expr when it appears inside held e"
  },
  {
    "label":"DiscreteAsymptotic",
    "type":"keyword",
    "info":"DiscreteAsymptotic[expr, n ï¢ â] gives an asymptotic approximation for expr as n tends to infinity ov"
  },
  {
    "label":"DiscreteChirpZTransform",
    "type":"keyword",
    "info":"DiscreteChirpZTransform[list] gives the chirp Z transform of list.DiscreteChirpZTransform[list, n] r"
  },
  {
    "label":"DiscreteConvolve",
    "type":"keyword",
    "info":"DiscreteConvolve[f, g, n, m] gives the convolution with respect to n of the expressions f and g. Dis"
  },
  {
    "label":"DiscreteDelta",
    "type":"keyword",
    "info":"DiscreteDelta[n , n , â¦] gives the discrete delta function Î\.b4 (n , n , â¦), equal to 1 if all the n  a"
  },
  {
    "label":"DiscreteHadamardTransform",
    "type":"keyword",
    "info":"DiscreteHadamardTransform[list] gives the discrete Hadamard transform of list."
  },
  {
    "label":"DiscreteIndicator",
    "type":"keyword",
    "info":"DiscreteIndicator[x, x , {u , u , â¦}] yields the discrete indicator function, equal to 1 if x = x  a"
  },
  {
    "label":"DiscreteLimit",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"DiscreteLQEstimatorGains",
    "type":"keyword",
    "info":"DiscreteLQEstimatorGains[ssm, {w, v}, Ï] gives the optimal discrete-time estimator gain matrix with "
  },
  {
    "label":"DiscreteLQRegulatorGains",
    "type":"keyword",
    "info":"DiscreteLQRegulatorGains[sspec, wts, Ï] gives the discrete-time state feedback gains with sampling p"
  },
  {
    "label":"DiscreteLyapunovSolve",
    "type":"keyword",
    "info":"DiscreteLyapunovSolve[a, c] finds the numeric solution x of the discrete matrix equation a . x . a ï"
  },
  {
    "label":"DiscreteMarkovProcess",
    "type":"keyword",
    "info":"DiscreteMarkovProcess[i , m] represents a discrete-time, finite-state Markov process with transition"
  },
  {
    "label":"DiscreteMaxLimit",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"DiscreteMinLimit",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"DiscretePlot",
    "type":"keyword",
    "info":"DiscretePlot[expr, {n, n   }] generates a plot of the values of expr when n runs from 1 to n   .Disc"
  },
  {
    "label":"DiscretePlot3D",
    "type":"keyword",
    "info":"DiscretePlot3D[expr, {i, i   , i   }, {j, j   , j   }] generates a plot of the values of expr when i"
  },
  {
    "label":"DiscreteRatio",
    "type":"keyword",
    "info":"                                             f(i + 1)\nDiscreteRatio[f, i] gives the discrete ratio -"
  },
  {
    "label":"DiscreteRiccatiSolve",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"DiscreteShift",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"DiscreteTimeModelQ",
    "type":"keyword",
    "info":"DiscreteTimeModelQ[lsys] gives True if lsys is a discrete-time systems model, and False otherwise."
  },
  {
    "label":"DiscreteUniformDistribution",
    "type":"keyword",
    "info":"DiscreteUniformDistribution[{i   , i   }] represents a discrete uniform distribution over the intege"
  },
  {
    "label":"DiscreteVariables",
    "type":"keyword",
    "info":"DiscreteVariables is an option for NDSolve and other functions that specifies variables that only ch"
  },
  {
    "label":"DiscreteWaveletData",
    "type":"keyword",
    "info":"DiscreteWaveletData[{wind  ï¢ coef , â¦}, wave, wtrans] yields a discrete wavelet data object with wav"
  },
  {
    "label":"DiscreteWaveletPacketTransform",
    "type":"keyword",
    "info":"DiscreteWaveletPacketTransform[data] gives the discrete wavelet packet transform (DWPT) of an array "
  },
  {
    "label":"DiscreteWaveletTransform",
    "type":"keyword",
    "info":"DiscreteWaveletTransform[data] gives the discrete wavelet transform (DWT) of an array of data.Discre"
  },
  {
    "label":"DiscretizeGraphics",
    "type":"keyword",
    "info":"DiscretizeGraphics[g] discretizes a 2D or 3D graphic g into a MeshRegion.DiscretizeGraphics[g, patt]"
  },
  {
    "label":"DiscretizeRegion",
    "type":"keyword",
    "info":"DiscretizeRegion[reg] discretizes a region reg into a MeshRegion.DiscretizeRegion[reg, {{x   , x   }"
  },
  {
    "label":"Discriminant",
    "type":"keyword",
    "info":"Discriminant[poly, var] computes the discriminant of the polynomial poly with respect to the variabl"
  },
  {
    "label":"DisjointQ",
    "type":"keyword",
    "info":"DisjointQ[list , list ] yields True if list  and list  do not share any common elements, and False o"
  },
  {
    "label":"Disjunction",
    "type":"keyword",
    "info":"Disjunction[expr, {a , a , â¦}] gives the disjunction of expr over all choices of the Boolean variabl"
  },
  {
    "label":"Disk",
    "type":"keyword",
    "info":"Disk[{x, y}, r] represents a disk of radius r centered at {x, y}.Disk[{x, y}] gives a disk of radius"
  },
  {
    "label":"DiskBox",
    "type":"keyword",
    "info":"System`DiskBox"
  },
  {
    "label":"DiskMatrix",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"DiskSegment",
    "type":"keyword",
    "info":"DiskSegment[{x, y}, r, {Î¸ , Î¸ }] represents the disk segment from angle Î¸  to Î¸  in a disk centered "
  },
  {
    "label":"Dispatch",
    "type":"keyword",
    "info":"Dispatch[{lhs  ï¢ rhs , lhs  ï¢ rhs , â¦}] generates an optimized dispatch table representation of a li"
  },
  {
    "label":"DispatchQ",
    "type":"keyword",
    "info":"System`DispatchQ"
  },
  {
    "label":"DispersionEstimatorFunction",
    "type":"keyword",
    "info":"DispersionEstimatorFunction is an option for generalized linear model fitting functions that specifi"
  },
  {
    "label":"Display",
    "type":"keyword",
    "info":"Display[channel, graphics] writes graphics or sound to the specified output channel in PostScript fo"
  },
  {
    "label":"DisplayAllSteps",
    "type":"keyword",
    "info":"DisplayAllSteps is an option to Animate and related functions that specifies whether all frames shou"
  },
  {
    "label":"DisplayEndPacket",
    "type":"keyword",
    "info":"DisplayEndPacket[] is a WSTP packet that indicates the end of a series of expressions relating to a "
  },
  {
    "label":"DisplayFlushImagePacket",
    "type":"keyword",
    "info":"System`DisplayFlushImagePacket"
  },
  {
    "label":"DisplayForm",
    "type":"keyword",
    "info":"DisplayForm[expr] prints with low-level boxes inside expr shown in explicit two-dimensional or other"
  },
  {
    "label":"DisplayFunction",
    "type":"keyword",
    "info":"DisplayFunction is an option for graphics and sound functions that specifies a function to apply to "
  },
  {
    "label":"DisplayPacket",
    "type":"keyword",
    "info":"DisplayPacket[] is a WSTP packet that indicates the beginning of a series of expressions related to "
  },
  {
    "label":"DisplayRules",
    "type":"keyword",
    "info":"System`DisplayRules"
  },
  {
    "label":"DisplaySetSizePacket",
    "type":"keyword",
    "info":"System`DisplaySetSizePacket"
  },
  {
    "label":"DisplayString",
    "type":"keyword",
    "info":"DisplayString[graphics] generates a string giving graphics or sound in PostScript format. DisplayStr"
  },
  {
    "label":"DisplayTemporary",
    "type":"keyword",
    "info":"System`DisplayTemporary"
  },
  {
    "label":"DisplayWith",
    "type":"keyword",
    "info":"System`DisplayWith"
  },
  {
    "label":"DisplayWithRef",
    "type":"keyword",
    "info":"System`DisplayWithRef"
  },
  {
    "label":"DisplayWithVariable",
    "type":"keyword",
    "info":"System`DisplayWithVariable"
  },
  {
    "label":"DistanceFunction",
    "type":"keyword",
    "info":"DistanceFunction is an option for functions such as Nearest that specifies the distance value to ass"
  },
  {
    "label":"DistanceMatrix",
    "type":"keyword",
    "info":"DistanceMatrix[{u , u , â¦}] gives the matrix of distances between each pair of elements u , u . Dist"
  },
  {
    "label":"DistanceTransform",
    "type":"keyword",
    "info":"DistanceTransform[image] gives the distance transform of image, in which the value of each pixel is "
  },
  {
    "label":"Distribute",
    "type":"keyword",
    "info":"Distribute[f[x , x , â¦]] distributes f over Plus appearing in any of the x . Distribute[expr, g] dis"
  },
  {
    "label":"Distributed",
    "type":"keyword",
    "info":"Distributed[x, dist] or x ï dist asserts that the random variable x is distributed according to the "
  },
  {
    "label":"DistributedContexts",
    "type":"keyword",
    "info":"DistributedContexts is an option for various parallel computing functions that specifies which defin"
  },
  {
    "label":"DistributeDefinitions",
    "type":"keyword",
    "info":"DistributeDefinitions[s , s , â¦] distributes all definitions for the symbols s  to all parallel kern"
  },
  {
    "label":"DistributionChart",
    "type":"keyword",
    "info":"DistributionChart[{data , data , â¦}] makes a distribution chart with a distribution symbol for each "
  },
  {
    "label":"DistributionDomain",
    "type":"keyword",
    "info":"System`DistributionDomain"
  },
  {
    "label":"DistributionFitTest",
    "type":"keyword",
    "info":"DistributionFitTest[data] tests whether data is normally distributed. DistributionFitTest[data, dist"
  },
  {
    "label":"DistributionParameterAssumptions",
    "type":"keyword",
    "info":"DistributionParameterAssumptions[dist] gives a logical expression for assumptions on parameters in t"
  },
  {
    "label":"DistributionParameterQ",
    "type":"keyword",
    "info":"DistributionParameterQ[dist] yields True if dist is a valid distribution, and yields False otherwise"
  },
  {
    "label":"Dithering",
    "type":"keyword",
    "info":"Dithering is an option for ColorQuantize that specifies whether or not to apply dithering while quan"
  },
  {
    "label":"Div",
    "type":"keyword",
    "info":"Div[{f , â¦, f }, {x , â¦, x }] gives the divergence â f \/â x  + â¦ + â f \/â x .Div[{f , â¦, f }, {x , â¦"
  },
  {
    "label":"Divergence",
    "type":"keyword",
    "info":"System`Divergence"
  },
  {
    "label":"Divide",
    "type":"keyword",
    "info":"x\/y or Divide[x, y] is equivalent to x y^-1. "
  },
  {
    "label":"DivideBy",
    "type":"keyword",
    "info":"x\/=c divides x by c and returns the new value of x. "
  },
  {
    "label":"Dividers",
    "type":"keyword",
    "info":"Dividers is an option for Grid and related constructs that specifies where and how to draw divider l"
  },
  {
    "label":"DivideSides",
    "type":"keyword",
    "info":"DivideSides[rel, x] divides each side of the equation or inequality rel by x.DivideSides[rel , rel ]"
  },
  {
    "label":"Divisible",
    "type":"keyword",
    "info":"Divisible[n, m] yields True if n is divisible by m, and yields False if it is not. "
  },
  {
    "label":"Divisors",
    "type":"keyword",
    "info":"Divisors[n] gives a list of the integers that divide n. "
  },
  {
    "label":"DivisorSigma",
    "type":"keyword",
    "info":"DivisorSigma[k, n] gives the divisor function Ï (n). \n                                              "
  },
  {
    "label":"DivisorSum",
    "type":"keyword",
    "info":"DivisorSum[n, form] represents the sum of form[i] for all i that divide n.DivisorSum[n, form, cond] "
  },
  {
    "label":"DMSList",
    "type":"keyword",
    "info":"DMSList[Î¸] converts an angle Î¸ given in decimal degrees to a DMS list {degree, minute, second}.DMSLi"
  },
  {
    "label":"DMSString",
    "type":"keyword",
    "info":"DMSString[Î¸] converts an angle Î¸ given in decimal degrees to a degrees-minutes-seconds string.DMSStr"
  },
  {
    "label":"Do",
    "type":"keyword",
    "info":"Do[expr, n] evaluates expr n times. Do[expr, {i, i   }] evaluates expr with the variable i successiv"
  },
  {
    "label":"DockedCells",
    "type":"keyword",
    "info":"DockedCells is an option for notebooks that gives a list of cells that are to be displayed \"docked\" "
  },
  {
    "label":"DocumentGenerator",
    "type":"keyword",
    "info":"DocumentGenerator[template, timespec] represents a document generator with template template to be e"
  },
  {
    "label":"DocumentGeneratorInformation",
    "type":"keyword",
    "info":"DocumentGeneratorInformation[CloudObject] returns information about a generator.\nDocumentGeneratorIn"
  },
  {
    "label":"DocumentGeneratorInformationData",
    "type":"keyword",
    "info":"System`DocumentGeneratorInformationData"
  },
  {
    "label":"DocumentGenerators",
    "type":"keyword",
    "info":"DocumentGenerators[] returns a list of the user's document generators, as cloud objects."
  },
  {
    "label":"DocumentNotebook",
    "type":"keyword",
    "info":"DocumentNotebook[{cell , cell , â¦}] represents a complete document notebook in the Wolfram System fr"
  },
  {
    "label":"DocumentWeightingRules",
    "type":"keyword",
    "info":"DocumentWeightingRules is an option for TextSearch and related functions that allows the specificati"
  },
  {
    "label":"Dodecahedron",
    "type":"keyword",
    "info":"Dodecahedron[] represents a regular dodecahedron centered at the origin with unit edge length.Dodeca"
  },
  {
    "label":"DomainRegistrationInformation",
    "type":"keyword",
    "info":"System`DomainRegistrationInformation"
  },
  {
    "label":"DominantColors",
    "type":"keyword",
    "info":"DominantColors[image] returns dominant colors in image.DominantColors[image, n] returns at most n do"
  },
  {
    "label":"DominatorTreeGraph",
    "type":"keyword",
    "info":"DominatorTreeGraph[g, v] gives the dominator tree of the directed graph g from the root vertex v."
  },
  {
    "label":"DominatorVertexList",
    "type":"keyword",
    "info":"DominatorVertexList[g, v] gives the list of immediate dominators of the directed graph g from the ro"
  },
  {
    "label":"DOSTextFormat",
    "type":"keyword",
    "info":"DOSTextFormat is an option for OpenRead, OpenWrite, and OpenAppend that specifies whether files shou"
  },
  {
    "label":"Dot",
    "type":"keyword",
    "info":"a . b . c or Dot[a, b, c] gives products of vectors, matrices, and tensors. "
  },
  {
    "label":"DotDashed",
    "type":"keyword",
    "info":"DotDashed is a graphics directive specifying that lines that follow should be drawn dot-dashed."
  },
  {
    "label":"DotEqual",
    "type":"keyword",
    "info":"DotEqual[x, y, â¦] displays as x â y â â¦."
  },
  {
    "label":"DotLayer",
    "type":"keyword",
    "info":"DotLayer[] represents a net layer that takes the dot product of two or more arrays.DotLayer[{spec , "
  },
  {
    "label":"DotPlusLayer",
    "type":"keyword",
    "info":"DotPlusLayer[n] is equivalent to LinearLayer[n] and should no longer be used. "
  },
  {
    "label":"Dotted",
    "type":"keyword",
    "info":"Dotted is a graphics directive specifying that lines that follow should be drawn dotted."
  },
  {
    "label":"DoubleBracketingBar",
    "type":"keyword",
    "info":"DoubleBracketingBar[x, y, â¦] displays as ï x, y, â¦ ï."
  },
  {
    "label":"DoubleContourIntegral",
    "type":"keyword",
    "info":"System`DoubleContourIntegral"
  },
  {
    "label":"DoubleDownArrow",
    "type":"keyword",
    "info":"DoubleDownArrow[x, y, â¦] displays as x â yâ¦."
  },
  {
    "label":"DoubleLeftArrow",
    "type":"keyword",
    "info":"DoubleLeftArrow[x, y, â¦] displays as x â y â â¦."
  },
  {
    "label":"DoubleLeftRightArrow",
    "type":"keyword",
    "info":"DoubleLeftRightArrow[x, y, â¦] displays as x â y â â¦."
  },
  {
    "label":"DoubleLeftTee",
    "type":"keyword",
    "info":"DoubleLeftTee[x, y] displays as x â«¤ y."
  },
  {
    "label":"DoubleLongLeftArrow",
    "type":"keyword",
    "info":"DoubleLongLeftArrow[x, y, â¦] displays as x â¸ y â¸ â¦."
  },
  {
    "label":"DoubleLongLeftRightArrow",
    "type":"keyword",
    "info":"DoubleLongLeftRightArrow[x, y, â¦] displays as x âº y âº â¦."
  },
  {
    "label":"DoubleLongRightArrow",
    "type":"keyword",
    "info":"DoubleLongRightArrow[x, y, â¦] displays as x â¹ y â¹ â¦."
  },
  {
    "label":"DoubleRightArrow",
    "type":"keyword",
    "info":"DoubleRightArrow[x, y, â¦] displays as x â y â â¦."
  },
  {
    "label":"DoubleRightTee",
    "type":"keyword",
    "info":"DoubleRightTee[x, y] displays as x â¨ y."
  },
  {
    "label":"DoubleUpArrow",
    "type":"keyword",
    "info":"DoubleUpArrow[x, y, â¦] displays as x â y â â¦."
  },
  {
    "label":"DoubleUpDownArrow",
    "type":"keyword",
    "info":"DoubleUpDownArrow[x, y, â¦] displays as x â y â â¦."
  },
  {
    "label":"DoubleVerticalBar",
    "type":"keyword",
    "info":"DoubleVerticalBar[x, y, â¦] displays as x â¥ y â¥ â¦."
  },
  {
    "label":"DoublyInfinite",
    "type":"keyword",
    "info":"DoublyInfinite is an option for LerchPhi. With DoublyInfinite -> True, the summation is taken from -"
  },
  {
    "label":"Down",
    "type":"keyword",
    "info":"System`Down"
  },
  {
    "label":"DownArrow",
    "type":"keyword",
    "info":"DownArrow[x, y, â¦] displays as x â y â â¦."
  },
  {
    "label":"DownArrowBar",
    "type":"keyword",
    "info":"DownArrowBar[x, y, â¦] displays as x â¤ y â¤ â¦."
  },
  {
    "label":"DownArrowUpArrow",
    "type":"keyword",
    "info":"DownArrowUpArrow[x, y, â¦] displays as x â\\[Micro] y â\\[Micro] â¦."
  },
  {
    "label":"DownLeftRightVector",
    "type":"keyword",
    "info":"DownLeftRightVector[x, y, â¦] displays as x â¥ y â¥ â¦."
  },
  {
    "label":"DownLeftTeeVector",
    "type":"keyword",
    "info":"DownLeftTeeVector[x, y, â¦] displays as x â¥ y â¥ â¦."
  },
  {
    "label":"DownLeftVector",
    "type":"keyword",
    "info":"DownLeftVector[x, y, â¦] displays as x â½ y â½ â¦."
  },
  {
    "label":"DownLeftVectorBar",
    "type":"keyword",
    "info":"DownLeftVectorBar[x, y, â¦] displays as x â¥ y â¥ â¦."
  },
  {
    "label":"DownRightTeeVector",
    "type":"keyword",
    "info":"DownRightTeeVector[x, y, â¦] displays as x â¥ y â¥ â¦."
  },
  {
    "label":"DownRightVector",
    "type":"keyword",
    "info":"DownRightVector[x, y, â¦] displays as x â y â â¦."
  },
  {
    "label":"DownRightVectorBar",
    "type":"keyword",
    "info":"DownRightVectorBar[x, y, â¦] displays as x â¥ y â¥ â¦."
  },
  {
    "label":"Downsample",
    "type":"keyword",
    "info":"                                                                                    th\nDownsample[ar"
  },
  {
    "label":"DownTee",
    "type":"keyword",
    "info":"DownTee[x, y] displays as x â¤ y."
  },
  {
    "label":"DownTeeArrow",
    "type":"keyword",
    "info":"DownTeeArrow[x, y, â¦] displays as x â§ y â§ â¦."
  },
  {
    "label":"DownValues",
    "type":"keyword",
    "info":"DownValues[f] gives a list of transformation rules corresponding to all downvalues (values for f[â¦])"
  },
  {
    "label":"DragAndDrop",
    "type":"keyword",
    "info":"DragAndDrop is a global front end option that specifies whether to allow dragâandâdrop editing. "
  },
  {
    "label":"DrawBackFaces",
    "type":"keyword",
    "info":"System`DrawBackFaces"
  },
  {
    "label":"DrawEdges",
    "type":"keyword",
    "info":"System`DrawEdges"
  },
  {
    "label":"DrawFrontFaces",
    "type":"keyword",
    "info":"System`DrawFrontFaces"
  },
  {
    "label":"DrawHighlighted",
    "type":"keyword",
    "info":"System`DrawHighlighted"
  },
  {
    "label":"DrazinInverse",
    "type":"keyword",
    "info":"                                                       D\nDrazinInverse[m] finds the Drazin generaliz"
  },
  {
    "label":"Drop",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"DropoutLayer",
    "type":"keyword",
    "info":"DropoutLayer[] represents a net layer that sets its input elements to zero with probability 0.5 duri"
  },
  {
    "label":"DSolve",
    "type":"keyword",
    "info":"DSolve[eqn, u, x] solves a differential equation for the function u, with independent variableÂ x. DS"
  },
  {
    "label":"DSolveValue",
    "type":"keyword",
    "info":"DSolveValue[eqn, expr, x] gives the value of expr determined by a symbolic solution to the ordinary "
  },
  {
    "label":"Dt",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"DualLinearProgramming",
    "type":"keyword",
    "info":"System`DualLinearProgramming"
  },
  {
    "label":"DualPlanarGraph",
    "type":"keyword",
    "info":"DualPlanarGraph[g] gives the dual of the planar graph g."
  },
  {
    "label":"DualPolyhedron",
    "type":"keyword",
    "info":"DualPolyhedron[poly] gives the dual polyhedron of the polyhedron poly."
  },
  {
    "label":"DualSystemsModel",
    "type":"keyword",
    "info":"DualSystemsModel[ssm] gives the dual of the state-space model ssm. "
  },
  {
    "label":"DumpGet",
    "type":"keyword",
    "info":"DumpGet[ \"filename\"] reads in a file saved with DumpSave."
  },
  {
    "label":"DumpSave",
    "type":"keyword",
    "info":"DumpSave[\"file.mx\", symbol] writes definitions associated with a symbol to a file in internal Wolfra"
  },
  {
    "label":"DuplicateFreeQ",
    "type":"keyword",
    "info":"DuplicateFreeQ[list] gives True if list has no duplicates, and False otherwise.DuplicateFreeQ[list, "
  },
  {
    "label":"Duration",
    "type":"keyword",
    "info":"Duration[expr] returns the duration of expr."
  },
  {
    "label":"Dynamic",
    "type":"keyword",
    "info":"Dynamic[expr] represents an object that displays as the dynamically updated current value of expr. I"
  },
  {
    "label":"DynamicBox",
    "type":"keyword",
    "info":"System`DynamicBox"
  },
  {
    "label":"DynamicBoxOptions",
    "type":"keyword",
    "info":"DynamicBoxOptions ï¢ {opt  ï¢ val , opt  ï¢ val , â¦} is an option that specifies settings for DynamicBo"
  },
  {
    "label":"DynamicEvaluationTimeout",
    "type":"keyword",
    "info":"DynamicEvaluationTimeout is an option for displayed objects, cells, and notebooks that specifies the"
  },
  {
    "label":"DynamicGeoGraphics",
    "type":"keyword",
    "info":"DynamicGeoGraphics[primitives, options] represents a dynamic, interactive, two-dimensional geographi"
  },
  {
    "label":"DynamicImage",
    "type":"keyword",
    "info":"DynamicImage[image] displays a dynamic version of image, supporting panning, zooming, etc.DynamicIma"
  },
  {
    "label":"DynamicLocation",
    "type":"keyword",
    "info":"System`DynamicLocation"
  },
  {
    "label":"DynamicModule",
    "type":"keyword",
    "info":"DynamicModule[{x, y, â¦}, expr] represents an object which maintains the same local instance of the s"
  },
  {
    "label":"DynamicModuleBox",
    "type":"keyword",
    "info":"System`DynamicModuleBox"
  },
  {
    "label":"DynamicModuleBoxOptions",
    "type":"keyword",
    "info":"DynamicModuleBoxOptions ï¢ {opt  ï¢ val , opt  ï¢ val , â¦} is an option that specifies settings for Dyn"
  },
  {
    "label":"DynamicModuleParent",
    "type":"keyword",
    "info":"System`DynamicModuleParent"
  },
  {
    "label":"DynamicModuleValues",
    "type":"keyword",
    "info":"DynamicModuleValues is an option for DynamicModule that stores downvalues of local symbols."
  },
  {
    "label":"DynamicName",
    "type":"keyword",
    "info":"System`DynamicName"
  },
  {
    "label":"DynamicNamespace",
    "type":"keyword",
    "info":"System`DynamicNamespace"
  },
  {
    "label":"DynamicReference",
    "type":"keyword",
    "info":"System`DynamicReference"
  },
  {
    "label":"DynamicSetting",
    "type":"keyword",
    "info":"DynamicSetting[e] represents an object which displays as e, but is interpreted as the dynamically up"
  },
  {
    "label":"DynamicUpdating",
    "type":"keyword",
    "info":"DynamicUpdating is an option for displayed objects, cells and notebooks that specifies whether dynam"
  },
  {
    "label":"DynamicWrapper",
    "type":"keyword",
    "info":"DynamicWrapper[e, expr] represents an object that displays as e, but dynamically updates the express"
  },
  {
    "label":"DynamicWrapperBox",
    "type":"keyword",
    "info":"System`DynamicWrapperBox"
  },
  {
    "label":"DynamicWrapperBoxOptions",
    "type":"keyword",
    "info":"DynamicWrapperBoxOptions ï¢ {opt  ï¢ val , opt  ï¢ val , â¦} is an option that specifies settings for Dy"
  },
  {
    "label":"D$",
    "type":"keyword",
    "info":"System`D$"
  },
  {
    "label":"E",
    "type":"keyword",
    "info":"E is the exponential constant ï (base of natural logarithms), with numerical value â 2.71828."
  },
  {
    "label":"EarthImpactData",
    "type":"keyword",
    "info":"EarthImpactData[entity, property] gives the value of the specified property for the earth impact cra"
  },
  {
    "label":"EarthquakeData",
    "type":"keyword",
    "info":"EarthquakeData[loc] gives all earthquake properties for the location corresponding to loc.Earthquake"
  },
  {
    "label":"EccentricityCentrality",
    "type":"keyword",
    "info":"EccentricityCentrality[g] gives a list of eccentricity centralities for the vertices in the graph g."
  },
  {
    "label":"Echo",
    "type":"keyword",
    "info":"Echo[expr] prints expr and returns expr.Echo[expr, label] prints expr prepending label and returns e"
  },
  {
    "label":"EchoEvaluation",
    "type":"keyword",
    "info":"EchoEvaluation[expr] prints expr before evaluation, then prints the result after evaluation and retu"
  },
  {
    "label":"EchoFunction",
    "type":"keyword",
    "info":"EchoFunction[f][expr] prints f[expr] and returns expr.EchoFunction[label, f][expr] prints f[expr] pr"
  },
  {
    "label":"EchoLabel",
    "type":"keyword",
    "info":"EchoLabel[label][expr] prints expr prepending label and returns expr."
  },
  {
    "label":"EchoTiming",
    "type":"keyword",
    "info":"EchoTiming[expr] evaluates expr, prints the time in seconds used and returns the result of the evalu"
  },
  {
    "label":"EclipseType",
    "type":"keyword",
    "info":"EclipseType is an option for SolarEclipse and LunarEclipse that specifies the type of eclipse being "
  },
  {
    "label":"EdgeAdd",
    "type":"keyword",
    "info":"EdgeAdd[g, e] makes a graph by adding the edge e to the graph g.EdgeAdd[g, {e , e , â¦}] adds a colle"
  },
  {
    "label":"EdgeBetweennessCentrality",
    "type":"keyword",
    "info":"EdgeBetweennessCentrality[g] gives a list of betweenness centralities for the edges in the graph g.E"
  },
  {
    "label":"EdgeCapacity",
    "type":"keyword",
    "info":"EdgeCapacity is an option and annotation for Graph and related functions that specifies an edge capa"
  },
  {
    "label":"EdgeCapForm",
    "type":"keyword",
    "info":"System`EdgeCapForm"
  },
  {
    "label":"EdgeChromaticNumber",
    "type":"keyword",
    "info":"EdgeChromaticNumber[g] gives the chromatic number for the edges of the graph g."
  },
  {
    "label":"EdgeColor",
    "type":"keyword",
    "info":"System`EdgeColor"
  },
  {
    "label":"EdgeConnectivity",
    "type":"keyword",
    "info":"EdgeConnectivity[g] gives the edge connectivity of the graph g.EdgeConnectivity[g, s, t] gives the s"
  },
  {
    "label":"EdgeContract",
    "type":"keyword",
    "info":"EdgeContract[g, e] contracts the edge e of the graph g.EdgeContract[g, {e , e , â¦}] contracts a coll"
  },
  {
    "label":"EdgeCost",
    "type":"keyword",
    "info":"EdgeCost is an option and annotation for Graph and related functions that specifies an edge cost."
  },
  {
    "label":"EdgeCount",
    "type":"keyword",
    "info":"EdgeCount[g] gives a count of the number of edges in the graph g.EdgeCount[g, patt] gives a count of"
  },
  {
    "label":"EdgeCoverQ",
    "type":"keyword",
    "info":"EdgeCoverQ[g, elist] yields True if the edge list elist is an edge cover of the graph g and False ot"
  },
  {
    "label":"EdgeCycleMatrix",
    "type":"keyword",
    "info":"EdgeCycleMatrix[g] gives the edge cycle matrix of a graph g.EdgeCycleMatrix[{v ï¢ w, â¦}] uses rules v"
  },
  {
    "label":"EdgeDashing",
    "type":"keyword",
    "info":"System`EdgeDashing"
  },
  {
    "label":"EdgeDelete",
    "type":"keyword",
    "info":"EdgeDelete[g, e] makes a graph by deleting the edge e from the graph g.EdgeDelete[g, {e , e , â¦}] de"
  },
  {
    "label":"EdgeDetect",
    "type":"keyword",
    "info":"EdgeDetect[image] finds edges in image and returns the result as a binary image.EdgeDetect[image, r]"
  },
  {
    "label":"EdgeForm",
    "type":"keyword",
    "info":"EdgeForm[g] is a graphics directive that specifies that edges of polygons and other filled graphics "
  },
  {
    "label":"EdgeIndex",
    "type":"keyword",
    "info":"EdgeIndex[g, e] gives the integer index for the edge e in the graph g.EdgeIndex[{v ï¢ w, â¦}, â¦] uses "
  },
  {
    "label":"EdgeJoinForm",
    "type":"keyword",
    "info":"System`EdgeJoinForm"
  },
  {
    "label":"EdgeLabeling",
    "type":"keyword",
    "info":"EdgeLabeling is an option for GraphPlot and related functions that specifies whether labeling specif"
  },
  {
    "label":"EdgeLabels",
    "type":"keyword",
    "info":"EdgeLabels is an option and annotation for Graph and related functions that specifies what labels an"
  },
  {
    "label":"EdgeLabelStyle",
    "type":"keyword",
    "info":"EdgeLabelStyle is an option and property for Graph and related functions that specifies the style to"
  },
  {
    "label":"EdgeList",
    "type":"keyword",
    "info":"EdgeList[g] gives the list of edges for the graph g.EdgeList[g, patt] gives a list of edges that mat"
  },
  {
    "label":"EdgeOpacity",
    "type":"keyword",
    "info":"System`EdgeOpacity"
  },
  {
    "label":"EdgeQ",
    "type":"keyword",
    "info":"EdgeQ[g, e] yields True if e is an edge in the graph g and False otherwise."
  },
  {
    "label":"EdgeRenderingFunction",
    "type":"keyword",
    "info":"EdgeRenderingFunction is an option for GraphPlot and related functions that gives a function to gene"
  },
  {
    "label":"EdgeRules",
    "type":"keyword",
    "info":"EdgeRules[g] gives the list of edge rules for the graph g.EdgeRules[{v ï¢ w, â¦}] uses rules v ï¢ w to "
  },
  {
    "label":"EdgeShapeFunction",
    "type":"keyword",
    "info":"EdgeShapeFunction is an option and annotation for Graph and related functions that specifies a funct"
  },
  {
    "label":"EdgeStyle",
    "type":"keyword",
    "info":"EdgeStyle is an option and annotation for Graph and related functions that specifies what style to u"
  },
  {
    "label":"EdgeTaggedGraph",
    "type":"keyword",
    "info":"EdgeTaggedGraph[{e , e , â¦}] yields a graph with edges e  tagged with unique tags.EdgeTaggedGraph[{e"
  },
  {
    "label":"EdgeTaggedGraphQ",
    "type":"keyword",
    "info":"EdgeTaggedGraphQ[g] yields True if the graph g has edges tagged and False otherwise."
  },
  {
    "label":"EdgeTags",
    "type":"keyword",
    "info":"EdgeTags[g] gives the list of tags for all edges in the graph g.EdgeTags[g, {u, v}] gives the list o"
  },
  {
    "label":"EdgeThickness",
    "type":"keyword",
    "info":"System`EdgeThickness"
  },
  {
    "label":"EdgeTransitiveGraphQ",
    "type":"keyword",
    "info":"EdgeTransitiveGraphQ[g] yields True if the graph g is a edge-transitive graph and False otherwise."
  },
  {
    "label":"EdgeValueRange",
    "type":"keyword",
    "info":"EdgeValueRange is an option for GeoGraphValuePlot that specifies the range of edge values to include"
  },
  {
    "label":"EdgeValueSizes",
    "type":"keyword",
    "info":"EdgeValueSizes is an option for GeoGraphValuePlot that specifies the thicknesses used to show edge v"
  },
  {
    "label":"EdgeWeight",
    "type":"keyword",
    "info":"EdgeWeight is an option and annotation for Graph and related functions that specifies an edge weight"
  },
  {
    "label":"EdgeWeightedGraphQ",
    "type":"keyword",
    "info":"EdgeWeightedGraphQ[g] yields True if the graph g is an edge-weighted graph and False otherwise."
  },
  {
    "label":"Editable",
    "type":"keyword",
    "info":"Editable is an option for displayed objects, cells, and notebooks that specifies whether their conte"
  },
  {
    "label":"EditButtonSettings",
    "type":"keyword",
    "info":"System`EditButtonSettings"
  },
  {
    "label":"EditCellTagsSettings",
    "type":"keyword",
    "info":"EditCellTagsSettings is a global option that specifies settings for the Edit Cell Tags dialog box."
  },
  {
    "label":"EditDistance",
    "type":"keyword",
    "info":"EditDistance[u, v] gives the edit or Levenshtein distance between strings or vectors u and v.EditDis"
  },
  {
    "label":"EffectiveInterest",
    "type":"keyword",
    "info":"EffectiveInterest[r, q] gives the effective interest rate corresponding to interest specification r,"
  },
  {
    "label":"Eigensystem",
    "type":"keyword",
    "info":"Eigensystem[m] gives a list {values, vectors} of the eigenvalues and eigenvectors of the square matr"
  },
  {
    "label":"Eigenvalues",
    "type":"keyword",
    "info":"Eigenvalues[m] gives a list of the eigenvalues of the square matrix m. Eigenvalues[{m, a}] gives the"
  },
  {
    "label":"EigenvectorCentrality",
    "type":"keyword",
    "info":"EigenvectorCentrality[g] gives a list of eigenvector centralities for the vertices in the graph g.Ei"
  },
  {
    "label":"Eigenvectors",
    "type":"keyword",
    "info":"Eigenvectors[m] gives a list of the eigenvectors of the square matrix m. Eigenvectors[{m, a}] gives "
  },
  {
    "label":"Element",
    "type":"keyword",
    "info":"Element[x, dom] or x â dom asserts that x is an element of the domain dom. Element[x, reg] or x â re"
  },
  {
    "label":"ElementData",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"ElementwiseLayer",
    "type":"keyword",
    "info":"ElementwiseLayer[f] represents a net layer that applies a unary function f to every element of the i"
  },
  {
    "label":"ElidedForms",
    "type":"keyword",
    "info":"ElidedForms is an option to TextString and related functions that specifies which expressions should"
  },
  {
    "label":"Eliminate",
    "type":"keyword",
    "info":"Eliminate[eqns, vars] eliminates variables between a set of simultaneous equations. "
  },
  {
    "label":"EliminationOrder",
    "type":"keyword",
    "info":"System`EliminationOrder"
  },
  {
    "label":"Ellipsoid",
    "type":"keyword",
    "info":"Ellipsoid[p, {r , â¦}] represents an axis-aligned ellipsoid centered at the point p and with semiaxes"
  },
  {
    "label":"EllipticE",
    "type":"keyword",
    "info":"EllipticE[m] gives the complete elliptic integral E(m). EllipticE[Ï, m] gives the elliptic integral "
  },
  {
    "label":"EllipticExp",
    "type":"keyword",
    "info":"EllipticExp[u, {a, b}] is the inverse for EllipticLog. It produces a list {x, y} such that u == Elli"
  },
  {
    "label":"EllipticExpPrime",
    "type":"keyword",
    "info":"EllipticExpPrime[u, {a, b}] gives the derivative of EllipticExp[u, {a, b}] with respect to u."
  },
  {
    "label":"EllipticF",
    "type":"keyword",
    "info":"EllipticF[Ï, m] gives the elliptic integral of the first kind F(Ï ï\.b2 m). "
  },
  {
    "label":"EllipticFilterModel",
    "type":"keyword",
    "info":"EllipticFilterModel[n] designs a lowpass elliptic filter of order n.EllipticFilterModel[{n, Ï }] use"
  },
  {
    "label":"EllipticK",
    "type":"keyword",
    "info":"EllipticK[m] gives the complete elliptic integral of the first kind K(m). "
  },
  {
    "label":"EllipticLog",
    "type":"keyword",
    "info":"                                                                                                2   "
  },
  {
    "label":"EllipticNomeQ",
    "type":"keyword",
    "info":"EllipticNomeQ[m] gives the nome q corresponding to the parameter m in an elliptic function. "
  },
  {
    "label":"EllipticPi",
    "type":"keyword",
    "info":"EllipticPi[n, m] gives the complete elliptic integral of the third kind Î  (n ï\.b2 m). EllipticPi[n, Ï, "
  },
  {
    "label":"EllipticReducedHalfPeriods",
    "type":"keyword",
    "info":"EllipticReducedHalfPeriods[{u, v}] gives a reduced pair of half periods {w, w '} corresponding to th"
  },
  {
    "label":"EllipticTheta",
    "type":"keyword",
    "info":"EllipticTheta[a, u, q] gives the theta function Ï (u, q) (a = 1, â¦, 4).EllipticTheta[a, q] gives the"
  },
  {
    "label":"EllipticThetaPrime",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"EmbedCode",
    "type":"keyword",
    "info":"EmbedCode[obj] generates the code necessary to embed the object obj on a webpage.EmbedCode[obj, \"des"
  },
  {
    "label":"EmbeddedHTML",
    "type":"keyword",
    "info":"EmbeddedHTML[\"string\"] is an object that formats as a web frame containing the HTML content \"string\""
  },
  {
    "label":"EmbeddedService",
    "type":"keyword",
    "info":"EmbeddedService[service] is an object that formats as a web frame containing content from the specif"
  },
  {
    "label":"EmbeddedSQLEntityClass",
    "type":"keyword",
    "info":"EmbeddedSQLEntityClass[string, props] represents a verbatim SQL query to be interpreted as an entity"
  },
  {
    "label":"EmbeddedSQLExpression",
    "type":"keyword",
    "info":"EmbeddedSQLExpression[string] represents an SQL expression to be evaluated verbatim within an Entity"
  },
  {
    "label":"EmbeddingLayer",
    "type":"keyword",
    "info":"EmbeddingLayer[size, n] represents a trainable net layer that embeds integers between 1 and n into a"
  },
  {
    "label":"EmbeddingObject",
    "type":"keyword",
    "info":"System`EmbeddingObject"
  },
  {
    "label":"EmitSound",
    "type":"keyword",
    "info":"EmitSound[snd] emits the sound snd when evaluated. EmitSound[{snd , snd , â¦}] emits each of the soun"
  },
  {
    "label":"EmphasizeSyntaxErrors",
    "type":"keyword",
    "info":"System`EmphasizeSyntaxErrors"
  },
  {
    "label":"EmpiricalDistribution",
    "type":"keyword",
    "info":"EmpiricalDistribution[{x , x , â¦}] represents an empirical distribution based on the data values x ."
  },
  {
    "label":"Empty",
    "type":"keyword",
    "info":"System`Empty"
  },
  {
    "label":"EmptyGraphQ",
    "type":"keyword",
    "info":"EmptyGraphQ[g] yields True if g is an empty graph and False otherwise."
  },
  {
    "label":"EmptyRegion",
    "type":"keyword",
    "info":"                                               n\nEmptyRegion[n] represents the empty subset of ï\\[Micro] . "
  },
  {
    "label":"EmptySpaceF",
    "type":"keyword",
    "info":"EmptySpaceF[pdata, r] estimates the empty space function F(r) for point data pdata at radius r.Empty"
  },
  {
    "label":"EnableConsolePrintPacket",
    "type":"keyword",
    "info":"System`EnableConsolePrintPacket"
  },
  {
    "label":"Enabled",
    "type":"keyword",
    "info":"Enabled is an option for objects such as Slider that specifies whether the objects should be enabled"
  },
  {
    "label":"Enclose",
    "type":"keyword",
    "info":"Enclose[expr] attempts to evaluate expr and return the result, but stops if it catches an error and "
  },
  {
    "label":"Encode",
    "type":"keyword",
    "info":"Encode[\"source\", \"dest\"] writes an encoded version of the file source to the file dest. << dest deco"
  },
  {
    "label":"Encrypt",
    "type":"keyword",
    "info":"Encrypt[\"password\", expr] encrypts expr using the specified password, to give an encrypted object.En"
  },
  {
    "label":"EncryptedObject",
    "type":"keyword",
    "info":"EncryptedObject[assoc] represents encrypted data generated by Encrypt."
  },
  {
    "label":"EncryptFile",
    "type":"keyword",
    "info":"EncryptFile[\"password\", file] generates an encrypted version of a file, using the specified password"
  },
  {
    "label":"End",
    "type":"keyword",
    "info":"End[] returns the present context, and reverts to the previous one. "
  },
  {
    "label":"EndAdd",
    "type":"keyword",
    "info":"EndAdd[ ] returns the present context, and reverts to the previous one, prepending the present conte"
  },
  {
    "label":"EndDialogPacket",
    "type":"keyword",
    "info":"EndDialogPacket[integer] is a WSTP packet indicating the end of the Dialog subsession referenced by "
  },
  {
    "label":"EndFrontEndInteractionPacket",
    "type":"keyword",
    "info":"System`EndFrontEndInteractionPacket"
  },
  {
    "label":"EndOfBuffer",
    "type":"keyword",
    "info":"EndOfBuffer is a symbol that represents the end of currently available data in the buffer for a proc"
  },
  {
    "label":"EndOfFile",
    "type":"keyword",
    "info":"EndOfFile is a symbol returned by Read when it reaches the end of a file. "
  },
  {
    "label":"EndOfLine",
    "type":"keyword",
    "info":"EndOfLine represents the end of a line in a string for purposes of matching in StringExpression."
  },
  {
    "label":"EndOfString",
    "type":"keyword",
    "info":"EndOfString represents the end of a string for purposes of matching in StringExpression."
  },
  {
    "label":"EndPackage",
    "type":"keyword",
    "info":"EndPackage[] restores $Context and $ContextPath to their values before the preceding BeginPackage, a"
  },
  {
    "label":"EngineEnvironment",
    "type":"keyword",
    "info":"System`EngineEnvironment"
  },
  {
    "label":"EngineeringForm",
    "type":"keyword",
    "info":"EngineeringForm[expr] prints with all real numbers in expr given in engineering notation. Engineerin"
  },
  {
    "label":"Enter",
    "type":"keyword",
    "info":"System`Enter"
  },
  {
    "label":"EnterExpressionPacket",
    "type":"keyword",
    "info":"EnterExpressionPacket[expr] is a WSTP packet that requests the evaluation of expr."
  },
  {
    "label":"EnterTextPacket",
    "type":"keyword",
    "info":"EnterTextPacket[string] is a WSTP packet that requests the parsing and evaluation of string as an ex"
  },
  {
    "label":"Entity",
    "type":"keyword",
    "info":"Entity[\"type\", name] represents an entity of the specified type, identified by name.Entity[cspec, na"
  },
  {
    "label":"EntityClass",
    "type":"keyword",
    "info":"EntityClass[\"type\", name] represents a class of entities of the specified type identified by name.En"
  },
  {
    "label":"EntityClassList",
    "type":"keyword",
    "info":"EntityClassList[\"type\"] gives a list of entity classes for the specified type of entity."
  },
  {
    "label":"EntityCopies",
    "type":"keyword",
    "info":"EntityCopies[entity, n] represents n copies of entity."
  },
  {
    "label":"EntityFunction",
    "type":"keyword",
    "info":"EntityFunction[x, body] is a function with a single formal parameter x, to be used in EntityValue an"
  },
  {
    "label":"EntityGroup",
    "type":"keyword",
    "info":"EntityGroup[{entity , entity , â¦}] represents a group of entities.\n                   1        2"
  },
  {
    "label":"EntityInstance",
    "type":"keyword",
    "info":"EntityInstance[entity, qual ï¢ val] represents an entity whose qualifier qual has value val.EntityIns"
  },
  {
    "label":"EntityList",
    "type":"keyword",
    "info":"EntityList[class] gives a list of entities in the specified entity class. EntityList[\"type\"] gives a"
  },
  {
    "label":"EntityPrefetch",
    "type":"keyword",
    "info":"EntityPrefetch[\"type\"] fetches cacheable values associated with all entities of the specified type.E"
  },
  {
    "label":"EntityProperties",
    "type":"keyword",
    "info":"EntityProperties[type] lists properties associated with entity type type."
  },
  {
    "label":"EntityProperty",
    "type":"keyword",
    "info":"EntityProperty[type, pname] represents a property identified by pname for use in EntityValue.EntityP"
  },
  {
    "label":"EntityPropertyClass",
    "type":"keyword",
    "info":"EntityPropertyClass[type, pcname] represents a class of properties identified by the name pcname."
  },
  {
    "label":"EntityRegister",
    "type":"keyword",
    "info":"EntityRegister[estore] registers the entities in the entity store estore so that they can be accesse"
  },
  {
    "label":"EntityStore",
    "type":"keyword",
    "info":"EntityStore[\"type\"] represents an empty entity store for entities of type \"type\".EntityStore[\"type\" "
  },
  {
    "label":"EntityStores",
    "type":"keyword",
    "info":"EntityStores[] gives a list of all registered entity stores that are accessed when Entity is used."
  },
  {
    "label":"EntityTypeName",
    "type":"keyword",
    "info":"EntityTypeName[entity] gives the name of the entity type of entity.EntityTypeName[{entity , â¦, entit"
  },
  {
    "label":"EntityUnregister",
    "type":"keyword",
    "info":"EntityUnregister[\"type\"] unregisters all entities in the first entity store that defines entities of"
  },
  {
    "label":"EntityValue",
    "type":"keyword",
    "info":"EntityValue[entity, property] gives the value of the specified property for the given entity.EntityV"
  },
  {
    "label":"Entropy",
    "type":"keyword",
    "info":"Entropy[list] gives the base ï information entropy of the values in list.Entropy[k, list] gives the "
  },
  {
    "label":"EntropyFilter",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"Environment",
    "type":"keyword",
    "info":"Environment[\"var\"] gives the value of an operating system environment variable. "
  },
  {
    "label":"Epilog",
    "type":"keyword",
    "info":"Epilog is an option for graphics functions that gives a list of graphics primitives to be rendered a"
  },
  {
    "label":"EpilogFunction",
    "type":"keyword",
    "info":"EpilogFunction is an option for DocumentGenerator allowing arbitrary code to be executed after a doc"
  },
  {
    "label":"Equal",
    "type":"keyword",
    "info":"lhs == rhs returns True if lhs and rhs are identical. "
  },
  {
    "label":"EqualColumns",
    "type":"keyword",
    "info":"EqualColumns is an option to GridBox which specifies whether the size of the columns are all set to "
  },
  {
    "label":"EqualRows",
    "type":"keyword",
    "info":"EqualRows is an option to GridBox which specifies whether the size of the rows are all set to the si"
  },
  {
    "label":"EqualTilde",
    "type":"keyword",
    "info":"EqualTilde[x, y, â¦] displays as x â y â â¦."
  },
  {
    "label":"EqualTo",
    "type":"keyword",
    "info":"EqualTo[y] is an operator form that yields x == y when applied to an expression x. "
  },
  {
    "label":"EquatedTo",
    "type":"keyword",
    "info":"EquatedTo is an option for Roots, which specifies an expression to use in place of the variable in t"
  },
  {
    "label":"Equilibrium",
    "type":"keyword",
    "info":"Equilibrium[x, y, â¦] displays as x â y â â¦."
  },
  {
    "label":"EquirippleFilterKernel",
    "type":"keyword",
    "info":"EquirippleFilterKernel[{{{Ï  , Ï  }, {Ï  , Ï  }, â¦}, {a , a , â¦}}, n] creates a finite impulse respo"
  },
  {
    "label":"Equivalent",
    "type":"keyword",
    "info":"Equivalent[e , e , â¦] represents the logical equivalence e  â e  â â¦, giving True when all of the e "
  },
  {
    "label":"Erf",
    "type":"keyword",
    "info":"Erf[z] gives the error function erf(z). Erf[z , z ] gives the generalized error function erf(z ) - e"
  },
  {
    "label":"Erfc",
    "type":"keyword",
    "info":"Erfc[z] gives the complementary error function erfc(z). "
  },
  {
    "label":"Erfi",
    "type":"keyword",
    "info":"Erfi[z] gives the imaginary error function erf(iï z)\/i. "
  },
  {
    "label":"ErlangB",
    "type":"keyword",
    "info":"ErlangB[c, a] computes the Erlang B loss probability for an M\/M\/c\/c queue."
  },
  {
    "label":"ErlangC",
    "type":"keyword",
    "info":"ErlangC[c, a] computes the Erlang C probability for nonzero waiting time in an M\/M\/c queue."
  },
  {
    "label":"ErlangDistribution",
    "type":"keyword",
    "info":"ErlangDistribution[k, Î»] represents the Erlang distribution with shape parameter k and rate Î»."
  },
  {
    "label":"Erosion",
    "type":"keyword",
    "info":"Erosion[image, ker] gives the morphological erosion of image with respect to the structuring element"
  },
  {
    "label":"ErrorBox",
    "type":"keyword",
    "info":"ErrorBox[boxes] is a low-level box construct that represents boxes that cannot be interpreted in inp"
  },
  {
    "label":"ErrorBoxOptions",
    "type":"keyword",
    "info":"System`ErrorBoxOptions"
  },
  {
    "label":"ErrorNorm",
    "type":"keyword",
    "info":"System`ErrorNorm"
  },
  {
    "label":"ErrorPacket",
    "type":"keyword",
    "info":"System`ErrorPacket"
  },
  {
    "label":"ErrorsDialogSettings",
    "type":"keyword",
    "info":"System`ErrorsDialogSettings"
  },
  {
    "label":"EscapeRadius",
    "type":"keyword",
    "info":"EscapeRadius is an option to MandelbrotSetPlot that specifies the criterion to use to decide that a "
  },
  {
    "label":"EstimatedBackground",
    "type":"keyword",
    "info":"EstimatedBackground[data] estimates the background of data.EstimatedBackground[data, Ï] tries to pre"
  },
  {
    "label":"EstimatedDistribution",
    "type":"keyword",
    "info":"EstimatedDistribution[data, dist] estimates the parametric distribution dist from data.EstimatedDist"
  },
  {
    "label":"EstimatedPointProcess",
    "type":"keyword",
    "info":"EstimatedPointProcess[pdata, pproc] estimates the parametric point process pproc from point data pda"
  },
  {
    "label":"EstimatedProcess",
    "type":"keyword",
    "info":"EstimatedProcess[data, proc] estimates the parametric process proc from data.EstimatedProcess[data, "
  },
  {
    "label":"EstimatedVariogramModel",
    "type":"keyword",
    "info":"EstimatedVariogramModel[{loc  ï¢ val , loc  ï¢ val , â¦}] estimates the best variogram function from va"
  },
  {
    "label":"EstimatorGains",
    "type":"keyword",
    "info":"EstimatorGains[ssm, {p , p , â¦, p }] gives the estimator gain matrix for the StateSpaceModel ssm, su"
  },
  {
    "label":"EstimatorRegulator",
    "type":"keyword",
    "info":"EstimatorRegulator[sspec, {l, Îº}] gives the output feedback controller with estimator and regulator "
  },
  {
    "label":"EuclideanDistance",
    "type":"keyword",
    "info":"EuclideanDistance[u, v] gives the Euclidean distance between vectors u and v."
  },
  {
    "label":"EulerAngles",
    "type":"keyword",
    "info":"EulerAngles[r] gives Euler angles {Î\\[PlusMinus], Î\.b2, Î\.b3} corresponding to the rotation matrix r.EulerAngles[r, {a"
  },
  {
    "label":"EulerCharacteristic",
    "type":"keyword",
    "info":"EulerCharacteristic[poly] gives the Euler characteristic of a poly."
  },
  {
    "label":"EulerE",
    "type":"keyword",
    "info":"EulerE[n] gives the Euler number E . EulerE[n, x] gives the Euler polynomial E (x). \n               "
  },
  {
    "label":"EulerGamma",
    "type":"keyword",
    "info":"EulerGamma is Eulerâs constant Î\.b3, with numerical value â 0.577216. "
  },
  {
    "label":"EulerianGraphQ",
    "type":"keyword",
    "info":"EulerianGraphQ[g] yields True if the graph g is Eulerian, and False otherwise."
  },
  {
    "label":"EulerMatrix",
    "type":"keyword",
    "info":"EulerMatrix[{Î\\[PlusMinus], Î\.b2, Î\.b3}] gives the Euler 3D rotation matrix formed by rotating by Î\\[PlusMinus] around the current"
  },
  {
    "label":"EulerPhi",
    "type":"keyword",
    "info":"EulerPhi[n] gives the Euler totient function Ï(n). "
  },
  {
    "label":"Evaluatable",
    "type":"keyword",
    "info":"Evaluatable is an option for Cell that specifies whether a cell should be used as input to be evalua"
  },
  {
    "label":"Evaluate",
    "type":"keyword",
    "info":"Evaluate[expr] causes expr to be evaluated even if it appears as the argument of a function whose at"
  },
  {
    "label":"Evaluated",
    "type":"keyword",
    "info":"System`Evaluated"
  },
  {
    "label":"EvaluatePacket",
    "type":"keyword",
    "info":"EvaluatePacket[expr] is a WSTP packet requesting evaluation of expr."
  },
  {
    "label":"EvaluateScheduledTask",
    "type":"keyword",
    "info":"EvaluateScheduledTask[expr] triggers immediate local execution of the specified task object."
  },
  {
    "label":"EvaluationBox",
    "type":"keyword",
    "info":"EvaluationBox[] returns a BoxObject corresponding to the box structure in which this function is bei"
  },
  {
    "label":"EvaluationCell",
    "type":"keyword",
    "info":"EvaluationCell[] returns a CellObject corresponding to the cell in which this function is being eval"
  },
  {
    "label":"EvaluationCompletionAction",
    "type":"keyword",
    "info":"EvaluationCompletionAction is an option for notebooks that specifies the action taken when an evalua"
  },
  {
    "label":"EvaluationData",
    "type":"keyword",
    "info":"EvaluationData[expr] gives an association containing the result of evaluating expr and metadata abou"
  },
  {
    "label":"EvaluationElements",
    "type":"keyword",
    "info":"EvaluationElements is an option for NotebookEvaluate that determines which cells to evaluate."
  },
  {
    "label":"EvaluationEnvironment",
    "type":"keyword",
    "info":"EvaluationEnvironment is an option for functions such as InitializationValue and InitializationObjec"
  },
  {
    "label":"EvaluationMode",
    "type":"keyword",
    "info":"System`EvaluationMode"
  },
  {
    "label":"EvaluationMonitor",
    "type":"keyword",
    "info":"EvaluationMonitor is an option for various numerical computation and plotting functions that gives a"
  },
  {
    "label":"EvaluationNotebook",
    "type":"keyword",
    "info":"EvaluationNotebook[] gives the notebook in which this function is being evaluated. "
  },
  {
    "label":"EvaluationObject",
    "type":"keyword",
    "info":"EvaluationObject[n, expr, â¦] represents an expression submitted for evaluation on any available para"
  },
  {
    "label":"EvaluationOrder",
    "type":"keyword",
    "info":"System`EvaluationOrder"
  },
  {
    "label":"EvaluationPrivileges",
    "type":"keyword",
    "info":"EvaluationPrivileges is an option for CloudObject and related cloud functions that specifies what ot"
  },
  {
    "label":"EvaluationRateLimit",
    "type":"keyword",
    "info":"System`EvaluationRateLimit"
  },
  {
    "label":"Evaluator",
    "type":"keyword",
    "info":"Evaluator is an option for objects such as Button, Dynamic, and Cell that gives the name of the kern"
  },
  {
    "label":"EvaluatorNames",
    "type":"keyword",
    "info":"EvaluatorNames is a global option that specifies the kernels that are currently configured to perfor"
  },
  {
    "label":"EvenQ",
    "type":"keyword",
    "info":"EvenQ[expr] gives True if expr is an even integer, and False otherwise. "
  },
  {
    "label":"EventData",
    "type":"keyword",
    "info":"EventData[{e , e , â¦}] represents event data with explicitly specified censoring e .EventData[{e , e"
  },
  {
    "label":"EventEvaluator",
    "type":"keyword",
    "info":"System`EventEvaluator"
  },
  {
    "label":"EventHandler",
    "type":"keyword",
    "info":"EventHandler[expr, {event  :> action , event  :> action , â¦}] displays as expr, evaluating action  w"
  },
  {
    "label":"EventHandlerTag",
    "type":"keyword",
    "info":"System`EventHandlerTag"
  },
  {
    "label":"EventLabels",
    "type":"keyword",
    "info":"EventLabels is an option to CandlestickChart, KagiChart, and similar functions that specifies events"
  },
  {
    "label":"EventSeries",
    "type":"keyword",
    "info":"EventSeries[{{t , v }, {t , v } â¦}] represents a series of events given as time-value pairs {t , v }"
  },
  {
    "label":"ExactBlackmanWindow",
    "type":"keyword",
    "info":"ExactBlackmanWindow[x] represents an exact Blackman window function of x."
  },
  {
    "label":"ExactNumberQ",
    "type":"keyword",
    "info":"ExactNumberQ[expr] returns True if expr is an exact real or complex number, and returns False otherw"
  },
  {
    "label":"ExactRootIsolation",
    "type":"keyword",
    "info":"ExactRootIsolation is an option for Root, which specifies whether exact isolating intervals rather t"
  },
  {
    "label":"ExampleData",
    "type":"keyword",
    "info":"ExampleData[\"type\"] gives a list of names of examples of the specified type.ExampleData[{\"type\", \"na"
  },
  {
    "label":"Except",
    "type":"keyword",
    "info":"Except[c] is a pattern object which represents any expression except one that matches c. Except[c, p"
  },
  {
    "label":"ExcludedContexts",
    "type":"keyword",
    "info":"ExcludedContexts is an option for FullDefinition, Manipulate and related symbols that gives contexts"
  },
  {
    "label":"ExcludedForms",
    "type":"keyword",
    "info":"ExcludedForms is an option that gives a list of patterns for expressions that should be excluded fro"
  },
  {
    "label":"ExcludedLines",
    "type":"keyword",
    "info":"ExcludedLines is an option for SemanticImport and related functions that specifies which lines shoul"
  },
  {
    "label":"ExcludedPhysicalQuantities",
    "type":"keyword",
    "info":"ExcludedPhysicalQuantities is an option for FormulaLookup that specifies physical quantities that sh"
  },
  {
    "label":"ExcludePods",
    "type":"keyword",
    "info":"ExcludePods is an option to WolframAlpha that specifies pod IDs to exclude from the results."
  },
  {
    "label":"Exclusions",
    "type":"keyword",
    "info":"Exclusions is an option that specifies where to exclude in regions used by functions like Plot, Plot"
  },
  {
    "label":"ExclusionsStyle",
    "type":"keyword",
    "info":"ExclusionsStyle is an option to plotting functions that specifies how to render subregions excluded "
  },
  {
    "label":"Exists",
    "type":"keyword",
    "info":"Exists[x, expr] represents the statement that there exists a value of x for which expr is True. Exis"
  },
  {
    "label":"Exit",
    "type":"keyword",
    "info":"Exit[] terminates a Wolfram Language kernel session. "
  },
  {
    "label":"ExitDialog",
    "type":"keyword",
    "info":"System`ExitDialog"
  },
  {
    "label":"ExoplanetData",
    "type":"keyword",
    "info":"ExoplanetData[entity, property] gives the value of the specified property for the exoplanet entity.E"
  },
  {
    "label":"Exp",
    "type":"keyword",
    "info":"Exp[z] gives the exponential of z. "
  },
  {
    "label":"Expand",
    "type":"keyword",
    "info":"Expand[expr] expands out products and positive integer powers in expr. Expand[expr, patt] leaves une"
  },
  {
    "label":"ExpandAll",
    "type":"keyword",
    "info":"ExpandAll[expr] expands out all products and integer powers in any part of expr. ExpandAll[expr, pat"
  },
  {
    "label":"ExpandDenominator",
    "type":"keyword",
    "info":"ExpandDenominator[expr] expands out products and powers that appear as denominators in expr. "
  },
  {
    "label":"ExpandFileName",
    "type":"keyword",
    "info":"ExpandFileName[\"name\"] textually expands name to have the form of an absolute file name for your ope"
  },
  {
    "label":"ExpandNumerator",
    "type":"keyword",
    "info":"ExpandNumerator[expr] expands out products and powers that appear in the numerator of expr. "
  },
  {
    "label":"Expectation",
    "type":"keyword",
    "info":"Expectation[expr, x ï dist] gives the expectation of expr under the assumption that x follows the pr"
  },
  {
    "label":"ExpectationE",
    "type":"keyword",
    "info":"System`ExpectationE"
  },
  {
    "label":"ExpectedValue",
    "type":"keyword",
    "info":"ExpectedValue[f, list] gives the expected value of the pure function f with respect to the values in"
  },
  {
    "label":"ExpGammaDistribution",
    "type":"keyword",
    "info":"ExpGammaDistribution[Îº, Î¸, Î¼] represents an exp-gamma distribution with shape parameter Îº, scale par"
  },
  {
    "label":"ExpIntegralE",
    "type":"keyword",
    "info":"ExpIntegralE[n, z] gives the exponential integral function E (z).\n                                  "
  },
  {
    "label":"ExpIntegralEi",
    "type":"keyword",
    "info":"ExpIntegralEi[z] gives the exponential integral function Ei(z). "
  },
  {
    "label":"ExpirationDate",
    "type":"keyword",
    "info":"ExpirationDate is an option for various functions that specifies when a persistent value should be t"
  },
  {
    "label":"Exponent",
    "type":"keyword",
    "info":"Exponent[expr, form] gives the maximum power with which form appears in the expanded form of expr. E"
  },
  {
    "label":"ExponentFunction",
    "type":"keyword",
    "info":"ExponentFunction is an option for NumberForm and related functions that determines the exponent to u"
  },
  {
    "label":"ExponentialDistribution",
    "type":"keyword",
    "info":"ExponentialDistribution[Î»] represents an exponential distribution with scale inversely proportional "
  },
  {
    "label":"ExponentialFamily",
    "type":"keyword",
    "info":"ExponentialFamily is an option for GeneralizedLinearModelFit that specifies the exponential family f"
  },
  {
    "label":"ExponentialGeneratingFunction",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"ExponentialMovingAverage",
    "type":"keyword",
    "info":"ExponentialMovingAverage[list, Î\\[PlusMinus]] gives the exponential moving average of list with smoothing consta"
  },
  {
    "label":"ExponentialPowerDistribution",
    "type":"keyword",
    "info":"ExponentialPowerDistribution[Îº, Î¼, Ï] represents an exponential power distribution with shape parame"
  },
  {
    "label":"ExponentPosition",
    "type":"keyword",
    "info":"ExponentPosition is an option for RadicalBox that specifies the placement of the index outside a rad"
  },
  {
    "label":"ExponentStep",
    "type":"keyword",
    "info":"ExponentStep is an option for NumberForm and related functions that determines in what steps exponen"
  },
  {
    "label":"Export",
    "type":"keyword",
    "info":"Export[\"dest.ext\", expr] exports data to a file, converting it to the format corresponding to the fi"
  },
  {
    "label":"ExportAutoReplacements",
    "type":"keyword",
    "info":"ExportAutoReplacements is an option for cells that specifies which replacement rules the Wolfram Lan"
  },
  {
    "label":"ExportByteArray",
    "type":"keyword",
    "info":"ExportByteArray[expr, \"format\"] generates a ByteArray object corresponding to expr exported in the s"
  },
  {
    "label":"ExportForm",
    "type":"keyword",
    "info":"ExportForm[expr, \"fmt\"] specifies that expr should be exported in the specified format in functions "
  },
  {
    "label":"ExportPacket",
    "type":"keyword",
    "info":"System`ExportPacket"
  },
  {
    "label":"ExportString",
    "type":"keyword",
    "info":"ExportString[expr, \"format\"] generates a string corresponding to expr exported in the specified form"
  },
  {
    "label":"Expression",
    "type":"keyword",
    "info":"Expression is a symbol that represents an ordinary Wolfram Language expression in Read and related f"
  },
  {
    "label":"ExpressionCell",
    "type":"keyword",
    "info":"ExpressionCell[expr] gives an expression cell that can appear in a Wolfram System notebook.Expressio"
  },
  {
    "label":"ExpressionGraph",
    "type":"keyword",
    "info":"ExpressionGraph[expr] gives the tree graph with different levels at different depths. ExpressionGrap"
  },
  {
    "label":"ExpressionPacket",
    "type":"keyword",
    "info":"System`ExpressionPacket"
  },
  {
    "label":"ExpressionTree",
    "type":"keyword",
    "info":"ExpressionTree[expr] gives a Tree object from the structure of the expression expr.ExpressionTree[ex"
  },
  {
    "label":"ExpressionUUID",
    "type":"keyword",
    "info":"ExpressionUUID is an option for Cell and Notebook that holds the assigned unique UUID string."
  },
  {
    "label":"ExpToTrig",
    "type":"keyword",
    "info":"ExpToTrig[expr] converts exponentials in expr to trigonometric functions. "
  },
  {
    "label":"ExtendedEntityClass",
    "type":"keyword",
    "info":"ExtendedEntityClass[class, \"name\" ï¢ f] represents an entity class derived from class by adding a new"
  },
  {
    "label":"ExtendedGCD",
    "type":"keyword",
    "info":"ExtendedGCD[n , n , â¦] gives the extended greatest common divisor of the integers n . \n             "
  },
  {
    "label":"Extension",
    "type":"keyword",
    "info":"Extension is an option for various polynomial and algebraic functions that specifies generators for "
  },
  {
    "label":"ExtentElementFunction",
    "type":"keyword",
    "info":"ExtentElementFunction is an option to DiscretePlot and DiscretePlot3D that gives a function to use t"
  },
  {
    "label":"ExtentMarkers",
    "type":"keyword",
    "info":"ExtentMarkers is an option to DiscretePlot and DiscretePlot3D that specifies markers to draw at exte"
  },
  {
    "label":"ExtentSize",
    "type":"keyword",
    "info":"ExtentSize is an option to DiscretePlot and DiscretePlot3D that specifies how far to extend out from"
  },
  {
    "label":"ExternalBundle",
    "type":"keyword",
    "info":"ExternalBundle[{name  ï¢ obj , name  ï¢ obj , â¦}] represents a bundle of resources to be externally de"
  },
  {
    "label":"ExternalCall",
    "type":"keyword",
    "info":"System`ExternalCall"
  },
  {
    "label":"ExternalDataCharacterEncoding",
    "type":"keyword",
    "info":"ExternalDataCharacterEncoding is a global option that specifies the character encoding used in readi"
  },
  {
    "label":"ExternalEvaluate",
    "type":"keyword",
    "info":"ExternalEvaluate[\"sys\", \"cmd\"] evaluates the command cmd in the external evaluator sys, returning an"
  },
  {
    "label":"ExternalFunction",
    "type":"keyword",
    "info":"ExternalFunction[sys, \"f\"] represents an external function named \"f\" defined in the external evaluat"
  },
  {
    "label":"ExternalFunctionName",
    "type":"keyword",
    "info":"System`ExternalFunctionName"
  },
  {
    "label":"ExternalIdentifier",
    "type":"keyword",
    "info":"ExternalIdentifier[\"type\", id] represents a resource identified by id in the external identifier sys"
  },
  {
    "label":"ExternalObject",
    "type":"keyword",
    "info":"ExternalObject[â¦] represents an external object inside an ExternalSessionObject."
  },
  {
    "label":"ExternalOptions",
    "type":"keyword",
    "info":"ExternalOptions is an option for EmbedCode and related functions that gives options specific to the "
  },
  {
    "label":"ExternalSessionObject",
    "type":"keyword",
    "info":"ExternalSessionObject[â¦] represents an external session started by StartExternalSession for use with"
  },
  {
    "label":"ExternalSessions",
    "type":"keyword",
    "info":"ExternalSessions[] gives the list of currently active external evaluator sessions.ExternalSessions[s"
  },
  {
    "label":"ExternalStorageBase",
    "type":"keyword",
    "info":"ExternalStorageBase is an option for various external storage functions that specifies which externa"
  },
  {
    "label":"ExternalStorageDownload",
    "type":"keyword",
    "info":"ExternalStorageDownload[location] downloads content from the specified location.ExternalStorageDownl"
  },
  {
    "label":"ExternalStorageGet",
    "type":"keyword",
    "info":"ExternalStorageGet[ExternalStorageObject[â¦]] reads in an expression stored at an external storage sp"
  },
  {
    "label":"ExternalStorageObject",
    "type":"keyword",
    "info":"ExternalStorageObject[location] represents a file stored in an external location.ExternalStorageObje"
  },
  {
    "label":"ExternalStoragePut",
    "type":"keyword",
    "info":"ExternalStoragePut[expr] writes expr to an external storage specified by $ExternalStorageBase.Extern"
  },
  {
    "label":"ExternalStorageUpload",
    "type":"keyword",
    "info":"ExternalStorageUpload[file] uploads file to an external storage specified by $ExternalStorageBase.Ex"
  },
  {
    "label":"ExternalTypeSignature",
    "type":"keyword",
    "info":"ExternalTypeSignature is an option for EmbedCode that gives rules specifying the mapping to external"
  },
  {
    "label":"ExternalValue",
    "type":"keyword",
    "info":"ExternalValue[sys, \"sym\"] gives the value of \"sym\" in external evaluator sys. ExternalValue[session,"
  },
  {
    "label":"Extract",
    "type":"keyword",
    "info":"Extract[expr, pos] extracts the part of expr at the position specified by pos. Extract[expr, {pos , "
  },
  {
    "label":"ExtractArchive",
    "type":"keyword",
    "info":"ExtractArchive[source] expands an archive file, saving its content into the current directory.Extrac"
  },
  {
    "label":"ExtractLayer",
    "type":"keyword",
    "info":"ExtractLayer[] represents a net layer that takes an array and a position specification as inputs and"
  },
  {
    "label":"ExtractPacletArchive",
    "type":"keyword",
    "info":"ExtractPacletArchive[file] extracts the contents of the paclet archive file into the directory in wh"
  },
  {
    "label":"ExtremeValueDistribution",
    "type":"keyword",
    "info":"ExtremeValueDistribution[Î\\[PlusMinus], Î\.b2] represents an extreme value distribution with location parameter Î\\[PlusMinus] an"
  },
  {
    "label":"E$",
    "type":"keyword",
    "info":"System`E$"
  },
  {
    "label":"FaceAlign",
    "type":"keyword",
    "info":"FaceAlign[image] attempts to find faces in image and align them.FaceAlign[image, fref] gives aligned"
  },
  {
    "label":"FaceForm",
    "type":"keyword",
    "info":"FaceForm[g] is a graphics directive which specifies that faces of polygons and other filled graphics"
  },
  {
    "label":"FaceGrids",
    "type":"keyword",
    "info":"FaceGrids is an option for three-dimensional graphics functions that specifies grid lines to draw on"
  },
  {
    "label":"FaceGridsStyle",
    "type":"keyword",
    "info":"FaceGridsStyle is an option for 3D graphics functions that specifies how face grids should be render"
  },
  {
    "label":"FaceRecognize",
    "type":"keyword",
    "info":"FaceRecognize[{example  ï¢ name , example  ï¢ name , â¦}] generates a ClassifierFunction[â¦] based on th"
  },
  {
    "label":"FacialFeatures",
    "type":"keyword",
    "info":"FacialFeatures[image] returns a minimal summary of facial features for all detected faces in image.F"
  },
  {
    "label":"Factor",
    "type":"keyword",
    "info":"Factor[poly] factors a polynomial over the integers. Factor[poly, Modulus ï¢ p] factors a polynomial "
  },
  {
    "label":"FactorComplete",
    "type":"keyword",
    "info":"System`FactorComplete"
  },
  {
    "label":"Factorial",
    "type":"keyword",
    "info":"n ! gives the factorial of n. "
  },
  {
    "label":"Factorial2",
    "type":"keyword",
    "info":"n !! gives the double factorial of n. "
  },
  {
    "label":"FactorialMoment",
    "type":"keyword",
    "info":"                                     th                                                             "
  },
  {
    "label":"FactorialMomentGeneratingFunction",
    "type":"keyword",
    "info":"FactorialMomentGeneratingFunction[dist, t] gives the factorial moment-generating function for the di"
  },
  {
    "label":"FactorialPower",
    "type":"keyword",
    "info":"                                                (n)                                                 "
  },
  {
    "label":"FactorInteger",
    "type":"keyword",
    "info":"FactorInteger[n] gives a list of the prime factors of the integer n, together with their exponents. "
  },
  {
    "label":"FactorList",
    "type":"keyword",
    "info":"FactorList[poly] gives a list of the factors of a polynomial, together with their exponents. "
  },
  {
    "label":"FactorSquareFree",
    "type":"keyword",
    "info":"FactorSquareFree[poly] pulls out any multiple factors in a polynomial. "
  },
  {
    "label":"FactorSquareFreeList",
    "type":"keyword",
    "info":"FactorSquareFreeList[poly] gives a list of squareâfree factors of a polynomial, together with their "
  },
  {
    "label":"FactorTerms",
    "type":"keyword",
    "info":"FactorTerms[poly] pulls out any overall numerical factor in poly. FactorTerms[poly, x] pulls out any"
  },
  {
    "label":"FactorTermsList",
    "type":"keyword",
    "info":"FactorTermsList[poly] gives a list in which the first element is the overall numerical factor in pol"
  },
  {
    "label":"Fail",
    "type":"keyword",
    "info":"System`Fail"
  },
  {
    "label":"Failure",
    "type":"keyword",
    "info":"Failure[\"tag\", assoc] represents a failure of a type indicated by tag, with details given by the ass"
  },
  {
    "label":"FailureAction",
    "type":"keyword",
    "info":"FailureAction is an option to Query and related functions that determines what should happen when a "
  },
  {
    "label":"FailureDistribution",
    "type":"keyword",
    "info":"FailureDistribution[bexpr, {{x , dist }, {x , dist }, â¦}] represents the failure distribution for a "
  },
  {
    "label":"FailureQ",
    "type":"keyword",
    "info":"FailureQ[expr] gives True if expr has head Failure or is equal to $Failed or $Aborted."
  },
  {
    "label":"False",
    "type":"keyword",
    "info":"False is the symbol for the Boolean value false. "
  },
  {
    "label":"FareySequence",
    "type":"keyword",
    "info":"                                                                                         th\nFareySeq"
  },
  {
    "label":"FARIMAProcess",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"FeatureDistance",
    "type":"keyword",
    "info":"FeatureDistance[example , example , extractor] gives the distance between example  and example  in t"
  },
  {
    "label":"FeatureExtract",
    "type":"keyword",
    "info":"FeatureExtract[{example , example , â¦}] extracts features for each of the example  using a feature e"
  },
  {
    "label":"FeatureExtraction",
    "type":"keyword",
    "info":"FeatureExtraction[{example , example , â¦}] generates a FeatureExtractorFunction[â¦] trained from the "
  },
  {
    "label":"FeatureExtractor",
    "type":"keyword",
    "info":"FeatureExtractor is an option for functions such as Classify that specifies how features should be e"
  },
  {
    "label":"FeatureExtractorFunction",
    "type":"keyword",
    "info":"FeatureExtractorFunction[â¦] represents a feature extractor function generated by FeatureExtraction."
  },
  {
    "label":"FeatureNames",
    "type":"keyword",
    "info":"FeatureNames is an option for machine learning functions such as Classify or Predict that specifies "
  },
  {
    "label":"FeatureNearest",
    "type":"keyword",
    "info":"FeatureNearest[{elem , elem , â¦}, x] gives the list of elem  to which x is nearest in a computed fea"
  },
  {
    "label":"FeatureSpacePlot",
    "type":"keyword",
    "info":"FeatureSpacePlot[{example , example , â¦}] plots features extracted from the example  as a scatter pl"
  },
  {
    "label":"FeatureSpacePlot3D",
    "type":"keyword",
    "info":"FeatureSpacePlot3D[{example , example , â¦}] plots features extracted from the example  as a scatter "
  },
  {
    "label":"FeatureTypes",
    "type":"keyword",
    "info":"FeatureTypes is an option for machine learning functions such as Classify or Predict that specifies "
  },
  {
    "label":"FEDisableConsolePrintPacket",
    "type":"keyword",
    "info":"System`FEDisableConsolePrintPacket"
  },
  {
    "label":"FeedbackLinearize",
    "type":"keyword",
    "info":"FeedbackLinearize[asys] input-output linearizes the AffineStateSpaceModel asys by state transformati"
  },
  {
    "label":"FeedbackSector",
    "type":"keyword",
    "info":"FeedbackSector is an option to NyquistPlot that specifies the sector limits of the nonlinearity in t"
  },
  {
    "label":"FeedbackSectorStyle",
    "type":"keyword",
    "info":"FeedbackSectorStyle is an option to NyquistPlot that specifies the style in which graphics of Feedba"
  },
  {
    "label":"FeedbackType",
    "type":"keyword",
    "info":"FeedbackType is an option for some control system functions that specifies the feedback type."
  },
  {
    "label":"FEEnableConsolePrintPacket",
    "type":"keyword",
    "info":"System`FEEnableConsolePrintPacket"
  },
  {
    "label":"FetalGrowthData",
    "type":"keyword",
    "info":"FetalGrowthData[age] returns the values for all properties of fetal development for the specified ag"
  },
  {
    "label":"Fibonacci",
    "type":"keyword",
    "info":"Fibonacci[n] gives the Fibonacci number F . Fibonacci[n, x] gives the Fibonacci polynomial F (x). \n "
  },
  {
    "label":"Fibonorial",
    "type":"keyword",
    "info":"Fibonorial[n] gives the fibonorial n ! .\n                                      F"
  },
  {
    "label":"FieldCompletionFunction",
    "type":"keyword",
    "info":"FieldCompletionFunction is an option for InputField that specifies a function to apply to the input "
  },
  {
    "label":"FieldHint",
    "type":"keyword",
    "info":"FieldHint is an option for InputField that specifies contents to display when the input field is emp"
  },
  {
    "label":"FieldHintStyle",
    "type":"keyword",
    "info":"FieldHintStyle is an option for InputField that specifies the style to use for displaying the field "
  },
  {
    "label":"FieldMasked",
    "type":"keyword",
    "info":"FieldMasked is an option to InputField that determines whether to mask user input."
  },
  {
    "label":"FieldSize",
    "type":"keyword",
    "info":"FieldSize is an option for InputField, PopupMenu, and related functions that specifies the size of t"
  },
  {
    "label":"File",
    "type":"keyword",
    "info":"File[\"path\"] is a symbolic representation of a location in the local file system. "
  },
  {
    "label":"FileBaseName",
    "type":"keyword",
    "info":"FileBaseName[\"file\"] gives the base name for a file without its extension."
  },
  {
    "label":"FileByteCount",
    "type":"keyword",
    "info":"FileByteCount[file] gives the number of bytes in a file. "
  },
  {
    "label":"FileConvert",
    "type":"keyword",
    "info":"FileConvert[source ï¢ \"dest.ext\"] converts the contents of source to the format defined by the extens"
  },
  {
    "label":"FileDate",
    "type":"keyword",
    "info":"FileDate[\"file\"] gives the date and time at which a file was last modified. FileDate[\"file\", \"type\"]"
  },
  {
    "label":"FileExistsQ",
    "type":"keyword",
    "info":"FileExistsQ[\"name\"] gives True if the file with the specified name exists, and gives False otherwise"
  },
  {
    "label":"FileExtension",
    "type":"keyword",
    "info":"FileExtension[\"file\"] gives the file extension for a file name."
  },
  {
    "label":"FileFormat",
    "type":"keyword",
    "info":"FileFormat[source] attempts to determine what Import format could be used to import the file corresp"
  },
  {
    "label":"FileFormatProperties",
    "type":"keyword",
    "info":"FileFormatProperties[\"fmt\"] returns an association of properties for the specified format \"fmt\".File"
  },
  {
    "label":"FileFormatQ",
    "type":"keyword",
    "info":"FileFormatQ[source, \"fmt\"] gives True if the file corresponding to source might be imported as forma"
  },
  {
    "label":"FileHandler",
    "type":"keyword",
    "info":"System`FileHandler"
  },
  {
    "label":"FileHash",
    "type":"keyword",
    "info":"FileHash[file] gives an integer hash code for the contents of the specified file.FileHash[file, \"typ"
  },
  {
    "label":"FileInformation",
    "type":"keyword",
    "info":"System`FileInformation"
  },
  {
    "label":"FileName",
    "type":"keyword",
    "info":"System`FileName"
  },
  {
    "label":"FileNameDepth",
    "type":"keyword",
    "info":"FileNameDepth[\"name\"] gives the number of path elements in the file name \"file\"."
  },
  {
    "label":"FileNameDialogSettings",
    "type":"keyword",
    "info":"FileNameDialogSettings is a global option that specifies settings for the Insert File Path dialog bo"
  },
  {
    "label":"FileNameDrop",
    "type":"keyword",
    "info":"FileNameDrop[\"name\", n] drops the first n path elements in the file name \"name\".FileNameDrop[\"name\","
  },
  {
    "label":"FileNameForms",
    "type":"keyword",
    "info":"FileNameForms is an option that specifies the pattern for file names to be selected by a function."
  },
  {
    "label":"FileNameJoin",
    "type":"keyword",
    "info":"FileNameJoin[{name , name , â¦}] joins the name  together into a file name suitable for your current "
  },
  {
    "label":"FileNames",
    "type":"keyword",
    "info":"FileNames[] lists all files in the current working directory. FileNames[form] lists all files in the"
  },
  {
    "label":"FileNameSetter",
    "type":"keyword",
    "info":"FileNameSetter[name] represents a file name setter which displays as a Browse button and when clicke"
  },
  {
    "label":"FileNameSplit",
    "type":"keyword",
    "info":"FileNameSplit[\"name\"] splits a file name into a list of parts."
  },
  {
    "label":"FileNameTake",
    "type":"keyword",
    "info":"FileNameTake[\"name\"] gives the last path element in the file name \"name\".FileNameTake[\"name\", n] giv"
  },
  {
    "label":"FileNameToFormatList",
    "type":"keyword",
    "info":"FileNameToFormatList[] returns lists of file formats corresponding to all registered file name patte"
  },
  {
    "label":"FilePrint",
    "type":"keyword",
    "info":"FilePrint[\"file\"] prints out the raw textual contents of file.FilePrint[\"file\", n] prints out the fi"
  },
  {
    "label":"FileSize",
    "type":"keyword",
    "info":"FileSize[file] gives the size of a file as a quantity."
  },
  {
    "label":"FileSystemMap",
    "type":"keyword",
    "info":"FileSystemMap[f, root] gives an association whose keys are the names of files in root, and whose val"
  },
  {
    "label":"FileSystemScan",
    "type":"keyword",
    "info":"FileSystemScan[f, root] evaluates f on all files contained in root.FileSystemScan[f, root, n] restri"
  },
  {
    "label":"FileTemplate",
    "type":"keyword",
    "info":"FileTemplate[\"file\"] yields a TemplateObject expression that represents a file template to be applie"
  },
  {
    "label":"FileTemplateApply",
    "type":"keyword",
    "info":"FileTemplateApply[template] applies a template, evaluating all template elements it contains, and th"
  },
  {
    "label":"FileType",
    "type":"keyword",
    "info":"FileType[\"file\"] gives the type of a file, typically File, Directory, or None. "
  },
  {
    "label":"FilledCurve",
    "type":"keyword",
    "info":"FilledCurve[{segment , segment , â¦}] represents a filled curve consisting of segment  followed by se"
  },
  {
    "label":"FilledCurveBox",
    "type":"keyword",
    "info":"System`FilledCurveBox"
  },
  {
    "label":"FilledCurveBoxOptions",
    "type":"keyword",
    "info":"FilledCurveBoxOptions ï¢ {opt  ï¢ val , opt  ï¢ val , â¦} is an option that specifies settings for Fille"
  },
  {
    "label":"FilledTorus",
    "type":"keyword",
    "info":"FilledTorus[{x, y, z}, {r     , r     }] represents a filled torus centered at {x, y, z} with inner "
  },
  {
    "label":"FillForm",
    "type":"keyword",
    "info":"System`FillForm"
  },
  {
    "label":"Filling",
    "type":"keyword",
    "info":"Filling is an option for ListPlot, Plot, Plot3D, and related functions that specifies what filling t"
  },
  {
    "label":"FillingStyle",
    "type":"keyword",
    "info":"FillingStyle is an option for ListPlot, Plot, Plot3D, and related functions that specifies the defau"
  },
  {
    "label":"FillingTransform",
    "type":"keyword",
    "info":"FillingTransform[image] gives a version of image with all extended minima filled.FillingTransform[im"
  },
  {
    "label":"FilteredEntityClass",
    "type":"keyword",
    "info":"FilteredEntityClass[class, f] represents a class of entities where only entities for which the Entit"
  },
  {
    "label":"FilterRules",
    "type":"keyword",
    "info":"FilterRules[rules, patt] filters the list rules by picking out only those rules whose left-hand side"
  },
  {
    "label":"FinancialBond",
    "type":"keyword",
    "info":"FinancialBond[params, ambientparams] gives the value of a financial bond instrument.FinancialBond[pa"
  },
  {
    "label":"FinancialData",
    "type":"keyword",
    "info":"FinancialData[\"name\"] gives the last known price or value for the financial entity specified by \"nam"
  },
  {
    "label":"FinancialDerivative",
    "type":"keyword",
    "info":"FinancialDerivative[instrument, params, ambientparams] gives the value of the specified financial in"
  },
  {
    "label":"FinancialIndicator",
    "type":"keyword",
    "info":"FinancialIndicator[\"ind\", par , par , â¦] represents a financial indicator \"ind\" with parameters par "
  },
  {
    "label":"Find",
    "type":"keyword",
    "info":"Find[stream, \"text\"] finds the first line in an input stream that contains the specified string. Fin"
  },
  {
    "label":"FindAnomalies",
    "type":"keyword",
    "info":"FindAnomalies[{example , example , â¦}] gives a list of the example  that are considered anomalous wi"
  },
  {
    "label":"FindArgMax",
    "type":"keyword",
    "info":"FindArgMax[f, x] gives the position x    of a local maximum of f.FindArgMax[f, {x, x }] gives the po"
  },
  {
    "label":"FindArgMin",
    "type":"keyword",
    "info":"FindArgMin[f, x] gives the position x    of a local minimum of f.FindArgMin[f, {x, x }] gives the po"
  },
  {
    "label":"FindChannels",
    "type":"keyword",
    "info":"FindChannels[] gives a list of channels in your home area on the channel broker server.FindChannels["
  },
  {
    "label":"FindClique",
    "type":"keyword",
    "info":"FindClique[g] finds a largest clique in the graph g.FindClique[g, n] finds a clique containing at mo"
  },
  {
    "label":"FindClusters",
    "type":"keyword",
    "info":"FindClusters[{e , e , â¦}] partitions the e  into clusters of similar elements. FindClusters[{e  ï¢ v "
  },
  {
    "label":"FindCookies",
    "type":"keyword",
    "info":"FindCookies[] gives a list of all currently set cookies.FindCookies[domain] gives a list of cookies "
  },
  {
    "label":"FindCurvePath",
    "type":"keyword",
    "info":"FindCurvePath[{{x , y }, {x , y }, â¦}] gives an ordering of the {x , y } that corresponds to one or "
  },
  {
    "label":"FindCycle",
    "type":"keyword",
    "info":"FindCycle[g] finds a cycle in the graph g.FindCycle[g, k] finds a cycle of length at most k in the g"
  },
  {
    "label":"FindDevices",
    "type":"keyword",
    "info":"FindDevices[] searches for available devices on your computer system.FindDevices[form] gives a list "
  },
  {
    "label":"FindDistribution",
    "type":"keyword",
    "info":"FindDistribution[data] finds a simple functional form to fit the distribution of data.FindDistributi"
  },
  {
    "label":"FindDistributionParameters",
    "type":"keyword",
    "info":"FindDistributionParameters[data, dist] finds the parameter estimates for the distribution dist from "
  },
  {
    "label":"FindDivisions",
    "type":"keyword",
    "info":"FindDivisions[{x   , x   }, n] finds a list of about n \"nice\" numbers that divide the interval aroun"
  },
  {
    "label":"FindEdgeColoring",
    "type":"keyword",
    "info":"FindEdgeColoring[g] finds a coloring with minimal size for the edges in the graph g.FindEdgeColoring"
  },
  {
    "label":"FindEdgeCover",
    "type":"keyword",
    "info":"FindEdgeCover[g] finds an edge cover of the graph g with a minimum number of edges.FindEdgeCover[{v "
  },
  {
    "label":"FindEdgeCut",
    "type":"keyword",
    "info":"FindEdgeCut[g] finds a smallest edge cut of the graph g.FindEdgeCut[g, s, t] finds a smallest s-t ed"
  },
  {
    "label":"FindEdgeIndependentPaths",
    "type":"keyword",
    "info":"FindEdgeIndependentPaths[g, s, t, k] finds at most k edge-independent paths from vertex s to vertex "
  },
  {
    "label":"FindEquationalProof",
    "type":"keyword",
    "info":"FindEquationalProof[thm, axms] tries to find an equational proof of the symbolic theorem thm using t"
  },
  {
    "label":"FindEulerianCycle",
    "type":"keyword",
    "info":"FindEulerianCycle[g] finds an Eulerian cycle in the graph g.FindEulerianCycle[g, k] finds at most k "
  },
  {
    "label":"FindExternalEvaluators",
    "type":"keyword",
    "info":"FindExternalEvaluators[] finds installed external evaluators that can be used with ExternalEvaluate,"
  },
  {
    "label":"FindFaces",
    "type":"keyword",
    "info":"FindFaces[image] attempts to find human faces in image and returns a list of bounding boxes.FindFace"
  },
  {
    "label":"FindFile",
    "type":"keyword",
    "info":"FindFile[name] finds the file with the specified name that would be loaded by Get[name] and related "
  },
  {
    "label":"FindFit",
    "type":"keyword",
    "info":"FindFit[data, expr, pars, vars] finds numerical values of the parameters pars that make expr give a "
  },
  {
    "label":"FindFormula",
    "type":"keyword",
    "info":"FindFormula[data] finds a pure function that approximates data.FindFormula[data, x] finds a symbolic"
  },
  {
    "label":"FindFundamentalCycles",
    "type":"keyword",
    "info":"FindFundamentalCycles[g] finds fundamental cycles of the graph g."
  },
  {
    "label":"FindGeneratingFunction",
    "type":"keyword",
    "info":"                                                                                                  th"
  },
  {
    "label":"FindGeoLocation",
    "type":"keyword",
    "info":"FindGeoLocation[] attempts to find the current geo location of your computer.FindGeoLocation[\"ip\"] g"
  },
  {
    "label":"FindGeometricConjectures",
    "type":"keyword",
    "info":"FindGeometricConjectures[scene] finds conjectures that appear to hold for the GeometricScene object "
  },
  {
    "label":"FindGeometricTransform",
    "type":"keyword",
    "info":"FindGeometricTransform[pts , pts ] finds a geometric transformation that aligns positions specified "
  },
  {
    "label":"FindGraphCommunities",
    "type":"keyword",
    "info":"FindGraphCommunities[g] finds communities in the graph g.FindGraphCommunities[{v ï¢ w, â¦}] uses rules"
  },
  {
    "label":"FindGraphIsomorphism",
    "type":"keyword",
    "info":"FindGraphIsomorphism[g , g ] finds an isomorphism that maps the graph g  to g  by renaming vertices."
  },
  {
    "label":"FindGraphPartition",
    "type":"keyword",
    "info":"FindGraphPartition[g] gives a partition of vertices of the graph g.FindGraphPartition[g, k] gives a "
  },
  {
    "label":"FindHamiltonianCycle",
    "type":"keyword",
    "info":"FindHamiltonianCycle[g] finds a Hamiltonian cycle in the graph g.FindHamiltonianCycle[g, k] finds at"
  },
  {
    "label":"FindHamiltonianPath",
    "type":"keyword",
    "info":"FindHamiltonianPath[g] finds a Hamiltonian path in the graph g with the smallest total length.FindHa"
  },
  {
    "label":"FindHiddenMarkovStates",
    "type":"keyword",
    "info":"FindHiddenMarkovStates[data, hmm] finds the most likely hidden states of the HiddenMarkovProcess hmm"
  },
  {
    "label":"FindImageText",
    "type":"keyword",
    "info":"FindImageText[image] detects text in image and returns a single bounding box.FindImageText[image, le"
  },
  {
    "label":"FindIndependentEdgeSet",
    "type":"keyword",
    "info":"FindIndependentEdgeSet[g] finds an independent edge set of the graph g with a maximum number of edge"
  },
  {
    "label":"FindIndependentVertexSet",
    "type":"keyword",
    "info":"FindIndependentVertexSet[g] finds an independent vertex set of the graph g with a maximum number of "
  },
  {
    "label":"FindInstance",
    "type":"keyword",
    "info":"FindInstance[expr, vars] finds an instance of vars that makes the statement expr be True. FindInstan"
  },
  {
    "label":"FindIntegerNullVector",
    "type":"keyword",
    "info":"FindIntegerNullVector[{x , x , â¦, x }] finds a list of integers a  such that a  x  + a  x  + â¯ + a  "
  },
  {
    "label":"FindIsomers",
    "type":"keyword",
    "info":"FindIsomers[chem] returns a list of molecules with the same chemical formula as chem.FindIsomers[che"
  },
  {
    "label":"FindIsomorphicSubgraph",
    "type":"keyword",
    "info":"FindIsomorphicSubgraph[g , g ] finds a subgraph of g  that is isomorphic to g .FindIsomorphicSubgrap"
  },
  {
    "label":"FindKClan",
    "type":"keyword",
    "info":"FindKClan[g, k] finds a largest k-clan in the graph g.FindKClan[g, k, n] finds a k-clan containing a"
  },
  {
    "label":"FindKClique",
    "type":"keyword",
    "info":"FindKClique[g, k] finds a largest k-clique in the graph g.FindKClique[g, k, n] finds a k-clique cont"
  },
  {
    "label":"FindKClub",
    "type":"keyword",
    "info":"FindKClub[g, k] finds a largest k-club in the graph g."
  },
  {
    "label":"FindKPlex",
    "type":"keyword",
    "info":"FindKPlex[g, k] finds a largest k-plex in the graph g.FindKPlex[g, k, n] finds a k-plex containing a"
  },
  {
    "label":"FindLibrary",
    "type":"keyword",
    "info":"FindLibrary[lib] finds a dynamic library that can be loaded by LibraryFunctionLoad."
  },
  {
    "label":"FindLinearRecurrence",
    "type":"keyword",
    "info":"FindLinearRecurrence[list] finds if possible the minimal linear recurrence that generates list.FindL"
  },
  {
    "label":"FindList",
    "type":"keyword",
    "info":"FindList[\"file\", \"text\"] gives a list of lines in the file that contain the specified string. FindLi"
  },
  {
    "label":"FindMatchingColor",
    "type":"keyword",
    "info":"FindMatchingColor[image, color] returns a color similar to the color that is present in image.FindMa"
  },
  {
    "label":"FindMaximum",
    "type":"keyword",
    "info":"FindMaximum[f, x] searches for a local maximum in f, starting from an automatically selected point.F"
  },
  {
    "label":"FindMaximumCut",
    "type":"keyword",
    "info":"FindMaximumCut[g] gives the maximum cut of the graph g."
  },
  {
    "label":"FindMaximumFlow",
    "type":"keyword",
    "info":"FindMaximumFlow[g, s, t] finds the maximum flow between source vertex s and target vertex t in a gra"
  },
  {
    "label":"FindMaxValue",
    "type":"keyword",
    "info":"FindMaxValue[f, x] gives the value at a local maximum of f.FindMaxValue[f, {x, x }] gives the value "
  },
  {
    "label":"FindMeshDefects",
    "type":"keyword",
    "info":"FindMeshDefects[mreg] finds defects in the mesh region mreg.FindMeshDefects[mreg, {def , â¦}] finds o"
  },
  {
    "label":"FindMinimum",
    "type":"keyword",
    "info":"FindMinimum[f, x] searches for a local minimum in f, starting from an automatically selected point.F"
  },
  {
    "label":"FindMinimumCostFlow",
    "type":"keyword",
    "info":"FindMinimumCostFlow[g, {sd , sd , â¦}] finds the minimum cost flow in the graph g with sd , sd , â¦ ve"
  },
  {
    "label":"FindMinimumCut",
    "type":"keyword",
    "info":"FindMinimumCut[g] gives the minimum cut of the graph g.FindMinimumCut[{v ï¢ w, â¦}] uses rules v ï¢ w t"
  },
  {
    "label":"FindMinValue",
    "type":"keyword",
    "info":"FindMinValue[f, x] gives the value at a local minimum of f.FindMinValue[f, {x, x }] gives the value "
  },
  {
    "label":"FindMoleculeSubstructure",
    "type":"keyword",
    "info":"FindMoleculeSubstructure[mol, patt] finds a mapping between the atom indices in mol and an occurrenc"
  },
  {
    "label":"FindPath",
    "type":"keyword",
    "info":"FindPath[g, s, t] finds a path between vertex s and vertex t in the graph g.FindPath[g, s, t, k] fin"
  },
  {
    "label":"FindPeaks",
    "type":"keyword",
    "info":"FindPeaks[list] gives positions and values of the detected peaks in list.FindPeaks[list, Ï] finds pe"
  },
  {
    "label":"FindPermutation",
    "type":"keyword",
    "info":"FindPermutation[expr] gives a permutation that produces expr by permuting Sort[expr].FindPermutation"
  },
  {
    "label":"FindPlanarColoring",
    "type":"keyword",
    "info":"FindPlanarColoring[g] finds a coloring with minimal size for the faces of the planar graph g.FindPla"
  },
  {
    "label":"FindPointProcessParameters",
    "type":"keyword",
    "info":"FindPointProcessParameters[pdata, pproc] estimates the parameters of the point process pproc from po"
  },
  {
    "label":"FindPostmanTour",
    "type":"keyword",
    "info":"FindPostmanTour[g] finds a Chinese postman tour in the graph g of minimal length.FindPostmanTour[g, "
  },
  {
    "label":"FindProcessParameters",
    "type":"keyword",
    "info":"FindProcessParameters[data, proc] finds the parameter estimates for the process proc from data.FindP"
  },
  {
    "label":"FindRegionTransform",
    "type":"keyword",
    "info":"FindRegionTransform[reg , reg ] gives the transformation function that maps the region reg  to the r"
  },
  {
    "label":"FindRepeat",
    "type":"keyword",
    "info":"FindRepeat[list] finds the minimal sublist or subarray that repeats to give list.FindRepeat[list, n]"
  },
  {
    "label":"FindRoot",
    "type":"keyword",
    "info":"FindRoot[f, {x, x }] searches for a numerical root of f, starting from the point x = x .FindRoot[lhs"
  },
  {
    "label":"FindSequenceFunction",
    "type":"keyword",
    "info":"FindSequenceFunction[{a , a , a , â¦}] attempts to find a simple function that yields the sequence a "
  },
  {
    "label":"FindSettings",
    "type":"keyword",
    "info":"FindSettings is a global option that specifies settings for the Find dialog box."
  },
  {
    "label":"FindShortestPath",
    "type":"keyword",
    "info":"FindShortestPath[g, s, t] finds the shortest path from source vertex s to target vertex t in the gra"
  },
  {
    "label":"FindShortestTour",
    "type":"keyword",
    "info":"FindShortestTour[{v , v , â¦}] attempts to find an ordering of the v  that minimizes the total distan"
  },
  {
    "label":"FindSpanningTree",
    "type":"keyword",
    "info":"FindSpanningTree[{v , v , â¦, v }] finds a spanning tree that minimizes the total distance between th"
  },
  {
    "label":"FindSubgraphIsomorphism",
    "type":"keyword",
    "info":"FindSubgraphIsomorphism[g , g ] finds a subgraph isomorphism that maps the graph g  to a subgraph of"
  },
  {
    "label":"FindSystemModelEquilibrium",
    "type":"keyword",
    "info":"FindSystemModelEquilibrium[model] searches for an equilibrium to the model model.FindSystemModelEqui"
  },
  {
    "label":"FindTextualAnswer",
    "type":"keyword",
    "info":"FindTextualAnswer[text, \"question\"] gives the substring of text that best appears to answer question"
  },
  {
    "label":"FindThreshold",
    "type":"keyword",
    "info":"FindThreshold[image] finds a global threshold value that partitions the intensity values in image in"
  },
  {
    "label":"FindTransientRepeat",
    "type":"keyword",
    "info":"FindTransientRepeat[list, n] returns a pair of lists {transient, repeat} where the elements of repea"
  },
  {
    "label":"FindVertexColoring",
    "type":"keyword",
    "info":"FindVertexColoring[g] finds a coloring with minimal size for the vertices in the graph g. FindVertex"
  },
  {
    "label":"FindVertexCover",
    "type":"keyword",
    "info":"FindVertexCover[g] finds a vertex cover of the graph g with a minimum number of vertices.FindVertexC"
  },
  {
    "label":"FindVertexCut",
    "type":"keyword",
    "info":"FindVertexCut[g] finds a smallest vertex cut of the graph g.FindVertexCut[g, s, t] finds a smallest "
  },
  {
    "label":"FindVertexIndependentPaths",
    "type":"keyword",
    "info":"FindVertexIndependentPaths[g, s, t, k] finds at most k vertex-independent paths from vertex s to ver"
  },
  {
    "label":"Fine",
    "type":"keyword",
    "info":"System`Fine"
  },
  {
    "label":"FinishDynamic",
    "type":"keyword",
    "info":"FinishDynamic[] finishes updating and displaying all currently visible Dynamic objects. "
  },
  {
    "label":"FiniteAbelianGroupCount",
    "type":"keyword",
    "info":"FiniteAbelianGroupCount[n] gives the number of finite Abelian groups of order n."
  },
  {
    "label":"FiniteGroupCount",
    "type":"keyword",
    "info":"FiniteGroupCount[n] gives the number of finite groups of order n."
  },
  {
    "label":"FiniteGroupData",
    "type":"keyword",
    "info":"FiniteGroupData[name, \"property\"] gives the value of the specified property for the finite group spe"
  },
  {
    "label":"First",
    "type":"keyword",
    "info":"First[expr] gives the first element in expr. First[expr, def] gives the first element if it exists, "
  },
  {
    "label":"FirstCase",
    "type":"keyword",
    "info":"FirstCase[{e , e , â¦}, pattern] gives the first e  to match pattern, or Missing[\"NotFound\"] if none "
  },
  {
    "label":"FirstPassageTimeDistribution",
    "type":"keyword",
    "info":"FirstPassageTimeDistribution[mproc, f] represents the distribution of times for the Markov process m"
  },
  {
    "label":"FirstPosition",
    "type":"keyword",
    "info":"FirstPosition[expr, pattern] gives the position of the first element in expr that matches pattern, o"
  },
  {
    "label":"FischerGroupFi22",
    "type":"keyword",
    "info":"FischerGroupFi22[] represents the sporadic simple Fischer group Fi  .\n                              "
  },
  {
    "label":"FischerGroupFi23",
    "type":"keyword",
    "info":"FischerGroupFi23[] represents the sporadic simple Fischer group Fi  .\n                              "
  },
  {
    "label":"FischerGroupFi24Prime",
    "type":"keyword",
    "info":"                                                                       â\.b2\nFischerGroupFi24Prime[] rep"
  },
  {
    "label":"FisherHypergeometricDistribution",
    "type":"keyword",
    "info":"FisherHypergeometricDistribution[n, n    , n   , w] represents a Fisher noncentral hypergeometric di"
  },
  {
    "label":"FisherRatioTest",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"FisherZDistribution",
    "type":"keyword",
    "info":"FisherZDistribution[n, m] represents a Fisher z distribution with n numerator and m denominator degr"
  },
  {
    "label":"Fit",
    "type":"keyword",
    "info":"Fit[data, {f , â¦, f }, {x, y, â¦}] finds a fit a  â¢ f  + â¦ + a  â¢ f  to a list of data for functions "
  },
  {
    "label":"FitAll",
    "type":"keyword",
    "info":"System`FitAll"
  },
  {
    "label":"FitRegularization",
    "type":"keyword",
    "info":"FitRegularization is an option for Fit and FindFit that specifies a regularization for fitting a mod"
  },
  {
    "label":"FittedModel",
    "type":"keyword",
    "info":"FittedModel[â¦] represents the symbolic fitted model obtained from functions like LinearModelFit."
  },
  {
    "label":"FixedOrder",
    "type":"keyword",
    "info":"FixedOrder[p , p , â¦] is a grammar rules pattern object that represents a sequence of elements match"
  },
  {
    "label":"FixedPoint",
    "type":"keyword",
    "info":"FixedPoint[f, expr] starts with expr, then applies f repeatedly until the result no longer changes. "
  },
  {
    "label":"FixedPointList",
    "type":"keyword",
    "info":"FixedPointList[f, expr] generates a list giving the results of applying f repeatedly, starting with "
  },
  {
    "label":"FlashSelection",
    "type":"keyword",
    "info":"System`FlashSelection"
  },
  {
    "label":"Flat",
    "type":"keyword",
    "info":"Flat is an attribute that can be assigned to a symbol f to indicate that all expressions involving n"
  },
  {
    "label":"Flatten",
    "type":"keyword",
    "info":"Flatten[list] flattens out nested lists. Flatten[list, n] flattens to level n. Flatten[list, n, h] f"
  },
  {
    "label":"FlattenAt",
    "type":"keyword",
    "info":"                                                                th\nFlattenAt[list, n] flattens out a"
  },
  {
    "label":"FlattenLayer",
    "type":"keyword",
    "info":"FlattenLayer[] represents a net layer that flattens any input array into a vector.FlattenLayer[n] re"
  },
  {
    "label":"FlatTopWindow",
    "type":"keyword",
    "info":"FlatTopWindow[x] represents an exact flat top window function of x."
  },
  {
    "label":"FlightData",
    "type":"keyword",
    "info":"FlightData[spec, options] returns a subset of properties for a flight or selection of flights with s"
  },
  {
    "label":"FlipView",
    "type":"keyword",
    "info":"FlipView[{expr , expr }] represents an object which flips between displaying expr  and expr  each ti"
  },
  {
    "label":"Floor",
    "type":"keyword",
    "info":"Floor[x] gives the greatest integer less than or equal to x. Floor[x, a] gives the greatest multiple"
  },
  {
    "label":"FlowPolynomial",
    "type":"keyword",
    "info":"FlowPolynomial[g, k] gives the flow polynomial of the graph g.FlowPolynomial[{v ï¢ w, â¦}, â¦] uses rul"
  },
  {
    "label":"FlushPrintOutputPacket",
    "type":"keyword",
    "info":"System`FlushPrintOutputPacket"
  },
  {
    "label":"Fold",
    "type":"keyword",
    "info":"Fold[f, x, list] gives the last element of FoldList[f, x, list].Fold[f, list] is equivalent to Fold["
  },
  {
    "label":"FoldList",
    "type":"keyword",
    "info":"FoldList[f, x, {a, b, â¦}] gives {x, f[x, a], f[f[x, a], b], â¦}. FoldList[f, {a, b, c, â¦}] gives {a, "
  },
  {
    "label":"FoldPair",
    "type":"keyword",
    "info":"FoldPair[f, y , list] gives the last element of FoldPairList[f, y , list].FoldPair[f, y , list, g] g"
  },
  {
    "label":"FoldPairList",
    "type":"keyword",
    "info":"FoldPairList[f, y , {a , a , â¦}] gives the list of successive x  obtained by applying f to pairs of "
  },
  {
    "label":"FoldWhile",
    "type":"keyword",
    "info":"FoldWhile[f, x, {a , a , â¦}, test] returns the first expression f[â¦ f[f[x, a ], a ] â¦, a ] to which "
  },
  {
    "label":"FoldWhileList",
    "type":"keyword",
    "info":"FoldWhileList[f, x, {a , a , â¦}, test] returns {x, f[x, a ], f[f[x, a ], a ], â¦}, repeatedly applyin"
  },
  {
    "label":"FollowRedirects",
    "type":"keyword",
    "info":"FollowRedirects is an option for URLRead and related functions that specifies whether to follow HTTP"
  },
  {
    "label":"Font",
    "type":"keyword",
    "info":"System`Font"
  },
  {
    "label":"FontColor",
    "type":"keyword",
    "info":"FontColor is an option for Style, Cell, and related constructs that specifies the default color in w"
  },
  {
    "label":"FontFamily",
    "type":"keyword",
    "info":"FontFamily is an option for Style and Cell that specifies the font family in which text should be re"
  },
  {
    "label":"FontForm",
    "type":"keyword",
    "info":"System`FontForm"
  },
  {
    "label":"FontName",
    "type":"keyword",
    "info":"System`FontName"
  },
  {
    "label":"FontOpacity",
    "type":"keyword",
    "info":"System`FontOpacity"
  },
  {
    "label":"FontPostScriptName",
    "type":"keyword",
    "info":"FontPostScriptName is an option to StyleBox which changes the current font. A sample specification i"
  },
  {
    "label":"FontProperties",
    "type":"keyword",
    "info":"FontProperties specifies font properties."
  },
  {
    "label":"FontReencoding",
    "type":"keyword",
    "info":"System`FontReencoding"
  },
  {
    "label":"FontSize",
    "type":"keyword",
    "info":"FontSize is an option for Style and Cell that specifies the default size in printer's points of the "
  },
  {
    "label":"FontSlant",
    "type":"keyword",
    "info":"FontSlant is an option for Style, Cell, and related constructs that specifies how slanted characters"
  },
  {
    "label":"FontSubstitutions",
    "type":"keyword",
    "info":"FontSubstitutions is a global option that gives a list of substitutions to try for font family names"
  },
  {
    "label":"FontTracking",
    "type":"keyword",
    "info":"FontTracking is an option for Style and Cell that specifies how condensed or expanded you want the f"
  },
  {
    "label":"FontVariations",
    "type":"keyword",
    "info":"FontVariations is an option for Style, Cell, and related constructs that specifies what font variati"
  },
  {
    "label":"FontWeight",
    "type":"keyword",
    "info":"FontWeight is an option for Style, Cell, and related constructs that specifies how heavy the charact"
  },
  {
    "label":"For",
    "type":"keyword",
    "info":"For[start, test, incr, body] executes start, then repeatedly evaluates body and incr until test fail"
  },
  {
    "label":"ForAll",
    "type":"keyword",
    "info":"ForAll[x, expr] represents the statement that expr is True for all values of x. ForAll[x, cond, expr"
  },
  {
    "label":"ForceVersionInstall",
    "type":"keyword",
    "info":"ForceVersionInstall is an option to PacletInstall and PacletInstallSubmit that specifies whether an "
  },
  {
    "label":"Format",
    "type":"keyword",
    "info":"Format[expr] prints as the formatted form of expr. Assigning values to Format[expr] defines print fo"
  },
  {
    "label":"FormatRules",
    "type":"keyword",
    "info":"System`FormatRules"
  },
  {
    "label":"FormatType",
    "type":"keyword",
    "info":"FormatType is an option for output streams, graphics, and functions such as Text that specifies the "
  },
  {
    "label":"FormatTypeAutoConvert",
    "type":"keyword",
    "info":"FormatTypeAutoConvert is an option for cells that specifies whether the contents of a cell are autom"
  },
  {
    "label":"FormatValues",
    "type":"keyword",
    "info":"FormatValues[f] gives a list of transformation rules corresponding to all printing formats (values f"
  },
  {
    "label":"FormBox",
    "type":"keyword",
    "info":"FormBox[boxes, form] is a low-level box construct which displays as boxes but specifies that rules a"
  },
  {
    "label":"FormBoxOptions",
    "type":"keyword",
    "info":"FormBoxOptions is an option for cells that specifies settings for FormBox objects within the cell."
  },
  {
    "label":"FormControl",
    "type":"keyword",
    "info":"FormControl[assoc, struct] represents an editable form in a notebook, with structure specified by st"
  },
  {
    "label":"FormFunction",
    "type":"keyword",
    "info":"FormFunction[formspec, func] represents an active form that, when submitted, applies func to the val"
  },
  {
    "label":"FormLayoutFunction",
    "type":"keyword",
    "info":"FormLayoutFunction is an option for FormObject and FormFunction that can be used to specify how to l"
  },
  {
    "label":"FormObject",
    "type":"keyword",
    "info":"FormObject[{name  ï¢ type , name  ï¢ type , â¦}] represents a form with fields having names name  that "
  },
  {
    "label":"FormPage",
    "type":"keyword",
    "info":"FormPage[formspec, func] represents an active page that takes input from a form and generates result"
  },
  {
    "label":"FormProtectionMethod",
    "type":"keyword",
    "info":"FormProtectionMethod is an option for form generation functions that specifies what method to use fo"
  },
  {
    "label":"FormTheme",
    "type":"keyword",
    "info":"FormTheme is an option for FormObject and related functions that specifies an overall theme for a fo"
  },
  {
    "label":"FormulaData",
    "type":"keyword",
    "info":"FormulaData[name] gives the equations for the formula name.FormulaData[name, {var  ï¢ quantity , var "
  },
  {
    "label":"FormulaLookup",
    "type":"keyword",
    "info":"FormulaLookup[\"query\"] gives a list of the full names of formulas whose names are consistent with \"q"
  },
  {
    "label":"FortranForm",
    "type":"keyword",
    "info":"FortranForm[expr] prints as a Fortran language version of expr. "
  },
  {
    "label":"Forward",
    "type":"keyword",
    "info":"Forward is a symbol that represents the forward direction for purposes of motion and animation."
  },
  {
    "label":"ForwardBackward",
    "type":"keyword",
    "info":"ForwardBackward is a symbol that represents alternate forward and backward motion or animation."
  },
  {
    "label":"ForwardCloudCredentials",
    "type":"keyword",
    "info":"ForwardCloudCredentials is an option for remote evaluation and submission functions that specifies w"
  },
  {
    "label":"Fourier",
    "type":"keyword",
    "info":"Fourier[list] finds the discrete Fourier transform of a list of complex numbers.Fourier[list, {p , p"
  },
  {
    "label":"FourierCoefficient",
    "type":"keyword",
    "info":"                                           th\nFourierCoefficient[expr, t, n] gives the nï    coeffici"
  },
  {
    "label":"FourierCosCoefficient",
    "type":"keyword",
    "info":"                                              th\nFourierCosCoefficient[expr, t, n] gives the nï    co"
  },
  {
    "label":"FourierCosSeries",
    "type":"keyword",
    "info":"                                         th\nFourierCosSeries[expr, t, n] gives the nï   -order Fourie"
  },
  {
    "label":"FourierCosTransform",
    "type":"keyword",
    "info":"FourierCosTransform[expr, t, Ï] gives the symbolic Fourier cosine transform of expr. FourierCosTrans"
  },
  {
    "label":"FourierDCT",
    "type":"keyword",
    "info":"FourierDCT[list] finds the Fourier discrete cosine transform of a list of real numbers.FourierDCT[li"
  },
  {
    "label":"FourierDCTFilter",
    "type":"keyword",
    "info":"FourierDCTFilter[image, t] reduces noise in image by locally thresholding the discrete cosine transf"
  },
  {
    "label":"FourierDCTMatrix",
    "type":"keyword",
    "info":"FourierDCTMatrix[n] returns an nÃn discrete cosine transform matrix of type 2.FourierDCTMatrix[n, m]"
  },
  {
    "label":"FourierDST",
    "type":"keyword",
    "info":"FourierDST[list] finds the Fourier discrete sine transform of a list of real numbers.FourierDST[list"
  },
  {
    "label":"FourierDSTMatrix",
    "type":"keyword",
    "info":"FourierDSTMatrix[n] returns an nÃn discrete sine transform matrix of type 2.FourierDSTMatrix[n, m] r"
  },
  {
    "label":"FourierMatrix",
    "type":"keyword",
    "info":"FourierMatrix[n] returns an nÃn Fourier matrix."
  },
  {
    "label":"FourierParameters",
    "type":"keyword",
    "info":"FourierParameters is an option to Fourier and related functions that specifies the conventions to us"
  },
  {
    "label":"FourierSequenceTransform",
    "type":"keyword",
    "info":"FourierSequenceTransform[expr, n, Ï] gives the Fourier sequence transform of expr.FourierSequenceTra"
  },
  {
    "label":"FourierSeries",
    "type":"keyword",
    "info":"                                      th\nFourierSeries[expr, t, n] gives the nï   -order Fourier seri"
  },
  {
    "label":"FourierSinCoefficient",
    "type":"keyword",
    "info":"                                              th\nFourierSinCoefficient[expr, t, n] gives the nï    co"
  },
  {
    "label":"FourierSinSeries",
    "type":"keyword",
    "info":"                                         th\nFourierSinSeries[expr, t, n] gives the nï   -order Fourie"
  },
  {
    "label":"FourierSinTransform",
    "type":"keyword",
    "info":"FourierSinTransform[expr, t, Ï] gives the symbolic Fourier sine transform of expr. FourierSinTransfo"
  },
  {
    "label":"FourierTransform",
    "type":"keyword",
    "info":"FourierTransform[expr, t, Ï] gives the symbolic Fourier transform of expr. FourierTransform[expr, {t"
  },
  {
    "label":"FourierTrigSeries",
    "type":"keyword",
    "info":"                                          th\nFourierTrigSeries[expr, t, n] gives the nï   -order Four"
  },
  {
    "label":"FoxH",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"FoxHReduce",
    "type":"keyword",
    "info":"FoxHReduce[expr, x] attempts to reduce expr to a single FoxH object as a function of x."
  },
  {
    "label":"FractionalBrownianMotionProcess",
    "type":"keyword",
    "info":"FractionalBrownianMotionProcess[Î¼, Ï, h] represents fractional Brownian motion process with drift Î¼,"
  },
  {
    "label":"FractionalGaussianNoiseProcess",
    "type":"keyword",
    "info":"FractionalGaussianNoiseProcess[Î¼, Ï, h] represents a fractional Gaussian noise process with drift Î¼,"
  },
  {
    "label":"FractionalPart",
    "type":"keyword",
    "info":"FractionalPart[x] gives the fractional part of x. "
  },
  {
    "label":"FractionBox",
    "type":"keyword",
    "info":"                                                                      x\nFractionBox[x, y] is a low-l"
  },
  {
    "label":"FractionBoxOptions",
    "type":"keyword",
    "info":"FractionBoxOptions is an option that specifies settings for FractionBox objects."
  },
  {
    "label":"FractionLine",
    "type":"keyword",
    "info":"FractionLine is an option for fractions that specifies the thickness of the line separating the nume"
  },
  {
    "label":"Frame",
    "type":"keyword",
    "info":"Frame is an option for Graphics, Grid, and other constructs that specifies whether to include a fram"
  },
  {
    "label":"FrameBox",
    "type":"keyword",
    "info":"FrameBox[box] is a low-level box construct that represents box with a frame drawn around it. "
  },
  {
    "label":"FrameBoxOptions",
    "type":"keyword",
    "info":"FrameBoxOptions is an option that specifies default settings for FrameBox objects."
  },
  {
    "label":"Framed",
    "type":"keyword",
    "info":"Framed[expr] displays a framed version of expr. "
  },
  {
    "label":"FrameInset",
    "type":"keyword",
    "info":"System`FrameInset"
  },
  {
    "label":"FrameLabel",
    "type":"keyword",
    "info":"FrameLabel is an option for Graphics, Manipulate, and related functions that specifies labels to be "
  },
  {
    "label":"Frameless",
    "type":"keyword",
    "info":"System`Frameless"
  },
  {
    "label":"FrameListVideo",
    "type":"keyword",
    "info":"FrameListVideo[{image , image , â¦}] generates a video containing frames image , image , etc.\n       "
  },
  {
    "label":"FrameMargins",
    "type":"keyword",
    "info":"FrameMargins is an option for objects that can be displayed with frames which specifies the absolute"
  },
  {
    "label":"FrameRate",
    "type":"keyword",
    "info":"FrameRate is an option to specify the number of frames per second. "
  },
  {
    "label":"FrameStyle",
    "type":"keyword",
    "info":"FrameStyle is an option for Graphics, Grid, and other constructs that specifies the style in which t"
  },
  {
    "label":"FrameTicks",
    "type":"keyword",
    "info":"FrameTicks is an option for 2D graphics functions that specifies tick marks for the edges of a frame"
  },
  {
    "label":"FrameTicksStyle",
    "type":"keyword",
    "info":"FrameTicksStyle is an option for 2D graphics functions that specifies how frame ticks should be rend"
  },
  {
    "label":"FRatioDistribution",
    "type":"keyword",
    "info":"FRatioDistribution[n, m] represents an F-ratio distribution with n numerator and m denominator degre"
  },
  {
    "label":"FrechetDistribution",
    "type":"keyword",
    "info":"FrechetDistribution[Î\\[PlusMinus], Î\.b2] represents the FrÃ©chet distribution with shape parameter Î\\[PlusMinus] and scale param"
  },
  {
    "label":"FreeQ",
    "type":"keyword",
    "info":"FreeQ[expr, form] yields True if no subexpression in expr matches form, and yields False otherwise. "
  },
  {
    "label":"FrenetSerretSystem",
    "type":"keyword",
    "info":"FrenetSerretSystem[{x , â¦, x }, t] gives the generalized curvatures and FrenetâSerret basis for the "
  },
  {
    "label":"FrequencySamplingFilterKernel",
    "type":"keyword",
    "info":"FrequencySamplingFilterKernel[{a , â¦, a }] creates a finite impulse response (FIR) filter kernel usi"
  },
  {
    "label":"FresnelC",
    "type":"keyword",
    "info":"FresnelC[z] gives the Fresnel integral C(z). "
  },
  {
    "label":"FresnelF",
    "type":"keyword",
    "info":"FresnelF[z] gives the Fresnel auxiliary function F(z)."
  },
  {
    "label":"FresnelG",
    "type":"keyword",
    "info":"FresnelG[z] gives the Fresnel auxiliary function G(z)."
  },
  {
    "label":"FresnelS",
    "type":"keyword",
    "info":"FresnelS[z] gives the Fresnel integral S(z). "
  },
  {
    "label":"Friday",
    "type":"keyword",
    "info":"Friday is a day of the week."
  },
  {
    "label":"FrobeniusNumber",
    "type":"keyword",
    "info":"FrobeniusNumber[{a , â¦, a }] gives the Frobenius number of a , â¦, a .\n                  1      n    "
  },
  {
    "label":"FrobeniusSolve",
    "type":"keyword",
    "info":"FrobeniusSolve[{a , â¦, a }, b] gives a list of all solutions of the Frobenius equation a  x  + â¦ + a"
  },
  {
    "label":"FromAbsoluteTime",
    "type":"keyword",
    "info":"FromAbsoluteTime[time] gives a date object corresponding to an absolute time specification as given "
  },
  {
    "label":"FromCharacterCode",
    "type":"keyword",
    "info":"FromCharacterCode[n] gives a string consisting of the character with integer code n. FromCharacterCo"
  },
  {
    "label":"FromCoefficientRules",
    "type":"keyword",
    "info":"FromCoefficientRules[list, {x , x , â¦}] constructs a polynomial from a list of rules for exponent ve"
  },
  {
    "label":"FromContinuedFraction",
    "type":"keyword",
    "info":"FromContinuedFraction[list] reconstructs a number from the list of its continued fraction terms. "
  },
  {
    "label":"FromDate",
    "type":"keyword",
    "info":"FromDate[date] converts a date of the form {y, m, d, h, m, s} to an absolute number of seconds since"
  },
  {
    "label":"FromDateString",
    "type":"keyword",
    "info":"FromDateString[\"string\"] gives a date object corresponding to the date represented by \"string\".FromD"
  },
  {
    "label":"FromDigits",
    "type":"keyword",
    "info":"FromDigits[list] constructs an integer from the list of its decimal digits. FromDigits[list, b] take"
  },
  {
    "label":"FromDMS",
    "type":"keyword",
    "info":"FromDMS[{d, m, s}] converts from degrees, minutes, and seconds to decimal degrees. FromDMS[\"dms\"] co"
  },
  {
    "label":"FromEntity",
    "type":"keyword",
    "info":"FromEntity[entity] returns a Wolfram Language object corresponding to an entity."
  },
  {
    "label":"FromJulianDate",
    "type":"keyword",
    "info":"FromJulianDate[jd] gives a date object corresponding to the Julian date jd.FromJulianDate[\"type\", jd"
  },
  {
    "label":"FromLetterNumber",
    "type":"keyword",
    "info":"FromLetterNumber[n] gives the lowercase letter at position n in the English alphabet.FromLetterNumbe"
  },
  {
    "label":"FromPolarCoordinates",
    "type":"keyword",
    "info":"FromPolarCoordinates[{r, Î¸}] gives the {x, y} Cartesian coordinates corresponding to the polar coord"
  },
  {
    "label":"FromRomanNumeral",
    "type":"keyword",
    "info":"FromRomanNumeral[\"string\"] gives the integer corresponding to the Roman numeral \"string\". "
  },
  {
    "label":"FromSphericalCoordinates",
    "type":"keyword",
    "info":"FromSphericalCoordinates[{r, Î¸, Ï}] gives the {x, y, z} Cartesian coordinates corresponding to the s"
  },
  {
    "label":"FromUnixTime",
    "type":"keyword",
    "info":"FromUnixTime[time] gives a date object corresponding to a UnixTime specification."
  },
  {
    "label":"Front",
    "type":"keyword",
    "info":"Front is a symbol that represents the front of a graphic for purposes of placement and alignment."
  },
  {
    "label":"FrontEndDynamicExpression",
    "type":"keyword",
    "info":"FrontEndDynamicExpression is a global front end option that specifies an expression to be dynamicall"
  },
  {
    "label":"FrontEndEventActions",
    "type":"keyword",
    "info":"FrontEndEventActions is an option for the notebook front end that gives a list of actions to perform"
  },
  {
    "label":"FrontEndExecute",
    "type":"keyword",
    "info":"FrontEndExecute[expr] sends expr to be executed by the Wolfram System front end. "
  },
  {
    "label":"FrontEndObject",
    "type":"keyword",
    "info":"System`FrontEndObject"
  },
  {
    "label":"FrontEndResource",
    "type":"keyword",
    "info":"System`FrontEndResource"
  },
  {
    "label":"FrontEndResourceString",
    "type":"keyword",
    "info":"System`FrontEndResourceString"
  },
  {
    "label":"FrontEndStackSize",
    "type":"keyword",
    "info":"System`FrontEndStackSize"
  },
  {
    "label":"FrontEndToken",
    "type":"keyword",
    "info":"FrontEndToken[\"cmd\"] is an object that represents a front end command token, typically corresponding"
  },
  {
    "label":"FrontEndTokenExecute",
    "type":"keyword",
    "info":"FrontEndTokenExecute[\"cmd\"] executes the specified front end command token, typically corresponding "
  },
  {
    "label":"FrontEndValueCache",
    "type":"keyword",
    "info":"System`FrontEndValueCache"
  },
  {
    "label":"FrontEndVersion",
    "type":"keyword",
    "info":"System`FrontEndVersion"
  },
  {
    "label":"FrontFaceColor",
    "type":"keyword",
    "info":"System`FrontFaceColor"
  },
  {
    "label":"FrontFaceGlowColor",
    "type":"keyword",
    "info":"System`FrontFaceGlowColor"
  },
  {
    "label":"FrontFaceOpacity",
    "type":"keyword",
    "info":"System`FrontFaceOpacity"
  },
  {
    "label":"FrontFaceSpecularColor",
    "type":"keyword",
    "info":"System`FrontFaceSpecularColor"
  },
  {
    "label":"FrontFaceSpecularExponent",
    "type":"keyword",
    "info":"System`FrontFaceSpecularExponent"
  },
  {
    "label":"FrontFaceSurfaceAppearance",
    "type":"keyword",
    "info":"System`FrontFaceSurfaceAppearance"
  },
  {
    "label":"FrontFaceTexture",
    "type":"keyword",
    "info":"System`FrontFaceTexture"
  },
  {
    "label":"Full",
    "type":"keyword",
    "info":"Full is a setting used for certain options, typically indicating that a full range of values should "
  },
  {
    "label":"FullAxes",
    "type":"keyword",
    "info":"FullAxes[graphics] returns the axes options of a graphics object."
  },
  {
    "label":"FullDefinition",
    "type":"keyword",
    "info":"FullDefinition[symbol] prints as the definitions given for symbol, and all symbols on which these de"
  },
  {
    "label":"FullForm",
    "type":"keyword",
    "info":"FullForm[expr] prints as the full form of expr, with no special syntax. "
  },
  {
    "label":"FullGraphics",
    "type":"keyword",
    "info":"FullGraphics[g] takes a graphics object, and generates a new one in which objects specified by graph"
  },
  {
    "label":"FullInformationOutputRegulator",
    "type":"keyword",
    "info":"FullInformationOutputRegulator[sys, rspec] gives the full state information output regulator for sys"
  },
  {
    "label":"FullOptions",
    "type":"keyword",
    "info":"System`FullOptions"
  },
  {
    "label":"FullRegion",
    "type":"keyword",
    "info":"                                          n\nFullRegion[n] represents the full region ï\\[Micro] ."
  },
  {
    "label":"FullSimplify",
    "type":"keyword",
    "info":"FullSimplify[expr] tries a wide range of transformations on expr involving elementary and special fu"
  },
  {
    "label":"Function",
    "type":"keyword",
    "info":"body & or Function[body] is a pure (or \"anonymous\") function. The formal parameters are # (or #1), #"
  },
  {
    "label":"FunctionAnalytic",
    "type":"keyword",
    "info":"FunctionAnalytic[f, x] tests whether f(x) is an analytic function for x â Reals.FunctionAnalytic[f, "
  },
  {
    "label":"FunctionBijective",
    "type":"keyword",
    "info":"FunctionBijective[f, x] tests whether f(x) ï y has exactly one solution x â Reals for each y â Reals"
  },
  {
    "label":"FunctionCompile",
    "type":"keyword",
    "info":"FunctionCompile[f] generates a compiled code function from a pure function.FunctionCompile[{f , f , "
  },
  {
    "label":"FunctionCompileExport",
    "type":"keyword",
    "info":"FunctionCompileExport[\"file.ext\", fspec] exports a compiled version of functions fspec in the format"
  },
  {
    "label":"FunctionCompileExportByteArray",
    "type":"keyword",
    "info":"FunctionCompileExportByteArray[fspec] gives a byte array of binary LLVM code obtained by compiling t"
  },
  {
    "label":"FunctionCompileExportLibrary",
    "type":"keyword",
    "info":"FunctionCompileExportLibrary[file, fspec] exports a compiled version of function specification fspec"
  },
  {
    "label":"FunctionCompileExportString",
    "type":"keyword",
    "info":"FunctionCompileExportString[fspec] gives a string of textual LLVM code obtained by compiling the fun"
  },
  {
    "label":"FunctionContinuous",
    "type":"keyword",
    "info":"FunctionContinuous[f, x] tests whether f(x) is a real-valued continuous function for x â Reals.Funct"
  },
  {
    "label":"FunctionConvexity",
    "type":"keyword",
    "info":"FunctionConvexity[f, {x , x , â¦}] finds the convexity of the function f with variables x , x , â¦ ove"
  },
  {
    "label":"FunctionDeclaration",
    "type":"keyword",
    "info":"FunctionDeclaration[name, typedfun] declares name to be a typed function suitable for use in a compi"
  },
  {
    "label":"FunctionDiscontinuities",
    "type":"keyword",
    "info":"FunctionDiscontinuities[f, x] finds the discontinuities of f(x) for x â Reals. FunctionDiscontinuiti"
  },
  {
    "label":"FunctionDomain",
    "type":"keyword",
    "info":"FunctionDomain[f, x] finds the largest domain of definition of the real function f of the variable x"
  },
  {
    "label":"FunctionExpand",
    "type":"keyword",
    "info":"FunctionExpand[expr] tries to expand out special and certain other functions in expr, when possible "
  },
  {
    "label":"FunctionInjective",
    "type":"keyword",
    "info":"FunctionInjective[f, x] tests whether f(x) ï y has at most one solution x â Reals for each y.Functio"
  },
  {
    "label":"FunctionInterpolation",
    "type":"keyword",
    "info":"FunctionInterpolation[expr, {x, x   , x   }] evaluates expr with x running from x    to x    and con"
  },
  {
    "label":"FunctionLayer",
    "type":"keyword",
    "info":"FunctionLayer[f] represents a net layer that applies function f to its input."
  },
  {
    "label":"FunctionMeromorphic",
    "type":"keyword",
    "info":"FunctionMeromorphic[f, x] test whether f(x) is a meromorphic function of x.FunctionMeromorphic[f, {x"
  },
  {
    "label":"FunctionMonotonicity",
    "type":"keyword",
    "info":"FunctionMonotonicity[f, x] finds the monotonicity of the function f with the variable x over the rea"
  },
  {
    "label":"FunctionPeriod",
    "type":"keyword",
    "info":"FunctionPeriod[f, x] gives a period p of the function f over the reals such that f(x + p) ï f(x).Fun"
  },
  {
    "label":"FunctionPoles",
    "type":"keyword",
    "info":"FunctionPoles[f, x] finds the poles of the meromorphic function f with the variable x.FunctionPoles["
  },
  {
    "label":"FunctionRange",
    "type":"keyword",
    "info":"FunctionRange[f, x, y] finds the range of the real function f of the variable x returning the result"
  },
  {
    "label":"FunctionSign",
    "type":"keyword",
    "info":"FunctionSign[f, {x , x , â¦}] finds the real sign of the function f with variables x , x , â¦ over the"
  },
  {
    "label":"FunctionSingularities",
    "type":"keyword",
    "info":"FunctionSingularities[f, x] finds the singularities of f(x) for x â Reals. FunctionSingularities[f, "
  },
  {
    "label":"FunctionSpace",
    "type":"keyword",
    "info":"FunctionSpace is an option for FindSequenceFunction and related functions that specifies the space o"
  },
  {
    "label":"FunctionSurjective",
    "type":"keyword",
    "info":"FunctionSurjective[f, x] tests whether f(x) ï y has at least one solution x â ï\\[Micro] for each y â Reals.F"
  },
  {
    "label":"FussellVeselyImportance",
    "type":"keyword",
    "info":"FussellVeselyImportance[rdist, t] gives the FussellâVesely importances for all components in the Rel"
  },
  {
    "label":"GaborFilter",
    "type":"keyword",
    "info":"GaborFilter[data, r, k] filters data by convolving with a Gabor kernel of pixel radius r and wave ve"
  },
  {
    "label":"GaborMatrix",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"GaborWavelet",
    "type":"keyword",
    "info":"GaborWavelet[] represents a Gabor wavelet of frequency 6.GaborWavelet[w] represents a Gabor wavelet "
  },
  {
    "label":"GainMargins",
    "type":"keyword",
    "info":"GainMargins[lsys] gives the gain margins of the linear time-invariant system lsys."
  },
  {
    "label":"GainPhaseMargins",
    "type":"keyword",
    "info":"GainPhaseMargins[lsys] gives the gain and phase margins of the linear time-invariant system lsys."
  },
  {
    "label":"GalaxyData",
    "type":"keyword",
    "info":"GalaxyData[entity, property] gives the value of the specified property for the galaxy entity.GalaxyD"
  },
  {
    "label":"GalleryView",
    "type":"keyword",
    "info":"GalleryView[{expr , expr , â¦}] represents an object in which the expr  are displayed in a browsable "
  },
  {
    "label":"Gamma",
    "type":"keyword",
    "info":"Gamma[z] is the Euler gamma function Î(z). Gamma[a, z] is the incomplete gamma function Î(a, z). Gam"
  },
  {
    "label":"GammaDistribution",
    "type":"keyword",
    "info":"GammaDistribution[Î\\[PlusMinus], Î\.b2] represents a gamma distribution with shape parameter Î\\[PlusMinus] and scale parameter Î\.b2"
  },
  {
    "label":"GammaRegularized",
    "type":"keyword",
    "info":"GammaRegularized[a, z] is the regularized incomplete gamma function Q(a, z). "
  },
  {
    "label":"GapPenalty",
    "type":"keyword",
    "info":"GapPenalty is an option for SequenceAlignment and related functions that gives the additional cost a"
  },
  {
    "label":"GARCHProcess",
    "type":"keyword",
    "info":"GARCHProcess[Îº, {Î\\[PlusMinus] , â¦, Î\\[PlusMinus] }, {Î\.b2 , â¦, Î\.b2 }] represents a generalized autoregressive conditionally hete"
  },
  {
    "label":"GatedRecurrentLayer",
    "type":"keyword",
    "info":"GatedRecurrentLayer[n] represents a trainable recurrent layer that takes a sequence of vectors and p"
  },
  {
    "label":"Gather",
    "type":"keyword",
    "info":"Gather[list] gathers the elements of list into sublists of identical elements.Gather[list, test] app"
  },
  {
    "label":"GatherBy",
    "type":"keyword",
    "info":"GatherBy[list, f] gathers into sublists each set of elements in list that gives the same value when "
  },
  {
    "label":"GaugeFaceElementFunction",
    "type":"keyword",
    "info":"GaugeFaceElementFunction is an option for gauge functions that gives a function to use to generate t"
  },
  {
    "label":"GaugeFaceStyle",
    "type":"keyword",
    "info":"GaugeFaceStyle is an option for gauge functions that specifies the style in which the face is to be "
  },
  {
    "label":"GaugeFrameElementFunction",
    "type":"keyword",
    "info":"GaugeFrameElementFunction is an option for gauge functions that gives a function to generate the pri"
  },
  {
    "label":"GaugeFrameSize",
    "type":"keyword",
    "info":"GaugeFrameSize is an option for gauge functions that controls the size of the frame around the gauge"
  },
  {
    "label":"GaugeFrameStyle",
    "type":"keyword",
    "info":"GaugeFrameStyle is an option for gauge functions that specifies the style in which the frame is to b"
  },
  {
    "label":"GaugeLabels",
    "type":"keyword",
    "info":"GaugeLabels is an option for gauge functions that specifies labels to be placed on the gauge."
  },
  {
    "label":"GaugeMarkers",
    "type":"keyword",
    "info":"GaugeMarkers is an option for gauge functions that specifies what markers to draw to mark the values"
  },
  {
    "label":"GaugeStyle",
    "type":"keyword",
    "info":"GaugeStyle is an option for gauge functions that specifies styles in which the markers are to be dra"
  },
  {
    "label":"GaussianFilter",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"GaussianIntegers",
    "type":"keyword",
    "info":"GaussianIntegers is an option for FactorInteger, PrimeQ, Factor, and related functions that specifie"
  },
  {
    "label":"GaussianMatrix",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"GaussianOrthogonalMatrixDistribution",
    "type":"keyword",
    "info":"GaussianOrthogonalMatrixDistribution[Ï, n] represents a Gaussian orthogonal matrix distribution with"
  },
  {
    "label":"GaussianSymplecticMatrixDistribution",
    "type":"keyword",
    "info":"GaussianSymplecticMatrixDistribution[Ï, n] represents a Gaussian symplectic matrix distribution with"
  },
  {
    "label":"GaussianUnitaryMatrixDistribution",
    "type":"keyword",
    "info":"GaussianUnitaryMatrixDistribution[Ï, n] represents a Gaussian unitary matrix distribution with matri"
  },
  {
    "label":"GaussianWindow",
    "type":"keyword",
    "info":"GaussianWindow[x] represents a Gaussian window function of x.GaussianWindow[x, Ï] uses standard devi"
  },
  {
    "label":"GCD",
    "type":"keyword",
    "info":"GCD[n , n , â¦] gives the greatest common divisor of the n . \n     1   2                             "
  },
  {
    "label":"GegenbauerC",
    "type":"keyword",
    "info":"                                                      (m)                                           "
  },
  {
    "label":"General",
    "type":"keyword",
    "info":"General is a symbol to which general system messages are attached. "
  },
  {
    "label":"GeneralizedLinearModelFit",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"GenerateAsymmetricKeyPair",
    "type":"keyword",
    "info":"GenerateAsymmetricKeyPair[] randomly generates a PrivateKey and corresponding PublicKey object for u"
  },
  {
    "label":"GenerateConditions",
    "type":"keyword",
    "info":"GenerateConditions is an option for Integrate, Sum, and similar functions that specifies whether exp"
  },
  {
    "label":"GeneratedAssetFormat",
    "type":"keyword",
    "info":"GeneratedAssetFormat is an option for functions like VideoGenerator that specifies the format of the"
  },
  {
    "label":"GeneratedAssetLocation",
    "type":"keyword",
    "info":"GeneratedAssetLocation is an option for functions like VideoGenerator that specifies the location of"
  },
  {
    "label":"GeneratedCell",
    "type":"keyword",
    "info":"GeneratedCell is an option for Cell that indicates whether the cell was generated from the kernel. "
  },
  {
    "label":"GeneratedCellStyles",
    "type":"keyword",
    "info":"System`GeneratedCellStyles"
  },
  {
    "label":"GeneratedDocumentBinding",
    "type":"keyword",
    "info":"GeneratedDocumentBinding is an option for supplying parameters to a DocumentGenerator during manual "
  },
  {
    "label":"GenerateDerivedKey",
    "type":"keyword",
    "info":"GenerateDerivedKey[password] generates a DerivedKey object from the password given.GenerateDerivedKe"
  },
  {
    "label":"GenerateDigitalSignature",
    "type":"keyword",
    "info":"GenerateDigitalSignature[expr, key] generates a digital signature for expr using the specified priva"
  },
  {
    "label":"GenerateDocument",
    "type":"keyword",
    "info":"GenerateDocument[nb] generates a document by evaluating all template elements in the notebook nb.Gen"
  },
  {
    "label":"GeneratedParameters",
    "type":"keyword",
    "info":"GeneratedParameters is an option that specifies how parameters generated to represent the results of"
  },
  {
    "label":"GeneratedQuantityMagnitudes",
    "type":"keyword",
    "info":"GeneratedQuantityMagnitudes is an option that specifies how quantities generated to represent the qu"
  },
  {
    "label":"GenerateFileSignature",
    "type":"keyword",
    "info":"GenerateFileSignature[\"file\", key] generates a digital signature of file using the specified private"
  },
  {
    "label":"GenerateHTTPResponse",
    "type":"keyword",
    "info":"GenerateHTTPResponse[expr] gives the HTTPResponse object that is generated when a cloud object conta"
  },
  {
    "label":"GenerateSecuredAuthenticationKey",
    "type":"keyword",
    "info":"GenerateSecuredAuthenticationKey[] generates a new anonymous SecuredAuthenticationKey owned by the c"
  },
  {
    "label":"GenerateSymmetricKey",
    "type":"keyword",
    "info":"GenerateSymmetricKey[] randomly generates a SymmetricKey object suitable for use with cryptographic "
  },
  {
    "label":"GeneratingFunction",
    "type":"keyword",
    "info":"                                                                                           th\nGenera"
  },
  {
    "label":"GeneratorDescription",
    "type":"keyword",
    "info":"GeneratorDescription is an option for providing a textual description for a DocumentGenerator."
  },
  {
    "label":"GeneratorHistoryLength",
    "type":"keyword",
    "info":"GeneratorHistoryLength is an option for document generators controlling the number of runs archived "
  },
  {
    "label":"GeneratorOutputType",
    "type":"keyword",
    "info":"GeneratorOutputType is an option controlling the file format of documents produced by a DocumentGene"
  },
  {
    "label":"Generic",
    "type":"keyword",
    "info":"Generic is a setting for the Mode option of Solve and related functions."
  },
  {
    "label":"GenericCylindricalDecomposition",
    "type":"keyword",
    "info":"GenericCylindricalDecomposition[ineqs, {x , x , â¦}] finds the full-dimensional part of the decomposi"
  },
  {
    "label":"GenomeData",
    "type":"keyword",
    "info":"GenomeData[\"gene\"] gives the DNA sequence for the specified gene on the reference human genome.Genom"
  },
  {
    "label":"GenomeLookup",
    "type":"keyword",
    "info":"GenomeLookup[\"seq\"] returns the positions of exact matches for the DNA sequence seq on the reference"
  },
  {
    "label":"GeoAntipode",
    "type":"keyword",
    "info":"GeoAntipode[loc] gives the antipodal position of location loc.GeoAntipode[g] gives the antipodal pri"
  },
  {
    "label":"GeoArea",
    "type":"keyword",
    "info":"GeoArea[g] gives the area of the geo region g."
  },
  {
    "label":"GeoArraySize",
    "type":"keyword",
    "info":"GeoArraySize is an option for geographic data functions that determines the dimensions of the array "
  },
  {
    "label":"GeoBackground",
    "type":"keyword",
    "info":"GeoBackground is an option that specifies the background style of a GeoGraphics object."
  },
  {
    "label":"GeoBoundary",
    "type":"keyword",
    "info":"GeoBoundary[g] returns the boundary line of the geo region g."
  },
  {
    "label":"GeoBoundingBox",
    "type":"keyword",
    "info":"GeoBoundingBox[g] gives the geo positions that define the bounding rectangle enclosing the geo regio"
  },
  {
    "label":"GeoBounds",
    "type":"keyword",
    "info":"GeoBounds[g] gives the ranges of latitudes and longitudes in the geo region g.GeoBounds[g, Î\.b4] pads r"
  },
  {
    "label":"GeoBoundsRegion",
    "type":"keyword",
    "info":"GeoBoundsRegion[{{lat   , lat   }, {lon   , lon   }}] is a two-dimensional GeoGraphics primitive tha"
  },
  {
    "label":"GeoBoundsRegionBoundary",
    "type":"keyword",
    "info":"GeoBoundsRegionBoundary[{{lat   , lat   }, {lon   , lon   }}] is a one-dimensional GeoGraphics primi"
  },
  {
    "label":"GeoBubbleChart",
    "type":"keyword",
    "info":"GeoBubbleChart[{reg  ï¢ val , reg  ï¢ val , â¦}] makes a geo bubble chart with bubbles centered at the "
  },
  {
    "label":"GeoCenter",
    "type":"keyword",
    "info":"GeoCenter is an option for GeoGraphics that specifies the coordinates of the point that should appea"
  },
  {
    "label":"GeoCircle",
    "type":"keyword",
    "info":"GeoCircle[loc, r] is a two-dimensional GeoGraphics primitive that represents a circle of radius r ce"
  },
  {
    "label":"GeoContourPlot",
    "type":"keyword",
    "info":"GeoContourPlot[{loc  ï¢ val , loc  ï¢ val , â¦}] makes a geo contour plot from values val  defined at s"
  },
  {
    "label":"GeoDensityPlot",
    "type":"keyword",
    "info":"GeoDensityPlot[{loc  ï¢ val , loc  ï¢ val , â¦}] makes a geo density plot with colors at the location l"
  },
  {
    "label":"GeodesicClosing",
    "type":"keyword",
    "info":"GeodesicClosing[image, ker] gives the geodesic closing of image with respect to the structuring elem"
  },
  {
    "label":"GeodesicDilation",
    "type":"keyword",
    "info":"GeodesicDilation[marker, mask] gives the fixed point of the geodesic dilation of the marker constrai"
  },
  {
    "label":"GeodesicErosion",
    "type":"keyword",
    "info":"GeodesicErosion[marker, mask] gives the fixed point of the geodesic erosion of the marker constraine"
  },
  {
    "label":"GeodesicOpening",
    "type":"keyword",
    "info":"GeodesicOpening[image, ker] gives the geodesic opening of image with respect to the structuring elem"
  },
  {
    "label":"GeoDestination",
    "type":"keyword",
    "info":"GeoDestination[loc, {d, Î\\[PlusMinus]}] gives the end position of the geodesic of length d starting from loc wit"
  },
  {
    "label":"GeodesyData",
    "type":"keyword",
    "info":"GeodesyData[\"name\", \"property\"] gives the value of the specified property for a named geodetic datum"
  },
  {
    "label":"GeoDirection",
    "type":"keyword",
    "info":"GeoDirection[{lat , lon }, {lat , lon }] gives the azimuthal direction from one latitude-longitude p"
  },
  {
    "label":"GeoDisk",
    "type":"keyword",
    "info":"GeoDisk[loc, r]  is a two-dimensional GeoGraphics primitive that represents a filled disk of radius "
  },
  {
    "label":"GeoDisplacement",
    "type":"keyword",
    "info":"GeoDisplacement[{dist, Î\\[PlusMinus]}] represents a geodesic displacement of length dist and initial bearing Î\\[PlusMinus] f"
  },
  {
    "label":"GeoDistance",
    "type":"keyword",
    "info":"GeoDistance[{lat , lon }, {lat , lon }] gives the geodesic distance between latitude-longitude posit"
  },
  {
    "label":"GeoDistanceList",
    "type":"keyword",
    "info":"GeoDistanceList[{loc , loc , â¦, loc }] returns the list of geodesic distances between consecutive pa"
  },
  {
    "label":"GeoElevationData",
    "type":"keyword",
    "info":"GeoElevationData[] gives the elevation above sea level at $GeoLocation.GeoElevationData[loc] gives t"
  },
  {
    "label":"GeoEntities",
    "type":"keyword",
    "info":"GeoEntities[reg, enttype] gives a list of the geographic entities of type enttype contained in the e"
  },
  {
    "label":"GeoGraphics",
    "type":"keyword",
    "info":"GeoGraphics[primitives, options] represents a two-dimensional geographical image."
  },
  {
    "label":"GeoGraphPlot",
    "type":"keyword",
    "info":"GeoGraphPlot[{e , e , â¦}] generates a plot of the geographic graph with edges e .GeoGraphPlot[{v , v"
  },
  {
    "label":"GeoGraphValuePlot",
    "type":"keyword",
    "info":"GeoGraphValuePlot[{{src , dest , flow }, {src , dest , flow }, â¦, {src , dest , flow }}] plots the f"
  },
  {
    "label":"GeogravityModelData",
    "type":"keyword",
    "info":"GeogravityModelData[] returns the gravitational field data for the current location.GeogravityModelD"
  },
  {
    "label":"GeoGridDirectionDifference",
    "type":"keyword",
    "info":"GeoGridDirectionDifference[proj, loc, Î\.b2] gives the difference between the angle from north to direct"
  },
  {
    "label":"GeoGridLines",
    "type":"keyword",
    "info":"GeoGridLines is an option for GeoGraphics that specifies what parallels and meridians to show."
  },
  {
    "label":"GeoGridLinesStyle",
    "type":"keyword",
    "info":"GeoGridLinesStyle is an option for GeoGraphics that specifies how parallels and meridians should be "
  },
  {
    "label":"GeoGridPosition",
    "type":"keyword",
    "info":"GeoGridPosition[{x, y}, proj] represents a point {x, y} in a planimetric cartographic grid using the"
  },
  {
    "label":"GeoGridRange",
    "type":"keyword",
    "info":"GeoGridRange is an option for geographic functions that specifies the range of projected coordinates"
  },
  {
    "label":"GeoGridRangePadding",
    "type":"keyword",
    "info":"GeoGridRangePadding is an option for geographic functions that specifies how much to extend the proj"
  },
  {
    "label":"GeoGridUnitArea",
    "type":"keyword",
    "info":"GeoGridUnitArea[proj, loc] gives the actual geo area corresponding to a unit area on the geo grid ob"
  },
  {
    "label":"GeoGridUnitDistance",
    "type":"keyword",
    "info":"GeoGridUnitDistance[proj, loc, Î\\[PlusMinus]] gives the actual geo distance corresponding to a unit distance on "
  },
  {
    "label":"GeoGridVector",
    "type":"keyword",
    "info":"GeoGridVector[loc ï¢ {v , v }, proj] represents a horizontal two-dimensional vector of components v ,"
  },
  {
    "label":"GeoGroup",
    "type":"keyword",
    "info":"GeoGroup[geoobjects] represents a list of geographic objects to be treated as a single object for ce"
  },
  {
    "label":"GeoHemisphere",
    "type":"keyword",
    "info":"GeoHemisphere[] is a two-dimensional GeoGraphics primitive that represents the half of the Earth cen"
  },
  {
    "label":"GeoHemisphereBoundary",
    "type":"keyword",
    "info":"GeoHemisphereBoundary[] is a one-dimensional GeoGraphics primitive that represents the boundary line"
  },
  {
    "label":"GeoHistogram",
    "type":"keyword",
    "info":"GeoHistogram[locs] plots a density histogram of the geographic locations locs.GeoHistogram[locs, bsp"
  },
  {
    "label":"GeoIdentify",
    "type":"keyword",
    "info":"GeoIdentify[enttype] identifies the geographic entities of the type enttype in which the current geo"
  },
  {
    "label":"GeoImage",
    "type":"keyword",
    "info":"GeoImage[reg] gives a satellite image of the geo region reg.GeoImage[reg, mapstyle] gives an image o"
  },
  {
    "label":"GeoLabels",
    "type":"keyword",
    "info":"GeoLabels is an option for GeoListPlot and GeoRegionValuePlot that specifies whether and how to add "
  },
  {
    "label":"GeoLength",
    "type":"keyword",
    "info":"GeoLength[g] gives the length of the geo path g."
  },
  {
    "label":"GeoListPlot",
    "type":"keyword",
    "info":"GeoListPlot[{loc , loc , â¦}] generates a map on which the locations loc  are indicated.GeoListPlot[{"
  },
  {
    "label":"GeoLocation",
    "type":"keyword",
    "info":"GeoLocation is an option for Interpreter and related functions that specifies the location to assume"
  },
  {
    "label":"GeologicalPeriodData",
    "type":"keyword",
    "info":"GeologicalPeriodData[entity, property] gives the value of the specified property for the geological "
  },
  {
    "label":"GeomagneticModelData",
    "type":"keyword",
    "info":"GeomagneticModelData[] returns the current magnetic field data for the current location.GeomagneticM"
  },
  {
    "label":"GeoMarker",
    "type":"keyword",
    "info":"GeoMarker[] is a GeoGraphics primitive that represents a marker at the current $GeoLocation.GeoMarke"
  },
  {
    "label":"GeometricAssertion",
    "type":"keyword",
    "info":"GeometricAssertion[obj, prop] represents the assertion that the geometric object obj satisfies prop."
  },
  {
    "label":"GeometricBrownianMotionProcess",
    "type":"keyword",
    "info":"GeometricBrownianMotionProcess[Î¼, Ï, x ] represents a geometric Brownian motion process with drift Î¼"
  },
  {
    "label":"GeometricDistribution",
    "type":"keyword",
    "info":"GeometricDistribution[p] represents a geometric distribution with probability parameter p. "
  },
  {
    "label":"GeometricMean",
    "type":"keyword",
    "info":"GeometricMean[list] gives the geometric mean of the values in list."
  },
  {
    "label":"GeometricMeanFilter",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"GeometricOptimization",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"GeometricScene",
    "type":"keyword",
    "info":"GeometricScene[{p , p , â¦}, {hyp , hyp , â¦}] represents an abstract 2D geometric scene defined by th"
  },
  {
    "label":"GeometricStep",
    "type":"keyword",
    "info":"GeometricStep[{hyp , hyp , â¦}] gives a symbolic representation of a step in the definition of a geom"
  },
  {
    "label":"GeometricTest",
    "type":"keyword",
    "info":"GeometricTest[obj, prop] tests whether the geometric object obj satisfies prop.GeometricTest[{obj , "
  },
  {
    "label":"GeometricTransformation",
    "type":"keyword",
    "info":"GeometricTransformation[g, tfun] represents the result of applying the transformation function tfun "
  },
  {
    "label":"GeometricTransformation3DBox",
    "type":"keyword",
    "info":"System`GeometricTransformation3DBox"
  },
  {
    "label":"GeometricTransformation3DBoxOptions",
    "type":"keyword",
    "info":"GeometricTransformation3DBoxOptions ï¢ {opt  ï¢ val , opt  ï¢ val , â¦} is an option that specifies sett"
  },
  {
    "label":"GeometricTransformationBox",
    "type":"keyword",
    "info":"System`GeometricTransformationBox"
  },
  {
    "label":"GeometricTransformationBoxOptions",
    "type":"keyword",
    "info":"GeometricTransformationBoxOptions ï¢ {opt  ï¢ val , opt  ï¢ val , â¦} is an option that specifies settin"
  },
  {
    "label":"GeoModel",
    "type":"keyword",
    "info":"GeoModel is an option for GeoGraphics that specifies the reference body or model for it for the purp"
  },
  {
    "label":"GeoNearest",
    "type":"keyword",
    "info":"GeoNearest[enttype, loc] returns the geographic entity of type enttype closest to the geo location l"
  },
  {
    "label":"GeoOrientationData",
    "type":"keyword",
    "info":"GeoOrientationData[date, prop] gives the value of the property prop about the orientation of the Ear"
  },
  {
    "label":"GeoPath",
    "type":"keyword",
    "info":"GeoPath[{loc , loc }, pathtype] is a GeoGraphics primitive that represents a path of type pathtype b"
  },
  {
    "label":"GeoPolygon",
    "type":"keyword",
    "info":"GeoPolygon[{loc , â¦, loc }] is a GeoGraphics primitive that represents a filled polygon whose bounda"
  },
  {
    "label":"GeoPosition",
    "type":"keyword",
    "info":"GeoPosition[{lat, lon}] represents a geodetic position with latitude lat and longitude lon.GeoPositi"
  },
  {
    "label":"GeoPositionENU",
    "type":"keyword",
    "info":"GeoPositionENU[{east, north, up}, p]  represents a position with local Cartesian coordinates {east, "
  },
  {
    "label":"GeoPositionXYZ",
    "type":"keyword",
    "info":"GeoPositionXYZ[{x, y, z}] represents a position in a Cartesian geocentric coordinate system.GeoPosit"
  },
  {
    "label":"GeoProjection",
    "type":"keyword",
    "info":"GeoProjection is an option for GeoGraphics that specifies the cartographic projection to use for the"
  },
  {
    "label":"GeoProjectionData",
    "type":"keyword",
    "info":"GeoProjectionData[\"projection\", \"property\"] gives the value of the specified property for the specif"
  },
  {
    "label":"GeoRange",
    "type":"keyword",
    "info":"GeoRange is an option for geographic functions that specifies the range of latitude and longitude to"
  },
  {
    "label":"GeoRangePadding",
    "type":"keyword",
    "info":"GeoRangePadding is an option for GeoGraphics that specifies what padding to use when extending beyon"
  },
  {
    "label":"GeoRegionValuePlot",
    "type":"keyword",
    "info":"GeoRegionValuePlot[{reg  ï¢ val , reg  ï¢ val , â¦}] generates a plot in which the geographic regions r"
  },
  {
    "label":"GeoResolution",
    "type":"keyword",
    "info":"GeoResolution is an option for geographic functions that specifies an average distance between neigh"
  },
  {
    "label":"GeoScaleBar",
    "type":"keyword",
    "info":"GeoScaleBar is an option for GeoGraphics that determines what scale to show on the map."
  },
  {
    "label":"GeoServer",
    "type":"keyword",
    "info":"GeoServer is an option for GeoGraphics, GeoStyling and GeoImage that specifies the URL address of a "
  },
  {
    "label":"GeoSmoothHistogram",
    "type":"keyword",
    "info":"GeoSmoothHistogram[locs] plots a smooth kernel histogram of the geo locations locs.GeoSmoothHistogra"
  },
  {
    "label":"GeoStreamPlot",
    "type":"keyword",
    "info":"GeoStreamPlot[vecs] generates a stream plot from the field of geo vectors vecs.GeoStreamPlot[{vecs ,"
  },
  {
    "label":"GeoStyling",
    "type":"keyword",
    "info":"GeoStyling[mapstyle] displays faces of polygons and other filled geo objects using mapstyle.GeoStyli"
  },
  {
    "label":"GeoStylingImageFunction",
    "type":"keyword",
    "info":"GeoStylingImageFunction is an option for specifying an image effect to apply to a geo style."
  },
  {
    "label":"GeoVariant",
    "type":"keyword",
    "info":"GeoVariant[obj, qual] represents a geographic object obj with qualifier qual."
  },
  {
    "label":"GeoVector",
    "type":"keyword",
    "info":"GeoVector[loc ï¢ {m, Î\\[PlusMinus]}] represents a horizontal two-dimensional vector of magnitude m and bearing Î\\[PlusMinus] "
  },
  {
    "label":"GeoVectorENU",
    "type":"keyword",
    "info":"GeoVectorENU[loc ï¢ {v , v }] represents a horizontal two-dimensional vector of components v  and v  "
  },
  {
    "label":"GeoVectorPlot",
    "type":"keyword",
    "info":"GeoVectorPlot[vecs] generates a vector plot from the field of geo vectors vecs.GeoVectorPlot[{vecs ,"
  },
  {
    "label":"GeoVectorXYZ",
    "type":"keyword",
    "info":"GeoVectorXYZ[loc ï¢ {v , v , v }] represents a three-dimensional vector of Cartesian components v , v"
  },
  {
    "label":"GeoVisibleRegion",
    "type":"keyword",
    "info":"GeoVisibleRegion[{lat, lon, h}] is a two-dimensional GeoGraphics primitive that represents the regio"
  },
  {
    "label":"GeoVisibleRegionBoundary",
    "type":"keyword",
    "info":"GeoVisibleRegionBoundary[{lat, lon, h}] is a one-dimensional GeoGraphics primitive that represents t"
  },
  {
    "label":"GeoWithinQ",
    "type":"keyword",
    "info":"GeoWithinQ[reg, loc] returns True if the location loc is contained within the region reg, and False "
  },
  {
    "label":"GeoZoomLevel",
    "type":"keyword",
    "info":"GeoZoomLevel is an option for specifying the resolution at which to render a map."
  },
  {
    "label":"GestureHandler",
    "type":"keyword",
    "info":"GestureHandler[expr, {gesture  ï fun , gesture  ï fun , â¦}] displays as expr, evaluating fun [value,"
  },
  {
    "label":"GestureHandlerTag",
    "type":"keyword",
    "info":"System`GestureHandlerTag"
  },
  {
    "label":"Get",
    "type":"keyword",
    "info":"<< name reads in a file, evaluating each expression in it and returning the last one. Get[stream] re"
  },
  {
    "label":"GetBoundingBoxSizePacket",
    "type":"keyword",
    "info":"System`GetBoundingBoxSizePacket"
  },
  {
    "label":"GetContext",
    "type":"keyword",
    "info":"GetContext[\"context`\"] loads the file named by ContextToFileName[\"context`\"], which gives the conven"
  },
  {
    "label":"GetEnvironment",
    "type":"keyword",
    "info":"GetEnvironment[\"var\"] gives the setting corresponding to the variable \"var\" in the operating system "
  },
  {
    "label":"GetFileName",
    "type":"keyword",
    "info":"System`GetFileName"
  },
  {
    "label":"GetFrontEndOptionsDataPacket",
    "type":"keyword",
    "info":"System`GetFrontEndOptionsDataPacket"
  },
  {
    "label":"GetLinebreakInformationPacket",
    "type":"keyword",
    "info":"System`GetLinebreakInformationPacket"
  },
  {
    "label":"GetMenusPacket",
    "type":"keyword",
    "info":"System`GetMenusPacket"
  },
  {
    "label":"GetPageBreakInformationPacket",
    "type":"keyword",
    "info":"System`GetPageBreakInformationPacket"
  },
  {
    "label":"GibbsPointProcess",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"Glaisher",
    "type":"keyword",
    "info":"Glaisher is Glaisher's constant with numerical value â 1.28243. "
  },
  {
    "label":"GlobalClusteringCoefficient",
    "type":"keyword",
    "info":"GlobalClusteringCoefficient[g] gives the global clustering coefficient of the graph g.GlobalClusteri"
  },
  {
    "label":"GlobalPreferences",
    "type":"keyword",
    "info":"System`GlobalPreferences"
  },
  {
    "label":"GlobalSession",
    "type":"keyword",
    "info":"System`GlobalSession"
  },
  {
    "label":"Glow",
    "type":"keyword",
    "info":"Glow[col] is a graphics directive which specifies that surfaces of 3D graphics objects that follow a"
  },
  {
    "label":"GoldenAngle",
    "type":"keyword",
    "info":"GoldenAngle is the golden angle (3 - Sqrt[5]) Ï, with numerical value â 137.5Â\\[Degree]."
  },
  {
    "label":"GoldenRatio",
    "type":"keyword",
    "info":"                                    1\nGoldenRatio is the golden ratio Ï ï - (Sqrt[5] + 1), with nume"
  },
  {
    "label":"GompertzMakehamDistribution",
    "type":"keyword",
    "info":"GompertzMakehamDistribution[Î», Î¾] represents a Gompertz distribution with scale parameter Î» and frai"
  },
  {
    "label":"GoochShading",
    "type":"keyword",
    "info":"GoochShading[] is a three-dimensional graphics directive specifying that surfaces that follow are to"
  },
  {
    "label":"GoodmanKruskalGamma",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"GoodmanKruskalGammaTest",
    "type":"keyword",
    "info":"GoodmanKruskalGammaTest[v , v ] tests whether the vectors v  and v  are independent.GoodmanKruskalGa"
  },
  {
    "label":"Goto",
    "type":"keyword",
    "info":"Goto[tag] scans for Label[tag], and transfers control to that point. "
  },
  {
    "label":"Grad",
    "type":"keyword",
    "info":"Grad[f, {x , â¦, x }] gives the gradient (â f\/â x , â¦, â f\/â x ).Grad[f, {x , â¦, x }, chart] gives th"
  },
  {
    "label":"Gradient",
    "type":"keyword",
    "info":"Gradient is an option for FindMinimum and related functions that specifies the gradient vector to as"
  },
  {
    "label":"GradientFilter",
    "type":"keyword",
    "info":"GradientFilter[data, r] gives the magnitude of the gradient of data, computed using discrete derivat"
  },
  {
    "label":"GradientFittedMesh",
    "type":"keyword",
    "info":"GradientFittedMesh[{p , p , â¦}] gives a MeshRegion whose gradient best fits the normals at points p "
  },
  {
    "label":"GradientOrientationFilter",
    "type":"keyword",
    "info":"GradientOrientationFilter[data, r] gives the local orientation parallel to the gradient of data, com"
  },
  {
    "label":"GrammarApply",
    "type":"keyword",
    "info":"GrammarApply[grammar, input] attempts to parse input according to the grammar defined by grammar."
  },
  {
    "label":"GrammarRules",
    "type":"keyword",
    "info":"GrammarRules[rules] represents grammar rules to be deployed to a cloud object that implements the gr"
  },
  {
    "label":"GrammarToken",
    "type":"keyword",
    "info":"GrammarToken[form] is a grammar rules pattern object that represents any input of the specified form"
  },
  {
    "label":"Graph",
    "type":"keyword",
    "info":"Graph[{e , e , â¦}] yields a graph with edges e .Graph[{v , v , â¦}, {e , e , â¦}] yields the graph wit"
  },
  {
    "label":"Graph3D",
    "type":"keyword",
    "info":"Graph3D[g] creates a graph with vertices and edges from the graph g and represented as a 3D plot.Gra"
  },
  {
    "label":"GraphAssortativity",
    "type":"keyword",
    "info":"GraphAssortativity[g] gives the assortativity coefficient of a graph g using vertex degrees.GraphAss"
  },
  {
    "label":"GraphAutomorphismGroup",
    "type":"keyword",
    "info":"GraphAutomorphismGroup[g] gives the automorphism group of a graph g.GraphAutomorphismGroup[{v ï¢ w, â¦"
  },
  {
    "label":"GraphCenter",
    "type":"keyword",
    "info":"GraphCenter[g] gives the set of vertices with minimum eccentricity in the graph g.GraphCenter[{v ï¢ w"
  },
  {
    "label":"GraphComplement",
    "type":"keyword",
    "info":"GraphComplement[g] gives the graph complement of the graph g.GraphComplement[{v ï¢ w, â¦}] uses rules "
  },
  {
    "label":"GraphData",
    "type":"keyword",
    "info":"GraphData[name] gives a graph with the specified name.GraphData[entity] gives the graph correspondin"
  },
  {
    "label":"GraphDensity",
    "type":"keyword",
    "info":"GraphDensity[g] gives the graph density of the graph g.GraphDensity[{v ï¢ w, â¦}] uses rules v ï¢ w to "
  },
  {
    "label":"GraphDiameter",
    "type":"keyword",
    "info":"GraphDiameter[g] gives the greatest distance between any pair of vertices in the graph g.GraphDiamet"
  },
  {
    "label":"GraphDifference",
    "type":"keyword",
    "info":"GraphDifference[g , g ] gives the graph difference of the graphs g  and g .GraphDifference[{v ï¢ w, â¦"
  },
  {
    "label":"GraphDisjointUnion",
    "type":"keyword",
    "info":"GraphDisjointUnion[g , g ] gives the graph disjoint union of the graphs g  and g .GraphDisjointUnion"
  },
  {
    "label":"GraphDistance",
    "type":"keyword",
    "info":"GraphDistance[g, s, t] gives the distance from source vertex s to target vertex t in the graph g.Gra"
  },
  {
    "label":"GraphDistanceMatrix",
    "type":"keyword",
    "info":"GraphDistanceMatrix[g] gives the matrix of distances between vertices for the graph g.GraphDistanceM"
  },
  {
    "label":"GraphElementData",
    "type":"keyword",
    "info":"System`GraphElementData"
  },
  {
    "label":"GraphEmbedding",
    "type":"keyword",
    "info":"GraphEmbedding[g] gives coordinates of the vertices of the graph g.GraphEmbedding[g, \"emb\"] gives co"
  },
  {
    "label":"GraphHighlight",
    "type":"keyword",
    "info":"GraphHighlight is an option to Graph and related objects that specifies graph elements to highlight."
  },
  {
    "label":"GraphHighlightStyle",
    "type":"keyword",
    "info":"GraphHighlightStyle is an option to Graph and related objects that specifies styles to use for highl"
  },
  {
    "label":"GraphHub",
    "type":"keyword",
    "info":"GraphHub[g] gives the set of vertices with maximum vertex degree in the underlying simple graph of g"
  },
  {
    "label":"Graphics",
    "type":"keyword",
    "info":"Graphics[primitives, options] represents a two-dimensional graphical image. "
  },
  {
    "label":"Graphics3D",
    "type":"keyword",
    "info":"Graphics3D[primitives, options] represents a three-dimensional graphical image. "
  },
  {
    "label":"Graphics3DBox",
    "type":"keyword",
    "info":"System`Graphics3DBox"
  },
  {
    "label":"Graphics3DBoxOptions",
    "type":"keyword",
    "info":"Graphics3DBoxOptions ï¢ {opt  ï¢ val , opt  ï¢ val , â¦} is an option that specifies settings for Graphi"
  },
  {
    "label":"GraphicsArray",
    "type":"keyword",
    "info":"GraphicsArray[{g , g , â¦}] represents a row of graphics objects.GraphicsArray[{{g  , g  , â¦}, â¦}] re"
  },
  {
    "label":"GraphicsBaseline",
    "type":"keyword",
    "info":"System`GraphicsBaseline"
  },
  {
    "label":"GraphicsBox",
    "type":"keyword",
    "info":"System`GraphicsBox"
  },
  {
    "label":"GraphicsBoxOptions",
    "type":"keyword",
    "info":"GraphicsBoxOptions ï¢ {opt  ï¢ val , opt  ï¢ val , â¦} is an option that specifies settings for Graphics"
  },
  {
    "label":"GraphicsColor",
    "type":"keyword",
    "info":"System`GraphicsColor"
  },
  {
    "label":"GraphicsColumn",
    "type":"keyword",
    "info":"GraphicsColumn[{g , g , â¦}] generates a graphic in which the g  are laid out in a column, with g  ab"
  },
  {
    "label":"GraphicsComplex",
    "type":"keyword",
    "info":"GraphicsComplex[{pt , pt , â¦}, data] represents a graphics complex in which coordinates given as int"
  },
  {
    "label":"GraphicsComplex3DBox",
    "type":"keyword",
    "info":"System`GraphicsComplex3DBox"
  },
  {
    "label":"GraphicsComplex3DBoxOptions",
    "type":"keyword",
    "info":"GraphicsComplex3DBoxOptions ï¢ {opt  ï¢ val , opt  ï¢ val , â¦} is an option that specifies settings for"
  },
  {
    "label":"GraphicsComplexBox",
    "type":"keyword",
    "info":"System`GraphicsComplexBox"
  },
  {
    "label":"GraphicsComplexBoxOptions",
    "type":"keyword",
    "info":"GraphicsComplexBoxOptions ï¢ {opt  ï¢ val , opt  ï¢ val , â¦} is an option that specifies settings for G"
  },
  {
    "label":"GraphicsContents",
    "type":"keyword",
    "info":"System`GraphicsContents"
  },
  {
    "label":"GraphicsData",
    "type":"keyword",
    "info":"System`GraphicsData"
  },
  {
    "label":"GraphicsGrid",
    "type":"keyword",
    "info":"GraphicsGrid[{{g  , g  , â¦}, â¦}] generates a graphic in which the g   are laid out in a two-dimensio"
  },
  {
    "label":"GraphicsGridBox",
    "type":"keyword",
    "info":"System`GraphicsGridBox"
  },
  {
    "label":"GraphicsGroup",
    "type":"keyword",
    "info":"GraphicsGroup[{g , g , â¦}] represents a collection of graphics objects grouped together for purposes"
  },
  {
    "label":"GraphicsGroup3DBox",
    "type":"keyword",
    "info":"System`GraphicsGroup3DBox"
  },
  {
    "label":"GraphicsGroup3DBoxOptions",
    "type":"keyword",
    "info":"GraphicsGroup3DBoxOptions ï¢ {opt  ï¢ val , opt  ï¢ val , â¦} is an option that specifies settings for G"
  },
  {
    "label":"GraphicsGroupBox",
    "type":"keyword",
    "info":"System`GraphicsGroupBox"
  },
  {
    "label":"GraphicsGroupBoxOptions",
    "type":"keyword",
    "info":"GraphicsGroupBoxOptions ï¢ {opt  ï¢ val , opt  ï¢ val , â¦} is an option that specifies settings for Gra"
  },
  {
    "label":"GraphicsGrouping",
    "type":"keyword",
    "info":"System`GraphicsGrouping"
  },
  {
    "label":"GraphicsHighlightColor",
    "type":"keyword",
    "info":"System`GraphicsHighlightColor"
  },
  {
    "label":"GraphicsRow",
    "type":"keyword",
    "info":"GraphicsRow[{g , g , â¦}] generates a graphic in which the g  are laid out in a row.GraphicsRow[list,"
  },
  {
    "label":"GraphicsSpacing",
    "type":"keyword",
    "info":"GraphicsSpacing is an option for GraphicsArray that specifies the spacing between elements in the ar"
  },
  {
    "label":"GraphicsStyle",
    "type":"keyword",
    "info":"System`GraphicsStyle"
  },
  {
    "label":"GraphIntersection",
    "type":"keyword",
    "info":"GraphIntersection[g , g ] gives the graph intersection of the graphs g  and g .GraphIntersection[g ,"
  },
  {
    "label":"GraphLayerLabels",
    "type":"keyword",
    "info":"System`GraphLayerLabels"
  },
  {
    "label":"GraphLayers",
    "type":"keyword",
    "info":"GraphLayers is an option for LayeredGraphPlot3D and related functions that specifies layers to draw "
  },
  {
    "label":"GraphLayerStyle",
    "type":"keyword",
    "info":"GraphLayerStyle is an option for LayeredGraphPlot3D and related functions that specifies the style i"
  },
  {
    "label":"GraphLayout",
    "type":"keyword",
    "info":"GraphLayout is an option to Graph and related functions that specifies what layout to use."
  },
  {
    "label":"GraphLinkEfficiency",
    "type":"keyword",
    "info":"GraphLinkEfficiency[g] gives the link efficiency of the graph g.GraphLinkEfficiency[{v ï¢ w, â¦}] uses"
  },
  {
    "label":"GraphPeriphery",
    "type":"keyword",
    "info":"GraphPeriphery[g] gives vertices that are maximally distant to at least one vertex in the graph g.Gr"
  },
  {
    "label":"GraphPlot",
    "type":"keyword",
    "info":"GraphPlot[g] generates a plot of the graph g.GraphPlot[{e , e , â¦}] generates a plot of the graph wi"
  },
  {
    "label":"GraphPlot3D",
    "type":"keyword",
    "info":"GraphPlot3D[g] generates a 3D plot of the graph g.GraphPlot3D[{e , e , â¦}] generates a 3D plot of th"
  },
  {
    "label":"GraphPower",
    "type":"keyword",
    "info":"                                   th\nGraphPower[g, n] gives the graph-nï    power of the graph g.Gra"
  },
  {
    "label":"GraphPropertyDistribution",
    "type":"keyword",
    "info":"GraphPropertyDistribution[expr, x ï gdist] represents the distribution of the property expr where th"
  },
  {
    "label":"GraphQ",
    "type":"keyword",
    "info":"GraphQ[g] yields True if g is a valid Graph object and False otherwise."
  },
  {
    "label":"GraphRadius",
    "type":"keyword",
    "info":"GraphRadius[g] gives the minimum eccentricity of the vertices in the graph g.GraphRadius[{v ï¢ w, â¦}]"
  },
  {
    "label":"GraphReciprocity",
    "type":"keyword",
    "info":"GraphReciprocity[g] gives the reciprocity of a graph g.GraphReciprocity[{v ï¢ w, â¦}] uses rules v ï¢ w"
  },
  {
    "label":"GraphRoot",
    "type":"keyword",
    "info":"System`GraphRoot"
  },
  {
    "label":"GraphStyle",
    "type":"keyword",
    "info":"GraphStyle is an option to Graph and related objects that specifies styles to use for the different "
  },
  {
    "label":"GraphTree",
    "type":"keyword",
    "info":"GraphTree[g] constructs a tree from the tree graph g.GraphTree[g, root] specifies what vertex to use"
  },
  {
    "label":"GraphUnion",
    "type":"keyword",
    "info":"GraphUnion[g , g ] gives the graph union of the graphs g  and g .GraphUnion[g , g , â¦] gives the gra"
  },
  {
    "label":"Gray",
    "type":"keyword",
    "info":"Gray represents the color gray in graphics or style specifications. "
  },
  {
    "label":"GrayLevel",
    "type":"keyword",
    "info":"GrayLevel[g] represents a color in the grayscale color space with gray level g.GrayLevel[g, a] speci"
  },
  {
    "label":"Greater",
    "type":"keyword",
    "info":"x > y yields True if x is determined to be greater than y. x  > x  > x  yields True if the x  form a"
  },
  {
    "label":"GreaterEqual",
    "type":"keyword",
    "info":"x >= y or x â¥ y yields True if x is determined to be greater than or equal to y. x  â¥ x  â¥ x  yields"
  },
  {
    "label":"GreaterEqualLess",
    "type":"keyword",
    "info":"GreaterEqualLess[x, y, â¦] displays as x â y â â¦."
  },
  {
    "label":"GreaterEqualThan",
    "type":"keyword",
    "info":"GreaterEqualThan[y] is an operator form that yields x â¥ y when applied to an expression x."
  },
  {
    "label":"GreaterFullEqual",
    "type":"keyword",
    "info":"GreaterFullEqual[x, y, â¦] displays as x â§ y â§ â¦."
  },
  {
    "label":"GreaterGreater",
    "type":"keyword",
    "info":"GreaterGreater[x, y, â¦] displays as x â« y â« â¦."
  },
  {
    "label":"GreaterLess",
    "type":"keyword",
    "info":"GreaterLess[x, y, â¦] displays as x â\\[CenterDot] y â\\[CenterDot] â¦."
  },
  {
    "label":"GreaterSlantEqual",
    "type":"keyword",
    "info":"GreaterSlantEqual[x, y, â¦] displays as x â©¾ y â©¾ â¦."
  },
  {
    "label":"GreaterThan",
    "type":"keyword",
    "info":"GreaterThan[y] is an operator form that yields x > y when applied to an expression x."
  },
  {
    "label":"GreaterTilde",
    "type":"keyword",
    "info":"GreaterTilde[x, y, â¦] displays as x â\.b3 y â\.b3 â¦."
  },
  {
    "label":"GreekStyle",
    "type":"keyword",
    "info":"System`GreekStyle"
  },
  {
    "label":"Green",
    "type":"keyword",
    "info":"Green represents the color green in graphics or style specifications. "
  },
  {
    "label":"GreenFunction",
    "type":"keyword",
    "info":"GreenFunction[{â[u[x]], â\\[Not][u[x]]}, u, {x, x   , x   }, y] gives a Green's function for the linear dif"
  },
  {
    "label":"Grid",
    "type":"keyword",
    "info":"Grid[{{expr  , expr  , â¦}, {expr  , expr  , â¦}, â¦}] is an object that formats with the expr   arrang"
  },
  {
    "label":"GridBaseline",
    "type":"keyword",
    "info":"GridBaseline is an option for GridBox that specifies what place in the grid should be considered its"
  },
  {
    "label":"GridBox",
    "type":"keyword",
    "info":"GridBox[{{box  , box  , â¦}, {box  , box  , â¦}, â¦}] is a low-level box construct that represents a tw"
  },
  {
    "label":"GridBoxAlignment",
    "type":"keyword",
    "info":"System`GridBoxAlignment"
  },
  {
    "label":"GridBoxBackground",
    "type":"keyword",
    "info":"System`GridBoxBackground"
  },
  {
    "label":"GridBoxDividers",
    "type":"keyword",
    "info":"System`GridBoxDividers"
  },
  {
    "label":"GridBoxFrame",
    "type":"keyword",
    "info":"System`GridBoxFrame"
  },
  {
    "label":"GridBoxItemSize",
    "type":"keyword",
    "info":"System`GridBoxItemSize"
  },
  {
    "label":"GridBoxItemStyle",
    "type":"keyword",
    "info":"System`GridBoxItemStyle"
  },
  {
    "label":"GridBoxOptions",
    "type":"keyword",
    "info":"GridBoxOptions -> {opt  -> val , opt  -> val , â¦} is an option which specifies default settings for "
  },
  {
    "label":"GridBoxSpacings",
    "type":"keyword",
    "info":"System`GridBoxSpacings"
  },
  {
    "label":"GridCreationSettings",
    "type":"keyword",
    "info":"GridCreationSettings is a global option that specifies settings for the Create Table\/Matrix dialog."
  },
  {
    "label":"GridDefaultElement",
    "type":"keyword",
    "info":"GridDefaultElement is an option for the low-level function GridBox that specifies what to insert whe"
  },
  {
    "label":"GridElementStyleOptions",
    "type":"keyword",
    "info":"System`GridElementStyleOptions"
  },
  {
    "label":"GridFrame",
    "type":"keyword",
    "info":"GridFrame is an option for grids that specifies whether a surrounding frame is drawn."
  },
  {
    "label":"GridFrameMargins",
    "type":"keyword",
    "info":"GridFrameMargins is an option for grids that specifies the spacing between the content of the grid a"
  },
  {
    "label":"GridGraph",
    "type":"keyword",
    "info":"GridGraph[{m, n}] gives the grid graph with m Ã n vertices G    .GridGraph[{n , n , â¦, n }] gives th"
  },
  {
    "label":"GridLines",
    "type":"keyword",
    "info":"GridLines is an option for two-dimensional graphics functions that specifies grid lines. "
  },
  {
    "label":"GridLinesStyle",
    "type":"keyword",
    "info":"GridLinesStyle is an option for 2D graphics functions that specifies how grid lines should be render"
  },
  {
    "label":"GridVideo",
    "type":"keyword",
    "info":"GridVideo[{v , v , â¦}] creates a video in which each frame is a grid of frames of all v  at the corr"
  },
  {
    "label":"GroebnerBasis",
    "type":"keyword",
    "info":"GroebnerBasis[{poly , poly , â¦}, {x , x , â¦}] gives a list of polynomials that form a GrÃ\\[Paragraph]bner basis "
  },
  {
    "label":"GroupActionBase",
    "type":"keyword",
    "info":"GroupActionBase is an option to specify a base for a group."
  },
  {
    "label":"GroupBy",
    "type":"keyword",
    "info":"GroupBy[{elem , elem , â¦}, f] gives an association that groups the elem  into lists associated with "
  },
  {
    "label":"GroupCentralizer",
    "type":"keyword",
    "info":"GroupCentralizer[group, g] returns the centralizer of the element g in group."
  },
  {
    "label":"GroupElementFromWord",
    "type":"keyword",
    "info":"GroupElementFromWord[group, w] returns the element of group determined by the word w in the generato"
  },
  {
    "label":"GroupElementPosition",
    "type":"keyword",
    "info":"GroupElementPosition[group, g] returns the position of the element g in the list of elements of grou"
  },
  {
    "label":"GroupElementQ",
    "type":"keyword",
    "info":"GroupElementQ[group, g] returns True if the object g is an element of group and False otherwise."
  },
  {
    "label":"GroupElements",
    "type":"keyword",
    "info":"GroupElements[group] returns the list of all elements of group.GroupElements[group, {r , â¦, r }] ret"
  },
  {
    "label":"GroupElementToWord",
    "type":"keyword",
    "info":"GroupElementToWord[group, g] decomposes the group element g as a product of generators of group."
  },
  {
    "label":"GroupGenerators",
    "type":"keyword",
    "info":"GroupGenerators[group] returns a list of generators of group. "
  },
  {
    "label":"Groupings",
    "type":"keyword",
    "info":"Groupings[n, k] gives a list of all possible groupings of 1, â¦, n taken k at a time. Groupings[{a , "
  },
  {
    "label":"GroupMultiplicationTable",
    "type":"keyword",
    "info":"GroupMultiplicationTable[group] gives the multiplication table of group as an array."
  },
  {
    "label":"GroupOpenerColor",
    "type":"keyword",
    "info":"System`GroupOpenerColor"
  },
  {
    "label":"GroupOpenerInsideFrame",
    "type":"keyword",
    "info":"System`GroupOpenerInsideFrame"
  },
  {
    "label":"GroupOrbits",
    "type":"keyword",
    "info":"GroupOrbits[group, {p , â¦}] returns the orbits of the points p  under the action of the elements of "
  },
  {
    "label":"GroupOrder",
    "type":"keyword",
    "info":"GroupOrder[group] returns the number of elements of group."
  },
  {
    "label":"GroupPageBreakWithin",
    "type":"keyword",
    "info":"GroupPageBreakWithin is an option for Cell that specifies whether a page break should be allowed wit"
  },
  {
    "label":"GroupSetwiseStabilizer",
    "type":"keyword",
    "info":"GroupSetwiseStabilizer[group, {p , â¦, p }] returns the subgroup of group for which the images of the"
  },
  {
    "label":"GroupStabilizer",
    "type":"keyword",
    "info":"GroupStabilizer[group, {p , â¦, p }] returns the subgroup of elements of group that move none of the "
  },
  {
    "label":"GroupStabilizerChain",
    "type":"keyword",
    "info":"GroupStabilizerChain[group] returns a list of successive stabilizers in group of the points in a bas"
  },
  {
    "label":"GroupTogetherGrouping",
    "type":"keyword",
    "info":"System`GroupTogetherGrouping"
  },
  {
    "label":"GroupTogetherNestedGrouping",
    "type":"keyword",
    "info":"System`GroupTogetherNestedGrouping"
  },
  {
    "label":"GrowCutComponents",
    "type":"keyword",
    "info":"GrowCutComponents[image, {marker , marker , â¦}] creates a segmentation from image by growing each ma"
  },
  {
    "label":"Gudermannian",
    "type":"keyword",
    "info":"Gudermannian[z] gives the Gudermannian function gd(z)."
  },
  {
    "label":"GuidedFilter",
    "type":"keyword",
    "info":"GuidedFilter[image, guide, r, Ï\\[Micro]] filters image using the guide image guide over range-r neighborhood"
  },
  {
    "label":"GumbelDistribution",
    "type":"keyword",
    "info":"GumbelDistribution[Î\\[PlusMinus], Î\.b2] represents a Gumbel distribution with location parameter Î\\[PlusMinus] and scale parame"
  },
  {
    "label":"HaarWavelet",
    "type":"keyword",
    "info":"HaarWavelet[] represents a Haar wavelet. "
  },
  {
    "label":"HadamardMatrix",
    "type":"keyword",
    "info":"HadamardMatrix[n] returns an nÃn Hadamard matrix."
  },
  {
    "label":"HalfLine",
    "type":"keyword",
    "info":"HalfLine[{p , p }] represents the half-line from the point p  through p . HalfLine[p, v] represents "
  },
  {
    "label":"HalfNormalDistribution",
    "type":"keyword",
    "info":"HalfNormalDistribution[Î¸] represents a half-normal distribution with scale inversely proportional to"
  },
  {
    "label":"HalfPlane",
    "type":"keyword",
    "info":"HalfPlane[{p , p }, w] represents the half-plane bounded by the line through p  and p  and extended "
  },
  {
    "label":"HalfSpace",
    "type":"keyword",
    "info":"HalfSpace[n, p] represents the half-space of points x such that n . (x - p) â¤ 0.HalfSpace[n, c] repr"
  },
  {
    "label":"HalftoneShading",
    "type":"keyword",
    "info":"HalftoneShading[] is a three-dimensional graphics directive specifying that surfaces that follow are"
  },
  {
    "label":"HamiltonianGraphQ",
    "type":"keyword",
    "info":"HamiltonianGraphQ[g] yields True if the graph g is Hamiltonian, and False otherwise."
  },
  {
    "label":"HammingDistance",
    "type":"keyword",
    "info":"HammingDistance[u, v] gives the Hamming distance between strings or vectors u and v.HammingDistance["
  },
  {
    "label":"HammingWindow",
    "type":"keyword",
    "info":"HammingWindow[x] represents a Hamming window function of x."
  },
  {
    "label":"HandlerFunctions",
    "type":"keyword",
    "info":"HandlerFunctions is an option for asynchronous operations that specifies functions to apply when eve"
  },
  {
    "label":"HandlerFunctionsKeys",
    "type":"keyword",
    "info":"HandlerFunctionsKeys is an option for asynchronous operations that specifies the content of associat"
  },
  {
    "label":"HankelH1",
    "type":"keyword",
    "info":"                                                            (1)\nHankelH1[n, z] gives the Hankel func"
  },
  {
    "label":"HankelH2",
    "type":"keyword",
    "info":"                                                             (2)\nHankelH2[n, z] gives the Hankel fun"
  },
  {
    "label":"HankelMatrix",
    "type":"keyword",
    "info":"HankelMatrix[n] gives the nÃn Hankel matrix with first row and first column being successive integer"
  },
  {
    "label":"HankelTransform",
    "type":"keyword",
    "info":"HankelTransform[expr, r, s] gives the Hankel transform of order 0 for expr.HankelTransform[expr, r, "
  },
  {
    "label":"HannPoissonWindow",
    "type":"keyword",
    "info":"HannPoissonWindow[x] represents a HannâPoisson window function of x.HannPoissonWindow[x, Î\\[PlusMinus]] uses the"
  },
  {
    "label":"HannWindow",
    "type":"keyword",
    "info":"HannWindow[x] represents a Hann window function of x.HannWindow[x, Î\\[PlusMinus]] uses the parameter Î\\[PlusMinus].\n"
  },
  {
    "label":"HaradaNortonGroupHN",
    "type":"keyword",
    "info":"HaradaNortonGroupHN[] represents the sporadic simple HaradaâNorton group HN."
  },
  {
    "label":"HararyGraph",
    "type":"keyword",
    "info":"HararyGraph[k, n] generates the minimal k-connected graph on n vertices H    .\n                     "
  },
  {
    "label":"HardcorePointProcess",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"HarmonicMean",
    "type":"keyword",
    "info":"HarmonicMean[list] gives the harmonic mean of the values in list."
  },
  {
    "label":"HarmonicMeanFilter",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"HarmonicNumber",
    "type":"keyword",
    "info":"                              th                                                                    "
  },
  {
    "label":"Hash",
    "type":"keyword",
    "info":"Hash[expr] gives an integer hash code for the expression expr.Hash[expr, \"type\"] gives an integer ha"
  },
  {
    "label":"HatchFilling",
    "type":"keyword",
    "info":"HatchFilling[] is a two-dimensional graphics directive that specifies that faces of polygons and oth"
  },
  {
    "label":"HatchShading",
    "type":"keyword",
    "info":"HatchShading[] is a three-dimensional graphics directive specifying that objects that follow are to "
  },
  {
    "label":"Haversine",
    "type":"keyword",
    "info":"Haversine[z] gives the haversine function hav(z)."
  },
  {
    "label":"HazardFunction",
    "type":"keyword",
    "info":"HazardFunction[dist, x] gives the hazard function for the distribution dist evaluated at x.HazardFun"
  },
  {
    "label":"Head",
    "type":"keyword",
    "info":"Head[expr] gives the head of expr. Head[expr, h] wraps the result with h.\n"
  },
  {
    "label":"HeadCompose",
    "type":"keyword",
    "info":"HeadCompose[a, b, c, d] gives a[b][c][d]."
  },
  {
    "label":"HeaderAlignment",
    "type":"keyword",
    "info":"HeaderAlignment is an option for Dataset that specifies how the contents of a header should be align"
  },
  {
    "label":"HeaderBackground",
    "type":"keyword",
    "info":"HeaderBackground is an option for Dataset that specifies what background color to use for row and co"
  },
  {
    "label":"HeaderDisplayFunction",
    "type":"keyword",
    "info":"HeaderDisplayFunction is an option for Dataset that specifies a function to apply to headers before "
  },
  {
    "label":"HeaderLines",
    "type":"keyword",
    "info":"HeaderLines is an option for SemanticImport and related functions that specifies how many of the ini"
  },
  {
    "label":"Headers",
    "type":"keyword",
    "info":"System`Headers"
  },
  {
    "label":"HeaderSize",
    "type":"keyword",
    "info":"HeaderSize is an option for Dataset that specifies the widths and heights of headers."
  },
  {
    "label":"HeaderStyle",
    "type":"keyword",
    "info":"HeaderStyle is an option for Dataset that specifies the style to use for headers."
  },
  {
    "label":"Heads",
    "type":"keyword",
    "info":"Heads is an option for functions which use level specifications that specifies whether heads of expr"
  },
  {
    "label":"HeatFluxValue",
    "type":"keyword",
    "info":"HeatFluxValue[pred, vars, pars] represents a thermal heat flux boundary condition for PDEs with pred"
  },
  {
    "label":"HeatInsulationValue",
    "type":"keyword",
    "info":"HeatInsulationValue[pred, vars, pars] represents a thermal insulation boundary condition for PDEs wi"
  },
  {
    "label":"HeatOutflowValue",
    "type":"keyword",
    "info":"HeatOutflowValue[pred, vars, pars] represents a thermal outflow boundary condition for PDEs with pre"
  },
  {
    "label":"HeatRadiationValue",
    "type":"keyword",
    "info":"HeatRadiationValue[pred, vars, pars] represents a thermal radiation boundary condition for PDEs with"
  },
  {
    "label":"HeatSymmetryValue",
    "type":"keyword",
    "info":"HeatSymmetryValue[pred, vars, pars] represents a thermal symmetry boundary condition for PDEs with p"
  },
  {
    "label":"HeatTemperatureCondition",
    "type":"keyword",
    "info":"HeatTemperatureCondition[pred, vars, pars] represents a thermal surface boundary condition for PDEs "
  },
  {
    "label":"HeatTransferPDEComponent",
    "type":"keyword",
    "info":"HeatTransferPDEComponent[vars, pars] yields a heat transfer PDE term with variables vars and paramet"
  },
  {
    "label":"HeatTransferValue",
    "type":"keyword",
    "info":"HeatTransferValue[pred, vars, pars] represents a thermal transfer boundary condition for PDEs with p"
  },
  {
    "label":"HeavisideLambda",
    "type":"keyword",
    "info":"HeavisideLambda[x] represents the triangle distribution Î(x) which is nonzero for ï x ï < 1.Heavisid"
  },
  {
    "label":"HeavisidePi",
    "type":"keyword",
    "info":"                                                                            1                   1   "
  },
  {
    "label":"HeavisideTheta",
    "type":"keyword",
    "info":"HeavisideTheta[x] represents the Heaviside theta function Î¸(x), equal to 0 for x < 0 and 1 for x > 0"
  },
  {
    "label":"HeldGroupHe",
    "type":"keyword",
    "info":"HeldGroupHe[] represents the sporadic simple Held group He."
  },
  {
    "label":"HeldPart",
    "type":"keyword",
    "info":"System`HeldPart"
  },
  {
    "label":"HelmholtzPDEComponent",
    "type":"keyword",
    "info":"                                                               2                 2\nHelmholtzPDECompo"
  },
  {
    "label":"HelpBrowserLookup",
    "type":"keyword",
    "info":"System`HelpBrowserLookup"
  },
  {
    "label":"HelpBrowserNotebook",
    "type":"keyword",
    "info":"System`HelpBrowserNotebook"
  },
  {
    "label":"HelpBrowserSettings",
    "type":"keyword",
    "info":"HelpBrowserSettings is a global option that specifies settings for the legacy Help Browser."
  },
  {
    "label":"Here",
    "type":"keyword",
    "info":"Here represents the current deduced geo location."
  },
  {
    "label":"HermiteDecomposition",
    "type":"keyword",
    "info":"HermiteDecomposition[m] gives the Hermite normal form decomposition of an integer matrix m."
  },
  {
    "label":"HermiteH",
    "type":"keyword",
    "info":"HermiteH[n, x] gives the Hermite polynomial H (x). \n                                             n"
  },
  {
    "label":"Hermitian",
    "type":"keyword",
    "info":"Hermitian[{1, 2}] represents the symmetry of a Hermitian matrix."
  },
  {
    "label":"HermitianMatrixQ",
    "type":"keyword",
    "info":"HermitianMatrixQ[m] gives True if m is explicitly Hermitian, and False otherwise. "
  },
  {
    "label":"HessenbergDecomposition",
    "type":"keyword",
    "info":"HessenbergDecomposition[m] gives the Hessenberg decomposition of a numerical matrix m. "
  },
  {
    "label":"Hessian",
    "type":"keyword",
    "info":"System`Hessian"
  },
  {
    "label":"HeunB",
    "type":"keyword",
    "info":"HeunB[q, Î\\[PlusMinus], Î\.b3, Î\.b4, Ï\\[Micro], z] gives the bi-confluent Heun function. "
  },
  {
    "label":"HeunBPrime",
    "type":"keyword",
    "info":"HeunBPrime[q, Î\\[PlusMinus], Î\.b3, Î\.b4, Ï\\[Micro], z] gives the z-derivative of the HeunB function. "
  },
  {
    "label":"HeunC",
    "type":"keyword",
    "info":"HeunC[q, Î\\[PlusMinus], Î\.b3, Î\.b4, Ï\\[Micro], z] gives the confluent Heun function."
  },
  {
    "label":"HeunCPrime",
    "type":"keyword",
    "info":"HeunCPrime[q, Î\\[PlusMinus], Î\.b3, Î\.b4, Ï\\[Micro], z] gives the z-derivative of the HeunC function. "
  },
  {
    "label":"HeunD",
    "type":"keyword",
    "info":"HeunD[q, Î\\[PlusMinus], Î\.b3, Î\.b4, Ï\\[Micro], z] gives the double-confluent Heun function. "
  },
  {
    "label":"HeunDPrime",
    "type":"keyword",
    "info":"HeunDPrime[q, Î\\[PlusMinus], Î\.b3, Î\.b4, Ï\\[Micro], z] gives the z-derivative of the HeunD function. "
  },
  {
    "label":"HeunG",
    "type":"keyword",
    "info":"HeunG[a, q, Î\\[PlusMinus], Î\.b2, Î\.b3, Î\.b4, z] gives the general Heun function. "
  },
  {
    "label":"HeunGPrime",
    "type":"keyword",
    "info":"HeunGPrime[a, q, Î\\[PlusMinus], Î\.b2, Î\.b3, Î\.b4, z] gives the z-derivative of the HeunG function. "
  },
  {
    "label":"HeunT",
    "type":"keyword",
    "info":"HeunT[q, Î\\[PlusMinus], Î\.b3, Î\.b4, Ï\\[Micro], z] gives the tri-confluent Heun function. "
  },
  {
    "label":"HeunTPrime",
    "type":"keyword",
    "info":"HeunTPrime[q, Î\\[PlusMinus], Î\.b3, Î\.b4, Ï\\[Micro], z] gives the z-derivative of the HeunT function. "
  },
  {
    "label":"HexadecimalCharacter",
    "type":"keyword",
    "info":"HexadecimalCharacter represents a hexadecimal digit character 0â9, aâf, AâF in StringExpression."
  },
  {
    "label":"Hexahedron",
    "type":"keyword",
    "info":"Hexahedron[{p , p , â¦, p }] represents a filled hexahedron with corners p , p , â¦, p .Hexahedron[{{p"
  },
  {
    "label":"HexahedronBox",
    "type":"keyword",
    "info":"System`HexahedronBox"
  },
  {
    "label":"HexahedronBoxOptions",
    "type":"keyword",
    "info":"System`HexahedronBoxOptions"
  },
  {
    "label":"HiddenItems",
    "type":"keyword",
    "info":"HiddenItems is an option for Dataset that specifies which items to hide."
  },
  {
    "label":"HiddenMarkovProcess",
    "type":"keyword",
    "info":"HiddenMarkovProcess[i , m, em] represents a discrete-time, finite-state hidden Markov process with t"
  },
  {
    "label":"HiddenSurface",
    "type":"keyword",
    "info":"HiddenSurface is an option for SurfaceGraphics which specifies whether hidden surfaces are to be eli"
  },
  {
    "label":"Highlighted",
    "type":"keyword",
    "info":"Highlighted[expr] displays a highlighted version of expr."
  },
  {
    "label":"HighlightGraph",
    "type":"keyword",
    "info":"HighlightGraph[g, {a , a , â¦}] highlights the a  that can be vertices, edges, or subgraphs of g.High"
  },
  {
    "label":"HighlightImage",
    "type":"keyword",
    "info":"HighlightImage[image, roi] highlights the specified region of interest roi in image.HighlightImage[i"
  },
  {
    "label":"HighlightMesh",
    "type":"keyword",
    "info":"HighlightMesh[mr, {cellspec , cellspec , â¦}] highlights the cells specified by cellspec  in the mesh"
  },
  {
    "label":"HighpassFilter",
    "type":"keyword",
    "info":"HighpassFilter[data, Ï ] applies a highpass filter with a cutoff frequency Ï  to an array of data.Hi"
  },
  {
    "label":"HigmanSimsGroupHS",
    "type":"keyword",
    "info":"HigmanSimsGroupHS[] represents the sporadic simple HigmanâSims group HS."
  },
  {
    "label":"HilbertCurve",
    "type":"keyword",
    "info":"                                                           th                                       "
  },
  {
    "label":"HilbertFilter",
    "type":"keyword",
    "info":"HilbertFilter[data, Ï ] applies a Hilbert filter with a cutoff frequency Ï  to an array of data.Hilb"
  },
  {
    "label":"HilbertMatrix",
    "type":"keyword",
    "info":"HilbertMatrix[n] gives the nÃn Hilbert matrix with elements of the form 1\/(i + j - 1).HilbertMatrix["
  },
  {
    "label":"Histogram",
    "type":"keyword",
    "info":"Histogram[{x , x , â¦}] plots a histogram of the values x .Histogram[{x , x , â¦}, bspec] plots a hist"
  },
  {
    "label":"Histogram3D",
    "type":"keyword",
    "info":"Histogram3D[{{x , y }, {x , y }, â¦}] plots a 3D histogram of the values {x , y }.Histogram3D[{{x , y"
  },
  {
    "label":"HistogramDistribution",
    "type":"keyword",
    "info":"HistogramDistribution[{x , x , â¦}] represents the probability distribution corresponding to a histog"
  },
  {
    "label":"HistogramList",
    "type":"keyword",
    "info":"HistogramList[{x , x , â¦}] gives a list of bins and histogram heights of the values x .HistogramList"
  },
  {
    "label":"HistogramPointDensity",
    "type":"keyword",
    "info":"HistogramPointDensity[pdata] estimates the histogram point density function Î¼(x) for point data pdat"
  },
  {
    "label":"HistogramTransform",
    "type":"keyword",
    "info":"HistogramTransform[image] transforms pixel values of image so that its histogram is nearly flat.Hist"
  },
  {
    "label":"HistogramTransformInterpolation",
    "type":"keyword",
    "info":"HistogramTransformInterpolation[{x , x , â¦}] finds a function f so that the transformed values f(x )"
  },
  {
    "label":"HistoricalPeriodData",
    "type":"keyword",
    "info":"HistoricalPeriodData[entity, property] gives the value of the specified property for the historical "
  },
  {
    "label":"HitMissTransform",
    "type":"keyword",
    "info":"HitMissTransform[image, ker] gives the hit-or-miss transform of image with respect to the composite "
  },
  {
    "label":"HITSCentrality",
    "type":"keyword",
    "info":"HITSCentrality[g] gives a list of authority and hub centralities for the vertices in the graph g.HIT"
  },
  {
    "label":"HjorthDistribution",
    "type":"keyword",
    "info":"HjorthDistribution[m, s, f] represents the Hjorth distribution with location parameter m, scale para"
  },
  {
    "label":"HodgeDual",
    "type":"keyword",
    "info":"HodgeDual[tensor] gives the Hodge dual of the tensorHodgeDual[tensor, dim] dualizes tensor in the sl"
  },
  {
    "label":"HoeffdingD",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"HoeffdingDTest",
    "type":"keyword",
    "info":"HoeffdingDTest[v , v ] tests whether the vectors v  and v  are independent.HoeffdingDTest[â¦, \"proper"
  },
  {
    "label":"Hold",
    "type":"keyword",
    "info":"Hold[expr] maintains expr in an unevaluated form. "
  },
  {
    "label":"HoldAll",
    "type":"keyword",
    "info":"HoldAll is an attribute that specifies that all arguments to a function are to be maintained in an u"
  },
  {
    "label":"HoldAllComplete",
    "type":"keyword",
    "info":"HoldAllComplete is an attribute which specifies that all arguments to a function are not to be modif"
  },
  {
    "label":"HoldComplete",
    "type":"keyword",
    "info":"HoldComplete[expr] shields expr completely from the standard Wolfram Language evaluation process, pr"
  },
  {
    "label":"HoldFirst",
    "type":"keyword",
    "info":"HoldFirst is an attribute that specifies that the first argument to a function is to be maintained i"
  },
  {
    "label":"HoldForm",
    "type":"keyword",
    "info":"HoldForm[expr] prints as the expression expr, with expr maintained in an unevaluated form. "
  },
  {
    "label":"HoldPattern",
    "type":"keyword",
    "info":"HoldPattern[expr] is equivalent to expr for pattern matching, but maintains expr in an unevaluated f"
  },
  {
    "label":"HoldRest",
    "type":"keyword",
    "info":"HoldRest is an attribute which specifies that all but the first argument to a function are to be mai"
  },
  {
    "label":"HolidayCalendar",
    "type":"keyword",
    "info":"HolidayCalendar is an option that specifies the holiday calendar schedule in business day functions."
  },
  {
    "label":"HomeDirectory",
    "type":"keyword",
    "info":"System`HomeDirectory"
  },
  {
    "label":"HomePage",
    "type":"keyword",
    "info":"System`HomePage"
  },
  {
    "label":"Horizontal",
    "type":"keyword",
    "info":"System`Horizontal"
  },
  {
    "label":"HorizontalForm",
    "type":"keyword",
    "info":"HorizontalForm is an internal symbol used for formatting and printing."
  },
  {
    "label":"HorizontalGauge",
    "type":"keyword",
    "info":"HorizontalGauge[value] draws a linear gauge showing value in a range of 0 to 1.HorizontalGauge[value"
  },
  {
    "label":"HorizontalScrollPosition",
    "type":"keyword",
    "info":"System`HorizontalScrollPosition"
  },
  {
    "label":"HornerForm",
    "type":"keyword",
    "info":"HornerForm[poly] puts the polynomial poly in Horner form.HornerForm[poly, vars] puts poly in Horner "
  },
  {
    "label":"HostLookup",
    "type":"keyword",
    "info":"HostLookup[name] gives the IP address for the host with the specified name.HostLookup[address] gives"
  },
  {
    "label":"HotellingTSquareDistribution",
    "type":"keyword",
    "info":"                                                           2\nHotellingTSquareDistribution[p, m] repr"
  },
  {
    "label":"HoytDistribution",
    "type":"keyword",
    "info":"HoytDistribution[q, Ï] represents a Hoyt distribution with shape parameter q and spread parameter Ï."
  },
  {
    "label":"HTMLSave",
    "type":"keyword",
    "info":"HTMLSave[\"file.html\"] saves an HTML version of the current input notebook in the front end. HTMLSave"
  },
  {
    "label":"HTTPErrorResponse",
    "type":"keyword",
    "info":"HTTPErrorResponse[code] is an object that represents an error response to an HTTP request, with spec"
  },
  {
    "label":"HTTPRedirect",
    "type":"keyword",
    "info":"HTTPRedirect[uri] represents an HTTP redirect to the specified uri.HTTPRedirect[uri, metadata] repre"
  },
  {
    "label":"HTTPRequest",
    "type":"keyword",
    "info":"HTTPRequest[url] represents an HTTP request for the specified URL.HTTPRequest[assoc] represents an H"
  },
  {
    "label":"HTTPRequestData",
    "type":"keyword",
    "info":"HTTPRequestData[\"prop\"] gives the value of the specified property of the current HTTP request.HTTPRe"
  },
  {
    "label":"HTTPResponse",
    "type":"keyword",
    "info":"HTTPResponse[body] is an object that represents a successful response to an HTTP request, with the s"
  },
  {
    "label":"Hue",
    "type":"keyword",
    "info":"Hue[h] represents a color in the HSB color space with hue h. Hue[h, s, b] specifies colors in terms "
  },
  {
    "label":"HumanGrowthData",
    "type":"keyword",
    "info":"HumanGrowthData[spec] returns the range of values within one standard deviation of the mean for all "
  },
  {
    "label":"HumpDownHump",
    "type":"keyword",
    "info":"HumpDownHump[x, y, â¦] displays as x â y â â¦."
  },
  {
    "label":"HumpEqual",
    "type":"keyword",
    "info":"HumpEqual[x, y, â¦] displays as x â y â â¦."
  },
  {
    "label":"HurwitzLerchPhi",
    "type":"keyword",
    "info":"HurwitzLerchPhi[z, s, a] gives the HurwitzâLerch transcendent Î¦(z, s, a)."
  },
  {
    "label":"HurwitzZeta",
    "type":"keyword",
    "info":"HurwitzZeta[s, a] gives the Hurwitz zeta function Î\\[Paragraph](s, a)."
  },
  {
    "label":"HyperbolicDistribution",
    "type":"keyword",
    "info":"HyperbolicDistribution[Î\\[PlusMinus], Î\.b2, Î\.b4, Î¼] represents a hyperbolic distribution with location parameter Î¼, s"
  },
  {
    "label":"HypercubeGraph",
    "type":"keyword",
    "info":"HypercubeGraph[n] gives the n-dimensional hypercube graph Q .\n                                      "
  },
  {
    "label":"HyperexponentialDistribution",
    "type":"keyword",
    "info":"HyperexponentialDistribution[{Î\\[PlusMinus] , â¦, Î\\[PlusMinus] }, {Î» , â¦, Î» }] represents an m-phase hyperexponential distri"
  },
  {
    "label":"Hyperfactorial",
    "type":"keyword",
    "info":"Hyperfactorial[n] gives the hyperfactorial function H(n)."
  },
  {
    "label":"Hypergeometric0F1",
    "type":"keyword",
    "info":"Hypergeometric0F1[a, z] is the confluent hypergeometric function ï   ï  F  (; a ; z). \n               "
  },
  {
    "label":"Hypergeometric0F1Regularized",
    "type":"keyword",
    "info":"Hypergeometric0F1Regularized[a, z] is the regularized confluent hypergeometric function ï   ï  F  (a ;"
  },
  {
    "label":"Hypergeometric1F1",
    "type":"keyword",
    "info":"Hypergeometric1F1[a, b, z] is the Kummer confluent hypergeometric function ï   ï  F  (a ; b ; z). \n   "
  },
  {
    "label":"Hypergeometric1F1Regularized",
    "type":"keyword",
    "info":"Hypergeometric1F1Regularized[a, b, z] is the regularized confluent hypergeometric function ï   ï  F  ("
  },
  {
    "label":"Hypergeometric2F1",
    "type":"keyword",
    "info":"Hypergeometric2F1[a, b, c, z] is the hypergeometric function ï\.b3  F (a, b ; c ; z). \n                 "
  },
  {
    "label":"Hypergeometric2F1Regularized",
    "type":"keyword",
    "info":"Hypergeometric2F1Regularized[a, b, c, z] is the regularized hypergeometric function ï   ï  F  (a, b ; "
  },
  {
    "label":"HypergeometricDistribution",
    "type":"keyword",
    "info":"HypergeometricDistribution[n, n    , n   ] represents a hypergeometric distribution.\n               "
  },
  {
    "label":"HypergeometricPFQ",
    "type":"keyword",
    "info":"HypergeometricPFQ[{a , â¦, a }, {b , â¦, b }, z] is the generalized hypergeometric function ï   ï  F  (a"
  },
  {
    "label":"HypergeometricPFQRegularized",
    "type":"keyword",
    "info":"HypergeometricPFQRegularized[{a , â¦, a }, {b , â¦, b }, z] is the regularized generalized hypergeomet"
  },
  {
    "label":"HypergeometricU",
    "type":"keyword",
    "info":"HypergeometricU[a, b, z] is the confluent hypergeometric function U(a, b, z). "
  },
  {
    "label":"Hyperlink",
    "type":"keyword",
    "info":"Hyperlink[uri] represents a hyperlink that jumps to the specified URI when clicked. Hyperlink[label,"
  },
  {
    "label":"HyperlinkAction",
    "type":"keyword",
    "info":"HyperlinkAction is an option for Hyperlink that controls the behavior of following links in cloud no"
  },
  {
    "label":"HyperlinkCreationSettings",
    "type":"keyword",
    "info":"System`HyperlinkCreationSettings"
  },
  {
    "label":"Hyperplane",
    "type":"keyword",
    "info":"Hyperplane[n, p] represents the hyperplane with normal n passing through the point p.Hyperplane[n, c"
  },
  {
    "label":"Hyphenation",
    "type":"keyword",
    "info":"Hyphenation is an option for Cell that specifies whether to allow hyphenation for words of text. "
  },
  {
    "label":"HyphenationOptions",
    "type":"keyword",
    "info":"System`HyphenationOptions"
  },
  {
    "label":"HypoexponentialDistribution",
    "type":"keyword",
    "info":"HypoexponentialDistribution[{Î» , â¦, Î» }] represents an m-phase hypoexponential distribution with rat"
  },
  {
    "label":"HypothesisTestData",
    "type":"keyword",
    "info":"HypothesisTestData[â¦] represents hypothesis test data such as generated by DistributionFitTest, Ande"
  },
  {
    "label":"I",
    "type":"keyword",
    "info":"I represents the imaginary unit Sqrt[-1]. "
  },
  {
    "label":"IconData",
    "type":"keyword",
    "info":"IconData[type, value] generates an icon of the specified type assuming the value given. "
  },
  {
    "label":"Iconize",
    "type":"keyword",
    "info":"Iconize[expr] gives an iconized form that can be used to stand in for expr in notebook input.Iconize"
  },
  {
    "label":"IconizedObject",
    "type":"keyword",
    "info":"System`IconizedObject"
  },
  {
    "label":"IconRules",
    "type":"keyword",
    "info":"IconRules is an option for CloudObject and related objects that specifies icons to use in different "
  },
  {
    "label":"Icosahedron",
    "type":"keyword",
    "info":"Icosahedron[] represents a regular icosahedron centered at the origin with unit edge length.Icosahed"
  },
  {
    "label":"Identity",
    "type":"keyword",
    "info":"Identity[expr] gives expr (the identity operation). "
  },
  {
    "label":"IdentityMatrix",
    "type":"keyword",
    "info":"IdentityMatrix[n] gives the nï n identity matrix. "
  },
  {
    "label":"If",
    "type":"keyword",
    "info":"If[condition, t, f] gives t if condition evaluates to True, and f if it evaluates to False. If[condi"
  },
  {
    "label":"IgnoreCase",
    "type":"keyword",
    "info":"IgnoreCase is an option for string manipulation and searching functions that specifies whether lower"
  },
  {
    "label":"IgnoreDiacritics",
    "type":"keyword",
    "info":"IgnoreDiacritics is an option for string, grammar, and related functions that specifies whether diac"
  },
  {
    "label":"IgnoreIsotopes",
    "type":"keyword",
    "info":"IgnoreIsotopes is an option for MoleculeMatchQ that determines whether isotopes should be ignored fo"
  },
  {
    "label":"IgnorePunctuation",
    "type":"keyword",
    "info":"IgnorePunctuation is an option for AlphabeticSort and related functions that specifies whether to co"
  },
  {
    "label":"IgnoreSpellCheck",
    "type":"keyword",
    "info":"System`IgnoreSpellCheck"
  },
  {
    "label":"IgnoreStereochemistry",
    "type":"keyword",
    "info":"IgnoreStereochemistry is an option for MoleculeMatchQ that determines whether stereochemistry should"
  },
  {
    "label":"IgnoringInactive",
    "type":"keyword",
    "info":"IgnoringInactive[patt] is a pattern object that, for purposes of pattern matching, ignores occurrenc"
  },
  {
    "label":"Im",
    "type":"keyword",
    "info":"Im[z] gives the imaginary part of the complex number z. "
  },
  {
    "label":"Image",
    "type":"keyword",
    "info":"Image[data] represents a raster image with pixel values given by the array data.Image[graphics] crea"
  },
  {
    "label":"Image3D",
    "type":"keyword",
    "info":"Image3D[data] represents a 3D image with pixel values given by the array data.Image3D[{image , image"
  },
  {
    "label":"Image3DProjection",
    "type":"keyword",
    "info":"Image3DProjection[image] takes a 3D image and returns a 2D image of maximum projection onto the x-y "
  },
  {
    "label":"Image3DSlices",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"ImageAccumulate",
    "type":"keyword",
    "info":"ImageAccumulate[image] gives an image in which each pixel represents a sum of all pixels below and t"
  },
  {
    "label":"ImageAdd",
    "type":"keyword",
    "info":"ImageAdd[image, x] adds an amount x to each channel value in image.ImageAdd[image , image ] gives an"
  },
  {
    "label":"ImageAdjust",
    "type":"keyword",
    "info":"ImageAdjust[image] adjusts the levels in image, rescaling them to cover the range 0 to 1.ImageAdjust"
  },
  {
    "label":"ImageAlign",
    "type":"keyword",
    "info":"ImageAlign[ref, image] returns a version of image that is aligned with the reference image ref.Image"
  },
  {
    "label":"ImageApply",
    "type":"keyword",
    "info":"ImageApply[f, image] applies the function f to the list of channel values for each pixel in image.Im"
  },
  {
    "label":"ImageApplyIndexed",
    "type":"keyword",
    "info":"ImageApplyIndexed[f, image] applies the function f to the list of channel values for each pixel in i"
  },
  {
    "label":"ImageAspectRatio",
    "type":"keyword",
    "info":"ImageAspectRatio[image] gives the ratio of height to width for image.ImageAspectRatio[video] gives t"
  },
  {
    "label":"ImageAssemble",
    "type":"keyword",
    "info":"ImageAssemble[{{im  , â¦, im  }, â¦, {im  , â¦, im  }}] assembles a single image from an array of image"
  },
  {
    "label":"ImageAugmentationLayer",
    "type":"keyword",
    "info":"ImageAugmentationLayer[{h, w}] represents a net layer that applies random image transformations to p"
  },
  {
    "label":"ImageBoundingBoxes",
    "type":"keyword",
    "info":"ImageBoundingBoxes[image] gives an association of lists of bounding boxes for each identified catego"
  },
  {
    "label":"ImageCache",
    "type":"keyword",
    "info":"System`ImageCache"
  },
  {
    "label":"ImageCacheValid",
    "type":"keyword",
    "info":"System`ImageCacheValid"
  },
  {
    "label":"ImageCapture",
    "type":"keyword",
    "info":"ImageCapture[] opens a graphical user interface for capturing images from connected cameras."
  },
  {
    "label":"ImageCaptureFunction",
    "type":"keyword",
    "info":"ImageCaptureFunction is an option for ImageCapture that specifies the function to apply to images ac"
  },
  {
    "label":"ImageCases",
    "type":"keyword",
    "info":"ImageCases[image] gives an association of lists of subimages for each identified category of objects"
  },
  {
    "label":"ImageChannels",
    "type":"keyword",
    "info":"ImageChannels[image] gives the number of channels present in the data for the Image or Image3D objec"
  },
  {
    "label":"ImageClip",
    "type":"keyword",
    "info":"ImageClip[image] clips all channel values in image to lie in the default range.ImageClip[image, {min"
  },
  {
    "label":"ImageCollage",
    "type":"keyword",
    "info":"ImageCollage[{image , image , â¦}] creates a collage of images image .ImageCollage[{w  ï¢ image , w  ï¢"
  },
  {
    "label":"ImageColorSpace",
    "type":"keyword",
    "info":"ImageColorSpace[image] gives the name of the color space of image."
  },
  {
    "label":"ImageCompose",
    "type":"keyword",
    "info":"ImageCompose[image, overlay] gives the result of overlaying overlay onto image. ImageCompose[image, "
  },
  {
    "label":"ImageContainsQ",
    "type":"keyword",
    "info":"ImageContainsQ[image, category] returns True if an instance of the specified category is detected in"
  },
  {
    "label":"ImageContents",
    "type":"keyword",
    "info":"ImageContents[image] gives a dataset of identified entities in image.ImageContents[image, category] "
  },
  {
    "label":"ImageConvolve",
    "type":"keyword",
    "info":"ImageConvolve[image, ker] gives the convolution of image with kernel ker."
  },
  {
    "label":"ImageCooccurrence",
    "type":"keyword",
    "info":"ImageCooccurrence[image, n] gives the nÃn co-occurrence matrix for image.ImageCooccurrence[image, n,"
  },
  {
    "label":"ImageCorners",
    "type":"keyword",
    "info":"ImageCorners[image] finds corners in image and returns their coordinates.ImageCorners[image, r] find"
  },
  {
    "label":"ImageCorrelate",
    "type":"keyword",
    "info":"ImageCorrelate[image, ker] gives the correlation of image with kernel ker.ImageCorrelate[image, ker,"
  },
  {
    "label":"ImageCorrespondingPoints",
    "type":"keyword",
    "info":"ImageCorrespondingPoints[image , image ] finds a set of matching interest points in image  and image"
  },
  {
    "label":"ImageCrop",
    "type":"keyword",
    "info":"ImageCrop[image] crops image by removing borders of uniform color. ImageCrop[image, size] crops imag"
  },
  {
    "label":"ImageData",
    "type":"keyword",
    "info":"ImageData[image] gives the array of pixel values in an Image or Image3D object image.ImageData[image"
  },
  {
    "label":"ImageDeconvolve",
    "type":"keyword",
    "info":"ImageDeconvolve[image, ker] gives a deconvolution of image using kernel ker."
  },
  {
    "label":"ImageDemosaic",
    "type":"keyword",
    "info":"ImageDemosaic[image, cfa] reconstructs a color image using the specified color filter array cfa.Imag"
  },
  {
    "label":"ImageDifference",
    "type":"keyword",
    "info":"ImageDifference[image , image ] gives an image in which each pixel is the absolute difference of the"
  },
  {
    "label":"ImageDimensions",
    "type":"keyword",
    "info":"ImageDimensions[image] gives the pixel dimensions of an Image or Image3D object image.ImageDimension"
  },
  {
    "label":"ImageDisplacements",
    "type":"keyword",
    "info":"ImageDisplacements[{image , image , â¦, image }] gives estimated horizontal and vertical displacement"
  },
  {
    "label":"ImageDistance",
    "type":"keyword",
    "info":"ImageDistance[image , image ] returns a distance measure between image  and image . ImageDistance[im"
  },
  {
    "label":"ImageEditMode",
    "type":"keyword",
    "info":"System`ImageEditMode"
  },
  {
    "label":"ImageEffect",
    "type":"keyword",
    "info":"ImageEffect[image, \"effect\"] applies the specified image effect to image.ImageEffect[image, {\"effect"
  },
  {
    "label":"ImageExposureCombine",
    "type":"keyword",
    "info":"ImageExposureCombine[{image , image , â¦}] combines differently exposed images image  of the same sce"
  },
  {
    "label":"ImageFeatureTrack",
    "type":"keyword",
    "info":"ImageFeatureTrack[{image , image , â¦, image }] tracks features from image  through image .ImageFeatu"
  },
  {
    "label":"ImageFileApply",
    "type":"keyword",
    "info":"ImageFileApply[f, inputfile, outputfile] applies the function f to the list of channel values for ea"
  },
  {
    "label":"ImageFileFilter",
    "type":"keyword",
    "info":"ImageFileFilter[f, inputfile, r, outputfile] applies the function f to the range r neighborhood of e"
  },
  {
    "label":"ImageFileScan",
    "type":"keyword",
    "info":"ImageFileScan[f, inputfile] applies the function f to the list of channel values for each pixel of t"
  },
  {
    "label":"ImageFilter",
    "type":"keyword",
    "info":"ImageFilter[f, image, r] applies the function f to the range-r neighborhood of each pixel in each ch"
  },
  {
    "label":"ImageFocusCombine",
    "type":"keyword",
    "info":"ImageFocusCombine[{image , image , â¦}] combines differently focused images image  of the same scene "
  },
  {
    "label":"ImageForestingComponents",
    "type":"keyword",
    "info":"ImageForestingComponents[image] finds a segmentation of image, returning an integer matrix in which "
  },
  {
    "label":"ImageFormattingWidth",
    "type":"keyword",
    "info":"ImageFormattingWidth is an option that specifies the target width at which to wrap when formatting a"
  },
  {
    "label":"ImageForwardTransformation",
    "type":"keyword",
    "info":"ImageForwardTransformation[image, f] gives an image in which each pixel at position f[{x, y}] corres"
  },
  {
    "label":"ImageGraphics",
    "type":"keyword",
    "info":"ImageGraphics[image] returns the content of image in the form of scalable vector graphics.ImageGraph"
  },
  {
    "label":"ImageHistogram",
    "type":"keyword",
    "info":"ImageHistogram[image] plots a histogram of the pixel levels for each channel in image.ImageHistogram"
  },
  {
    "label":"ImageIdentify",
    "type":"keyword",
    "info":"ImageIdentify[image] yields the result of attempting to identify what image is a picture of. ImageId"
  },
  {
    "label":"ImageInstanceQ",
    "type":"keyword",
    "info":"ImageInstanceQ[image, obj] gives True if image appears to be an instance of the object obj, and give"
  },
  {
    "label":"ImageKeypoints",
    "type":"keyword",
    "info":"ImageKeypoints[image] finds key features in image and returns their coordinates.ImageKeypoints[image"
  },
  {
    "label":"ImageLabels",
    "type":"keyword",
    "info":"ImageLabels is an option for image highlighting that specifies what labels to use for each highlight"
  },
  {
    "label":"ImageLegends",
    "type":"keyword",
    "info":"ImageLegends is an option for image highlighting that specifies what legends to use."
  },
  {
    "label":"ImageLevels",
    "type":"keyword",
    "info":"ImageLevels[image] gives a list of pixel values and counts for each channel in image. ImageLevels[im"
  },
  {
    "label":"ImageLines",
    "type":"keyword",
    "info":"ImageLines[image] finds line segments in image and returns the coordinates of their endpoints.ImageL"
  },
  {
    "label":"ImageMargins",
    "type":"keyword",
    "info":"ImageMargins is an option that specifies the absolute margins to leave around the image displayed fo"
  },
  {
    "label":"ImageMarker",
    "type":"keyword",
    "info":"ImageMarker[pos] is a HighlightImage specification that represents a marker at position pos.ImageMar"
  },
  {
    "label":"ImageMarkers",
    "type":"keyword",
    "info":"System`ImageMarkers"
  },
  {
    "label":"ImageMeasurements",
    "type":"keyword",
    "info":"ImageMeasurements[image, \"prop\"] returns the value of property \"prop\" for the entire image.ImageMeas"
  },
  {
    "label":"ImageMesh",
    "type":"keyword",
    "info":"ImageMesh[image] returns the foreground region in image as a BoundaryMeshRegion object."
  },
  {
    "label":"ImageMultiply",
    "type":"keyword",
    "info":"ImageMultiply[image, x] multiplies each channel value in image by a factor x.ImageMultiply[image , i"
  },
  {
    "label":"ImageOffset",
    "type":"keyword",
    "info":"System`ImageOffset"
  },
  {
    "label":"ImagePad",
    "type":"keyword",
    "info":"ImagePad[image, m] pads image on all sides with m background pixels.ImagePad[image, m, padding] pads"
  },
  {
    "label":"ImagePadding",
    "type":"keyword",
    "info":"ImagePadding is an option for graphics functions that specifies what absolute extra padding should b"
  },
  {
    "label":"ImagePartition",
    "type":"keyword",
    "info":"ImagePartition[image, s] partitions an image into an array of sï s-pixel subimages.ImagePartition[ima"
  },
  {
    "label":"ImagePeriodogram",
    "type":"keyword",
    "info":"ImagePeriodogram[image] shows the squared magnitude of the discrete Fourier transform (power spectru"
  },
  {
    "label":"ImagePerspectiveTransformation",
    "type":"keyword",
    "info":"ImagePerspectiveTransformation[image, m] applies a linear fractional transform specified by a matrix"
  },
  {
    "label":"ImagePosition",
    "type":"keyword",
    "info":"ImagePosition[image] gives an association of image positions for each identified category of objects"
  },
  {
    "label":"ImagePreviewFunction",
    "type":"keyword",
    "info":"ImagePreviewFunction is an option for CurrentImage and similar functions that specifies the function"
  },
  {
    "label":"ImagePyramid",
    "type":"keyword",
    "info":"ImagePyramid[image] creates a Gaussian image pyramid formed from image.ImagePyramid[image, pyrtype] "
  },
  {
    "label":"ImagePyramidApply",
    "type":"keyword",
    "info":"ImagePyramidApply[f, pyr] applies f to all images in the ImagePyramid object pyr.ImagePyramidApply[f"
  },
  {
    "label":"ImageQ",
    "type":"keyword",
    "info":"ImageQ[image] yields True if image has the form of a valid Image or Image3D object, and False otherw"
  },
  {
    "label":"ImageRangeCache",
    "type":"keyword",
    "info":"System`ImageRangeCache"
  },
  {
    "label":"ImageRecolor",
    "type":"keyword",
    "info":"ImageRecolor[image, region ï¢ color] recolors pixels in image specified by region using the specified"
  },
  {
    "label":"ImageReflect",
    "type":"keyword",
    "info":"ImageReflect[image] reverses image by top-bottom mirror reflection. ImageReflect[image, side] revers"
  },
  {
    "label":"ImageRegion",
    "type":"keyword",
    "info":"ImageRegion is an option for cells that specifies the size and position of the bounding box within w"
  },
  {
    "label":"ImageResize",
    "type":"keyword",
    "info":"ImageResize[image, width] gives a resized version of image that is width pixels wide.ImageResize[ima"
  },
  {
    "label":"ImageResolution",
    "type":"keyword",
    "info":"ImageResolution is an option for Export, Rasterize, and related functions that specifies at what res"
  },
  {
    "label":"ImageRestyle",
    "type":"keyword",
    "info":"ImageRestyle[image, sample] attempts to restyle image so as to follow the graphical style of sample."
  },
  {
    "label":"ImageRotate",
    "type":"keyword",
    "info":"ImageRotate[image] rotates image by 90Â\\[Degree] about its center in the x-y plane. ImageRotate[image, Î¸] rot"
  },
  {
    "label":"ImageRotated",
    "type":"keyword",
    "info":"ImageRotated is an option for Export that specifies whether images should be rotated into landscape "
  },
  {
    "label":"ImageSaliencyFilter",
    "type":"keyword",
    "info":"ImageSaliencyFilter[image] returns a saliency map for image."
  },
  {
    "label":"ImageScaled",
    "type":"keyword",
    "info":"ImageScaled[{x, y}] gives the position of a graphical object in terms of coordinates scaled to run f"
  },
  {
    "label":"ImageScan",
    "type":"keyword",
    "info":"ImageScan[f, image] evaluates f applied to each pixel of image in turn."
  },
  {
    "label":"ImageSize",
    "type":"keyword",
    "info":"ImageSize is an option that specifies the overall size of an image to display for an object. "
  },
  {
    "label":"ImageSizeAction",
    "type":"keyword",
    "info":"ImageSizeAction is an option for Pane and related constructs that specifies what to do if the specif"
  },
  {
    "label":"ImageSizeCache",
    "type":"keyword",
    "info":"System`ImageSizeCache"
  },
  {
    "label":"ImageSizeMultipliers",
    "type":"keyword",
    "info":"ImageSizeMultipliers is an option that specifies how much smaller to render graphics that appear wit"
  },
  {
    "label":"ImageSizeRaw",
    "type":"keyword",
    "info":"System`ImageSizeRaw"
  },
  {
    "label":"ImageStitch",
    "type":"keyword",
    "info":"ImageStitch[{image , image , â¦}] gives a composed image from an unordered list of image .ImageStitch"
  },
  {
    "label":"ImageSubtract",
    "type":"keyword",
    "info":"ImageSubtract[image, x] subtracts a constant amount x from each channel value in image.ImageSubtract"
  },
  {
    "label":"ImageTake",
    "type":"keyword",
    "info":"ImageTake[image, n] gives an image consisting of the first n rows of image.ImageTake[image, -n] give"
  },
  {
    "label":"ImageTransformation",
    "type":"keyword",
    "info":"ImageTransformation[image, f] gives an image in which each pixel at position p corresponds to the po"
  },
  {
    "label":"ImageTrim",
    "type":"keyword",
    "info":"ImageTrim[image, roi] gives the smallest subimage of image that includes the specified region of int"
  },
  {
    "label":"ImageType",
    "type":"keyword",
    "info":"ImageType[image] gives the underlying type of values used for each pixel element in the Image or Ima"
  },
  {
    "label":"ImageValue",
    "type":"keyword",
    "info":"ImageValue[image, pos] gives the interpolated value of image at position pos.ImageValue[image, pos, "
  },
  {
    "label":"ImageValuePositions",
    "type":"keyword",
    "info":"ImageValuePositions[image, val] returns a list of pixel positions in image that exactly match the va"
  },
  {
    "label":"ImageVectorscopePlot",
    "type":"keyword",
    "info":"ImageVectorscopePlot[image] plots the chrominance of image."
  },
  {
    "label":"ImageWaveformPlot",
    "type":"keyword",
    "info":"ImageWaveformPlot[image] plots the waveform of image.ImageWaveformPlot[image, colorspace] plots the "
  },
  {
    "label":"ImagingDevice",
    "type":"keyword",
    "info":"ImagingDevice is an option to specify what device to use for capturing images."
  },
  {
    "label":"ImplicitRegion",
    "type":"keyword",
    "info":"                                                          n                                         "
  },
  {
    "label":"Implies",
    "type":"keyword",
    "info":"Implies[p, q] represents the logical implication p â q. "
  },
  {
    "label":"Import",
    "type":"keyword",
    "info":"Import[source] imports data from source, returning a Wolfram Language representation of it.Import[so"
  },
  {
    "label":"ImportAutoReplacements",
    "type":"keyword",
    "info":"ImportAutoReplacements is an option for cells that specifies which replacement rules the Wolfram Lan"
  },
  {
    "label":"ImportByteArray",
    "type":"keyword",
    "info":"ImportByteArray[ba, \"format\"] imports data in the specified format from a ByteArray object.ImportByt"
  },
  {
    "label":"ImportedObject",
    "type":"keyword",
    "info":"ImportedObject[â¦] represents a piece of imported data that has no special representation in the Wolf"
  },
  {
    "label":"ImportOptions",
    "type":"keyword",
    "info":"ImportOptions is an option for Interpreter and related functions that specifies what options should "
  },
  {
    "label":"ImportString",
    "type":"keyword",
    "info":"ImportString[\"data\", \"format\"] imports data in the specified format from a string. ImportString[\"dat"
  },
  {
    "label":"ImprovementImportance",
    "type":"keyword",
    "info":"ImprovementImportance[rdist, t] gives the improvement importances for all components in the Reliabil"
  },
  {
    "label":"In",
    "type":"keyword",
    "info":"                                                                           th\nIn[n] is a global obje"
  },
  {
    "label":"Inactivate",
    "type":"keyword",
    "info":"Inactivate[expr] replaces all instances of f with Inactive[f] for symbols f used as heads in expr.In"
  },
  {
    "label":"Inactive",
    "type":"keyword",
    "info":"Inactive[f] is an inactive form of f."
  },
  {
    "label":"IncidenceGraph",
    "type":"keyword",
    "info":"IncidenceGraph[m] gives the graph with incidence matrix m.IncidenceGraph[{v , v , â¦}, m] gives the g"
  },
  {
    "label":"IncidenceList",
    "type":"keyword",
    "info":"IncidenceList[g, v] gives a list of edges incident to vertex v.IncidenceList[g, patt] gives a list o"
  },
  {
    "label":"IncidenceMatrix",
    "type":"keyword",
    "info":"IncidenceMatrix[g] gives the vertex-edge incidence matrix of the graph g.IncidenceMatrix[{v ï¢ w, â¦}]"
  },
  {
    "label":"IncludeAromaticBonds",
    "type":"keyword",
    "info":"IncludeAromaticBonds is an option for Molecule that specifies whether aromatic bonds should be detec"
  },
  {
    "label":"IncludeConstantBasis",
    "type":"keyword",
    "info":"IncludeConstantBasis is an option for LinearModelFit and other fitting functions that specifies whet"
  },
  {
    "label":"IncludedContexts",
    "type":"keyword",
    "info":"IncludedContexts is an option for FullDefinition, Manipulate and related symbols that gives contexts"
  },
  {
    "label":"IncludeDefinitions",
    "type":"keyword",
    "info":"IncludeDefinitions is an option for cloud and other functions that specifies whether current definit"
  },
  {
    "label":"IncludeDirectories",
    "type":"keyword",
    "info":"IncludeDirectories is an option that specifies whether directories are included in evaluations."
  },
  {
    "label":"IncludeFileExtension",
    "type":"keyword",
    "info":"IncludeFileExtension is an option for notebooks that specifies whether the suffix \".nb\" is automatic"
  },
  {
    "label":"IncludeGeneratorTasks",
    "type":"keyword",
    "info":"IncludeGeneratorTasks is an option controlling the scope of scheduled task listings."
  },
  {
    "label":"IncludeHydrogens",
    "type":"keyword",
    "info":"IncludeHydrogens is an option that specifies whether hydrogen atoms should be explicitly included in"
  },
  {
    "label":"IncludeInflections",
    "type":"keyword",
    "info":"IncludeInflections is an option for linguistic functions that specifies whether inflected forms of w"
  },
  {
    "label":"IncludeMetaInformation",
    "type":"keyword",
    "info":"IncludeMetaInformation is an option for Import, Thumbnail, and other functions to specify what types"
  },
  {
    "label":"IncludePods",
    "type":"keyword",
    "info":"IncludePods is an option for WolframAlpha that determines specific pod IDs to include in the results"
  },
  {
    "label":"IncludeQuantities",
    "type":"keyword",
    "info":"IncludeQuantities is an option for DimensionalCombinations for additional quantities to include in t"
  },
  {
    "label":"IncludeRelatedTables",
    "type":"keyword",
    "info":"IncludeRelatedTables is an option for RelationalDatabase that specifies whether to include tables sp"
  },
  {
    "label":"IncludeSingularTerm",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"IncludeWindowTimes",
    "type":"keyword",
    "info":"IncludeWindowTimes is an option to TimeSeriesWindow that specifies whether the endpoints in the time"
  },
  {
    "label":"Increment",
    "type":"keyword",
    "info":"x ++ increases the value of x by 1, returning the old value of x. "
  },
  {
    "label":"IndefiniteMatrixQ",
    "type":"keyword",
    "info":"IndefiniteMatrixQ[m] gives True if m is explicitly indefinite, and False otherwise. "
  },
  {
    "label":"Indent",
    "type":"keyword",
    "info":"System`Indent"
  },
  {
    "label":"IndentingNewlineSpacings",
    "type":"keyword",
    "info":"System`IndentingNewlineSpacings"
  },
  {
    "label":"IndentMaxFraction",
    "type":"keyword",
    "info":"System`IndentMaxFraction"
  },
  {
    "label":"IndependenceTest",
    "type":"keyword",
    "info":"IndependenceTest[v , v ] tests whether the vectors v  and v  are independent.IndependenceTest[m , m "
  },
  {
    "label":"IndependentEdgeSetQ",
    "type":"keyword",
    "info":"IndependentEdgeSetQ[g, elist] yields True if the edge list elist is an independent edge set of the g"
  },
  {
    "label":"IndependentPhysicalQuantity",
    "type":"keyword",
    "info":"IndependentPhysicalQuantity[string] represents a physical quantity string with no relationship to ot"
  },
  {
    "label":"IndependentUnit",
    "type":"keyword",
    "info":"IndependentUnit[string] represents a unit string with no relationship to other units within a Quanti"
  },
  {
    "label":"IndependentUnitDimension",
    "type":"keyword",
    "info":"IndependentUnitDimension[dim] represents the base dimension dim associated with an independent physi"
  },
  {
    "label":"IndependentVertexSetQ",
    "type":"keyword",
    "info":"IndependentVertexSetQ[g, vlist] yields True if the vertex list vlist is an independent vertex set in"
  },
  {
    "label":"Indeterminate",
    "type":"keyword",
    "info":"Indeterminate is a symbol that represents a numerical quantity whose magnitude cannot be determined."
  },
  {
    "label":"IndeterminateThreshold",
    "type":"keyword",
    "info":"IndeterminateThreshold is an option for Classify, Predict, and related functions that specifies belo"
  },
  {
    "label":"IndexCreationOptions",
    "type":"keyword",
    "info":"System`IndexCreationOptions"
  },
  {
    "label":"Indexed",
    "type":"keyword",
    "info":"Indexed[expr, i] represents the component of expr with index i and formats as expr .Indexed[expr, {i"
  },
  {
    "label":"IndexEdgeTaggedGraph",
    "type":"keyword",
    "info":"IndexEdgeTaggedGraph[g] sets tags of edges in the graph g to their edge indices.IndexEdgeTaggedGraph"
  },
  {
    "label":"IndexGraph",
    "type":"keyword",
    "info":"IndexGraph[g] replaces the vertices of the graph g by its vertex indices.IndexGraph[g, r] replaces t"
  },
  {
    "label":"IndexTag",
    "type":"keyword",
    "info":"System`IndexTag"
  },
  {
    "label":"Inequality",
    "type":"keyword",
    "info":"Inequality represents a sequence of relational statements."
  },
  {
    "label":"InexactNumberQ",
    "type":"keyword",
    "info":"InexactNumberQ[expr] returns True if expr is an inexact real or complex number, and returns False ot"
  },
  {
    "label":"InexactNumbers",
    "type":"keyword",
    "info":"System`InexactNumbers"
  },
  {
    "label":"InfiniteFuture",
    "type":"keyword",
    "info":"InfiniteFuture returns a DateObject expression representing infinite future in time."
  },
  {
    "label":"InfiniteLine",
    "type":"keyword",
    "info":"InfiniteLine[{p , p }] represents the infinite straight line passing through the points p  and p . I"
  },
  {
    "label":"InfinitePast",
    "type":"keyword",
    "info":"InfinitePast returns a DateObject expression representing infinite past in time."
  },
  {
    "label":"InfinitePlane",
    "type":"keyword",
    "info":"InfinitePlane[{p , p , p }] represents the plane passing through the points p , p , and p .InfiniteP"
  },
  {
    "label":"Infinity",
    "type":"keyword",
    "info":"Infinity or â is a symbol that represents a positive infinite quantity. "
  },
  {
    "label":"Infix",
    "type":"keyword",
    "info":"Infix[f[e , e , â¦]] prints with f[e , e , â¦] given in default infix form: e  ~ f ~ e  ~ f ~ e  â¦. In"
  },
  {
    "label":"InflationAdjust",
    "type":"keyword",
    "info":"InflationAdjust[quantity, targetdate] attempts to adjust the specified quantity purchasing power to "
  },
  {
    "label":"InflationMethod",
    "type":"keyword",
    "info":"InflationMethod is an option for InflationAdjust that specifies what time series data is to be used "
  },
  {
    "label":"Information",
    "type":"keyword",
    "info":"Information[expr] gives information about the expression expr. Information[expr, prop] gives the val"
  },
  {
    "label":"InformationData",
    "type":"keyword",
    "info":"InformationData[assoc] is generated by Information[expr] and handle typesetting and element extracti"
  },
  {
    "label":"InformationDataGrid",
    "type":"keyword",
    "info":"System`InformationDataGrid"
  },
  {
    "label":"Inherited",
    "type":"keyword",
    "info":"Inherited is an option to Methods and Fields (in J\/Link) and NETTypeInfo (in .NET\/Link). The default"
  },
  {
    "label":"InheritScope",
    "type":"keyword",
    "info":"InheritScope is an option for DynamicModule that specifies whether to attempt to bind variables refe"
  },
  {
    "label":"InhomogeneousPoissonPointProcess",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"InhomogeneousPoissonProcess",
    "type":"keyword",
    "info":"InhomogeneousPoissonProcess[Î»[t], t] represents an inhomogeneous Poisson process with intensity Î»[t]"
  },
  {
    "label":"InitialEvaluationHistory",
    "type":"keyword",
    "info":"InitialEvaluationHistory is an option for functions such as BayesianMinimization that gives an initi"
  },
  {
    "label":"Initialization",
    "type":"keyword",
    "info":"Initialization is an option for notebooks, cells, Dynamic, DynamicModule, Manipulate and related con"
  },
  {
    "label":"InitializationCell",
    "type":"keyword",
    "info":"InitializationCell is an option for Cell that specifies whether the cell should be tagged to be eval"
  },
  {
    "label":"InitializationCellEvaluation",
    "type":"keyword",
    "info":"InitializationCellEvaluation is an option for notebooks that specifies whether initialization cells "
  },
  {
    "label":"InitializationCellWarning",
    "type":"keyword",
    "info":"InitializationCellWarning is an option for notebooks that specifies whether a warning should be give"
  },
  {
    "label":"InitializationObject",
    "type":"keyword",
    "info":"InitializationObject[sym, loc] gives the persistent object where InitializationValue[sym, loc] is st"
  },
  {
    "label":"InitializationObjects",
    "type":"keyword",
    "info":"InitializationObjects[] gives the list of all persistent initialization objects in all locations in "
  },
  {
    "label":"InitializationValue",
    "type":"keyword",
    "info":"InitializationValue[sym] represents the settable persistent value with which the symbol sym will be "
  },
  {
    "label":"Initialize",
    "type":"keyword",
    "info":"Initialize[sym] initializes the symbol sym from persistent values on the default persistence path.In"
  },
  {
    "label":"InitialSeeding",
    "type":"keyword",
    "info":"InitialSeeding is an option for NDSolve and other functions that specifies equations that specify in"
  },
  {
    "label":"InlineCounterAssignments",
    "type":"keyword",
    "info":"System`InlineCounterAssignments"
  },
  {
    "label":"InlineCounterIncrements",
    "type":"keyword",
    "info":"System`InlineCounterIncrements"
  },
  {
    "label":"InlineRules",
    "type":"keyword",
    "info":"System`InlineRules"
  },
  {
    "label":"Inner",
    "type":"keyword",
    "info":"Inner[f, list , list , g] is a generalization of Dot in which f plays the role of multiplication and"
  },
  {
    "label":"InnerPolygon",
    "type":"keyword",
    "info":"InnerPolygon[poly] gives the inner polygon of the polygon poly."
  },
  {
    "label":"InnerPolyhedron",
    "type":"keyword",
    "info":"InnerPolyhedron[poly] gives the inner polyhedron of the polyhedron poly."
  },
  {
    "label":"Inpaint",
    "type":"keyword",
    "info":"Inpaint[image, region] retouches parts of image that correspond to nonzero elements in region."
  },
  {
    "label":"Input",
    "type":"keyword",
    "info":"Input[] interactively reads in one Wolfram Language expression. Input[prompt] requests input, displa"
  },
  {
    "label":"InputAliases",
    "type":"keyword",
    "info":"InputAliases is an option for cells and notebooks which specifies additional EscânameâEsc aliases to"
  },
  {
    "label":"InputAssumptions",
    "type":"keyword",
    "info":"InputAssumptions is an option for WolframAlpha that specifies assumptions for current query input."
  },
  {
    "label":"InputAutoReplacements",
    "type":"keyword",
    "info":"InputAutoReplacements is an option for cells and notebooks which specifies strings of characters tha"
  },
  {
    "label":"InputField",
    "type":"keyword",
    "info":"InputField[] represents a blank editable input field. InputField[x] represents an editable input fie"
  },
  {
    "label":"InputFieldBox",
    "type":"keyword",
    "info":"System`InputFieldBox"
  },
  {
    "label":"InputFieldBoxOptions",
    "type":"keyword",
    "info":"InputFieldBoxOptions ï¢ {opt  ï¢ val , opt  ï¢ val , â¦} is an option that specifies settings for InputF"
  },
  {
    "label":"InputForm",
    "type":"keyword",
    "info":"InputForm[expr] prints as a version of expr suitable for input to the Wolfram Language. "
  },
  {
    "label":"InputGrouping",
    "type":"keyword",
    "info":"System`InputGrouping"
  },
  {
    "label":"InputNamePacket",
    "type":"keyword",
    "info":"InputNamePacket[string] is a WSTP packet that contains in string the name to be assigned to the next"
  },
  {
    "label":"InputNotebook",
    "type":"keyword",
    "info":"InputNotebook[] gives the current notebook into which keyboard input in the front end will be direct"
  },
  {
    "label":"InputPacket",
    "type":"keyword",
    "info":"InputPacket[] is a WSTP packet that indicates a prompt for input as generated by Input."
  },
  {
    "label":"InputPorts",
    "type":"keyword",
    "info":"InputPorts is an option to specify the number, names or shapes of input ports for some neural net la"
  },
  {
    "label":"InputSettings",
    "type":"keyword",
    "info":"System`InputSettings"
  },
  {
    "label":"InputStream",
    "type":"keyword",
    "info":"InputStream[\"name\", n] is an object that represents an input stream for functions such as Read and F"
  },
  {
    "label":"InputString",
    "type":"keyword",
    "info":"InputString[] interactively reads in a character string. InputString[prompt] requests input, display"
  },
  {
    "label":"InputStringPacket",
    "type":"keyword",
    "info":"InputStringPacket[] is a WSTP packet that requests input in string form."
  },
  {
    "label":"InputToBoxFormPacket",
    "type":"keyword",
    "info":"InputToBoxFormPacket is an internal symbol used for formatting."
  },
  {
    "label":"Insert",
    "type":"keyword",
    "info":"Insert[list, elem, n] inserts elem at position n in list. If n is negative, the position is counted "
  },
  {
    "label":"InsertionFunction",
    "type":"keyword",
    "info":"InsertionFunction is an option for template functions that specifies how expressions are to be proce"
  },
  {
    "label":"InsertionPointObject",
    "type":"keyword",
    "info":"System`InsertionPointObject"
  },
  {
    "label":"InsertLinebreaks",
    "type":"keyword",
    "info":"InsertLinebreaks[\"string\"] inserts newline characters into string to make a string in which no line "
  },
  {
    "label":"InsertResults",
    "type":"keyword",
    "info":"InsertResults is an option for NotebookEvaluate that determines whether to place the results of eval"
  },
  {
    "label":"Inset",
    "type":"keyword",
    "info":"Inset[obj] represents an object obj inset in a graphic. Inset[obj, pos] specifies that the inset sho"
  },
  {
    "label":"Inset3DBox",
    "type":"keyword",
    "info":"System`Inset3DBox"
  },
  {
    "label":"Inset3DBoxOptions",
    "type":"keyword",
    "info":"Inset3DBoxOptions ï¢ {opt  ï¢ val , opt  ï¢ val , â¦} is an option that specifies settings for Inset3DBo"
  },
  {
    "label":"InsetBox",
    "type":"keyword",
    "info":"System`InsetBox"
  },
  {
    "label":"InsetBoxOptions",
    "type":"keyword",
    "info":"InsetBoxOptions ï¢ {opt  ï¢ val , opt  ï¢ val , â¦} is an option that specifies settings for InsetBox ob"
  },
  {
    "label":"Insphere",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"Install",
    "type":"keyword",
    "info":"Install[\"name\"] starts a WSTP-compatible external program and installs Wolfram Language definitions "
  },
  {
    "label":"InstallService",
    "type":"keyword",
    "info":"InstallService[\"url\"] installs the web service operations in the WSDL description at the URL given.I"
  },
  {
    "label":"InstanceNormalizationLayer",
    "type":"keyword",
    "info":"InstanceNormalizationLayer[] is equivalent to NormalizationLayer[]."
  },
  {
    "label":"InString",
    "type":"keyword",
    "info":"                                                                        th\nInString[n] is a global o"
  },
  {
    "label":"Integer",
    "type":"keyword",
    "info":"Integer is the head used for integers. "
  },
  {
    "label":"IntegerDigits",
    "type":"keyword",
    "info":"IntegerDigits[n] gives a list of the decimal digits in the integer n. IntegerDigits[n, b] gives a li"
  },
  {
    "label":"IntegerExponent",
    "type":"keyword",
    "info":"IntegerExponent[n, b] gives the highest power of b that divides n. "
  },
  {
    "label":"IntegerLength",
    "type":"keyword",
    "info":"IntegerLength[n] gives the number of digits in the base 10 representation of the integer n.IntegerLe"
  },
  {
    "label":"IntegerName",
    "type":"keyword",
    "info":"IntegerName[n] gives a string containing the full English name of the integer n.IntegerName[n, quali"
  },
  {
    "label":"IntegerPart",
    "type":"keyword",
    "info":"IntegerPart[x] gives the integer part of x. "
  },
  {
    "label":"IntegerPartitions",
    "type":"keyword",
    "info":"IntegerPartitions[n] gives a list of all possible ways to partition the integer n into smaller integ"
  },
  {
    "label":"IntegerQ",
    "type":"keyword",
    "info":"IntegerQ[expr] gives True if expr is an integer, and False otherwise. "
  },
  {
    "label":"IntegerReverse",
    "type":"keyword",
    "info":"IntegerReverse[n] gives the integer whose digits are reversed with respect to those of the integer n"
  },
  {
    "label":"Integers",
    "type":"keyword",
    "info":"Integers represents the domain of integers, as in x â Integers. "
  },
  {
    "label":"IntegerString",
    "type":"keyword",
    "info":"IntegerString[n] gives a string consisting of the decimal digits in the integer n. IntegerString[n, "
  },
  {
    "label":"Integral",
    "type":"keyword",
    "info":"System`Integral"
  },
  {
    "label":"Integrate",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"Interactive",
    "type":"keyword",
    "info":"Interactive is an option that specifies whether a function should create a user prompt when mimickin"
  },
  {
    "label":"InteractiveTradingChart",
    "type":"keyword",
    "info":"InteractiveTradingChart[{{date , {open , high , low , close , volume }}, â¦}] makes a chart showing p"
  },
  {
    "label":"InterfaceSwitched",
    "type":"keyword",
    "info":"InterfaceSwitched[ï size  ï¢ expr , size  ï¢ expr , â¦|>] is a construct that behaves as if it were exp"
  },
  {
    "label":"Interlaced",
    "type":"keyword",
    "info":"System`Interlaced"
  },
  {
    "label":"Interleaving",
    "type":"keyword",
    "info":"Interleaving is an option for Image and related functions that specifies whether data corresponding "
  },
  {
    "label":"InternallyBalancedDecomposition",
    "type":"keyword",
    "info":"InternallyBalancedDecomposition[ssm] yields the internally balanced decomposition of the state-space"
  },
  {
    "label":"InterpolatingFunction",
    "type":"keyword",
    "info":"InterpolatingFunction[domain, table] represents an approximate function whose values are found by in"
  },
  {
    "label":"InterpolatingPolynomial",
    "type":"keyword",
    "info":"InterpolatingPolynomial[{f , f , â¦}, x] constructs an interpolating polynomial in x which reproduces"
  },
  {
    "label":"Interpolation",
    "type":"keyword",
    "info":"Interpolation[{f , f , â¦}] constructs an interpolation of the function values f , assumed to corresp"
  },
  {
    "label":"InterpolationOrder",
    "type":"keyword",
    "info":"InterpolationOrder is an option for Interpolation, as well as ListLinePlot, ListPlot3D, ListContourP"
  },
  {
    "label":"InterpolationPoints",
    "type":"keyword",
    "info":"InterpolationPoints is an option to SmoothKernelDistribution and FunctionInterpolation that specifie"
  },
  {
    "label":"InterpolationPrecision",
    "type":"keyword",
    "info":"System`InterpolationPrecision"
  },
  {
    "label":"Interpretation",
    "type":"keyword",
    "info":"Interpretation[e, expr] represents an object that displays as e, but is interpreted as the unevaluat"
  },
  {
    "label":"InterpretationBox",
    "type":"keyword",
    "info":"InterpretationBox[boxes, expr] is a low-level box construct that displays as boxes but is interprete"
  },
  {
    "label":"InterpretationBoxOptions",
    "type":"keyword",
    "info":"InterpretationBoxOptions is an option for selections that specifies settings for InterpretationBox c"
  },
  {
    "label":"InterpretationFunction",
    "type":"keyword",
    "info":"InterpretationFunction is an option for TemplateBox that specifies how the box is to be evaluated."
  },
  {
    "label":"Interpreter",
    "type":"keyword",
    "info":"Interpreter[form] represents an interpreter object that can be applied to an input to try to interpr"
  },
  {
    "label":"InterpretTemplate",
    "type":"keyword",
    "info":"InterpretTemplate is an experimental function used for interpreting Mathematica input."
  },
  {
    "label":"InterquartileRange",
    "type":"keyword",
    "info":"InterquartileRange[list] gives the difference between the upper and lower quartiles for the elements"
  },
  {
    "label":"Interrupt",
    "type":"keyword",
    "info":"Interrupt[] generates an interrupt. "
  },
  {
    "label":"InterruptSettings",
    "type":"keyword",
    "info":"System`InterruptSettings"
  },
  {
    "label":"IntersectedEntityClass",
    "type":"keyword",
    "info":"IntersectedEntityClass[class , class , â¦] represents an entity class containing all the entities com"
  },
  {
    "label":"IntersectingQ",
    "type":"keyword",
    "info":"IntersectingQ[list , list ] yields True if list  and list  have at least one element in common, and "
  },
  {
    "label":"Intersection",
    "type":"keyword",
    "info":"Intersection[list , list , â¦] gives a sorted list of the elements common to all the list . \n        "
  },
  {
    "label":"Interval",
    "type":"keyword",
    "info":"Interval[{min, max}] represents the range of values between min and max. Interval[{min , max }, {min"
  },
  {
    "label":"IntervalIntersection",
    "type":"keyword",
    "info":"IntervalIntersection[interval , interval , â¦] gives the interval representing all points common to e"
  },
  {
    "label":"IntervalMarkers",
    "type":"keyword",
    "info":"IntervalMarkers is an option for plotting functions such as ListPlot and BarChart that specifies how"
  },
  {
    "label":"IntervalMarkersStyle",
    "type":"keyword",
    "info":"IntervalMarkersStyle  is an option for plotting functions that specifies styles in which uncertainty"
  },
  {
    "label":"IntervalMemberQ",
    "type":"keyword",
    "info":"IntervalMemberQ[interval, x] gives True if the number x lies within the specified interval, and Fals"
  },
  {
    "label":"IntervalSlider",
    "type":"keyword",
    "info":"IntervalSlider[{xmin, xmax}] represents a slider with setting {xmin, xmax} in the range 0 to 1.Inter"
  },
  {
    "label":"IntervalUnion",
    "type":"keyword",
    "info":"IntervalUnion[interval , interval , â¦] gives an interval containing the set of all points in any of "
  },
  {
    "label":"Into",
    "type":"keyword",
    "info":"System`Into"
  },
  {
    "label":"Inverse",
    "type":"keyword",
    "info":"Inverse[m] gives the inverse of a square matrix m. "
  },
  {
    "label":"InverseBetaRegularized",
    "type":"keyword",
    "info":"InverseBetaRegularized[s, a, b] gives the inverse of the regularized incomplete beta function. "
  },
  {
    "label":"InverseBilateralLaplaceTransform",
    "type":"keyword",
    "info":"InverseBilateralLaplaceTransform[expr, s, t] gives the inverse bilateral Laplace transform of expr. "
  },
  {
    "label":"InverseBilateralZTransform",
    "type":"keyword",
    "info":"InverseBilateralZTransform[expr, z, n] gives the inverse bilateral Z transform of expr.InverseBilate"
  },
  {
    "label":"InverseCDF",
    "type":"keyword",
    "info":"InverseCDF[dist, q] gives the inverse of the cumulative distribution function for the distribution d"
  },
  {
    "label":"InverseChiSquareDistribution",
    "type":"keyword",
    "info":"                                                       2                                            "
  },
  {
    "label":"InverseContinuousWaveletTransform",
    "type":"keyword",
    "info":"InverseContinuousWaveletTransform[cwd] gives the inverse continuous wavelet transform of a Continuou"
  },
  {
    "label":"InverseDistanceTransform",
    "type":"keyword",
    "info":"InverseDistanceTransform[image] gives the inverse distance transform of image, returning the result "
  },
  {
    "label":"InverseEllipticNomeQ",
    "type":"keyword",
    "info":"InverseEllipticNomeQ[q] gives the parameter m corresponding to the nome q in an elliptic function. "
  },
  {
    "label":"InverseErf",
    "type":"keyword",
    "info":"InverseErf[s] gives the inverse error function obtained as the solution for z in s = erf(z). "
  },
  {
    "label":"InverseErfc",
    "type":"keyword",
    "info":"InverseErfc[s] gives the inverse complementary error function obtained as the solution for z in s = "
  },
  {
    "label":"InverseFourier",
    "type":"keyword",
    "info":"InverseFourier[list] finds the discrete inverse Fourier transform of a list of complex numbers.Inver"
  },
  {
    "label":"InverseFourierCosTransform",
    "type":"keyword",
    "info":"InverseFourierCosTransform[expr, Ï, t] gives the symbolic inverse Fourier cosine transform of expr. "
  },
  {
    "label":"InverseFourierSequenceTransform",
    "type":"keyword",
    "info":"InverseFourierSequenceTransform[expr, Ï, n] gives the inverse discrete-time Fourier transform of exp"
  },
  {
    "label":"InverseFourierSinTransform",
    "type":"keyword",
    "info":"InverseFourierSinTransform[expr, Ï, t] gives the symbolic inverse Fourier sine transform of expr. In"
  },
  {
    "label":"InverseFourierTransform",
    "type":"keyword",
    "info":"InverseFourierTransform[expr, Ï, t] gives the symbolic inverse Fourier transform of expr. InverseFou"
  },
  {
    "label":"InverseFunction",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"InverseFunctions",
    "type":"keyword",
    "info":"InverseFunctions is an option for Solve and related functions that specifies whether inverse functio"
  },
  {
    "label":"InverseGammaDistribution",
    "type":"keyword",
    "info":"InverseGammaDistribution[Î\\[PlusMinus], Î\.b2] represents an inverse gamma distribution with shape parameter Î\\[PlusMinus] and s"
  },
  {
    "label":"InverseGammaRegularized",
    "type":"keyword",
    "info":"InverseGammaRegularized[a, s] gives the inverse of the regularized incomplete gamma function. "
  },
  {
    "label":"InverseGaussianDistribution",
    "type":"keyword",
    "info":"InverseGaussianDistribution[Î¼, Î»] represents an inverse Gaussian distribution with mean Î¼ and scale "
  },
  {
    "label":"InverseGudermannian",
    "type":"keyword",
    "info":"                                                                 -1\nInverseGudermannian[z] gives the"
  },
  {
    "label":"InverseHankelTransform",
    "type":"keyword",
    "info":"InverseHankelTransform[expr, s, r] gives the inverse Hankel transform of order 0 for expr.InverseHan"
  },
  {
    "label":"InverseHaversine",
    "type":"keyword",
    "info":"                                                            -1\nInverseHaversine[z] gives the inverse"
  },
  {
    "label":"InverseImagePyramid",
    "type":"keyword",
    "info":"InverseImagePyramid[pyr] reconstructs an image from an ImagePyramid object pyr.InverseImagePyramid[p"
  },
  {
    "label":"InverseJacobiCD",
    "type":"keyword",
    "info":"                                                                   -1\nInverseJacobiCD[v, m] gives th"
  },
  {
    "label":"InverseJacobiCN",
    "type":"keyword",
    "info":"                                                                   -1\nInverseJacobiCN[v, m] gives th"
  },
  {
    "label":"InverseJacobiCS",
    "type":"keyword",
    "info":"                                                                   -1\nInverseJacobiCS[v, m] gives th"
  },
  {
    "label":"InverseJacobiDC",
    "type":"keyword",
    "info":"                                                                   -1\nInverseJacobiDC[v, m] gives th"
  },
  {
    "label":"InverseJacobiDN",
    "type":"keyword",
    "info":"                                                                   -1\nInverseJacobiDN[v, m] gives th"
  },
  {
    "label":"InverseJacobiDS",
    "type":"keyword",
    "info":"                                                                   -1\nInverseJacobiDS[v, m] gives th"
  },
  {
    "label":"InverseJacobiNC",
    "type":"keyword",
    "info":"                                                                   -1\nInverseJacobiNC[v, m] gives th"
  },
  {
    "label":"InverseJacobiND",
    "type":"keyword",
    "info":"                                                                   -1\nInverseJacobiND[v, m] gives th"
  },
  {
    "label":"InverseJacobiNS",
    "type":"keyword",
    "info":"                                                                   -1\nInverseJacobiNS[v, m] gives th"
  },
  {
    "label":"InverseJacobiSC",
    "type":"keyword",
    "info":"                                                                   -1\nInverseJacobiSC[v, m] gives th"
  },
  {
    "label":"InverseJacobiSD",
    "type":"keyword",
    "info":"                                                                   -1\nInverseJacobiSD[v, m] gives th"
  },
  {
    "label":"InverseJacobiSN",
    "type":"keyword",
    "info":"                                                                   -1\nInverseJacobiSN[v, m] gives th"
  },
  {
    "label":"InverseLaplaceTransform",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"InverseMellinTransform",
    "type":"keyword",
    "info":"InverseMellinTransform[expr, s, x] gives the inverse Mellin transform of expr. "
  },
  {
    "label":"InversePermutation",
    "type":"keyword",
    "info":"InversePermutation[perm] returns the inverse of permutation perm."
  },
  {
    "label":"InverseRadon",
    "type":"keyword",
    "info":"InverseRadon[image] gives the inverse discrete Radon transform of image.InverseRadon[image, {w, h}] "
  },
  {
    "label":"InverseRadonTransform",
    "type":"keyword",
    "info":"InverseRadonTransform[expr, {p, Ï}, {x, y}] gives the inverse Radon transform of expr."
  },
  {
    "label":"InverseSeries",
    "type":"keyword",
    "info":"InverseSeries[s] takes the series s, and gives a series for the inverse of the function represented "
  },
  {
    "label":"InverseShortTimeFourier",
    "type":"keyword",
    "info":"InverseShortTimeFourier[input] reconstructs the signal from short-time Fourier data.InverseShortTime"
  },
  {
    "label":"InverseSpectrogram",
    "type":"keyword",
    "info":"InverseSpectrogram[data] reconstructs the signal from the magnitude spectrogram data.InverseSpectrog"
  },
  {
    "label":"InverseSurvivalFunction",
    "type":"keyword",
    "info":"InverseSurvivalFunction[dist, q] gives the inverse of the survival function for the distribution dis"
  },
  {
    "label":"InverseTransformedRegion",
    "type":"keyword",
    "info":"                                                                                    n\nInverseTransfo"
  },
  {
    "label":"InverseWaveletTransform",
    "type":"keyword",
    "info":"InverseWaveletTransform[dwd] gives the inverse wavelet transform of a DiscreteWaveletData object dwd"
  },
  {
    "label":"InverseWeierstrassP",
    "type":"keyword",
    "info":"InverseWeierstrassP[p, {g , g }] gives a value of u for which the Weierstrass function â (u ; g , g "
  },
  {
    "label":"InverseWishartMatrixDistribution",
    "type":"keyword",
    "info":"InverseWishartMatrixDistribution[Î½, Î£] represents an inverse Wishart matrix distribution with Î½ degr"
  },
  {
    "label":"InverseZTransform",
    "type":"keyword",
    "info":"InverseZTransform[expr, z, n] gives the inverse Z transform of expr. InverseZTransform[expr, {z , z "
  },
  {
    "label":"Invisible",
    "type":"keyword",
    "info":"Invisible[expr] displays as space that is the same size as the formatted version of expr."
  },
  {
    "label":"InvisibleApplication",
    "type":"keyword",
    "info":"System`InvisibleApplication"
  },
  {
    "label":"InvisibleTimes",
    "type":"keyword",
    "info":"System`InvisibleTimes"
  },
  {
    "label":"IPAddress",
    "type":"keyword",
    "info":"IPAddress[\"address\"] is a symbolic representation of an IPv4 or IPv6 IP address."
  },
  {
    "label":"IrreduciblePolynomialQ",
    "type":"keyword",
    "info":"IrreduciblePolynomialQ[poly] tests whether poly is an irreducible polynomial over the rationals.Irre"
  },
  {
    "label":"IslandData",
    "type":"keyword",
    "info":"IslandData[entity, property] gives the value of the specified property for the island entity.IslandD"
  },
  {
    "label":"IsolatingInterval",
    "type":"keyword",
    "info":"IsolatingInterval[a] gives a rational isolating interval for the algebraic number a.IsolatingInterva"
  },
  {
    "label":"IsomorphicGraphQ",
    "type":"keyword",
    "info":"IsomorphicGraphQ[g , g ] yields True if the graphs g  and g  are isomorphic, and False otherwise.\n  "
  },
  {
    "label":"IsomorphicSubgraphQ",
    "type":"keyword",
    "info":"IsomorphicSubgraphQ[g , g ] yields True if the graph g  is isomorphic to a subgraph of the graph g ."
  },
  {
    "label":"IsotopeData",
    "type":"keyword",
    "info":"IsotopeData[{Z, A}, \"property\"] gives the value of the specified property for the isotope with atomi"
  },
  {
    "label":"Italic",
    "type":"keyword",
    "info":"Italic represents an italic font slant."
  },
  {
    "label":"Item",
    "type":"keyword",
    "info":"Item[expr, options] represents an item within constructs such as Grid, Overlay, and Manipulate that "
  },
  {
    "label":"ItemAspectRatio",
    "type":"keyword",
    "info":"ItemAspectRatio is an option for GraphicsGrid which specifies the ratio of height to width for the r"
  },
  {
    "label":"ItemBox",
    "type":"keyword",
    "info":"System`ItemBox"
  },
  {
    "label":"ItemBoxOptions",
    "type":"keyword",
    "info":"ItemBoxOptions ï¢ {opt  ï¢ val , opt  ï¢ val , â¦} is an option that specifies settings for ItemBox obje"
  },
  {
    "label":"ItemDisplayFunction",
    "type":"keyword",
    "info":"ItemDisplayFunction is an option for Dataset that specifies a function to apply to items before disp"
  },
  {
    "label":"ItemSize",
    "type":"keyword",
    "info":"ItemSize is an option for Grid, Column, and related constructs that specifies the sizes to allow for"
  },
  {
    "label":"ItemStyle",
    "type":"keyword",
    "info":"ItemStyle is an option for Dataset, Grid and related constructs that specifies styles to use for ite"
  },
  {
    "label":"ItoProcess",
    "type":"keyword",
    "info":"ItoProcess[{a, b}, x, t] represents an Ito process x(t), where ï x(t) ï a(t, x(t)) ï t + b(t, x(t)) "
  },
  {
    "label":"JaccardDissimilarity",
    "type":"keyword",
    "info":"JaccardDissimilarity[u, v] gives the Jaccard dissimilarity between Boolean vectors u and v."
  },
  {
    "label":"JacobiAmplitude",
    "type":"keyword",
    "info":"JacobiAmplitude[u, m] gives the amplitude am(u ï\.b2 m) for Jacobi elliptic functions. "
  },
  {
    "label":"Jacobian",
    "type":"keyword",
    "info":"Jacobian is an option for FindRoot. Jacobian -> Automatic attempts symbolic computation of the Jacob"
  },
  {
    "label":"JacobiCD",
    "type":"keyword",
    "info":"JacobiCD[u, m] gives the Jacobi elliptic function cd(u | m)."
  },
  {
    "label":"JacobiCN",
    "type":"keyword",
    "info":"JacobiCN[u, m] gives the Jacobi elliptic function cn(u | m)."
  },
  {
    "label":"JacobiCS",
    "type":"keyword",
    "info":"JacobiCS[u, m] gives the Jacobi elliptic function cs(u | m)."
  },
  {
    "label":"JacobiDC",
    "type":"keyword",
    "info":"JacobiDC[u, m] gives the Jacobi elliptic function dc(u | m)."
  },
  {
    "label":"JacobiDN",
    "type":"keyword",
    "info":"JacobiDN[u, m] gives the Jacobi elliptic function dn(u | m)."
  },
  {
    "label":"JacobiDS",
    "type":"keyword",
    "info":"JacobiDS[u, m] gives the Jacobi elliptic function ds(u | m)."
  },
  {
    "label":"JacobiEpsilon",
    "type":"keyword",
    "info":"JacobiEpsilon[u, m] gives the Jacobi epsilon function â\\[Degree](u | m)."
  },
  {
    "label":"JacobiNC",
    "type":"keyword",
    "info":"JacobiNC[u, m] gives the Jacobi elliptic function nc(u | m)."
  },
  {
    "label":"JacobiND",
    "type":"keyword",
    "info":"JacobiND[u, m] gives the Jacobi elliptic function nd(u | m)."
  },
  {
    "label":"JacobiNS",
    "type":"keyword",
    "info":"JacobiNS[u, m] gives the Jacobi elliptic function ns(u | m)."
  },
  {
    "label":"JacobiP",
    "type":"keyword",
    "info":"                                                 (a, b)\nJacobiP[n, a, b, x] gives the Jacobi polynom"
  },
  {
    "label":"JacobiSC",
    "type":"keyword",
    "info":"JacobiSC[u, m] gives the Jacobi elliptic function sc(u | m)."
  },
  {
    "label":"JacobiSD",
    "type":"keyword",
    "info":"JacobiSD[u, m] gives the Jacobi elliptic function sd(u | m)."
  },
  {
    "label":"JacobiSN",
    "type":"keyword",
    "info":"JacobiSN[u, m] gives the Jacobi elliptic function sn(u | m)."
  },
  {
    "label":"JacobiSymbol",
    "type":"keyword",
    "info":"                                            n\nJacobiSymbol[n, m] gives the Jacobi symbol (-). \n     "
  },
  {
    "label":"JacobiZeta",
    "type":"keyword",
    "info":"JacobiZeta[Ï, m] gives the Jacobi zeta function Z(Ï ï\.b2 m). "
  },
  {
    "label":"JacobiZN",
    "type":"keyword",
    "info":"JacobiZN[u, m] gives the Jacobi zeta function zn(u | m)."
  },
  {
    "label":"JankoGroupJ1",
    "type":"keyword",
    "info":"JankoGroupJ1[] represents the sporadic simple Janko group J .\n                                      "
  },
  {
    "label":"JankoGroupJ2",
    "type":"keyword",
    "info":"JankoGroupJ2[] represents the sporadic simple Janko group J .\n                                      "
  },
  {
    "label":"JankoGroupJ3",
    "type":"keyword",
    "info":"JankoGroupJ3[] represents the sporadic simple Janko group J .\n                                      "
  },
  {
    "label":"JankoGroupJ4",
    "type":"keyword",
    "info":"JankoGroupJ4[] represents the sporadic simple Janko group J .\n                                      "
  },
  {
    "label":"JarqueBeraALMTest",
    "type":"keyword",
    "info":"JarqueBeraALMTest[data] tests whether data is normally distributed using the JarqueâBera ALM test.Ja"
  },
  {
    "label":"JohnsonDistribution",
    "type":"keyword",
    "info":"JohnsonDistribution[\"SB\", Î\.b3, Î\.b4, Î¼, Ï] represents a bounded Johnson distribution with shape parameter"
  },
  {
    "label":"Join",
    "type":"keyword",
    "info":"Join[list , list , â¦] concatenates lists or other expressions that share the same head.Join[list , l"
  },
  {
    "label":"JoinAcross",
    "type":"keyword",
    "info":"JoinAcross[{a , a , â¦}, {b , b , â¦}, key] gives a list of associations obtained by joining those pai"
  },
  {
    "label":"Joined",
    "type":"keyword",
    "info":"Joined is an option for ListPlot and related functions that specifies whether points in each dataset"
  },
  {
    "label":"JoinedCurve",
    "type":"keyword",
    "info":"JoinedCurve[{segment , segment , â¦}] represents a curve consisting of segment  followed by segment  "
  },
  {
    "label":"JoinedCurveBox",
    "type":"keyword",
    "info":"System`JoinedCurveBox"
  },
  {
    "label":"JoinedCurveBoxOptions",
    "type":"keyword",
    "info":"JoinedCurveBoxOptions ï¢ {opt  ï¢ val , opt  ï¢ val , â¦} is an option that specifies settings for Joine"
  },
  {
    "label":"JoinForm",
    "type":"keyword",
    "info":"JoinForm[type] is a graphics directive that specifies what type of joins should be used to connect s"
  },
  {
    "label":"JordanDecomposition",
    "type":"keyword",
    "info":"JordanDecomposition[m] yields the Jordan decomposition of a square matrix m. The result is a list {s"
  },
  {
    "label":"JordanModelDecomposition",
    "type":"keyword",
    "info":"JordanModelDecomposition[ssm] yields the Jordan decomposition of the state-space model ssm. "
  },
  {
    "label":"JulianDate",
    "type":"keyword",
    "info":"JulianDate[] gives the current number of days since noon on November 24, 4714 BCE in the GMT time zo"
  },
  {
    "label":"JuliaSetBoettcher",
    "type":"keyword",
    "info":"JuliaSetBoettcher[c, z] gives the BÃ\\[Paragraph]ttcher coordinate of z with respect to the quadratic Julia set J"
  },
  {
    "label":"JuliaSetIterationCount",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"JuliaSetPlot",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"JuliaSetPoints",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"K",
    "type":"keyword",
    "info":"K is a default generic name for a summation index in a symbolic sum."
  },
  {
    "label":"KagiChart",
    "type":"keyword",
    "info":"KagiChart[{{date , p }, {date , p }, â¦}] makes a Kagi chart with prices p  at date date .KagiChart[{"
  },
  {
    "label":"KaiserBesselWindow",
    "type":"keyword",
    "info":"KaiserBesselWindow[x] represents a KaiserâBessel window function of x."
  },
  {
    "label":"KaiserWindow",
    "type":"keyword",
    "info":"KaiserWindow[x] represents a Kaiser window function of x.KaiserWindow[x, Î\\[PlusMinus]] uses the parameter Î\\[PlusMinus].\n"
  },
  {
    "label":"KalmanEstimator",
    "type":"keyword",
    "info":"KalmanEstimator[ssm, {w, v}] constructs the Kalman estimator for the StateSpaceModel ssm with proces"
  },
  {
    "label":"KalmanFilter",
    "type":"keyword",
    "info":"KalmanFilter[tproc, data] filters data using the time series model given by tproc."
  },
  {
    "label":"KarhunenLoeveDecomposition",
    "type":"keyword",
    "info":"KarhunenLoeveDecomposition[{a , a , â¦}] gives the KarhunenâLoeve transform {{b , b , â¦}, m} of the n"
  },
  {
    "label":"KaryTree",
    "type":"keyword",
    "info":"KaryTree[n] gives a binary tree with n vertices.KaryTree[n, k] gives a k-ary tree with n vertices.\n"
  },
  {
    "label":"KatzCentrality",
    "type":"keyword",
    "info":"KatzCentrality[g, Î\\[PlusMinus]] gives a list of Katz centralities for the vertices in the graph g and weight Î\\[PlusMinus]."
  },
  {
    "label":"KCoreComponents",
    "type":"keyword",
    "info":"KCoreComponents[g, k] gives the k-core components of the underlying simple graph of g.KCoreComponent"
  },
  {
    "label":"KDistribution",
    "type":"keyword",
    "info":"KDistribution[Î½, w] represents a K distribution with shape parameters Î½ and w."
  },
  {
    "label":"KEdgeConnectedComponents",
    "type":"keyword",
    "info":"KEdgeConnectedComponents[g, k] gives the k-edge-connected components of the graph g.KEdgeConnectedCo"
  },
  {
    "label":"KEdgeConnectedGraphQ",
    "type":"keyword",
    "info":"KEdgeConnectedGraphQ[g, k] yields True if the graph g is k-edge-connected and False otherwise."
  },
  {
    "label":"KeepExistingVersion",
    "type":"keyword",
    "info":"KeepExistingVersion is an option for PacletInstall and PacletInstallSubmit that specifies whether an"
  },
  {
    "label":"KelvinBei",
    "type":"keyword",
    "info":"KelvinBei[z] gives the Kelvin function bei(z).KelvinBei[n, z] gives the Kelvin function bei (z). \n  "
  },
  {
    "label":"KelvinBer",
    "type":"keyword",
    "info":"KelvinBer[z] gives the Kelvin function ber(z).KelvinBer[n, z] gives the Kelvin function ber (z). \n  "
  },
  {
    "label":"KelvinKei",
    "type":"keyword",
    "info":"KelvinKei[z] gives the Kelvin function kei(z).KelvinKei[n, z] gives the Kelvin function kei (z). \n  "
  },
  {
    "label":"KelvinKer",
    "type":"keyword",
    "info":"KelvinKer[z] gives the Kelvin function ker(z).KelvinKer[n, z] gives the Kelvin function ker (z). \n  "
  },
  {
    "label":"KendallTau",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"KendallTauTest",
    "type":"keyword",
    "info":"KendallTauTest[v , v ] tests whether the vectors v  and v  are independent.KendallTauTest[m , m ] te"
  },
  {
    "label":"KernelExecute",
    "type":"keyword",
    "info":"System`KernelExecute"
  },
  {
    "label":"KernelFunction",
    "type":"keyword",
    "info":"KernelFunction[f] represents a function to be evaluated in the Wolfram Engine kernel, even when it i"
  },
  {
    "label":"KernelMixtureDistribution",
    "type":"keyword",
    "info":"KernelMixtureDistribution[{x , x , â¦}] represents a kernel mixture distribution based on the data va"
  },
  {
    "label":"KernelObject",
    "type":"keyword",
    "info":"KernelObject[n, name, â¦] represents a kernel available for parallel computing."
  },
  {
    "label":"Kernels",
    "type":"keyword",
    "info":"Kernels[] gives the list of running kernels available for parallel computing."
  },
  {
    "label":"Ket",
    "type":"keyword",
    "info":"System`Ket"
  },
  {
    "label":"Key",
    "type":"keyword",
    "info":"Key[key] represents a key used to access a value in an association.Key[key][assoc] extracts the valu"
  },
  {
    "label":"KeyCollisionFunction",
    "type":"keyword",
    "info":"KeyCollisionFunction is an option for JoinAcross that specifies how to handle pairs of elements that"
  },
  {
    "label":"KeyComplement",
    "type":"keyword",
    "info":"KeyComplement[{assoc   , assoc , assoc , â¦}] generates an association in which only elements whose k"
  },
  {
    "label":"KeyDrop",
    "type":"keyword",
    "info":"KeyDrop[assoc, {key , key , â¦}] yields an association from which elements with keys key  have been d"
  },
  {
    "label":"KeyDropFrom",
    "type":"keyword",
    "info":"KeyDropFrom[a, key] changes the association a by dropping the element with the specified key.KeyDrop"
  },
  {
    "label":"KeyExistsQ",
    "type":"keyword",
    "info":"KeyExistsQ[assoc, key] returns True if the specified key exists in the association assoc, and False "
  },
  {
    "label":"KeyFreeQ",
    "type":"keyword",
    "info":"KeyFreeQ[assoc, form] yields True if no key in the association assoc matches form, and yields False "
  },
  {
    "label":"KeyIntersection",
    "type":"keyword",
    "info":"KeyIntersection[{assoc , assoc , â¦}] generates a list of associations in which only elements whose k"
  },
  {
    "label":"KeyMap",
    "type":"keyword",
    "info":"KeyMap[f, ï key  ï¢ val , key  ï¢ val , â¦ ï] maps f over the keys in an association, giving ï f[key ] "
  },
  {
    "label":"KeyMemberQ",
    "type":"keyword",
    "info":"KeyMemberQ[assoc, form] yields True if a key in the association assoc matches form, and False otherw"
  },
  {
    "label":"KeypointStrength",
    "type":"keyword",
    "info":"KeypointStrength is an option for ImageKeypoints and related functions to specify a minimum strength"
  },
  {
    "label":"Keys",
    "type":"keyword",
    "info":"Keys[ï key  ï¢ val , key  ï¢ val , â¦ ï] gives a list of the keys key  in an association.Keys[{key  ï¢ v"
  },
  {
    "label":"KeySelect",
    "type":"keyword",
    "info":"KeySelect[assoc, crit] selects elements in the association assoc for which crit applied to their key"
  },
  {
    "label":"KeySort",
    "type":"keyword",
    "info":"KeySort[assoc] orders the elements of an association by sorting its keys.KeySort[assoc, p] orders th"
  },
  {
    "label":"KeySortBy",
    "type":"keyword",
    "info":"KeySortBy[assoc, f] sorts the elements of an association in the order defined by applying f to each "
  },
  {
    "label":"KeyTake",
    "type":"keyword",
    "info":"KeyTake[assoc, {key , key , â¦}] yields an association containing only the elements with keys key .Ke"
  },
  {
    "label":"KeyUnion",
    "type":"keyword",
    "info":"KeyUnion[{assoc , assoc , â¦}] generates a list of associations in which each association has the uni"
  },
  {
    "label":"KeyValueMap",
    "type":"keyword",
    "info":"KeyValueMap[f, ï key  ï¢ val , key  ï¢ val , â¦ ï] gives the list {f[key , val ], f[key , val ], â¦}.Key"
  },
  {
    "label":"KeyValuePattern",
    "type":"keyword",
    "info":"KeyValuePattern[{patt , â¦}] is a pattern object that represents an association or list of rules that"
  },
  {
    "label":"Khinchin",
    "type":"keyword",
    "info":"Khinchin is Khinchin's constant, with numerical value â 2.68545. "
  },
  {
    "label":"KillProcess",
    "type":"keyword",
    "info":"KillProcess[proc] kills the external process represented by the ProcessObject proc."
  },
  {
    "label":"KirchhoffGraph",
    "type":"keyword",
    "info":"KirchhoffGraph[kmat] gives the graph with Kirchhoff matrix kmat.KirchhoffGraph[{v , v , â¦}, kmat] gi"
  },
  {
    "label":"KirchhoffMatrix",
    "type":"keyword",
    "info":"KirchhoffMatrix[g] gives the Kirchhoff matrix of the graph g.KirchhoffMatrix[{v ï¢ w, â¦}] uses rules "
  },
  {
    "label":"KleinInvariantJ",
    "type":"keyword",
    "info":"KleinInvariantJ[Ï] gives the Klein invariant modular elliptic function J(Ï). "
  },
  {
    "label":"KnapsackSolve",
    "type":"keyword",
    "info":"KnapsackSolve[{cost , cost , â¦}, maxtotalcost] solves the knapsack problem of finding the maximum nu"
  },
  {
    "label":"KnightTourGraph",
    "type":"keyword",
    "info":"KnightTourGraph[m, n] gives a Knight's tour graph on an mï n chessboard."
  },
  {
    "label":"KnotData",
    "type":"keyword",
    "info":"KnotData[knot, \"property\"] gives the specified property for a knot.KnotData[knot] gives an image of "
  },
  {
    "label":"KnownUnitQ",
    "type":"keyword",
    "info":"KnownUnitQ[expr] returns True if expr is a canonical unit, and False otherwise."
  },
  {
    "label":"KochCurve",
    "type":"keyword",
    "info":"                                                        th\nKochCurve[n] gives the line segments repr"
  },
  {
    "label":"KolmogorovSmirnovTest",
    "type":"keyword",
    "info":"KolmogorovSmirnovTest[data] tests whether data is normally distributed using the KolmogorovâSmirnov "
  },
  {
    "label":"KroneckerDelta",
    "type":"keyword",
    "info":"KroneckerDelta[n , n , â¦] gives the Kronecker delta Î\.b4       , equal to 1 if all the n  are equal, an"
  },
  {
    "label":"KroneckerModelDecomposition",
    "type":"keyword",
    "info":"KroneckerModelDecomposition[ssm] yields the Kronecker decomposition of a descriptor state-space mode"
  },
  {
    "label":"KroneckerProduct",
    "type":"keyword",
    "info":"KroneckerProduct[m , m , â¦] constructs the Kronecker product of the arrays m .\n                  1  "
  },
  {
    "label":"KroneckerSymbol",
    "type":"keyword",
    "info":"                                                  n\nKroneckerSymbol[n, m] gives the Kronecker symbol"
  },
  {
    "label":"KuiperTest",
    "type":"keyword",
    "info":"KuiperTest[data] tests whether data is normally distributed using the Kuiper test.KuiperTest[data, d"
  },
  {
    "label":"KumaraswamyDistribution",
    "type":"keyword",
    "info":"KumaraswamyDistribution[Î\\[PlusMinus], Î\.b2] represents a Kumaraswamy distribution with shape parameters Î\\[PlusMinus] and Î\.b2."
  },
  {
    "label":"Kurtosis",
    "type":"keyword",
    "info":"Kurtosis[list] gives the coefficient of kurtosis for the elements in list.Kurtosis[dist] gives the c"
  },
  {
    "label":"KuwaharaFilter",
    "type":"keyword",
    "info":"KuwaharaFilter[data, r] computes for each element p in data the variance of the values in the four ("
  },
  {
    "label":"KVertexConnectedComponents",
    "type":"keyword",
    "info":"KVertexConnectedComponents[g, k] gives the k-vertex-connected components of the graph g.KVertexConne"
  },
  {
    "label":"KVertexConnectedGraphQ",
    "type":"keyword",
    "info":"KVertexConnectedGraphQ[g, k] yields True if the graph g is k-vertex-connected and False otherwise."
  },
  {
    "label":"LABColor",
    "type":"keyword",
    "info":"LABColor[l, a, b] represents a color in the Lab color space with lightness l and color components a "
  },
  {
    "label":"Label",
    "type":"keyword",
    "info":"Label[tag] represents a point in a compound expression to which control can be transferred using Got"
  },
  {
    "label":"Labeled",
    "type":"keyword",
    "info":"Labeled[expr, lbl] displays expr labeled with lbl. Labeled[expr, lbl, pos] places lbl at a position "
  },
  {
    "label":"LabeledSlider",
    "type":"keyword",
    "info":"System`LabeledSlider"
  },
  {
    "label":"LabelingFunction",
    "type":"keyword",
    "info":"LabelingFunction is an option for data visualization functions to automatically label elements of a "
  },
  {
    "label":"LabelingSize",
    "type":"keyword",
    "info":"LabelingSize is an option to visualization functions that specifies the size to be used for labels a"
  },
  {
    "label":"LabelStyle",
    "type":"keyword",
    "info":"LabelStyle is an option for formatting and related constructs that specifies the style to use in dis"
  },
  {
    "label":"LabelVisibility",
    "type":"keyword",
    "info":"LabelVisibility is an option for Callout and Labeled in plotting functions that determines which lab"
  },
  {
    "label":"LaguerreL",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"LakeData",
    "type":"keyword",
    "info":"LakeData[entity, property] gives the value of the specified property for the lake entity.LakeData[{e"
  },
  {
    "label":"LambdaComponents",
    "type":"keyword",
    "info":"LambdaComponents[g] gives the lambda components of the graph g.LambdaComponents[g, {v , v , â¦}] give"
  },
  {
    "label":"LambertW",
    "type":"keyword",
    "info":"System`LambertW"
  },
  {
    "label":"LameC",
    "type":"keyword",
    "info":"                              th                 j\nLameC[Î½, j, z, m] gives the jï    LamÃ© function Ec"
  },
  {
    "label":"LameCPrime",
    "type":"keyword",
    "info":"                                                       th                 j\nLameCPrime[Î½, j, z, m] g"
  },
  {
    "label":"LameEigenvalueA",
    "type":"keyword",
    "info":"                                     th                  j\nLameEigenvalueA[Î½, j, m] gives the jï    L"
  },
  {
    "label":"LameEigenvalueB",
    "type":"keyword",
    "info":"                                     th                  j\nLameEigenvalueB[Î½, j, m] gives the jï    L"
  },
  {
    "label":"LameS",
    "type":"keyword",
    "info":"                              th                 j\nLameS[Î½, j, z, m] gives the jï    LamÃ© function Es"
  },
  {
    "label":"LameSPrime",
    "type":"keyword",
    "info":"                                                       th                 j\nLameSPrime[Î½, j, z, m] g"
  },
  {
    "label":"LaminaData",
    "type":"keyword",
    "info":"LaminaData[entity, property] gives the value of the specified property for the lamina entity.LaminaD"
  },
  {
    "label":"LanczosWindow",
    "type":"keyword",
    "info":"LanczosWindow[x] represents a Lanczos window function of x."
  },
  {
    "label":"LandauDistribution",
    "type":"keyword",
    "info":"LandauDistribution[Î¼, Ï] represents a Landau distribution with location parameter Î¼ and scale parame"
  },
  {
    "label":"Language",
    "type":"keyword",
    "info":"Language is an option that specifies the language to use."
  },
  {
    "label":"LanguageCategory",
    "type":"keyword",
    "info":"LanguageCategory is an option for Cell that determines in what category of language the contents of "
  },
  {
    "label":"LanguageData",
    "type":"keyword",
    "info":"LanguageData[entity, property] gives the value of the specified property for the language entity.Lan"
  },
  {
    "label":"LanguageIdentify",
    "type":"keyword",
    "info":"LanguageIdentify[\"string\"] attempts to determine what human language text in string is in, predomina"
  },
  {
    "label":"LanguageOptions",
    "type":"keyword",
    "info":"System`LanguageOptions"
  },
  {
    "label":"LaplaceDistribution",
    "type":"keyword",
    "info":"LaplaceDistribution[Î¼, Î\.b2] represents a Laplace double-exponential distribution with mean Î¼ and scale"
  },
  {
    "label":"LaplaceTransform",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"Laplacian",
    "type":"keyword",
    "info":"                                               2       2        2       2\nLaplacian[f, {x , â¦, x }] "
  },
  {
    "label":"LaplacianFilter",
    "type":"keyword",
    "info":"LaplacianFilter[data, r] convolves data with a radius-r Laplacian kernel.LaplacianFilter[data, {r , "
  },
  {
    "label":"LaplacianGaussianFilter",
    "type":"keyword",
    "info":"LaplacianGaussianFilter[data, r] convolves data with a Laplacian of Gaussian kernel of pixel radius "
  },
  {
    "label":"LaplacianPDETerm",
    "type":"keyword",
    "info":"                                                    2\nLaplacianPDETerm[vars] represents a Laplacian "
  },
  {
    "label":"Large",
    "type":"keyword",
    "info":"Large is a style or option setting that specifies that objects should be large."
  },
  {
    "label":"Larger",
    "type":"keyword",
    "info":"Larger is a style or option setting that specifies that objects should be larger."
  },
  {
    "label":"Last",
    "type":"keyword",
    "info":"Last[expr] gives the last element in expr. Last[expr, def] gives the last element if there are any e"
  },
  {
    "label":"Latitude",
    "type":"keyword",
    "info":"Latitude[pos] gives the latitude in degrees of a geographic position specified by pos.Latitude[pos, "
  },
  {
    "label":"LatitudeLongitude",
    "type":"keyword",
    "info":"LatitudeLongitude[pos] gives a list of the latitude and longitude in degrees of a geographic positio"
  },
  {
    "label":"LatticeData",
    "type":"keyword",
    "info":"LatticeData[lattice, \"property\"] gives the specified property for a lattice.LatticeData[n] gives a l"
  },
  {
    "label":"LatticeReduce",
    "type":"keyword",
    "info":"LatticeReduce[{v , v , â¦}] gives a reduced basis for the set of vectors v . \n                1   2  "
  },
  {
    "label":"Launch",
    "type":"keyword",
    "info":"Launch is a setting for the LinkMode option of LinkOpen.  LinkMode->Launch causes a link to be creat"
  },
  {
    "label":"LaunchKernels",
    "type":"keyword",
    "info":"LaunchKernels[] launches all currently configured parallel subkernels.LaunchKernels[n] launches n lo"
  },
  {
    "label":"LayeredGraphPlot",
    "type":"keyword",
    "info":"LayeredGraphPlot[g] generates a layered plot of the graph g.LayeredGraphPlot[{e , e , â¦}] generates "
  },
  {
    "label":"LayeredGraphPlot3D",
    "type":"keyword",
    "info":"LayeredGraphPlot3D[g] generates a 3D layered plot of the graph g.LayeredGraphPlot3D[{e , e , â¦}] gen"
  },
  {
    "label":"LayerSizeFunction",
    "type":"keyword",
    "info":"LayerSizeFunction is an option for TreePlot that gives a function to specify the relative height to "
  },
  {
    "label":"LayoutInformation",
    "type":"keyword",
    "info":"System`LayoutInformation"
  },
  {
    "label":"LCHColor",
    "type":"keyword",
    "info":"LCHColor[l, c, h] represents a color in the LCH color space with lightness l, chroma c and hue h.LCH"
  },
  {
    "label":"LCM",
    "type":"keyword",
    "info":"LCM[n , n , â¦] gives the least common multiple of the n . \n     1   2                               "
  },
  {
    "label":"LeaderSize",
    "type":"keyword",
    "info":"LeaderSize is an option for Callout that specifies what sizes to use for leader lines."
  },
  {
    "label":"LeafCount",
    "type":"keyword",
    "info":"LeafCount[expr] gives the total number of indivisible subexpressions in expr. "
  },
  {
    "label":"LeapVariant",
    "type":"keyword",
    "info":"LeapVariant[n] represents a repeated calendar element caused by a leap period."
  },
  {
    "label":"LeapYearQ",
    "type":"keyword",
    "info":"LeapYearQ[date] returns True if the year corresponding to date is a leap year."
  },
  {
    "label":"LearnDistribution",
    "type":"keyword",
    "info":"LearnDistribution[{example , example , â¦}] generates a LearnedDistribution[â¦] that attempts to repre"
  },
  {
    "label":"LearnedDistribution",
    "type":"keyword",
    "info":"LearnedDistribution[â¦] represents a distribution generated by LearnDistribution."
  },
  {
    "label":"LearningRate",
    "type":"keyword",
    "info":"LearningRate is an option for NetTrain that specifies the rate at which to adjust neural net weights"
  },
  {
    "label":"LearningRateMultipliers",
    "type":"keyword",
    "info":"LearningRateMultipliers is an option for net layers and for NetTrain, NetChain, NetGraph that specif"
  },
  {
    "label":"LeastSquares",
    "type":"keyword",
    "info":"LeastSquares[m, b] finds an x that solves the linear least-squares problem for the matrix equation m"
  },
  {
    "label":"LeastSquaresFilterKernel",
    "type":"keyword",
    "info":"LeastSquaresFilterKernel[{{Ï , â¦, Ï     }, {a , â¦, a }}, n] creates a k-band finite impulse response"
  },
  {
    "label":"Left",
    "type":"keyword",
    "info":"Left is a symbol that represents the left-hand side for purposes of alignment and positioning. "
  },
  {
    "label":"LeftArrow",
    "type":"keyword",
    "info":"LeftArrow[x, y, â¦] displays as x â y â â¦."
  },
  {
    "label":"LeftArrowBar",
    "type":"keyword",
    "info":"LeftArrowBar[x, y, â¦] displays as x â¤ y â¤ â¦."
  },
  {
    "label":"LeftArrowRightArrow",
    "type":"keyword",
    "info":"LeftArrowRightArrow[x, y, â¦] displays as x â y â â¦."
  },
  {
    "label":"LeftDownTeeVector",
    "type":"keyword",
    "info":"LeftDownTeeVector[x, y, â¦] displays as x â¥¡ y â¥¡ â¦."
  },
  {
    "label":"LeftDownVector",
    "type":"keyword",
    "info":"LeftDownVector[x, y, â¦] displays as x â y â â¦."
  },
  {
    "label":"LeftDownVectorBar",
    "type":"keyword",
    "info":"LeftDownVectorBar[x, y, â¦] displays as x â¥ y â¥ â¦."
  },
  {
    "label":"LeftRightArrow",
    "type":"keyword",
    "info":"LeftRightArrow[x, y, â¦] displays as x â y â â¦."
  },
  {
    "label":"LeftRightVector",
    "type":"keyword",
    "info":"LeftRightVector[x, y, â¦] displays as x â¥ y â¥ â¦."
  },
  {
    "label":"LeftTee",
    "type":"keyword",
    "info":"LeftTee[x, y] displays as x â£ y."
  },
  {
    "label":"LeftTeeArrow",
    "type":"keyword",
    "info":"LeftTeeArrow[x, y, â¦] displays as x â¤ y â¤ â¦."
  },
  {
    "label":"LeftTeeVector",
    "type":"keyword",
    "info":"LeftTeeVector[x, y, â¦] displays as x â¥ y â¥ â¦."
  },
  {
    "label":"LeftTriangle",
    "type":"keyword",
    "info":"LeftTriangle[x, y, â¦] displays as x â\.b2 y â\.b2 â¦."
  },
  {
    "label":"LeftTriangleBar",
    "type":"keyword",
    "info":"LeftTriangleBar[x, y, â¦] displays as x â§ y â§ â¦."
  },
  {
    "label":"LeftTriangleEqual",
    "type":"keyword",
    "info":"LeftTriangleEqual[x, y, â¦] displays as x â\.b4 y â\.b4 â¦."
  },
  {
    "label":"LeftUpDownVector",
    "type":"keyword",
    "info":"LeftUpDownVector[x, y, â¦] displays as x â¥ y â¥ â¦."
  },
  {
    "label":"LeftUpTeeVector",
    "type":"keyword",
    "info":"LeftUpTeeVector[x, y, â¦] displays as x â¥  y â¥  â¦."
  },
  {
    "label":"LeftUpVector",
    "type":"keyword",
    "info":"LeftUpVector[x, y, â¦] displays as x â¿ y â¿ â¦."
  },
  {
    "label":"LeftUpVectorBar",
    "type":"keyword",
    "info":"LeftUpVectorBar[x, y, â¦] displays as x â¥ y â¥ â¦."
  },
  {
    "label":"LeftVector",
    "type":"keyword",
    "info":"LeftVector[x, y, â¦] displays as x â¼ y â¼ â¦."
  },
  {
    "label":"LeftVectorBar",
    "type":"keyword",
    "info":"LeftVectorBar[x, y, â¦] displays as x â¥ y â¥ â¦."
  },
  {
    "label":"LegendAppearance",
    "type":"keyword",
    "info":"LegendAppearance is an option for charting functions that specifies the appearance of any legends th"
  },
  {
    "label":"Legended",
    "type":"keyword",
    "info":"Legended[expr, leg] displays expr with legend leg. Legended[expr, lbl] indicates in plotting and cha"
  },
  {
    "label":"LegendFunction",
    "type":"keyword",
    "info":"LegendFunction is an option for legends that specifies an overall function to apply to the generated"
  },
  {
    "label":"LegendLabel",
    "type":"keyword",
    "info":"LegendLabel is an option for legends that specifies an overall label for a legend."
  },
  {
    "label":"LegendLayout",
    "type":"keyword",
    "info":"LegendLayout is an option for legends that specifies how to format the legend content."
  },
  {
    "label":"LegendMargins",
    "type":"keyword",
    "info":"LegendMargins is an option for legends that specifies the margins to leave around the legend."
  },
  {
    "label":"LegendMarkers",
    "type":"keyword",
    "info":"LegendMarkers is an option for legends such as PointLegend that specifies markers for each element."
  },
  {
    "label":"LegendMarkerSize",
    "type":"keyword",
    "info":"LegendMarkerSize is an option for legends such as PointLegend that specifies the size of marker regi"
  },
  {
    "label":"LegendreP",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"LegendreQ",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"LegendreType",
    "type":"keyword",
    "info":"System`LegendreType"
  },
  {
    "label":"Length",
    "type":"keyword",
    "info":"Length[expr] gives the number of elements in expr. "
  },
  {
    "label":"LengthWhile",
    "type":"keyword",
    "info":"LengthWhile[list, crit] gives the number of contiguous elements e  starting at the beginning of list"
  },
  {
    "label":"LerchPhi",
    "type":"keyword",
    "info":"LerchPhi[z, s, a] gives the Lerch transcendent Î¦ (z, s, a). "
  },
  {
    "label":"Less",
    "type":"keyword",
    "info":"x < y yields True if x is determined to be less than y. x  < x  < x  yields True if the x  form a st"
  },
  {
    "label":"LessEqual",
    "type":"keyword",
    "info":"x <= y or x â¤ y yields True if x is determined to be less than or equal to y.x  â¤ x  â¤ x  yields Tru"
  },
  {
    "label":"LessEqualGreater",
    "type":"keyword",
    "info":"LessEqualGreater[x, y, â¦] displays as x â y â â¦."
  },
  {
    "label":"LessEqualThan",
    "type":"keyword",
    "info":"LessEqualThan[y] is an operator form that yields x â¤ y when applied to an expression x."
  },
  {
    "label":"LessFullEqual",
    "type":"keyword",
    "info":"LessFullEqual[x, y, â¦] displays as x â¦ y â¦ â¦."
  },
  {
    "label":"LessGreater",
    "type":"keyword",
    "info":"LessGreater[x, y, â¦] displays as x â\\[Paragraph] y â\\[Paragraph] â¦."
  },
  {
    "label":"LessLess",
    "type":"keyword",
    "info":"LessLess[x, y, â¦] displays as x âª y âª â¦."
  },
  {
    "label":"LessSlantEqual",
    "type":"keyword",
    "info":"LessSlantEqual[x, y, â¦] displays as x â©½ y â©½ â¦."
  },
  {
    "label":"LessThan",
    "type":"keyword",
    "info":"LessThan[y] is an operator form that yields x < y when applied to an expression x."
  },
  {
    "label":"LessTilde",
    "type":"keyword",
    "info":"LessTilde[x, y, â¦] displays as x â\.b2 y â\.b2 â¦."
  },
  {
    "label":"LetterCharacter",
    "type":"keyword",
    "info":"LetterCharacter represents a letter character in StringExpression."
  },
  {
    "label":"LetterCounts",
    "type":"keyword",
    "info":"LetterCounts[\"string\"] gives an association whose keys are the distinct letters in string, and whose"
  },
  {
    "label":"LetterNumber",
    "type":"keyword",
    "info":"LetterNumber[\"c\"] gives the position of the character c in the English alphabet.LetterNumber[\"c\", al"
  },
  {
    "label":"LetterQ",
    "type":"keyword",
    "info":"LetterQ[string] yields True if all the characters in the string are letters, and yields False otherw"
  },
  {
    "label":"Level",
    "type":"keyword",
    "info":"Level[expr, levelspec] gives a list of all subexpressions of expr on levels specified by levelspec. "
  },
  {
    "label":"LeveneTest",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"LeviCivitaTensor",
    "type":"keyword",
    "info":"LeviCivitaTensor[d] gives the d-dimensional Levi-Civita totally antisymmetric tensor."
  },
  {
    "label":"LevyDistribution",
    "type":"keyword",
    "info":"LevyDistribution[Î¼, Ï] represents a LÃ©vy distribution with location parameter Î¼ and dispersion param"
  },
  {
    "label":"Lexicographic",
    "type":"keyword",
    "info":"System`Lexicographic"
  },
  {
    "label":"LexicographicOrder",
    "type":"keyword",
    "info":"LexicographicOrder[{a , a , â¦}, {b , b , â¦}] gives Order[a , b ] for the first non-coinciding pair a"
  },
  {
    "label":"LexicographicSort",
    "type":"keyword",
    "info":"LexicographicSort[{e , e , â¦}] sorts the list of expressions e  in lexicographic order.Lexicographic"
  },
  {
    "label":"LibraryDataType",
    "type":"keyword",
    "info":"LibraryDataType[datatype] specifies the data type for a LibraryFunction argument or result to be dat"
  },
  {
    "label":"LibraryFunction",
    "type":"keyword",
    "info":"LibraryFunction[ args] represents a function that has been loaded from a Wolfram Library."
  },
  {
    "label":"LibraryFunctionError",
    "type":"keyword",
    "info":"LibraryFunctionError[name, code] represents an error returned from a LibraryFunction."
  },
  {
    "label":"LibraryFunctionInformation",
    "type":"keyword",
    "info":"LibraryFunctionInformation[fun] returns information about a LibraryFunction."
  },
  {
    "label":"LibraryFunctionLoad",
    "type":"keyword",
    "info":"LibraryFunctionLoad[lib, fun, argtype, rettype] loads Wolfram Library lib and makes the library func"
  },
  {
    "label":"LibraryFunctionUnload",
    "type":"keyword",
    "info":"LibraryFunctionUnload[fun] unloads a LibraryFunction so that it cannot be used."
  },
  {
    "label":"LibraryLoad",
    "type":"keyword",
    "info":"LibraryLoad[lib] loads the dynamic library lib into the Wolfram System runtime."
  },
  {
    "label":"LibraryUnload",
    "type":"keyword",
    "info":"LibraryUnload[lib] unloads all functions that have been loaded from a Wolfram Library, then it unloa"
  },
  {
    "label":"LicenseEntitlementObject",
    "type":"keyword",
    "info":"LicenseEntitlementObject[â¦] represents an on-demand license entitlement.LicenseEntitlementObject[id]"
  },
  {
    "label":"LicenseEntitlements",
    "type":"keyword",
    "info":"LicenseEntitlements[] gives a list of on-demand license entitlements owned by you."
  },
  {
    "label":"LicenseID",
    "type":"keyword",
    "info":"LicenseID is an option to Encode which specifies the required value of $LicenseID on the computer th"
  },
  {
    "label":"LicensingSettings",
    "type":"keyword",
    "info":"LicensingSettings is an option for RemoteBatchSubmit and related functions to configure licensing fo"
  },
  {
    "label":"LiftingFilterData",
    "type":"keyword",
    "info":"LiftingFilterData[â¦] represents lifting-filter data used to compute forward and inverse lifting wave"
  },
  {
    "label":"LiftingWaveletTransform",
    "type":"keyword",
    "info":"LiftingWaveletTransform[data] gives the lifting wavelet transform (LWT) of an array of data.LiftingW"
  },
  {
    "label":"LightBlue",
    "type":"keyword",
    "info":"LightBlue represents a light blue color in graphics or style specifications."
  },
  {
    "label":"LightBrown",
    "type":"keyword",
    "info":"LightBrown represents a light brown color in graphics or style specifications."
  },
  {
    "label":"LightCyan",
    "type":"keyword",
    "info":"LightCyan represents a light cyan color in graphics or style specifications."
  },
  {
    "label":"Lighter",
    "type":"keyword",
    "info":"Lighter[color] represents a lighter version of the specified color. Lighter[color, f] represents a v"
  },
  {
    "label":"LightGray",
    "type":"keyword",
    "info":"LightGray represents a light gray color in graphics or style specifications."
  },
  {
    "label":"LightGreen",
    "type":"keyword",
    "info":"LightGreen represents a light green color in graphics or style specifications."
  },
  {
    "label":"Lighting",
    "type":"keyword",
    "info":"Lighting is an option for Graphics3D and related functions that specifies what simulated lighting to"
  },
  {
    "label":"LightingAngle",
    "type":"keyword",
    "info":"LightingAngle is an option for ReliefPlot and related functions that specifies the angle from which "
  },
  {
    "label":"LightMagenta",
    "type":"keyword",
    "info":"LightMagenta represents a light magenta color in graphics or style specifications."
  },
  {
    "label":"LightOrange",
    "type":"keyword",
    "info":"LightOrange represents a light orange color in graphics or style specifications."
  },
  {
    "label":"LightPink",
    "type":"keyword",
    "info":"LightPink represents a light pink color in graphics or style specifications."
  },
  {
    "label":"LightPurple",
    "type":"keyword",
    "info":"LightPurple represents a light purple color in graphics or style specifications."
  },
  {
    "label":"LightRed",
    "type":"keyword",
    "info":"LightRed represents a light red color in graphics or style specifications."
  },
  {
    "label":"LightSources",
    "type":"keyword",
    "info":"LightSources is an option for Graphics3D and related functions that specifies the properties of poin"
  },
  {
    "label":"LightYellow",
    "type":"keyword",
    "info":"LightYellow represents a light yellow color in graphics or style specifications."
  },
  {
    "label":"Likelihood",
    "type":"keyword",
    "info":"Likelihood[dist, {x , x , â¦}] gives the likelihood function for observations x , x , â¦ from the dist"
  },
  {
    "label":"Limit",
    "type":"keyword",
    "info":"              *                                                 *           *                       "
  },
  {
    "label":"LimitsPositioning",
    "type":"keyword",
    "info":"LimitsPositioning is an option for UnderoverscriptBox and related boxes that specifies whether to ch"
  },
  {
    "label":"LimitsPositioningTokens",
    "type":"keyword",
    "info":"LimitsPositioningTokens is an option for selections that specifies a set of characters for which the"
  },
  {
    "label":"LindleyDistribution",
    "type":"keyword",
    "info":"LindleyDistribution[Î\.b4] represents a Lindley distribution with shape parameter Î\.b4."
  },
  {
    "label":"Line",
    "type":"keyword",
    "info":"Line[{p , p , â¦}] represents the line segments joining a sequence for points p .Line[{{p  , p  , â¦},"
  },
  {
    "label":"Line3DBox",
    "type":"keyword",
    "info":"System`Line3DBox"
  },
  {
    "label":"Line3DBoxOptions",
    "type":"keyword",
    "info":"Line3DBoxOptions ï¢ {opt  ï¢ val , opt  ï¢ val , â¦} is an option that specifies settings for Line3DBox "
  },
  {
    "label":"LinearFilter",
    "type":"keyword",
    "info":"System`LinearFilter"
  },
  {
    "label":"LinearFractionalOptimization",
    "type":"keyword",
    "info":"LinearFractionalOptimization[f, cons, vars] finds values of variables vars that minimize the linear "
  },
  {
    "label":"LinearFractionalTransform",
    "type":"keyword",
    "info":"LinearFractionalTransform[m] gives a TransformationFunction that represents a linear fractional tran"
  },
  {
    "label":"LinearGradientFilling",
    "type":"keyword",
    "info":"LinearGradientFilling[{col , col , â¦, col }] is a two-dimensional graphics directive specifying that"
  },
  {
    "label":"LinearGradientImage",
    "type":"keyword",
    "info":"LinearGradientImage[gcol] returns an image with values linearly changing from left to right based on"
  },
  {
    "label":"LinearizingTransformationData",
    "type":"keyword",
    "info":"LinearizingTransformationData[â¦] represents data of an AffineStateSpaceModel linearized by functions"
  },
  {
    "label":"LinearLayer",
    "type":"keyword",
    "info":"LinearLayer[n] represents a trainable, fully connected net layer that computes w . x + b with output"
  },
  {
    "label":"LinearModelFit",
    "type":"keyword",
    "info":"LinearModelFit[{y , y , â¦}, {f , f , â¦}, x] constructs a linear model of the form Î\.b2  + Î\.b2  f  + Î\.b2  f "
  },
  {
    "label":"LinearOffsetFunction",
    "type":"keyword",
    "info":"LinearOffsetFunction is an option for linear and generalized linear model fitting functions that spe"
  },
  {
    "label":"LinearOptimization",
    "type":"keyword",
    "info":"LinearOptimization[f, cons, vars] finds values of variables vars that minimize the linear objective "
  },
  {
    "label":"LinearProgramming",
    "type":"keyword",
    "info":"LinearProgramming[c, m, b] finds a vector x that minimizes the quantity c . x subject to the constra"
  },
  {
    "label":"LinearRecurrence",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"LinearSolve",
    "type":"keyword",
    "info":"LinearSolve[m, b] finds an x that solves the matrix equation m . x == b. LinearSolve[m] generates a "
  },
  {
    "label":"LinearSolveFunction",
    "type":"keyword",
    "info":"LinearSolveFunction[dimensions, data] represents a function for providing solutions to a matrix equa"
  },
  {
    "label":"LineBox",
    "type":"keyword",
    "info":"System`LineBox"
  },
  {
    "label":"LineBoxOptions",
    "type":"keyword",
    "info":"LineBoxOptions ï¢ {opt  ï¢ val , opt  ï¢ val , â¦} is an option that specifies settings for LineBox obje"
  },
  {
    "label":"LineBreak",
    "type":"keyword",
    "info":"System`LineBreak"
  },
  {
    "label":"LinebreakAdjustments",
    "type":"keyword",
    "info":"LinebreakAdjustments is an option for selections that sets parameters used for calculating where aut"
  },
  {
    "label":"LineBreakChart",
    "type":"keyword",
    "info":"LineBreakChart[{{date , p }, {date , p }, â¦}] makes a line break chart with prices p  at date date ."
  },
  {
    "label":"LinebreakSemicolonWeighting",
    "type":"keyword",
    "info":"System`LinebreakSemicolonWeighting"
  },
  {
    "label":"LineBreakWithin",
    "type":"keyword",
    "info":"LineBreakWithin is an option for selections that specifies whether line breaks occur automatically w"
  },
  {
    "label":"LineColor",
    "type":"keyword",
    "info":"System`LineColor"
  },
  {
    "label":"LineGraph",
    "type":"keyword",
    "info":"LineGraph[g] gives the line graph of the graph g.LineGraph[{v ï¢ w, â¦}] uses rules v ï¢ w to specify t"
  },
  {
    "label":"LineIndent",
    "type":"keyword",
    "info":"LineIndent is an option for Style and Cell that specifies how many ems of indentation to add at the "
  },
  {
    "label":"LineIndentMaxFraction",
    "type":"keyword",
    "info":"LineIndentMaxFraction is an option for Cell, StyleBox, and Style that specifies the maximum fraction"
  },
  {
    "label":"LineIntegralConvolutionPlot",
    "type":"keyword",
    "info":"LineIntegralConvolutionPlot[{{v , v }, image}, {x, x   , x   }, {y, y   , y   }] generates a line in"
  },
  {
    "label":"LineIntegralConvolutionScale",
    "type":"keyword",
    "info":"LineIntegralConvolutionScale is an option to LineIntegralConvolutionPlot and related functions that "
  },
  {
    "label":"LineLegend",
    "type":"keyword",
    "info":"LineLegend[{col , â¦}, {lbl , â¦}] generates a legend that associates color col  with label lbl .LineL"
  },
  {
    "label":"LineOpacity",
    "type":"keyword",
    "info":"System`LineOpacity"
  },
  {
    "label":"LineSpacing",
    "type":"keyword",
    "info":"LineSpacing is an option for Style and Cell that specifies the spacing between successive lines of t"
  },
  {
    "label":"LineWrapParts",
    "type":"keyword",
    "info":"System`LineWrapParts"
  },
  {
    "label":"LinkActivate",
    "type":"keyword",
    "info":"LinkActivate[lnk] activates a WSTP connection, waiting for the program at the other end to respond."
  },
  {
    "label":"LinkClose",
    "type":"keyword",
    "info":"LinkClose[link] closes an open WSTP connection. "
  },
  {
    "label":"LinkConnect",
    "type":"keyword",
    "info":"LinkConnect[\"name\"] connects to a WSTP link created by another program. "
  },
  {
    "label":"LinkConnectedQ",
    "type":"keyword",
    "info":"System`LinkConnectedQ"
  },
  {
    "label":"LinkCreate",
    "type":"keyword",
    "info":"LinkCreate[\"name\"] creates a WSTP link with the specified name for another program to connect to. Li"
  },
  {
    "label":"LinkError",
    "type":"keyword",
    "info":"LinkError[link] returns error information for link in the form { errorNumber, errorExplanation }."
  },
  {
    "label":"LinkFlush",
    "type":"keyword",
    "info":"LinkFlush[link] transmits immediately any locally buffered outgoing expressions."
  },
  {
    "label":"LinkFunction",
    "type":"keyword",
    "info":"LinkFunction is an option for GeneralizedLinearModelFit that specifies the link function for the gen"
  },
  {
    "label":"LinkHost",
    "type":"keyword",
    "info":"LinkHost is an option for LinkOpen that specifies on what computer a program should be launched or o"
  },
  {
    "label":"LinkInterrupt",
    "type":"keyword",
    "info":"LinkInterrupt[link] sends an interrupt to the program at the other end of the specified WSTP connect"
  },
  {
    "label":"LinkLaunch",
    "type":"keyword",
    "info":"LinkLaunch[\"prog\"] starts the external program prog and opens a WSTP connection to it. "
  },
  {
    "label":"LinkMode",
    "type":"keyword",
    "info":"LinkMode is an option for LinkOpen that specifies how the link is to be established and connected.  "
  },
  {
    "label":"LinkObject",
    "type":"keyword",
    "info":"LinkObject[\"name\", n , n ] is an object that represents an active WSTP connection for functions such"
  },
  {
    "label":"LinkOpen",
    "type":"keyword",
    "info":"LinkOpen[\"prog\"] starts the external program prog and opens a MathLink connection to it."
  },
  {
    "label":"LinkOptions",
    "type":"keyword",
    "info":"System`LinkOptions"
  },
  {
    "label":"LinkPatterns",
    "type":"keyword",
    "info":"LinkPatterns[link] gives a list of the patterns for which definitions were set up when the external "
  },
  {
    "label":"LinkProtocol",
    "type":"keyword",
    "info":"LinkProtocol is an option to LinkLaunch, Install, and related functions that specifies the underlyin"
  },
  {
    "label":"LinkRankCentrality",
    "type":"keyword",
    "info":"LinkRankCentrality[g, Î\\[PlusMinus]] gives the link-rank centralities for edges in the graph g and weight Î\\[PlusMinus].Link"
  },
  {
    "label":"LinkRead",
    "type":"keyword",
    "info":"LinkRead[link] reads one expression from the specified WSTP connection. LinkRead[link, h] wraps h ar"
  },
  {
    "label":"LinkReadHeld",
    "type":"keyword",
    "info":"LinkReadHeld[link] reads an expression via WSTP from link and returns it wrapped in Hold."
  },
  {
    "label":"LinkReadyQ",
    "type":"keyword",
    "info":"LinkReadyQ[link] tests whether there is an expression ready to read from the specified WSTP connecti"
  },
  {
    "label":"Links",
    "type":"keyword",
    "info":"Links[] gives a list of all WSTP connections that are currently open. Links[patt] lists only links w"
  },
  {
    "label":"LinkService",
    "type":"keyword",
    "info":"LinkService[\"service\", l] is an object that represents an active connection to the WSTP service."
  },
  {
    "label":"LinkWrite",
    "type":"keyword",
    "info":"LinkWrite[link, expr] writes expr to the specified WSTP connection. "
  },
  {
    "label":"LinkWriteHeld",
    "type":"keyword",
    "info":"LinkWriteHeld[link, Hold[expr], (flush : True)] writes expr (without the Hold) via WSTP to link (syn"
  },
  {
    "label":"LiouvilleLambda",
    "type":"keyword",
    "info":"LiouvilleLambda[n] gives the Liouville function Î»(n)."
  },
  {
    "label":"List",
    "type":"keyword",
    "info":"{e , e , â¦} is a list of elements. \n  1   2"
  },
  {
    "label":"Listable",
    "type":"keyword",
    "info":"Listable is an attribute that can be assigned to a symbol f to indicate that the function f should a"
  },
  {
    "label":"ListAnimate",
    "type":"keyword",
    "info":"ListAnimate[{expr , expr , â¦}] generates an animation whose frames are the successive expr . ListAni"
  },
  {
    "label":"ListContourPlot",
    "type":"keyword",
    "info":"ListContourPlot[{{f  , â¦, f  }, â¦, {f  , â¦, f  }}] generates a contour plot from an array of values "
  },
  {
    "label":"ListContourPlot3D",
    "type":"keyword",
    "info":"ListContourPlot3D[array] generates a contour plot from a three-dimensional array of values. ListCont"
  },
  {
    "label":"ListConvolve",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"ListCorrelate",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"ListCurvePathPlot",
    "type":"keyword",
    "info":"ListCurvePathPlot[{{x , y }, {x , y }, â¦}] plots a curve that corresponds to a smooth path through t"
  },
  {
    "label":"ListDeconvolve",
    "type":"keyword",
    "info":"ListDeconvolve[ker, list] gives a deconvolution of list using kernel ker."
  },
  {
    "label":"ListDensityPlot",
    "type":"keyword",
    "info":"ListDensityPlot[{{f  , â¦, f  }, â¦, {f  , â¦, f  }}] generates a smooth density plot from an array of "
  },
  {
    "label":"ListDensityPlot3D",
    "type":"keyword",
    "info":"ListDensityPlot3D[array] generates a smooth density plot from an array of values. ListDensityPlot3D["
  },
  {
    "label":"Listen",
    "type":"keyword",
    "info":"Listen is a setting for the LinkMode option of LinkOpen.  LinkMode->Listen causes a link to be creat"
  },
  {
    "label":"ListFormat",
    "type":"keyword",
    "info":"ListFormat is an option to TextString and related functions that determines how lists are formatted."
  },
  {
    "label":"ListFourierSequenceTransform",
    "type":"keyword",
    "info":"ListFourierSequenceTransform[list, Ï] gives the discrete-time Fourier transform (DTFT) of a list as "
  },
  {
    "label":"ListInterpolation",
    "type":"keyword",
    "info":"ListInterpolation[array] constructs an InterpolatingFunction object that represents an approximate f"
  },
  {
    "label":"ListLineIntegralConvolutionPlot",
    "type":"keyword",
    "info":"ListLineIntegralConvolutionPlot[{array, image}] generates a line integral convolution plot of image "
  },
  {
    "label":"ListLinePlot",
    "type":"keyword",
    "info":"ListLinePlot[{y , y , â¦}] plots a line through the points {1, y }, {2, y }, â¦.ListLinePlot[{{x , y }"
  },
  {
    "label":"ListLinePlot3D",
    "type":"keyword",
    "info":"ListLinePlot3D[{{x , y , z }, {x , y , z }, â¦, {x , y , z }}] plots a curve through the 3D points {x"
  },
  {
    "label":"ListLogLinearPlot",
    "type":"keyword",
    "info":"ListLogLinearPlot[{y , y , â¦}] makes a log-linear plot of the y , assumed to correspond to x coordin"
  },
  {
    "label":"ListLogLogPlot",
    "type":"keyword",
    "info":"ListLogLogPlot[{y , y , â¦}] makes a log-log plot of the y , assumed to correspond to x coordinates 1"
  },
  {
    "label":"ListLogPlot",
    "type":"keyword",
    "info":"ListLogPlot[{y , y , â¦}] makes a log plot of the y , assumed to correspond to x coordinates 1, 2, â¦."
  },
  {
    "label":"ListPicker",
    "type":"keyword",
    "info":"ListPicker[list, {val , val , â¦}] represents a list pane with setting list that can contain possible"
  },
  {
    "label":"ListPickerBox",
    "type":"keyword",
    "info":"ListPickerBox[list, {val  ï¢ lbl , val  ï¢ lbl , â¦}] is a low-level box structure that represents a li"
  },
  {
    "label":"ListPickerBoxBackground",
    "type":"keyword",
    "info":"System`ListPickerBoxBackground"
  },
  {
    "label":"ListPickerBoxOptions",
    "type":"keyword",
    "info":"ListPickerBoxOptions is an option that specifies settings for ListPickerBox objects."
  },
  {
    "label":"ListPlay",
    "type":"keyword",
    "info":"ListPlay[{a , a , â¦}] creates an object that plays as a sound whose amplitude is given by the sequen"
  },
  {
    "label":"ListPlot",
    "type":"keyword",
    "info":"ListPlot[{y , â¦, y }] plots points {1, y }, {2, y }, â¦. ListPlot[{{x , y }, â¦, {x , y }}] generates "
  },
  {
    "label":"ListPlot3D",
    "type":"keyword",
    "info":"ListPlot3D[{{f  , â¦, f  }, â¦, {f  , â¦, f  }}] generates a surface representing an array of height va"
  },
  {
    "label":"ListPointPlot3D",
    "type":"keyword",
    "info":"ListPointPlot3D[{{x , y , z }, {x , y , z }, â¦}] generates a 3D scatter plot of points with coordina"
  },
  {
    "label":"ListPolarPlot",
    "type":"keyword",
    "info":"ListPolarPlot[{r , r , â¦}] plots points equally spaced in angle at radii r .ListPolarPlot[{{Î¸ , r },"
  },
  {
    "label":"ListQ",
    "type":"keyword",
    "info":"ListQ[expr] gives True if the head of expr is List, and False otherwise."
  },
  {
    "label":"ListSliceContourPlot3D",
    "type":"keyword",
    "info":"ListSliceContourPlot3D[array, surf] generates a contour plot of the three-dimensional array of value"
  },
  {
    "label":"ListSliceDensityPlot3D",
    "type":"keyword",
    "info":"ListSliceDensityPlot3D[array, surf] generates a density plot of the three-dimensional array of value"
  },
  {
    "label":"ListSliceVectorPlot3D",
    "type":"keyword",
    "info":"ListSliceVectorPlot3D[array, surf] generates a vector plot from a 3D array of vector field values ov"
  },
  {
    "label":"ListStepPlot",
    "type":"keyword",
    "info":"ListStepPlot[{y , y , â¦}] plots the values y , y , â¦ in steps at points 1, 2, â¦.ListStepPlot[{{x , y"
  },
  {
    "label":"ListStreamDensityPlot",
    "type":"keyword",
    "info":"ListStreamDensityPlot[array] generates a stream density plot from a 2D array of vector and scalar fi"
  },
  {
    "label":"ListStreamPlot",
    "type":"keyword",
    "info":"ListStreamPlot[array] generates a stream plot from an array of vector field values.ListStreamPlot[{{"
  },
  {
    "label":"ListStreamPlot3D",
    "type":"keyword",
    "info":"ListStreamPlot3D[array] plots streamlines for the vector field given as an array of vectors."
  },
  {
    "label":"ListSurfacePlot3D",
    "type":"keyword",
    "info":"ListSurfacePlot3D[{{x , y , z }, {x , y , z }, â¦}] plots a three-dimensional surface constructed to "
  },
  {
    "label":"ListVectorDensityPlot",
    "type":"keyword",
    "info":"ListVectorDensityPlot[array] generates a vector plot from a 2D array of vector and scalar field valu"
  },
  {
    "label":"ListVectorDisplacementPlot",
    "type":"keyword",
    "info":"ListVectorDisplacementPlot[{{{vx  , vy  }, â¦, {vx  , vy  }}, â¦, {{vx  , vy  }, â¦, {vx  , vy  }}}] ge"
  },
  {
    "label":"ListVectorDisplacementPlot3D",
    "type":"keyword",
    "info":"ListVectorDisplacementPlot3D[{{{vx  , vy  , vz  }, â¦, {vx  , vy  , vz  }}, â¦, {{vx  , vy  , vz  }, â¦"
  },
  {
    "label":"ListVectorPlot",
    "type":"keyword",
    "info":"ListVectorPlot[array] generates a vector plot from an array of vector field values.ListVectorPlot[{{"
  },
  {
    "label":"ListVectorPlot3D",
    "type":"keyword",
    "info":"ListVectorPlot3D[array] generates a 3D vector plot from a 3D array of vector field values.ListVector"
  },
  {
    "label":"ListZTransform",
    "type":"keyword",
    "info":"ListZTransform[list, z] gives the Z transform of list as a function of z.ListZTransform[list, z, k] "
  },
  {
    "label":"Literal",
    "type":"keyword",
    "info":"System`Literal"
  },
  {
    "label":"LiteralSearch",
    "type":"keyword",
    "info":"System`LiteralSearch"
  },
  {
    "label":"LocalAdaptiveBinarize",
    "type":"keyword",
    "info":"LocalAdaptiveBinarize[image, r] creates a binary image from image by replacing values above the mean"
  },
  {
    "label":"LocalCache",
    "type":"keyword",
    "info":"LocalCache[CloudObject[uri]] caches a cloud object in a local object.LocalCache[URL[url]] caches the"
  },
  {
    "label":"LocalClusteringCoefficient",
    "type":"keyword",
    "info":"LocalClusteringCoefficient[g] gives the list of local clustering coefficients of all vertices in the"
  },
  {
    "label":"LocalizeDefinitions",
    "type":"keyword",
    "info":"System`LocalizeDefinitions"
  },
  {
    "label":"LocalizeVariables",
    "type":"keyword",
    "info":"LocalizeVariables is an option to Manipulate that determines whether the values of variables associa"
  },
  {
    "label":"LocalObject",
    "type":"keyword",
    "info":"LocalObject[] represents a new anonymous local object.LocalObject[\"file :\/\/\/â¦\"] represents a local o"
  },
  {
    "label":"LocalObjects",
    "type":"keyword",
    "info":"LocalObjects[] gives a list of local objects in your current local base directory.LocalObjects[dir] "
  },
  {
    "label":"LocalResponseNormalizationLayer",
    "type":"keyword",
    "info":"LocalResponseNormalizationLayer[] represents a net layer that normalizes its input by averaging acro"
  },
  {
    "label":"LocalSubmit",
    "type":"keyword",
    "info":"LocalSubmit[expr] submits a task to evaluate expr in a separate kernel.LocalSubmit[ScheduledTask[exp"
  },
  {
    "label":"LocalSymbol",
    "type":"keyword",
    "info":"LocalSymbol[\"name\"] represents a symbol whose value is persistently stored in the local file system."
  },
  {
    "label":"LocalTime",
    "type":"keyword",
    "info":"LocalTime[] gives a DateObject corresponding to the current local time at the current geo location.L"
  },
  {
    "label":"LocalTimeZone",
    "type":"keyword",
    "info":"LocalTimeZone[] gives the current time zone for the current geo location.LocalTimeZone[loc] gives th"
  },
  {
    "label":"LocationEquivalenceTest",
    "type":"keyword",
    "info":"LocationEquivalenceTest[{data , data , â¦}] tests whether the means or medians of the data  are equal"
  },
  {
    "label":"LocationTest",
    "type":"keyword",
    "info":"LocationTest[data] tests whether the mean or median of the data is zero. LocationTest[{data , data }"
  },
  {
    "label":"Locator",
    "type":"keyword",
    "info":"Locator[{x, y}] represents a locator object at position {x, y} in a graphic. Locator[Dynamic[pos]] t"
  },
  {
    "label":"LocatorAutoCreate",
    "type":"keyword",
    "info":"LocatorAutoCreate is an option for LocatorPane, Manipulate, and related functions that specifies whe"
  },
  {
    "label":"LocatorBox",
    "type":"keyword",
    "info":"System`LocatorBox"
  },
  {
    "label":"LocatorBoxOptions",
    "type":"keyword",
    "info":"LocatorBoxOptions ï¢ {opt  ï¢ val , opt  ï¢ val , â¦} is an option that specifies settings for LocatorBo"
  },
  {
    "label":"LocatorCentering",
    "type":"keyword",
    "info":"System`LocatorCentering"
  },
  {
    "label":"LocatorPane",
    "type":"keyword",
    "info":"LocatorPane[{x, y}, back] represents a pane with a locator at position {x, y} and background back.Lo"
  },
  {
    "label":"LocatorPaneBox",
    "type":"keyword",
    "info":"System`LocatorPaneBox"
  },
  {
    "label":"LocatorPaneBoxOptions",
    "type":"keyword",
    "info":"LocatorPaneBoxOptions ï¢ {opt  ï¢ val , opt  ï¢ val , â¦} is an option that specifies settings for Locat"
  },
  {
    "label":"LocatorRegion",
    "type":"keyword",
    "info":"LocatorRegion is an option for Locator that specifies where the locator object should by default be "
  },
  {
    "label":"Locked",
    "type":"keyword",
    "info":"Locked is an attribute that, once assigned, prevents modification of any attributes of a symbol. "
  },
  {
    "label":"Log",
    "type":"keyword",
    "info":"Log[z] gives the natural logarithm of z (logarithm to base e). Log[b, z] gives the logarithm to base"
  },
  {
    "label":"Log10",
    "type":"keyword",
    "info":"Log10[x] gives the base-10 logarithm of x."
  },
  {
    "label":"Log2",
    "type":"keyword",
    "info":"Log2[x] gives the base-2 logarithm of x."
  },
  {
    "label":"LogBarnesG",
    "type":"keyword",
    "info":"LogBarnesG[z] gives the logarithm of the Barnes G-function logG(z)."
  },
  {
    "label":"LogGamma",
    "type":"keyword",
    "info":"LogGamma[z] gives the logarithm of the gamma function log Î(z). "
  },
  {
    "label":"LogGammaDistribution",
    "type":"keyword",
    "info":"LogGammaDistribution[Î\\[PlusMinus], Î\.b2, Î¼] represents a log-gamma distribution with shape parameters Î\\[PlusMinus] and Î\.b2 and "
  },
  {
    "label":"LogicalExpand",
    "type":"keyword",
    "info":"LogicalExpand[expr] expands out logical combinations of equations, inequalities, and other functions"
  },
  {
    "label":"LogIntegral",
    "type":"keyword",
    "info":"LogIntegral[z] is the logarithmic integral function li(z). "
  },
  {
    "label":"LogisticDistribution",
    "type":"keyword",
    "info":"LogisticDistribution[Î¼, Î\.b2] represents a logistic distribution with mean Î¼ and scale parameter Î\.b2.Logi"
  },
  {
    "label":"LogisticSigmoid",
    "type":"keyword",
    "info":"LogisticSigmoid[z] gives the logistic sigmoid function."
  },
  {
    "label":"LogitModelFit",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"LogLikelihood",
    "type":"keyword",
    "info":"LogLikelihood[dist, {x , x , â¦}] gives the logâlikelihood function for observations x , x , â¦ from t"
  },
  {
    "label":"LogLinearPlot",
    "type":"keyword",
    "info":"LogLinearPlot[f, {x, x   , x   }] generates a log-linear plot of f as a function of x from x    to x"
  },
  {
    "label":"LogLogisticDistribution",
    "type":"keyword",
    "info":"LogLogisticDistribution[Î\.b3, Ï] represents a log-logistic distribution with shape parameter Î\.b3 and scal"
  },
  {
    "label":"LogLogPlot",
    "type":"keyword",
    "info":"LogLogPlot[f, {x, x   , x   }] generates a log-log plot of f as a function of x from x    to x   . L"
  },
  {
    "label":"LogMultinormalDistribution",
    "type":"keyword",
    "info":"LogMultinormalDistribution[Î¼, Î£] represents a log-multinormal distribution with parameters Î¼ and Î£."
  },
  {
    "label":"LogNormalDistribution",
    "type":"keyword",
    "info":"LogNormalDistribution[Î¼, Ï] represents a lognormal distribution derived from a normal distribution w"
  },
  {
    "label":"LogPlot",
    "type":"keyword",
    "info":"LogPlot[f, {x, x   , x   }] generates a log plot of f as a function of x from x    to x   . LogPlot["
  },
  {
    "label":"LogRankTest",
    "type":"keyword",
    "info":"LogRankTest[{data , data , â¦}] tests for equal hazard rates among the data  using a log-rank type te"
  },
  {
    "label":"LogSeriesDistribution",
    "type":"keyword",
    "info":"LogSeriesDistribution[Î¸] represents a logarithmic series distribution with parameter Î¸."
  },
  {
    "label":"LongEqual",
    "type":"keyword",
    "info":"System`LongEqual"
  },
  {
    "label":"Longest",
    "type":"keyword",
    "info":"Longest[p] is a pattern object that matches the longest sequence consistent with the pattern p. "
  },
  {
    "label":"LongestCommonSequence",
    "type":"keyword",
    "info":"LongestCommonSequence[s , s ] finds the longest sequence of contiguous or disjoint elements common t"
  },
  {
    "label":"LongestCommonSequencePositions",
    "type":"keyword",
    "info":"LongestCommonSequencePositions[s , s ] finds the longest sequence of contiguous or disjoint elements"
  },
  {
    "label":"LongestCommonSubsequence",
    "type":"keyword",
    "info":"LongestCommonSubsequence[s , s ] finds the longest contiguous subsequence of elements common to the "
  },
  {
    "label":"LongestCommonSubsequencePositions",
    "type":"keyword",
    "info":"LongestCommonSubsequencePositions[s , s ] finds the longest contiguous subsequence of elements commo"
  },
  {
    "label":"LongestMatch",
    "type":"keyword",
    "info":"LongestMatch[p] is a string pattern object matching the longest sequence of characters consistent wi"
  },
  {
    "label":"LongestOrderedSequence",
    "type":"keyword",
    "info":"LongestOrderedSequence[list] finds the longest ordered sequence of contiguous or disjoint elements i"
  },
  {
    "label":"LongForm",
    "type":"keyword",
    "info":"LongForm is an option for Information. With LongForm -> True, the full information of a symbol is pr"
  },
  {
    "label":"Longitude",
    "type":"keyword",
    "info":"Longitude[pos] gives the longitude in degrees of a geographic position specified by pos.Longitude[po"
  },
  {
    "label":"LongLeftArrow",
    "type":"keyword",
    "info":"LongLeftArrow[x, y, â¦] displays as x â\\[Micro] y â\\[Micro] â¦."
  },
  {
    "label":"LongLeftRightArrow",
    "type":"keyword",
    "info":"LongLeftRightArrow[x, y, â¦] displays as x â\\[CenterDot] y â\\[CenterDot] â¦."
  },
  {
    "label":"LongRightArrow",
    "type":"keyword",
    "info":"LongRightArrow[x, y, â¦] displays as x â\\[Paragraph] y â\\[Paragraph] â¦."
  },
  {
    "label":"LongShortTermMemoryLayer",
    "type":"keyword",
    "info":"LongShortTermMemoryLayer[n] represents a trainable recurrent layer that takes a sequence of vectors "
  },
  {
    "label":"Lookup",
    "type":"keyword",
    "info":"Lookup[assoc, key] looks up the value associated with key in the association assoc; if the key is no"
  },
  {
    "label":"Loopback",
    "type":"keyword",
    "info":"Loopback is a setting for the LinkMode option of LinkOpen.  LinkMode->Loopback causes a link to be c"
  },
  {
    "label":"LoopFreeGraphQ",
    "type":"keyword",
    "info":"LoopFreeGraphQ[g] yields True if the graph g has no self-loops, and False otherwise."
  },
  {
    "label":"Looping",
    "type":"keyword",
    "info":"Looping is an option for VideoStream, AudioStream and related functions to specify the playback loop"
  },
  {
    "label":"LossFunction",
    "type":"keyword",
    "info":"LossFunction is an option for NetTrain that specifies how to compare actual and requested outputs fr"
  },
  {
    "label":"LowerCaseQ",
    "type":"keyword",
    "info":"LowerCaseQ[string] yields True if all the characters in the string are lowercase letters, and yields"
  },
  {
    "label":"LowerLeftArrow",
    "type":"keyword",
    "info":"LowerLeftArrow[x, y, â¦] displays as x â y â â¦."
  },
  {
    "label":"LowerRightArrow",
    "type":"keyword",
    "info":"LowerRightArrow[x, y, â¦] displays as x â y â â¦."
  },
  {
    "label":"LowerTriangularize",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"LowerTriangularMatrixQ",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"LowpassFilter",
    "type":"keyword",
    "info":"LowpassFilter[data, Ï ] applies a lowpass filter with a cutoff frequency Ï  to an array of data.Lowp"
  },
  {
    "label":"LQEstimatorGains",
    "type":"keyword",
    "info":"LQEstimatorGains[ssm, {w, v}] gives the optimal estimator gain matrix for the StateSpaceModel ssm, w"
  },
  {
    "label":"LQGRegulator",
    "type":"keyword",
    "info":"LQGRegulator[sspec, cvs, wts] gives the optimal output feedback controller for the stochastic system"
  },
  {
    "label":"LQOutputRegulatorGains",
    "type":"keyword",
    "info":"LQOutputRegulatorGains[sspec, wts] gives the state feedback gains for the system specification sspec"
  },
  {
    "label":"LQRegulatorGains",
    "type":"keyword",
    "info":"LQRegulatorGains[spsec, wts] gives the state feedback gains for the system specification sspec that "
  },
  {
    "label":"LUBackSubstitution",
    "type":"keyword",
    "info":"System`LUBackSubstitution"
  },
  {
    "label":"LucasL",
    "type":"keyword",
    "info":"LucasL[n] gives the Lucas number L .LucasL[n, x] gives the Lucas polynomial L (x).\n                 "
  },
  {
    "label":"LuccioSamiComponents",
    "type":"keyword",
    "info":"LuccioSamiComponents[g] gives the LuccioâSami components of the graph g.LuccioSamiComponents[g, {v ,"
  },
  {
    "label":"LUDecomposition",
    "type":"keyword",
    "info":"LUDecomposition[m] generates a representation of the LU decomposition of a square matrixÂ m. "
  },
  {
    "label":"LunarEclipse",
    "type":"keyword",
    "info":"LunarEclipse[] gives the time of the next lunar eclipse.LunarEclipse[datespec] gives the time for th"
  },
  {
    "label":"LUVColor",
    "type":"keyword",
    "info":"LUVColor[l, u, v] represents a color in the LUV color space with lightness l and color components u "
  },
  {
    "label":"LyapunovSolve",
    "type":"keyword",
    "info":"LyapunovSolve[a, c] finds a solution x of the matrix Lyapunov equation a . x + x . a ï ï c.LyapunovS"
  },
  {
    "label":"LyonsGroupLy",
    "type":"keyword",
    "info":"LyonsGroupLy[] represents the sporadic simple Lyons group Ly."
  },
  {
    "label":"MachineID",
    "type":"keyword",
    "info":"MachineID is an option to Encode which specifies the required value of $MachineID on the computer th"
  },
  {
    "label":"MachineName",
    "type":"keyword",
    "info":"MachineName is an option to Encode which specifies the required value of $MachineName on the compute"
  },
  {
    "label":"MachineNumberQ",
    "type":"keyword",
    "info":"MachineNumberQ[expr] returns True if expr is a machineâprecision real or complex number, and returns"
  },
  {
    "label":"MachinePrecision",
    "type":"keyword",
    "info":"MachinePrecision is a symbol used to indicate machineânumber precision. "
  },
  {
    "label":"MacintoshSystemPageSetup",
    "type":"keyword",
    "info":"System`MacintoshSystemPageSetup"
  },
  {
    "label":"Magenta",
    "type":"keyword",
    "info":"Magenta represents the color magenta in graphics or style specifications. "
  },
  {
    "label":"Magnification",
    "type":"keyword",
    "info":"Magnification is an option for Style and Cell that specifies what magnification to use for display. "
  },
  {
    "label":"Magnify",
    "type":"keyword",
    "info":"Magnify[expr, r] represents an object to be displayed with magnification r. Magnify[expr] displays w"
  },
  {
    "label":"MailAddressValidation",
    "type":"keyword",
    "info":"MailAddressValidation is an option for SendMail that specifies whether and how to validate email add"
  },
  {
    "label":"MailExecute",
    "type":"keyword",
    "info":"MailExecute[cmd, target] executes the mail command cmd on the target mail server connection, folder,"
  },
  {
    "label":"MailFolder",
    "type":"keyword",
    "info":"MailFolder[â¦] represents a mail folder associated with an active mail server connection."
  },
  {
    "label":"MailItem",
    "type":"keyword",
    "info":"MailItem[â¦] represents an item of mail associated with an active mail server connection."
  },
  {
    "label":"MailReceiverFunction",
    "type":"keyword",
    "info":"MailReceiverFunction[fun] represents a mail receiver function that applies fun to any mail message i"
  },
  {
    "label":"MailResponseFunction",
    "type":"keyword",
    "info":"MailResponseFunction is an option for MailReceiverFunction that specifies what function to apply to "
  },
  {
    "label":"MailSearch",
    "type":"keyword",
    "info":"MailSearch[folder, assoc] searches the specified mail folder for messages with properties matching e"
  },
  {
    "label":"MailServerConnect",
    "type":"keyword",
    "info":"MailServerConnect[] connects to your default incoming mail server.MailServerConnect[\"server\"] connec"
  },
  {
    "label":"MailServerConnection",
    "type":"keyword",
    "info":"MailServerConnection[â¦] is a symbolic representation of a connection to an incoming mail server."
  },
  {
    "label":"MailSettings",
    "type":"keyword",
    "info":"MailSettings is an option for SendMail and MailServerConnect to specify mail settings."
  },
  {
    "label":"MainSolve",
    "type":"keyword",
    "info":"MainSolve[eqns] is the underlying function for transforming systems of equations. Solve and Eliminat"
  },
  {
    "label":"MaintainDynamicCaches",
    "type":"keyword",
    "info":"System`MaintainDynamicCaches"
  },
  {
    "label":"Majority",
    "type":"keyword",
    "info":"Majority[e , e , â¦] gives True if the majority of the e  are True, and False if the majority are Fal"
  },
  {
    "label":"MakeBoxes",
    "type":"keyword",
    "info":"MakeBoxes[expr, form] is the lowâlevel function used in Wolfram System sessions to convert expressio"
  },
  {
    "label":"MakeExpression",
    "type":"keyword",
    "info":"MakeExpression[boxes, form] is the lowâlevel function used in Wolfram System sessions to construct e"
  },
  {
    "label":"MakeRules",
    "type":"keyword",
    "info":"MakeRules is an option to Solve and related functions. With MakeRules -> True, the result is present"
  },
  {
    "label":"ManagedLibraryExpressionID",
    "type":"keyword",
    "info":"ManagedLibraryExpressionID[expr] returns the positive integer ID associated with expr if it is a man"
  },
  {
    "label":"ManagedLibraryExpressionQ",
    "type":"keyword",
    "info":"ManagedLibraryExpressionQ[expr] returns True if expr is a managed library expression and False other"
  },
  {
    "label":"MandelbrotSetBoettcher",
    "type":"keyword",
    "info":"MandelbrotSetBoettcher[z] gives the BÃ\\[Paragraph]ttcher coordinate of z with respect to the Mandelbrot set."
  },
  {
    "label":"MandelbrotSetDistance",
    "type":"keyword",
    "info":"MandelbrotSetDistance[c] estimates the distance from c to the nearest point in the Mandelbrot set.Ma"
  },
  {
    "label":"MandelbrotSetIterationCount",
    "type":"keyword",
    "info":"                                                                                        2\nMandelbrot"
  },
  {
    "label":"MandelbrotSetMemberQ",
    "type":"keyword",
    "info":"MandelbrotSetMemberQ[z] returns True if z is in the Mandelbrot set, and False otherwise."
  },
  {
    "label":"MandelbrotSetPlot",
    "type":"keyword",
    "info":"MandelbrotSetPlot[{z   , z   }] plots the portion of the Mandelbrot set inside the rectangle with co"
  },
  {
    "label":"MangoldtLambda",
    "type":"keyword",
    "info":"MangoldtLambda[n] gives the von Mangoldt function Î(n)."
  },
  {
    "label":"ManhattanDistance",
    "type":"keyword",
    "info":"ManhattanDistance[u, v] gives the Manhattan or \"city block\" distance between vectors u and v."
  },
  {
    "label":"Manipulate",
    "type":"keyword",
    "info":"Manipulate[expr, {u, u   , u   }] generates a version of expr with controls added to allow interacti"
  },
  {
    "label":"Manipulator",
    "type":"keyword",
    "info":"Manipulator[x] represents a manipulator with setting x in the range 0 to 1. Manipulator[Dynamic[x]] "
  },
  {
    "label":"MannedSpaceMissionData",
    "type":"keyword",
    "info":"MannedSpaceMissionData[entity, property] gives the value of the specified property for the manned sp"
  },
  {
    "label":"MannWhitneyTest",
    "type":"keyword",
    "info":"MannWhitneyTest[{data , data }] tests whether the medians of data  and data  are equal.MannWhitneyTe"
  },
  {
    "label":"MantissaExponent",
    "type":"keyword",
    "info":"MantissaExponent[x] gives a list containing the mantissa and exponent of a number x. MantissaExponen"
  },
  {
    "label":"Manual",
    "type":"keyword",
    "info":"Manual represents an option or other value that is to be selected manually, usually by some form of "
  },
  {
    "label":"Map",
    "type":"keyword",
    "info":"Map[f, expr] or f\/@expr applies f to each element on the first level in expr. Map[f, expr, levelspec"
  },
  {
    "label":"MapAll",
    "type":"keyword",
    "info":"MapAll[f, expr] or f\/\/@expr applies f to every subexpression in expr. "
  },
  {
    "label":"MapAt",
    "type":"keyword",
    "info":"MapAt[f, expr, n] applies f to the element at position n in expr. If n is negative, the position is "
  },
  {
    "label":"MapIndexed",
    "type":"keyword",
    "info":"MapIndexed[f, expr] applies f to the elements of expr, giving the part specification of each element"
  },
  {
    "label":"MAProcess",
    "type":"keyword",
    "info":"MAProcess[{b , â¦, b }, v] represents a moving-average process of order q with normal white noise var"
  },
  {
    "label":"MapThread",
    "type":"keyword",
    "info":"MapThread[f, {{a , a , â¦}, {b , b , â¦}, â¦}] gives {f[a , b , â¦], f[a , b , â¦], â¦}. MapThread[f, {exp"
  },
  {
    "label":"MarchenkoPasturDistribution",
    "type":"keyword",
    "info":"MarchenkoPasturDistribution[Î», Ï] represents a MarchenkoâPastur distribution with asymptotic ratio Î»"
  },
  {
    "label":"MarcumQ",
    "type":"keyword",
    "info":"MarcumQ[m, a, b] gives Marcum's Q function Q (a, b).MarcumQ[m, a, b , b ] gives Marcum's Q function "
  },
  {
    "label":"MardiaCombinedTest",
    "type":"keyword",
    "info":"MardiaCombinedTest[data] tests whether data follows a MultinormalDistribution using the Mardia combi"
  },
  {
    "label":"MardiaKurtosisTest",
    "type":"keyword",
    "info":"MardiaKurtosisTest[data] tests whether data follows a MultinormalDistribution using the Mardia kurto"
  },
  {
    "label":"MardiaSkewnessTest",
    "type":"keyword",
    "info":"MardiaSkewnessTest[data] tests whether data follows a MultinormalDistribution using the Mardia skewn"
  },
  {
    "label":"MarginalDistribution",
    "type":"keyword",
    "info":"                                                                                     th\nMarginalDist"
  },
  {
    "label":"MarkovProcessProperties",
    "type":"keyword",
    "info":"MarkovProcessProperties[mproc] gives a summary of properties for the finite state Markov process mpr"
  },
  {
    "label":"Masking",
    "type":"keyword",
    "info":"Masking is an option for various image and signal processing functions that specifies on which regio"
  },
  {
    "label":"MassConcentrationCondition",
    "type":"keyword",
    "info":"MassConcentrationCondition[pred, vars, pars] represents a mass concentration boundary condition for "
  },
  {
    "label":"MassFluxValue",
    "type":"keyword",
    "info":"MassFluxValue[pred, vars, pars] represents a mass flux boundary condition for PDEs with predicate pr"
  },
  {
    "label":"MassImpermeableBoundaryValue",
    "type":"keyword",
    "info":"MassImpermeableBoundaryValue[pred, vars, pars] represents a mass impermeable boundary condition for "
  },
  {
    "label":"MassOutflowValue",
    "type":"keyword",
    "info":"MassOutflowValue[pred, vars, pars] represents a mass outflow boundary condition for PDEs with predic"
  },
  {
    "label":"MassSymmetryValue",
    "type":"keyword",
    "info":"MassSymmetryValue[pred, vars, pars] represents a mass symmetry boundary condition for PDEs with pred"
  },
  {
    "label":"MassTransferValue",
    "type":"keyword",
    "info":"MassTransferValue[pred, vars, pars] represents a mass transfer boundary condition for PDEs with pred"
  },
  {
    "label":"MassTransportPDEComponent",
    "type":"keyword",
    "info":"MassTransportPDEComponent[vars, pars] yields a mass transport PDE term with variables vars and param"
  },
  {
    "label":"MatchingDissimilarity",
    "type":"keyword",
    "info":"MatchingDissimilarity[u, v] gives the matching dissimilarity between Boolean vectors u and v."
  },
  {
    "label":"MatchLocalNameQ",
    "type":"keyword",
    "info":"MatchLocalNameQ is an internal symbol."
  },
  {
    "label":"MatchLocalNames",
    "type":"keyword",
    "info":"MatchLocalNames is an option for Trace and related functions that specifies whether symbols such as "
  },
  {
    "label":"MatchQ",
    "type":"keyword",
    "info":"MatchQ[expr, form] returns True if the pattern form matches expr, and returns False otherwise.MatchQ"
  },
  {
    "label":"Material",
    "type":"keyword",
    "info":"System`Material"
  },
  {
    "label":"MaterialShading",
    "type":"keyword",
    "info":"MaterialShading[\"material\"] is a three-dimensional graphics directive specifying that surfaces that "
  },
  {
    "label":"MaternPointProcess",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"MathematicalFunctionData",
    "type":"keyword",
    "info":"MathematicalFunctionData[entity, property] gives data corresponding to property for the mathematical"
  },
  {
    "label":"MathematicaNotation",
    "type":"keyword",
    "info":"System`MathematicaNotation"
  },
  {
    "label":"MathieuC",
    "type":"keyword",
    "info":"MathieuC[a, q, z] gives the even Mathieu function with characteristic value a and parameterÂ q. "
  },
  {
    "label":"MathieuCharacteristicA",
    "type":"keyword",
    "info":"MathieuCharacteristicA[r, q] gives the characteristic value a  for even Mathieu functions with chara"
  },
  {
    "label":"MathieuCharacteristicB",
    "type":"keyword",
    "info":"MathieuCharacteristicB[r, q] gives the characteristic value b  for odd Mathieu functions with charac"
  },
  {
    "label":"MathieuCharacteristicExponent",
    "type":"keyword",
    "info":"MathieuCharacteristicExponent[a, q] gives the characteristic exponent r for Mathieu functions with c"
  },
  {
    "label":"MathieuCPrime",
    "type":"keyword",
    "info":"MathieuCPrime[a, q, z] gives the derivative with respect to z of the even Mathieu function with char"
  },
  {
    "label":"MathieuGroupM11",
    "type":"keyword",
    "info":"MathieuGroupM11[] represents the sporadic simple Mathieu group M  .\n                                "
  },
  {
    "label":"MathieuGroupM12",
    "type":"keyword",
    "info":"MathieuGroupM12[] represents the sporadic simple Mathieu group M  .\n                                "
  },
  {
    "label":"MathieuGroupM22",
    "type":"keyword",
    "info":"MathieuGroupM22[] represents the sporadic simple Mathieu group M  .\n                                "
  },
  {
    "label":"MathieuGroupM23",
    "type":"keyword",
    "info":"MathieuGroupM23[] represents the sporadic simple Mathieu group M  .\n                                "
  },
  {
    "label":"MathieuGroupM24",
    "type":"keyword",
    "info":"MathieuGroupM24[] represents the sporadic simple Mathieu group M  .\n                                "
  },
  {
    "label":"MathieuS",
    "type":"keyword",
    "info":"MathieuS[a, q, z] gives the odd Mathieu function with characteristic value a and parameterÂ q. "
  },
  {
    "label":"MathieuSPrime",
    "type":"keyword",
    "info":"MathieuSPrime[a, q, z] gives the derivative with respect to z of the odd Mathieu function with chara"
  },
  {
    "label":"MathMLForm",
    "type":"keyword",
    "info":"MathMLForm[expr] prints as a MathML form of expr. "
  },
  {
    "label":"MathMLText",
    "type":"keyword",
    "info":"System`MathMLText"
  },
  {
    "label":"Matrices",
    "type":"keyword",
    "info":"Matrices[{d , d }] represents the domain of matrices of dimensions d Ãd .Matrices[{d , d }, dom] rep"
  },
  {
    "label":"MatrixExp",
    "type":"keyword",
    "info":"MatrixExp[m] gives the matrix exponential of m. MatrixExp[m, v] gives the matrix exponential of m ap"
  },
  {
    "label":"MatrixForm",
    "type":"keyword",
    "info":"MatrixForm[list] prints with the elements of list arranged in a regular array. "
  },
  {
    "label":"MatrixFunction",
    "type":"keyword",
    "info":"MatrixFunction[f, m] gives the matrix generated by the scalar function f at the matrix argument m."
  },
  {
    "label":"MatrixLog",
    "type":"keyword",
    "info":"MatrixLog[m] gives the matrix logarithm of a matrix m."
  },
  {
    "label":"MatrixNormalDistribution",
    "type":"keyword",
    "info":"MatrixNormalDistribution[Î£   , Î£   ] represents zero mean matrix normal distribution with row covari"
  },
  {
    "label":"MatrixPlot",
    "type":"keyword",
    "info":"MatrixPlot[m] generates a plot that gives a visual representation of the values of elements in a mat"
  },
  {
    "label":"MatrixPower",
    "type":"keyword",
    "info":"                               th                                                                th\n"
  },
  {
    "label":"MatrixPropertyDistribution",
    "type":"keyword",
    "info":"MatrixPropertyDistribution[expr, x ï mdist] represents the distribution of the matrix property expr "
  },
  {
    "label":"MatrixQ",
    "type":"keyword",
    "info":"MatrixQ[expr] gives True if expr is a list of lists or a two-dimensional SparseArray object that can"
  },
  {
    "label":"MatrixRank",
    "type":"keyword",
    "info":"MatrixRank[m] gives the rank of the matrix m. "
  },
  {
    "label":"MatrixTDistribution",
    "type":"keyword",
    "info":"MatrixTDistribution[Î£   , Î£   , Î½] represents zero mean matrix t distribution with row covariance ma"
  },
  {
    "label":"Max",
    "type":"keyword",
    "info":"Max[x , x , â¦] yields the numerically largest of the x . Max[{x , x , â¦}, {y , â¦}, â¦] yields the lar"
  },
  {
    "label":"MaxBend",
    "type":"keyword",
    "info":"System`MaxBend"
  },
  {
    "label":"MaxCellMeasure",
    "type":"keyword",
    "info":"MaxCellMeasure is an option for DiscretizeRegion and related functions that specifies the maximum ce"
  },
  {
    "label":"MaxColorDistance",
    "type":"keyword",
    "info":"MaxColorDistance is an option to specify the maximum distance allowed between colors."
  },
  {
    "label":"MaxDate",
    "type":"keyword",
    "info":"MaxDate[{date , date , â¦}] gives the latest date of the date .MaxDate[interval] gives the endpoint o"
  },
  {
    "label":"MaxDetect",
    "type":"keyword",
    "info":"MaxDetect[image] gives a binary image in which white pixels correspond to constant extended maxima i"
  },
  {
    "label":"MaxDuration",
    "type":"keyword",
    "info":"MaxDuration is an option that specifies the maximum duration for audio playback or capture."
  },
  {
    "label":"MaxExtraBandwidths",
    "type":"keyword",
    "info":"MaxExtraBandwidths is an option to SmoothKernelDistribution that controls the behavior outside that "
  },
  {
    "label":"MaxExtraConditions",
    "type":"keyword",
    "info":"MaxExtraConditions is an option to Solve and related functions that specifies how many extra equatio"
  },
  {
    "label":"MaxFeatureDisplacement",
    "type":"keyword",
    "info":"MaxFeatureDisplacement is an option that specifies the maximum displacement allowed for any feature."
  },
  {
    "label":"MaxFeatures",
    "type":"keyword",
    "info":"MaxFeatures is an option that specifies the maximum number of features that will be returned from fe"
  },
  {
    "label":"MaxFilter",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"MaximalBy",
    "type":"keyword",
    "info":"MaximalBy[{e , e , â¦}, f] returns a list of the e  for which the value of f[e ] is maximal.MaximalBy"
  },
  {
    "label":"Maximize",
    "type":"keyword",
    "info":"Maximize[f, x] maximizes f exactly with respect to x.Maximize[f, {x, y, â¦}] maximizes f exactly with"
  },
  {
    "label":"MaxItems",
    "type":"keyword",
    "info":"MaxItems is an option that specifies the maximum number of items to be used or shown."
  },
  {
    "label":"MaxIterations",
    "type":"keyword",
    "info":"MaxIterations is an option that specifies the maximum number of iterations that should be tried in v"
  },
  {
    "label":"MaxLimit",
    "type":"keyword",
    "info":"                 *                                                        *           *             "
  },
  {
    "label":"MaxMemoryUsed",
    "type":"keyword",
    "info":"MaxMemoryUsed[] gives the maximum number of bytes used to store all data for the current Wolfram Sys"
  },
  {
    "label":"MaxMixtureKernels",
    "type":"keyword",
    "info":"MaxMixtureKernels is an option for SmoothKernelDistribution and related functions that specifies the"
  },
  {
    "label":"MaxOverlapFraction",
    "type":"keyword",
    "info":"MaxOverlapFraction is an option that specifies the maximum acceptable overlap between different iden"
  },
  {
    "label":"MaxPlotPoints",
    "type":"keyword",
    "info":"MaxPlotPoints is an option for plotting functions like ArrayPlot and ListPlot3D that specifies the m"
  },
  {
    "label":"MaxPoints",
    "type":"keyword",
    "info":"MaxPoints is an option for NIntegrate specifying the maximum total number of times to sample the int"
  },
  {
    "label":"MaxRecursion",
    "type":"keyword",
    "info":"MaxRecursion is an option for functions like NIntegrate and Plot that specifies how many recursive s"
  },
  {
    "label":"MaxStableDistribution",
    "type":"keyword",
    "info":"MaxStableDistribution[Î¼, Ï, Î¾] represents a generalized maximum extreme value distribution with loca"
  },
  {
    "label":"MaxStepFraction",
    "type":"keyword",
    "info":"MaxStepFraction is an option to functions like NDSolve that specifies the maximum fraction of the to"
  },
  {
    "label":"MaxSteps",
    "type":"keyword",
    "info":"MaxSteps is an option to functions like NDSolve that specifies the maximum number of steps to take i"
  },
  {
    "label":"MaxStepSize",
    "type":"keyword",
    "info":"MaxStepSize is an option to functions like NDSolve that specifies the maximum size of a single step "
  },
  {
    "label":"MaxTrainingRounds",
    "type":"keyword",
    "info":"MaxTrainingRounds is an option for NetTrain and related functions that specifies the maximum number "
  },
  {
    "label":"MaxValue",
    "type":"keyword",
    "info":"MaxValue[f, x] gives the maximum value of f with respect to x.MaxValue[f, {x, y, â¦}] gives the maxim"
  },
  {
    "label":"MaxwellDistribution",
    "type":"keyword",
    "info":"MaxwellDistribution[Ï] represents a Maxwell distribution with scale parameter Ï."
  },
  {
    "label":"MaxWordGap",
    "type":"keyword",
    "info":"MaxWordGap is an option for SearchAdjustment that specifies the number of words that can occur betwe"
  },
  {
    "label":"McLaughlinGroupMcL",
    "type":"keyword",
    "info":"McLaughlinGroupMcL[] represents the sporadic simple McLaughlin group McL."
  },
  {
    "label":"Mean",
    "type":"keyword",
    "info":"Mean[list] gives the statistical mean of the elements in list. Mean[dist] gives the mean of the dist"
  },
  {
    "label":"MeanAbsoluteLossLayer",
    "type":"keyword",
    "info":"MeanAbsoluteLossLayer[] represents a loss layer that computes the mean absolute loss between the \"In"
  },
  {
    "label":"MeanAround",
    "type":"keyword",
    "info":"MeanAround[{x , x , x , â¦}] gives an Around object describing the mean of the x  and its uncertainty"
  },
  {
    "label":"MeanClusteringCoefficient",
    "type":"keyword",
    "info":"MeanClusteringCoefficient[g] gives the mean clustering coefficient of the graph g.MeanClusteringCoef"
  },
  {
    "label":"MeanDegreeConnectivity",
    "type":"keyword",
    "info":"MeanDegreeConnectivity[g] gives a list of k-mean degree connectivity for the graph g for successive "
  },
  {
    "label":"MeanDeviation",
    "type":"keyword",
    "info":"MeanDeviation[list] gives the mean absolute deviation from the mean of the elements in list."
  },
  {
    "label":"MeanFilter",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"MeanGraphDistance",
    "type":"keyword",
    "info":"MeanGraphDistance[g] gives the mean distance between all pairs of vertices in the graph g.MeanGraphD"
  },
  {
    "label":"MeanNeighborDegree",
    "type":"keyword",
    "info":"MeanNeighborDegree[g] gives a list of mean neighbor degrees of vertices for the graph g.MeanNeighbor"
  },
  {
    "label":"MeanPointDensity",
    "type":"keyword",
    "info":"MeanPointDensity[pdata] estimates the mean point density Î» from point data pdata in the observation "
  },
  {
    "label":"MeanShift",
    "type":"keyword",
    "info":"MeanShift[list, d] replaces each element in list by the mean of the values of all elements that diff"
  },
  {
    "label":"MeanShiftFilter",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"MeanSquaredLossLayer",
    "type":"keyword",
    "info":"MeanSquaredLossLayer[] represents a loss layer that computes the mean squared loss between its \"Inpu"
  },
  {
    "label":"Median",
    "type":"keyword",
    "info":"Median[list] gives the median of the elements in list. Median[dist] gives the median of the distribu"
  },
  {
    "label":"MedianDeviation",
    "type":"keyword",
    "info":"MedianDeviation[list] gives the median absolute deviation from the median of the elements in list."
  },
  {
    "label":"MedianFilter",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"MedicalTestData",
    "type":"keyword",
    "info":"MedicalTestData[entity, property] gives the value of the specified property for the medical test ent"
  },
  {
    "label":"Medium",
    "type":"keyword",
    "info":"Medium is a style or option setting that specifies that objects should be medium sized."
  },
  {
    "label":"MeijerG",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"MeijerGReduce",
    "type":"keyword",
    "info":"MeijerGReduce[expr, x] attempts to reduce expr to a single MeijerG object as a function of x."
  },
  {
    "label":"MeixnerDistribution",
    "type":"keyword",
    "info":"MeixnerDistribution[a, b, m, d] represents a Meixner distribution with location parameter m, scale p"
  },
  {
    "label":"MellinConvolve",
    "type":"keyword",
    "info":"MellinConvolve[f, g, x, y] gives the Mellin convolution with respect to x of the expressions f and g"
  },
  {
    "label":"MellinTransform",
    "type":"keyword",
    "info":"MellinTransform[expr, x, s] gives the Mellin transform of expr.MellinTransform[expr, {x , x , â¦}, {s"
  },
  {
    "label":"MemberQ",
    "type":"keyword",
    "info":"MemberQ[list, form] returns True if an element of list matches form, and False otherwise. MemberQ[li"
  },
  {
    "label":"MemoryAvailable",
    "type":"keyword",
    "info":"MemoryAvailable[] gives the estimated number of bytes readily available for storing additional data "
  },
  {
    "label":"MemoryConstrained",
    "type":"keyword",
    "info":"MemoryConstrained[expr, b] evaluates expr, stopping if more than b bytes of memory are requested. Me"
  },
  {
    "label":"MemoryConstraint",
    "type":"keyword",
    "info":"MemoryConstraint is an option for TestReport and VerificationTest that specifies how much memory (in"
  },
  {
    "label":"MemoryInUse",
    "type":"keyword",
    "info":"MemoryInUse[] gives the number of bytes currently being used to store all data in the current Wolfra"
  },
  {
    "label":"MengerMesh",
    "type":"keyword",
    "info":"                                                     th                                             "
  },
  {
    "label":"Menu",
    "type":"keyword",
    "info":"System`Menu"
  },
  {
    "label":"MenuAppearance",
    "type":"keyword",
    "info":"System`MenuAppearance"
  },
  {
    "label":"MenuCommandKey",
    "type":"keyword",
    "info":"MenuCommandKey is an option for cells that specifies the keyboard shortcut to be associated with a s"
  },
  {
    "label":"MenuEvaluator",
    "type":"keyword",
    "info":"System`MenuEvaluator"
  },
  {
    "label":"MenuItem",
    "type":"keyword",
    "info":"System`MenuItem"
  },
  {
    "label":"MenuList",
    "type":"keyword",
    "info":"System`MenuList"
  },
  {
    "label":"MenuPacket",
    "type":"keyword",
    "info":"MenuPacket[integer, string] is a WSTP packet indicating a menu request with title string."
  },
  {
    "label":"MenuSortingValue",
    "type":"keyword",
    "info":"MenuSortingValue is an option for cells and notebooks that specifies where a cell style, stylesheet,"
  },
  {
    "label":"MenuStyle",
    "type":"keyword",
    "info":"MenuStyle is an option for menu-generating constructs that specifies the style to use in displaying "
  },
  {
    "label":"MenuView",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"Merge",
    "type":"keyword",
    "info":"Merge[{assoc , assoc , â¦}, f] merges the associations assoc , using the function f to combine values"
  },
  {
    "label":"MergeDifferences",
    "type":"keyword",
    "info":"System`MergeDifferences"
  },
  {
    "label":"MergingFunction",
    "type":"keyword",
    "info":"MergingFunction is an option for functions such as PersistentSymbol that specifies a function to app"
  },
  {
    "label":"MersennePrimeExponent",
    "type":"keyword",
    "info":"                                     th\nMersennePrimeExponent[n] gives the nï    Mersenne prime expon"
  },
  {
    "label":"MersennePrimeExponentQ",
    "type":"keyword",
    "info":"MersennePrimeExponentQ[n] returns True if n is a Mersenne prime exponent, and False otherwise."
  },
  {
    "label":"Mesh",
    "type":"keyword",
    "info":"Mesh is an option for Plot3D, DensityPlot, and other plotting functions that specifies what mesh sho"
  },
  {
    "label":"MeshCellCentroid",
    "type":"keyword",
    "info":"MeshCellCentroid is an annotation of MeshRegion and BoundaryMeshRegion objects that gives the centro"
  },
  {
    "label":"MeshCellCount",
    "type":"keyword",
    "info":"MeshCellCount[mreg] gives a list {c , c , â¦} of counts c  of cells of dimension d in the mesh region"
  },
  {
    "label":"MeshCellHighlight",
    "type":"keyword",
    "info":"MeshCellHighlight is an option and annotation of MeshRegion, BoundaryMeshRegion, and related functio"
  },
  {
    "label":"MeshCellIndex",
    "type":"keyword",
    "info":"MeshCellIndex[mreg, d] gives the cell indices for cells of dimension d in the mesh region mreg.MeshC"
  },
  {
    "label":"MeshCellLabel",
    "type":"keyword",
    "info":"MeshCellLabel is an option to MeshRegion, BoundaryMeshRegion and related functions that specifies la"
  },
  {
    "label":"MeshCellMarker",
    "type":"keyword",
    "info":"MeshCellMarker is an option to MeshRegion and BoundaryMeshRegion that specifies integer markers to a"
  },
  {
    "label":"MeshCellMeasure",
    "type":"keyword",
    "info":"MeshCellMeasure is an annotation of MeshRegion and BoundaryMeshRegion objects that gives the measure"
  },
  {
    "label":"MeshCellQuality",
    "type":"keyword",
    "info":"MeshCellQuality is an annotation of MeshRegion and BoundaryMeshRegion objects that gives a quality m"
  },
  {
    "label":"MeshCells",
    "type":"keyword",
    "info":"MeshCells[mreg, d] gives the cells of dimension d in the mesh region mreg.MeshCells[mreg, cellspec] "
  },
  {
    "label":"MeshCellShapeFunction",
    "type":"keyword",
    "info":"MeshCellShapeFunction is an option and annotation for MeshRegion, BoundaryMeshRegion, and related fu"
  },
  {
    "label":"MeshCellStyle",
    "type":"keyword",
    "info":"MeshCellStyle is an option and annotation of MeshRegion, BoundaryMeshRegion, and related functions t"
  },
  {
    "label":"MeshConnectivityGraph",
    "type":"keyword",
    "info":"MeshConnectivityGraph[mr, 0] gives a graph of points connected by lines.MeshConnectivityGraph[mr, d]"
  },
  {
    "label":"MeshCoordinates",
    "type":"keyword",
    "info":"MeshCoordinates[mreg] gives a list of coordinates in the mesh region mreg."
  },
  {
    "label":"MeshFunctions",
    "type":"keyword",
    "info":"MeshFunctions is an option for plotting functions that specifies functions to use to determine the p"
  },
  {
    "label":"MeshPrimitives",
    "type":"keyword",
    "info":"MeshPrimitives[mreg, d] gives the graphics primitives for cells of dimension d in the mesh region mr"
  },
  {
    "label":"MeshQualityGoal",
    "type":"keyword",
    "info":"MeshQualityGoal is an option for DiscretizeRegion and related functions that specifies a mesh cell q"
  },
  {
    "label":"MeshRange",
    "type":"keyword",
    "info":"System`MeshRange"
  },
  {
    "label":"MeshRefinementFunction",
    "type":"keyword",
    "info":"MeshRefinementFunction is an option for DiscretizeRegion and related functions that specifies a func"
  },
  {
    "label":"MeshRegion",
    "type":"keyword",
    "info":"MeshRegion[{p , p , â¦}, {mcell [{i , â¦}], mcell [{j , â¦}], â¦}] yields a mesh with cells mcell , wher"
  },
  {
    "label":"MeshRegionQ",
    "type":"keyword",
    "info":"MeshRegionQ[reg] yields True if the region reg is a valid MeshRegion object and False otherwise."
  },
  {
    "label":"MeshShading",
    "type":"keyword",
    "info":"MeshShading is an option for plotting functions that gives lists of colors to use for regions betwee"
  },
  {
    "label":"MeshStyle",
    "type":"keyword",
    "info":"MeshStyle is an option for Plot3D, DensityPlot, and other plotting functions that specifies the styl"
  },
  {
    "label":"Message",
    "type":"keyword",
    "info":"Message[symbol :: tag] prints the message symbol :: tag unless it has been switched off. Message[sym"
  },
  {
    "label":"MessageDialog",
    "type":"keyword",
    "info":"MessageDialog[expr] puts up a standard message dialog that displays expr together with an OK button."
  },
  {
    "label":"MessageList",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"MessageName",
    "type":"keyword",
    "info":"symbol :: tag is a name for a message. "
  },
  {
    "label":"MessageObject",
    "type":"keyword",
    "info":"System`MessageObject"
  },
  {
    "label":"MessageOptions",
    "type":"keyword",
    "info":"System`MessageOptions"
  },
  {
    "label":"MessagePacket",
    "type":"keyword",
    "info":"MessagePacket[symbol, string] is a WSTP packet containing a Wolfram Language message identifier of t"
  },
  {
    "label":"Messages",
    "type":"keyword",
    "info":"Messages[symbol] gives all the messages assigned to a particular symbol. "
  },
  {
    "label":"MessagesNotebook",
    "type":"keyword",
    "info":"System`MessagesNotebook"
  },
  {
    "label":"MetaCharacters",
    "type":"keyword",
    "info":"MetaCharacters is an option to StringPosition. With MetaCharacters -> None, no strings have special "
  },
  {
    "label":"MetaInformation",
    "type":"keyword",
    "info":"MetaInformation is an option giving meta-information for Image, CloudObject, and other objects."
  },
  {
    "label":"MeteorShowerData",
    "type":"keyword",
    "info":"MeteorShowerData[entity, property] gives the value of the specified property for the meteor shower e"
  },
  {
    "label":"Method",
    "type":"keyword",
    "info":"Method is an option for various algorithm-intensive functions that specifies what internal methods t"
  },
  {
    "label":"MethodOptions",
    "type":"keyword",
    "info":"System`MethodOptions"
  },
  {
    "label":"MexicanHatWavelet",
    "type":"keyword",
    "info":"MexicanHatWavelet[] represents the Mexican hat wavelet of width 1.MexicanHatWavelet[Ï] represents th"
  },
  {
    "label":"MeyerWavelet",
    "type":"keyword",
    "info":"MeyerWavelet[] represents the Meyer wavelet of order 3.MeyerWavelet[n] represents the Meyer wavelet "
  },
  {
    "label":"Midpoint",
    "type":"keyword",
    "info":"Midpoint[{p , p }] gives the midpoint of the line segment connecting the points p  and p .Midpoint[L"
  },
  {
    "label":"MIMETypeToFormatList",
    "type":"keyword",
    "info":"MIMETypeToFormatList[] returns lists of file formats corresponding to all registered MIME types.MIME"
  },
  {
    "label":"Min",
    "type":"keyword",
    "info":"Min[x , x , â¦] yields the numerically smallest of the x . Min[{x , x , â¦}, {y , â¦}, â¦] yields the sm"
  },
  {
    "label":"MinColorDistance",
    "type":"keyword",
    "info":"MinColorDistance is an option for DominantColors that specifies the minimum distance between returne"
  },
  {
    "label":"MinDate",
    "type":"keyword",
    "info":"MinDate[{date , date , â¦}] gives the earliest date of the date .MinDate[interval] gives the beginnin"
  },
  {
    "label":"MinDetect",
    "type":"keyword",
    "info":"MinDetect[image] gives a binary image in which white pixels correspond to constant extended minima i"
  },
  {
    "label":"MineralData",
    "type":"keyword",
    "info":"MineralData[entity, property] gives the value of the specified property for the mineral entity.Miner"
  },
  {
    "label":"MinFilter",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"MinimalBy",
    "type":"keyword",
    "info":"MinimalBy[{e , e , â¦}, f] returns a list of the e  for which the value of f[e ] is minimal.MinimalBy"
  },
  {
    "label":"MinimalPolynomial",
    "type":"keyword",
    "info":"MinimalPolynomial[s, x] gives the minimal polynomial in x for which the algebraic number s is a root"
  },
  {
    "label":"MinimalStateSpaceModel",
    "type":"keyword",
    "info":"MinimalStateSpaceModel[sys] gives the minimal state-space model of the state-space model sys.Minimal"
  },
  {
    "label":"Minimize",
    "type":"keyword",
    "info":"Minimize[f, x] minimizes f exactly with respect to x.Minimize[f, {x, y, â¦}] minimizes f exactly with"
  },
  {
    "label":"MinimumTimeIncrement",
    "type":"keyword",
    "info":"MinimumTimeIncrement[tseries] gives the minimum time increment in the time series tseries."
  },
  {
    "label":"MinIntervalSize",
    "type":"keyword",
    "info":"MinIntervalSize is an option for IntervalSlider that specifies the minimum size of the interval duri"
  },
  {
    "label":"MinkowskiQuestionMark",
    "type":"keyword",
    "info":"MinkowskiQuestionMark[x] gives Minkowski's question mark function ? (x)."
  },
  {
    "label":"MinLimit",
    "type":"keyword",
    "info":"                 *                                                        *           *             "
  },
  {
    "label":"MinMax",
    "type":"keyword",
    "info":"MinMax[list] gives the list {Min[list], Max[list]}.MinMax[list, Î\.b4] gives {Min[list] - Î\.b4, Max[list] +"
  },
  {
    "label":"MinorPlanetData",
    "type":"keyword",
    "info":"MinorPlanetData[entity, property] gives the value of the specified property for the minor planet ent"
  },
  {
    "label":"Minors",
    "type":"keyword",
    "info":"                                                                    th\nMinors[m] gives the minors of"
  },
  {
    "label":"MinPointSeparation",
    "type":"keyword",
    "info":"MinPointSeparation is an option for GeoGraphValuePlot that determines when to merge nearby vertices "
  },
  {
    "label":"MinRecursion",
    "type":"keyword",
    "info":"MinRecursion is an option for NIntegrate and other numerical functions that use a recursive algorith"
  },
  {
    "label":"MinSize",
    "type":"keyword",
    "info":"MinSize is an option of certain BoxForm primitives."
  },
  {
    "label":"MinStableDistribution",
    "type":"keyword",
    "info":"MinStableDistribution[Î¼, Ï, Î¾] represents a generalized minimum extreme value distribution with loca"
  },
  {
    "label":"Minus",
    "type":"keyword",
    "info":"-x is the arithmetic negation of x. "
  },
  {
    "label":"MinusPlus",
    "type":"keyword",
    "info":"MinusPlus[x] displays as â x.MinusPlus[x, y, â¦] displays as x â y â â¦.\n"
  },
  {
    "label":"MinValue",
    "type":"keyword",
    "info":"MinValue[f, x] gives the minimum value of f with respect to x.MinValue[f, {x, y, â¦}] gives the exact"
  },
  {
    "label":"Missing",
    "type":"keyword",
    "info":"Missing[] represents data that is missing.Missing[\"reason\"] specifies a reason for the data's being "
  },
  {
    "label":"MissingBehavior",
    "type":"keyword",
    "info":"MissingBehavior is an option to Query and related functions that specifies how expressions with head"
  },
  {
    "label":"MissingDataMethod",
    "type":"keyword",
    "info":"MissingDataMethod is an option to TemporalData and other functions that controls how to process miss"
  },
  {
    "label":"MissingDataRules",
    "type":"keyword",
    "info":"MissingDataRules is an option for SemanticImport and related functions that specifies what should be"
  },
  {
    "label":"MissingQ",
    "type":"keyword",
    "info":"MissingQ[expr] gives True if expr has head Missing."
  },
  {
    "label":"MissingString",
    "type":"keyword",
    "info":"MissingString is an option for TextString and related functions that indicates how an expression wit"
  },
  {
    "label":"MissingStyle",
    "type":"keyword",
    "info":"MissingStyle is an option for GeoRegionValuePlot that specifies how locations with missing data shou"
  },
  {
    "label":"MissingValuePattern",
    "type":"keyword",
    "info":"MissingValuePattern is an option for SynthesizeMissingValues to specify which elements are considere"
  },
  {
    "label":"MissingValueSynthesis",
    "type":"keyword",
    "info":"MissingValueSynthesis is an option for functions such as Classify that specifies how missing values "
  },
  {
    "label":"MittagLefflerE",
    "type":"keyword",
    "info":"MittagLefflerE[Î\\[PlusMinus], z] gives the MittagâLeffler function E (z).MittagLefflerE[Î\\[PlusMinus], Î\.b2, z] gives the gener"
  },
  {
    "label":"MixedFractionParts",
    "type":"keyword",
    "info":"MixedFractionParts[expr] gives the list {IntegerPart[expr], FractionalPart[expr]}."
  },
  {
    "label":"MixedGraphQ",
    "type":"keyword",
    "info":"MixedGraphQ[g] yields True if the graph g is a mixed graph and False otherwise. "
  },
  {
    "label":"MixedMagnitude",
    "type":"keyword",
    "info":"MixedMagnitude[{val , val , â¦, val }] represents a mixed-magnitude expression consisting of values v"
  },
  {
    "label":"MixedRadix",
    "type":"keyword",
    "info":"MixedRadix[{b , â¦, b }] represents the list of bases of a numerical system in which different digits"
  },
  {
    "label":"MixedRadixQuantity",
    "type":"keyword",
    "info":"MixedRadixQuantity[{value , â¦, value }, {unit , â¦, unit }] yields a single Quantity expression repre"
  },
  {
    "label":"MixedUnit",
    "type":"keyword",
    "info":"MixedUnit[{unit , unit , â¦, unit }] represents a mixed-unit expression consisting of units unit  thr"
  },
  {
    "label":"MixtureDistribution",
    "type":"keyword",
    "info":"MixtureDistribution[{w , â¦, w }, {dist , â¦, dist }] represents a mixture distribution whose CDF is g"
  },
  {
    "label":"Mod",
    "type":"keyword",
    "info":"Mod[m, n] gives the remainder on division of m by n. Mod[m, n, d] uses an offset d. \n"
  },
  {
    "label":"Modal",
    "type":"keyword",
    "info":"Modal is an option to functions such as CreateDialog that specifies whether the dialog that is creat"
  },
  {
    "label":"Mode",
    "type":"keyword",
    "info":"Mode is an option to Eliminate and related functions that specifies in what sense the equations are "
  },
  {
    "label":"Modular",
    "type":"keyword",
    "info":"Modular is a setting for the option Mode in Solve and related functions, which specifies that equati"
  },
  {
    "label":"ModularInverse",
    "type":"keyword",
    "info":"ModularInverse[k, n] gives the modular inverse of k modulo n."
  },
  {
    "label":"ModularLambda",
    "type":"keyword",
    "info":"ModularLambda[Ï] gives the modular lambda elliptic function Î»(Ï). "
  },
  {
    "label":"Module",
    "type":"keyword",
    "info":"Module[{x, y, â¦}, expr] specifies that occurrences of the symbols x, y, â¦ in expr should be treated "
  },
  {
    "label":"Modulus",
    "type":"keyword",
    "info":"Modulus ï¢ n is an option that can be given in certain algebraic functions to specify that integers s"
  },
  {
    "label":"MoebiusMu",
    "type":"keyword",
    "info":"MoebiusMu[n] gives the MÃ\\[Paragraph]bius function Î¼(n). "
  },
  {
    "label":"Molecule",
    "type":"keyword",
    "info":"Molecule[{atom , atom , â¦}, {bond , bond , â¦}] represents a molecule with atoms atom  and bonds bond"
  },
  {
    "label":"MoleculeAlign",
    "type":"keyword",
    "info":"MoleculeAlign[ref, mol] returns a version of mol that is aligned with reference molecule ref.Molecul"
  },
  {
    "label":"MoleculeContainsQ",
    "type":"keyword",
    "info":"MoleculeContainsQ[molecule, patt] returns True if patt is a substructure of molecule, and False othe"
  },
  {
    "label":"MoleculeDraw",
    "type":"keyword",
    "info":"MoleculeDraw[] displays a window with interactive tools for drawing a Molecule, and returns the resu"
  },
  {
    "label":"MoleculeEquivalentQ",
    "type":"keyword",
    "info":"MoleculeEquivalentQ[mol , mol ] gives True if mol  and mol  represent equivalent molecules and gives"
  },
  {
    "label":"MoleculeFreeQ",
    "type":"keyword",
    "info":"MoleculeFreeQ[molecule, patt] returns True if patt is not a substructure of molecule, and False othe"
  },
  {
    "label":"MoleculeGraph",
    "type":"keyword",
    "info":"MoleculeGraph[mol] returns a graph constructed from the molecule mol."
  },
  {
    "label":"MoleculeMatchQ",
    "type":"keyword",
    "info":"MoleculeMatchQ[mol, patt] returns True if the Molecule matches the given pattern.MoleculeMatchQ[patt"
  },
  {
    "label":"MoleculeMaximumCommonSubstructure",
    "type":"keyword",
    "info":"MoleculeMaximumCommonSubstructure[{mol , mol , â¦}] returns a molecule pattern representing the large"
  },
  {
    "label":"MoleculeModify",
    "type":"keyword",
    "info":"MoleculeModify[mol, \"mod\"] gives a molecule or list of molecules derived from the molecule mol by ap"
  },
  {
    "label":"MoleculeName",
    "type":"keyword",
    "info":"MoleculeName[mol] attempts to return the systematic chemical name for the given molecule.MoleculeNam"
  },
  {
    "label":"MoleculePattern",
    "type":"keyword",
    "info":"MoleculePattern[{atom , atom , â¦ }, { bond , bond , â¦ }] represents a molecule pattern with atoms at"
  },
  {
    "label":"MoleculePlot",
    "type":"keyword",
    "info":"MoleculePlot[mol] creates a two-dimensional structure diagram of the molecule mol.MoleculePlot[mol, "
  },
  {
    "label":"MoleculePlot3D",
    "type":"keyword",
    "info":"MoleculePlot3D[mol] creates a three-dimensional model of the molecule mol.MoleculePlot3D[mol, patt] "
  },
  {
    "label":"MoleculeProperty",
    "type":"keyword",
    "info":"MoleculeProperty[pname] represents a property identified by pname for use in MoleculeValue.MoleculeP"
  },
  {
    "label":"MoleculeQ",
    "type":"keyword",
    "info":"MoleculeQ[mol] returns True if mol is a valid Molecule expression, and False otherwise."
  },
  {
    "label":"MoleculeRecognize",
    "type":"keyword",
    "info":"MoleculeRecognize[image] recognizes a molecule in image and returns it as a Molecule object."
  },
  {
    "label":"MoleculeSubstructureCount",
    "type":"keyword",
    "info":"MoleculeSubstructureCount[mol, patt] gives a count of the number of times patt appears as a substruc"
  },
  {
    "label":"MoleculeValue",
    "type":"keyword",
    "info":"MoleculeValue[molecule, property] gives the value of the specified property for the given molecule.M"
  },
  {
    "label":"Moment",
    "type":"keyword",
    "info":"                            th                                                                   th "
  },
  {
    "label":"MomentConvert",
    "type":"keyword",
    "info":"MomentConvert[mexpr, form] converts the moment expression mexpr to the specified form. "
  },
  {
    "label":"MomentEvaluate",
    "type":"keyword",
    "info":"MomentEvaluate[mexpr, dist] evaluates formal moments in the moment expression mexpr on the distribut"
  },
  {
    "label":"MomentGeneratingFunction",
    "type":"keyword",
    "info":"MomentGeneratingFunction[dist, t] gives the moment-generating function for the distribution dist as "
  },
  {
    "label":"MomentOfInertia",
    "type":"keyword",
    "info":"MomentOfInertia[reg, pt, v] computes the moment of inertia for the region reg rotating around an axi"
  },
  {
    "label":"Monday",
    "type":"keyword",
    "info":"Monday is a day of the week."
  },
  {
    "label":"Monitor",
    "type":"keyword",
    "info":"Monitor[expr, mon] generates a temporary monitor cell in which the continually updated current value"
  },
  {
    "label":"MonomialList",
    "type":"keyword",
    "info":"MonomialList[poly] gives the list of all monomials in the polynomial poly.MonomialList[poly, {x , x "
  },
  {
    "label":"MonomialOrder",
    "type":"keyword",
    "info":"System`MonomialOrder"
  },
  {
    "label":"MonsterGroupM",
    "type":"keyword",
    "info":"MonsterGroupM[] represents the sporadic simple monster group M."
  },
  {
    "label":"MoonPhase",
    "type":"keyword",
    "info":"MoonPhase[] gives moon phase fraction of illumination for the current date.MoonPhase[datespec] gives"
  },
  {
    "label":"MoonPosition",
    "type":"keyword",
    "info":"MoonPosition[] gives the position of the Moon for the current date and location.MoonPosition[datespe"
  },
  {
    "label":"MorletWavelet",
    "type":"keyword",
    "info":"MorletWavelet[] represents a Morlet wavelet. "
  },
  {
    "label":"MorphologicalBinarize",
    "type":"keyword",
    "info":"MorphologicalBinarize[image, {t , t }] creates a binary image from image by replacing all values abo"
  },
  {
    "label":"MorphologicalBranchPoints",
    "type":"keyword",
    "info":"MorphologicalBranchPoints[image] gives a version of a binary image image in which white pixels repre"
  },
  {
    "label":"MorphologicalComponents",
    "type":"keyword",
    "info":"MorphologicalComponents[image] gives an array in which each pixel of image is replaced by an integer"
  },
  {
    "label":"MorphologicalEulerNumber",
    "type":"keyword",
    "info":"MorphologicalEulerNumber[image] computes the morphological Euler number of regions in a binary image"
  },
  {
    "label":"MorphologicalGraph",
    "type":"keyword",
    "info":"MorphologicalGraph[image] gives a graph object that represents the connectivity of the morphological"
  },
  {
    "label":"MorphologicalPerimeter",
    "type":"keyword",
    "info":"MorphologicalPerimeter[image] picks out the morphological perimeter of regions of foreground in imag"
  },
  {
    "label":"MorphologicalTransform",
    "type":"keyword",
    "info":"MorphologicalTransform[image, f] applies the function f to the 3Ã3 neighborhood of each pixel in a b"
  },
  {
    "label":"MortalityData",
    "type":"keyword",
    "info":"MortalityData[spec] gives the values of all properties for the specified demographic.MortalityData[s"
  },
  {
    "label":"Most",
    "type":"keyword",
    "info":"Most[expr] gives expr with the last element removed. "
  },
  {
    "label":"MountainData",
    "type":"keyword",
    "info":"MountainData[entity, property] gives the value of the specified property for the mountain entity.Mou"
  },
  {
    "label":"MouseAnnotation",
    "type":"keyword",
    "info":"MouseAnnotation[] gives any mouse annotation associated with the expression at the current mouse pos"
  },
  {
    "label":"MouseAppearance",
    "type":"keyword",
    "info":"MouseAppearance[expr, graphic] changes the mouse cursor to appear as graphic when the mouse pointer "
  },
  {
    "label":"MouseAppearanceTag",
    "type":"keyword",
    "info":"System`MouseAppearanceTag"
  },
  {
    "label":"MouseButtons",
    "type":"keyword",
    "info":"MouseButtons[] gives a list of the mouse buttons currently being pressed."
  },
  {
    "label":"Mouseover",
    "type":"keyword",
    "info":"Mouseover[expr, over] represents an object that displays as over when the mouse pointer is over it, "
  },
  {
    "label":"MousePointerNote",
    "type":"keyword",
    "info":"System`MousePointerNote"
  },
  {
    "label":"MousePosition",
    "type":"keyword",
    "info":"MousePosition[] gives the current mouse position in the notebook front end. MousePosition[\"coords\"] "
  },
  {
    "label":"MovieData",
    "type":"keyword",
    "info":"MovieData[entity, property] gives the value of the specified property for the movie entity.MovieData"
  },
  {
    "label":"MovingAverage",
    "type":"keyword",
    "info":"MovingAverage[list, r] gives the moving average of list, computed by averaging runs of r elements.Mo"
  },
  {
    "label":"MovingMap",
    "type":"keyword",
    "info":"MovingMap[f, data, w] applies f to size w windows in the specified data.MovingMap[f, data, wspec] us"
  },
  {
    "label":"MovingMedian",
    "type":"keyword",
    "info":"MovingMedian[list, r] gives the moving median of list, computed using spans of r elements."
  },
  {
    "label":"MoyalDistribution",
    "type":"keyword",
    "info":"MoyalDistribution[Î¼, Ï] represents a Moyal distribution with location parameter Î¼ and scale paramete"
  },
  {
    "label":"MultiaxisArrangement",
    "type":"keyword",
    "info":"MultiaxisArrangement is an option to plotting functions that specifies how multiple axes are arrange"
  },
  {
    "label":"Multicolumn",
    "type":"keyword",
    "info":"Multicolumn[list, cols] is an object that formats with the elements of list arranged in a grid with "
  },
  {
    "label":"MultiedgeStyle",
    "type":"keyword",
    "info":"MultiedgeStyle is an option for GraphPlot and related functions that specifies how to draw multiple "
  },
  {
    "label":"MultigraphQ",
    "type":"keyword",
    "info":"MultigraphQ[g] yields True if the graph g is a multigraph and False otherwise."
  },
  {
    "label":"MultilaunchWarning",
    "type":"keyword",
    "info":"MultilaunchWarning is a global option that specifies whether a warning is given when you try to modi"
  },
  {
    "label":"MultiLetterItalics",
    "type":"keyword",
    "info":"System`MultiLetterItalics"
  },
  {
    "label":"MultiLetterStyle",
    "type":"keyword",
    "info":"System`MultiLetterStyle"
  },
  {
    "label":"MultilineFunction",
    "type":"keyword",
    "info":"MultilineFunction is an option for UnderscriptBox and related box objects that specifies what to do "
  },
  {
    "label":"Multinomial",
    "type":"keyword",
    "info":"Multinomial[n , n , â¦] gives the multinomial coefficient (n  + n  + â¦) !\/(n  ! n  ! â¦). \n           "
  },
  {
    "label":"MultinomialDistribution",
    "type":"keyword",
    "info":"MultinomialDistribution[n, {p , p , â¦, p }] represents a multinomial distribution with n trials and "
  },
  {
    "label":"MultinormalDistribution",
    "type":"keyword",
    "info":"MultinormalDistribution[Î¼, Î£] represents a multivariate normal (Gaussian) distribution with mean vec"
  },
  {
    "label":"MultiplicativeOrder",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"Multiplicity",
    "type":"keyword",
    "info":"Multiplicity is an option to Roots. Multiplicity -> n specifies that the multiplicity of each of the"
  },
  {
    "label":"MultiplySides",
    "type":"keyword",
    "info":"MultiplySides[rel, x] multiplies each side of the equation or inequality rel by x.MultiplySides[rel "
  },
  {
    "label":"Multiselection",
    "type":"keyword",
    "info":"Multiselection is an option to ListPicker that specifies whether multiple values may be selected."
  },
  {
    "label":"MultivariateHypergeometricDistribution",
    "type":"keyword",
    "info":"MultivariateHypergeometricDistribution[n, {m , m , â¦, m }] represents a multivariate hypergeometric "
  },
  {
    "label":"MultivariatePoissonDistribution",
    "type":"keyword",
    "info":"MultivariatePoissonDistribution[Î¼ , {Î¼ , Î¼ , â¦}] represents a multivariate Poisson distribution with"
  },
  {
    "label":"MultivariateTDistribution",
    "type":"keyword",
    "info":"MultivariateTDistribution[Î£, Î½] represents the multivariate Student t distribution with scale matrix"
  },
  {
    "label":"N",
    "type":"keyword",
    "info":"N[expr] gives the numerical value of expr. N[expr, n] attempts to give a result with nâdigit precisi"
  },
  {
    "label":"NakagamiDistribution",
    "type":"keyword",
    "info":"NakagamiDistribution[Î¼, Ï] represents a Nakagami distribution with shape parameter Î¼ and spread para"
  },
  {
    "label":"NameQ",
    "type":"keyword",
    "info":"NameQ[\"string\"] yields True if there are any symbols whose names match the string pattern given, and"
  },
  {
    "label":"Names",
    "type":"keyword",
    "info":"Names[\"string\"] gives a list of the names of symbols that match the string. Names[patt] gives a list"
  },
  {
    "label":"NamespaceBox",
    "type":"keyword",
    "info":"System`NamespaceBox"
  },
  {
    "label":"NamespaceBoxOptions",
    "type":"keyword",
    "info":"System`NamespaceBoxOptions"
  },
  {
    "label":"Nand",
    "type":"keyword",
    "info":"Nand[e , e , â¦] is the logical NAND function. It evaluates its arguments in order, giving True immed"
  },
  {
    "label":"NArgMax",
    "type":"keyword",
    "info":"NArgMax[f, x] gives a position x    at which f is numerically maximized.NArgMax[f, {x, y, â¦}] gives "
  },
  {
    "label":"NArgMin",
    "type":"keyword",
    "info":"NArgMin[f, x] gives a position x    at which f is numerically minimized.NArgMin[f, {x, y, â¦}] gives "
  },
  {
    "label":"NBernoulliB",
    "type":"keyword",
    "info":"                                                  th\nNBernoulliB[n] gives the numerical value of the"
  },
  {
    "label":"NBodySimulation",
    "type":"keyword",
    "info":"NBodySimulation[law, {state , â¦, state }, t] generates a simulation of the motion of a system of n b"
  },
  {
    "label":"NBodySimulationData",
    "type":"keyword",
    "info":"NBodySimulationData[dataâ¦] represents the result of an n-body simulation."
  },
  {
    "label":"NCache",
    "type":"keyword",
    "info":"NCache[x, xn] represents a numeric cache object for a quantity with exact value x and approximate nu"
  },
  {
    "label":"NDEigensystem",
    "type":"keyword",
    "info":"NDEigensystem[â[u[x, y, â¦]], u, {x, y, â¦} â Î©, n] gives the n smallest magnitude eigenvalues and eig"
  },
  {
    "label":"NDEigenvalues",
    "type":"keyword",
    "info":"NDEigenvalues[â[u[x, y, â¦]], u, {x, y, â¦} â Î©, n] gives the n smallest magnitude eigenvalues for the"
  },
  {
    "label":"NDSolve",
    "type":"keyword",
    "info":"NDSolve[eqns, u, {x, x   , x   }] finds a numerical solution to the ordinary differential equations "
  },
  {
    "label":"NDSolveValue",
    "type":"keyword",
    "info":"NDSolveValue[eqns, expr, {x, x   , x   }] gives the value of expr with functions determined by a num"
  },
  {
    "label":"Nearest",
    "type":"keyword",
    "info":"Nearest[{elem , elem , â¦}, x] gives the list of elem  to which x is nearest. Nearest[{elem  ï¢ v , el"
  },
  {
    "label":"NearestFunction",
    "type":"keyword",
    "info":"NearestFunction[data] represents a function whose values give the elements closest to an element tha"
  },
  {
    "label":"NearestMeshCells",
    "type":"keyword",
    "info":"NearestMeshCells[mr, pt] gives the indices for the cells to which the point pt is nearest in the mes"
  },
  {
    "label":"NearestNeighborG",
    "type":"keyword",
    "info":"NearestNeighborG[pdata, r] estimates the nearest neighbor function G(r) at radius r in the point dat"
  },
  {
    "label":"NearestNeighborGraph",
    "type":"keyword",
    "info":"NearestNeighborGraph[{elem , elem , â¦}] gives a graph with vertices elem , elem , â¦ and edges connec"
  },
  {
    "label":"NearestTo",
    "type":"keyword",
    "info":"NearestTo[x] is an operator form that yields Nearest[elems, x] when applied to a list elems.NearestT"
  },
  {
    "label":"NebulaData",
    "type":"keyword",
    "info":"NebulaData[entity, property] gives the value of the specified property for the nebula entity.NebulaD"
  },
  {
    "label":"NeedCurrentFrontEndPackagePacket",
    "type":"keyword",
    "info":"System`NeedCurrentFrontEndPackagePacket"
  },
  {
    "label":"NeedCurrentFrontEndSymbolsPacket",
    "type":"keyword",
    "info":"System`NeedCurrentFrontEndSymbolsPacket"
  },
  {
    "label":"NeedlemanWunschSimilarity",
    "type":"keyword",
    "info":"NeedlemanWunschSimilarity[u, v] gives a number representing the NeedlemanâWunsch similarity between "
  },
  {
    "label":"Needs",
    "type":"keyword",
    "info":"Needs[\"context`\"] loads an appropriate file if the specified context is not already in $Packages. Ne"
  },
  {
    "label":"Negative",
    "type":"keyword",
    "info":"Negative[x] gives True if x is a negative number. "
  },
  {
    "label":"NegativeBinomialDistribution",
    "type":"keyword",
    "info":"NegativeBinomialDistribution[n, p] represents a negative binomial distribution with parameters n and"
  },
  {
    "label":"NegativeDefiniteMatrixQ",
    "type":"keyword",
    "info":"NegativeDefiniteMatrixQ[m] gives True if m is explicitly negative definite, and False otherwise."
  },
  {
    "label":"NegativeIntegers",
    "type":"keyword",
    "info":"NegativeIntegers represents the domain of strictly negative integers, as in x â NegativeIntegers. "
  },
  {
    "label":"NegativelyOrientedPoints",
    "type":"keyword",
    "info":"NegativelyOrientedPoints[{p , p , p , â¦, p }] tests whether the sequence of points p , p , p , â¦, p "
  },
  {
    "label":"NegativeMultinomialDistribution",
    "type":"keyword",
    "info":"NegativeMultinomialDistribution[n, p] represents a negative multinomial distribution with parameter "
  },
  {
    "label":"NegativeRationals",
    "type":"keyword",
    "info":"NegativeRationals represents the domain of strictly negative rational numbers, as in x â NegativeRat"
  },
  {
    "label":"NegativeReals",
    "type":"keyword",
    "info":"NegativeReals represents the domain of strictly negative real numbers."
  },
  {
    "label":"NegativeSemidefiniteMatrixQ",
    "type":"keyword",
    "info":"NegativeSemidefiniteMatrixQ[m] gives True if m is explicitly negative semidefinite, and False otherw"
  },
  {
    "label":"NeighborhoodData",
    "type":"keyword",
    "info":"NeighborhoodData[entity, property] gives the value of the specified property for the neighborhood en"
  },
  {
    "label":"NeighborhoodGraph",
    "type":"keyword",
    "info":"NeighborhoodGraph[g, v] gives the graph neighborhood of a vertex v in the graph g.NeighborhoodGraph["
  },
  {
    "label":"Nest",
    "type":"keyword",
    "info":"Nest[f, expr, n] gives an expression with f applied n times to expr. "
  },
  {
    "label":"NestedGreaterGreater",
    "type":"keyword",
    "info":"NestedGreaterGreater[x, y, â¦] displays as x âª¢ y âª¢ â¦."
  },
  {
    "label":"NestedLessLess",
    "type":"keyword",
    "info":"NestedLessLess[x, y, â¦] displays as x âª¡ y âª¡ â¦."
  },
  {
    "label":"NestedScriptRules",
    "type":"keyword",
    "info":"System`NestedScriptRules"
  },
  {
    "label":"NestGraph",
    "type":"keyword",
    "info":"NestGraph[f, expr, n] gives the graph obtained by starting with expr and applying f successively n t"
  },
  {
    "label":"NestList",
    "type":"keyword",
    "info":"NestList[f, expr, n] gives a list of the results of applying f to expr 0 through n times. "
  },
  {
    "label":"NestTree",
    "type":"keyword",
    "info":"NestTree[f, tree] gives the tree obtained by applying f to the data in the leaves of tree and extend"
  },
  {
    "label":"NestWhile",
    "type":"keyword",
    "info":"NestWhile[f, expr, test] starts with expr, then repeatedly applies f until applying test to the resu"
  },
  {
    "label":"NestWhileList",
    "type":"keyword",
    "info":"NestWhileList[f, expr, test] generates a list of the results of applying f repeatedly, starting with"
  },
  {
    "label":"NetAppend",
    "type":"keyword",
    "info":"NetAppend[net, layer] appends a layer or a net onto a NetChain, a layer or a NetGraph with one outpu"
  },
  {
    "label":"NetArray",
    "type":"keyword",
    "info":"NetArray[] represents an array in a net.NetArray[\"name\"] uses \"name\" as an identifier to share the a"
  },
  {
    "label":"NetArrayLayer",
    "type":"keyword",
    "info":"NetArrayLayer[] represents a layer that has no input and produces as output a constant array.NetArra"
  },
  {
    "label":"NetBidirectionalOperator",
    "type":"keyword",
    "info":"NetBidirectionalOperator[net] represents a net that applies net to a sequence and to its reverse, co"
  },
  {
    "label":"NetChain",
    "type":"keyword",
    "info":"NetChain[{layer , layer , â¦}] specifies a neural net in which the output of layer  is connected to t"
  },
  {
    "label":"NetDecoder",
    "type":"keyword",
    "info":"NetDecoder[\"name\"] represents a decoder that takes a net representation and decodes it into an expre"
  },
  {
    "label":"NetDelete",
    "type":"keyword",
    "info":"                                th\nNetDelete[net, n] deletes the nï    layer from a NetChain or NetGr"
  },
  {
    "label":"NetDrop",
    "type":"keyword",
    "info":"NetDrop[chain, n] removes the first n layers from a NetChain.NetDrop[chain, -n] removes the last n l"
  },
  {
    "label":"NetEncoder",
    "type":"keyword",
    "info":"NetEncoder[\"name\"] represents an encoder that takes a given form of input and encodes it as an array"
  },
  {
    "label":"NetEvaluationMode",
    "type":"keyword",
    "info":"NetEvaluationMode is an option that can be given when applying neural net functions to input data, s"
  },
  {
    "label":"NetExtract",
    "type":"keyword",
    "info":"NetExtract[layer, \"param\"] extracts the value of a parameter for the specified net layer.NetExtract["
  },
  {
    "label":"NetFlatten",
    "type":"keyword",
    "info":"NetFlatten[net] collapses nested NetChain and NetGraph objects within net.NetFlatten[net, n] collaps"
  },
  {
    "label":"NetFoldOperator",
    "type":"keyword",
    "info":"NetFoldOperator[net] represents a net in which net is folded over a sequence of inputs, maintaining "
  },
  {
    "label":"NetGANOperator",
    "type":"keyword",
    "info":"NetGANOperator[{generator, discriminator}] represents a network to perform generative adversarial ne"
  },
  {
    "label":"NetGraph",
    "type":"keyword",
    "info":"NetGraph[{layer , layer , â¦}, {m  ï¢ n , m  ï¢ n , â¦}] specifies a neural net defined by a graph in wh"
  },
  {
    "label":"NetInformation",
    "type":"keyword",
    "info":"NetInformation[net] gives a report about the neural network net.NetInformation[net, \"prop\"] gives th"
  },
  {
    "label":"NetInitialize",
    "type":"keyword",
    "info":"NetInitialize[net] gives a net in which all uninitialized learnable parameters in net have been give"
  },
  {
    "label":"NetInsert",
    "type":"keyword",
    "info":"NetInsert[chain, layer, i] inserts a layer into a NetChain before the layer at position i.NetInsert["
  },
  {
    "label":"NetInsertSharedArrays",
    "type":"keyword",
    "info":"NetInsertSharedArrays[net] converts all ordinary arrays in net into NetSharedArray objects.NetInsert"
  },
  {
    "label":"NetJoin",
    "type":"keyword",
    "info":"NetJoin[net , net , â¦] connects a series of NetChain or NetGraph objects to form a single NetChain o"
  },
  {
    "label":"NetMapOperator",
    "type":"keyword",
    "info":"NetMapOperator[net] represents a net in which net is mapped over a sequence of inputs to give a sequ"
  },
  {
    "label":"NetMapThreadOperator",
    "type":"keyword",
    "info":"NetMapThreadOperator[mapnet] represents a net in which mapnet is mapped over one or more inputs to g"
  },
  {
    "label":"NetMeasurements",
    "type":"keyword",
    "info":"NetMeasurements[net, data, measurement] computes the requested measurement for the net evaluated on "
  },
  {
    "label":"NetModel",
    "type":"keyword",
    "info":"NetModel[\"name\"] obtains a neural net model with the specified name from the Neural Net Repository. "
  },
  {
    "label":"NetNestOperator",
    "type":"keyword",
    "info":"NetNestOperator[net, n] represents a net in which net is applied n times to the input."
  },
  {
    "label":"NetPairEmbeddingOperator",
    "type":"keyword",
    "info":"NetPairEmbeddingOperator[net] represents a net that takes a pair of arrays, embeds them into a vecto"
  },
  {
    "label":"NetPort",
    "type":"keyword",
    "info":"NetPort[\"port\"] represents the specified input or output port for a complete net.NetPort[{n, \"port\"}"
  },
  {
    "label":"NetPortGradient",
    "type":"keyword",
    "info":"NetPortGradient[\"port\"] represents the gradient of the output of a net with respect to the value of "
  },
  {
    "label":"NetPrepend",
    "type":"keyword",
    "info":"NetPrepend[net, layer] prepends a layer or a net onto a NetChain, a layer or a NetGraph with one inp"
  },
  {
    "label":"NetRename",
    "type":"keyword",
    "info":"NetRename[net, \"old\" ï¢ \"new\"] gives a net in which the name old for a layer is replaced with new.Net"
  },
  {
    "label":"NetReplace",
    "type":"keyword",
    "info":"NetReplace[net, patt ï¢ layer] gives a net in which all layers matching patt are replaced with layer."
  },
  {
    "label":"NetReplacePart",
    "type":"keyword",
    "info":"NetReplacePart[layer, \"array\" ï¢ value] replaces an array within a layer, returning a new layer.NetRe"
  },
  {
    "label":"NetSharedArray",
    "type":"keyword",
    "info":"NetSharedArray[\"name\"] represents an array in a net that is shared by more than one layer."
  },
  {
    "label":"NetStateObject",
    "type":"keyword",
    "info":"NetStateObject[net] creates an object derived from net that represents a neural net with additional "
  },
  {
    "label":"NetTake",
    "type":"keyword",
    "info":"NetTake[net, end] takes only those layers up to end in a NetChain or NetGraph.NetTake[net, {start, e"
  },
  {
    "label":"NetTrain",
    "type":"keyword",
    "info":"NetTrain[net, {input  ï¢ output , input  ï¢ output , â¦}] trains the specified neural net by giving the"
  },
  {
    "label":"NetTrainResultsObject",
    "type":"keyword",
    "info":"NetTrainResultsObject[â¦] represents an object generated by NetTrain that contains the trained net an"
  },
  {
    "label":"NetUnfold",
    "type":"keyword",
    "info":"NetUnfold[fnet] produces the elementary net of the folded net fnet, exposing the recurrent states."
  },
  {
    "label":"NetworkPacketCapture",
    "type":"keyword",
    "info":"NetworkPacketCapture[] creates a temporary interactive interface for capturing information on networ"
  },
  {
    "label":"NetworkPacketRecording",
    "type":"keyword",
    "info":"NetworkPacketRecording[t] records information on network packets transmitted or received through all"
  },
  {
    "label":"NetworkPacketRecordingDuring",
    "type":"keyword",
    "info":"System`NetworkPacketRecordingDuring"
  },
  {
    "label":"NetworkPacketTrace",
    "type":"keyword",
    "info":"NetworkPacketTrace[expr] evaluates expr and returns information on network packets transmitted or re"
  },
  {
    "label":"NeumannValue",
    "type":"keyword",
    "info":"NeumannValue[val, pred] represents a Neumann boundary value val, specified on the part of the bounda"
  },
  {
    "label":"NevilleThetaC",
    "type":"keyword",
    "info":"NevilleThetaC[z, m] gives the Neville theta function Ï  (z ï\.b2 m). \n                                  "
  },
  {
    "label":"NevilleThetaD",
    "type":"keyword",
    "info":"NevilleThetaD[z, m] gives the Neville theta function Ï  (z ï\.b2 m). \n                                  "
  },
  {
    "label":"NevilleThetaN",
    "type":"keyword",
    "info":"NevilleThetaN[z, m] gives the Neville theta function Ï  (z ï\.b2 m). \n                                  "
  },
  {
    "label":"NevilleThetaS",
    "type":"keyword",
    "info":"NevilleThetaS[z, m] gives the Neville theta function Ï  (z ï\.b2 m). \n                                  "
  },
  {
    "label":"NewPrimitiveStyle",
    "type":"keyword",
    "info":"System`NewPrimitiveStyle"
  },
  {
    "label":"NExpectation",
    "type":"keyword",
    "info":"NExpectation[expr, x ï dist] gives the numerical expectation of expr under the assumption that x fol"
  },
  {
    "label":"Next",
    "type":"keyword",
    "info":"System`Next"
  },
  {
    "label":"NextCell",
    "type":"keyword",
    "info":"NextCell[] returns the CellObject corresponding to the cell directly below the currently evaluating "
  },
  {
    "label":"NextDate",
    "type":"keyword",
    "info":"NextDate[gran] gives the next occurring date of the specified granularity type gran.NextDate[daytype"
  },
  {
    "label":"NextPrime",
    "type":"keyword",
    "info":"                                                                          th\nNextPrime[x] gives the "
  },
  {
    "label":"NextScheduledTaskTime",
    "type":"keyword",
    "info":"NextScheduledTaskTime[obj] gives the next execution time of the scheduled task represented by obj."
  },
  {
    "label":"NeymanScottPointProcess",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"NHoldAll",
    "type":"keyword",
    "info":"NHoldAll is an attribute which specifies that none of the arguments to a function should be affected"
  },
  {
    "label":"NHoldFirst",
    "type":"keyword",
    "info":"NHoldFirst is an attribute which specifies that the first argument to a function should not be affec"
  },
  {
    "label":"NHoldRest",
    "type":"keyword",
    "info":"NHoldRest is an attribute which specifies that all but the first argument to a function should not b"
  },
  {
    "label":"NicholsGridLines",
    "type":"keyword",
    "info":"NicholsGridLines is an option to NicholsPlot that specifies contours of constant magnitude and const"
  },
  {
    "label":"NicholsPlot",
    "type":"keyword",
    "info":"NicholsPlot[lsys] generates a Nichols plot of the transfer function for the system lsys.NicholsPlot["
  },
  {
    "label":"NightHemisphere",
    "type":"keyword",
    "info":"NightHemisphere[] is a two-dimensional GeoGraphics primitive that represents the half of the Earth c"
  },
  {
    "label":"NIntegrate",
    "type":"keyword",
    "info":"                                                                                x                   "
  },
  {
    "label":"NMaximize",
    "type":"keyword",
    "info":"NMaximize[f, x] maximizes f numerically with respect to x.NMaximize[f, {x, y, â¦}] maximizes f numeri"
  },
  {
    "label":"NMaxValue",
    "type":"keyword",
    "info":"NMaxValue[f, x] gives the maximum value of f with respect to x.NMaxValue[f, {x, y, â¦}] gives the max"
  },
  {
    "label":"NMinimize",
    "type":"keyword",
    "info":"NMinimize[f, x] minimizes f numerically with respect to x.NMinimize[f, {x, y, â¦}] minimizes f numeri"
  },
  {
    "label":"NMinValue",
    "type":"keyword",
    "info":"NMinValue[f, x] gives the minimum value of f with respect to x.NMinValue[f, {x, y, â¦}] gives the min"
  },
  {
    "label":"NominalVariables",
    "type":"keyword",
    "info":"NominalVariables is an option for statistical functions such as LinearModelFit that specifies which "
  },
  {
    "label":"NonAssociative",
    "type":"keyword",
    "info":"NonAssociative is a symbol that represents a non-associative operator in formatting functions."
  },
  {
    "label":"NoncentralBetaDistribution",
    "type":"keyword",
    "info":"NoncentralBetaDistribution[Î\\[PlusMinus], Î\.b2, Î\.b4] represents a noncentral beta distribution with shape parameters "
  },
  {
    "label":"NoncentralChiSquareDistribution",
    "type":"keyword",
    "info":"                                                               2\nNoncentralChiSquareDistribution[Î½, "
  },
  {
    "label":"NoncentralFRatioDistribution",
    "type":"keyword",
    "info":"NoncentralFRatioDistribution[n, m, Î»] represents a noncentral F-ratio distribution with n numerator "
  },
  {
    "label":"NoncentralStudentTDistribution",
    "type":"keyword",
    "info":"NoncentralStudentTDistribution[Î½, Î\.b4] represents a noncentral Student t distribution with Î½ degrees o"
  },
  {
    "label":"NonCommutativeMultiply",
    "type":"keyword",
    "info":"a ** b ** c is a general associative, but nonâcommutative, form of multiplication. "
  },
  {
    "label":"NonConstants",
    "type":"keyword",
    "info":"NonConstants is an option for D which gives a list of objects to be taken to depend implicitly on th"
  },
  {
    "label":"NondimensionalizationTransform",
    "type":"keyword",
    "info":"NondimensionalizationTransform[eq, ovars, fvars] nondimensionalizes eq, replacing original variables"
  },
  {
    "label":"None",
    "type":"keyword",
    "info":"None is a setting used for certain options. "
  },
  {
    "label":"NoneTrue",
    "type":"keyword",
    "info":"NoneTrue[{e , e , â¦}, test] yields True if test[e ] is False for all of the e .NoneTrue[expr, test, "
  },
  {
    "label":"NonlinearModelFit",
    "type":"keyword",
    "info":"NonlinearModelFit[{y , y , â¦}, form, {Î\.b2 , â¦}, x] constructs a nonlinear model with structure form th"
  },
  {
    "label":"NonlinearStateSpaceModel",
    "type":"keyword",
    "info":"NonlinearStateSpaceModel[{f, g}, x, u] represents the model x ' (t) ï\\[PlusMinus] f(x(t), u(t)), y(t) ï\\[PlusMinus] g(x(t), "
  },
  {
    "label":"NonlocalMeansFilter",
    "type":"keyword",
    "info":"NonlocalMeansFilter[image, r] applies a nonlocal means filter to image by comparing a range r neighb"
  },
  {
    "label":"NonNegative",
    "type":"keyword",
    "info":"NonNegative[x] gives True if x is a nonânegative number. "
  },
  {
    "label":"NonNegativeIntegers",
    "type":"keyword",
    "info":"NonNegativeIntegers represents the domain of non-negative integers, as in x â NonNegativeIntegers. "
  },
  {
    "label":"NonNegativeRationals",
    "type":"keyword",
    "info":"NonNegativeRationals represents the domain of non-negative rational numbers, as in x â NonNegativeRa"
  },
  {
    "label":"NonNegativeReals",
    "type":"keyword",
    "info":"NonNegativeReals represents the domain of non-negative real numbers."
  },
  {
    "label":"NonPositive",
    "type":"keyword",
    "info":"NonPositive[x] gives True if x is a nonâpositive number. "
  },
  {
    "label":"NonPositiveIntegers",
    "type":"keyword",
    "info":"NonPositiveIntegers represents the domain of non-positive integers, as in x â NonPositiveIntegers. "
  },
  {
    "label":"NonPositiveRationals",
    "type":"keyword",
    "info":"NonPositiveRationals represents the domain of non-positive rational numbers, as in x â NonPositiveRa"
  },
  {
    "label":"NonPositiveReals",
    "type":"keyword",
    "info":"NonPositiveReals represents the domain of non-positive real numbers."
  },
  {
    "label":"Nor",
    "type":"keyword",
    "info":"Nor[e , e , â¦] is the logical NOR function. It evaluates its arguments in order, giving False immedi"
  },
  {
    "label":"NorlundB",
    "type":"keyword",
    "info":"                                          (a)                                                       "
  },
  {
    "label":"Norm",
    "type":"keyword",
    "info":"Norm[expr] gives the norm of a number, vector, or matrix. Norm[expr, p] gives the pânorm. \n"
  },
  {
    "label":"Normal",
    "type":"keyword",
    "info":"Normal[expr] converts expr to a normal expression from a variety of special forms. Normal[expr, h] c"
  },
  {
    "label":"NormalDistribution",
    "type":"keyword",
    "info":"NormalDistribution[Î¼, Ï] represents a normal (Gaussian) distribution with mean Î¼ and standard deviat"
  },
  {
    "label":"NormalGrouping",
    "type":"keyword",
    "info":"System`NormalGrouping"
  },
  {
    "label":"NormalizationLayer",
    "type":"keyword",
    "info":"NormalizationLayer[] represents a trainable net layer that normalizes its input data across the seco"
  },
  {
    "label":"Normalize",
    "type":"keyword",
    "info":"Normalize[v] gives the normalized form of a vector v. Normalize[z] gives the normalized form of a co"
  },
  {
    "label":"Normalized",
    "type":"keyword",
    "info":"Normalized is an option that determines whether to test if matrix rows are normalized."
  },
  {
    "label":"NormalizedSquaredEuclideanDistance",
    "type":"keyword",
    "info":"NormalizedSquaredEuclideanDistance[u, v] gives the normalized squared Euclidean distance between vec"
  },
  {
    "label":"NormalMatrixQ",
    "type":"keyword",
    "info":"NormalMatrixQ[m] gives True if m is an explicitly normal matrix, and False otherwise."
  },
  {
    "label":"NormalsFunction",
    "type":"keyword",
    "info":"NormalsFunction is an option for Plot3D and related functions that specifies a function to apply to "
  },
  {
    "label":"NormFunction",
    "type":"keyword",
    "info":"NormFunction is an option for functions such as FindFit and NDSolve which gives a function to be min"
  },
  {
    "label":"Not",
    "type":"keyword",
    "info":"! expr is the logical NOT function. It gives False if expr is True, and True if it is False. "
  },
  {
    "label":"NotCongruent",
    "type":"keyword",
    "info":"NotCongruent[x, y, â¦] displays as x â¢ y â¢ â¦."
  },
  {
    "label":"NotCupCap",
    "type":"keyword",
    "info":"NotCupCap[x, y, â¦] displays as x â­ y â­ â¦."
  },
  {
    "label":"NotDoubleVerticalBar",
    "type":"keyword",
    "info":"NotDoubleVerticalBar[x, y, â¦] displays as x â¦ y â¦ â¦."
  },
  {
    "label":"Notebook",
    "type":"keyword",
    "info":"Notebook[{cell , cell , â¦}] is the lowâlevel construct that represents a notebook manipulated by the"
  },
  {
    "label":"NotebookApply",
    "type":"keyword",
    "info":"NotebookApply[notebook, data] writes data into a notebook at the current selection, replacing the fi"
  },
  {
    "label":"NotebookAutoSave",
    "type":"keyword",
    "info":"NotebookAutoSave is a notebook option that specifies whether the notebook should automatically be sa"
  },
  {
    "label":"NotebookBrowseDirectory",
    "type":"keyword",
    "info":"NotebookBrowseDirectory is a global option that determines the current working directory."
  },
  {
    "label":"NotebookClose",
    "type":"keyword",
    "info":"NotebookClose[notebook] closes the notebook corresponding to the specified notebook object. Notebook"
  },
  {
    "label":"NotebookConvertSettings",
    "type":"keyword",
    "info":"NotebookConvertSettings is a global option that specifies settings for converting imported legacy no"
  },
  {
    "label":"NotebookCreate",
    "type":"keyword",
    "info":"NotebookCreate[] creates a new open notebook in the front end. NotebookCreate[options] sets up the s"
  },
  {
    "label":"NotebookCreateReturnObject",
    "type":"keyword",
    "info":"System`NotebookCreateReturnObject"
  },
  {
    "label":"NotebookDefault",
    "type":"keyword",
    "info":"System`NotebookDefault"
  },
  {
    "label":"NotebookDelete",
    "type":"keyword",
    "info":"NotebookDelete[notebook] deletes the current selection in the notebook corresponding to the specifie"
  },
  {
    "label":"NotebookDirectory",
    "type":"keyword",
    "info":"NotebookDirectory[] gives the directory of the current evaluation notebook. NotebookDirectory[nb] gi"
  },
  {
    "label":"NotebookDynamicExpression",
    "type":"keyword",
    "info":"NotebookDynamicExpression is an option for notebooks that specifies an expression to be dynamically "
  },
  {
    "label":"NotebookEvaluate",
    "type":"keyword",
    "info":"NotebookEvaluate[notebook] evaluates all the evaluatable cells in notebook."
  },
  {
    "label":"NotebookEventActions",
    "type":"keyword",
    "info":"NotebookEventActions is a notebook option that gives a list of actions to perform when specified eve"
  },
  {
    "label":"NotebookFileName",
    "type":"keyword",
    "info":"NotebookFileName[] gives the file name of the current evaluation notebook. NotebookFileName[nb] give"
  },
  {
    "label":"NotebookFind",
    "type":"keyword",
    "info":"NotebookFind[obj, data] sets the current selection in the specified notebook object to be the next o"
  },
  {
    "label":"NotebookFindReturnObject",
    "type":"keyword",
    "info":"System`NotebookFindReturnObject"
  },
  {
    "label":"NotebookGet",
    "type":"keyword",
    "info":"NotebookGet[obj] gets the raw expression corresponding to the notebook represented by the notebook o"
  },
  {
    "label":"NotebookGetLayoutInformationPacket",
    "type":"keyword",
    "info":"System`NotebookGetLayoutInformationPacket"
  },
  {
    "label":"NotebookGetMisspellingsPacket",
    "type":"keyword",
    "info":"System`NotebookGetMisspellingsPacket"
  },
  {
    "label":"NotebookImport",
    "type":"keyword",
    "info":"NotebookImport[notebook, style] imports cells with the given cell style from the specified notebook."
  },
  {
    "label":"NotebookInformation",
    "type":"keyword",
    "info":"NotebookInformation[] gives a list of properties of the current evaluation notebook.NotebookInformat"
  },
  {
    "label":"NotebookInterfaceObject",
    "type":"keyword",
    "info":"System`NotebookInterfaceObject"
  },
  {
    "label":"NotebookLocate",
    "type":"keyword",
    "info":"NotebookLocate[\"tag\"] locates all cells with the specified tag in your current input notebook, selec"
  },
  {
    "label":"NotebookObject",
    "type":"keyword",
    "info":"NotebookObject[id] is an object that represents an open notebook in the front end. "
  },
  {
    "label":"NotebookOpen",
    "type":"keyword",
    "info":"NotebookOpen[\"name\"] opens an existing notebook with the specified name, returning the corresponding"
  },
  {
    "label":"NotebookOpenReturnObject",
    "type":"keyword",
    "info":"System`NotebookOpenReturnObject"
  },
  {
    "label":"NotebookPath",
    "type":"keyword",
    "info":"NotebookPath is a global option that determines which directories are searched when a specified note"
  },
  {
    "label":"NotebookPrint",
    "type":"keyword",
    "info":"NotebookPrint[expr] sends a notebook containing expr to your default printer.NotebookPrint[notebook]"
  },
  {
    "label":"NotebookPut",
    "type":"keyword",
    "info":"NotebookPut[expr] creates a notebook corresponding to expr and makes it the currently selected noteb"
  },
  {
    "label":"NotebookPutReturnObject",
    "type":"keyword",
    "info":"System`NotebookPutReturnObject"
  },
  {
    "label":"NotebookRead",
    "type":"keyword",
    "info":"NotebookRead[notebook] gives the expression corresponding to the current selection in the specified "
  },
  {
    "label":"NotebookResetGeneratedCells",
    "type":"keyword",
    "info":"System`NotebookResetGeneratedCells"
  },
  {
    "label":"Notebooks",
    "type":"keyword",
    "info":"Notebooks[] gives a list of notebooks currently open in the front end."
  },
  {
    "label":"NotebookSave",
    "type":"keyword",
    "info":"NotebookSave[notebook] saves the current version of the specified notebook. NotebookSave[notebook, \""
  },
  {
    "label":"NotebookSaveAs",
    "type":"keyword",
    "info":"System`NotebookSaveAs"
  },
  {
    "label":"NotebookSelection",
    "type":"keyword",
    "info":"NotebookSelection[] represents the current selection in the current evaluation notebook in the front"
  },
  {
    "label":"NotebookSetupLayoutInformationPacket",
    "type":"keyword",
    "info":"System`NotebookSetupLayoutInformationPacket"
  },
  {
    "label":"NotebooksMenu",
    "type":"keyword",
    "info":"NotebooksMenu is a global option that specifies which recently opened notebooks are listed under the"
  },
  {
    "label":"NotebookTemplate",
    "type":"keyword",
    "info":"NotebookTemplate[nb] yields a TemplateObject that represents a notebook template to be applied using"
  },
  {
    "label":"NotebookWrite",
    "type":"keyword",
    "info":"NotebookWrite[notebook, data] writes data into a notebook at the current selection, setting the curr"
  },
  {
    "label":"NotElement",
    "type":"keyword",
    "info":"NotElement[x, dom] or x â dom asserts that x is not an element of the domain dom.NotElement[x  | â¦ |"
  },
  {
    "label":"NotEqualTilde",
    "type":"keyword",
    "info":"NotEqualTilde[x, y, â¦] displays as x ï y ï â¦."
  },
  {
    "label":"NotExists",
    "type":"keyword",
    "info":"NotExists[x, y] displays as â  y.\n                             x"
  },
  {
    "label":"NotGreater",
    "type":"keyword",
    "info":"NotGreater[x, y, â¦] displays as x â¯ y â¯ â¦."
  },
  {
    "label":"NotGreaterEqual",
    "type":"keyword",
    "info":"NotGreaterEqual[x, y, â¦] displays as x â\\[PlusMinus] y â\\[PlusMinus] â¦."
  },
  {
    "label":"NotGreaterFullEqual",
    "type":"keyword",
    "info":"NotGreaterFullEqual[x, y, â¦] displays as x â© y â© â¦."
  },
  {
    "label":"NotGreaterGreater",
    "type":"keyword",
    "info":"NotGreaterGreater[x, y, â¦] displays as x ï§ y ï§ â¦."
  },
  {
    "label":"NotGreaterLess",
    "type":"keyword",
    "info":"NotGreaterLess[x, y, â¦] displays as x â¹ y â¹ â¦."
  },
  {
    "label":"NotGreaterSlantEqual",
    "type":"keyword",
    "info":"NotGreaterSlantEqual[x, y, â¦] displays as x ï© y ï© â¦."
  },
  {
    "label":"NotGreaterTilde",
    "type":"keyword",
    "info":"NotGreaterTilde[x, y, â¦] displays as x â\\[Micro] y â\\[Micro] â¦."
  },
  {
    "label":"Nothing",
    "type":"keyword",
    "info":"Nothing represents an element of a list that will automatically be removed. Nothing[â¦] gives Nothing"
  },
  {
    "label":"NotHumpDownHump",
    "type":"keyword",
    "info":"NotHumpDownHump[x, y, â¦] displays as x ï y ï â¦."
  },
  {
    "label":"NotHumpEqual",
    "type":"keyword",
    "info":"NotHumpEqual[x, y, â¦] displays as x ï y ï â¦."
  },
  {
    "label":"NotificationFunction",
    "type":"keyword",
    "info":"NotificationFunction is an option that specifies how notifications should be sent from background ta"
  },
  {
    "label":"NotLeftTriangle",
    "type":"keyword",
    "info":"NotLeftTriangle[x, y, â¦] displays as x âª y âª â¦."
  },
  {
    "label":"NotLeftTriangleBar",
    "type":"keyword",
    "info":"NotLeftTriangleBar[x, y, â¦] displays as x ï y ï â¦."
  },
  {
    "label":"NotLeftTriangleEqual",
    "type":"keyword",
    "info":"NotLeftTriangleEqual[x, y, â¦] displays as x â\\[Not] y â\\[Not] â¦."
  },
  {
    "label":"NotLess",
    "type":"keyword",
    "info":"NotLess[x, y, â¦] displays as x â® y â® â¦."
  },
  {
    "label":"NotLessEqual",
    "type":"keyword",
    "info":"NotLessEqual[x, y, â¦] displays as x â\\[Degree] y â\\[Degree] â¦."
  },
  {
    "label":"NotLessFullEqual",
    "type":"keyword",
    "info":"NotLessFullEqual[x, y, â¦] displays as x â¨ y â¨ â¦."
  },
  {
    "label":"NotLessGreater",
    "type":"keyword",
    "info":"NotLessGreater[x, y, â¦] displays as x â¸ y â¸ â¦."
  },
  {
    "label":"NotLessLess",
    "type":"keyword",
    "info":"NotLessLess[x, y, â¦] displays as x ï¢ y ï¢ â¦."
  },
  {
    "label":"NotLessSlantEqual",
    "type":"keyword",
    "info":"NotLessSlantEqual[x, y, â¦] displays as x ï¤ y ï¤ â¦."
  },
  {
    "label":"NotLessTilde",
    "type":"keyword",
    "info":"NotLessTilde[x, y, â¦] displays as x â\.b4 y â\.b4 â¦."
  },
  {
    "label":"NotNestedGreaterGreater",
    "type":"keyword",
    "info":"NotNestedGreaterGreater[x, y, â¦] displays as x ï¨ y ï¨ â¦."
  },
  {
    "label":"NotNestedLessLess",
    "type":"keyword",
    "info":"NotNestedLessLess[x, y, â¦] displays as x ï£ y ï£ â¦."
  },
  {
    "label":"NotPrecedes",
    "type":"keyword",
    "info":"NotPrecedes[x, y, â¦] displays as x â y â â¦."
  },
  {
    "label":"NotPrecedesEqual",
    "type":"keyword",
    "info":"NotPrecedesEqual[x, y, â¦] displays as x ï« y ï« â¦."
  },
  {
    "label":"NotPrecedesSlantEqual",
    "type":"keyword",
    "info":"NotPrecedesSlantEqual[x, y, â¦] displays as x â  y â  â¦."
  },
  {
    "label":"NotPrecedesTilde",
    "type":"keyword",
    "info":"NotPrecedesTilde[x, y, â¦] displays as x â¨ y â¨ â¦."
  },
  {
    "label":"NotReverseElement",
    "type":"keyword",
    "info":"NotReverseElement[x, y, â¦] displays as x â y â â¦."
  },
  {
    "label":"NotRightTriangle",
    "type":"keyword",
    "info":"NotRightTriangle[x, y, â¦] displays as x â« y â« â¦."
  },
  {
    "label":"NotRightTriangleBar",
    "type":"keyword",
    "info":"NotRightTriangleBar[x, y, â¦] displays as x ï y ï â¦."
  },
  {
    "label":"NotRightTriangleEqual",
    "type":"keyword",
    "info":"NotRightTriangleEqual[x, y, â¦] displays as x â­ y â­ â¦."
  },
  {
    "label":"NotSquareSubset",
    "type":"keyword",
    "info":"NotSquareSubset[x, y, â¦] displays as x ï® y ï® â¦."
  },
  {
    "label":"NotSquareSubsetEqual",
    "type":"keyword",
    "info":"NotSquareSubsetEqual[x, y, â¦] displays as x â¢ y â¢ â¦."
  },
  {
    "label":"NotSquareSuperset",
    "type":"keyword",
    "info":"NotSquareSuperset[x, y, â¦] displays as x ï¯ y ï¯ â¦."
  },
  {
    "label":"NotSquareSupersetEqual",
    "type":"keyword",
    "info":"NotSquareSupersetEqual[x, y, â¦] displays as x â£ y â£ â¦."
  },
  {
    "label":"NotSubset",
    "type":"keyword",
    "info":"NotSubset[x, y, â¦] displays as x â y â â¦."
  },
  {
    "label":"NotSubsetEqual",
    "type":"keyword",
    "info":"NotSubsetEqual[x, y, â¦] displays as x â y â â¦."
  },
  {
    "label":"NotSucceeds",
    "type":"keyword",
    "info":"NotSucceeds[x, y, â¦] displays as x â y â â¦."
  },
  {
    "label":"NotSucceedsEqual",
    "type":"keyword",
    "info":"NotSucceedsEqual[x, y, â¦] displays as x ï­ y ï­ â¦."
  },
  {
    "label":"NotSucceedsSlantEqual",
    "type":"keyword",
    "info":"NotSucceedsSlantEqual[x, y, â¦] displays as x â¡ y â¡ â¦."
  },
  {
    "label":"NotSucceedsTilde",
    "type":"keyword",
    "info":"NotSucceedsTilde[x, y, â¦] displays as x â© y â© â¦."
  },
  {
    "label":"NotSuperset",
    "type":"keyword",
    "info":"NotSuperset[x, y, â¦] displays as x â y â â¦."
  },
  {
    "label":"NotSupersetEqual",
    "type":"keyword",
    "info":"NotSupersetEqual[x, y, â¦] displays as x â y â â¦."
  },
  {
    "label":"NotTilde",
    "type":"keyword",
    "info":"NotTilde[x, y, â¦] displays as x â y â â¦."
  },
  {
    "label":"NotTildeEqual",
    "type":"keyword",
    "info":"NotTildeEqual[x, y, â¦] displays as x â y â â¦."
  },
  {
    "label":"NotTildeFullEqual",
    "type":"keyword",
    "info":"NotTildeFullEqual[x, y, â¦] displays as x â y â â¦."
  },
  {
    "label":"NotTildeTilde",
    "type":"keyword",
    "info":"NotTildeTilde[x, y, â¦] displays as x â y â â¦."
  },
  {
    "label":"NotVerticalBar",
    "type":"keyword",
    "info":"NotVerticalBar[x, y, â¦] displays as x ï y ï â¦."
  },
  {
    "label":"Now",
    "type":"keyword",
    "info":"Now gives a DateObject representing the current moment in time."
  },
  {
    "label":"NoWhitespace",
    "type":"keyword",
    "info":"NoWhitespace represents the absence of whitespace between elements in a grammar rules pattern."
  },
  {
    "label":"NProbability",
    "type":"keyword",
    "info":"NProbability[pred, x ï dist] gives the numerical probability for an event that satisfies the predica"
  },
  {
    "label":"NProduct",
    "type":"keyword",
    "info":"                                                                              i\n                    "
  },
  {
    "label":"NProductFactors",
    "type":"keyword",
    "info":"NProductFactors is an option for NProduct. NProductFactors -> n explicitly includes n factors in the"
  },
  {
    "label":"NRoots",
    "type":"keyword",
    "info":"NRoots[lhs == rhs, var] yields a disjunction of equations which represent numerical approximations t"
  },
  {
    "label":"NSolve",
    "type":"keyword",
    "info":"NSolve[expr, vars] attempts to find numerical approximations to the solutions of the system expr of "
  },
  {
    "label":"NSolveValues",
    "type":"keyword",
    "info":"NSolveValues[expr, vars] attempts to find numerical approximations to the values of vars determined "
  },
  {
    "label":"NSum",
    "type":"keyword",
    "info":"                                                                      i\n                            "
  },
  {
    "label":"NSumTerms",
    "type":"keyword",
    "info":"NSumTerms is an option for NSum. NSumTerms -> n explicitly includes n terms in the sum before extrap"
  },
  {
    "label":"NuclearExplosionData",
    "type":"keyword",
    "info":"NuclearExplosionData[entity, property] gives the value of the specified property for the nuclear exp"
  },
  {
    "label":"NuclearReactorData",
    "type":"keyword",
    "info":"NuclearReactorData[entity, property] gives the value of the specified property for the nuclear react"
  },
  {
    "label":"Null",
    "type":"keyword",
    "info":"Null is a symbol used to indicate the absence of an expression or a result. It is not displayed in o"
  },
  {
    "label":"NullRecords",
    "type":"keyword",
    "info":"NullRecords is an option for Read and related functions which specifies whether null records should "
  },
  {
    "label":"NullSpace",
    "type":"keyword",
    "info":"NullSpace[m] gives a list of vectors that forms a basis for the null space of the matrix m. "
  },
  {
    "label":"NullWords",
    "type":"keyword",
    "info":"NullWords is an option for Read and related functions which specifies whether null words should be t"
  },
  {
    "label":"Number",
    "type":"keyword",
    "info":"Number represents an exact integer or an approximate real number in Read. "
  },
  {
    "label":"NumberCompose",
    "type":"keyword",
    "info":"NumberCompose[{c , â¦, c }, {u , â¦, u }] returns the quantity c  u  + â¦ + c  u .\n                1   "
  },
  {
    "label":"NumberDecompose",
    "type":"keyword",
    "info":"NumberDecompose[x, {u , â¦, u }] returns a list of coefficients {c , â¦, c } of a decomposition of the"
  },
  {
    "label":"NumberDigit",
    "type":"keyword",
    "info":"                                                       n                                            "
  },
  {
    "label":"NumberExpand",
    "type":"keyword",
    "info":"NumberExpand[x] gives a list of the decimal digits of x multiplied by their corresponding powers of "
  },
  {
    "label":"NumberFieldClassNumber",
    "type":"keyword",
    "info":"NumberFieldClassNumber[Î¸] gives the class number for the algebraic number field ï\.b4[Î¸] generated by Î¸."
  },
  {
    "label":"NumberFieldDiscriminant",
    "type":"keyword",
    "info":"NumberFieldDiscriminant[a] gives the discriminant of the field ï\.b4[a] generated by the algebraic numbe"
  },
  {
    "label":"NumberFieldFundamentalUnits",
    "type":"keyword",
    "info":"NumberFieldFundamentalUnits[a] gives a list of fundamental units for the field ï\.b4[a] generated by the"
  },
  {
    "label":"NumberFieldIntegralBasis",
    "type":"keyword",
    "info":"NumberFieldIntegralBasis[a] gives an integral basis for the field ï\.b4[a] generated by the algebraic nu"
  },
  {
    "label":"NumberFieldNormRepresentatives",
    "type":"keyword",
    "info":"NumberFieldNormRepresentatives[a, m] gives a list of representatives of classes of algebraic integer"
  },
  {
    "label":"NumberFieldRegulator",
    "type":"keyword",
    "info":"NumberFieldRegulator[a] gives the regulator of the field ï\.b4[a] generated by the algebraic number a."
  },
  {
    "label":"NumberFieldRootsOfUnity",
    "type":"keyword",
    "info":"NumberFieldRootsOfUnity[a] gives the roots of unity for the field ï\.b4[a] generated by the algebraic nu"
  },
  {
    "label":"NumberFieldSignature",
    "type":"keyword",
    "info":"NumberFieldSignature[a] gives the signature of the field ï\.b4[a] generated by the algebraic number a."
  },
  {
    "label":"NumberForm",
    "type":"keyword",
    "info":"NumberForm[expr, n] prints with approximate real numbers in expr given to nâdigit precision. NumberF"
  },
  {
    "label":"NumberFormat",
    "type":"keyword",
    "info":"NumberFormat is an option for NumberForm and related functions that specifies how the mantissa, base"
  },
  {
    "label":"NumberLinePlot",
    "type":"keyword",
    "info":"NumberLinePlot[{v , v , â¦}] plots the values v  on a number line.NumberLinePlot[pred, x] plots a num"
  },
  {
    "label":"NumberMarks",
    "type":"keyword",
    "info":"NumberMarks is an option for InputForm and related functions that specifies whether ` marks should b"
  },
  {
    "label":"NumberMultiplier",
    "type":"keyword",
    "info":"NumberMultiplier is an option for NumberForm and related functions which gives the string to use as "
  },
  {
    "label":"NumberPadding",
    "type":"keyword",
    "info":"NumberPadding is an option for NumberForm and related functions which gives strings to use as paddin"
  },
  {
    "label":"NumberPoint",
    "type":"keyword",
    "info":"NumberPoint is an option for NumberForm and related functions that gives the string to use as a deci"
  },
  {
    "label":"NumberQ",
    "type":"keyword",
    "info":"NumberQ[expr] gives True if expr is a number, and False otherwise. "
  },
  {
    "label":"NumberSeparator",
    "type":"keyword",
    "info":"NumberSeparator is an option for NumberForm and related functions that gives the string to insert at"
  },
  {
    "label":"NumberSigns",
    "type":"keyword",
    "info":"NumberSigns is an option for NumberForm and related functions which gives strings to use as signs fo"
  },
  {
    "label":"NumberString",
    "type":"keyword",
    "info":"NumberString represents the characters of a number in StringExpression."
  },
  {
    "label":"Numerator",
    "type":"keyword",
    "info":"Numerator[expr] gives the numerator of expr. "
  },
  {
    "label":"NumeratorDenominator",
    "type":"keyword",
    "info":"NumeratorDenominator[expr] gives the list {Numerator[expr], Denominator[expr]} of expr."
  },
  {
    "label":"NumericalOrder",
    "type":"keyword",
    "info":"NumericalOrder[e , e ] gives 1 if e  < e , -1 if e  > e , 0 if e  and e  are identical or numericall"
  },
  {
    "label":"NumericalSort",
    "type":"keyword",
    "info":"NumericalSort[list] sorts the elements of list into numerical order."
  },
  {
    "label":"NumericArray",
    "type":"keyword",
    "info":"NumericArray[array, type] creates a numeric array of the specified type.NumericArray[array, type, me"
  },
  {
    "label":"NumericArrayQ",
    "type":"keyword",
    "info":"NumericArrayQ[expr] gives True if expr is a valid NumericArray object, and False otherwise.NumericAr"
  },
  {
    "label":"NumericArrayType",
    "type":"keyword",
    "info":"NumericArrayType[array] gives the underlying type of values used for each element in the NumericArra"
  },
  {
    "label":"NumericFunction",
    "type":"keyword",
    "info":"NumericFunction is an attribute that can be assigned to a symbol f to indicate that f[arg , arg , â¦]"
  },
  {
    "label":"NumericQ",
    "type":"keyword",
    "info":"NumericQ[expr] gives True if expr is a numeric quantity, and False otherwise. "
  },
  {
    "label":"NuttallWindow",
    "type":"keyword",
    "info":"NuttallWindow[x] represents a Nuttall window function of x."
  },
  {
    "label":"NValues",
    "type":"keyword",
    "info":"NValues[f] gives a list of transformation rules corresponding to all numerical values (values for N["
  },
  {
    "label":"NyquistGridLines",
    "type":"keyword",
    "info":"NyquistGridLines is an option to NyquistPlot that specifies contours of constant magnitude and phase"
  },
  {
    "label":"NyquistPlot",
    "type":"keyword",
    "info":"NyquistPlot[lsys] generates a Nyquist plot of the transfer function for the system lsys.NyquistPlot["
  },
  {
    "label":"O",
    "type":"keyword",
    "info":"                                   n                                                                "
  },
  {
    "label":"ObjectExistsQ",
    "type":"keyword",
    "info":"ObjectExistsQ gives True if the object exists and False otherwise."
  },
  {
    "label":"ObservabilityGramian",
    "type":"keyword",
    "info":"ObservabilityGramian[ssm] gives the observability Gramian of the state-space model ssm."
  },
  {
    "label":"ObservabilityMatrix",
    "type":"keyword",
    "info":"ObservabilityMatrix[ssm] gives the observability matrix of the state-space model ssm."
  },
  {
    "label":"ObservableDecomposition",
    "type":"keyword",
    "info":"ObservableDecomposition[sys] yields the observable subsystem of the system sys.ObservableDecompositi"
  },
  {
    "label":"ObservableModelQ",
    "type":"keyword",
    "info":"ObservableModelQ[sys] gives True if the system sys is observable, and False otherwise.ObservableMode"
  },
  {
    "label":"OceanData",
    "type":"keyword",
    "info":"OceanData[entity, property] gives the value of the specified property for the ocean entity.OceanData"
  },
  {
    "label":"Octahedron",
    "type":"keyword",
    "info":"Octahedron[] represents a regular octahedron centered at the origin with unit edge length.Octahedron"
  },
  {
    "label":"OddQ",
    "type":"keyword",
    "info":"OddQ[expr] gives True if expr is an odd integer, and False otherwise. "
  },
  {
    "label":"Off",
    "type":"keyword",
    "info":"Off[symbol :: tag] switches off a message, so that it is no longer printed. Off[\"name\"] switches off"
  },
  {
    "label":"Offset",
    "type":"keyword",
    "info":"Offset[{dx, dy}, position] gives the position of a graphical object obtained by starting at the spec"
  },
  {
    "label":"OLEData",
    "type":"keyword",
    "info":"System`OLEData"
  },
  {
    "label":"On",
    "type":"keyword",
    "info":"On[symbol :: tag] switches on a message, so that it can be printed. On[\"name\"] switches on a named g"
  },
  {
    "label":"ONanGroupON",
    "type":"keyword",
    "info":"ONanGroupON[] represents the sporadic simple O'Nan group O ' N."
  },
  {
    "label":"Once",
    "type":"keyword",
    "info":"Once[expr] evaluates expr once in each Wolfram Language session, always returning the result from th"
  },
  {
    "label":"OneIdentity",
    "type":"keyword",
    "info":"OneIdentity is an attribute that can be assigned to a symbol f to indicate that f[x], f[f[x]], etc. "
  },
  {
    "label":"Opacity",
    "type":"keyword",
    "info":"Opacity[a] is a graphics directive that specifies that graphical objects that follow are to be displ"
  },
  {
    "label":"OpacityFunction",
    "type":"keyword",
    "info":"OpacityFunction is an option for graphics functions that specifies a function to apply to determine "
  },
  {
    "label":"OpacityFunctionScaling",
    "type":"keyword",
    "info":"OpacityFunctionScaling is an option to visualization functions such as DensityPlot3D that specifies "
  },
  {
    "label":"Open",
    "type":"keyword",
    "info":"System`Open"
  },
  {
    "label":"OpenAppend",
    "type":"keyword",
    "info":"OpenAppend[\"file\"] opens a file to append output to it, and returns an OutputStream object. "
  },
  {
    "label":"Opener",
    "type":"keyword",
    "info":"Opener[x] represents an opener with setting x, displayed as OpenerBox[True] when x is True and Opene"
  },
  {
    "label":"OpenerBox",
    "type":"keyword",
    "info":"System`OpenerBox"
  },
  {
    "label":"OpenerBoxOptions",
    "type":"keyword",
    "info":"OpenerBoxOptions ï¢ {opt  ï¢ val , opt  ï¢ val , â¦} is an option that specifies settings for OpenerBox "
  },
  {
    "label":"OpenerView",
    "type":"keyword",
    "info":"OpenerView[{expr , expr }] represents an object which displays as an opener, together with expr  if "
  },
  {
    "label":"OpenFunctionInspectorPacket",
    "type":"keyword",
    "info":"System`OpenFunctionInspectorPacket"
  },
  {
    "label":"Opening",
    "type":"keyword",
    "info":"Opening[image, ker] gives the morphological opening of image with respect to the structuring element"
  },
  {
    "label":"OpenRead",
    "type":"keyword",
    "info":"OpenRead[\"file\"] opens a file to read data from, and returns an InputStream object."
  },
  {
    "label":"OpenSpecialOptions",
    "type":"keyword",
    "info":"System`OpenSpecialOptions"
  },
  {
    "label":"OpenTemporary",
    "type":"keyword",
    "info":"OpenTemporary[] opens a temporary file to which output can be written, and returns an OutputStream o"
  },
  {
    "label":"OpenWrite",
    "type":"keyword",
    "info":"OpenWrite[\"file\"] opens a file to write output to it, and returns an OutputStream object. OpenWrite["
  },
  {
    "label":"Operate",
    "type":"keyword",
    "info":"Operate[p, f[x, y]] gives p[f][x, y]. Operate[p, expr, n] applies p at level n in the head of expr. "
  },
  {
    "label":"OperatingSystem",
    "type":"keyword",
    "info":"OperatingSystem is an option for file and related operations that specifies the type of operating sy"
  },
  {
    "label":"OperatorApplied",
    "type":"keyword",
    "info":"OperatorApplied[f, n] represents an operator form of the function f of n arguments so that OperatorA"
  },
  {
    "label":"OptimumFlowData",
    "type":"keyword",
    "info":"OptimumFlowData[â¦] represents flow data such as generated by FindMaximumFlow, FindMinimumCostFlow, e"
  },
  {
    "label":"Optional",
    "type":"keyword",
    "info":"patt : def or Optional[patt, def] is a pattern object that represents an expression of the form patt"
  },
  {
    "label":"OptionalElement",
    "type":"keyword",
    "info":"OptionalElement[patt] is a grammar rules pattern object that represents 0 or 1 instances of patt.Opt"
  },
  {
    "label":"OptionInspectorSettings",
    "type":"keyword",
    "info":"OptionInspectorSettings is a global option that specifies the display of options in the Option Inspe"
  },
  {
    "label":"OptionQ",
    "type":"keyword",
    "info":"OptionQ[e] returns True if e can be considered an option or list of options, and False otherwise."
  },
  {
    "label":"Options",
    "type":"keyword",
    "info":"Options[symbol] gives the list of default options assigned to a symbol. Options[expr] gives the opti"
  },
  {
    "label":"OptionsPacket",
    "type":"keyword",
    "info":"System`OptionsPacket"
  },
  {
    "label":"OptionsPattern",
    "type":"keyword",
    "info":"OptionsPattern[] is a pattern object that represents a collection of options given as rules, where t"
  },
  {
    "label":"OptionValue",
    "type":"keyword",
    "info":"OptionValue[name] gives the value of name in options matched by OptionsPattern. OptionValue[f, name]"
  },
  {
    "label":"OptionValueBox",
    "type":"keyword",
    "info":"System`OptionValueBox"
  },
  {
    "label":"OptionValueBoxOptions",
    "type":"keyword",
    "info":"OptionValueBoxOptions ï¢ {opt  ï¢ val , opt  ï¢ val , â¦} is an option that specifies settings for Optio"
  },
  {
    "label":"Or",
    "type":"keyword",
    "info":"e  || e  || â¦ is the logical OR function. It evaluates its arguments in order, giving True immediate"
  },
  {
    "label":"Orange",
    "type":"keyword",
    "info":"Orange represents the color orange in graphics or style specifications. "
  },
  {
    "label":"Order",
    "type":"keyword",
    "info":"Order[expr , expr ] gives 1 if expr  is before expr  in canonical order, and -1 if expr  is after ex"
  },
  {
    "label":"OrderDistribution",
    "type":"keyword",
    "info":"                                                 th                                                 "
  },
  {
    "label":"OrderedQ",
    "type":"keyword",
    "info":"OrderedQ[h[e , e , â¦]] gives True if the e  are in canonical order, and False otherwise.OrderedQ[h[e"
  },
  {
    "label":"Ordering",
    "type":"keyword",
    "info":"Ordering[list] gives the positions in list at which each successive element of Sort[list] appears. O"
  },
  {
    "label":"OrderingBy",
    "type":"keyword",
    "info":"OrderingBy[list, f] gives the positions in list at which each successive element of SortBy[list, f] "
  },
  {
    "label":"OrderingLayer",
    "type":"keyword",
    "info":"OrderingLayer[] represents a net layer that effectively applies Ordering to its input. OrderingLayer"
  },
  {
    "label":"Orderless",
    "type":"keyword",
    "info":"Orderless is an attribute that can be assigned to a symbol f to indicate that the elements e  in exp"
  },
  {
    "label":"OrderlessPatternSequence",
    "type":"keyword",
    "info":"OrderlessPatternSequence[p , p , â¦] is a pattern object that represents a sequence of arguments matc"
  },
  {
    "label":"OrnsteinUhlenbeckProcess",
    "type":"keyword",
    "info":"OrnsteinUhlenbeckProcess[Î¼, Ï, Î¸] represents a stationary OrnsteinâUhlenbeck process with long-term "
  },
  {
    "label":"Orthogonalize",
    "type":"keyword",
    "info":"Orthogonalize[{v , v , â¦}] gives an orthonormal basis found by orthogonalizing the vectors v .Orthog"
  },
  {
    "label":"OrthogonalMatrixQ",
    "type":"keyword",
    "info":"OrthogonalMatrixQ[m] gives True if m is an explicitly orthogonal matrix, and False otherwise."
  },
  {
    "label":"Out",
    "type":"keyword",
    "info":"                                                                                   th               "
  },
  {
    "label":"Outer",
    "type":"keyword",
    "info":"Outer[f, list , list , â¦] gives the generalized outer product of the list , forming all possible com"
  },
  {
    "label":"OuterPolygon",
    "type":"keyword",
    "info":"OuterPolygon[poly] gives the outer polygon of the polygon poly."
  },
  {
    "label":"OuterPolyhedron",
    "type":"keyword",
    "info":"OuterPolyhedron[poly] gives the outer polyhedron of the polyhedron poly."
  },
  {
    "label":"OutputAutoOverwrite",
    "type":"keyword",
    "info":"OutputAutoOverwrite is an option for notebooks that specifies whether the output of a command should"
  },
  {
    "label":"OutputControllabilityMatrix",
    "type":"keyword",
    "info":"OutputControllabilityMatrix[ssm] gives the output controllability matrix of the state-space model ss"
  },
  {
    "label":"OutputControllableModelQ",
    "type":"keyword",
    "info":"OutputControllableModelQ[ssm] gives True if the state-space model ssm is output controllable, and Fa"
  },
  {
    "label":"OutputForm",
    "type":"keyword",
    "info":"OutputForm[expr] prints as a two-dimensional representation of expr using only keyboard characters. "
  },
  {
    "label":"OutputFormData",
    "type":"keyword",
    "info":"System`OutputFormData"
  },
  {
    "label":"OutputGrouping",
    "type":"keyword",
    "info":"System`OutputGrouping"
  },
  {
    "label":"OutputMathEditExpression",
    "type":"keyword",
    "info":"OutputMathEditExpression is an internal symbol used for formatting."
  },
  {
    "label":"OutputNamePacket",
    "type":"keyword",
    "info":"OutputNamePacket[string] is a WSTP packet that contains in string the name assigned to the next outp"
  },
  {
    "label":"OutputPorts",
    "type":"keyword",
    "info":"OutputPorts is an option to specify the number, names or shapes of output ports for some neural net "
  },
  {
    "label":"OutputResponse",
    "type":"keyword",
    "info":"OutputResponse[sys, u, {t, t   , t   }] gives the numeric output response of systems model sys to th"
  },
  {
    "label":"OutputSizeLimit",
    "type":"keyword",
    "info":"OutputSizeLimit is an option for notebooks that specifies the maximum size in bytes of expressions t"
  },
  {
    "label":"OutputStream",
    "type":"keyword",
    "info":"OutputStream[\"name\", n] is an object that represents an output stream for functions such as Write. "
  },
  {
    "label":"Over",
    "type":"keyword",
    "info":"System`Over"
  },
  {
    "label":"OverBar",
    "type":"keyword",
    "info":"OverBar[expr] displays with a bar over expr."
  },
  {
    "label":"OverDot",
    "type":"keyword",
    "info":"OverDot[expr] displays with a dot over expr."
  },
  {
    "label":"Overflow",
    "type":"keyword",
    "info":"Overflow[] represents a number too large to represent explicitly on your computer system."
  },
  {
    "label":"OverHat",
    "type":"keyword",
    "info":"OverHat[expr] displays with a hat over expr."
  },
  {
    "label":"Overlaps",
    "type":"keyword",
    "info":"Overlaps is an option to string and sequence functions that specifies how to treat overlapping subst"
  },
  {
    "label":"Overlay",
    "type":"keyword",
    "info":"Overlay[{expr , expr , â¦}] displays as an overlay of all the expr .Overlay[{expr , expr , â¦}, {i, j,"
  },
  {
    "label":"OverlayBox",
    "type":"keyword",
    "info":"System`OverlayBox"
  },
  {
    "label":"OverlayBoxOptions",
    "type":"keyword",
    "info":"OverlayBoxOptions ï¢ {opt  ï¢ val , opt  ï¢ val , â¦} is an option that specifies settings for OverlayBo"
  },
  {
    "label":"OverlayVideo",
    "type":"keyword",
    "info":"OverlayVideo[background, o] gives the result of overlaying o onto a background video or image backgr"
  },
  {
    "label":"Overscript",
    "type":"keyword",
    "info":"                                              y\nOverscript[x, y] is an object that formats as x. "
  },
  {
    "label":"OverscriptBox",
    "type":"keyword",
    "info":"                                                            y\nOverscriptBox[x, y] is the lowâlevel b"
  },
  {
    "label":"OverscriptBoxOptions",
    "type":"keyword",
    "info":"OverscriptBoxOptions is an option that specifies the style and display of OverscriptBox constructs."
  },
  {
    "label":"OverTilde",
    "type":"keyword",
    "info":"OverTilde[expr] displays with a tilde over expr."
  },
  {
    "label":"OverVector",
    "type":"keyword",
    "info":"OverVector[expr] displays with a right vector over expr."
  },
  {
    "label":"OverwriteTarget",
    "type":"keyword",
    "info":"OverwriteTarget is an option for functions like CopyFile that specifies whether to overwrite if targ"
  },
  {
    "label":"OwenT",
    "type":"keyword",
    "info":"OwenT[x, a] gives Owen's T function T(x, a)."
  },
  {
    "label":"OwnValues",
    "type":"keyword",
    "info":"OwnValues[x] gives a list of transformation rules corresponding to all ownvalues defined for the sym"
  },
  {
    "label":"Package",
    "type":"keyword",
    "info":"System`Package"
  },
  {
    "label":"PackingMethod",
    "type":"keyword",
    "info":"PackingMethod is an option for GraphPlot and related functions that specifies how disconnected compo"
  },
  {
    "label":"PackPaclet",
    "type":"keyword",
    "info":"The experimental function PackPaclet is now obsolete and is superseded by CreatePacletArchive."
  },
  {
    "label":"PacletDataRebuild",
    "type":"keyword",
    "info":"PacletDataRebuild[] rescans all the installed paclets to rebuild the internal cache of paclet data."
  },
  {
    "label":"PacletDirectoryAdd",
    "type":"keyword",
    "info":"The experimental function PacletDirectoryAdd is now obsolete and is superseded by PacletDirectoryLoa"
  },
  {
    "label":"PacletDirectoryLoad",
    "type":"keyword",
    "info":"PacletDirectoryLoad[dir] makes paclets in dir visible in the current session.PacletDirectoryLoad[{di"
  },
  {
    "label":"PacletDirectoryRemove",
    "type":"keyword",
    "info":"StringTemplate[The experimental function `1` is now obsolete and is superseded by `2`., PacletDirect"
  },
  {
    "label":"PacletDirectoryUnload",
    "type":"keyword",
    "info":"PacletDirectoryUnload[dir] makes paclets in dir no longer visible in the current session.PacletDirec"
  },
  {
    "label":"PacletDisable",
    "type":"keyword",
    "info":"PacletDisable[paclet] disables an installed paclet."
  },
  {
    "label":"PacletEnable",
    "type":"keyword",
    "info":"PacletEnable[paclet] enables a previously disabled paclet."
  },
  {
    "label":"PacletFind",
    "type":"keyword",
    "info":"PacletFind[\"name\"] gives a list of installed paclets that match \"name\".PacletFind[\"name\" ï¢ \"version\""
  },
  {
    "label":"PacletFindRemote",
    "type":"keyword",
    "info":"PacletFindRemote[\"name\"] gives a list of paclets that match \"name\" available on known paclet sites.P"
  },
  {
    "label":"PacletInformation",
    "type":"keyword",
    "info":"The experimental function PacletInformation is now obsolete. Use Information[PacletObject[\"pacletnam"
  },
  {
    "label":"PacletInstall",
    "type":"keyword",
    "info":"PacletInstall[paclet] installs or updates paclet.PacletInstall[task] waits for completion of the tas"
  },
  {
    "label":"PacletInstallSubmit",
    "type":"keyword",
    "info":"PacletInstallSubmit[paclet] asynchronously installs or updates paclet."
  },
  {
    "label":"PacletNewerQ",
    "type":"keyword",
    "info":"PacletNewerQ[paclet , paclet ] returns True if paclet  has a higher version number than paclet , and"
  },
  {
    "label":"PacletObject",
    "type":"keyword",
    "info":"PacletObject[...] is the representation of a paclet in the Wolfram Language."
  },
  {
    "label":"PacletObjectQ",
    "type":"keyword",
    "info":"PacletObjectQ[expr] returns True or False depending on whether its argument is a PacletObject expres"
  },
  {
    "label":"PacletSite",
    "type":"keyword",
    "info":"PacletSite is an option for PacletInstall and PacletInstallSubmit that specifies the URL of a paclet"
  },
  {
    "label":"PacletSiteObject",
    "type":"keyword",
    "info":"PacletSiteObject[assoc] represents a site from which paclets can be automatically downloaded."
  },
  {
    "label":"PacletSiteRegister",
    "type":"keyword",
    "info":"PacletSiteRegister[url] registers url as a known paclet site.PacletSiteRegister[url, name] registers"
  },
  {
    "label":"PacletSites",
    "type":"keyword",
    "info":"PacletSites[] gives the list of all paclet sites known to your system."
  },
  {
    "label":"PacletSiteUnregister",
    "type":"keyword",
    "info":"PacletSiteUnregister[url] removes url from the list of registered paclet sites.PacletSiteUnregister["
  },
  {
    "label":"PacletSiteUpdate",
    "type":"keyword",
    "info":"PacletSiteUpdate[site] acquires and caches current information about the available paclets on the gi"
  },
  {
    "label":"PacletSymbol",
    "type":"keyword",
    "info":"PacletSymbol[paclet, \"sym\"] gives the symbol named \"sym\" in the primary context of paclet.PacletSymb"
  },
  {
    "label":"PacletUninstall",
    "type":"keyword",
    "info":"PacletUninstall[paclet] uninstalls a paclet."
  },
  {
    "label":"PacletUpdate",
    "type":"keyword",
    "info":"The experimental function PacletUpdate is now obsolete and is superseded by PacletInstall."
  },
  {
    "label":"PaddedForm",
    "type":"keyword",
    "info":"PaddedForm[expr, n] prints with all numbers in expr padded to leave room for a total of n digits. Pa"
  },
  {
    "label":"Padding",
    "type":"keyword",
    "info":"Padding is an option to various array and image operations that specifies what padding to use when e"
  },
  {
    "label":"PaddingLayer",
    "type":"keyword",
    "info":"PaddingLayer[{{m , n }, {m , n }, â¦}] represents a net layer that pads an input array with m  elemen"
  },
  {
    "label":"PaddingSize",
    "type":"keyword",
    "info":"PaddingSize is an option in AudioDelay and other functions that specifies the amount of padding."
  },
  {
    "label":"PadeApproximant",
    "type":"keyword",
    "info":"PadeApproximant[expr, {x, x , {m, n}}] gives the PadÃ© approximant to expr about the point x = x , wi"
  },
  {
    "label":"PadLeft",
    "type":"keyword",
    "info":"PadLeft[list, n] makes a list of length n by padding list with zeros on the left. PadLeft[list, n, x"
  },
  {
    "label":"PadRight",
    "type":"keyword",
    "info":"PadRight[list, n] makes a list of length n by padding list with zeros on the right. PadRight[list, n"
  },
  {
    "label":"PageBreakAbove",
    "type":"keyword",
    "info":"PageBreakAbove is an option for Cell which specifies whether a page break should be made immediately"
  },
  {
    "label":"PageBreakBelow",
    "type":"keyword",
    "info":"PageBreakBelow is an option for Cell which specifies whether a page break should be made immediately"
  },
  {
    "label":"PageBreakWithin",
    "type":"keyword",
    "info":"PageBreakWithin is an option for Cell which specifies whether a page break should be allowed within "
  },
  {
    "label":"PageFooterLines",
    "type":"keyword",
    "info":"PageFooterLines is an option for notebooks that specifies whether a horizontal line is inserted at t"
  },
  {
    "label":"PageFooters",
    "type":"keyword",
    "info":"PageFooters is an option for notebooks that specifies what should be inserted as the footer of each "
  },
  {
    "label":"PageHeaderLines",
    "type":"keyword",
    "info":"PageHeaderLines is an option for notebooks that specifies whether a horizontal line is inserted at t"
  },
  {
    "label":"PageHeaders",
    "type":"keyword",
    "info":"PageHeaders is an option for notebooks that specifies what should be inserted as the header of each "
  },
  {
    "label":"PageHeight",
    "type":"keyword",
    "info":"System`PageHeight"
  },
  {
    "label":"PageRankCentrality",
    "type":"keyword",
    "info":"PageRankCentrality[g, Î\\[PlusMinus]] gives a list of page-rank centralities for the vertices in the graph g and "
  },
  {
    "label":"PageTheme",
    "type":"keyword",
    "info":"PageTheme is an option for FormObject, GalleryView, and related functions that specifies an overall "
  },
  {
    "label":"PageWidth",
    "type":"keyword",
    "info":"PageWidth is an option for output streams and for cells that specifies how wide each line of text is"
  },
  {
    "label":"Pagination",
    "type":"keyword",
    "info":"Pagination is an option for GalleryView and related functions that specifies how pagination should b"
  },
  {
    "label":"PairCorrelationG",
    "type":"keyword",
    "info":"PairCorrelationG[pdata, r] estimates the pair correlation function g(r) for point data pdata at radi"
  },
  {
    "label":"PairedBarChart",
    "type":"keyword",
    "info":"PairedBarChart[{y , y , â¦}, {z , z , â¦}] makes a paired bar chart with bar lengths y ,  y , â¦ and z "
  },
  {
    "label":"PairedHistogram",
    "type":"keyword",
    "info":"PairedHistogram[{x , x , â¦}, {y , y , â¦}] plots a paired histogram of the values x  and y .PairedHis"
  },
  {
    "label":"PairedSmoothHistogram",
    "type":"keyword",
    "info":"PairedSmoothHistogram[{x , x , â¦}, {y , y , â¦}] plots a paired smooth histogram of the values x  and"
  },
  {
    "label":"PairedTTest",
    "type":"keyword",
    "info":"PairedTTest[data] tests whether the mean of data is zero. PairedTTest[{data , data }] tests whether "
  },
  {
    "label":"PairedZTest",
    "type":"keyword",
    "info":"PairedZTest[data] tests whether the mean of the data is zero. PairedZTest[{data , data }] tests whet"
  },
  {
    "label":"PaletteNotebook",
    "type":"keyword",
    "info":"PaletteNotebook[{cell , cell , â¦}] represents a palette notebook that can be manipulated by the Wolf"
  },
  {
    "label":"PalettePath",
    "type":"keyword",
    "info":"PalettePath is a global option that specifies which directories the Wolfram System searches for pale"
  },
  {
    "label":"PalindromeQ",
    "type":"keyword",
    "info":"PalindromeQ[list] returns True if the given list is identical to Reverse[list], and False otherwise."
  },
  {
    "label":"Pane",
    "type":"keyword",
    "info":"Pane[expr] displays as a pane containing expr. Pane[expr, w] makes the pane be w printer's points wi"
  },
  {
    "label":"PaneBox",
    "type":"keyword",
    "info":"System`PaneBox"
  },
  {
    "label":"PaneBoxOptions",
    "type":"keyword",
    "info":"PaneBoxOptions ï¢ {opt  ï¢ val , opt  ï¢ val , â¦} is an option that specifies settings for PaneBox obje"
  },
  {
    "label":"Panel",
    "type":"keyword",
    "info":"Panel[expr] displays as a panel containing expr. Panel[expr, title] gives the panel the specified ti"
  },
  {
    "label":"PanelBox",
    "type":"keyword",
    "info":"System`PanelBox"
  },
  {
    "label":"PanelBoxOptions",
    "type":"keyword",
    "info":"PanelBoxOptions ï¢ {opt  ï¢ val , opt  ï¢ val , â¦} is an option that specifies settings for PanelBox ob"
  },
  {
    "label":"Paneled",
    "type":"keyword",
    "info":"Paneled is an option for Manipulate and related functions that specifies whether to give the output "
  },
  {
    "label":"PaneSelector",
    "type":"keyword",
    "info":"PaneSelector[{val  ï¢ expr , val  ï¢ expr , â¦}, x] represents an object that displays as a pane contai"
  },
  {
    "label":"PaneSelectorBox",
    "type":"keyword",
    "info":"System`PaneSelectorBox"
  },
  {
    "label":"PaneSelectorBoxOptions",
    "type":"keyword",
    "info":"PaneSelectorBoxOptions ï¢ {opt  ï¢ val , opt  ï¢ val , â¦} is an option that specifies settings for Pane"
  },
  {
    "label":"PaperWidth",
    "type":"keyword",
    "info":"System`PaperWidth"
  },
  {
    "label":"ParabolicCylinderD",
    "type":"keyword",
    "info":"ParabolicCylinderD[Î½, z] gives the parabolic cylinder function D (z). \n                             "
  },
  {
    "label":"ParagraphIndent",
    "type":"keyword",
    "info":"ParagraphIndent is an option for Cell which specifies how far in printer's points to indent the firs"
  },
  {
    "label":"ParagraphSpacing",
    "type":"keyword",
    "info":"ParagraphSpacing is an option for Cell, StyleBox, and Style that specifies how much extra space to l"
  },
  {
    "label":"ParallelArray",
    "type":"keyword",
    "info":"ParallelArray[f, n] generates in parallel a list of length n, with elements f[i], evaluated.Parallel"
  },
  {
    "label":"ParallelAxisPlot",
    "type":"keyword",
    "info":"ParallelAxisPlot[{{y  , â¦, y  }, â¦, {y  , â¦, y  }}] generates a parallel axis plot for the points {y"
  },
  {
    "label":"ParallelCombine",
    "type":"keyword",
    "info":"ParallelCombine[f, h[e , e , â¦], comb] evaluates f[h[e , e , â¦]] in parallel by distributing parts o"
  },
  {
    "label":"ParallelDo",
    "type":"keyword",
    "info":"ParallelDo[expr, {i   }] evaluates expr in parallel i    times. ParallelDo[expr, {i, i   }] evaluate"
  },
  {
    "label":"Parallelepiped",
    "type":"keyword",
    "info":"Parallelepiped[p, {v , â¦, v }] represents a parallelepiped with origin p and directions v .\n        "
  },
  {
    "label":"ParallelEvaluate",
    "type":"keyword",
    "info":"ParallelEvaluate[expr] evaluates the expression expr on all available parallel kernels and returns t"
  },
  {
    "label":"Parallelization",
    "type":"keyword",
    "info":"Parallelization is an option for Compile that specifies whether it should create a compiled function"
  },
  {
    "label":"Parallelize",
    "type":"keyword",
    "info":"Parallelize[expr] evaluates expr using automatic parallelization."
  },
  {
    "label":"ParallelMap",
    "type":"keyword",
    "info":"ParallelMap[f, expr] applies f in parallel to each element on the first level in expr.ParallelMap[f,"
  },
  {
    "label":"ParallelNeeds",
    "type":"keyword",
    "info":"ParallelNeeds[\"context`\"] evaluates Needs[\"context`\"] on all available parallel kernels."
  },
  {
    "label":"Parallelogram",
    "type":"keyword",
    "info":"Parallelogram[p, {v , v }] represents a parallelogram with origin p and directions v  and v .\n      "
  },
  {
    "label":"ParallelProduct",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"ParallelSubmit",
    "type":"keyword",
    "info":"ParallelSubmit[expr] submits expr for evaluation on the next available parallel kernel and returns a"
  },
  {
    "label":"ParallelSum",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"ParallelTable",
    "type":"keyword",
    "info":"ParallelTable[expr, {i   }] generates in parallel a list of i    copies of expr.ParallelTable[expr, "
  },
  {
    "label":"ParallelTry",
    "type":"keyword",
    "info":"ParallelTry[f, {arg , arg , â¦}] evaluates f[arg ] in parallel, returning the first result received.P"
  },
  {
    "label":"Parameter",
    "type":"keyword",
    "info":"System`Parameter"
  },
  {
    "label":"ParameterEstimator",
    "type":"keyword",
    "info":"ParameterEstimator is an option to EstimatedDistribution and FindDistributionParameters that specifi"
  },
  {
    "label":"ParameterMixtureDistribution",
    "type":"keyword",
    "info":"ParameterMixtureDistribution[dist[Î¸], Î¸ ï wdist] represents a parameter mixture distribution where t"
  },
  {
    "label":"ParameterVariables",
    "type":"keyword",
    "info":"ParameterVariables is an option for GroebnerBasis and PolynomialReduce. These variables will always "
  },
  {
    "label":"ParametricConvexOptimization",
    "type":"keyword",
    "info":"ParametricConvexOptimization[f, cons, vars, pars] gives a ParametricFunction object that finds value"
  },
  {
    "label":"ParametricFunction",
    "type":"keyword",
    "info":"ParametricFunction[pars, â¦] represents a function that computes a solution when evaluated with numer"
  },
  {
    "label":"ParametricNDSolve",
    "type":"keyword",
    "info":"ParametricNDSolve[eqns, u, {x, x   , x   }, pars] finds a numerical solution to the ordinary differe"
  },
  {
    "label":"ParametricNDSolveValue",
    "type":"keyword",
    "info":"ParametricNDSolveValue[eqns, expr, {x, x   , x   }, pars] gives the value of expr with functions det"
  },
  {
    "label":"ParametricPlot",
    "type":"keyword",
    "info":"ParametricPlot[{f , f }, {u, u   , u   }] generates a parametric plot of a curve with x and y coordi"
  },
  {
    "label":"ParametricPlot3D",
    "type":"keyword",
    "info":"ParametricPlot3D[{f , f , f }, {u, u   , u   }] produces a three-dimensional space curve parametrize"
  },
  {
    "label":"ParametricRampLayer",
    "type":"keyword",
    "info":"ParametricRampLayer[] represents a net layer that computes a leaky ReLU activation with a slope that"
  },
  {
    "label":"ParametricRegion",
    "type":"keyword",
    "info":"                                                                   n\nParametricRegion[{f , â¦, f }, {"
  },
  {
    "label":"ParentBox",
    "type":"keyword",
    "info":"ParentBox[obj] returns the BoxObject that contains obj."
  },
  {
    "label":"ParentCell",
    "type":"keyword",
    "info":"ParentCell[obj] returns the CellObject that contains obj."
  },
  {
    "label":"ParentConnect",
    "type":"keyword",
    "info":"System`ParentConnect"
  },
  {
    "label":"ParentDirectory",
    "type":"keyword",
    "info":"ParentDirectory[] gives the parent of the current working directory. ParentDirectory[\"dir\"] gives th"
  },
  {
    "label":"ParentForm",
    "type":"keyword",
    "info":"ParentForm sets the parent form for a boxes format."
  },
  {
    "label":"Parenthesize",
    "type":"keyword",
    "info":"Parenthesize[ expr, fmt, prec, group] or Parenthesize[ expr, fmt, {prec, group}] will represent expr"
  },
  {
    "label":"ParentList",
    "type":"keyword",
    "info":"System`ParentList"
  },
  {
    "label":"ParentNotebook",
    "type":"keyword",
    "info":"ParentNotebook[obj] returns the NotebookObject that contains obj."
  },
  {
    "label":"ParetoDistribution",
    "type":"keyword",
    "info":"ParetoDistribution[k, Î\\[PlusMinus]] represents a Pareto distribution with minimum value parameter k and shape p"
  },
  {
    "label":"ParetoPickandsDistribution",
    "type":"keyword",
    "info":"ParetoPickandsDistribution[Î¼, Ï, Î¾] gives a ParetoâPickands distribution with location parameter Î¼, "
  },
  {
    "label":"ParkData",
    "type":"keyword",
    "info":"ParkData[entity, property] gives the value of the specified property for the park entity.ParkData[{e"
  },
  {
    "label":"Part",
    "type":"keyword",
    "info":"                                       th\nexpr[[i]] or Part[expr, i] gives the iï    part of expr. ex"
  },
  {
    "label":"PartBehavior",
    "type":"keyword",
    "info":"PartBehavior is an option to Query and related functions that specifies how nonexistent parts should"
  },
  {
    "label":"PartialCorrelationFunction",
    "type":"keyword",
    "info":"PartialCorrelationFunction[data, hspec] estimates the partial correlation function at lags hspec fro"
  },
  {
    "label":"PartialD",
    "type":"keyword",
    "info":"System`PartialD"
  },
  {
    "label":"ParticleAcceleratorData",
    "type":"keyword",
    "info":"ParticleAcceleratorData[entity, property] gives the value of the specified property for the particle"
  },
  {
    "label":"ParticleData",
    "type":"keyword",
    "info":"ParticleData[name, \"property\"] gives the specified property for a subatomic particle or family of pa"
  },
  {
    "label":"Partition",
    "type":"keyword",
    "info":"Partition[list, n] partitions list into nonoverlapping sublists of length n. Partition[list, n, d] g"
  },
  {
    "label":"PartitionGranularity",
    "type":"keyword",
    "info":"PartitionGranularity is an option for audio analysis functions that specifies the partitioning of th"
  },
  {
    "label":"PartitionsP",
    "type":"keyword",
    "info":"PartitionsP[n] gives the number p (n) of unrestricted partitions of the integer n. "
  },
  {
    "label":"PartitionsQ",
    "type":"keyword",
    "info":"PartitionsQ[n] gives the number q (n) of partitions of the integer n into distinct parts. "
  },
  {
    "label":"PartLayer",
    "type":"keyword",
    "info":"                                                     th\nPartLayer[i] represents a net layer that giv"
  },
  {
    "label":"PartOfSpeech",
    "type":"keyword",
    "info":"PartOfSpeech[\"word\"] returns the possible parts of speech for the specified word."
  },
  {
    "label":"PartProtection",
    "type":"keyword",
    "info":"PartProtection is an option for cloud expressions that controls which parts of their structure can b"
  },
  {
    "label":"ParzenWindow",
    "type":"keyword",
    "info":"ParzenWindow[x] represents a Parzen window function of x."
  },
  {
    "label":"PascalDistribution",
    "type":"keyword",
    "info":"PascalDistribution[n, p] represents a Pascal distribution with parameters n and p."
  },
  {
    "label":"PassEventsDown",
    "type":"keyword",
    "info":"PassEventsDown is an option to EventHandler which specifies whether events handled by a particular e"
  },
  {
    "label":"PassEventsUp",
    "type":"keyword",
    "info":"PassEventsUp is an option to EventHandler that specifies whether events handled by a particular even"
  },
  {
    "label":"Paste",
    "type":"keyword",
    "info":"Paste[expr] pastes expr at the current insertion point in the input notebook. Paste[notebook, expr] "
  },
  {
    "label":"PasteAutoQuoteCharacters",
    "type":"keyword",
    "info":"System`PasteAutoQuoteCharacters"
  },
  {
    "label":"PasteBoxFormInlineCells",
    "type":"keyword",
    "info":"PasteBoxFormInlineCells is an option for cells that specifies whether a new inline cell is created w"
  },
  {
    "label":"PasteButton",
    "type":"keyword",
    "info":"PasteButton[expr] represents a button that pastes expr whenever it is pressed. PasteButton[label, ex"
  },
  {
    "label":"Path",
    "type":"keyword",
    "info":"Path is an option for Get and related functions which gives a list of directories to search in attem"
  },
  {
    "label":"PathGraph",
    "type":"keyword",
    "info":"PathGraph[{v , v , â¦}] yields a path with vertices v  and edges between v  and v       .PathGraph[{e"
  },
  {
    "label":"PathGraphQ",
    "type":"keyword",
    "info":"PathGraphQ[g] yields True if the graph g is a path and False otherwise."
  },
  {
    "label":"Pattern",
    "type":"keyword",
    "info":"sym : obj or Pattern[sym, obj] represents the pattern object obj, assigned the name sym. "
  },
  {
    "label":"PatternFilling",
    "type":"keyword",
    "info":"PatternFilling[obj] is a two-dimensional graphics directive specifying that obj should be used to fi"
  },
  {
    "label":"PatternSequence",
    "type":"keyword",
    "info":"PatternSequence[p , p , â¦] is a pattern object that represents a sequence of arguments matching p , "
  },
  {
    "label":"PatternTest",
    "type":"keyword",
    "info":"p ? test is a pattern object that stands for any expression that matches p, and on which the applica"
  },
  {
    "label":"PauliMatrix",
    "type":"keyword",
    "info":"                           th\nPauliMatrix[k] gives the kï    Pauli spin matrix Ï .\n                  "
  },
  {
    "label":"PaulWavelet",
    "type":"keyword",
    "info":"PaulWavelet[] represents a Paul wavelet of order 4.PaulWavelet[n] represents a Paul wavelet of order"
  },
  {
    "label":"Pause",
    "type":"keyword",
    "info":"Pause[n] pauses for at least n seconds. "
  },
  {
    "label":"PausedTime",
    "type":"keyword",
    "info":"System`PausedTime"
  },
  {
    "label":"PDF",
    "type":"keyword",
    "info":"PDF[dist, x] gives the probability density function for the distribution dist evaluated at x.PDF[dis"
  },
  {
    "label":"PeakDetect",
    "type":"keyword",
    "info":"PeakDetect[list] gives a binary list in which 1s correspond to peak positions in list.PeakDetect[lis"
  },
  {
    "label":"PeanoCurve",
    "type":"keyword",
    "info":"                                                         th\nPeanoCurve[n] gives the line segments re"
  },
  {
    "label":"PearsonChiSquareTest",
    "type":"keyword",
    "info":"                                                                                         2          "
  },
  {
    "label":"PearsonCorrelationTest",
    "type":"keyword",
    "info":"PearsonCorrelationTest[v , v ] tests whether the vectors v  and v  are linearly independent.PearsonC"
  },
  {
    "label":"PearsonDistribution",
    "type":"keyword",
    "info":"PearsonDistribution[a , a , b , b , b ] represents a distribution of the Pearson family with paramet"
  },
  {
    "label":"PenttinenPointProcess",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"PercentForm",
    "type":"keyword",
    "info":"PercentForm[expr] prints with numbers in expr given as percentages.PercentForm[expr, n] prints with "
  },
  {
    "label":"PerfectNumber",
    "type":"keyword",
    "info":"                             th\nPerfectNumber[n] gives the nï    perfect number."
  },
  {
    "label":"PerfectNumberQ",
    "type":"keyword",
    "info":"PerfectNumberQ[n] returns True if n is a perfect number, and False otherwise."
  },
  {
    "label":"PerformanceGoal",
    "type":"keyword",
    "info":"PerformanceGoal is an option for various algorithmic and presentational functions that specifies wha"
  },
  {
    "label":"Perimeter",
    "type":"keyword",
    "info":"Perimeter[reg] gives the perimeter of the two-dimensional region reg.Perimeter[{x , x }, {s, s   , s"
  },
  {
    "label":"PeriodicBoundaryCondition",
    "type":"keyword",
    "info":"PeriodicBoundaryCondition[u[x , â¦], pred, f] represents a periodic boundary condition = u(x      ) ="
  },
  {
    "label":"PeriodicInterpolation",
    "type":"keyword",
    "info":"System`PeriodicInterpolation"
  },
  {
    "label":"Periodogram",
    "type":"keyword",
    "info":"Periodogram[list] plots the squared magnitude of the discrete Fourier transform (power spectrum) of "
  },
  {
    "label":"PeriodogramArray",
    "type":"keyword",
    "info":"PeriodogramArray[list] returns the squared magnitude of the discrete Fourier transform (power spectr"
  },
  {
    "label":"Permanent",
    "type":"keyword",
    "info":"Permanent[m] gives the permanent of the square matrix m. "
  },
  {
    "label":"Permissions",
    "type":"keyword",
    "info":"Permissions is an option for CloudObject and related cloud functions that specifies permissions for "
  },
  {
    "label":"PermissionsGroup",
    "type":"keyword",
    "info":"PermissionsGroup[\"name\"] represents a permissions group with the specified name, owned by the curren"
  },
  {
    "label":"PermissionsGroupMemberQ",
    "type":"keyword",
    "info":"PermissionsGroupMemberQ[group, user] returns True if user is a member of the permissions group group"
  },
  {
    "label":"PermissionsGroups",
    "type":"keyword",
    "info":"PermissionsGroups[] gives a list of permissions groups belonging to the current user."
  },
  {
    "label":"PermissionsKey",
    "type":"keyword",
    "info":"PermissionsKey[\"key\"] represents a permissions key that can be used to authorize access to cloud res"
  },
  {
    "label":"PermissionsKeys",
    "type":"keyword",
    "info":"PermissionsKeys[] gives a list of all valid permissions keys created by the currently authenticated "
  },
  {
    "label":"PermutationCycles",
    "type":"keyword",
    "info":"PermutationCycles[perm] gives a disjoint cycle representation of permutation perm."
  },
  {
    "label":"PermutationCyclesQ",
    "type":"keyword",
    "info":"PermutationCyclesQ[expr] returns True if expr is a permutation in disjoint cyclic form, and False ot"
  },
  {
    "label":"PermutationGroup",
    "type":"keyword",
    "info":"PermutationGroup[{perm , â¦, perm }] represents the group generated by multiplication of the permutat"
  },
  {
    "label":"PermutationLength",
    "type":"keyword",
    "info":"PermutationLength[perm] returns the number of integers moved by the permutation perm."
  },
  {
    "label":"PermutationList",
    "type":"keyword",
    "info":"PermutationList[perm] returns a permutation list representation of permutation perm.PermutationList["
  },
  {
    "label":"PermutationListQ",
    "type":"keyword",
    "info":"PermutationListQ[expr] returns True if expr is a valid permutation list and False otherwise."
  },
  {
    "label":"PermutationMax",
    "type":"keyword",
    "info":"PermutationMax[perm] returns the largest integer moved by the permutation perm."
  },
  {
    "label":"PermutationMin",
    "type":"keyword",
    "info":"PermutationMin[perm] returns the smallest integer moved by the permutation perm."
  },
  {
    "label":"PermutationOrder",
    "type":"keyword",
    "info":"PermutationOrder[perm] gives the order of permutation perm."
  },
  {
    "label":"PermutationPower",
    "type":"keyword",
    "info":"                                      th\nPermutationPower[perm, n] gives the nï    permutation power "
  },
  {
    "label":"PermutationProduct",
    "type":"keyword",
    "info":"PermutationProduct[a, b, c] gives the product of permutations a, b, c."
  },
  {
    "label":"PermutationReplace",
    "type":"keyword",
    "info":"PermutationReplace[expr, perm] replaces each part in expr by its image under the permutation perm.Pe"
  },
  {
    "label":"Permutations",
    "type":"keyword",
    "info":"Permutations[list] generates a list of all possible permutations of the elements in list. Permutatio"
  },
  {
    "label":"PermutationSupport",
    "type":"keyword",
    "info":"PermutationSupport[perm] returns the support of the permutation perm."
  },
  {
    "label":"Permute",
    "type":"keyword",
    "info":"Permute[expr, perm] permutes the positions of the elements of expr according to the permutation perm"
  },
  {
    "label":"PeronaMalikFilter",
    "type":"keyword",
    "info":"PeronaMalikFilter[image] applies a PeronaâMalik diffusion filter to image.PeronaMalikFilter[image, t"
  },
  {
    "label":"Perpendicular",
    "type":"keyword",
    "info":"System`Perpendicular"
  },
  {
    "label":"PerpendicularBisector",
    "type":"keyword",
    "info":"PerpendicularBisector[{p , p }] gives the perpendicular bisector of the line segment connecting p  a"
  },
  {
    "label":"PersistenceLocation",
    "type":"keyword",
    "info":"PersistenceLocation[\"type\"] represents a persistence location of the given type.PersistenceLocation["
  },
  {
    "label":"PersistenceTime",
    "type":"keyword",
    "info":"PersistenceTime is an option for various functions that specifies when a persistent value should be "
  },
  {
    "label":"PersistentObject",
    "type":"keyword",
    "info":"PersistentObject[\"name\", loc] represents a persistent object stored at persistence location loc."
  },
  {
    "label":"PersistentObjects",
    "type":"keyword",
    "info":"PersistentObjects[] gives all persistent objects in all locations in $PersistencePath.PersistentObje"
  },
  {
    "label":"PersistentSymbol",
    "type":"keyword",
    "info":"PersistentSymbol[\"name\"] represents the persistent symbol associated with the key \"name\".PersistentS"
  },
  {
    "label":"PersistentValue",
    "type":"keyword",
    "info":"PersistentValue[\"name\"] represents the persistent value associated with the key \"name\".PersistentVal"
  },
  {
    "label":"PersonData",
    "type":"keyword",
    "info":"PersonData[entity, property] gives the value of the specified property for the person entity.PersonD"
  },
  {
    "label":"PERTDistribution",
    "type":"keyword",
    "info":"PERTDistribution[{min, max}, c] represents a PERT distribution with range min to max and mode at c.P"
  },
  {
    "label":"PetersenGraph",
    "type":"keyword",
    "info":"PetersenGraph[n, k] gives the generalized Petersen graph P    .\n                                    "
  },
  {
    "label":"PhaseMargins",
    "type":"keyword",
    "info":"PhaseMargins[lsys] gives the phase margins of the linear time-invariant system lsys."
  },
  {
    "label":"PhaseRange",
    "type":"keyword",
    "info":"PhaseRange is an option to BodePlot and NicholsPlot that specifies the phase range."
  },
  {
    "label":"PhysicalSystemData",
    "type":"keyword",
    "info":"PhysicalSystemData[entity, property] gives the value of the specified property for the physical syst"
  },
  {
    "label":"Pi",
    "type":"keyword",
    "info":"Pi is Ï, with numerical value â 3.14159. "
  },
  {
    "label":"Pick",
    "type":"keyword",
    "info":"Pick[list, sel] picks out those elements of list for which the corresponding element of sel is True."
  },
  {
    "label":"PickedElements",
    "type":"keyword",
    "info":"System`PickedElements"
  },
  {
    "label":"PickMode",
    "type":"keyword",
    "info":"System`PickMode"
  },
  {
    "label":"PIDData",
    "type":"keyword",
    "info":"PIDData[â¦] represents PID data generated by PIDTune function."
  },
  {
    "label":"PIDDerivativeFilter",
    "type":"keyword",
    "info":"PIDDerivativeFilter is an option to PIDTune that controls the filtering used for derivative terms."
  },
  {
    "label":"PIDFeedforward",
    "type":"keyword",
    "info":"PIDFeedforward is an option to PIDTune that controls the reference weights used for the feedforward "
  },
  {
    "label":"PIDTune",
    "type":"keyword",
    "info":"PIDTune[sys] gives a feedback PID controller for the system sys. PIDTune[sys, \"carch\"] gives a contr"
  },
  {
    "label":"Piecewise",
    "type":"keyword",
    "info":"Piecewise[{{val , cond }, {val , cond }, â¦}] represents a piecewise function with values val  in the"
  },
  {
    "label":"PiecewiseExpand",
    "type":"keyword",
    "info":"PiecewiseExpand[expr] expands nested piecewise functions in expr to give a single piecewise function"
  },
  {
    "label":"PieChart",
    "type":"keyword",
    "info":"PieChart[{y , y , â¦, y }] makes a pie chart with sector angle proportional to y , y , â¦.PieChart[{â¦,"
  },
  {
    "label":"PieChart3D",
    "type":"keyword",
    "info":"PieChart3D[{y , y , â¦}] makes a 3D pie chart with sector angle proportional to y , y , â¦ .PieChart3D"
  },
  {
    "label":"PillaiTrace",
    "type":"keyword",
    "info":"PillaiTrace[m , m ] gives Pillai's trace for the matrices m  and m .\n             1   2             "
  },
  {
    "label":"PillaiTraceTest",
    "type":"keyword",
    "info":"PillaiTraceTest[m , m ] tests whether the matrices m  and m  are independent.PillaiTraceTest[â¦, \"pro"
  },
  {
    "label":"PingTime",
    "type":"keyword",
    "info":"PingTime[host] gives the round-trip ping time for the specified network host.PingTime[host, n] gives"
  },
  {
    "label":"Pink",
    "type":"keyword",
    "info":"Pink represents the color pink in graphics or style specifications. "
  },
  {
    "label":"PitchRecognize",
    "type":"keyword",
    "info":"PitchRecognize[audio] recognizes the main pitch in audio, returning it as a TimeSeries object. Pitch"
  },
  {
    "label":"Pivoting",
    "type":"keyword",
    "info":"Pivoting is an option to certain matrix decomposition functions. With Pivoting -> False, no pivoting"
  },
  {
    "label":"PixelConstrained",
    "type":"keyword",
    "info":"PixelConstrained is an option for ArrayPlot that specifies how to constrain cells to align with disp"
  },
  {
    "label":"PixelValue",
    "type":"keyword",
    "info":"PixelValue[image, ppos] gives the pixel value of image at position pos.PixelValue[image, ppos, \"type"
  },
  {
    "label":"PixelValuePositions",
    "type":"keyword",
    "info":"PixelValuePositions[image, val] returns a list of pixel positions in image that exactly match the va"
  },
  {
    "label":"Placed",
    "type":"keyword",
    "info":"Placed[expr, pos] represents an expression expr placed at relative position pos in a chart or other "
  },
  {
    "label":"Placeholder",
    "type":"keyword",
    "info":"Placeholder[name] represents a placeholder labeled with name that indicates a place to type.Placehol"
  },
  {
    "label":"PlaceholderLayer",
    "type":"keyword",
    "info":"PlaceholderLayer[] represents a net layer whose operation is undefined.PlaceholderLayer[\"tag\", assoc"
  },
  {
    "label":"PlaceholderReplace",
    "type":"keyword",
    "info":"PlaceholderReplace is an option to Paste that determines whether to replace a selection placeholder "
  },
  {
    "label":"Plain",
    "type":"keyword",
    "info":"Plain represents a font that is not bold, italic, or underlined."
  },
  {
    "label":"PlanarAngle",
    "type":"keyword",
    "info":"PlanarAngle[p ï¢ {q , q }] gives the angle between the halfâlines from p through q  and q .PlanarAngl"
  },
  {
    "label":"PlanarFaceList",
    "type":"keyword",
    "info":"PlanarFaceList[g] gives the list of faces of the planar graph g."
  },
  {
    "label":"PlanarGraph",
    "type":"keyword",
    "info":"PlanarGraph[{e , e , â¦}] yields a planar graph with edges e .PlanarGraph[{v , v , â¦}, {e , e , â¦}] y"
  },
  {
    "label":"PlanarGraphQ",
    "type":"keyword",
    "info":"PlanarGraphQ[g] yields True if g is a planar graph and False otherwise."
  },
  {
    "label":"PlanckRadiationLaw",
    "type":"keyword",
    "info":"PlanckRadiationLaw[temperature, Î»] returns the spectral radiance for the specified temperature and w"
  },
  {
    "label":"PlaneCurveData",
    "type":"keyword",
    "info":"PlaneCurveData[entity, property] gives the value of the specified property for the plane curve entit"
  },
  {
    "label":"PlanetaryMoonData",
    "type":"keyword",
    "info":"PlanetaryMoonData[entity, property] gives the value of the specified property for the moon entity of"
  },
  {
    "label":"PlanetData",
    "type":"keyword",
    "info":"PlanetData[entity, property] gives the value of the specified property for the planet entity.PlanetD"
  },
  {
    "label":"PlantData",
    "type":"keyword",
    "info":"PlantData[entity, property] gives the value of the specified property for the plant entity.PlantData"
  },
  {
    "label":"Play",
    "type":"keyword",
    "info":"Play[f, {t, t   , t   }] creates an object that plays as a sound whose amplitude is given by f as a "
  },
  {
    "label":"PlayRange",
    "type":"keyword",
    "info":"PlayRange is an option for Play and related functions which specifies what range of sound amplitude "
  },
  {
    "label":"Plot",
    "type":"keyword",
    "info":"Plot[f, {x, x   , x   }] generates a plot of f as a function of x from x    to x   . Plot[{f , f , â¦"
  },
  {
    "label":"Plot3D",
    "type":"keyword",
    "info":"Plot3D[f, {x, x   , x   }, {y, y   , y   }] generates a three-dimensional plot of f as a function of"
  },
  {
    "label":"Plot3Matrix",
    "type":"keyword",
    "info":"System`Plot3Matrix"
  },
  {
    "label":"PlotDivision",
    "type":"keyword",
    "info":"PlotDivision is an option for Plot that specifies the maximum amount of subdivision to be used."
  },
  {
    "label":"PlotJoined",
    "type":"keyword",
    "info":"PlotJoined is an option for ListPlot that specifies whether the points plotted should be joined by a"
  },
  {
    "label":"PlotLabel",
    "type":"keyword",
    "info":"PlotLabel is an option for graphics functions that specifies an overall label for a plot. "
  },
  {
    "label":"PlotLabels",
    "type":"keyword",
    "info":"PlotLabels is an option for visualization functions that specifies what labels to use for each data "
  },
  {
    "label":"PlotLayout",
    "type":"keyword",
    "info":"PlotLayout is an option for plotting functions that specifies the layout of multiple components in a"
  },
  {
    "label":"PlotLegends",
    "type":"keyword",
    "info":"PlotLegends is an option for plot functions that specifies what legends to use. "
  },
  {
    "label":"PlotMarkers",
    "type":"keyword",
    "info":"PlotMarkers is an option for graphics functions like ListPlot and ListLinePlot that specifies what m"
  },
  {
    "label":"PlotPoints",
    "type":"keyword",
    "info":"PlotPoints is an option for plotting functions that specifies how many initial sample points to use."
  },
  {
    "label":"PlotRange",
    "type":"keyword",
    "info":"PlotRange is an option for graphics functions that specifies what range of coordinates to include in"
  },
  {
    "label":"PlotRangeClipping",
    "type":"keyword",
    "info":"PlotRangeClipping is an option for graphics functions that specifies whether graphics objects should"
  },
  {
    "label":"PlotRangeClipPlanesStyle",
    "type":"keyword",
    "info":"System`PlotRangeClipPlanesStyle"
  },
  {
    "label":"PlotRangePadding",
    "type":"keyword",
    "info":"PlotRangePadding is an option for graphics functions that specifies how much further axes etc. shoul"
  },
  {
    "label":"PlotRegion",
    "type":"keyword",
    "info":"PlotRegion is an option for graphics functions that specifies what region of the final display area "
  },
  {
    "label":"PlotStyle",
    "type":"keyword",
    "info":"PlotStyle is an option for plotting and related functions that specifies styles in which objects are"
  },
  {
    "label":"PlotTheme",
    "type":"keyword",
    "info":"PlotTheme is an option for plotting and related functions that specifies an overall theme for visual"
  },
  {
    "label":"Pluralize",
    "type":"keyword",
    "info":"Pluralize[\"noun\"] gives the plural form of the English word \"noun\".Pluralize[\"noun\", n] gives the in"
  },
  {
    "label":"Plus",
    "type":"keyword",
    "info":"x + y + z represents a sum of terms. "
  },
  {
    "label":"PlusMinus",
    "type":"keyword",
    "info":"PlusMinus[x] displays as Â\\[PlusMinus] x.PlusMinus[x, y, â¦] displays as x Â\\[PlusMinus] y Â\\[PlusMinus] â¦.\n"
  },
  {
    "label":"Pochhammer",
    "type":"keyword",
    "info":"Pochhammer[a, n] gives the Pochhammer symbol (a) . \n                                                "
  },
  {
    "label":"PodStates",
    "type":"keyword",
    "info":"PodStates is an option for WolframAlpha that determines information about the states of the pods."
  },
  {
    "label":"PodWidth",
    "type":"keyword",
    "info":"PodWidth is an option for WolframAlpha that determines the width parameters of the content returned "
  },
  {
    "label":"Point",
    "type":"keyword",
    "info":"Point[p] is a graphics and geometry primitive that represents a point at p. Point[{p , p , â¦}] repre"
  },
  {
    "label":"Point3DBox",
    "type":"keyword",
    "info":"System`Point3DBox"
  },
  {
    "label":"Point3DBoxOptions",
    "type":"keyword",
    "info":"Point3DBoxOptions ï¢ {opt  ï¢ val , opt  ï¢ val , â¦} is an option that specifies settings for Point3DBo"
  },
  {
    "label":"PointBox",
    "type":"keyword",
    "info":"System`PointBox"
  },
  {
    "label":"PointBoxOptions",
    "type":"keyword",
    "info":"PointBoxOptions ï¢ {opt  ï¢ val , opt  ï¢ val , â¦} is an option that specifies settings for PointBox ob"
  },
  {
    "label":"PointCountDistribution",
    "type":"keyword",
    "info":"PointCountDistribution[pproc, reg] represents the distribution of point counts for the point process"
  },
  {
    "label":"PointDensity",
    "type":"keyword",
    "info":"PointDensity[pdata] estimates the point density function Î¼(x) from point data pdata.PointDensity[pda"
  },
  {
    "label":"PointDensityFunction",
    "type":"keyword",
    "info":"PointDensityFunction[â¦] represents a function whose values give the density at a given location."
  },
  {
    "label":"PointFigureChart",
    "type":"keyword",
    "info":"PointFigureChart[{{date , p }, {date , p }, â¦}] makes a point and figure chart with prices p  at dat"
  },
  {
    "label":"PointLegend",
    "type":"keyword",
    "info":"PointLegend[{col , â¦}, {lbl , â¦}] generates a legend that associates points of colors col  with labe"
  },
  {
    "label":"PointLight",
    "type":"keyword",
    "info":"PointLight[col, pt] is a three-dimensional graphics directive that specifies the point light of colo"
  },
  {
    "label":"PointProcessEstimator",
    "type":"keyword",
    "info":"PointProcessEstimator[] is an option to EstimatedPointProcess and FindPointProcessParameters that sp"
  },
  {
    "label":"PointProcessFitTest",
    "type":"keyword",
    "info":"PointProcessFitTest[pdata] tests whether the point collection pdata could be modeled by a Poisson po"
  },
  {
    "label":"PointProcessParameterAssumptions",
    "type":"keyword",
    "info":"PointProcessParameterAssumptions[proc] gives a logical expression for assumptions on parameters in t"
  },
  {
    "label":"PointProcessParameterQ",
    "type":"keyword",
    "info":"PointProcessParameterQ[proc] yields True if proc is a valid random point process, and yields False o"
  },
  {
    "label":"PointSize",
    "type":"keyword",
    "info":"PointSize[d] is a graphics directive which specifies that points which follow are to be shown if pos"
  },
  {
    "label":"PointStatisticFunction",
    "type":"keyword",
    "info":"PointStatisticFunction[â¦] represents a function whose values give the statistic of a points collecti"
  },
  {
    "label":"PointValuePlot",
    "type":"keyword",
    "info":"PointValuePlot[{pt  ï¢ val , pt  ï¢ val , â¦}] plots the points pt  styled according to the values val "
  },
  {
    "label":"PoissonConsulDistribution",
    "type":"keyword",
    "info":"PoissonConsulDistribution[Î¼, Î»] represents a PoissonâConsul distribution with parameters Î¼ and Î»."
  },
  {
    "label":"PoissonDistribution",
    "type":"keyword",
    "info":"PoissonDistribution[Î¼] represents a Poisson distribution with mean Î¼."
  },
  {
    "label":"PoissonPDEComponent",
    "type":"keyword",
    "info":"                                                           2\nPoissonPDEComponent[vars, pars] yields "
  },
  {
    "label":"PoissonPointProcess",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"PoissonProcess",
    "type":"keyword",
    "info":"PoissonProcess[Î¼] represents a Poisson process with rate Î¼."
  },
  {
    "label":"PoissonWindow",
    "type":"keyword",
    "info":"PoissonWindow[x] represents a Poisson window function of x.PoissonWindow[x, Î\\[PlusMinus]] uses the parameter Î\\[PlusMinus]."
  },
  {
    "label":"PolarAxes",
    "type":"keyword",
    "info":"PolarAxes is an option for sector charts and polar plots that specifies whether polar axes should be"
  },
  {
    "label":"PolarAxesOrigin",
    "type":"keyword",
    "info":"PolarAxesOrigin is an option for sector charts and polar plots that specifies where polar axes shoul"
  },
  {
    "label":"PolarGridLines",
    "type":"keyword",
    "info":"PolarGridLines is an option for sector charts and polar plots that specifies polar grid lines."
  },
  {
    "label":"PolarPlot",
    "type":"keyword",
    "info":"PolarPlot[r, {Î¸, Î¸   , Î¸   }] generates a polar plot of a curve with radius r as a function of angle"
  },
  {
    "label":"PolarTicks",
    "type":"keyword",
    "info":"PolarTicks is an option for sector charts and polar plots that specifies tick marks for polar axes."
  },
  {
    "label":"PoleZeroMarkers",
    "type":"keyword",
    "info":"PoleZeroMarkers is an option for RootLocusPlot that specifies the markers to be drawn on the complex"
  },
  {
    "label":"PolyaAeppliDistribution",
    "type":"keyword",
    "info":"PolyaAeppliDistribution[Î¸, p] represents a PÃ\.b3lyaâAeppli distribution with shape parameters Î¸ and p. "
  },
  {
    "label":"PolyGamma",
    "type":"keyword",
    "info":"                                                                          th                        "
  },
  {
    "label":"Polygon",
    "type":"keyword",
    "info":"Polygon[{p , â¦, p }] represents a filled polygon with points p .Polygon[{p , â¦, p } ï¢ {{q , â¦, q }, "
  },
  {
    "label":"Polygon3DBox",
    "type":"keyword",
    "info":"System`Polygon3DBox"
  },
  {
    "label":"Polygon3DBoxOptions",
    "type":"keyword",
    "info":"Polygon3DBoxOptions ï¢ {opt  ï¢ val , opt  ï¢ val , â¦} is an option that specifies settings for Polygon"
  },
  {
    "label":"PolygonalNumber",
    "type":"keyword",
    "info":"                               th                                                        th         "
  },
  {
    "label":"PolygonAngle",
    "type":"keyword",
    "info":"PolygonAngle[poly] gives a list of angles at the vertex points of poly.PolygonAngle[poly, p] gives t"
  },
  {
    "label":"PolygonBox",
    "type":"keyword",
    "info":"System`PolygonBox"
  },
  {
    "label":"PolygonBoxOptions",
    "type":"keyword",
    "info":"PolygonBoxOptions ï¢ {opt  ï¢ val , opt  ï¢ val , â¦} is an option that specifies settings for PolygonBo"
  },
  {
    "label":"PolygonCoordinates",
    "type":"keyword",
    "info":"PolygonCoordinates[poly] gives a list of coordinates in the polygon poly."
  },
  {
    "label":"PolygonDecomposition",
    "type":"keyword",
    "info":"PolygonDecomposition[poly] decomposes the polygon poly into a disjoint union of simpler polygons.Pol"
  },
  {
    "label":"PolygonHoleScale",
    "type":"keyword",
    "info":"System`PolygonHoleScale"
  },
  {
    "label":"PolygonIntersections",
    "type":"keyword",
    "info":"PolygonIntersections is an option for Graphics3D which specifies whether intersecting polygons shoul"
  },
  {
    "label":"PolygonScale",
    "type":"keyword",
    "info":"System`PolygonScale"
  },
  {
    "label":"Polyhedron",
    "type":"keyword",
    "info":"Polyhedron[{f , â¦, f }] represents a filled polyhedron inside the closed surfaces with polygon faces"
  },
  {
    "label":"PolyhedronAngle",
    "type":"keyword",
    "info":"PolyhedronAngle[poly, p] gives the solid angle at the point p and spanned by edges with common point"
  },
  {
    "label":"PolyhedronBox",
    "type":"keyword",
    "info":"System`PolyhedronBox"
  },
  {
    "label":"PolyhedronCoordinates",
    "type":"keyword",
    "info":"PolyhedronCoordinates[poly] gives a list of coordinates in the polyhedron poly."
  },
  {
    "label":"PolyhedronData",
    "type":"keyword",
    "info":"PolyhedronData[poly, \"property\"] gives the value of the specified property for the polyhedron named "
  },
  {
    "label":"PolyhedronDecomposition",
    "type":"keyword",
    "info":"PolyhedronDecomposition[poly] decomposes the polyhedron poly into a union of simpler polyhedra."
  },
  {
    "label":"PolyhedronGenus",
    "type":"keyword",
    "info":"PolyhedronGenus[poly] gives the genus of the polyhedron poly."
  },
  {
    "label":"PolyLog",
    "type":"keyword",
    "info":"PolyLog[n, z] gives the polylogarithm function Li (z).PolyLog[n, p, z] gives the Nielsen generalized"
  },
  {
    "label":"PolynomialExpressionQ",
    "type":"keyword",
    "info":"PolynomialExpressionQ[expr, x] gives True if expr is structurally a polynomial expression in x, and "
  },
  {
    "label":"PolynomialExtendedGCD",
    "type":"keyword",
    "info":"PolynomialExtendedGCD[poly , poly , x] gives the extended GCD of poly  and poly  treated as univaria"
  },
  {
    "label":"PolynomialForm",
    "type":"keyword",
    "info":"System`PolynomialForm"
  },
  {
    "label":"PolynomialGCD",
    "type":"keyword",
    "info":"PolynomialGCD[poly , poly , â¦] gives the greatest common divisor of the polynomials poly . Polynomia"
  },
  {
    "label":"PolynomialLCM",
    "type":"keyword",
    "info":"PolynomialLCM[poly , poly , â¦] gives the least common multiple of the polynomials poly . PolynomialL"
  },
  {
    "label":"PolynomialMod",
    "type":"keyword",
    "info":"PolynomialMod[poly, m] gives the polynomial poly reduced modulo m. PolynomialMod[poly, {m , m , â¦}] "
  },
  {
    "label":"PolynomialQ",
    "type":"keyword",
    "info":"PolynomialQ[expr, var] yields True if expr is a polynomial in var, and yields False otherwise. Polyn"
  },
  {
    "label":"PolynomialQuotient",
    "type":"keyword",
    "info":"PolynomialQuotient[p, q, x] gives the quotient of p and q, treated as polynomials in x, with any rem"
  },
  {
    "label":"PolynomialQuotientRemainder",
    "type":"keyword",
    "info":"PolynomialQuotientRemainder[p, q, x] gives a list of the quotient and remainder of p and q, treated "
  },
  {
    "label":"PolynomialReduce",
    "type":"keyword",
    "info":"PolynomialReduce[poly, {poly , poly , â¦}, {x , x , â¦}] yields a list representing a reduction of pol"
  },
  {
    "label":"PolynomialRemainder",
    "type":"keyword",
    "info":"PolynomialRemainder[p, q, x] gives the remainder from dividing p by q, treated as polynomials in x. "
  },
  {
    "label":"Polynomials",
    "type":"keyword",
    "info":"System`Polynomials"
  },
  {
    "label":"PolynomialSumOfSquaresList",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"PoolingLayer",
    "type":"keyword",
    "info":"PoolingLayer[sz] represents a pooling net layer using kernels of size sz.PoolingLayer[{w}] represent"
  },
  {
    "label":"PopupMenu",
    "type":"keyword",
    "info":"PopupMenu[x, {val , val , â¦}] represents a popup menu with setting x and possible values val . Popup"
  },
  {
    "label":"PopupMenuBox",
    "type":"keyword",
    "info":"System`PopupMenuBox"
  },
  {
    "label":"PopupMenuBoxOptions",
    "type":"keyword",
    "info":"PopupMenuBoxOptions ï¢ {opt  ï¢ val , opt  ï¢ val , â¦} is an option that specifies settings for PopupMe"
  },
  {
    "label":"PopupView",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"PopupWindow",
    "type":"keyword",
    "info":"PopupWindow[expr, contents] displays as expr, but pops up a window containing contents when clicked."
  },
  {
    "label":"Position",
    "type":"keyword",
    "info":"Position[expr, pattern] gives a list of the positions at which objects matching pattern appear in ex"
  },
  {
    "label":"PositionIndex",
    "type":"keyword",
    "info":"PositionIndex[list] gives an association between unique elements in list and the positions at which "
  },
  {
    "label":"Positive",
    "type":"keyword",
    "info":"Positive[x] gives True if x is a positive number. "
  },
  {
    "label":"PositiveDefiniteMatrixQ",
    "type":"keyword",
    "info":"PositiveDefiniteMatrixQ[m] gives True if m is explicitly positive definite, and False otherwise. "
  },
  {
    "label":"PositiveIntegers",
    "type":"keyword",
    "info":"PositiveIntegers represents the domain of strictly positive integers, as in x â PositiveIntegers. "
  },
  {
    "label":"PositivelyOrientedPoints",
    "type":"keyword",
    "info":"PositivelyOrientedPoints[{p , p , p , â¦, p     }] tests whether the sequence of points p , p , p , â¦"
  },
  {
    "label":"PositiveRationals",
    "type":"keyword",
    "info":"PositiveRationals represents the domain of strictly positive rational numbers, as in x â PositiveRat"
  },
  {
    "label":"PositiveReals",
    "type":"keyword",
    "info":"PositiveReals represents the domain of strictly positive real numbers."
  },
  {
    "label":"PositiveSemidefiniteMatrixQ",
    "type":"keyword",
    "info":"PositiveSemidefiniteMatrixQ[m] gives True if m is explicitly positive semidefinite, and False otherw"
  },
  {
    "label":"PossibleZeroQ",
    "type":"keyword",
    "info":"PossibleZeroQ[expr] gives True if basic symbolic and numerical methods suggest that expr has value z"
  },
  {
    "label":"Postfix",
    "type":"keyword",
    "info":"Postfix[f[expr]] prints with f[expr] given in default postfix form: expr\/\/f. Postfix[f[expr], h] pri"
  },
  {
    "label":"PostScript",
    "type":"keyword",
    "info":"System`PostScript"
  },
  {
    "label":"Power",
    "type":"keyword",
    "info":"x^y gives x to the power y."
  },
  {
    "label":"PowerDistribution",
    "type":"keyword",
    "info":"PowerDistribution[k, a] represents a power distribution with domain parameter k and shape parameter "
  },
  {
    "label":"PowerExpand",
    "type":"keyword",
    "info":"PowerExpand[expr] expands all powers of products and powers. PowerExpand[expr, {x , x , â¦}] expands "
  },
  {
    "label":"PowerMod",
    "type":"keyword",
    "info":"                         b                                                                          "
  },
  {
    "label":"PowerModList",
    "type":"keyword",
    "info":"                                                                  r    s\nPowerModList[a, s\/r, m] giv"
  },
  {
    "label":"PowerRange",
    "type":"keyword",
    "info":"PowerRange[b] generates the list {1, 10, 100, â¦, max}, where max is the largest power of 10 that doe"
  },
  {
    "label":"PowerSpectralDensity",
    "type":"keyword",
    "info":"PowerSpectralDensity[data, Ï] estimates the power spectral density for data.PowerSpectralDensity[dat"
  },
  {
    "label":"PowersRepresentations",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"PowerSymmetricPolynomial",
    "type":"keyword",
    "info":"PowerSymmetricPolynomial[r] represents a formal power symmetric polynomial with exponent r.PowerSymm"
  },
  {
    "label":"Precedence",
    "type":"keyword",
    "info":"Precedence[sym] returns the precedence of the output operator associated to the symbol sym.Precedenc"
  },
  {
    "label":"PrecedenceForm",
    "type":"keyword",
    "info":"PrecedenceForm[expr, prec] prints with expr parenthesized as it would be if it contained an operator"
  },
  {
    "label":"Precedes",
    "type":"keyword",
    "info":"Precedes[x, y, â¦] displays as x âº y âº â¦."
  },
  {
    "label":"PrecedesEqual",
    "type":"keyword",
    "info":"PrecedesEqual[x, y, â¦] displays as x âª¯ y âª¯ â¦."
  },
  {
    "label":"PrecedesSlantEqual",
    "type":"keyword",
    "info":"PrecedesSlantEqual[x, y, â¦] displays as x â¼ y â¼ â¦."
  },
  {
    "label":"PrecedesTilde",
    "type":"keyword",
    "info":"PrecedesTilde[x, y, â¦] displays as x â¾ y â¾ â¦."
  },
  {
    "label":"Precision",
    "type":"keyword",
    "info":"Precision[x] gives the effective number of digits of precision in the number x. "
  },
  {
    "label":"PrecisionGoal",
    "type":"keyword",
    "info":"PrecisionGoal is an option for various numerical operations which specifies how many effective digit"
  },
  {
    "label":"PreDecrement",
    "type":"keyword",
    "info":"--x decreases the value of x by 1, returning the new value of x. "
  },
  {
    "label":"Predict",
    "type":"keyword",
    "info":"Predict[{in  ï¢ out , in  ï¢ out , â¦}] generates a PredictorFunction[â¦] based on the example input-out"
  },
  {
    "label":"PredictionRoot",
    "type":"keyword",
    "info":"System`PredictionRoot"
  },
  {
    "label":"PredictorFunction",
    "type":"keyword",
    "info":"PredictorFunction[â¦] represents a function generated by Predict that predicts numerical values from "
  },
  {
    "label":"PredictorInformation",
    "type":"keyword",
    "info":"PredictorInformation[predictor] generates a report giving information on the predictor function pred"
  },
  {
    "label":"PredictorMeasurements",
    "type":"keyword",
    "info":"PredictorMeasurements[predictor, testset, prop] gives measurements associated with the property prop"
  },
  {
    "label":"PredictorMeasurementsObject",
    "type":"keyword",
    "info":"PredictorMeasurementsObject[â¦] represents an object generated by PredictorMeasurements that can be a"
  },
  {
    "label":"PreemptProtect",
    "type":"keyword",
    "info":"PreemptProtect[expr] evaluates expr, without any interruption from preemptive evaluations."
  },
  {
    "label":"PreferencesPath",
    "type":"keyword",
    "info":"PreferencesPath is a global option that specifies which directories are searched for user-specific s"
  },
  {
    "label":"Prefix",
    "type":"keyword",
    "info":"Prefix[f[expr]] prints with f[expr] given in default prefix form: f @ expr. Prefix[f[expr], h] print"
  },
  {
    "label":"PreIncrement",
    "type":"keyword",
    "info":"++x increases the value of x by 1, returning the new value of x. "
  },
  {
    "label":"Prepend",
    "type":"keyword",
    "info":"Prepend[expr, elem] gives expr with elem prepended. Prepend[elem] represents an operator form of Pre"
  },
  {
    "label":"PrependLayer",
    "type":"keyword",
    "info":"PrependLayer[] represents a net layer that takes an input array and prepends another array to it."
  },
  {
    "label":"PrependTo",
    "type":"keyword",
    "info":"PrependTo[x, elem] prepends elem to the value of x, and resets x to the result. "
  },
  {
    "label":"PreprocessingRules",
    "type":"keyword",
    "info":"PreprocessingRules is an option that specifies how the input should be preprocessed."
  },
  {
    "label":"PreserveColor",
    "type":"keyword",
    "info":"PreserveColor is an option for ImageRestyle and related functions that specifies whether to preserve"
  },
  {
    "label":"PreserveImageOptions",
    "type":"keyword",
    "info":"PreserveImageOptions is an option to graphics and related functions that specifies whether image siz"
  },
  {
    "label":"Previous",
    "type":"keyword",
    "info":"System`Previous"
  },
  {
    "label":"PreviousCell",
    "type":"keyword",
    "info":"PreviousCell[] returns the CellObject corresponding to the cell directly above the currently evaluat"
  },
  {
    "label":"PreviousDate",
    "type":"keyword",
    "info":"PreviousDate[gran] gives the previously occurring date of the specified granularity type gran.Previo"
  },
  {
    "label":"PriceGraphDistribution",
    "type":"keyword",
    "info":"PriceGraphDistribution[n, k, a] represents a de Solla Price graph distribution for n-vertex graphs w"
  },
  {
    "label":"PrimaryPlaceholder",
    "type":"keyword",
    "info":"System`PrimaryPlaceholder"
  },
  {
    "label":"Prime",
    "type":"keyword",
    "info":"                     th\nPrime[n] gives the nï    prime number p .\n                                   "
  },
  {
    "label":"PrimeNu",
    "type":"keyword",
    "info":"PrimeNu[n] gives the number of distinct primes Î½(n) in n."
  },
  {
    "label":"PrimeOmega",
    "type":"keyword",
    "info":"PrimeOmega[n] gives the number of prime factors counting multiplicities Î©(n) in n."
  },
  {
    "label":"PrimePi",
    "type":"keyword",
    "info":"PrimePi[x] gives the number of primes Ï(x) less than or equal to x."
  },
  {
    "label":"PrimePowerQ",
    "type":"keyword",
    "info":"PrimePowerQ[expr] yields True if expr is a power of a prime number, and yields False otherwise. "
  },
  {
    "label":"PrimeQ",
    "type":"keyword",
    "info":"PrimeQ[n] yields True if n is a prime number, and yields False otherwise. "
  },
  {
    "label":"Primes",
    "type":"keyword",
    "info":"Primes represents the domain of prime numbers, as in x â Primes. "
  },
  {
    "label":"PrimeZetaP",
    "type":"keyword",
    "info":"PrimeZetaP[s] gives prime zeta function P(s)."
  },
  {
    "label":"PrimitivePolynomialQ",
    "type":"keyword",
    "info":"PrimitivePolynomialQ[poly, p] tests whether poly is a primitive polynomial modulo a prime p."
  },
  {
    "label":"PrimitiveRoot",
    "type":"keyword",
    "info":"PrimitiveRoot[n] gives a primitive root of n.PrimitiveRoot[n, k] gives the smallest primitive root o"
  },
  {
    "label":"PrimitiveRootList",
    "type":"keyword",
    "info":"PrimitiveRootList[n] gives a list of primitive roots of n."
  },
  {
    "label":"PrincipalComponents",
    "type":"keyword",
    "info":"PrincipalComponents[matrix] transforms elements of matrix into unscaled principal components."
  },
  {
    "label":"PrincipalValue",
    "type":"keyword",
    "info":"PrincipalValue is an option for Integrate that specifies whether the Cauchy principal value should b"
  },
  {
    "label":"Print",
    "type":"keyword",
    "info":"Print[expr] prints expr as output. "
  },
  {
    "label":"PrintableASCIIQ",
    "type":"keyword",
    "info":"PrintableASCIIQ[string] yields True if the string contains only printable ASCII characters, and yiel"
  },
  {
    "label":"PrintAction",
    "type":"keyword",
    "info":"PrintAction is an option for notebooks that specifies the action taken when a Print[] command is eva"
  },
  {
    "label":"PrintForm",
    "type":"keyword",
    "info":"System`PrintForm"
  },
  {
    "label":"PrintingCopies",
    "type":"keyword",
    "info":"PrintingCopies is an option for notebooks that specifies the number of copies of a notebook printed "
  },
  {
    "label":"PrintingOptions",
    "type":"keyword",
    "info":"PrintingOptions is an option that specifies settings for printing."
  },
  {
    "label":"PrintingPageRange",
    "type":"keyword",
    "info":"PrintingPageRange is an option for notebooks that specifies the range of pages of a notebook to be p"
  },
  {
    "label":"PrintingStartingPageNumber",
    "type":"keyword",
    "info":"PrintingStartingPageNumber is an option for notebooks that specifies what number to assign to the fi"
  },
  {
    "label":"PrintingStyleEnvironment",
    "type":"keyword",
    "info":"PrintingStyleEnvironment is an option for notebooks that specifies the style environment to be used "
  },
  {
    "label":"Printout3D",
    "type":"keyword",
    "info":"Printout3D[model] prints out the 3D model using a 3D print previewer.Printout3D[model, service] prin"
  },
  {
    "label":"Printout3DPreviewer",
    "type":"keyword",
    "info":"Printout3DPreviewer is an option for Printout3D that specifies a previewer for generating outputs to"
  },
  {
    "label":"PrintPrecision",
    "type":"keyword",
    "info":"PrintPrecision is an option for selections that specifies the maximum number of digits used for disp"
  },
  {
    "label":"PrintTemporary",
    "type":"keyword",
    "info":"PrintTemporary[expr] prints expr as a temporary cell in a notebook, removing it when the evaluation "
  },
  {
    "label":"Prism",
    "type":"keyword",
    "info":"Prism[{p , â¦, p }] represents a filled prism connecting the triangles {p , p , p } and {p , p , p }."
  },
  {
    "label":"PrismBox",
    "type":"keyword",
    "info":"System`PrismBox"
  },
  {
    "label":"PrismBoxOptions",
    "type":"keyword",
    "info":"System`PrismBoxOptions"
  },
  {
    "label":"PrivateCellOptions",
    "type":"keyword",
    "info":"PrivateCellOptions is an option for cells that specifies various low-level cell settings."
  },
  {
    "label":"PrivateEvaluationOptions",
    "type":"keyword",
    "info":"PrivateEvaluationOptions is an option for selections that specifies settings for evaluation-related "
  },
  {
    "label":"PrivateFontOptions",
    "type":"keyword",
    "info":"PrivateFontOptions is an option for selections that specifies settings for various font suboptions."
  },
  {
    "label":"PrivateFrontEndOptions",
    "type":"keyword",
    "info":"System`PrivateFrontEndOptions"
  },
  {
    "label":"PrivateKey",
    "type":"keyword",
    "info":"PrivateKey[assoc] represents the private part of a key pair for a public-key cryptographic system."
  },
  {
    "label":"PrivateNotebookOptions",
    "type":"keyword",
    "info":"PrivateNotebookOptions is an option for notebooks that specifies various low-level notebook settings"
  },
  {
    "label":"PrivatePaths",
    "type":"keyword",
    "info":"PrivatePaths is a global option that specifies settings for paths private to the notebook front end."
  },
  {
    "label":"Probability",
    "type":"keyword",
    "info":"Probability[pred, x ï dist] gives the probability for an event that satisfies the predicate pred und"
  },
  {
    "label":"ProbabilityDistribution",
    "type":"keyword",
    "info":"ProbabilityDistribution[pdf, {x, x   , x   }] represents the continuous distribution with PDF pdf in"
  },
  {
    "label":"ProbabilityPlot",
    "type":"keyword",
    "info":"ProbabilityPlot[list] generates a plot of the CDF of list against the CDF of a normal distribution.P"
  },
  {
    "label":"ProbabilityPr",
    "type":"keyword",
    "info":"System`ProbabilityPr"
  },
  {
    "label":"ProbabilityScalePlot",
    "type":"keyword",
    "info":"ProbabilityScalePlot[{x , x , â¦}] generates a normal probability plot of the samples x . Probability"
  },
  {
    "label":"ProbitModelFit",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"ProcessConnection",
    "type":"keyword",
    "info":"ProcessConnection[proc, \"stream\"] returns the stream object for a given stream."
  },
  {
    "label":"ProcessDirectory",
    "type":"keyword",
    "info":"ProcessDirectory is an option specifying the initial working directory to use when executing a proce"
  },
  {
    "label":"ProcessEnvironment",
    "type":"keyword",
    "info":"ProcessEnvironment is an option specifying the initial settings of environment variables to use when"
  },
  {
    "label":"Processes",
    "type":"keyword",
    "info":"Processes[] returns a list of currently running external processes, started in this Wolfram Language"
  },
  {
    "label":"ProcessEstimator",
    "type":"keyword",
    "info":"ProcessEstimator is an option to EstimatedProcess and FindProcessParameters that specifies what proc"
  },
  {
    "label":"ProcessInformation",
    "type":"keyword",
    "info":"ProcessInformation[proc] gives information about an external process proc.\nProcessInformation[proc, "
  },
  {
    "label":"ProcessObject",
    "type":"keyword",
    "info":"ProcessObject[...] is an object that represents a runnable external process."
  },
  {
    "label":"ProcessParameterAssumptions",
    "type":"keyword",
    "info":"ProcessParameterAssumptions[proc] gives a logical expression for assumptions on parameters in the ra"
  },
  {
    "label":"ProcessParameterQ",
    "type":"keyword",
    "info":"ProcessParameterQ[proc] yields True if proc is a valid random process, and yields False otherwise."
  },
  {
    "label":"ProcessStateDomain",
    "type":"keyword",
    "info":"System`ProcessStateDomain"
  },
  {
    "label":"ProcessStatus",
    "type":"keyword",
    "info":"ProcessStatus[proc] gives the current status of the external process represented by the ProcessObjec"
  },
  {
    "label":"ProcessTimeDomain",
    "type":"keyword",
    "info":"System`ProcessTimeDomain"
  },
  {
    "label":"Product",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"ProductDistribution",
    "type":"keyword",
    "info":"ProductDistribution[dist , dist , â¦] represents the joint distribution with independent component di"
  },
  {
    "label":"ProductLog",
    "type":"keyword",
    "info":"                                                            w                               th\nProdu"
  },
  {
    "label":"ProgressIndicator",
    "type":"keyword",
    "info":"ProgressIndicator[x] represents a progress indicator with setting x in the range 0 to 1. ProgressInd"
  },
  {
    "label":"ProgressIndicatorBox",
    "type":"keyword",
    "info":"System`ProgressIndicatorBox"
  },
  {
    "label":"ProgressIndicatorBoxOptions",
    "type":"keyword",
    "info":"ProgressIndicatorBoxOptions ï¢ {opt  ï¢ val , opt  ï¢ val , â¦} is an option that specifies settings for"
  },
  {
    "label":"ProgressReporting",
    "type":"keyword",
    "info":"ProgressReporting is an option for various algorithmic functions that specifies whether to report th"
  },
  {
    "label":"Projection",
    "type":"keyword",
    "info":"Projection[u, v] finds the projection of the vector u onto the vector v.Projection[u, v, f] finds pr"
  },
  {
    "label":"Prolog",
    "type":"keyword",
    "info":"Prolog is an option for graphics functions which gives a list of graphics primitives to be rendered "
  },
  {
    "label":"PromptForm",
    "type":"keyword",
    "info":"PromptForm[prompt, expr] prints as an output prompt and expression."
  },
  {
    "label":"ProofObject",
    "type":"keyword",
    "info":"ProofObject[â¦] represents a proof object generated by FindEquationalProof."
  },
  {
    "label":"Properties",
    "type":"keyword",
    "info":"Properties is an option that allows specification of properties to objects and items of objects."
  },
  {
    "label":"Property",
    "type":"keyword",
    "info":"Property[item, name ï¢ value] associates the property name ï¢ value with item."
  },
  {
    "label":"PropertyList",
    "type":"keyword",
    "info":"PropertyList[{obj, itemspec}] lists the properties available for itemspec in obj."
  },
  {
    "label":"PropertyValue",
    "type":"keyword",
    "info":"PropertyValue[{obj, item}, name] gives the property value associated with name for item in obj.Prope"
  },
  {
    "label":"Proportion",
    "type":"keyword",
    "info":"Proportion[x, y, â¦] displays as x â\\[CenterDot] y â\\[CenterDot] â¦."
  },
  {
    "label":"Proportional",
    "type":"keyword",
    "info":"Proportional[x, y, â¦] displays as x â y â â¦."
  },
  {
    "label":"Protect",
    "type":"keyword",
    "info":"Protect[s , s , â¦] sets the attribute Protected for the symbols s . Protect[\"form \", \"form \", â¦] pro"
  },
  {
    "label":"Protected",
    "type":"keyword",
    "info":"Protected is an attribute that prevents any values associated with a symbol from being modified. "
  },
  {
    "label":"ProteinData",
    "type":"keyword",
    "info":"ProteinData[entity] gives the reference amino acid sequence for the protein entity.ProteinData[entit"
  },
  {
    "label":"Pruning",
    "type":"keyword",
    "info":"Pruning[image] removes the outermost branches of thin objects in image by setting their values to bl"
  },
  {
    "label":"PseudoInverse",
    "type":"keyword",
    "info":"PseudoInverse[m] finds the pseudoinverse of a rectangular matrix. "
  },
  {
    "label":"PsychrometricPropertyData",
    "type":"keyword",
    "info":"PsychrometricPropertyData[spec] returns the psychrometric properties of moist air for the specified "
  },
  {
    "label":"PublicKey",
    "type":"keyword",
    "info":"PublicKey[assoc] represents the public part of a key pair for a public-key cryptographic system.Publ"
  },
  {
    "label":"PublisherID",
    "type":"keyword",
    "info":"PublisherID is an option for ResourceSubmit that specifies the ID used to submit a resource for publ"
  },
  {
    "label":"PulsarData",
    "type":"keyword",
    "info":"PulsarData[entity, property] gives the value of the specified property for the pulsar entity.PulsarD"
  },
  {
    "label":"PunctuationCharacter",
    "type":"keyword",
    "info":"PunctuationCharacter represents a punctuation character in StringExpression."
  },
  {
    "label":"Purple",
    "type":"keyword",
    "info":"Purple represents the color purple in graphics or style specifications. "
  },
  {
    "label":"Put",
    "type":"keyword",
    "info":"expr >> filename writes expr to a file. Put[expr , expr , â¦, \"filename\"] writes a sequence of expres"
  },
  {
    "label":"PutAppend",
    "type":"keyword",
    "info":"expr >>> filename appends expr to a file. PutAppend[expr , expr , â¦, \"filename\"] appends a sequence "
  },
  {
    "label":"Pyramid",
    "type":"keyword",
    "info":"Pyramid[{p , â¦, p }] represents a filled pyramid with base {p , â¦, p } and top p .\n          1      "
  },
  {
    "label":"PyramidBox",
    "type":"keyword",
    "info":"System`PyramidBox"
  },
  {
    "label":"PyramidBoxOptions",
    "type":"keyword",
    "info":"System`PyramidBoxOptions"
  },
  {
    "label":"QBinomial",
    "type":"keyword",
    "info":"QBinomial[n, m, q] gives the q-binomial coefficient (n) .\n                                          "
  },
  {
    "label":"QFactorial",
    "type":"keyword",
    "info":"QFactorial[n, q] gives the q-factorial [n]  !.\n                                          q"
  },
  {
    "label":"QGamma",
    "type":"keyword",
    "info":"QGamma[z, q] gives the q-gamma function Î  (z).\n                                         q"
  },
  {
    "label":"QHypergeometricPFQ",
    "type":"keyword",
    "info":"QHypergeometricPFQ[{a , â¦, a }, {b , â¦, b }, q, z] gives the basic hypergeometric series ï   ï  Ï  (a "
  },
  {
    "label":"QnDispersion",
    "type":"keyword",
    "info":"QnDispersion[list] gives the Q  statistic of the elements in list.QnDispersion[list, c] gives the Q "
  },
  {
    "label":"QPochhammer",
    "type":"keyword",
    "info":"QPochhammer[a, q, n] gives the q-Pochhammer symbol (a ; q)  .QPochhammer[a, q] gives the q-Pochhamme"
  },
  {
    "label":"QPolyGamma",
    "type":"keyword",
    "info":"                                                                                    th              "
  },
  {
    "label":"QRDecomposition",
    "type":"keyword",
    "info":"QRDecomposition[m] yields the QR decomposition for a numerical matrix m. The result is a list {q, r}"
  },
  {
    "label":"QuadraticIrrationalQ",
    "type":"keyword",
    "info":"QuadraticIrrationalQ[x] gives True if x is a quadratic irrational and False otherwise."
  },
  {
    "label":"QuadraticOptimization",
    "type":"keyword",
    "info":"QuadraticOptimization[f, cons, vars] finds values of variables vars that minimize the quadratic obje"
  },
  {
    "label":"Quantile",
    "type":"keyword",
    "info":"                               th\nQuantile[list, q] gives the qï ï    quantile of list. Quantile[list,"
  },
  {
    "label":"QuantilePlot",
    "type":"keyword",
    "info":"QuantilePlot[list] generates a plot of quantiles of list against the quantiles of a normal distribut"
  },
  {
    "label":"Quantity",
    "type":"keyword",
    "info":"Quantity[magnitude, unit] represents a quantity with size magnitude and unit specified by unit.Quant"
  },
  {
    "label":"QuantityArray",
    "type":"keyword",
    "info":"QuantityArray[mags, unit] represents an array of quantities with magnitudes mags and common unit.Qua"
  },
  {
    "label":"QuantityDistribution",
    "type":"keyword",
    "info":"QuantityDistribution[dist, unit] represents a distribution dist of quantities with unit specified by"
  },
  {
    "label":"QuantityForm",
    "type":"keyword",
    "info":"QuantityForm[expr, form] prints expr with all Quantity expressions using the specified unit display "
  },
  {
    "label":"QuantityMagnitude",
    "type":"keyword",
    "info":"QuantityMagnitude[quantity] gives the amount of the specified quantity.QuantityMagnitude[quantity, u"
  },
  {
    "label":"QuantityQ",
    "type":"keyword",
    "info":"QuantityQ[expr] gives True if expr is a Quantity with valid arguments, and False otherwise."
  },
  {
    "label":"QuantityUnit",
    "type":"keyword",
    "info":"QuantityUnit[quantity] returns the unit associated with the specified quantity."
  },
  {
    "label":"QuantityVariable",
    "type":"keyword",
    "info":"QuantityVariable[var, \"pq\"] represents a variable with the label var and the corresponding physical "
  },
  {
    "label":"QuantityVariableCanonicalUnit",
    "type":"keyword",
    "info":"QuantityVariableCanonicalUnit[quantityvariable] returns the canonical unit associated with the speci"
  },
  {
    "label":"QuantityVariableDimensions",
    "type":"keyword",
    "info":"QuantityVariableDimensions[quantityvariable] returns a list of base dimensions associated with the s"
  },
  {
    "label":"QuantityVariableIdentifier",
    "type":"keyword",
    "info":"QuantityVariableIdentifier[quantityvariable] returns the identifier associated with the specified qu"
  },
  {
    "label":"QuantityVariablePhysicalQuantity",
    "type":"keyword",
    "info":"QuantityVariablePhysicalQuantity[var] returns the physical quantity associated with the quantity var"
  },
  {
    "label":"Quartics",
    "type":"keyword",
    "info":"Quartics is an option for functions that involve solving algebraic equations that specifies whether "
  },
  {
    "label":"QuartileDeviation",
    "type":"keyword",
    "info":"QuartileDeviation[list] gives the quartile deviation or semi-interquartile range of the elements in "
  },
  {
    "label":"Quartiles",
    "type":"keyword",
    "info":"Quartiles[list] gives a list of the 1\/4, 1\/2 and 3\/4 quantiles of the elements in list.Quartiles[dis"
  },
  {
    "label":"QuartileSkewness",
    "type":"keyword",
    "info":"QuartileSkewness[list] gives the coefficient of quartile skewness for the elements in list.QuartileS"
  },
  {
    "label":"Query",
    "type":"keyword",
    "info":"Query[operator , operator , â¦] represents a query that can be applied to a Dataset object, in which "
  },
  {
    "label":"QuestionInterface",
    "type":"keyword",
    "info":"QuestionInterface[type, ï p  ï¢ s , p  ï¢ s , â¦|>] defines an interface for a QuestionObject using the"
  },
  {
    "label":"QuestionObject",
    "type":"keyword",
    "info":"QuestionObject[q, assess] represents the question q and the corresponding assessment assess.Question"
  },
  {
    "label":"QueueingNetworkProcess",
    "type":"keyword",
    "info":"QueueingNetworkProcess[Î\.b3, r, Î¼, c] represents an open (Jackson) queueing network process with arriva"
  },
  {
    "label":"QueueingProcess",
    "type":"keyword",
    "info":"QueueingProcess[Î», Î¼] represents an M\/M\/1 queue with arrival rate Î» and service rate Î¼.QueueingProce"
  },
  {
    "label":"QueueProperties",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"Quiet",
    "type":"keyword",
    "info":"Quiet[expr] evaluates expr \"quietly\", without actually outputting any messages generated.Quiet[expr,"
  },
  {
    "label":"QuietEcho",
    "type":"keyword",
    "info":"QuietEcho[expr] evaluates expr without letting Echo and related functions inside expr print any resu"
  },
  {
    "label":"Quit",
    "type":"keyword",
    "info":"Quit[] terminates a Wolfram Language kernel session. "
  },
  {
    "label":"Quotient",
    "type":"keyword",
    "info":"Quotient[m, n] gives the integer quotient of m and n. Quotient[m, n, d] uses an offset d. \n"
  },
  {
    "label":"QuotientRemainder",
    "type":"keyword",
    "info":"QuotientRemainder[m, n] gives a list of the quotient and remainder from division of m by n."
  },
  {
    "label":"RadialAxisPlot",
    "type":"keyword",
    "info":"RadialAxisPlot[{y , y , â¦, y }] generates a radial axis plot where the y  are displayed on radial ax"
  },
  {
    "label":"RadialGradientFilling",
    "type":"keyword",
    "info":"RadialGradientFilling[{col , col , â¦, col }] is a two-dimensional graphics directive specifying that"
  },
  {
    "label":"RadialGradientImage",
    "type":"keyword",
    "info":"RadialGradientImage[gcol] returns an image with values radially changing from center to corners base"
  },
  {
    "label":"RadialityCentrality",
    "type":"keyword",
    "info":"RadialityCentrality[g] gives a list of radiality centralities for the vertices in the graph g.Radial"
  },
  {
    "label":"RadicalBox",
    "type":"keyword",
    "info":"                                                                                    1\/n\nRadicalBox[x"
  },
  {
    "label":"RadicalBoxOptions",
    "type":"keyword",
    "info":"RadicalBoxOptions is an option for selections that specifies settings for RadicalBox objects."
  },
  {
    "label":"RadioButton",
    "type":"keyword",
    "info":"RadioButton[x, val] represents a radio button whose setting x is set to val when the button is click"
  },
  {
    "label":"RadioButtonBar",
    "type":"keyword",
    "info":"RadioButtonBar[x, {val , val , â¦}] represents a radio button bar with setting x and with labeled rad"
  },
  {
    "label":"RadioButtonBox",
    "type":"keyword",
    "info":"System`RadioButtonBox"
  },
  {
    "label":"RadioButtonBoxOptions",
    "type":"keyword",
    "info":"RadioButtonBoxOptions ï¢ {opt  ï¢ val , opt  ï¢ val , â¦} is an option that specifies settings for Radio"
  },
  {
    "label":"Radon",
    "type":"keyword",
    "info":"Radon[image] gives an image representing the discrete Radon transform of image.Radon[image, {w, h}] "
  },
  {
    "label":"RadonTransform",
    "type":"keyword",
    "info":"RadonTransform[expr, {x, y}, {p, Ï}] gives the Radon transform of expr."
  },
  {
    "label":"RamanujanTau",
    "type":"keyword",
    "info":"RamanujanTau[n] gives the Ramanujan Ï function Ï(n)."
  },
  {
    "label":"RamanujanTauL",
    "type":"keyword",
    "info":"RamanujanTauL[s] gives the Ramanujan tau Dirichlet L-function L(s)."
  },
  {
    "label":"RamanujanTauTheta",
    "type":"keyword",
    "info":"RamanujanTauTheta[t] gives the Ramanujan tau theta function Î¸(t)."
  },
  {
    "label":"RamanujanTauZ",
    "type":"keyword",
    "info":"RamanujanTauZ[t] gives the Ramanujan tau Z-function Z(t)."
  },
  {
    "label":"Ramp",
    "type":"keyword",
    "info":"Ramp[x] gives x if x â¥ 0 and 0 otherwise."
  },
  {
    "label":"Random",
    "type":"keyword",
    "info":"Random[] gives a uniformly distributed pseudorandom Real in the range 0 to 1. Random[type, range] gi"
  },
  {
    "label":"RandomArrayLayer",
    "type":"keyword",
    "info":"RandomArrayLayer[dist] represents a net layer that has no input and produces a random array from the"
  },
  {
    "label":"RandomChoice",
    "type":"keyword",
    "info":"RandomChoice[{e , e , â¦}] gives a pseudorandom choice of one of the e . RandomChoice[list, n] gives "
  },
  {
    "label":"RandomColor",
    "type":"keyword",
    "info":"RandomColor[] gives a pseudorandom color directive in the RGBColor space.RandomColor[n] gives n pseu"
  },
  {
    "label":"RandomComplex",
    "type":"keyword",
    "info":"RandomComplex[] gives a pseudorandom complex number with real and imaginary parts in the range 0 to "
  },
  {
    "label":"RandomEntity",
    "type":"keyword",
    "info":"RandomEntity[spec] gives a pseudorandom entity with a type determined by the specification spec.Rand"
  },
  {
    "label":"RandomFunction",
    "type":"keyword",
    "info":"RandomFunction[proc, {t   , t   }] generates a pseudorandom function from the process proc from t   "
  },
  {
    "label":"RandomGeneratorState",
    "type":"keyword",
    "info":"RandomGeneratorState[â¦] gives a representation of the internal state of a pseudorandom generator."
  },
  {
    "label":"RandomGeoPosition",
    "type":"keyword",
    "info":"RandomGeoPosition[] gives a pseudorandom geo position uniformly distributed on the surface of the Ea"
  },
  {
    "label":"RandomGraph",
    "type":"keyword",
    "info":"RandomGraph[{n, m}] gives a pseudorandom graph with n vertices and m edges.RandomGraph[{n, m}, k] gi"
  },
  {
    "label":"RandomImage",
    "type":"keyword",
    "info":"RandomImage[max] gives an image with pseudorandom pixel values in the range 0 to max.RandomImage[{mi"
  },
  {
    "label":"RandomInstance",
    "type":"keyword",
    "info":"RandomInstance[expr] finds a random instance of an expression such as a geometric scene.RandomInstan"
  },
  {
    "label":"RandomInteger",
    "type":"keyword",
    "info":"RandomInteger[{i   , i   }] gives a pseudorandom integer in the range {i   , i   }. RandomInteger[i "
  },
  {
    "label":"RandomPermutation",
    "type":"keyword",
    "info":"RandomPermutation[gr] gives a pseudorandom permutation in the permutation group gr.RandomPermutation"
  },
  {
    "label":"RandomPoint",
    "type":"keyword",
    "info":"RandomPoint[reg] gives a pseudorandom point uniformly distributed in the region reg.RandomPoint[reg,"
  },
  {
    "label":"RandomPointConfiguration",
    "type":"keyword",
    "info":"RandomPointConfiguration[pproc, reg] generates a pseudorandom spatial point configuration from the s"
  },
  {
    "label":"RandomPolygon",
    "type":"keyword",
    "info":"RandomPolygon[n] gives a pseudorandom simple polygon with n vertex points.RandomPolygon[spec] gives "
  },
  {
    "label":"RandomPolyhedron",
    "type":"keyword",
    "info":"RandomPolyhedron[spec] gives a pseudorandom polyhedron with the specified specification spec.RandomP"
  },
  {
    "label":"RandomPrime",
    "type":"keyword",
    "info":"RandomPrime[{i   , i   }] gives a pseudorandom prime number in the range i    to i   .RandomPrime[i "
  },
  {
    "label":"RandomReal",
    "type":"keyword",
    "info":"RandomReal[] gives a pseudorandom real number in the range 0 to 1. RandomReal[{x   , x   }] gives a "
  },
  {
    "label":"RandomSample",
    "type":"keyword",
    "info":"RandomSample[{e , e , â¦}, n] gives a pseudorandom sample of n of the e .RandomSample[{w , w , â¦} ï¢ {"
  },
  {
    "label":"RandomSeed",
    "type":"keyword",
    "info":"System`RandomSeed"
  },
  {
    "label":"RandomSeeding",
    "type":"keyword",
    "info":"RandomSeeding is an option that specifies what seeding of pseudorandom generators should be done ins"
  },
  {
    "label":"RandomTree",
    "type":"keyword",
    "info":"RandomTree[n] gives a pseudorandom tree with n nodes.RandomTree[n, k] gives a list of k pseudorandom"
  },
  {
    "label":"RandomVariate",
    "type":"keyword",
    "info":"RandomVariate[dist] gives a pseudorandom variate from the symbolic distribution dist.RandomVariate[d"
  },
  {
    "label":"RandomWalkProcess",
    "type":"keyword",
    "info":"RandomWalkProcess[p] represents a random walk on a line with the probability of a positive unit step"
  },
  {
    "label":"RandomWord",
    "type":"keyword",
    "info":"RandomWord[] gives a pseudorandom commonly used word.RandomWord[n] gives a list of n pseudorandom wo"
  },
  {
    "label":"Range",
    "type":"keyword",
    "info":"Range[i   ] generates the list {1, 2, â¦, i   }. Range[i   , i   ] generates the list {i   , â¦, i   }"
  },
  {
    "label":"RangeFilter",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"RangeSpecification",
    "type":"keyword",
    "info":"System`RangeSpecification"
  },
  {
    "label":"RankedMax",
    "type":"keyword",
    "info":"                               th                                                         th\nRankedM"
  },
  {
    "label":"RankedMin",
    "type":"keyword",
    "info":"                               th                                                          th\nRanked"
  },
  {
    "label":"RarerProbability",
    "type":"keyword",
    "info":"RarerProbability[dist, example] computes the probability for distribution dist to generate a sample "
  },
  {
    "label":"Raster",
    "type":"keyword",
    "info":"Raster[{{a  , a  , â¦}, â¦}] is a two-dimensional graphics primitive which represents a rectangular ar"
  },
  {
    "label":"Raster3D",
    "type":"keyword",
    "info":"Raster3D[{{{a  , a  , â¦}, â¦}, â¦}] is a three-dimensional graphics primitive that represents a cubica"
  },
  {
    "label":"Raster3DBox",
    "type":"keyword",
    "info":"System`Raster3DBox"
  },
  {
    "label":"Raster3DBoxOptions",
    "type":"keyword",
    "info":"Raster3DBoxOptions ï¢ {opt  ï¢ val , opt  ï¢ val , â¦} is an option that specifies settings for Raster3D"
  },
  {
    "label":"RasterArray",
    "type":"keyword",
    "info":"RasterArray[{{g  , g  , â¦}, â¦}] is a two-dimensional graphics primitive that represents a rectangula"
  },
  {
    "label":"RasterBox",
    "type":"keyword",
    "info":"System`RasterBox"
  },
  {
    "label":"RasterBoxOptions",
    "type":"keyword",
    "info":"RasterBoxOptions ï¢ {opt  ï¢ val , opt  ï¢ val , â¦} is an option that specifies settings for RasterBox "
  },
  {
    "label":"Rasterize",
    "type":"keyword",
    "info":"Rasterize[expr] returns a rasterized version of the displayed form of expr.Rasterize[expr, elem] giv"
  },
  {
    "label":"RasterSize",
    "type":"keyword",
    "info":"RasterSize is an option for Rasterize and related functions that determines the absolute pixel size "
  },
  {
    "label":"Rational",
    "type":"keyword",
    "info":"Rational is the head used for rational numbers. "
  },
  {
    "label":"RationalExpressionQ",
    "type":"keyword",
    "info":"RationalExpressionQ[expr, x] gives True if expr is structurally a rational expression in x, and Fals"
  },
  {
    "label":"RationalFunctions",
    "type":"keyword",
    "info":"System`RationalFunctions"
  },
  {
    "label":"Rationalize",
    "type":"keyword",
    "info":"Rationalize[x] converts an approximate number x to a nearby rational with small denominator. Rationa"
  },
  {
    "label":"Rationals",
    "type":"keyword",
    "info":"Rationals represents the domain of rational numbers, as in x â Rationals. "
  },
  {
    "label":"Ratios",
    "type":"keyword",
    "info":"                                                                                          th        "
  },
  {
    "label":"RawArray",
    "type":"keyword",
    "info":"System`RawArray"
  },
  {
    "label":"RawBoxes",
    "type":"keyword",
    "info":"RawBoxes[boxes] is a low-level construct which is formatted as boxes without further interpretation."
  },
  {
    "label":"RawData",
    "type":"keyword",
    "info":"RawData[data] is a low-level representation of the contents of a cell in which Show Cell Expression "
  },
  {
    "label":"RawMedium",
    "type":"keyword",
    "info":"RawMedium is an internal symbol."
  },
  {
    "label":"RayleighDistribution",
    "type":"keyword",
    "info":"RayleighDistribution[Ï] represents the Rayleigh distribution with scale parameter Ï."
  },
  {
    "label":"Re",
    "type":"keyword",
    "info":"Re[z] gives the real part of the complex number z. "
  },
  {
    "label":"ReactionBalance",
    "type":"keyword",
    "info":"ReactionBalance[rxn] returns a version of the reaction rxn in which the stoichiometric coefficients "
  },
  {
    "label":"ReactionBalancedQ",
    "type":"keyword",
    "info":"ReactionBalancedQ[rxn] returns True if the given chemical reaction is balanced, and False otherwise."
  },
  {
    "label":"ReactionPDETerm",
    "type":"keyword",
    "info":"ReactionPDETerm[vars, a] represents a reaction term a u with reaction coefficient a and with model v"
  },
  {
    "label":"Read",
    "type":"keyword",
    "info":"Read[stream] reads one expression from an input stream and returns the expression. Read[stream, type"
  },
  {
    "label":"ReadByteArray",
    "type":"keyword",
    "info":"ReadByteArray[src] gives the contents of src as a ByteArray object.ReadByteArray[src, n] reads the f"
  },
  {
    "label":"ReadLine",
    "type":"keyword",
    "info":"ReadLine[stream] reads a line of text from a stream and returns it as a string.\nReadLine[proc] reads"
  },
  {
    "label":"ReadList",
    "type":"keyword",
    "info":"ReadList[\"file\"] reads all the remaining expressions in a file and returns a list of them. ReadList["
  },
  {
    "label":"ReadProtected",
    "type":"keyword",
    "info":"ReadProtected is an attribute that prevents values associated with a symbol from being seen. "
  },
  {
    "label":"ReadString",
    "type":"keyword",
    "info":"ReadString[\"file\"] reads the complete contents of a file and returns it as a string.\nReadString[stre"
  },
  {
    "label":"Real",
    "type":"keyword",
    "info":"Real is the head used for real (floatingâpoint) numbers. "
  },
  {
    "label":"RealAbs",
    "type":"keyword",
    "info":"RealAbs[x] gives the absolute value of the real number x. "
  },
  {
    "label":"RealBlockDiagonalForm",
    "type":"keyword",
    "info":"RealBlockDiagonalForm is an option for SchurDecomposition and related functions which specifies whet"
  },
  {
    "label":"RealDigits",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"RealExponent",
    "type":"keyword",
    "info":"RealExponent[x] gives log  (ï x ï).RealExponent[x, b] gives log (ï x ï).\n                         10"
  },
  {
    "label":"Reals",
    "type":"keyword",
    "info":"Reals represents the domain of real numbers, as in x â Reals. "
  },
  {
    "label":"RealSign",
    "type":"keyword",
    "info":"RealSign[x] gives -1, 0 or 1 depending on whether x is negative, zero or positive. "
  },
  {
    "label":"Reap",
    "type":"keyword",
    "info":"Reap[expr] gives the value of expr together with all expressions to which Sow has been applied durin"
  },
  {
    "label":"RebuildPacletData",
    "type":"keyword",
    "info":"The experimental function RebuildPacletData is now obsolete and is superseded by PacletDataRebuild."
  },
  {
    "label":"RecalibrationFunction",
    "type":"keyword",
    "info":"RecalibrationFunction is an option for Classify, Predict and related functions that specifies how to"
  },
  {
    "label":"RecognitionPrior",
    "type":"keyword",
    "info":"RecognitionPrior is an option for recognition functions that specifies the prior probability or clas"
  },
  {
    "label":"RecognitionThreshold",
    "type":"keyword",
    "info":"RecognitionThreshold is an option for ImageInstanceQ and related functions that specifies the minimu"
  },
  {
    "label":"Record",
    "type":"keyword",
    "info":"Record represents a record in Read, Find, and related functions. "
  },
  {
    "label":"RecordLists",
    "type":"keyword",
    "info":"RecordLists is an option for ReadList that specifies whether objects from separate records should be"
  },
  {
    "label":"RecordSeparators",
    "type":"keyword",
    "info":"RecordSeparators is an option for Read, Find, and related functions that specifies the list of strin"
  },
  {
    "label":"Rectangle",
    "type":"keyword",
    "info":"Rectangle[{x   , y   }, {x   , y   }] represents an axis-aligned filled rectangle from {x   , y   } "
  },
  {
    "label":"RectangleBox",
    "type":"keyword",
    "info":"System`RectangleBox"
  },
  {
    "label":"RectangleBoxOptions",
    "type":"keyword",
    "info":"RectangleBoxOptions ï¢ {opt  ï¢ val , opt  ï¢ val , â¦} is an option that specifies settings for Rectang"
  },
  {
    "label":"RectangleChart",
    "type":"keyword",
    "info":"RectangleChart[{{x , y }, {x , y }, â¦}] makes a rectangle chart with bars of width x  and height y ."
  },
  {
    "label":"RectangleChart3D",
    "type":"keyword",
    "info":"RectangleChart3D[{{x , y , z }, {x , y , z }, â¦}] makes a 3D rectangle chart with bars of width x , "
  },
  {
    "label":"RectangularRepeatingElement",
    "type":"keyword",
    "info":"RectangularRepeatingElement[elem] represents a rectangular array of elements of type spec in an inte"
  },
  {
    "label":"RecurrenceFilter",
    "type":"keyword",
    "info":"RecurrenceFilter[{Î\\[PlusMinus], Î\.b2}, x] filters x using a linear recurrence equation with coefficients Î\\[PlusMinus] and Î\.b2.R"
  },
  {
    "label":"RecurrenceTable",
    "type":"keyword",
    "info":"RecurrenceTable[eqns, expr, {n, n   }] generates a list of values of expr for successive n based on "
  },
  {
    "label":"RecurringDigitsForm",
    "type":"keyword",
    "info":"System`RecurringDigitsForm"
  },
  {
    "label":"Red",
    "type":"keyword",
    "info":"Red represents the color red in graphics or style specifications. "
  },
  {
    "label":"Reduce",
    "type":"keyword",
    "info":"Reduce[expr, vars] reduces the statement expr by solving equations or inequalities for vars and elim"
  },
  {
    "label":"RefBox",
    "type":"keyword",
    "info":"System`RefBox"
  },
  {
    "label":"ReferenceLineStyle",
    "type":"keyword",
    "info":"ReferenceLineStyle is an option for QuantilePlot and similar functions that specifies the style used"
  },
  {
    "label":"ReferenceMarkers",
    "type":"keyword",
    "info":"System`ReferenceMarkers"
  },
  {
    "label":"ReferenceMarkerStyle",
    "type":"keyword",
    "info":"System`ReferenceMarkerStyle"
  },
  {
    "label":"Refine",
    "type":"keyword",
    "info":"Refine[expr, assum] gives the form of expr that would be obtained if symbols in it were replaced by "
  },
  {
    "label":"ReflectionMatrix",
    "type":"keyword",
    "info":"ReflectionMatrix[v] gives the matrix that represents reflection of points in a mirror normal to the "
  },
  {
    "label":"ReflectionTransform",
    "type":"keyword",
    "info":"ReflectionTransform[v] gives a TransformationFunction that represents a reflection in a mirror throu"
  },
  {
    "label":"Refresh",
    "type":"keyword",
    "info":"Refresh[expr, opts] represents an object whose value in a Dynamic should be refreshed at times speci"
  },
  {
    "label":"RefreshRate",
    "type":"keyword",
    "info":"RefreshRate is an option to Animate and related functions which specifies the refresh rate for frame"
  },
  {
    "label":"Region",
    "type":"keyword",
    "info":"Region[reg] represents a geometric region.Region[reg, options] gives a region that uses the specifie"
  },
  {
    "label":"RegionBinarize",
    "type":"keyword",
    "info":"RegionBinarize[image, marker, d] gives a binary version of image that includes the foreground pixels"
  },
  {
    "label":"RegionBoundary",
    "type":"keyword",
    "info":"RegionBoundary[reg] represents the boundary of the region reg."
  },
  {
    "label":"RegionBoundaryStyle",
    "type":"keyword",
    "info":"RegionBoundaryStyle is an option for plotting functions that specifies the boundary style for the re"
  },
  {
    "label":"RegionBounds",
    "type":"keyword",
    "info":"RegionBounds[reg] gives the bounds for the region reg.RegionBounds[reg, \"type\"] gives region bounds "
  },
  {
    "label":"RegionCentroid",
    "type":"keyword",
    "info":"RegionCentroid[reg] gives the centroid of the region reg."
  },
  {
    "label":"RegionCongruent",
    "type":"keyword",
    "info":"RegionCongruent[reg , reg ] tests whether the regions reg  and reg  are congruent.\n                 "
  },
  {
    "label":"RegionConvert",
    "type":"keyword",
    "info":"RegionConvert[reg, form] converts the region representation reg to the specified form."
  },
  {
    "label":"RegionDifference",
    "type":"keyword",
    "info":"RegionDifference[reg , reg ] gives the difference of the regions reg  and reg .\n                    "
  },
  {
    "label":"RegionDilation",
    "type":"keyword",
    "info":"RegionDilation[reg, r] gives the dilation of the region reg by a disk of radius r centered at the or"
  },
  {
    "label":"RegionDimension",
    "type":"keyword",
    "info":"RegionDimension[reg] gives the geometric dimension of the region reg. "
  },
  {
    "label":"RegionDisjoint",
    "type":"keyword",
    "info":"RegionDisjoint[reg , reg ] returns True if the regions reg  and reg  are disjoint. RegionDisjoint[re"
  },
  {
    "label":"RegionDistance",
    "type":"keyword",
    "info":"RegionDistance[reg, p] gives the minimum distance from the point p to the region reg.RegionDistance["
  },
  {
    "label":"RegionDistanceFunction",
    "type":"keyword",
    "info":"RegionDistanceFunction[reg, â¦]  represents a function whose values give the distance from a point to"
  },
  {
    "label":"RegionEmbeddingDimension",
    "type":"keyword",
    "info":"RegionEmbeddingDimension[reg] gives the dimension of the space in which the region reg is embedded. "
  },
  {
    "label":"RegionEqual",
    "type":"keyword",
    "info":"RegionEqual[reg , reg ] returns True if the regions reg  and reg  are equal.RegionEqual[reg , reg , "
  },
  {
    "label":"RegionErosion",
    "type":"keyword",
    "info":"RegionErosion[reg, r] gives the erosion of the region reg by a disk of radius r centered at the orig"
  },
  {
    "label":"RegionFillingStyle",
    "type":"keyword",
    "info":"RegionFillingStyle is an option for plotting functions that specifies the style for the filled regio"
  },
  {
    "label":"RegionFit",
    "type":"keyword",
    "info":"RegionFit[{p , p , â¦}, \"model\"] finds a geometric region \"model\" that best fits the points p , p , â¦"
  },
  {
    "label":"RegionFunction",
    "type":"keyword",
    "info":"RegionFunction is an option for plotting functions that specifies the region to include in the plot "
  },
  {
    "label":"RegionImage",
    "type":"keyword",
    "info":"RegionImage[reg] returns a rasterized grayscale 2D or 3D image of reg.RegionImage[reg, {{x   , x   }"
  },
  {
    "label":"RegionIntersection",
    "type":"keyword",
    "info":"RegionIntersection[reg , reg , â¦] gives the intersection of the regions reg , reg , â¦.\n             "
  },
  {
    "label":"RegionMeasure",
    "type":"keyword",
    "info":"RegionMeasure[reg] gives the measure of the region reg.RegionMeasure[reg, d] gives the d-dimensional"
  },
  {
    "label":"RegionMember",
    "type":"keyword",
    "info":"RegionMember[reg, {x, y, â¦}] gives True if the numeric point {x, y, â¦} is a member of the constant r"
  },
  {
    "label":"RegionMemberFunction",
    "type":"keyword",
    "info":"RegionMemberFunction[reg, â¦]  represents a function whose values give whether a point is in a region"
  },
  {
    "label":"RegionMoment",
    "type":"keyword",
    "info":"                                                                            i   i     i\nRegionMoment"
  },
  {
    "label":"RegionNearest",
    "type":"keyword",
    "info":"RegionNearest[reg, p] gives a point in the region reg that is nearest the point p. RegionNearest[reg"
  },
  {
    "label":"RegionNearestFunction",
    "type":"keyword",
    "info":"RegionNearestFunction[reg, â¦]  represents a function whose values give the nearest point in the regi"
  },
  {
    "label":"RegionPlot",
    "type":"keyword",
    "info":"RegionPlot[pred, {x, x   , x   }, {y, y   , y   }] makes a plot showing the region in which pred is "
  },
  {
    "label":"RegionPlot3D",
    "type":"keyword",
    "info":"RegionPlot3D[pred, {x, x   , x   }, {y, y   , y   }, {z, z   , z   }] makes a plot showing the three"
  },
  {
    "label":"RegionProduct",
    "type":"keyword",
    "info":"RegionProduct[reg , reg ] represents the Cartesian product of the regions reg  and reg .RegionProduc"
  },
  {
    "label":"RegionQ",
    "type":"keyword",
    "info":"RegionQ[reg] gives True if reg is a valid region and False otherwise. "
  },
  {
    "label":"RegionResize",
    "type":"keyword",
    "info":"RegionResize[reg, l] resize the region reg to have the first side length l preserving side length ra"
  },
  {
    "label":"RegionSimilar",
    "type":"keyword",
    "info":"RegionSimilar[reg , reg ] tests whether the regions reg  and reg  are similar.\n                 1   "
  },
  {
    "label":"RegionSize",
    "type":"keyword",
    "info":"RegionSize is an option used by Printout3D to specify the overall size of an object to print for a r"
  },
  {
    "label":"RegionSymmetricDifference",
    "type":"keyword",
    "info":"RegionSymmetricDifference[reg , reg , â¦] represents the symmetric difference of the regions reg , re"
  },
  {
    "label":"RegionUnion",
    "type":"keyword",
    "info":"RegionUnion[reg , reg , â¦] gives the union of the regions reg , reg , â¦.\n               1     2     "
  },
  {
    "label":"RegionWithin",
    "type":"keyword",
    "info":"RegionWithin[reg , reg ] returns True if reg  is contained within reg .\n                1     2     "
  },
  {
    "label":"RegisterExternalEvaluator",
    "type":"keyword",
    "info":"RegisterExternalEvaluator[sys, target] registers the target for use as an external evaluator with th"
  },
  {
    "label":"RegularExpression",
    "type":"keyword",
    "info":"RegularExpression[\"regex\"] represents the generalized regular expression specified by the string \"re"
  },
  {
    "label":"Regularization",
    "type":"keyword",
    "info":"Regularization is an option for Sum and Product that specifies what type of regularization to use."
  },
  {
    "label":"RegularlySampledQ",
    "type":"keyword",
    "info":"RegularlySampledQ[tseries] gives True if tseries is a regular time series, and False otherwise."
  },
  {
    "label":"RegularPolygon",
    "type":"keyword",
    "info":"RegularPolygon[n] gives the regular polygon with n vertices equally spaced around the unit circle.Re"
  },
  {
    "label":"ReIm",
    "type":"keyword",
    "info":"ReIm[z] gives the list {Re[z], Im[z]} of the number z."
  },
  {
    "label":"ReImLabels",
    "type":"keyword",
    "info":"ReImLabels is an option for ReImPlot that specifies labels to use for the real and imaginary compone"
  },
  {
    "label":"ReImPlot",
    "type":"keyword",
    "info":"ReImPlot[f, {x, x   , x   }] generates a plot of Re[f] and Im[f] as functions of x â ï\\[Micro] from x    to "
  },
  {
    "label":"ReImStyle",
    "type":"keyword",
    "info":"ReImStyle is an option for ReImPlot that specifies styles to use for the real and imaginary componen"
  },
  {
    "label":"Reinstall",
    "type":"keyword",
    "info":"Reinstall[link] un-installs the specified external package and installs it again."
  },
  {
    "label":"RelationalDatabase",
    "type":"keyword",
    "info":"RelationalDatabase[â¦] represents schema information about a relational database.RelationalDatabase[d"
  },
  {
    "label":"RelationGraph",
    "type":"keyword",
    "info":"RelationGraph[f, {v , v , â¦}] gives the graph with vertices v  and edges from v  to v  whenever f[v "
  },
  {
    "label":"Release",
    "type":"keyword",
    "info":"System`Release"
  },
  {
    "label":"ReleaseHold",
    "type":"keyword",
    "info":"ReleaseHold[expr] removes Hold, HoldForm, HoldPattern, and HoldComplete in expr. "
  },
  {
    "label":"ReliabilityDistribution",
    "type":"keyword",
    "info":"ReliabilityDistribution[bexpr, {{x , dist }, {x , dist }, â¦}] represents the reliability distributio"
  },
  {
    "label":"ReliefImage",
    "type":"keyword",
    "info":"ReliefImage[array] generates a relief image of an array of height values. "
  },
  {
    "label":"ReliefPlot",
    "type":"keyword",
    "info":"ReliefPlot[array] generates a relief plot of an array of height values. "
  },
  {
    "label":"RemoteAuthorizationCaching",
    "type":"keyword",
    "info":"RemoteAuthorizationCaching is an option for RemoteConnect and related functions that determines whet"
  },
  {
    "label":"RemoteBatchJobAbort",
    "type":"keyword",
    "info":"RemoteBatchJobAbort[job] aborts a remote batch job."
  },
  {
    "label":"RemoteBatchJobObject",
    "type":"keyword",
    "info":"RemoteBatchJobObject[â¦] represents a remote batch job submitted by RemoteBatchSubmit or RemoteBatchM"
  },
  {
    "label":"RemoteBatchJobs",
    "type":"keyword",
    "info":"RemoteBatchJobs[env] gives a list of RemoteBatchJobObject expressions representing batch jobs submit"
  },
  {
    "label":"RemoteBatchMapSubmit",
    "type":"keyword",
    "info":"RemoteBatchMapSubmit[env, f, list] submits an array batch job in which f is applied to each element "
  },
  {
    "label":"RemoteBatchSubmissionEnvironment",
    "type":"keyword",
    "info":"RemoteBatchSubmissionEnvironment[\"provider\", assoc] represents a remote batch job submission environ"
  },
  {
    "label":"RemoteBatchSubmit",
    "type":"keyword",
    "info":"RemoteBatchSubmit[env, expr] submits expr for evaluation using the remote batch submission environme"
  },
  {
    "label":"RemoteConnect",
    "type":"keyword",
    "info":"RemoteConnect[\"host\"] connects to the specified remote host.RemoteConnect[IPAddress[\"address\"]] conn"
  },
  {
    "label":"RemoteConnectionObject",
    "type":"keyword",
    "info":"RemoteConnectionObject[â¦] is an object that represents a remote connection."
  },
  {
    "label":"RemoteEvaluate",
    "type":"keyword",
    "info":"RemoteEvaluate[expr] gives the result of evaluating expr using your current default remote Wolfram L"
  },
  {
    "label":"RemoteFile",
    "type":"keyword",
    "info":"RemoteFile[URL[\"uri\"]] is a symbolic representation of a file on a remote machine."
  },
  {
    "label":"RemoteInputFiles",
    "type":"keyword",
    "info":"RemoteInputFiles is an option for RemoteBatchSubmit and RemoteBatchMapSubmit that specifies local fi"
  },
  {
    "label":"RemoteKernelObject",
    "type":"keyword",
    "info":"RemoteKernelObject[spec] specifies a remote kernel that can be used for RemoteEvaluate or LaunchKern"
  },
  {
    "label":"RemoteProviderSettings",
    "type":"keyword",
    "info":"RemoteProviderSettings is an option for RemoteBatchSubmit and RemoteBatchMapSubmit that specifies pr"
  },
  {
    "label":"RemoteRun",
    "type":"keyword",
    "info":"RemoteRun[\"host\", \"command\"] runs the specified operating system command on the remote host, returni"
  },
  {
    "label":"RemoteRunProcess",
    "type":"keyword",
    "info":"RemoteRunProcess[\"host\", \"command\"] runs the specified system command on the remote host, returning "
  },
  {
    "label":"RemovalConditions",
    "type":"keyword",
    "info":"RemovalConditions is an option for AttachCell that specifies conditions under which to remove the at"
  },
  {
    "label":"Remove",
    "type":"keyword",
    "info":"Remove[symbol , â¦] removes symbols completely, so that their names are no longer recognized by the W"
  },
  {
    "label":"RemoveAlphaChannel",
    "type":"keyword",
    "info":"RemoveAlphaChannel[color] removes opacity from color.RemoveAlphaChannel[color, bg] removes opacity b"
  },
  {
    "label":"RemoveAsynchronousTask",
    "type":"keyword",
    "info":"RemoveAsynchronousTask[asyncTask] stops asynchronous evaluations and removes asyncTask from the syst"
  },
  {
    "label":"RemoveAudioStream",
    "type":"keyword",
    "info":"RemoveAudioStream[] deletes all AudioStream objects.RemoveAudioStream[stream] deletes the AudioStrea"
  },
  {
    "label":"RemoveBackground",
    "type":"keyword",
    "info":"RemoveBackground[image] returns an image with an alpha channel where the background is transparent. "
  },
  {
    "label":"RemoveChannelListener",
    "type":"keyword",
    "info":"RemoveChannelListener[obj] removes obj from the list of currently active channel listeners.RemoveCha"
  },
  {
    "label":"RemoveChannelSubscribers",
    "type":"keyword",
    "info":"RemoveChannelSubscribers[channel] removes all subscribers from the specified channel.RemoveChannelSu"
  },
  {
    "label":"Removed",
    "type":"keyword",
    "info":"Removed[string] is printed to indicate a symbol that has been removed."
  },
  {
    "label":"RemoveDiacritics",
    "type":"keyword",
    "info":"RemoveDiacritics[string] replaces characters in string that have diacritics by their base ASCII char"
  },
  {
    "label":"RemoveInputStreamMethod",
    "type":"keyword",
    "info":"RemoveInputStreamMethod[\"name\"] removes a custom input stream method."
  },
  {
    "label":"RemoveOutputStreamMethod",
    "type":"keyword",
    "info":"RemoveOutputStreamMethod[\"name\"] removes a custom output stream method."
  },
  {
    "label":"RemoveProperty",
    "type":"keyword",
    "info":"RemoveProperty[{obj, itemspec}] removes all properties associated with itemspec in obj.RemovePropert"
  },
  {
    "label":"RemoveScheduledTask",
    "type":"keyword",
    "info":"RemoveScheduledTask[obj] removes obj from the list of currently scheduled local or cloud tasks."
  },
  {
    "label":"RemoveUsers",
    "type":"keyword",
    "info":"RemoveUsers[group, {user , â¦}] removes the users user  from the permissions group group.\n           "
  },
  {
    "label":"RemoveVideoStream",
    "type":"keyword",
    "info":"RemoveVideoStream[] deletes all VideoStream objects.RemoveVideoStream[stream] deletes the VideoStrea"
  },
  {
    "label":"RenameDirectory",
    "type":"keyword",
    "info":"RenameDirectory[dir , dir ] renames the directory dir  to dir . \n                   1     2         "
  },
  {
    "label":"RenameFile",
    "type":"keyword",
    "info":"RenameFile[file , file ] renames file  to file . \n               1      2              1        2"
  },
  {
    "label":"RenderAll",
    "type":"keyword",
    "info":"RenderAll is an option for Graphics3D that specifies whether or not PostScript should be generated f"
  },
  {
    "label":"RenderingOptions",
    "type":"keyword",
    "info":"RenderingOptions is an option for Style, Cell and related constructs that specifies options related "
  },
  {
    "label":"RenewalProcess",
    "type":"keyword",
    "info":"RenewalProcess[rdist] represents a renewal process with interarrival times distributed according to "
  },
  {
    "label":"RenkoChart",
    "type":"keyword",
    "info":"RenkoChart[{{date , p }, {date , p }, â¦}] makes a Renko chart with prices p  at date date .RenkoChar"
  },
  {
    "label":"RepairMesh",
    "type":"keyword",
    "info":"RepairMesh[mreg] repairs defects in the mesh region mreg.RepairMesh[mreg, {def , â¦}] repairs only th"
  },
  {
    "label":"Repeated",
    "type":"keyword",
    "info":"p .. or Repeated[p] is a pattern object that represents a sequence of one or more expressions, each "
  },
  {
    "label":"RepeatedNull",
    "type":"keyword",
    "info":"p ... or RepeatedNull[p] is a pattern object that represents a sequence of zero or more expressions,"
  },
  {
    "label":"RepeatedString",
    "type":"keyword",
    "info":"RepeatedString is an internal symbol used for formatting and printing."
  },
  {
    "label":"RepeatedTiming",
    "type":"keyword",
    "info":"RepeatedTiming[expr] evaluates expr repeatedly and returns a list of the average time in seconds use"
  },
  {
    "label":"RepeatingElement",
    "type":"keyword",
    "info":"RepeatingElement[spec] represents an arbitrarily repeated type of element in an interpreter, API or "
  },
  {
    "label":"Replace",
    "type":"keyword",
    "info":"Replace[expr, rules] applies a rule or list of rules in an attempt to transform the entire expressio"
  },
  {
    "label":"ReplaceAll",
    "type":"keyword",
    "info":"expr\/.rules or ReplaceAll[expr, rules] applies a rule or list of rules in an attempt to transform ea"
  },
  {
    "label":"ReplaceHeldPart",
    "type":"keyword",
    "info":"System`ReplaceHeldPart"
  },
  {
    "label":"ReplaceImageValue",
    "type":"keyword",
    "info":"ReplaceImageValue[image, pos ï¢ val] changes the pixel values at position pos in image to val.Replace"
  },
  {
    "label":"ReplaceList",
    "type":"keyword",
    "info":"ReplaceList[expr, rules] attempts to transform the entire expression expr by applying a rule or list"
  },
  {
    "label":"ReplacePart",
    "type":"keyword",
    "info":"                                                                th\nReplacePart[expr, i ï¢ new] yields"
  },
  {
    "label":"ReplacePixelValue",
    "type":"keyword",
    "info":"ReplacePixelValue[image, ppos ï¢ val] changes the pixel values at pixel position ppos in image to val"
  },
  {
    "label":"ReplaceRepeated",
    "type":"keyword",
    "info":"expr\/\/.rules repeatedly performs replacements until expr no longer changes. ReplaceRepeated[rules] r"
  },
  {
    "label":"ReplicateLayer",
    "type":"keyword",
    "info":"ReplicateLayer[n] represents a net layer that takes an input of dimensions {d , d , â¦} and replicate"
  },
  {
    "label":"RequiredPhysicalQuantities",
    "type":"keyword",
    "info":"RequiredPhysicalQuantities is an option for FormulaLookup that specifies physical quantities that mu"
  },
  {
    "label":"Resampling",
    "type":"keyword",
    "info":"Resampling is an option that specifies the method to be used for resampling images or arrays."
  },
  {
    "label":"ResamplingAlgorithmData",
    "type":"keyword",
    "info":"ResamplingAlgorithmData[rs, \"prop\"] gives the specified property \"prop\" for the resampling rs."
  },
  {
    "label":"ResamplingMethod",
    "type":"keyword",
    "info":"ResamplingMethod is an option for functions such as TemporalData and MovingMap that specifies how va"
  },
  {
    "label":"Rescale",
    "type":"keyword",
    "info":"Rescale[x, {min, max}] gives x rescaled to run from 0 to 1 over the range min to max. Rescale[x, {mi"
  },
  {
    "label":"RescalingTransform",
    "type":"keyword",
    "info":"RescalingTransform[{{x   , x   }, {y   , y   }, â¦}, {{xp   , xp   }, â¦}] gives a TransformationFunct"
  },
  {
    "label":"ResetDirectory",
    "type":"keyword",
    "info":"ResetDirectory[] resets the current working directory to its previous value. "
  },
  {
    "label":"ResetMenusPacket",
    "type":"keyword",
    "info":"System`ResetMenusPacket"
  },
  {
    "label":"ResetScheduledTask",
    "type":"keyword",
    "info":"ResetScheduledTask[obj, timespec]  resets the timing for a scheduled task to timespec.ResetScheduled"
  },
  {
    "label":"ReshapeLayer",
    "type":"keyword",
    "info":"ReshapeLayer[dims] represents a net layer that reinterprets the input to be an array of dimensions d"
  },
  {
    "label":"Residue",
    "type":"keyword",
    "info":"Residue[expr, {z, z }] finds the residue of expr at the point z = z . \n                   0         "
  },
  {
    "label":"ResizeLayer",
    "type":"keyword",
    "info":"ResizeLayer[{d}] represents a layer performing one-dimensional resizing of a two-dimensional array.R"
  },
  {
    "label":"Resolve",
    "type":"keyword",
    "info":"Resolve[expr] attempts to resolve expr into a form that eliminates ForAll and Exists quantifiers. Re"
  },
  {
    "label":"ResolveContextAliases",
    "type":"keyword",
    "info":"ResolveContextAliases is an option for Names, Contexts and related functions to control whether to r"
  },
  {
    "label":"ResourceAcquire",
    "type":"keyword",
    "info":"System`ResourceAcquire"
  },
  {
    "label":"ResourceData",
    "type":"keyword",
    "info":"ResourceData[resource] gives the primary content of the specified resource.ResourceData[resource, el"
  },
  {
    "label":"ResourceFunction",
    "type":"keyword",
    "info":"ResourceFunction[resource] represents the function associated with the specified resource.ResourceFu"
  },
  {
    "label":"ResourceObject",
    "type":"keyword",
    "info":"ResourceObject[\"name\"] represents a resource with the specified name.ResourceObject[\"uuid\"] represen"
  },
  {
    "label":"ResourceRegister",
    "type":"keyword",
    "info":"ResourceRegister[resource] creates a persistent cache of a resource object that can be referenced by"
  },
  {
    "label":"ResourceRemove",
    "type":"keyword",
    "info":"ResourceRemove[resource] removes the specified resource from the system on which it is run."
  },
  {
    "label":"ResourceSearch",
    "type":"keyword",
    "info":"ResourceSearch[form] gives a dataset of resources that contain text matching form.ResourceSearch[for"
  },
  {
    "label":"ResourceSubmissionObject",
    "type":"keyword",
    "info":"System`ResourceSubmissionObject"
  },
  {
    "label":"ResourceSubmit",
    "type":"keyword",
    "info":"ResourceSubmit[resource] submits the specified resource object to be reviewed for publication.Resour"
  },
  {
    "label":"ResourceSystemBase",
    "type":"keyword",
    "info":"ResourceSystemBase is an option for ResourceObject, ResourceSearch and related functions specifying "
  },
  {
    "label":"ResourceSystemPath",
    "type":"keyword",
    "info":"ResourceSystemPath is an option for ResourceObject, ResourceSearch and related functions for specify"
  },
  {
    "label":"ResourceUpdate",
    "type":"keyword",
    "info":"ResourceUpdate[resource] updates to the latest version of the specified resource object.ResourceUpda"
  },
  {
    "label":"ResourceVersion",
    "type":"keyword",
    "info":"ResourceVersion is an option for ResourceObject, ResourceFunction and related functions for specifyi"
  },
  {
    "label":"ResponseForm",
    "type":"keyword",
    "info":"ResponseForm[expr, \"fmt\"] represents a response record to be given in a specified format when reques"
  },
  {
    "label":"Rest",
    "type":"keyword",
    "info":"Rest[expr] gives expr with the first element removed. "
  },
  {
    "label":"RestartInterval",
    "type":"keyword",
    "info":"RestartInterval is an option controlling the restart behavior of functions such as ContinuousTask."
  },
  {
    "label":"Restricted",
    "type":"keyword",
    "info":"Restricted[form, cond, â¦] represents a form for Interpreter and related functions restricted accordi"
  },
  {
    "label":"Resultant",
    "type":"keyword",
    "info":"Resultant[poly , poly , var] computes the resultant of the polynomials poly  and poly  with respect "
  },
  {
    "label":"ResumePacket",
    "type":"keyword",
    "info":"ResumePacket[] is a WSTP packet used for synchronization with the Wolfram Language kernel."
  },
  {
    "label":"Return",
    "type":"keyword",
    "info":"Return[expr] returns the value expr from a function. Return[] returns the value Null. \n"
  },
  {
    "label":"ReturnCreatesNewCell",
    "type":"keyword",
    "info":"System`ReturnCreatesNewCell"
  },
  {
    "label":"ReturnEntersInput",
    "type":"keyword",
    "info":"System`ReturnEntersInput"
  },
  {
    "label":"ReturnExpressionPacket",
    "type":"keyword",
    "info":"ReturnExpressionPacket[expr] is a WSTP packet that contains the expression expr, the result of an En"
  },
  {
    "label":"ReturnInputFormPacket",
    "type":"keyword",
    "info":"ReturnInputFormPacket is an internal symbol used for formatting."
  },
  {
    "label":"ReturnPacket",
    "type":"keyword",
    "info":"ReturnPacket[expr] is a WSTP packet that contains the expression expr, the result of an EvaluatePack"
  },
  {
    "label":"ReturnReceiptFunction",
    "type":"keyword",
    "info":"ReturnReceiptFunction is an option for MailReceiverFunction that specifies what function to apply if"
  },
  {
    "label":"ReturnTextPacket",
    "type":"keyword",
    "info":"ReturnTextPacket[string] is a WSTP packet containing string, the result of an EnterTextPacket evalua"
  },
  {
    "label":"Reverse",
    "type":"keyword",
    "info":"Reverse[expr] reverses the order of the elements in expr. Reverse[expr, n] reverses elements at leve"
  },
  {
    "label":"ReverseApplied",
    "type":"keyword",
    "info":"ReverseApplied[f] represents a form of f that takes arguments in reverse order so that ReverseApplie"
  },
  {
    "label":"ReverseBiorthogonalSplineWavelet",
    "type":"keyword",
    "info":"ReverseBiorthogonalSplineWavelet[] represents a reverse biorthogonal spline wavelet of order 4 and d"
  },
  {
    "label":"ReverseElement",
    "type":"keyword",
    "info":"ReverseElement[x, y, â¦] displays as x â y â â¦."
  },
  {
    "label":"ReverseEquilibrium",
    "type":"keyword",
    "info":"ReverseEquilibrium[x, y, â¦] displays as x â y â â¦."
  },
  {
    "label":"ReverseGraph",
    "type":"keyword",
    "info":"ReverseGraph[g] gives the reverse graph of the directed graph g.ReverseGraph[{v ï¢ w, â¦}] uses rules "
  },
  {
    "label":"ReverseSort",
    "type":"keyword",
    "info":"ReverseSort[list] sorts the elements of list into reverse canonical order. ReverseSort[list, p] sort"
  },
  {
    "label":"ReverseSortBy",
    "type":"keyword",
    "info":"ReverseSortBy[list, f] sorts the elements of list using the reverse canonical order defined by apply"
  },
  {
    "label":"ReverseUpEquilibrium",
    "type":"keyword",
    "info":"ReverseUpEquilibrium[x, y, â¦] displays as x â¥¯ y â¥¯ â¦."
  },
  {
    "label":"RevolutionAxis",
    "type":"keyword",
    "info":"RevolutionAxis is an option for RevolutionPlot3D which specifies the revolution axis around which th"
  },
  {
    "label":"RevolutionPlot3D",
    "type":"keyword",
    "info":"RevolutionPlot3D[f , {t, t   , t   }] generates a plot of the surface of revolution with height f  a"
  },
  {
    "label":"RGBColor",
    "type":"keyword",
    "info":"RGBColor[r, g, b] represents a color in the RGB color space with red, blue and green components. RGB"
  },
  {
    "label":"RiccatiSolve",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"RiceDistribution",
    "type":"keyword",
    "info":"RiceDistribution[Î\\[PlusMinus], Î\.b2] represents a Rice distribution with shape parameters Î\\[PlusMinus] and Î\.b2.RiceDistribution"
  },
  {
    "label":"RidgeFilter",
    "type":"keyword",
    "info":"RidgeFilter[data] computes a measure for the presence of a ridge at every position of data.RidgeFilt"
  },
  {
    "label":"RiemannR",
    "type":"keyword",
    "info":"RiemannR[x] gives the Riemann prime counting function R(x)."
  },
  {
    "label":"RiemannSiegelTheta",
    "type":"keyword",
    "info":"RiemannSiegelTheta[t] gives the RiemannâSiegel function Ï(t). "
  },
  {
    "label":"RiemannSiegelZ",
    "type":"keyword",
    "info":"RiemannSiegelZ[t] gives the RiemannâSiegel function Z(t). "
  },
  {
    "label":"RiemannXi",
    "type":"keyword",
    "info":"RiemannXi[s] gives the Riemann xi function Î¾(s)."
  },
  {
    "label":"Riffle",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"Right",
    "type":"keyword",
    "info":"Right is a symbol that represents the right-hand side for purposes of alignment and positioning. "
  },
  {
    "label":"RightArrow",
    "type":"keyword",
    "info":"RightArrow[x, y, â¦] displays as x â y â â¦."
  },
  {
    "label":"RightArrowBar",
    "type":"keyword",
    "info":"RightArrowBar[x, y, â¦] displays as x â¥ y â¥ â¦."
  },
  {
    "label":"RightArrowLeftArrow",
    "type":"keyword",
    "info":"RightArrowLeftArrow[x, y, â¦] displays as x â y â â¦."
  },
  {
    "label":"RightComposition",
    "type":"keyword",
    "info":"RightComposition[f , f , f , â¦] represents a composition on the right of the functions f , f , f , â¦"
  },
  {
    "label":"RightCosetRepresentative",
    "type":"keyword",
    "info":"RightCosetRepresentative[group, g] returns the smallest element in the right coset of products of th"
  },
  {
    "label":"RightDownTeeVector",
    "type":"keyword",
    "info":"RightDownTeeVector[x, y, â¦] displays as x â¥ y â¥ â¦."
  },
  {
    "label":"RightDownVector",
    "type":"keyword",
    "info":"RightDownVector[x, y, â¦] displays as x â y â â¦."
  },
  {
    "label":"RightDownVectorBar",
    "type":"keyword",
    "info":"RightDownVectorBar[x, y, â¦] displays as x â¥ y â¥ â¦."
  },
  {
    "label":"RightTee",
    "type":"keyword",
    "info":"RightTee[x, y] displays as x â¢ y."
  },
  {
    "label":"RightTeeArrow",
    "type":"keyword",
    "info":"RightTeeArrow[x, y, â¦] displays as x â¦ y â¦ â¦."
  },
  {
    "label":"RightTeeVector",
    "type":"keyword",
    "info":"RightTeeVector[x, y, â¦] displays as x â¥ y â¥ â¦."
  },
  {
    "label":"RightTriangle",
    "type":"keyword",
    "info":"RightTriangle[x, y, â¦] displays as x â\.b3 y â\.b3 â¦."
  },
  {
    "label":"RightTriangleBar",
    "type":"keyword",
    "info":"RightTriangleBar[x, y, â¦] displays as x â§ y â§ â¦."
  },
  {
    "label":"RightTriangleEqual",
    "type":"keyword",
    "info":"RightTriangleEqual[x, y, â¦] displays as x â\\[Micro] y â\\[Micro] â¦."
  },
  {
    "label":"RightUpDownVector",
    "type":"keyword",
    "info":"RightUpDownVector[x, y, â¦] displays as x â¥ y â¥ â¦."
  },
  {
    "label":"RightUpTeeVector",
    "type":"keyword",
    "info":"RightUpTeeVector[x, y, â¦] displays as x â¥ y â¥ â¦."
  },
  {
    "label":"RightUpVector",
    "type":"keyword",
    "info":"RightUpVector[x, y, â¦] displays as x â¾ y â¾ â¦."
  },
  {
    "label":"RightUpVectorBar",
    "type":"keyword",
    "info":"RightUpVectorBar[x, y, â¦] displays as x â¥ y â¥ â¦."
  },
  {
    "label":"RightVector",
    "type":"keyword",
    "info":"RightVector[x, y, â¦] displays as x â y â â¦."
  },
  {
    "label":"RightVectorBar",
    "type":"keyword",
    "info":"RightVectorBar[x, y, â¦] displays as x â¥ y â¥ â¦."
  },
  {
    "label":"RipleyK",
    "type":"keyword",
    "info":"RipleyK[pdata, r] estimates Ripley's K function K(r) at radius r for point data pdata.RipleyK[pproc,"
  },
  {
    "label":"RipleyRassonRegion",
    "type":"keyword",
    "info":"RipleyRassonRegion[pdata] gives an estimated observation based on the point data pdata. "
  },
  {
    "label":"RiskAchievementImportance",
    "type":"keyword",
    "info":"RiskAchievementImportance[rdist, t] gives the risk achievement importances for all components in the"
  },
  {
    "label":"RiskReductionImportance",
    "type":"keyword",
    "info":"RiskReductionImportance[rdist, t] gives the risk reduction importances for all components in the Rel"
  },
  {
    "label":"RobustConvexOptimization",
    "type":"keyword",
    "info":"RobustConvexOptimization[f, ForAll[pars, pcons, vcons], vars] finds values of vars that give the min"
  },
  {
    "label":"RogersTanimotoDissimilarity",
    "type":"keyword",
    "info":"RogersTanimotoDissimilarity[u, v] gives the RogersâTanimoto dissimilarity between Boolean vectors u "
  },
  {
    "label":"RollPitchYawAngles",
    "type":"keyword",
    "info":"RollPitchYawAngles[r] gives the roll-pitch-yaw angles {Î\\[PlusMinus], Î\.b2, Î\.b3} corresponding to the rotation matrix"
  },
  {
    "label":"RollPitchYawMatrix",
    "type":"keyword",
    "info":"RollPitchYawMatrix[{Î\\[PlusMinus], Î\.b2, Î\.b3}] gives the 3D rotation matrix formed by rotating by Î\\[PlusMinus] around the initia"
  },
  {
    "label":"RomanNumeral",
    "type":"keyword",
    "info":"RomanNumeral[n] gives a string corresponding to the Roman numeral form of the integer n."
  },
  {
    "label":"Root",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"RootApproximant",
    "type":"keyword",
    "info":"RootApproximant[x] converts the number x to one of the \"simplest\" algebraic numbers that approximate"
  },
  {
    "label":"RootIntervals",
    "type":"keyword",
    "info":"RootIntervals[{poly , poly , â¦}] gives a list of isolating intervals for the real roots of any of th"
  },
  {
    "label":"RootLocusPlot",
    "type":"keyword",
    "info":"RootLocusPlot[lsys, {k, k   , k   }] generates a root locus plot of a linear time-invariant system l"
  },
  {
    "label":"RootMeanSquare",
    "type":"keyword",
    "info":"RootMeanSquare[list] gives the root mean square of values in list.RootMeanSquare[dist] gives the roo"
  },
  {
    "label":"RootOfUnityQ",
    "type":"keyword",
    "info":"RootOfUnityQ[a] yields True if a is a root of unity, and yields False otherwise."
  },
  {
    "label":"RootReduce",
    "type":"keyword",
    "info":"RootReduce[expr] attempts to reduce expr to a single Root object. "
  },
  {
    "label":"Roots",
    "type":"keyword",
    "info":"Roots[lhs == rhs, var] yields a disjunction of equations which represent the roots of a polynomial e"
  },
  {
    "label":"RootSum",
    "type":"keyword",
    "info":"RootSum[f, form] represents the sum of form[x] for all x that satisfy the polynomial equation f[x] ="
  },
  {
    "label":"Rotate",
    "type":"keyword",
    "info":"Rotate[g, Î¸] represents 2D graphics primitives or any other objects g rotated counterclockwise by Î¸ "
  },
  {
    "label":"RotateLabel",
    "type":"keyword",
    "info":"RotateLabel is an option for graphics and related functions that specifies whether labels on vertica"
  },
  {
    "label":"RotateLeft",
    "type":"keyword",
    "info":"RotateLeft[expr, n] cycles the elements in expr n positions to the left. RotateLeft[expr] cycles one"
  },
  {
    "label":"RotateRight",
    "type":"keyword",
    "info":"RotateRight[expr, n] cycles the elements in expr n positions to the right. RotateRight[expr] cycles "
  },
  {
    "label":"RotationAction",
    "type":"keyword",
    "info":"RotationAction is an option for three-dimensional graphics functions that specifies how to render 3D"
  },
  {
    "label":"RotationBox",
    "type":"keyword",
    "info":"System`RotationBox"
  },
  {
    "label":"RotationBoxOptions",
    "type":"keyword",
    "info":"RotationBoxOptions ï¢ {opt  ï¢ val , opt  ï¢ val , â¦} is an option that specifies settings for Rotation"
  },
  {
    "label":"RotationMatrix",
    "type":"keyword",
    "info":"RotationMatrix[Î¸] gives the 2D rotation matrix that rotates 2D vectors counterclockwise by Î¸ radians"
  },
  {
    "label":"RotationTransform",
    "type":"keyword",
    "info":"RotationTransform[Î¸] gives a TransformationFunction that represents a rotation in 2D by Î¸ radians ab"
  },
  {
    "label":"Round",
    "type":"keyword",
    "info":"Round[x] gives the integer closest to x. Round[x, a] rounds to the nearest multiple of a. \n"
  },
  {
    "label":"RoundImplies",
    "type":"keyword",
    "info":"System`RoundImplies"
  },
  {
    "label":"RoundingRadius",
    "type":"keyword",
    "info":"RoundingRadius is an option for Rectangle, Framed, and related functions that specifies the radius o"
  },
  {
    "label":"Row",
    "type":"keyword",
    "info":"Row[{expr , expr , â¦}] is an object that formats with the expr  arranged in a row, potentially exten"
  },
  {
    "label":"RowAlignments",
    "type":"keyword",
    "info":"RowAlignments is an option for the low-level function GridBox that specifies how entries in each row"
  },
  {
    "label":"RowBackgrounds",
    "type":"keyword",
    "info":"System`RowBackgrounds"
  },
  {
    "label":"RowBox",
    "type":"keyword",
    "info":"RowBox[{box , box , â¦}] is a low-level box construct that represents a row of boxes or strings in a "
  },
  {
    "label":"RowHeights",
    "type":"keyword",
    "info":"System`RowHeights"
  },
  {
    "label":"RowLines",
    "type":"keyword",
    "info":"RowLines is an option for the low-level function GridBox that specifies whether lines should be draw"
  },
  {
    "label":"RowMinHeight",
    "type":"keyword",
    "info":"RowMinHeight is an option for the low-level function GridBox that specifies the minimum total height"
  },
  {
    "label":"RowReduce",
    "type":"keyword",
    "info":"RowReduce[m] gives the rowâreduced form of the matrix m. "
  },
  {
    "label":"RowsEqual",
    "type":"keyword",
    "info":"RowsEqual is an option for the low-level function GridBox that specifies whether all rows in the gri"
  },
  {
    "label":"RowSpacings",
    "type":"keyword",
    "info":"RowSpacings is an option for the low-level function GridBox that specifies the spaces in x heights t"
  },
  {
    "label":"RSolve",
    "type":"keyword",
    "info":"RSolve[eqn, a[n], n] solves a recurrence equation for a[n]. RSolve[{eqn , eqn , â¦}, {a [n], a [n], â¦"
  },
  {
    "label":"RSolveValue",
    "type":"keyword",
    "info":"RSolveValue[eqn, expr, n] gives the value of expr determined by a symbolic solution to the ordinary "
  },
  {
    "label":"RudinShapiro",
    "type":"keyword",
    "info":"                            th\nRudinShapiro[n] gives the nï    term in the RudinâShapiro sequence."
  },
  {
    "label":"RudvalisGroupRu",
    "type":"keyword",
    "info":"RudvalisGroupRu[] represents the sporadic simple Rudvalis group Ru."
  },
  {
    "label":"Rule",
    "type":"keyword",
    "info":"lhs -> rhs or lhs ï¢ rhs represents a rule that transforms lhs to rhs. "
  },
  {
    "label":"RuleCondition",
    "type":"keyword",
    "info":"RuleCondition is an internal symbol."
  },
  {
    "label":"RuleDelayed",
    "type":"keyword",
    "info":"lhs :> rhs or lhs ï rhs represents a rule that transforms lhs to rhs, evaluating rhs only after the "
  },
  {
    "label":"RuleForm",
    "type":"keyword",
    "info":"RuleForm is an internal symbol used for formatting and printing."
  },
  {
    "label":"RulePlot",
    "type":"keyword",
    "info":"RulePlot[sys] generates a plot representing the rule for the computational system sys.RulePlot[sys, "
  },
  {
    "label":"RulerUnits",
    "type":"keyword",
    "info":"RulerUnits is an option for notebooks that specifies the units in the ruler toolbar."
  },
  {
    "label":"RulesTree",
    "type":"keyword",
    "info":"RulesTree[data ï¢ {rule , rule , â¦}] gives a tree whose root contains data and that has children spec"
  },
  {
    "label":"Run",
    "type":"keyword",
    "info":"Run[\"command\"] runs command as an external operating system command, returning the exit code obtaine"
  },
  {
    "label":"RunProcess",
    "type":"keyword",
    "info":"RunProcess[\"command\"] runs the specified external command, returning information on the outcome.\nRun"
  },
  {
    "label":"RunScheduledTask",
    "type":"keyword",
    "info":"RunScheduledTask[expr] schedules and starts a local scheduled task that will repeatedly evaluate exp"
  },
  {
    "label":"RunThrough",
    "type":"keyword",
    "info":"RunThrough[\"command\", expr] executes an external command, giving the printed form of expr as input a"
  },
  {
    "label":"RuntimeAttributes",
    "type":"keyword",
    "info":"RuntimeAttributes is an option for Compile that specifies attributes for the compiled function it cr"
  },
  {
    "label":"RuntimeOptions",
    "type":"keyword",
    "info":"RuntimeOptions is an option for Compile that specifies runtime settings for the compiled function it"
  },
  {
    "label":"RussellRaoDissimilarity",
    "type":"keyword",
    "info":"RussellRaoDissimilarity[u, v] gives the RussellâRao dissimilarity between Boolean vectors u and v."
  },
  {
    "label":"SameQ",
    "type":"keyword",
    "info":"lhs === rhs yields True if the expression lhs is identical to rhs, and yields False otherwise. "
  },
  {
    "label":"SameTest",
    "type":"keyword",
    "info":"SameTest is an option whose setting gives a pairwise comparison function to determine whether expres"
  },
  {
    "label":"SameTestProperties",
    "type":"keyword",
    "info":"SameTestProperties is an option for set operations on entity classes whose setting gives the propert"
  },
  {
    "label":"SampledEntityClass",
    "type":"keyword",
    "info":"SampledEntityClass[class, n] represents an entity class containing n entities from class.SampledEnti"
  },
  {
    "label":"SampleDepth",
    "type":"keyword",
    "info":"SampleDepth is an option for sound primitives that specifies how many bits should be used to encode "
  },
  {
    "label":"SampledSoundFunction",
    "type":"keyword",
    "info":"SampledSoundFunction[f, n, r] is a sound primitive that represents a sound whose amplitude sampled r"
  },
  {
    "label":"SampledSoundList",
    "type":"keyword",
    "info":"SampledSoundList[{a , a , â¦}, r] is a sound primitive that represents a sound whose amplitude has le"
  },
  {
    "label":"SampleRate",
    "type":"keyword",
    "info":"SampleRate is an option that specifies the number of samples per second for sound and signal process"
  },
  {
    "label":"SamplingPeriod",
    "type":"keyword",
    "info":"SamplingPeriod is an option to StateSpaceModel etc. that specifies the sampling period."
  },
  {
    "label":"SARIMAProcess",
    "type":"keyword",
    "info":"SARIMAProcess[{a , â¦, a }, d, {b , â¦, b }, {s, {Î\\[PlusMinus] , â¦, Î\\[PlusMinus] }, Î\.b4, {Î\.b2 , â¦, Î\.b2 }}, v] represents a seasona"
  },
  {
    "label":"SARMAProcess",
    "type":"keyword",
    "info":"SARMAProcess[{a , â¦, a }, {b , â¦, b }, {s, {Î\\[PlusMinus] , â¦, Î\\[PlusMinus] }, {Î\.b2 , â¦, Î\.b2 }}, v] represents a weakly station"
  },
  {
    "label":"SASTriangle",
    "type":"keyword",
    "info":"SASTriangle[a, Î\.b3, b] returns a filled triangle with sides of length a and b and angle Î\.b3 between them"
  },
  {
    "label":"SatelliteData",
    "type":"keyword",
    "info":"SatelliteData[entity, property] gives the value of the specified property for the satellite entity.S"
  },
  {
    "label":"SatisfiabilityCount",
    "type":"keyword",
    "info":"SatisfiabilityCount[bf] counts the number of possible combinations of variable values that yield Tru"
  },
  {
    "label":"SatisfiabilityInstances",
    "type":"keyword",
    "info":"SatisfiabilityInstances[bf] attempts to find a choice of variables that makes the Boolean function b"
  },
  {
    "label":"SatisfiableQ",
    "type":"keyword",
    "info":"SatisfiableQ[bf] gives True if a combination of values of variables exists that makes the Boolean fu"
  },
  {
    "label":"Saturday",
    "type":"keyword",
    "info":"Saturday is a day of the week."
  },
  {
    "label":"Save",
    "type":"keyword",
    "info":"Save[\"filename\", symbol] appends definitions associated with the specified symbol to a file. Save[\"f"
  },
  {
    "label":"Saveable",
    "type":"keyword",
    "info":"Saveable is an option for notebooks that specifies whether a notebook can be saved."
  },
  {
    "label":"SaveAutoDelete",
    "type":"keyword",
    "info":"System`SaveAutoDelete"
  },
  {
    "label":"SaveConnection",
    "type":"keyword",
    "info":"SaveConnection is an option for ServiceConnect that determines whether the connection should be save"
  },
  {
    "label":"SaveDefinitions",
    "type":"keyword",
    "info":"SaveDefinitions is an option to Manipulate and related functions that specifies whether current defi"
  },
  {
    "label":"SavitzkyGolayMatrix",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"SawtoothWave",
    "type":"keyword",
    "info":"SawtoothWave[x] gives a sawtooth wave that varies from 0 to 1 with unit period.SawtoothWave[{min, ma"
  },
  {
    "label":"Scale",
    "type":"keyword",
    "info":"Scale[g, s] represents graphics primitives g scaled by a factor s. Scale[g, s, {x, y, â¦}] scales wit"
  },
  {
    "label":"Scaled",
    "type":"keyword",
    "info":"Scaled[{x, y, â¦}] gives the position of a graphical object in terms of coordinates scaled to run fro"
  },
  {
    "label":"ScaleDivisions",
    "type":"keyword",
    "info":"ScaleDivisions is an option for gauge functions that specifies how many tick marks should be drawn o"
  },
  {
    "label":"ScaledMousePosition",
    "type":"keyword",
    "info":"System`ScaledMousePosition"
  },
  {
    "label":"ScaleOrigin",
    "type":"keyword",
    "info":"ScaleOrigin is an option for gauge functions that describes how to position the scale on the gauge."
  },
  {
    "label":"ScalePadding",
    "type":"keyword",
    "info":"ScalePadding is an option for gauge functions that specifies how much space to leave around the scal"
  },
  {
    "label":"ScaleRanges",
    "type":"keyword",
    "info":"ScaleRanges is an option for gauge functions that describes how to draw sections of the scale."
  },
  {
    "label":"ScaleRangeStyle",
    "type":"keyword",
    "info":"ScaleRangeStyle is an option for gauge functions to describe how to style different sections of the "
  },
  {
    "label":"ScalingFunctions",
    "type":"keyword",
    "info":"ScalingFunctions is an option for ListPlot, BarChart, Histogram, and other plotting functions that s"
  },
  {
    "label":"ScalingMatrix",
    "type":"keyword",
    "info":"ScalingMatrix[{s , s , â¦}] gives the matrix corresponding to scaling by a factor s  along each coord"
  },
  {
    "label":"ScalingTransform",
    "type":"keyword",
    "info":"ScalingTransform[{s , s , â¦}] gives a TransformationFunction that represents scaling by a factor s  "
  },
  {
    "label":"Scan",
    "type":"keyword",
    "info":"Scan[f, expr] evaluates f applied to each element of expr in turn. Scan[f, expr, levelspec] applies "
  },
  {
    "label":"ScheduledTask",
    "type":"keyword",
    "info":"ScheduledTask[expr, timespec] represents a scheduled task to be evaluated on the schedule defined by"
  },
  {
    "label":"ScheduledTaskActiveQ",
    "type":"keyword",
    "info":"ScheduledTaskActiveQ[obj] yields True if obj represents an active task, and False otherwise."
  },
  {
    "label":"ScheduledTaskInformation",
    "type":"keyword",
    "info":"ScheduledTaskInformation[CloudObject] returns information about a task.\nScheduledTaskInformation[Clo"
  },
  {
    "label":"ScheduledTaskInformationData",
    "type":"keyword",
    "info":"System`ScheduledTaskInformationData"
  },
  {
    "label":"ScheduledTaskObject",
    "type":"keyword",
    "info":"ScheduledTaskObject[id, expr, spec, â¦] is a task object specifying future evaluation of expr accordi"
  },
  {
    "label":"ScheduledTasks",
    "type":"keyword",
    "info":"ScheduledTasks[] returns a list of ScheduledTaskObject and CloudObject expressions that represent cu"
  },
  {
    "label":"SchurDecomposition",
    "type":"keyword",
    "info":"SchurDecomposition[m] yields the Schur decomposition for a numerical matrix m, given as a list {q, t"
  },
  {
    "label":"ScientificForm",
    "type":"keyword",
    "info":"ScientificForm[expr] prints with all real numbers in expr given in scientific notation. ScientificFo"
  },
  {
    "label":"ScientificNotationThreshold",
    "type":"keyword",
    "info":"ScientificNotationThreshold is an option for NumberForm and related functions that specifies the thr"
  },
  {
    "label":"ScorerGi",
    "type":"keyword",
    "info":"ScorerGi[z] gives the Scorer function Gi(z)."
  },
  {
    "label":"ScorerGiPrime",
    "type":"keyword",
    "info":"                                                               â\.b2\nScorerGiPrime[z] gives the derivati"
  },
  {
    "label":"ScorerHi",
    "type":"keyword",
    "info":"ScorerHi[z] gives the Scorer function Hi(z)."
  },
  {
    "label":"ScorerHiPrime",
    "type":"keyword",
    "info":"                                                               â\.b2\nScorerHiPrime[z] gives the derivati"
  },
  {
    "label":"ScreenRectangle",
    "type":"keyword",
    "info":"ScreenRectangle is a global option that specifies the position of the primary screen by giving the c"
  },
  {
    "label":"ScreenStyleEnvironment",
    "type":"keyword",
    "info":"ScreenStyleEnvironment is an option for notebooks that specifies the style environment to be used in"
  },
  {
    "label":"ScriptBaselineShifts",
    "type":"keyword",
    "info":"ScriptBaselineShifts is an option for Style that specifies the minimum distance in xâheights to shif"
  },
  {
    "label":"ScriptForm",
    "type":"keyword",
    "info":"System`ScriptForm"
  },
  {
    "label":"ScriptLevel",
    "type":"keyword",
    "info":"ScriptLevel is an option for selections that is used in determining the font size of modifiers such "
  },
  {
    "label":"ScriptMinSize",
    "type":"keyword",
    "info":"ScriptMinSize is an option for Style which specifies the minimum font size to use in rendering subsc"
  },
  {
    "label":"ScriptRules",
    "type":"keyword",
    "info":"System`ScriptRules"
  },
  {
    "label":"ScriptSizeMultipliers",
    "type":"keyword",
    "info":"ScriptSizeMultipliers is an option for Style that specifies how much smaller to render each successi"
  },
  {
    "label":"Scrollbars",
    "type":"keyword",
    "info":"Scrollbars is an option for Pane that specifies whether scrollbars should be displayed."
  },
  {
    "label":"ScrollingOptions",
    "type":"keyword",
    "info":"ScrollingOptions is an option for notebooks that specifies settings for scrolling."
  },
  {
    "label":"ScrollPosition",
    "type":"keyword",
    "info":"ScrollPosition is an option for Pane that specifies the scroll position of the contents of the pane."
  },
  {
    "label":"SearchAdjustment",
    "type":"keyword",
    "info":"SearchAdjustment[query, w] represents a component of a search query that is to be treated as having "
  },
  {
    "label":"SearchIndexObject",
    "type":"keyword",
    "info":"SearchIndexObject[loc] represents a search index object, as created by CreateSearchIndex.SearchIndex"
  },
  {
    "label":"SearchIndices",
    "type":"keyword",
    "info":"SearchIndices[] returns a list with all the locally stored instances of SearchIndexObject."
  },
  {
    "label":"SearchQueryString",
    "type":"keyword",
    "info":"SearchQueryString[\"query\"] represents a search engine-style query in TextSearch and related function"
  },
  {
    "label":"SearchResultObject",
    "type":"keyword",
    "info":"SearchResultObject[â¦] represents a result from TextSearch[â¦] and related functions."
  },
  {
    "label":"Sec",
    "type":"keyword",
    "info":"Sec[z] gives the secant of z. "
  },
  {
    "label":"Sech",
    "type":"keyword",
    "info":"Sech[z] gives the hyperbolic secant of z. "
  },
  {
    "label":"SechDistribution",
    "type":"keyword",
    "info":"SechDistribution[Î¼, Ï] represents the hyperbolic secant distribution with location parameter Î¼ and s"
  },
  {
    "label":"SecondOrderConeOptimization",
    "type":"keyword",
    "info":"SecondOrderConeOptimization[f, cons, vars] finds values of variables vars that minimize the linear o"
  },
  {
    "label":"SectionGrouping",
    "type":"keyword",
    "info":"System`SectionGrouping"
  },
  {
    "label":"SectorChart",
    "type":"keyword",
    "info":"SectorChart[{{x , y }, {x , y }, â¦}] makes a sector chart with sector angles proportional to x  and "
  },
  {
    "label":"SectorChart3D",
    "type":"keyword",
    "info":"SectorChart3D[{{x , y , z }, {x , y , z }, â¦}] makes a 3D sector chart with sector angle proportiona"
  },
  {
    "label":"SectorOrigin",
    "type":"keyword",
    "info":"SectorOrigin is an option to PieChart and related functions that specifies where sectors should star"
  },
  {
    "label":"SectorSpacing",
    "type":"keyword",
    "info":"SectorSpacing is an option to PieChart and related functions that specifies radial spacing of sector"
  },
  {
    "label":"SecuredAuthenticationKey",
    "type":"keyword",
    "info":"SecuredAuthenticationKey[assoc] represents a secured authentication key with credentials and detail"
  },
  {
    "label":"SecuredAuthenticationKeys",
    "type":"keyword",
    "info":"SecuredAuthenticationKeys[] retrieves a list of all instances of SecuredAuthenticationKey owned by t"
  },
  {
    "label":"SecurityCertificate",
    "type":"keyword",
    "info":"SecurityCertificate[assoc] represents the security certificate issued for a public key."
  },
  {
    "label":"SeedRandom",
    "type":"keyword",
    "info":"SeedRandom[s] resets the pseudorandom generator, using s as a seed. SeedRandom[] resets the generato"
  },
  {
    "label":"Select",
    "type":"keyword",
    "info":"Select[list, crit] picks out all elements e  of list for which crit[e ] is True. Select[list, crit, "
  },
  {
    "label":"Selectable",
    "type":"keyword",
    "info":"Selectable is an option for displayed objects, cells, and notebooks that specifies whether their con"
  },
  {
    "label":"SelectComponents",
    "type":"keyword",
    "info":"SelectComponents[{image, lmat}, crit] selects components of image indicated by the label matrix lmat"
  },
  {
    "label":"SelectedCells",
    "type":"keyword",
    "info":"SelectedCells[notebook] returns a list of CellObject expressions corresponding to the currently sele"
  },
  {
    "label":"SelectedNotebook",
    "type":"keyword",
    "info":"SelectedNotebook[] gives the currently selected notebook in the front end. "
  },
  {
    "label":"SelectFirst",
    "type":"keyword",
    "info":"SelectFirst[{e , e , â¦}, crit] gives the first e  for which crit[e ] is True, or Missing[\"NotFound\"]"
  },
  {
    "label":"Selection",
    "type":"keyword",
    "info":"System`Selection"
  },
  {
    "label":"SelectionAnimate",
    "type":"keyword",
    "info":"SelectionAnimate[notebook] animates graphics in the current selection in a notebook. SelectionAnimat"
  },
  {
    "label":"SelectionCell",
    "type":"keyword",
    "info":"System`SelectionCell"
  },
  {
    "label":"SelectionCellCreateCell",
    "type":"keyword",
    "info":"System`SelectionCellCreateCell"
  },
  {
    "label":"SelectionCellDefaultStyle",
    "type":"keyword",
    "info":"System`SelectionCellDefaultStyle"
  },
  {
    "label":"SelectionCellParentStyle",
    "type":"keyword",
    "info":"System`SelectionCellParentStyle"
  },
  {
    "label":"SelectionCreateCell",
    "type":"keyword",
    "info":"SelectionCreateCell[notebook] copies the contents of the current selection in a notebook into a new "
  },
  {
    "label":"SelectionDebuggerTag",
    "type":"keyword",
    "info":"System`SelectionDebuggerTag"
  },
  {
    "label":"SelectionDuplicateCell",
    "type":"keyword",
    "info":"System`SelectionDuplicateCell"
  },
  {
    "label":"SelectionEvaluate",
    "type":"keyword",
    "info":"SelectionEvaluate[notebook] replaces the current selection in a notebook with the result obtained by"
  },
  {
    "label":"SelectionEvaluateCreateCell",
    "type":"keyword",
    "info":"SelectionEvaluateCreateCell[notebook] takes the current selection in a notebook and creates a new ce"
  },
  {
    "label":"SelectionMove",
    "type":"keyword",
    "info":"SelectionMove[obj, dir, unit] moves the current selection in an open notebook in the front end in th"
  },
  {
    "label":"SelectionPlaceholder",
    "type":"keyword",
    "info":"System`SelectionPlaceholder"
  },
  {
    "label":"SelectionSetStyle",
    "type":"keyword",
    "info":"System`SelectionSetStyle"
  },
  {
    "label":"SelectWithContents",
    "type":"keyword",
    "info":"System`SelectWithContents"
  },
  {
    "label":"SelfLoops",
    "type":"keyword",
    "info":"System`SelfLoops"
  },
  {
    "label":"SelfLoopStyle",
    "type":"keyword",
    "info":"SelfLoopStyle is an option for GraphPlot and related functions that specifies how to draw self-loops"
  },
  {
    "label":"SemanticImport",
    "type":"keyword",
    "info":"SemanticImport[file] attempts to import a file semantically to give a Dataset object.SemanticImport["
  },
  {
    "label":"SemanticImportString",
    "type":"keyword",
    "info":"SemanticImportString[\"string\"] attempts to import a string semantically to give a Dataset object.Sem"
  },
  {
    "label":"SemanticInterpretation",
    "type":"keyword",
    "info":"SemanticInterpretation[\"string\"] attempts to give the best semantic interpretation of the specified "
  },
  {
    "label":"SemialgebraicComponentInstances",
    "type":"keyword",
    "info":"SemialgebraicComponentInstances[ineqs, {x , x , â¦}] gives at least one sample point in each connecte"
  },
  {
    "label":"SemidefiniteOptimization",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"SendMail",
    "type":"keyword",
    "info":"SendMail[body] sends mail consisting of body to the address specified by $CloudUserID.SendMail[{\"sub"
  },
  {
    "label":"SendMessage",
    "type":"keyword",
    "info":"SendMessage[channel, message] sends a message to the specified channel.SendMessage[channel ï¢ dest, m"
  },
  {
    "label":"Sequence",
    "type":"keyword",
    "info":"Sequence[expr , expr , â¦] represents a sequence of arguments to be spliced automatically into any fu"
  },
  {
    "label":"SequenceAlignment",
    "type":"keyword",
    "info":"SequenceAlignment[s , s ] finds an optimal alignment of sequences of elements in the strings or list"
  },
  {
    "label":"SequenceAttentionLayer",
    "type":"keyword",
    "info":"SequenceAttentionLayer[] is equivalent to AttentionLayer[] with a single \"Input\" port instead of por"
  },
  {
    "label":"SequenceCases",
    "type":"keyword",
    "info":"SequenceCases[list, patt] gives a list of the sublists in list that match the sequence pattern patt."
  },
  {
    "label":"SequenceCount",
    "type":"keyword",
    "info":"SequenceCount[list, sub] gives a count of the number of times sub appears as a sublist of list.Seque"
  },
  {
    "label":"SequenceFold",
    "type":"keyword",
    "info":"SequenceFold[f, {x , â¦, x }, {a , a , â¦}] gives the last element of SequenceFoldList[f, {x , â¦, x },"
  },
  {
    "label":"SequenceFoldList",
    "type":"keyword",
    "info":"SequenceFoldList[f, {x , â¦, x }, {a , a , â¦}] gives {x , â¦, x , f[x , â¦, x , a ], f[x , â¦, x , f[x ,"
  },
  {
    "label":"SequenceForm",
    "type":"keyword",
    "info":"SequenceForm[expr , expr , â¦] prints as the textual concatenation of the printed forms of the expr ."
  },
  {
    "label":"SequenceHold",
    "type":"keyword",
    "info":"SequenceHold is an attribute that specifies that Sequence objects appearing in the arguments of a fu"
  },
  {
    "label":"SequenceIndicesLayer",
    "type":"keyword",
    "info":"SequenceIndicesLayer[] represents a net layer that produces a list of indices for an input sequence."
  },
  {
    "label":"SequenceLastLayer",
    "type":"keyword",
    "info":"SequenceLastLayer[] represents a net that takes a sequence of inputs and returns the last element of"
  },
  {
    "label":"SequenceMostLayer",
    "type":"keyword",
    "info":"SequenceMostLayer[] represents a net that takes a sequence of inputs and removes its last element."
  },
  {
    "label":"SequencePosition",
    "type":"keyword",
    "info":"SequencePosition[list, sublist] gives a list of the starting and ending positions at which sublist a"
  },
  {
    "label":"SequencePredict",
    "type":"keyword",
    "info":"SequencePredict[{seq , seq , â¦}] generates a SequencePredictorFunction[â¦] based on the sequences giv"
  },
  {
    "label":"SequencePredictorFunction",
    "type":"keyword",
    "info":"SequencePredictorFunction[â¦] represents a function generated by SequencePredict that predicts the ne"
  },
  {
    "label":"SequenceReplace",
    "type":"keyword",
    "info":"SequenceReplace[list, rules] replaces sequences in list according to the specified rule or list of r"
  },
  {
    "label":"SequenceRestLayer",
    "type":"keyword",
    "info":"SequenceRestLayer[] represents a net that takes a sequence of inputs and removes its first element."
  },
  {
    "label":"SequenceReverseLayer",
    "type":"keyword",
    "info":"SequenceReverseLayer[] represents a net that reverses the order of an input sequence."
  },
  {
    "label":"SequenceSplit",
    "type":"keyword",
    "info":"SequenceSplit[list, patt] splits list into sublists separated by sequences that match the sequence p"
  },
  {
    "label":"Series",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"SeriesCoefficient",
    "type":"keyword",
    "info":"                                                             th                                     "
  },
  {
    "label":"SeriesData",
    "type":"keyword",
    "info":"SeriesData[x, x , {a , a , â¦}, n   , n   , den] represents a power series in the variable x about th"
  },
  {
    "label":"SeriesTermGoal",
    "type":"keyword",
    "info":"SeriesTermGoal is an option for Asymptotic, DiscreteAsymptotic and similar functions that specifies "
  },
  {
    "label":"ServiceConnect",
    "type":"keyword",
    "info":"ServiceConnect[\"service\"] creates a connection to an external service.ServiceConnect[\"service\", id] "
  },
  {
    "label":"ServiceDisconnect",
    "type":"keyword",
    "info":"ServiceDisconnect[service] disconnects from an external service specified by a ServiceObject."
  },
  {
    "label":"ServiceExecute",
    "type":"keyword",
    "info":"ServiceExecute[service, \"req\"] executes \"req\" on an external service.ServiceExecute[service, \"req\", "
  },
  {
    "label":"ServiceObject",
    "type":"keyword",
    "info":"ServiceObject[\"service\", â¦] represents an open connection to an external service."
  },
  {
    "label":"ServiceRequest",
    "type":"keyword",
    "info":"ServiceRequest[service, \"req\"] represents a service request built from service, which might be a con"
  },
  {
    "label":"ServiceResponse",
    "type":"keyword",
    "info":"System`ServiceResponse"
  },
  {
    "label":"ServiceSubmit",
    "type":"keyword",
    "info":"ServiceSubmit[ServiceRequest[assoc]] submits a request to be executed by an external service specifi"
  },
  {
    "label":"SessionSubmit",
    "type":"keyword",
    "info":"SessionSubmit[expr] submits an asynchronous task to evaluate expr in the current session.SessionSubm"
  },
  {
    "label":"SessionTime",
    "type":"keyword",
    "info":"SessionTime[] gives the total number of seconds of real time that have elapsed since the beginning o"
  },
  {
    "label":"Set",
    "type":"keyword",
    "info":"lhs = rhs evaluates rhs and assigns the result to be the value of lhs. From then on, lhs is replaced"
  },
  {
    "label":"SetAccuracy",
    "type":"keyword",
    "info":"SetAccuracy[expr, a] yields a version of expr in which all numbers have been set to have accuracy a."
  },
  {
    "label":"SetAlphaChannel",
    "type":"keyword",
    "info":"SetAlphaChannel[color] adds full opacity to color.SetAlphaChannel[color, a] adds opacity a to color."
  },
  {
    "label":"SetAttributes",
    "type":"keyword",
    "info":"SetAttributes[symbol, attr] adds attr to the list of attributes of the symbol symbol. SetAttributes["
  },
  {
    "label":"Setbacks",
    "type":"keyword",
    "info":"System`Setbacks"
  },
  {
    "label":"SetBoxFormNamesPacket",
    "type":"keyword",
    "info":"System`SetBoxFormNamesPacket"
  },
  {
    "label":"SetCloudDirectory",
    "type":"keyword",
    "info":"SetCloudDirectory[dir] sets the current working directory used for cloud objects to dir.SetCloudDire"
  },
  {
    "label":"SetCookies",
    "type":"keyword",
    "info":"SetCookies[assoc] sets cookies with attributes specified by the association assoc, to be used by fun"
  },
  {
    "label":"SetDelayed",
    "type":"keyword",
    "info":"lhs := rhs assigns rhs to be the delayed value of lhs. rhs is maintained in an unevaluated form. Whe"
  },
  {
    "label":"SetDirectory",
    "type":"keyword",
    "info":"SetDirectory[\"dir\"] sets the current working directory to dir. SetDirectory[] sets the current worki"
  },
  {
    "label":"SetEnvironment",
    "type":"keyword",
    "info":"SetEnvironment[\"var\" ï¢ value] sets the value of an operating system environment variable.SetEnvironm"
  },
  {
    "label":"SetEvaluationNotebook",
    "type":"keyword",
    "info":"System`SetEvaluationNotebook"
  },
  {
    "label":"SetFileDate",
    "type":"keyword",
    "info":"SetFileDate[\"file\"] sets the modification and access dates for a file to be the current date. "
  },
  {
    "label":"SetFileFormatProperties",
    "type":"keyword",
    "info":"SetFileFormatProperties[\"fmt\", \"prop\" ï¢ val] sets the value of a property \"prop\" for the specified f"
  },
  {
    "label":"SetFileLoadingContext",
    "type":"keyword",
    "info":"System`SetFileLoadingContext"
  },
  {
    "label":"SetNotebookStatusLine",
    "type":"keyword",
    "info":"System`SetNotebookStatusLine"
  },
  {
    "label":"SetOptions",
    "type":"keyword",
    "info":"SetOptions[s, name  ï¢ value , name  ï¢ value , â¦] sets the specified default options for a symbol s. "
  },
  {
    "label":"SetOptionsPacket",
    "type":"keyword",
    "info":"System`SetOptionsPacket"
  },
  {
    "label":"SetPermissions",
    "type":"keyword",
    "info":"SetPermissions[obj, \"pstring\"] sets permissions for the cloud object obj to be as specified by the s"
  },
  {
    "label":"SetPrecision",
    "type":"keyword",
    "info":"SetPrecision[expr, p] yields a version of expr in which all numbers have been set to have precision "
  },
  {
    "label":"SetProperty",
    "type":"keyword",
    "info":"SetProperty[{obj, itemspec}, name ï¢ value] sets the property name ï¢ value for itemspec in obj."
  },
  {
    "label":"SetSecuredAuthenticationKey",
    "type":"keyword",
    "info":"System`SetSecuredAuthenticationKey"
  },
  {
    "label":"SetSelectedNotebook",
    "type":"keyword",
    "info":"SetSelectedNotebook[obj] makes the notebook corresponding to obj be the currently selected one in th"
  },
  {
    "label":"SetSharedFunction",
    "type":"keyword",
    "info":"SetSharedFunction[f , f , â¦] declares the symbols f  as shared functions whose downvalues are synchr"
  },
  {
    "label":"SetSharedVariable",
    "type":"keyword",
    "info":"SetSharedVariable[s , s , â¦] declares the symbols s  as shared variables whose values are synchroniz"
  },
  {
    "label":"SetSpeechParametersPacket",
    "type":"keyword",
    "info":"System`SetSpeechParametersPacket"
  },
  {
    "label":"SetStreamPosition",
    "type":"keyword",
    "info":"SetStreamPosition[stream, n] sets the current point in an open stream. "
  },
  {
    "label":"SetSystemModel",
    "type":"keyword",
    "info":"SetSystemModel[model, spec] changes model parameters, initializations or other properties in place."
  },
  {
    "label":"SetSystemOptions",
    "type":"keyword",
    "info":"SetSystemOptions[\"name\" ï¢ value] resets the value for the internal system option with the specified "
  },
  {
    "label":"Setter",
    "type":"keyword",
    "info":"Setter[x, val] represents a setter button whose setting x is set to val when the button is clicked. "
  },
  {
    "label":"SetterBar",
    "type":"keyword",
    "info":"SetterBar[x, {val , val , â¦}] represents a setter bar with setting x and with setter buttons for val"
  },
  {
    "label":"SetterBox",
    "type":"keyword",
    "info":"System`SetterBox"
  },
  {
    "label":"SetterBoxOptions",
    "type":"keyword",
    "info":"SetterBoxOptions ï¢ {opt  ï¢ val , opt  ï¢ val , â¦} is an option that specifies settings for SetterBox "
  },
  {
    "label":"Setting",
    "type":"keyword",
    "info":"Setting[expr] replaces forms and control objects such as sliders or popup menus in expr by their set"
  },
  {
    "label":"SetUsers",
    "type":"keyword",
    "info":"SetUsers[group, {user , â¦}] sets the members of the permissions group group to be {user , â¦}.\n      "
  },
  {
    "label":"SetValue",
    "type":"keyword",
    "info":"System`SetValue"
  },
  {
    "label":"Shading",
    "type":"keyword",
    "info":"Shading is an option for SurfaceGraphics that specifies whether the surfaces should be shaded. "
  },
  {
    "label":"Shallow",
    "type":"keyword",
    "info":"Shallow[expr] prints as a shallow form of expr. Shallow[expr, depth] prints with all parts of expr b"
  },
  {
    "label":"ShannonWavelet",
    "type":"keyword",
    "info":"ShannonWavelet[] represents the Shannon wavelet evaluated on the equally spaced interval {-10, 10}. "
  },
  {
    "label":"ShapiroWilkTest",
    "type":"keyword",
    "info":"ShapiroWilkTest[data] tests whether data is normally distributed using the ShapiroâWilk test.Shapiro"
  },
  {
    "label":"Share",
    "type":"keyword",
    "info":"Share[expr] changes the way expr is stored internally, to try and minimize the amount of memory used"
  },
  {
    "label":"SharingList",
    "type":"keyword",
    "info":"SharingList is an option for CloudObject and related constructs that specifies with whom the object "
  },
  {
    "label":"Sharpen",
    "type":"keyword",
    "info":"Sharpen[image] gives a sharpened version of image.Sharpen[image, r] gives a version of image sharpen"
  },
  {
    "label":"ShearingMatrix",
    "type":"keyword",
    "info":"ShearingMatrix[Î¸, v, n] gives the matrix corresponding to shearing by Î¸ radians along the direction "
  },
  {
    "label":"ShearingTransform",
    "type":"keyword",
    "info":"ShearingTransform[Î¸, v, n] gives a TransformationFunction that represents a shear by Î¸ radians along"
  },
  {
    "label":"ShellRegion",
    "type":"keyword",
    "info":"ShellRegion[reg] gives a solid shell of a 3D region reg.ShellRegion[reg, t] gives a solid shell of r"
  },
  {
    "label":"ShenCastanMatrix",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"ShiftedGompertzDistribution",
    "type":"keyword",
    "info":"ShiftedGompertzDistribution[Î», Î¾] represents a shifted Gompertz distribution with scale parameter Î» "
  },
  {
    "label":"ShiftRegisterSequence",
    "type":"keyword",
    "info":"ShiftRegisterSequence[n] gives a complete maximum-length sequence for a size n linear-feedback shift"
  },
  {
    "label":"Short",
    "type":"keyword",
    "info":"Short[expr] prints as a short form of expr, less than about one line long. Short[expr, n] prints as "
  },
  {
    "label":"ShortDownArrow",
    "type":"keyword",
    "info":"ShortDownArrow[x, y, â¦] displays as x ï« y ï« â¦."
  },
  {
    "label":"Shortest",
    "type":"keyword",
    "info":"Shortest[p] is a pattern object that matches the shortest sequence consistent with the pattern p. "
  },
  {
    "label":"ShortestMatch",
    "type":"keyword",
    "info":"ShortestMatch[p] is a string pattern object matching the shortest sequence of characters consistent "
  },
  {
    "label":"ShortestPathFunction",
    "type":"keyword",
    "info":"ShortestPathFunction[type, data] represents a function that gives the shortest path from a source ve"
  },
  {
    "label":"ShortLeftArrow",
    "type":"keyword",
    "info":"ShortLeftArrow[x, y, â¦] displays as x ï¦ y ï¦ â¦."
  },
  {
    "label":"ShortRightArrow",
    "type":"keyword",
    "info":"ShortRightArrow[x, y, â¦] displays as x ï¥ y ï¥ â¦."
  },
  {
    "label":"ShortTimeFourier",
    "type":"keyword",
    "info":"ShortTimeFourier[data] returns the short-time Fourier transform (STFT) of data as a ShortTimeFourier"
  },
  {
    "label":"ShortTimeFourierData",
    "type":"keyword",
    "info":"ShortTimeFourierData[assoc] represents the result and properties of a short-time Fourier transform ("
  },
  {
    "label":"ShortUpArrow",
    "type":"keyword",
    "info":"ShortUpArrow[x, y, â¦] displays as x ïª y ïª â¦."
  },
  {
    "label":"Show",
    "type":"keyword",
    "info":"Show[graphics, options] shows graphics with the specified options added. Show[g , g , â¦] shows sever"
  },
  {
    "label":"ShowAutoConvert",
    "type":"keyword",
    "info":"System`ShowAutoConvert"
  },
  {
    "label":"ShowAutoSpellCheck",
    "type":"keyword",
    "info":"ShowAutoSpellCheck is an option for Cell that specifies whether to highlight misspelled words."
  },
  {
    "label":"ShowAutoStyles",
    "type":"keyword",
    "info":"ShowAutoStyles is an option for Cell that specifies whether styles that are specified to be automati"
  },
  {
    "label":"ShowCellBracket",
    "type":"keyword",
    "info":"ShowCellBracket is an option for Cell that specifies whether to display the bracket that indicates t"
  },
  {
    "label":"ShowCellLabel",
    "type":"keyword",
    "info":"ShowCellLabel is an option for Cell that specifies whether to display the label for a cell. "
  },
  {
    "label":"ShowCellTags",
    "type":"keyword",
    "info":"ShowCellTags is an option for Cell that specifies whether to display tags for a cell. "
  },
  {
    "label":"ShowClosedCellArea",
    "type":"keyword",
    "info":"ShowClosedCellArea is an option for cells that specifies whether a rectangular bar is displayed next"
  },
  {
    "label":"ShowCodeAssist",
    "type":"keyword",
    "info":"System`ShowCodeAssist"
  },
  {
    "label":"ShowContents",
    "type":"keyword",
    "info":"ShowContents is an option for selections that specifies whether an object represented by a StyleBox "
  },
  {
    "label":"ShowControls",
    "type":"keyword",
    "info":"System`ShowControls"
  },
  {
    "label":"ShowCursorTracker",
    "type":"keyword",
    "info":"ShowCursorTracker is an option for Cell that specifies whether an elliptical spot should appear mome"
  },
  {
    "label":"ShowGroupOpenCloseIcon",
    "type":"keyword",
    "info":"ShowGroupOpenCloseIcon is an option for cells that specifies whether a triangular icon is displayed "
  },
  {
    "label":"ShowGroupOpener",
    "type":"keyword",
    "info":"ShowGroupOpener is an option for cells that specifies whether an opener icon is displayed next to th"
  },
  {
    "label":"ShowInvisibleCharacters",
    "type":"keyword",
    "info":"System`ShowInvisibleCharacters"
  },
  {
    "label":"ShowPageBreaks",
    "type":"keyword",
    "info":"ShowPageBreaks is a notebook option that specifies whether to indicate in the onâscreen display of a"
  },
  {
    "label":"ShowPredictiveInterface",
    "type":"keyword",
    "info":"System`ShowPredictiveInterface"
  },
  {
    "label":"ShowSelection",
    "type":"keyword",
    "info":"ShowSelection is an option to Notebook, Cell, and Style that specifies whether to show the current s"
  },
  {
    "label":"ShowShortBoxForm",
    "type":"keyword",
    "info":"ShowShortBoxForm is an option for cells that specifies whether box expressions, which are used to re"
  },
  {
    "label":"ShowSpecialCharacters",
    "type":"keyword",
    "info":"ShowSpecialCharacters is an option for Style and Cell that specifies whether to replace \\\[Name], \\:n"
  },
  {
    "label":"ShowStringCharacters",
    "type":"keyword",
    "info":"ShowStringCharacters is an option for Cell that specifies whether to display \" when a string is ente"
  },
  {
    "label":"ShowSyntaxStyles",
    "type":"keyword",
    "info":"System`ShowSyntaxStyles"
  },
  {
    "label":"ShrinkingDelay",
    "type":"keyword",
    "info":"ShrinkingDelay is an option for dynamic objects that specifies how long to delay before shrinking th"
  },
  {
    "label":"ShrinkWrapBoundingBox",
    "type":"keyword",
    "info":"System`ShrinkWrapBoundingBox"
  },
  {
    "label":"SiderealTime",
    "type":"keyword",
    "info":"SiderealTime[] gives the right ascension of the local meridian for the current date and location.Sid"
  },
  {
    "label":"SiegelTheta",
    "type":"keyword",
    "info":"SiegelTheta[Î©, s] gives the Siegel theta function Î (Î©, s) with Riemann modular matrix Î© and vector "
  },
  {
    "label":"SiegelTukeyTest",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"SierpinskiCurve",
    "type":"keyword",
    "info":"                                                              th\nSierpinskiCurve[n] gives the line s"
  },
  {
    "label":"SierpinskiMesh",
    "type":"keyword",
    "info":"                                                         th                                         "
  },
  {
    "label":"Sign",
    "type":"keyword",
    "info":"Sign[x] gives -1, 0, or 1 depending on whether x is negative, zero, or positive. "
  },
  {
    "label":"Signature",
    "type":"keyword",
    "info":"Signature[list] gives the signature of the permutation needed to place the elements of list in canon"
  },
  {
    "label":"SignedRankTest",
    "type":"keyword",
    "info":"SignedRankTest[data] tests whether the median of data is zero. SignedRankTest[{data , data }] tests "
  },
  {
    "label":"SignedRegionDistance",
    "type":"keyword",
    "info":"SignedRegionDistance[reg, p] gives the minimum distance from the point p to the region reg if p is o"
  },
  {
    "label":"SignificanceLevel",
    "type":"keyword",
    "info":"SignificanceLevel is an option to VarianceTest and similar functions that controls cutoffs for diagn"
  },
  {
    "label":"SignPadding",
    "type":"keyword",
    "info":"SignPadding is an option for NumberForm and related functions that specifies whether padding should "
  },
  {
    "label":"SignTest",
    "type":"keyword",
    "info":"SignTest[data] tests whether the median of data is zero. SignTest[{data , data }] tests whether the "
  },
  {
    "label":"SimilarityRules",
    "type":"keyword",
    "info":"SimilarityRules is an option for functions such as SequenceAlignment that gives a list of rules for "
  },
  {
    "label":"SimpleGraph",
    "type":"keyword",
    "info":"SimpleGraph[g] gives the underlying simple graph from the graph g.SimpleGraph[{v ï¢ w, â¦}] uses rules"
  },
  {
    "label":"SimpleGraphQ",
    "type":"keyword",
    "info":"SimpleGraphQ[g] yields True if the graph g is a simple graph and False otherwise."
  },
  {
    "label":"SimplePolygonQ",
    "type":"keyword",
    "info":"SimplePolygonQ[poly] gives True if the polygon poly is simple and False otherwise."
  },
  {
    "label":"SimplePolyhedronQ",
    "type":"keyword",
    "info":"SimplePolyhedronQ[poly] gives True if the polyhedron poly is simple and False otherwise."
  },
  {
    "label":"Simplex",
    "type":"keyword",
    "info":"Simplex[{p , â¦, p }] represents the simplex spanned by points p .\n          1      k                "
  },
  {
    "label":"Simplify",
    "type":"keyword",
    "info":"Simplify[expr] performs a sequence of algebraic and other transformations on expr and returns the si"
  },
  {
    "label":"Sin",
    "type":"keyword",
    "info":"Sin[z] gives the sine of z. "
  },
  {
    "label":"Sinc",
    "type":"keyword",
    "info":"Sinc[z] gives sinc(z). "
  },
  {
    "label":"SinghMaddalaDistribution",
    "type":"keyword",
    "info":"SinghMaddalaDistribution[q, a, b] represents the SinghâMaddala distribution with shape parameters q "
  },
  {
    "label":"SingleEvaluation",
    "type":"keyword",
    "info":"System`SingleEvaluation"
  },
  {
    "label":"SingleLetterItalics",
    "type":"keyword",
    "info":"SingleLetterItalics is an option for Cell that specifies whether singleâletter names should be displ"
  },
  {
    "label":"SingleLetterStyle",
    "type":"keyword",
    "info":"System`SingleLetterStyle"
  },
  {
    "label":"SingularValueDecomposition",
    "type":"keyword",
    "info":"SingularValueDecomposition[m] gives the singular value decomposition for a numerical matrix m as a l"
  },
  {
    "label":"SingularValueList",
    "type":"keyword",
    "info":"SingularValueList[m] gives a list of the nonzero singular values of a matrix m. SingularValueList[{m"
  },
  {
    "label":"SingularValuePlot",
    "type":"keyword",
    "info":"SingularValuePlot[lsys] generates a plot of the singular values of the transfer function for the sys"
  },
  {
    "label":"SingularValues",
    "type":"keyword",
    "info":"SingularValues[m] gives the singular value decomposition for a numerical matrix m. The result is a l"
  },
  {
    "label":"Sinh",
    "type":"keyword",
    "info":"Sinh[z] gives the hyperbolic sine of z. "
  },
  {
    "label":"SinhIntegral",
    "type":"keyword",
    "info":"SinhIntegral[z] gives the hyperbolic sine integral function Shi(z). "
  },
  {
    "label":"SinIntegral",
    "type":"keyword",
    "info":"SinIntegral[z] gives the sine integral function Si (z). "
  },
  {
    "label":"SixJSymbol",
    "type":"keyword",
    "info":"SixJSymbol[{j , j , j }, {j , j , j }] gives the values of the Racah 6âj symbol. \n             1   2"
  },
  {
    "label":"Skeleton",
    "type":"keyword",
    "info":"Skeleton[n] represents a sequence of n omitted elements in an expression printed with Short or Shall"
  },
  {
    "label":"SkeletonTransform",
    "type":"keyword",
    "info":"SkeletonTransform[image] gives the skeleton transform of image, in which the value of each skeleton "
  },
  {
    "label":"SkellamDistribution",
    "type":"keyword",
    "info":"SkellamDistribution[Î¼ , Î¼ ] represents a Skellam distribution with shape parameters Î¼  and Î¼ .\n     "
  },
  {
    "label":"Skewness",
    "type":"keyword",
    "info":"Skewness[list] gives the coefficient of skewness for the elements in list.Skewness[dist] gives the c"
  },
  {
    "label":"SkewNormalDistribution",
    "type":"keyword",
    "info":"SkewNormalDistribution[Î¼, Ï, Î\\[PlusMinus]] represents a skew-normal distribution with shape parameter Î\\[PlusMinus], locati"
  },
  {
    "label":"SkinStyle",
    "type":"keyword",
    "info":"SkinStyle is an option of AnatomyPlot3D that specifies what style to use for automatically included "
  },
  {
    "label":"Skip",
    "type":"keyword",
    "info":"Skip[stream, type] skips one object of the specified type in an input stream. Skip[stream, type, n] "
  },
  {
    "label":"SliceContourPlot3D",
    "type":"keyword",
    "info":"SliceContourPlot3D[f, surf, {x, x   , x   }, {y, y   , y   }, {z, z   , z   }] generates a contour p"
  },
  {
    "label":"SliceDensityPlot3D",
    "type":"keyword",
    "info":"SliceDensityPlot3D[f, surf, {x, x   , x   }, {y, y   , y   }, {z, z   , z   }] generates a density p"
  },
  {
    "label":"SliceDistribution",
    "type":"keyword",
    "info":"SliceDistribution[proc, t] represents the distribution of the process state at time t.SliceDistribut"
  },
  {
    "label":"SliceVectorPlot3D",
    "type":"keyword",
    "info":"SliceVectorPlot3D[{v , v , v }, surf, {x, x   , x   }, {y, y   , y   }, {z, z   , z   }] generates a"
  },
  {
    "label":"Slider",
    "type":"keyword",
    "info":"Slider[x] represents a slider with setting x in the range 0 to 1. Slider[Dynamic[x]] takes the setti"
  },
  {
    "label":"Slider2D",
    "type":"keyword",
    "info":"Slider2D[{x, y}] represents a 2D slider with settings x and y in the range 0 to 1. Slider2D[Dynamic["
  },
  {
    "label":"Slider2DBox",
    "type":"keyword",
    "info":"System`Slider2DBox"
  },
  {
    "label":"Slider2DBoxOptions",
    "type":"keyword",
    "info":"Slider2DBoxOptions ï¢ {opt  ï¢ val , opt  ï¢ val , â¦} is an option that specifies settings for Slider2D"
  },
  {
    "label":"SliderBox",
    "type":"keyword",
    "info":"System`SliderBox"
  },
  {
    "label":"SliderBoxOptions",
    "type":"keyword",
    "info":"SliderBoxOptions ï¢ {opt  ï¢ val , opt  ï¢ val , â¦} is an option that specifies settings for SliderBox "
  },
  {
    "label":"SlideShowVideo",
    "type":"keyword",
    "info":"SlideShowVideo[{image , image , â¦}] generates a video iterating through all image .SlideShowVideo[{i"
  },
  {
    "label":"SlideView",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"Slot",
    "type":"keyword",
    "info":"                                                                                  th\n# represents th"
  },
  {
    "label":"SlotSequence",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"Small",
    "type":"keyword",
    "info":"Small is a style or option setting that specifies that objects should be small."
  },
  {
    "label":"SmallCircle",
    "type":"keyword",
    "info":"SmallCircle[x, y, â¦] displays as x â y â â¦."
  },
  {
    "label":"Smaller",
    "type":"keyword",
    "info":"Smaller is a style or option setting that specifies that objects should be smaller."
  },
  {
    "label":"SmithDecomposition",
    "type":"keyword",
    "info":"SmithDecomposition[m] gives the Smith normal form decomposition of an integer matrix m."
  },
  {
    "label":"SmithDelayCompensator",
    "type":"keyword",
    "info":"SmithDelayCompensator[sys, con] gives the Smith compensator for the time-delay system sys and the de"
  },
  {
    "label":"SmithWatermanSimilarity",
    "type":"keyword",
    "info":"SmithWatermanSimilarity[u, v] gives a number representing the SmithâWaterman similarity between stri"
  },
  {
    "label":"SmoothDensityHistogram",
    "type":"keyword",
    "info":"SmoothDensityHistogram[{{x , y }, {x , y }, â¦}] plots a smooth kernel histogram of the values {x , y"
  },
  {
    "label":"SmoothHistogram",
    "type":"keyword",
    "info":"SmoothHistogram[{x , x , â¦}] plots a smooth kernel histogram for the PDF of the values x .SmoothHist"
  },
  {
    "label":"SmoothHistogram3D",
    "type":"keyword",
    "info":"SmoothHistogram3D[{{x , y }, {x , y }, â¦}] plots a 3D smooth kernel histogram of the values {x , y }"
  },
  {
    "label":"SmoothKernelDistribution",
    "type":"keyword",
    "info":"SmoothKernelDistribution[{x , x , â¦}] represents a smooth kernel distribution based on the data valu"
  },
  {
    "label":"SmoothPointDensity",
    "type":"keyword",
    "info":"SmoothPointDensity[pdata] estimates the point density function Î¼(x) for point data pdata.SmoothPoint"
  },
  {
    "label":"SnDispersion",
    "type":"keyword",
    "info":"SnDispersion[list] gives the S  statistic of the elements in list.SnDispersion[list, c] gives the S "
  },
  {
    "label":"Snippet",
    "type":"keyword",
    "info":"Snippet[doc] gives a snippet of text from a document or other content object.Snippet[doc, n] gives a"
  },
  {
    "label":"SnippetsVideo",
    "type":"keyword",
    "info":"SnippetsVideo[video, n] returns a summary video based on n snippets from video.SnippetsVideo[video, "
  },
  {
    "label":"SnubPolyhedron",
    "type":"keyword",
    "info":"SnubPolyhedron[poly] gives the snub polyhedron of poly by truncating some corners."
  },
  {
    "label":"SocialMediaData",
    "type":"keyword",
    "info":"SocialMediaData[\"name\"] gives information about the social media entity \"name\".SocialMediaData[\"name"
  },
  {
    "label":"Socket",
    "type":"keyword",
    "info":"Socket is a possible value returned by FileType and related functions."
  },
  {
    "label":"SocketConnect",
    "type":"keyword",
    "info":"SocketConnect[address] makes a socket connection to the TCP host at the specified address and return"
  },
  {
    "label":"SocketListen",
    "type":"keyword",
    "info":"SocketListen[socket, fun] starts listening on the specified socket, asynchronously applying fun when"
  },
  {
    "label":"SocketListener",
    "type":"keyword",
    "info":"SocketListener[â¦] represents a socket listener created by SocketListen."
  },
  {
    "label":"SocketObject",
    "type":"keyword",
    "info":"SocketObject[â¦] represents a network socket connection."
  },
  {
    "label":"SocketOpen",
    "type":"keyword",
    "info":"SocketOpen[port] opens a socket that accepts TCP connections to localhost:port and returns a SocketO"
  },
  {
    "label":"SocketReadMessage",
    "type":"keyword",
    "info":"SocketReadMessage[socket] reads the next available message on the specified socket, returning it as "
  },
  {
    "label":"SocketReadyQ",
    "type":"keyword",
    "info":"SocketReadyQ[socket] tests if there is any data immediately available to read from the specified soc"
  },
  {
    "label":"Sockets",
    "type":"keyword",
    "info":"Sockets[] returns all active socket connections initiated by your current Wolfram Language session.S"
  },
  {
    "label":"SocketWaitAll",
    "type":"keyword",
    "info":"SocketWaitAll[{socket , socket , â¦}] waits until there is data ready to read on all of the socket .\n"
  },
  {
    "label":"SocketWaitNext",
    "type":"keyword",
    "info":"SocketWaitNext[{socket , socket , â¦}] waits until there is data ready to read on any of the socket ,"
  },
  {
    "label":"SoftmaxLayer",
    "type":"keyword",
    "info":"SoftmaxLayer[] represents a softmax net layer.SoftmaxLayer[n] represents a softmax net layer that us"
  },
  {
    "label":"SokalSneathDissimilarity",
    "type":"keyword",
    "info":"SokalSneathDissimilarity[u, v] gives the SokalâSneath dissimilarity between Boolean vectors u and v."
  },
  {
    "label":"SolarEclipse",
    "type":"keyword",
    "info":"SolarEclipse[] gives the time of the next solar eclipse.SolarEclipse[datespec] gives the time for th"
  },
  {
    "label":"SolarSystemFeatureData",
    "type":"keyword",
    "info":"SolarSystemFeatureData[entity, property] gives the value of the specified property for the solar sys"
  },
  {
    "label":"SolarTime",
    "type":"keyword",
    "info":"SolarTime[] gives the angle on the celestial equator between the Sun and the local antimeridian for "
  },
  {
    "label":"SolidAngle",
    "type":"keyword",
    "info":"SolidAngle[p, {u , â¦, u }] gives the solid angle at the point p and spanned by the vectors u , â¦, u "
  },
  {
    "label":"SolidBoundaryLoadValue",
    "type":"keyword",
    "info":"SolidBoundaryLoadValue[pred, vars, pars] represents a boundary load condition for PDEs with predicat"
  },
  {
    "label":"SolidData",
    "type":"keyword",
    "info":"SolidData[entity, property] gives the value of the specified property for the solid entity.SolidData"
  },
  {
    "label":"SolidDisplacementCondition",
    "type":"keyword",
    "info":"SolidDisplacementCondition[pred, vars, pars] represents a prescribed displacement on a solid boundar"
  },
  {
    "label":"SolidFixedCondition",
    "type":"keyword",
    "info":"SolidFixedCondition[pred, vars, pars] represents a fully constrained solid boundary for PDEs with pr"
  },
  {
    "label":"SolidMechanicsPDEComponent",
    "type":"keyword",
    "info":"SolidMechanicsPDEComponent[vars, pars] yields solid mechanics PDE terms with variables vars and para"
  },
  {
    "label":"SolidMechanicsStrain",
    "type":"keyword",
    "info":"SolidMechanicsStrain[vars, pars, displ] yields solid mechanics strain with variables vars, parameter"
  },
  {
    "label":"SolidMechanicsStress",
    "type":"keyword",
    "info":"SolidMechanicsStress[vars, pars, strain] yields solid mechanics stress with variables vars, paramete"
  },
  {
    "label":"SolidRegionQ",
    "type":"keyword",
    "info":"SolidRegionQ[reg] gives True if the 3D region reg is a solid region and False otherwise."
  },
  {
    "label":"Solve",
    "type":"keyword",
    "info":"Solve[expr, vars] attempts to solve the system expr of equations or inequalities for the variables v"
  },
  {
    "label":"SolveAlways",
    "type":"keyword",
    "info":"SolveAlways[eqns, vars] gives the values of parameters that make the equations eqns valid for all va"
  },
  {
    "label":"SolveDelayed",
    "type":"keyword",
    "info":"SolveDelayed is an option to NDSolve. SolveDelayed -> False causes the derivatives to be solved for "
  },
  {
    "label":"SolveValues",
    "type":"keyword",
    "info":"SolveValues[expr, vars] gives the values of vars determined by the solutions of the system expr.Solv"
  },
  {
    "label":"Sort",
    "type":"keyword",
    "info":"Sort[list] sorts the elements of list into canonical order. Sort[list, p] sorts using the ordering f"
  },
  {
    "label":"SortBy",
    "type":"keyword",
    "info":"SortBy[list, f] sorts the elements of list in the order defined by applying f to each of them. SortB"
  },
  {
    "label":"SortedBy",
    "type":"keyword",
    "info":"SortedBy is an option that specifies a function by which to sort the results of a computation."
  },
  {
    "label":"SortedEntityClass",
    "type":"keyword",
    "info":"SortedEntityClass[class, prop] represents an entity class derived from class by sorting according to"
  },
  {
    "label":"Sound",
    "type":"keyword",
    "info":"Sound[primitives] represents a sound. Sound[primitives, t] specifies that the sound should have dura"
  },
  {
    "label":"SoundAndGraphics",
    "type":"keyword",
    "info":"System`SoundAndGraphics"
  },
  {
    "label":"SoundNote",
    "type":"keyword",
    "info":"SoundNote[pitch] represents a music-like sound note with the specified pitch.SoundNote[pitch, t] tak"
  },
  {
    "label":"SoundVolume",
    "type":"keyword",
    "info":"SoundVolume is an option to Sound and SoundNote and related functions that specifies the relative vo"
  },
  {
    "label":"SourceLink",
    "type":"keyword",
    "info":"SourceLink is an option for CloudObject and related cloud functions that specifies the source of the"
  },
  {
    "label":"SourcePDETerm",
    "type":"keyword",
    "info":"SourcePDETerm[vars, f] represents a source term f with source coefficient f and model variables vars"
  },
  {
    "label":"Sow",
    "type":"keyword",
    "info":"Sow[e] specifies that e should be collected by the nearest enclosing Reap. Sow[e, tag] specifies tha"
  },
  {
    "label":"Space",
    "type":"keyword",
    "info":"System`Space"
  },
  {
    "label":"SpaceCurveData",
    "type":"keyword",
    "info":"SpaceCurveData[entity, property] gives the value of the specified property for the space curve entit"
  },
  {
    "label":"SpaceForm",
    "type":"keyword",
    "info":"SpaceForm[n] prints as n spaces."
  },
  {
    "label":"Spacer",
    "type":"keyword",
    "info":"Spacer[w] displays as a spacer w printer's points wide.Spacer[{w, h}] displays as a spacer w points "
  },
  {
    "label":"Spacings",
    "type":"keyword",
    "info":"Spacings is an option to Grid and related constructs that specifies the spacings to leave between su"
  },
  {
    "label":"Span",
    "type":"keyword",
    "info":"i;;j represents a span of elements i through j.i;; represents a span from i to the end.;;j represent"
  },
  {
    "label":"SpanAdjustments",
    "type":"keyword",
    "info":"SpanAdjustments is an option for selections that specifies the height and width of spanning characte"
  },
  {
    "label":"SpanCharacterRounding",
    "type":"keyword",
    "info":"SpanCharacterRounding is an option for selections that specifies the method used for rounding a span"
  },
  {
    "label":"SpanFromAbove",
    "type":"keyword",
    "info":"SpanFromAbove is a symbol that can appear at a particular position in a Grid or related construct to"
  },
  {
    "label":"SpanFromBoth",
    "type":"keyword",
    "info":"SpanFromBoth is a symbol that can appear at a particular position in a Grid or related construct to "
  },
  {
    "label":"SpanFromLeft",
    "type":"keyword",
    "info":"SpanFromLeft is a symbol that can appear at a particular position in a Grid or related construct to "
  },
  {
    "label":"SpanLineThickness",
    "type":"keyword",
    "info":"SpanLineThickness is an option for selections that specifies the thickness in printer's points of li"
  },
  {
    "label":"SpanMaxSize",
    "type":"keyword",
    "info":"SpanMaxSize is an option for selections that specifies the maximum size of spanning characters such "
  },
  {
    "label":"SpanMinSize",
    "type":"keyword",
    "info":"SpanMinSize is an option for selections that specifies the minimum size of spanning characters such "
  },
  {
    "label":"SpanningCharacters",
    "type":"keyword",
    "info":"System`SpanningCharacters"
  },
  {
    "label":"SpanSymmetric",
    "type":"keyword",
    "info":"SpanSymmetric is an option for selections that specifies whether vertically expandable characters ar"
  },
  {
    "label":"SparseArray",
    "type":"keyword",
    "info":"SparseArray[{pos  ï¢ v , pos  ï¢ v , â¦}] yields a sparse array with all elements zero except for value"
  },
  {
    "label":"SparseArrayQ",
    "type":"keyword",
    "info":"SparseArrayQ[s] yields True if s is a valid SparseArray object and False otherwise."
  },
  {
    "label":"SpatialBinnedPointData",
    "type":"keyword",
    "info":"SpatialBinnedPointData[{reg  ï¢ val , reg  ï¢ val , â¦}] represents values val  associated with disjoin"
  },
  {
    "label":"SpatialBoundaryCorrection",
    "type":"keyword",
    "info":"SpatialBoundaryCorrection is an option to various spatial statistics functions that control how to c"
  },
  {
    "label":"SpatialEstimate",
    "type":"keyword",
    "info":"SpatialEstimate[{loc  ï¢ val , loc  ï¢ val , â¦}] creates a spatial prediction from values val  given a"
  },
  {
    "label":"SpatialEstimatorFunction",
    "type":"keyword",
    "info":"SpatialEstimatorFunction[] represents a function generated by SpatialEstimate and predicts spatial f"
  },
  {
    "label":"SpatialGraphDistribution",
    "type":"keyword",
    "info":"SpatialGraphDistribution[n, r] represents a spatial distribution for graphs with n vertices uniforml"
  },
  {
    "label":"SpatialJ",
    "type":"keyword",
    "info":"SpatialJ[pdata, r] estimates the J function J(r) for point data pdata at radius r.SpatialJ[pproc, r]"
  },
  {
    "label":"SpatialMedian",
    "type":"keyword",
    "info":"SpatialMedian[{x , x , â¦}] gives the spatial median of the elements x .SpatialMedian[data] gives the"
  },
  {
    "label":"SpatialNoiseLevel",
    "type":"keyword",
    "info":"SpatialNoiseLevel is an option to SpatialEstimate and other spatial functions that gives the noise v"
  },
  {
    "label":"SpatialObservationRegionQ",
    "type":"keyword",
    "info":"SpatialObservationRegionQ[reg] tests whether the geometric or geographic region reg can be an observ"
  },
  {
    "label":"SpatialPointData",
    "type":"keyword",
    "info":"SpatialPointData[points] represents a collection of spatial locations points.SpatialPointData[points"
  },
  {
    "label":"SpatialPointSelect",
    "type":"keyword",
    "info":"SpatialPointSelect[spdata, crit] selects a subset of the SpatialPointData spdata according to crit."
  },
  {
    "label":"SpatialRandomnessTest",
    "type":"keyword",
    "info":"SpatialRandomnessTest[pdata] tests whether the point collection pdata is distributed uniformly over "
  },
  {
    "label":"SpatialTransformationLayer",
    "type":"keyword",
    "info":"SpatialTransformationLayer[{h, w}] represents a net layer that applies an affine transformation to a"
  },
  {
    "label":"SpatialTrendFunction",
    "type":"keyword",
    "info":"SpatialTrendFunction is an option to SpatialEstimate that specifies what global trend model to use f"
  },
  {
    "label":"Speak",
    "type":"keyword",
    "info":"Speak[expr] speaks a spoken representation of the expression expr."
  },
  {
    "label":"SpeakerMatchQ",
    "type":"keyword",
    "info":"SpeakerMatchQ[audio, ref] gives True if speaker features in audio match the one from reference ref a"
  },
  {
    "label":"SpeakTextPacket",
    "type":"keyword",
    "info":"System`SpeakTextPacket"
  },
  {
    "label":"SpearmanRankTest",
    "type":"keyword",
    "info":"SpearmanRankTest[v , v ] tests whether the vectors v  and v  are independent.SpearmanRankTest[m , m "
  },
  {
    "label":"SpearmanRho",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"SpeciesData",
    "type":"keyword",
    "info":"SpeciesData[name, property] gives the value of the specified property for the species entity.Species"
  },
  {
    "label":"SpecificityGoal",
    "type":"keyword",
    "info":"SpecificityGoal is an option for ImageIdentify and related functions that defines what specificity o"
  },
  {
    "label":"SpectralLineData",
    "type":"keyword",
    "info":"SpectralLineData[entity] gives the values of all known properties for an atomic state or state trans"
  },
  {
    "label":"Spectrogram",
    "type":"keyword",
    "info":"Spectrogram[list] plots the spectrogram of list.Spectrogram[list, n] uses partitions of length n.Spe"
  },
  {
    "label":"SpectrogramArray",
    "type":"keyword",
    "info":"SpectrogramArray[list] returns the spectrogram data of list.SpectrogramArray[list, n] uses partition"
  },
  {
    "label":"Specularity",
    "type":"keyword",
    "info":"Specularity[s] is a graphics directive which specifies that surfaces of 3D graphics objects which fo"
  },
  {
    "label":"SpeechCases",
    "type":"keyword",
    "info":"SpeechCases[audio, form] gives a list of cases of text identified as being of type form that appear "
  },
  {
    "label":"SpeechInterpreter",
    "type":"keyword",
    "info":"SpeechInterpreter[form] represents an interpreter object that can be applied to a speech input to tr"
  },
  {
    "label":"SpeechRecognize",
    "type":"keyword",
    "info":"SpeechRecognize[audio] recognizes speech in audio and returns it as a string."
  },
  {
    "label":"SpeechSynthesize",
    "type":"keyword",
    "info":"SpeechSynthesize[expr] synthesizes the contents of expr as an Audio object. SpeechSynthesize[expr, v"
  },
  {
    "label":"SpellingCorrection",
    "type":"keyword",
    "info":"SpellingCorrection is an option for StringMatchQ, Names, and related functions that specifies whethe"
  },
  {
    "label":"SpellingCorrectionList",
    "type":"keyword",
    "info":"SpellingCorrectionList[\"word\"] gives a list of possible spelling corrections for \"word\"."
  },
  {
    "label":"SpellingDictionaries",
    "type":"keyword",
    "info":"SpellingDictionaries is a global option that specifies settings for spell checking."
  },
  {
    "label":"SpellingDictionariesPath",
    "type":"keyword",
    "info":"SpellingDictionariesPath is a global option that specifies which directories are searched for spelli"
  },
  {
    "label":"SpellingOptions",
    "type":"keyword",
    "info":"SpellingOptions is an option for notebooks that specifies settings for spellchecking."
  },
  {
    "label":"SpellingSuggestionsPacket",
    "type":"keyword",
    "info":"System`SpellingSuggestionsPacket"
  },
  {
    "label":"Sphere",
    "type":"keyword",
    "info":"Sphere[p] represents a unit sphere centered at the point p.Sphere[p, r] represents a sphere of radiu"
  },
  {
    "label":"SphereBox",
    "type":"keyword",
    "info":"System`SphereBox"
  },
  {
    "label":"SpherePoints",
    "type":"keyword",
    "info":"SpherePoints[n] gives the positions of n uniformly distributed points on the surface of a unit spher"
  },
  {
    "label":"SphericalBesselJ",
    "type":"keyword",
    "info":"SphericalBesselJ[n, z] gives the spherical Bessel function of the first kind j (z). \n               "
  },
  {
    "label":"SphericalBesselY",
    "type":"keyword",
    "info":"SphericalBesselY[n, z] gives the spherical Bessel function of the second kind y (z). \n              "
  },
  {
    "label":"SphericalHankelH1",
    "type":"keyword",
    "info":"                                                                               (1)\nSphericalHankelH1"
  },
  {
    "label":"SphericalHankelH2",
    "type":"keyword",
    "info":"                                                                                (2)\nSphericalHankelH"
  },
  {
    "label":"SphericalHarmonicY",
    "type":"keyword",
    "info":"                                                             m\nSphericalHarmonicY[l, m, Î¸, Ï] gives "
  },
  {
    "label":"SphericalPlot3D",
    "type":"keyword",
    "info":"SphericalPlot3D[r, Î¸, Ï] generates a 3D plot with a spherical radius r as a function of spherical co"
  },
  {
    "label":"SphericalRegion",
    "type":"keyword",
    "info":"SphericalRegion is an option for three-dimensional graphics functions that specifies whether the fin"
  },
  {
    "label":"SphericalShell",
    "type":"keyword",
    "info":"SphericalShell[c, {r     , r     }] represents a filled spherical shell centered at c with inner rad"
  },
  {
    "label":"SpheroidalEigenvalue",
    "type":"keyword",
    "info":"SpheroidalEigenvalue[n, m, Î\.b3] gives the spheroidal eigenvalue with degree n and order m."
  },
  {
    "label":"SpheroidalJoiningFactor",
    "type":"keyword",
    "info":"SpheroidalJoiningFactor[n, m, Î\.b3] gives the spheroidal joining factor with degree n and order m."
  },
  {
    "label":"SpheroidalPS",
    "type":"keyword",
    "info":"SpheroidalPS[n, m, Î\.b3, z] gives the angular spheroidal function PS    (Î\.b3, z) of the first kind.\n     "
  },
  {
    "label":"SpheroidalPSPrime",
    "type":"keyword",
    "info":"SpheroidalPSPrime[n, m, Î\.b3, z] gives the derivative with respect to z of the angular spheroidal funct"
  },
  {
    "label":"SpheroidalQS",
    "type":"keyword",
    "info":"SpheroidalQS[n, m, Î\.b3, z] gives the angular spheroidal function QS    (Î\.b3, z) of the second kind.\n    "
  },
  {
    "label":"SpheroidalQSPrime",
    "type":"keyword",
    "info":"SpheroidalQSPrime[n, m, Î\.b3, z] gives the derivative with respect to z of the angular spheroidal funct"
  },
  {
    "label":"SpheroidalRadialFactor",
    "type":"keyword",
    "info":"SpheroidalRadialFactor[n, m, c] gives the spheroidal radial factor with degree n and order m."
  },
  {
    "label":"SpheroidalS1",
    "type":"keyword",
    "info":"                                                               (1)\nSpheroidalS1[n, m, Î\.b3, z] gives th"
  },
  {
    "label":"SpheroidalS1Prime",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"SpheroidalS2",
    "type":"keyword",
    "info":"                                                               (2)\nSpheroidalS2[n, m, Î\.b3, z] gives th"
  },
  {
    "label":"SpheroidalS2Prime",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"Splice",
    "type":"keyword",
    "info":"Splice[{e , e , â¦}] represents an expression that will automatically be spliced into any list in whi"
  },
  {
    "label":"SplicedDistribution",
    "type":"keyword",
    "info":"SplicedDistribution[{w , w , â¦, w }, {c , c , â¦, c }, {dist   dist , â¦, dist }] represents the distr"
  },
  {
    "label":"SplineClosed",
    "type":"keyword",
    "info":"SplineClosed is an option for B-spline functions and graphics primitives that specifies whether spli"
  },
  {
    "label":"SplineDegree",
    "type":"keyword",
    "info":"SplineDegree is an option for spline functions and graphics primitives that specifies the degree of "
  },
  {
    "label":"SplineKnots",
    "type":"keyword",
    "info":"SplineKnots is an option for B-spline functions and graphics primitives that specifies the positions"
  },
  {
    "label":"SplineWeights",
    "type":"keyword",
    "info":"SplineWeights is an option for B-spline functions and graphics primitives that specifies weights of "
  },
  {
    "label":"Split",
    "type":"keyword",
    "info":"Split[list] splits list into sublists consisting of runs of identical elements. Split[list, test] tr"
  },
  {
    "label":"SplitBy",
    "type":"keyword",
    "info":"SplitBy[list, f] splits list into sublists consisting of runs of successive elements that give the s"
  },
  {
    "label":"SpokenString",
    "type":"keyword",
    "info":"SpokenString[expr] gives a string of text corresponding to a spoken representation of the expression"
  },
  {
    "label":"SpotLight",
    "type":"keyword",
    "info":"SpotLight[col, pt, Î\\[PlusMinus]] is a three-dimensional graphics directive to use in coloring 3D surfaces that "
  },
  {
    "label":"Sqrt",
    "type":"keyword",
    "info":"Sqrt[z] or Sqrt[z] gives the square root of z. "
  },
  {
    "label":"SqrtBox",
    "type":"keyword",
    "info":"SqrtBox[x] is a low-level box construct that represents the displayed object Sqrt[x] in notebook exp"
  },
  {
    "label":"SqrtBoxOptions",
    "type":"keyword",
    "info":"SqrtBoxOptions is an option that specifies settings for SqrtBox objects."
  },
  {
    "label":"Square",
    "type":"keyword",
    "info":"Square[x] displays as ï  x."
  },
  {
    "label":"SquaredEuclideanDistance",
    "type":"keyword",
    "info":"SquaredEuclideanDistance[u, v] gives the squared Euclidean distance between vectors u and v."
  },
  {
    "label":"SquareFreeQ",
    "type":"keyword",
    "info":"SquareFreeQ[expr] gives True if expr is a square-free polynomial or number, and False otherwise.Squa"
  },
  {
    "label":"SquareIntersection",
    "type":"keyword",
    "info":"SquareIntersection[x, y, â¦] displays as x â y â â¦."
  },
  {
    "label":"SquareMatrixQ",
    "type":"keyword",
    "info":"SquareMatrixQ[m] gives True if m is a square matrix, and False otherwise."
  },
  {
    "label":"SquareRepeatingElement",
    "type":"keyword",
    "info":"SquareRepeatingElement[spec] represents a square array of elements of type spec in an interpreter, A"
  },
  {
    "label":"SquaresR",
    "type":"keyword",
    "info":"SquaresR[d, n] gives the number of ways r (n) to represent the integer n as a sum of d squares.\n    "
  },
  {
    "label":"SquareSubset",
    "type":"keyword",
    "info":"SquareSubset[x, y, â¦] displays as x â y â â¦."
  },
  {
    "label":"SquareSubsetEqual",
    "type":"keyword",
    "info":"SquareSubsetEqual[x, y, â¦] displays as x â y â â¦."
  },
  {
    "label":"SquareSuperset",
    "type":"keyword",
    "info":"SquareSuperset[x, y, â¦] displays as x â y â â¦."
  },
  {
    "label":"SquareSupersetEqual",
    "type":"keyword",
    "info":"SquareSupersetEqual[x, y, â¦] displays as x â y â â¦."
  },
  {
    "label":"SquareUnion",
    "type":"keyword",
    "info":"SquareUnion[x, y, â¦] displays as x â y â â¦."
  },
  {
    "label":"SquareWave",
    "type":"keyword",
    "info":"SquareWave[x] gives a square wave that alternates between +1 and -1 with unit period.SquareWave[{y ,"
  },
  {
    "label":"SSSTriangle",
    "type":"keyword",
    "info":"SSSTriangle[a, b, c] returns a filled triangle with sides of lengths a, b, and c."
  },
  {
    "label":"StabilityMargins",
    "type":"keyword",
    "info":"StabilityMargins is an option to frequency response plots such as BodePlot, NyquistPlot, and Nichols"
  },
  {
    "label":"StabilityMarginsStyle",
    "type":"keyword",
    "info":"StabilityMarginsStyle is an option to frequency response plots such as BodePlot, NyquistPlot, and Ni"
  },
  {
    "label":"StableDistribution",
    "type":"keyword",
    "info":"StableDistribution[type, Î\\[PlusMinus], Î\.b2, Î¼, Ï] represents the stable distribution S     with index of stabilit"
  },
  {
    "label":"Stack",
    "type":"keyword",
    "info":"Stack[] shows the current evaluation stack, giving a list of the tags associated with evaluations th"
  },
  {
    "label":"StackBegin",
    "type":"keyword",
    "info":"StackBegin[expr] evaluates expr, starting a fresh evaluation stack. "
  },
  {
    "label":"StackComplete",
    "type":"keyword",
    "info":"StackComplete[expr] evaluates expr with intermediate expressions in evaluation chains included on th"
  },
  {
    "label":"StackedDateListPlot",
    "type":"keyword",
    "info":"StackedDateListPlot[{{date , v }, {date , v }, â¦}] plots points with values v  at a sequence of date"
  },
  {
    "label":"StackedListPlot",
    "type":"keyword",
    "info":"                                                                                 th\nStackedListPlot["
  },
  {
    "label":"StackInhibit",
    "type":"keyword",
    "info":"StackInhibit[expr] evaluates expr without modifying the evaluation stack. "
  },
  {
    "label":"StadiumShape",
    "type":"keyword",
    "info":"StadiumShape[{{x , y }, {x , y }}, r] represents a stadium of radius r between the points {x , y } a"
  },
  {
    "label":"StandardAtmosphereData",
    "type":"keyword",
    "info":"StandardAtmosphereData[altitude, property] returns the value of the property at the specified geomet"
  },
  {
    "label":"StandardDeviation",
    "type":"keyword",
    "info":"StandardDeviation[list] gives the sample standard deviation of the elements in list. StandardDeviati"
  },
  {
    "label":"StandardDeviationFilter",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"StandardForm",
    "type":"keyword",
    "info":"StandardForm[expr] prints as the standard Wolfram Language two-dimensional representation of expr. "
  },
  {
    "label":"Standardize",
    "type":"keyword",
    "info":"Standardize[list] shifts and rescales the elements of list to have zero mean and unit sample varianc"
  },
  {
    "label":"Standardized",
    "type":"keyword",
    "info":"Standardized is an option that determines whether to standardize the data."
  },
  {
    "label":"StandardOceanData",
    "type":"keyword",
    "info":"StandardOceanData[spec] returns the thermodynamic properties of seawater for the specified parameter"
  },
  {
    "label":"StandbyDistribution",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"Star",
    "type":"keyword",
    "info":"Star[x, y, â¦] displays as x â y â â¦."
  },
  {
    "label":"StarClusterData",
    "type":"keyword",
    "info":"StarClusterData[entity, property] gives the value of the specified property for the star cluster ent"
  },
  {
    "label":"StarData",
    "type":"keyword",
    "info":"StarData[entity, property] gives the value of the specified property for the star entity.StarData[{e"
  },
  {
    "label":"StarGraph",
    "type":"keyword",
    "info":"StarGraph[n] gives the star graph with n vertices S .\n                                              "
  },
  {
    "label":"StartAsynchronousTask",
    "type":"keyword",
    "info":"StartAsynchronousTask[task] allows asynchronous evaluations from task after it has been stopped."
  },
  {
    "label":"StartExternalSession",
    "type":"keyword",
    "info":"StartExternalSession[\"sys\"] starts an external session using the external evaluator sys, returning a"
  },
  {
    "label":"StartingStepSize",
    "type":"keyword",
    "info":"StartingStepSize is an option to NDSolve and related functions that specifies the initial step size "
  },
  {
    "label":"StartOfLine",
    "type":"keyword",
    "info":"StartOfLine represents the start of a line in a string for purposes of matching in StringExpression."
  },
  {
    "label":"StartOfString",
    "type":"keyword",
    "info":"StartOfString represents the start of a string for purposes of matching in StringExpression."
  },
  {
    "label":"StartProcess",
    "type":"keyword",
    "info":"StartProcess[\"executable\"] executes an external program, yielding a ProcessObject to represent the r"
  },
  {
    "label":"StartScheduledTask",
    "type":"keyword",
    "info":"StartScheduledTask[obj] starts the local or cloud scheduled task represented by obj."
  },
  {
    "label":"StartupSound",
    "type":"keyword",
    "info":"System`StartupSound"
  },
  {
    "label":"StartWebSession",
    "type":"keyword",
    "info":"StartWebSession[] starts a web session and returns a web session object.StartWebSession[\"browser\"] s"
  },
  {
    "label":"StateDimensions",
    "type":"keyword",
    "info":"StateDimensions is an option to TemporalData that specifies the dimensions of the state space. "
  },
  {
    "label":"StateFeedbackGains",
    "type":"keyword",
    "info":"StateFeedbackGains[sspec, {p , â¦, p }] gives the state feedback gains for the system specification s"
  },
  {
    "label":"StateOutputEstimator",
    "type":"keyword",
    "info":"StateOutputEstimator[ssm, l] constructs an estimator for the StateSpaceModel ssm, with estimator gai"
  },
  {
    "label":"StateResponse",
    "type":"keyword",
    "info":"StateResponse[sys, u, {t, t   , t   }] gives the numeric state response of the state-space model sys"
  },
  {
    "label":"StateSpaceModel",
    "type":"keyword",
    "info":"StateSpaceModel[{a, b, c, d}] represents the standard state-space model with state matrix a, input m"
  },
  {
    "label":"StateSpaceRealization",
    "type":"keyword",
    "info":"StateSpaceRealization is an option to StateSpaceModel that specifies its canonical representation."
  },
  {
    "label":"StateSpaceTransform",
    "type":"keyword",
    "info":"StateSpaceTransform[sys, {p, q}] transforms the state-space model sys using the matrices p and q. St"
  },
  {
    "label":"StateTransformationLinearize",
    "type":"keyword",
    "info":"StateTransformationLinearize[asys] linearizes the AffineStateSpaceModel asys by state transformation"
  },
  {
    "label":"StationaryDistribution",
    "type":"keyword",
    "info":"StationaryDistribution[proc] represents the stationary distribution of the process proc, when it exi"
  },
  {
    "label":"StationaryWaveletPacketTransform",
    "type":"keyword",
    "info":"StationaryWaveletPacketTransform[data] gives the stationary wavelet packet transform (SWPT) of an ar"
  },
  {
    "label":"StationaryWaveletTransform",
    "type":"keyword",
    "info":"StationaryWaveletTransform[data] gives the stationary wavelet transform (SWT) of an array of data.St"
  },
  {
    "label":"StatusArea",
    "type":"keyword",
    "info":"StatusArea[expr, string] displays string in the status area of the current notebook when the mouse p"
  },
  {
    "label":"StatusCentrality",
    "type":"keyword",
    "info":"StatusCentrality[g] gives a list of status centralities for the vertices in the graph g.StatusCentra"
  },
  {
    "label":"StepMonitor",
    "type":"keyword",
    "info":"StepMonitor is an option for iterative numerical computation functions that gives an expression to e"
  },
  {
    "label":"StereochemistryElements",
    "type":"keyword",
    "info":"StereochemistryElements is an option for Molecule that specifies the local stereochemical arrangemen"
  },
  {
    "label":"StieltjesGamma",
    "type":"keyword",
    "info":"StieltjesGamma[n] gives the Stieltjes constant Î\.b3 . StieltjesGamma[n, a] gives the generalized Stielt"
  },
  {
    "label":"StippleShading",
    "type":"keyword",
    "info":"StippleShading[] is a three-dimensional graphics directive specifying that objects that follow are t"
  },
  {
    "label":"StirlingS1",
    "type":"keyword",
    "info":"                                                              (m)\nStirlingS1[n, m] gives the Stirlin"
  },
  {
    "label":"StirlingS2",
    "type":"keyword",
    "info":"                                                               (m)\nStirlingS2[n, m] gives the Stirli"
  },
  {
    "label":"StopAsynchronousTask",
    "type":"keyword",
    "info":"StopAsynchronousTask[task] stops asynchronous evaluations from task."
  },
  {
    "label":"StoppingPowerData",
    "type":"keyword",
    "info":"StoppingPowerData[entity, {\"Particle\" ï¢ particle, \"Energy\" ï¢ quantity}, property] gives the value of"
  },
  {
    "label":"StopScheduledTask",
    "type":"keyword",
    "info":"StopScheduledTask[obj] deactivates the local or cloud scheduled task represented by obj."
  },
  {
    "label":"StrataVariables",
    "type":"keyword",
    "info":"StrataVariables is an option for fitting functions such as CoxModelFit that specify the variables on"
  },
  {
    "label":"StratonovichProcess",
    "type":"keyword",
    "info":"StratonovichProcess[{a, b}, x, t] represents a Stratonovich process x(t), where ï x(t) ï a(t, x(t)) "
  },
  {
    "label":"StraussHardcorePointProcess",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"StraussPointProcess",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"StreamColorFunction",
    "type":"keyword",
    "info":"StreamColorFunction is an option for StreamPlot and related functions that specifies a function to a"
  },
  {
    "label":"StreamColorFunctionScaling",
    "type":"keyword",
    "info":"StreamColorFunctionScaling is an option for graphics functions that specifies whether arguments supp"
  },
  {
    "label":"StreamDensityPlot",
    "type":"keyword",
    "info":"StreamDensityPlot[{{v , v }, s}, {x, x   , x   }, {y, y   , y   }] generates a stream plot of the ve"
  },
  {
    "label":"StreamMarkers",
    "type":"keyword",
    "info":"StreamMarkers is an option for StreamPlot, ListStreamPlot and related functions that specifies what "
  },
  {
    "label":"StreamPlot",
    "type":"keyword",
    "info":"StreamPlot[{v , v }, {x, x   , x   }, {y, y   , y   }] generates a stream plot of the vector field {"
  },
  {
    "label":"StreamPlot3D",
    "type":"keyword",
    "info":"StreamPlot3D[{v , v , v }, {x, x   , x   }, {y, y   , y   }, {z, z   , z   }] plots streamlines for "
  },
  {
    "label":"StreamPoints",
    "type":"keyword",
    "info":"StreamPoints is an option to StreamPlot, ListStreamPlot, and related functions that determines how m"
  },
  {
    "label":"StreamPosition",
    "type":"keyword",
    "info":"StreamPosition[stream] returns an integer that specifies the position of the current point in an ope"
  },
  {
    "label":"Streams",
    "type":"keyword",
    "info":"Streams[] gives a list of all streams that are currently open. Streams[\"name\"] lists only streams wi"
  },
  {
    "label":"StreamScale",
    "type":"keyword",
    "info":"StreamScale is an option to StreamPlot, ListStreamPlot, and related functions that determines the le"
  },
  {
    "label":"StreamStyle",
    "type":"keyword",
    "info":"StreamStyle is an option to StreamPlot, StreamDensityPlot, and related functions that determines the"
  },
  {
    "label":"StrictInequalities",
    "type":"keyword",
    "info":"StrictInequalities is an option to FunctionSign and FunctionMonotonicity, etc. that determines wheth"
  },
  {
    "label":"String",
    "type":"keyword",
    "info":"String is the head of a character string \"text\". "
  },
  {
    "label":"StringBreak",
    "type":"keyword",
    "info":"System`StringBreak"
  },
  {
    "label":"StringByteCount",
    "type":"keyword",
    "info":"StringByteCount[\"string\"] gives the total number of bytes used to store the characters in a string."
  },
  {
    "label":"StringCases",
    "type":"keyword",
    "info":"StringCases[\"string\", patt] gives a list of the substrings in \"string\" that match the string express"
  },
  {
    "label":"StringContainsQ",
    "type":"keyword",
    "info":"StringContainsQ[\"string\", patt] yields True if any part of string matches the string pattern patt, a"
  },
  {
    "label":"StringCount",
    "type":"keyword",
    "info":"StringCount[\"string\", \"sub\"] gives a count of the number of times \"sub\" appears as a substring of \"s"
  },
  {
    "label":"StringDelete",
    "type":"keyword",
    "info":"StringDelete[\"string\", patt] yields the string obtained by deleting from string all occurrences of a"
  },
  {
    "label":"StringDrop",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"StringEndsQ",
    "type":"keyword",
    "info":"StringEndsQ[\"string\", patt] yields True if the end of string matches the string pattern patt, and yi"
  },
  {
    "label":"StringExpression",
    "type":"keyword",
    "info":"s  ~~ s  ~~ â¦ or StringExpression[s , s , â¦] represents a sequence of strings and symbolic string ob"
  },
  {
    "label":"StringExtract",
    "type":"keyword",
    "info":"                                          th\nStringExtract[\"string\", n] extracts the nï    block of c"
  },
  {
    "label":"StringForm",
    "type":"keyword",
    "info":"StringForm[\"controlstring\", expr , â¦] prints as the text of the controlstring, with the printed form"
  },
  {
    "label":"StringFormat",
    "type":"keyword",
    "info":"StringFormat[\"string\"] attempts to determine what ImportString format could be used to import the st"
  },
  {
    "label":"StringFormatQ",
    "type":"keyword",
    "info":"StringFormatQ[\"string\", \"fmt\"] gives True if the string \"string\" might be imported as format \"fmt\" a"
  },
  {
    "label":"StringFreeQ",
    "type":"keyword",
    "info":"StringFreeQ[\"string\", patt] yields True if no substring in \"string\" matches the string expression pa"
  },
  {
    "label":"StringInsert",
    "type":"keyword",
    "info":"StringInsert[\"string\", \"snew\", n] yields a string with \"snew\" inserted starting at position n in \"st"
  },
  {
    "label":"StringJoin",
    "type":"keyword",
    "info":"\"s \" <> \"s \" <> â¦, StringJoin[\"s \", \"s \", â¦], or StringJoin[{\"s \", \"s \", â¦}] yields a string consist"
  },
  {
    "label":"StringLength",
    "type":"keyword",
    "info":"StringLength[\"string\"] gives the number of characters in a string. "
  },
  {
    "label":"StringMatchQ",
    "type":"keyword",
    "info":"StringMatchQ[\"string\", patt] tests whether \"string\" matches the string pattern patt. StringMatchQ[\"s"
  },
  {
    "label":"StringPadLeft",
    "type":"keyword",
    "info":"StringPadLeft[\"string\", n] makes string be of length n, padding it on the left with spaces or trunca"
  },
  {
    "label":"StringPadRight",
    "type":"keyword",
    "info":"StringPadRight[\"string\", n] makes string be of length n, padding it on the right with spaces or trun"
  },
  {
    "label":"StringPart",
    "type":"keyword",
    "info":"                                    th                                                              "
  },
  {
    "label":"StringPartition",
    "type":"keyword",
    "info":"StringPartition[\"string\", n] partitions string into nonoverlapping substrings of length n.StringPart"
  },
  {
    "label":"StringPosition",
    "type":"keyword",
    "info":"StringPosition[\"string\", \"sub\"] gives a list of the starting and ending character positions at which"
  },
  {
    "label":"StringQ",
    "type":"keyword",
    "info":"StringQ[expr] gives True if expr is a string, and False otherwise."
  },
  {
    "label":"StringRepeat",
    "type":"keyword",
    "info":"StringRepeat[\"str\", n] creates a string consisting of \"str\" repeated n times.StringRepeat[\"str\", n, "
  },
  {
    "label":"StringReplace",
    "type":"keyword",
    "info":"StringReplace[\"string\", s ï¢ sp] replaces the string expression s by sp wherever it appears in \"strin"
  },
  {
    "label":"StringReplaceList",
    "type":"keyword",
    "info":"StringReplaceList[\"string\", s ï¢ sp] or StringReplaceList[\"string\", {s  ï¢ sp , s  ï¢ sp , â¦}] gives a "
  },
  {
    "label":"StringReplacePart",
    "type":"keyword",
    "info":"StringReplacePart[\"string\", \"snew\", {m, n}] replaces the characters at positions m through n in \"str"
  },
  {
    "label":"StringReverse",
    "type":"keyword",
    "info":"StringReverse[\"string\"] reverses the order of the characters in \"string\"."
  },
  {
    "label":"StringRiffle",
    "type":"keyword",
    "info":"StringRiffle[{s , s , s , â¦}] creates a string by concatenating all the s , with spaces inserted bet"
  },
  {
    "label":"StringRotateLeft",
    "type":"keyword",
    "info":"StringRotateLeft[string, n] cycles the characters in string n positions to the left.StringRotateLeft"
  },
  {
    "label":"StringRotateRight",
    "type":"keyword",
    "info":"StringRotateRight[string, n] cycles the characters in string n positions to the right.StringRotateRi"
  },
  {
    "label":"StringSkeleton",
    "type":"keyword",
    "info":"StringSkeleton[n] represents a sequence of n omitted characters in a string printed with Short. The "
  },
  {
    "label":"StringSplit",
    "type":"keyword",
    "info":"StringSplit[\"string\"] splits \"string\" into a list of substrings separated by whitespace. StringSplit"
  },
  {
    "label":"StringStartsQ",
    "type":"keyword",
    "info":"StringStartsQ[\"string\", patt] yields True if the beginning of string matches the string pattern patt"
  },
  {
    "label":"StringTake",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"StringTakeDrop",
    "type":"keyword",
    "info":"StringTakeDrop[\"string\", n] gives a pair of strings containing the first n characters in \"string\" an"
  },
  {
    "label":"StringTemplate",
    "type":"keyword",
    "info":"StringTemplate[\"string\"] yields a TemplateObject expression that represents a string template to be "
  },
  {
    "label":"StringToByteArray",
    "type":"keyword",
    "info":"StringToByteArray[\"string\"] returns a byte array corresponding to the UTF-8 encoding of the specifie"
  },
  {
    "label":"StringToStream",
    "type":"keyword",
    "info":"StringToStream[\"string\"] opens an input stream for reading from a string. "
  },
  {
    "label":"StringTrim",
    "type":"keyword",
    "info":"StringTrim[\"string\"] trims whitespace from the beginning and end of \"string\".StringTrim[\"string\", pa"
  },
  {
    "label":"StripBoxes",
    "type":"keyword",
    "info":"StripBoxes[expr] will strip out unnecessary boxes, spaces, and styles from a format expression."
  },
  {
    "label":"StripOnInput",
    "type":"keyword",
    "info":"StripOnInput is an option for certain boxes that determines whether the box should be stripped on ev"
  },
  {
    "label":"StripStyleOnPaste",
    "type":"keyword",
    "info":"System`StripStyleOnPaste"
  },
  {
    "label":"StripWrapperBoxes",
    "type":"keyword",
    "info":"StripWrapperBoxes is an option to TagBox that controls how boxes are stripped upon evaluation."
  },
  {
    "label":"StrokeForm",
    "type":"keyword",
    "info":"System`StrokeForm"
  },
  {
    "label":"StructuralImportance",
    "type":"keyword",
    "info":"StructuralImportance[rdist] gives the structural importances for all components in the ReliabilityDi"
  },
  {
    "label":"StructuredArray",
    "type":"keyword",
    "info":"StructuredArray[st, {d , d , â¦}, data] represents a d Ãd Ãâ¦ array with structure type st and specifi"
  },
  {
    "label":"StructuredArrayHeadQ",
    "type":"keyword",
    "info":"System`StructuredArrayHeadQ"
  },
  {
    "label":"StructuredSelection",
    "type":"keyword",
    "info":"StructuredSelection is an option for Cell that specifies whether to allow only complete subexpressio"
  },
  {
    "label":"StruveH",
    "type":"keyword",
    "info":"StruveH[n, z] gives the Struve function H (z). \n                                         n"
  },
  {
    "label":"StruveL",
    "type":"keyword",
    "info":"StruveL[n, z] gives the modified Struve function L (z). \n                                           "
  },
  {
    "label":"Stub",
    "type":"keyword",
    "info":"Stub is an attribute which specifies that if a symbol is ever used, Needs should automatically be ca"
  },
  {
    "label":"StudentTDistribution",
    "type":"keyword",
    "info":"StudentTDistribution[Î½] represents a Student t distribution with Î½ degrees of freedom.StudentTDistri"
  },
  {
    "label":"Style",
    "type":"keyword",
    "info":"Style[expr, options] displays with expr formatted using the specified option settings. Style[expr, \""
  },
  {
    "label":"StyleBox",
    "type":"keyword",
    "info":"StyleBox[boxes, options] is a low-level representation of boxes to be shown with the specified optio"
  },
  {
    "label":"StyleBoxAutoDelete",
    "type":"keyword",
    "info":"StyleBoxAutoDelete is an option for selections that specifies whether a StyleBox wrapped around them"
  },
  {
    "label":"StyleData",
    "type":"keyword",
    "info":"StyleData[\"style\"] is a low-level representation of the contents of a style definition cell.StyleDat"
  },
  {
    "label":"StyleDefinitions",
    "type":"keyword",
    "info":"StyleDefinitions is an option for notebooks that gives definitions for the styles that can be used i"
  },
  {
    "label":"StyleForm",
    "type":"keyword",
    "info":"StyleForm[expr, options] prints using the specified style options. StyleForm[expr, \"style\"] prints u"
  },
  {
    "label":"StyleHints",
    "type":"keyword",
    "info":"StyleHints is an option for cells and notebooks that specifies an association containing hints used "
  },
  {
    "label":"StyleKeyMapping",
    "type":"keyword",
    "info":"System`StyleKeyMapping"
  },
  {
    "label":"StyleMenuListing",
    "type":"keyword",
    "info":"StyleMenuListing is an option for cells that specifies whether a given cell style is listed in the F"
  },
  {
    "label":"StyleNameDialogSettings",
    "type":"keyword",
    "info":"StyleNameDialogSettings is a global option that specifies the cell style displayed in the Custom Sty"
  },
  {
    "label":"StyleNames",
    "type":"keyword",
    "info":"System`StyleNames"
  },
  {
    "label":"StylePrint",
    "type":"keyword",
    "info":"StylePrint[expr, \"style\"] creates a new cell in the current notebook with the specified style, and p"
  },
  {
    "label":"StyleSheetPath",
    "type":"keyword",
    "info":"StyleSheetPath is a global option that specifies which directories the Wolfram System searches to fi"
  },
  {
    "label":"Subdivide",
    "type":"keyword",
    "info":"Subdivide[n] generates the list {0, 1\/n, 2\/n, â¦, 1}.Subdivide[x   , n] generates the list of values "
  },
  {
    "label":"Subfactorial",
    "type":"keyword",
    "info":"Subfactorial[n] gives the number of permutations of n objects that leave no object fixed."
  },
  {
    "label":"Subgraph",
    "type":"keyword",
    "info":"Subgraph[g, {v , v , â¦}] gives the subgraph of the graph g generated by the vertices v .Subgraph[g, "
  },
  {
    "label":"SubMinus",
    "type":"keyword",
    "info":"SubMinus[expr] displays as expr .\n                               -"
  },
  {
    "label":"SubPlus",
    "type":"keyword",
    "info":"SubPlus[expr] displays as expr .\n                              +"
  },
  {
    "label":"SubresultantPolynomialRemainders",
    "type":"keyword",
    "info":"SubresultantPolynomialRemainders[poly , poly , var] gives the subresultant polynomial remainder sequ"
  },
  {
    "label":"SubresultantPolynomials",
    "type":"keyword",
    "info":"SubresultantPolynomials[poly , poly , var] generates a list of subresultant polynomials of the polyn"
  },
  {
    "label":"Subresultants",
    "type":"keyword",
    "info":"Subresultants[poly , poly , var] generates a list of the principal subresultant coefficients of the "
  },
  {
    "label":"Subscript",
    "type":"keyword",
    "info":"Subscript[x, y] is an object that formats as x . Subscript[x, y , y , â¦] formats as x         .\n    "
  },
  {
    "label":"SubscriptBox",
    "type":"keyword",
    "info":"SubscriptBox[x, y] is the lowâlevel box representation for x  in notebook expressions. \n            "
  },
  {
    "label":"SubscriptBoxOptions",
    "type":"keyword",
    "info":"SubscriptBoxOptions is an option for selections that specifies settings for SubscriptBox objects."
  },
  {
    "label":"Subscripted",
    "type":"keyword",
    "info":"System`Subscripted"
  },
  {
    "label":"Subsequences",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"Subset",
    "type":"keyword",
    "info":"Subset[x, y, â¦] displays as x â y â â¦."
  },
  {
    "label":"SubsetCases",
    "type":"keyword",
    "info":"SubsetCases[list, patt] gives a list of the sublists in list that match the pattern patt in any orde"
  },
  {
    "label":"SubsetCount",
    "type":"keyword",
    "info":"SubsetCount[list, sub] gives a count of the number of times sub appears in any order as a sublist of"
  },
  {
    "label":"SubsetEqual",
    "type":"keyword",
    "info":"SubsetEqual[x, y, â¦] displays as x â y â â¦."
  },
  {
    "label":"SubsetMap",
    "type":"keyword",
    "info":"SubsetMap[f, {e , e , â¦}, {i, j, â¦}] yields an expression in which the elements e , e , â¦ in the lis"
  },
  {
    "label":"SubsetPosition",
    "type":"keyword",
    "info":"SubsetPosition[list, sublist] gives a list of positions at which sublist appears in list in any orde"
  },
  {
    "label":"SubsetQ",
    "type":"keyword",
    "info":"SubsetQ[list , list ] yields True if list  is a subset of list , and False otherwise.\n            1 "
  },
  {
    "label":"SubsetReplace",
    "type":"keyword",
    "info":"SubsetReplace[list, rules] replaces sublists in list according to the specified rule or list of rule"
  },
  {
    "label":"Subsets",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"SubStar",
    "type":"keyword",
    "info":"SubStar[expr] displays as expr .\n                              *"
  },
  {
    "label":"SubstitutionSystem",
    "type":"keyword",
    "info":"SubstitutionSystem[rule, init, t] generates a list representing the evolution of the substitution sy"
  },
  {
    "label":"Subsuperscript",
    "type":"keyword",
    "info":"                                                      z\nSubsuperscript[x, y, z] is an object that fo"
  },
  {
    "label":"SubsuperscriptBox",
    "type":"keyword",
    "info":"                                                                    z\nSubsuperscriptBox[x, y, z] is "
  },
  {
    "label":"SubsuperscriptBoxOptions",
    "type":"keyword",
    "info":"SubsuperscriptBoxOptions is an option for selections that specifies settings for SubsuperscriptBox o"
  },
  {
    "label":"SubtitleEncoding",
    "type":"keyword",
    "info":"SubtitleEncoding is an option for Export and other functions that specifies the subtitle encoding to"
  },
  {
    "label":"SubtitleTrackSelection",
    "type":"keyword",
    "info":"SubtitleTrackSelection is an option that specifies the subtitle tracks of interest."
  },
  {
    "label":"Subtract",
    "type":"keyword",
    "info":"x - y is equivalent to x + (-1 * y). "
  },
  {
    "label":"SubtractFrom",
    "type":"keyword",
    "info":"x -= dx subtracts dx from x and returns the new value of x. "
  },
  {
    "label":"SubtractSides",
    "type":"keyword",
    "info":"SubtractSides[rel, x] subtracts x from each side of the equation or inequality rel.SubtractSides[rel"
  },
  {
    "label":"SubValues",
    "type":"keyword",
    "info":"SubValues[f] gives a list of transformation rules corresponding to all subvalues (values for f[â¦][â¦]"
  },
  {
    "label":"Succeeds",
    "type":"keyword",
    "info":"Succeeds[x, y, â¦] displays as x â» y â» â¦."
  },
  {
    "label":"SucceedsEqual",
    "type":"keyword",
    "info":"SucceedsEqual[x, y, â¦] displays as x âª\\[Degree] y âª\\[Degree] â¦."
  },
  {
    "label":"SucceedsSlantEqual",
    "type":"keyword",
    "info":"SucceedsSlantEqual[x, y, â¦] displays as x â½ y â½ â¦."
  },
  {
    "label":"SucceedsTilde",
    "type":"keyword",
    "info":"SucceedsTilde[x, y, â¦] displays as x â¿ y â¿ â¦."
  },
  {
    "label":"Success",
    "type":"keyword",
    "info":"Success[\"tag\", assoc] represents a success of a type indicated by tag, with details given by the ass"
  },
  {
    "label":"SuchThat",
    "type":"keyword",
    "info":"SuchThat[x, y] displays as x â y."
  },
  {
    "label":"Sum",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"SumConvergence",
    "type":"keyword",
    "info":"                                                  â                                                 "
  },
  {
    "label":"SummationLayer",
    "type":"keyword",
    "info":"SummationLayer[] represents a net layer that sums all of its input elements."
  },
  {
    "label":"Sunday",
    "type":"keyword",
    "info":"Sunday is a day of the week."
  },
  {
    "label":"SunPosition",
    "type":"keyword",
    "info":"SunPosition[] gives the position of the Sun for the current date and location.SunPosition[datespec] "
  },
  {
    "label":"Sunrise",
    "type":"keyword",
    "info":"Sunrise[] gives the time of the next sunrise for the current date and location.Sunrise[datespec] giv"
  },
  {
    "label":"Sunset",
    "type":"keyword",
    "info":"Sunset[] gives the time of the next sunset for the current date and location.Sunset[datespec] gives "
  },
  {
    "label":"SuperDagger",
    "type":"keyword",
    "info":"                                  â \nSuperDagger[expr] displays as expr ."
  },
  {
    "label":"SuperMinus",
    "type":"keyword",
    "info":"                                 -\nSuperMinus[expr] displays as expr ."
  },
  {
    "label":"SupernovaData",
    "type":"keyword",
    "info":"SupernovaData[entity, property] gives the value of the specified property for the supernova entity.S"
  },
  {
    "label":"SuperPlus",
    "type":"keyword",
    "info":"                                +\nSuperPlus[expr] displays as expr ."
  },
  {
    "label":"Superscript",
    "type":"keyword",
    "info":"                                                y\nSuperscript[x, y] is an object that formats as x ."
  },
  {
    "label":"SuperscriptBox",
    "type":"keyword",
    "info":"                                                              y\nSuperscriptBox[x, y] is the lowâleve"
  },
  {
    "label":"SuperscriptBoxOptions",
    "type":"keyword",
    "info":"SuperscriptBoxOptions is an option for selections that specifies settings for SuperscriptBox objects"
  },
  {
    "label":"Superset",
    "type":"keyword",
    "info":"Superset[x, y, â¦] displays as x â y â â¦."
  },
  {
    "label":"SupersetEqual",
    "type":"keyword",
    "info":"SupersetEqual[x, y, â¦] displays as x â y â â¦."
  },
  {
    "label":"SuperStar",
    "type":"keyword",
    "info":"                                *\nSuperStar[expr] displays as expr ."
  },
  {
    "label":"Surd",
    "type":"keyword",
    "info":"                                   th\nSurd[x, n] gives the real-valued nï    root of x."
  },
  {
    "label":"SurdForm",
    "type":"keyword",
    "info":"SurdForm is an option to RadicalBox and SqrtBox that indicates whether the radical represents a Surd"
  },
  {
    "label":"SurfaceAppearance",
    "type":"keyword",
    "info":"System`SurfaceAppearance"
  },
  {
    "label":"SurfaceArea",
    "type":"keyword",
    "info":"SurfaceArea[reg] gives the surface area of the three-dimensional region reg.SurfaceArea[{x , â¦, x },"
  },
  {
    "label":"SurfaceColor",
    "type":"keyword",
    "info":"SurfaceColor[dcol] is a three-dimensional graphics directive which specifies that the surfaces which"
  },
  {
    "label":"SurfaceData",
    "type":"keyword",
    "info":"SurfaceData[entity, property] gives the value of the specified property for the surface entity.Surfa"
  },
  {
    "label":"SurfaceGraphics",
    "type":"keyword",
    "info":"SurfaceGraphics[array] is a representation of a three-dimensional plot of a surface, with heights of"
  },
  {
    "label":"SurvivalDistribution",
    "type":"keyword",
    "info":"SurvivalDistribution[{e , e , â¦}] represents a survival distribution with event times e .SurvivalDis"
  },
  {
    "label":"SurvivalFunction",
    "type":"keyword",
    "info":"SurvivalFunction[dist, x] gives the survival function for the distribution dist evaluated at x.Survi"
  },
  {
    "label":"SurvivalModel",
    "type":"keyword",
    "info":"SurvivalModel[â¦] represents the symbolic survival model obtained from functions like SurvivalModelFi"
  },
  {
    "label":"SurvivalModelFit",
    "type":"keyword",
    "info":"SurvivalModelFit[{e , e , â¦}] creates a survival model for event times e .\n                   1   2 "
  },
  {
    "label":"SuspendPacket",
    "type":"keyword",
    "info":"SuspendPacket[] is a WSTP packet used for synchronization with the Wolfram Language kernel."
  },
  {
    "label":"SuzukiDistribution",
    "type":"keyword",
    "info":"SuzukiDistribution[Î¼, Î½] represents the Suzuki distribution with shape parameters Î¼ and Î½."
  },
  {
    "label":"SuzukiGroupSuz",
    "type":"keyword",
    "info":"SuzukiGroupSuz[] represents the sporadic simple Suzuki group Suz."
  },
  {
    "label":"SwatchLegend",
    "type":"keyword",
    "info":"SwatchLegend[{col , â¦}, {lbl , â¦}] generates a legend that associates swatches of colors col  with l"
  },
  {
    "label":"Switch",
    "type":"keyword",
    "info":"Switch[expr, form , value , form , value , â¦] evaluates expr, then compares it with each of the form"
  },
  {
    "label":"Symbol",
    "type":"keyword",
    "info":"Symbol[\"name\"] refers to a symbol with the specified name. "
  },
  {
    "label":"SymbolName",
    "type":"keyword",
    "info":"SymbolName[symbol] gives the name of the specified symbol. "
  },
  {
    "label":"SymletWavelet",
    "type":"keyword",
    "info":"SymletWavelet[] represents the Symlet wavelet of order 4.SymletWavelet[n] represents the Symlet wave"
  },
  {
    "label":"Symmetric",
    "type":"keyword",
    "info":"Symmetric[{s , â¦, s }] represents the symmetry of a tensor that is symmetric in the slots s .\n      "
  },
  {
    "label":"SymmetricGroup",
    "type":"keyword",
    "info":"SymmetricGroup[n] represents the symmetric group of degree n."
  },
  {
    "label":"SymmetricKey",
    "type":"keyword",
    "info":"SymmetricKey[assoc] represents all the information needed for encryption, decryption, and other oper"
  },
  {
    "label":"SymmetricMatrixQ",
    "type":"keyword",
    "info":"SymmetricMatrixQ[m] gives True if m is explicitly symmetric, and False otherwise. "
  },
  {
    "label":"SymmetricPolynomial",
    "type":"keyword",
    "info":"                                                th\nSymmetricPolynomial[k, {x , â¦, x }] gives the kï  "
  },
  {
    "label":"SymmetricReduction",
    "type":"keyword",
    "info":"SymmetricReduction[f, {x , â¦, x }] gives a pair of polynomials {p, q} in x , â¦, x  such that f == p "
  },
  {
    "label":"Symmetrize",
    "type":"keyword",
    "info":"Symmetrize[tensor, sym] returns the symmetrization of tensor under the symmetry sym."
  },
  {
    "label":"SymmetrizedArray",
    "type":"keyword",
    "info":"SymmetrizedArray[{pos  ï¢ val , pos  ï¢ val , â¦}, dims, sym] yields an array of dimensions dims whose "
  },
  {
    "label":"SymmetrizedArrayRules",
    "type":"keyword",
    "info":"SymmetrizedArrayRules[sa] returns a list of rules pos  ï¢ val  of the symmetrized array sa.Symmetrize"
  },
  {
    "label":"SymmetrizedDependentComponents",
    "type":"keyword",
    "info":"SymmetrizedDependentComponents[comp, sym] gives the list of components that are equivalent to the co"
  },
  {
    "label":"SymmetrizedIndependentComponents",
    "type":"keyword",
    "info":"SymmetrizedIndependentComponents[dims, sym] gives the list of independent components of an array of "
  },
  {
    "label":"SymmetrizedReplacePart",
    "type":"keyword",
    "info":"SymmetrizedReplacePart[sa, {pos  ï¢ val , pos  ï¢ val , â¦}] replaces independent values of the symmetr"
  },
  {
    "label":"SynchronousInitialization",
    "type":"keyword",
    "info":"SynchronousInitialization is an option for Manipulate, DynamicModule, and related functions that spe"
  },
  {
    "label":"SynchronousUpdating",
    "type":"keyword",
    "info":"SynchronousUpdating is an option for Manipulate, Dynamic, and related functions that specifies wheth"
  },
  {
    "label":"Synonyms",
    "type":"keyword",
    "info":"Synonyms[\"word\"] returns the synonyms associated with the specified word."
  },
  {
    "label":"Syntax",
    "type":"keyword",
    "info":"System`Syntax"
  },
  {
    "label":"SyntaxForm",
    "type":"keyword",
    "info":"SyntaxForm is an option for operator-like box objects that specifies the precedence level to use whe"
  },
  {
    "label":"SyntaxInformation",
    "type":"keyword",
    "info":"SyntaxInformation[f] gives information used to generate syntax coloring and other advisories when f["
  },
  {
    "label":"SyntaxLength",
    "type":"keyword",
    "info":"SyntaxLength[\"string\"] finds the number of characters starting at the beginning of a string that cor"
  },
  {
    "label":"SyntaxPacket",
    "type":"keyword",
    "info":"SyntaxPacket[integer] is a WSTP packet where integer indicates the position at which a syntax error "
  },
  {
    "label":"SyntaxQ",
    "type":"keyword",
    "info":"SyntaxQ[\"string\"] returns True if the string corresponds to syntactically correct input for a single"
  },
  {
    "label":"SynthesizeMissingValues",
    "type":"keyword",
    "info":"SynthesizeMissingValues[{example , example , â¦}] replaces missing values in each example by generate"
  },
  {
    "label":"SystemCredential",
    "type":"keyword",
    "info":"SystemCredential[\"keyname\"] gives the expression stored under \"keyname\" in secure storage."
  },
  {
    "label":"SystemCredentialData",
    "type":"keyword",
    "info":"SystemCredentialData[assoc, \"pwfield\"] represents data intended for secure credential storage. "
  },
  {
    "label":"SystemCredentialKey",
    "type":"keyword",
    "info":"SystemCredentialKey is an option of AuthenticationDialog that specifies the name for secure storage "
  },
  {
    "label":"SystemCredentialKeys",
    "type":"keyword",
    "info":"SystemCredentialKeys[\"patt\"] gives the list of keys in secure storage that match patt."
  },
  {
    "label":"SystemCredentialStoreObject",
    "type":"keyword",
    "info":"SystemCredentialStoreObject[assoc] represents a credential store."
  },
  {
    "label":"SystemDialogInput",
    "type":"keyword",
    "info":"SystemDialogInput[\"type\"] brings up an interactive system dialog and returns the value chosen in the"
  },
  {
    "label":"SystemException",
    "type":"keyword",
    "info":"System`SystemException"
  },
  {
    "label":"SystemGet",
    "type":"keyword",
    "info":"SystemGet[{sym , â¦}, \"filename\"] loads source file with path encoded in \"filename\"\n              1"
  },
  {
    "label":"SystemHelpPath",
    "type":"keyword",
    "info":"SystemHelpPath is a global option that specifies which directories are searched for the help noteboo"
  },
  {
    "label":"SystemInformation",
    "type":"keyword",
    "info":"SystemInformation[] gives detailed information about the Wolfram System being run. SystemInformation"
  },
  {
    "label":"SystemInformationData",
    "type":"keyword",
    "info":"System`SystemInformationData"
  },
  {
    "label":"SystemInstall",
    "type":"keyword",
    "info":"SystemInstall[pack] downloads and installs the software package pack on your machine."
  },
  {
    "label":"SystemModel",
    "type":"keyword",
    "info":"SystemModel[\"model\"] gives a representation of the model \"model\", usable as input to other functions"
  },
  {
    "label":"SystemModeler",
    "type":"keyword",
    "info":"SystemModeler[] starts SystemModeler. SystemModeler[model] starts SystemModeler and opens the System"
  },
  {
    "label":"SystemModelExamples",
    "type":"keyword",
    "info":"SystemModelExamples[] shows an interactive browser of system modeling example models. SystemModelExa"
  },
  {
    "label":"SystemModelLinearize",
    "type":"keyword",
    "info":"SystemModelLinearize[model] gives a linearized StateSpaceModel for model at an equilibrium. SystemMo"
  },
  {
    "label":"SystemModelParametricSimulate",
    "type":"keyword",
    "info":"SystemModelParametricSimulate[model, v, {p , p , â¦}] simulates model for the variable v with paramet"
  },
  {
    "label":"SystemModelPlot",
    "type":"keyword",
    "info":"SystemModelPlot[sim] shows default plots from the SystemModelSimulationData object sim.SystemModelPl"
  },
  {
    "label":"SystemModelProgressReporting",
    "type":"keyword",
    "info":"SystemModelProgressReporting is an option for SystemModelSimulate and related functions that specifi"
  },
  {
    "label":"SystemModelReliability",
    "type":"keyword",
    "info":"SystemModelReliability[model] retrieves the lifetime distribution for model.SystemModelReliability[m"
  },
  {
    "label":"SystemModels",
    "type":"keyword",
    "info":"SystemModels[] returns a list of loaded system models.SystemModels[patt] returns the models matching"
  },
  {
    "label":"SystemModelSimulate",
    "type":"keyword",
    "info":"SystemModelSimulate[model] simulates model according to experiment settings.SystemModelSimulate[mode"
  },
  {
    "label":"SystemModelSimulateSensitivity",
    "type":"keyword",
    "info":"SystemModelSimulateSensitivity[model, {p , p , â¦}] simulates model and sensitivities to parameters p"
  },
  {
    "label":"SystemModelSimulationData",
    "type":"keyword",
    "info":"SystemModelSimulationData[â¦] represents simulation data from functions such as SystemModelSimulate e"
  },
  {
    "label":"SystemOpen",
    "type":"keyword",
    "info":"SystemOpen[\"target\"] opens the specified file, URL, or other target with the associated program on y"
  },
  {
    "label":"SystemOptions",
    "type":"keyword",
    "info":"SystemOptions[\"name\"] gives the current setting for the internal system option with the specified na"
  },
  {
    "label":"SystemProcessData",
    "type":"keyword",
    "info":"SystemProcessData[] returns a Dataset containing information on the processes running on the host co"
  },
  {
    "label":"SystemProcesses",
    "type":"keyword",
    "info":"SystemProcesses[] returns a list of ProcessObjects that represent system programs."
  },
  {
    "label":"SystemsConnectionsModel",
    "type":"keyword",
    "info":"SystemsConnectionsModel[{sys , sys , â¦}, conxs, ins, outs] gives a model with inputs ins and outputs"
  },
  {
    "label":"SystemsModelControllerData",
    "type":"keyword",
    "info":"SystemsModelControllerData[â¦] represents controller data generated by functions LQGRegulator, PIDTun"
  },
  {
    "label":"SystemsModelDelay",
    "type":"keyword",
    "info":"SystemsModelDelay[Î\.b4] represents a time delay of Î\.b4 in a StateSpaceModel or TransferFunctionModel."
  },
  {
    "label":"SystemsModelDelayApproximate",
    "type":"keyword",
    "info":"SystemsModelDelayApproximate[sys, ord] gives a delay-free system by using approximations of order or"
  },
  {
    "label":"SystemsModelDelete",
    "type":"keyword",
    "info":"SystemsModelDelete[sys, {in , â¦}] deletes the subsystem of the systems model sys associated with inp"
  },
  {
    "label":"SystemsModelDimensions",
    "type":"keyword",
    "info":"SystemsModelDimensions[sys] gives the number of inputs and outputs of the systems model sys."
  },
  {
    "label":"SystemsModelExtract",
    "type":"keyword",
    "info":"SystemsModelExtract[sys, {in , â¦}] extracts the subsystem of the systems model sys associated with i"
  },
  {
    "label":"SystemsModelFeedbackConnect",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"SystemsModelLabels",
    "type":"keyword",
    "info":"SystemsModelLabels is an option to StateSpaceModel etc. that specifies labels of variables."
  },
  {
    "label":"SystemsModelLinearity",
    "type":"keyword",
    "info":"SystemsModelLinearity[sys] gives the linearity of the systems model sys.SystemsModelLinearity[{sys, "
  },
  {
    "label":"SystemsModelMerge",
    "type":"keyword",
    "info":"SystemsModelMerge[{sys , sys , â¦}] merges the systems models sys . \n                      1     2   "
  },
  {
    "label":"SystemsModelOrder",
    "type":"keyword",
    "info":"SystemsModelOrder[sys] gives the order of the state-space model sys."
  },
  {
    "label":"SystemsModelParallelConnect",
    "type":"keyword",
    "info":"SystemsModelParallelConnect[sys , sys ] connects the systems models sys  and sys  in parallel.System"
  },
  {
    "label":"SystemsModelSeriesConnect",
    "type":"keyword",
    "info":"SystemsModelSeriesConnect[sys , sys ] connects systems models sys  and sys  in series. SystemsModelS"
  },
  {
    "label":"SystemsModelStateFeedbackConnect",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"SystemsModelVectorRelativeOrders",
    "type":"keyword",
    "info":"SystemsModelVectorRelativeOrders[sys] gives the vector-relative orders of the systems model sys."
  },
  {
    "label":"SystemStub",
    "type":"keyword",
    "info":"SystemStub[{sym , sym , â¦}, \"context\", \"filename\"] saves definitions of given symbols {sym , sym , â¦"
  },
  {
    "label":"SystemTest",
    "type":"keyword",
    "info":"System`SystemTest"
  },
  {
    "label":"Tab",
    "type":"keyword",
    "info":"System`Tab"
  },
  {
    "label":"TabFilling",
    "type":"keyword",
    "info":"TabFilling is an option for character selections that specifies how a Tab character is represented o"
  },
  {
    "label":"Table",
    "type":"keyword",
    "info":"Table[expr, n] generates a list of n copies of expr. Table[expr, {i, i   }] generates a list of the "
  },
  {
    "label":"TableAlignments",
    "type":"keyword",
    "info":"TableAlignments is an option for TableForm and MatrixForm which specifies how entries in each dimens"
  },
  {
    "label":"TableDepth",
    "type":"keyword",
    "info":"TableDepth is an option for TableForm and MatrixForm that specifies the maximum number of levels to "
  },
  {
    "label":"TableDirections",
    "type":"keyword",
    "info":"TableDirections is an option for TableForm and MatrixForm which specifies whether successive dimensi"
  },
  {
    "label":"TableForm",
    "type":"keyword",
    "info":"TableForm[list] prints with the elements of list arranged in an array of rectangular cells. "
  },
  {
    "label":"TableHeadings",
    "type":"keyword",
    "info":"TableHeadings is an option for TableForm and MatrixForm that gives the labels to be printed for entr"
  },
  {
    "label":"TableSpacing",
    "type":"keyword",
    "info":"TableSpacing is an option for TableForm and MatrixForm that specifies how many spaces should be left"
  },
  {
    "label":"TableView",
    "type":"keyword",
    "info":"TableView[{{expr  , expr  , â¦}, {expr  , expr  , â¦}, â¦}] displays as a spreadsheet-like table view f"
  },
  {
    "label":"TableViewBox",
    "type":"keyword",
    "info":"System`TableViewBox"
  },
  {
    "label":"TableViewBoxAlignment",
    "type":"keyword",
    "info":"System`TableViewBoxAlignment"
  },
  {
    "label":"TableViewBoxBackground",
    "type":"keyword",
    "info":"System`TableViewBoxBackground"
  },
  {
    "label":"TableViewBoxHeaders",
    "type":"keyword",
    "info":"System`TableViewBoxHeaders"
  },
  {
    "label":"TableViewBoxItemSize",
    "type":"keyword",
    "info":"System`TableViewBoxItemSize"
  },
  {
    "label":"TableViewBoxItemStyle",
    "type":"keyword",
    "info":"System`TableViewBoxItemStyle"
  },
  {
    "label":"TableViewBoxOptions",
    "type":"keyword",
    "info":"System`TableViewBoxOptions"
  },
  {
    "label":"TabSpacings",
    "type":"keyword",
    "info":"TabSpacings is an option for character selections that specifies the number of spaces in ems that th"
  },
  {
    "label":"TabView",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"TabViewBox",
    "type":"keyword",
    "info":"System`TabViewBox"
  },
  {
    "label":"TabViewBoxOptions",
    "type":"keyword",
    "info":"TabViewBoxOptions ï¢ {opt  ï¢ val , opt  ï¢ val , â¦} is an option that specifies settings for TabViewBo"
  },
  {
    "label":"TagBox",
    "type":"keyword",
    "info":"TagBox[boxes, tag] is a low-level box construct that displays as boxes but maintains tag to guide th"
  },
  {
    "label":"TagBoxNote",
    "type":"keyword",
    "info":"System`TagBoxNote"
  },
  {
    "label":"TagBoxOptions",
    "type":"keyword",
    "info":"TagBoxOptions is an option that specifies settings for TagBox objects."
  },
  {
    "label":"TaggingRules",
    "type":"keyword",
    "info":"TaggingRules is an option for selections that specifies a list of strings to be associated with a se"
  },
  {
    "label":"TagSet",
    "type":"keyword",
    "info":"f\/:lhs = rhs assigns rhs to be the value of lhs, and associates the assignment with the symbol f. "
  },
  {
    "label":"TagSetDelayed",
    "type":"keyword",
    "info":"f\/:lhs := rhs assigns rhs to be the delayed value of lhs, and associates the assignment with the sym"
  },
  {
    "label":"TagStyle",
    "type":"keyword",
    "info":"System`TagStyle"
  },
  {
    "label":"TagUnset",
    "type":"keyword",
    "info":"f\/:lhs=. removes any rules defined for lhs, associated with the symbol f. "
  },
  {
    "label":"Take",
    "type":"keyword",
    "info":"Take[list, n] gives the first n elements of list. Take[list, -n] gives the last n elements of list. "
  },
  {
    "label":"TakeDrop",
    "type":"keyword",
    "info":"TakeDrop[list, n] gives the pair {list , list }, where list  contains the first n elements of list a"
  },
  {
    "label":"TakeLargest",
    "type":"keyword",
    "info":"TakeLargest[list, n] gives the n numerically largest elements in list, sorted in descending order.Ta"
  },
  {
    "label":"TakeLargestBy",
    "type":"keyword",
    "info":"TakeLargestBy[list, f, n] gives the n elements e  in list for which f[e ] is largest, sorted in d"
  },
  {
    "label":"TakeList",
    "type":"keyword",
    "info":"TakeList[list, {n , n , â¦}] gives the list of results obtained by successively taking n  elements fr"
  },
  {
    "label":"TakeSmallest",
    "type":"keyword",
    "info":"TakeSmallest[list, n] gives the n numerically smallest elements in list, sorted in ascending order.T"
  },
  {
    "label":"TakeSmallestBy",
    "type":"keyword",
    "info":"TakeSmallestBy[list, f, n] gives the n elements e  in list for which f[e ] is smallest, sorted in as"
  },
  {
    "label":"TakeWhile",
    "type":"keyword",
    "info":"TakeWhile[list, crit] gives elements e  from the beginning of list, continuing so long as crit[e ] i"
  },
  {
    "label":"Tally",
    "type":"keyword",
    "info":"Tally[list] tallies the elements in list, listing all distinct elements together with their multipli"
  },
  {
    "label":"Tan",
    "type":"keyword",
    "info":"Tan[z] gives the tangent of z."
  },
  {
    "label":"Tanh",
    "type":"keyword",
    "info":"Tanh[z] gives the hyperbolic tangent of z."
  },
  {
    "label":"TargetDevice",
    "type":"keyword",
    "info":"TargetDevice is an option for certain functions that specifies whether CPU or GPU computation should"
  },
  {
    "label":"TargetFunctions",
    "type":"keyword",
    "info":"TargetFunctions is an option for functions such as ComplexExpand and FindDistribution that specifies"
  },
  {
    "label":"TargetSystem",
    "type":"keyword",
    "info":"TargetSystem is an option for FunctionCompile and related functions that specifies machine architect"
  },
  {
    "label":"TargetUnits",
    "type":"keyword",
    "info":"TargetUnits is an option used to specify the desired output units for visualization functions operat"
  },
  {
    "label":"TaskAbort",
    "type":"keyword",
    "info":"TaskAbort[task] generates an interrupt to abort the current execution of a task."
  },
  {
    "label":"TaskExecute",
    "type":"keyword",
    "info":"TaskExecute[task] immediately executes an instance of the specified task, independently of any sched"
  },
  {
    "label":"TaskObject",
    "type":"keyword",
    "info":"TaskObject[spec] is an object that represents a background task."
  },
  {
    "label":"TaskRemove",
    "type":"keyword",
    "info":"TaskRemove[task] terminates and removes the specified task."
  },
  {
    "label":"TaskResume",
    "type":"keyword",
    "info":"TaskResume[task] resumes execution of the specified task."
  },
  {
    "label":"Tasks",
    "type":"keyword",
    "info":"Tasks[type] gives a list of TaskObject expressions representing currently submitted tasks of given t"
  },
  {
    "label":"TaskSuspend",
    "type":"keyword",
    "info":"TaskSuspend[task] suspends the execution of the specified task."
  },
  {
    "label":"TaskWait",
    "type":"keyword",
    "info":"TaskWait[task] waits for the specified task to be completely finished. "
  },
  {
    "label":"TautologyQ",
    "type":"keyword",
    "info":"TautologyQ[bf] gives True if all combinations of values of variables make the Boolean function bf yi"
  },
  {
    "label":"TelegraphProcess",
    "type":"keyword",
    "info":"TelegraphProcess[Î¼] represents a telegraph process with rate Î¼."
  },
  {
    "label":"TemplateApply",
    "type":"keyword",
    "info":"TemplateApply[template] applies a template, evaluating all template elements it contains.TemplateApp"
  },
  {
    "label":"TemplateArgBox",
    "type":"keyword",
    "info":"System`TemplateArgBox"
  },
  {
    "label":"TemplateBox",
    "type":"keyword",
    "info":"TemplateBox[{box , box , â¦}, tag] is a low-level box structure that parameterizes the display and ev"
  },
  {
    "label":"TemplateBoxOptions",
    "type":"keyword",
    "info":"TemplateBoxOptions is an option that specifies settings for TemplateBox objects."
  },
  {
    "label":"TemplateEvaluate",
    "type":"keyword",
    "info":"System`TemplateEvaluate"
  },
  {
    "label":"TemplateExpression",
    "type":"keyword",
    "info":"TemplateExpression[expr] represents an expression held until a template is applied, and then evaluat"
  },
  {
    "label":"TemplateIf",
    "type":"keyword",
    "info":"TemplateIf[condition, tclause] represents an element of a template object that inserts tclause if th"
  },
  {
    "label":"TemplateObject",
    "type":"keyword",
    "info":"TemplateObject[expr] represents a template object to be applied using functions like TemplateApply.T"
  },
  {
    "label":"TemplateSequence",
    "type":"keyword",
    "info":"TemplateSequence[body, list] represents an element of a template object that yields a sequence consi"
  },
  {
    "label":"TemplateSlot",
    "type":"keyword",
    "info":"                                                                   th\nTemplateSlot[n] represents a t"
  },
  {
    "label":"TemplateSlotSequence",
    "type":"keyword",
    "info":"System`TemplateSlotSequence"
  },
  {
    "label":"TemplateUnevaluated",
    "type":"keyword",
    "info":"System`TemplateUnevaluated"
  },
  {
    "label":"TemplateVerbatim",
    "type":"keyword",
    "info":"System`TemplateVerbatim"
  },
  {
    "label":"TemplateWith",
    "type":"keyword",
    "info":"TemplateWith[\"name\" ï¢ value, expr] represents an element of a template object that evaluates expr af"
  },
  {
    "label":"TemporalData",
    "type":"keyword",
    "info":"TemporalData[{v , v , â¦}, tspec] represents temporal data with values v  at times specified by tspec"
  },
  {
    "label":"TemporalRegularity",
    "type":"keyword",
    "info":"TemporalRegularity is an option for TemporalData, TimeSeries, and EventSeries that controls whether "
  },
  {
    "label":"Temporary",
    "type":"keyword",
    "info":"Temporary is an attribute assigned to symbols which are created as local variables by Module. "
  },
  {
    "label":"TemporaryVariable",
    "type":"keyword",
    "info":"System`TemporaryVariable"
  },
  {
    "label":"TensorContract",
    "type":"keyword",
    "info":"TensorContract[tensor, {{s  , s  }, {s  , s  }, â¦}] yields the contraction of tensor in the pairs {s"
  },
  {
    "label":"TensorDimensions",
    "type":"keyword",
    "info":"TensorDimensions[tensor] gives the list of dimensions of tensor."
  },
  {
    "label":"TensorExpand",
    "type":"keyword",
    "info":"TensorExpand[texpr] expands out tensor-related products in the symbolic tensor expression texpr."
  },
  {
    "label":"TensorProduct",
    "type":"keyword",
    "info":"TensorProduct[tensor , tensor , â¦] represents the tensor product of the tensor .\n                   "
  },
  {
    "label":"TensorQ",
    "type":"keyword",
    "info":"System`TensorQ"
  },
  {
    "label":"TensorRank",
    "type":"keyword",
    "info":"TensorRank[tensor] gives the rank of tensor."
  },
  {
    "label":"TensorReduce",
    "type":"keyword",
    "info":"TensorReduce[texpr] attempts to return a canonical form for the symbolic tensor expression texpr."
  },
  {
    "label":"TensorSymmetry",
    "type":"keyword",
    "info":"TensorSymmetry[tensor] gives the symmetry of tensor under permutations of its slots.TensorSymmetry[t"
  },
  {
    "label":"TensorTranspose",
    "type":"keyword",
    "info":"TensorTranspose[tensor, perm] represents the tensor obtained by transposing the slots of tensor as g"
  },
  {
    "label":"TensorWedge",
    "type":"keyword",
    "info":"TensorWedge[tensor , tensor , â¦] represents the antisymmetrized tensor product of the tensor .\n     "
  },
  {
    "label":"TestID",
    "type":"keyword",
    "info":"TestID is an option to VerificationTest that specifies a string used as an identifier for the test."
  },
  {
    "label":"TestReport",
    "type":"keyword",
    "info":"TestReport[\"file\"] runs tests from a file, returning an analysis of the completed test run.TestRepor"
  },
  {
    "label":"TestReportObject",
    "type":"keyword",
    "info":"TestReportObject[â¦] gives an object that represents the results of TestReport."
  },
  {
    "label":"TestResultObject",
    "type":"keyword",
    "info":"TestResultObject[â¦] gives an object that represents the results of a VerificationTest."
  },
  {
    "label":"Tetrahedron",
    "type":"keyword",
    "info":"Tetrahedron[] represents a regular tetrahedron centered at the origin with unit edge length.Tetrahed"
  },
  {
    "label":"TetrahedronBox",
    "type":"keyword",
    "info":"System`TetrahedronBox"
  },
  {
    "label":"TetrahedronBoxOptions",
    "type":"keyword",
    "info":"System`TetrahedronBoxOptions"
  },
  {
    "label":"TeXForm",
    "type":"keyword",
    "info":"TeXForm[expr] prints as a TeX version of expr. "
  },
  {
    "label":"TeXSave",
    "type":"keyword",
    "info":"TeXSave[\"file.tex\"] saves a TeX version of the current input notebook in the front end. TeXSave[\"fil"
  },
  {
    "label":"Text",
    "type":"keyword",
    "info":"Text[expr] displays with expr in plain text format. Text[expr, coords] is a graphics primitive that "
  },
  {
    "label":"Text3DBox",
    "type":"keyword",
    "info":"System`Text3DBox"
  },
  {
    "label":"Text3DBoxOptions",
    "type":"keyword",
    "info":"Text3DBoxOptions ï¢ {opt  ï¢ val , opt  ï¢ val , â¦} is an option that specifies settings for Text3DBox "
  },
  {
    "label":"TextAlignment",
    "type":"keyword",
    "info":"TextAlignment is an option for Cell, Style and related constructs which specifies how successive lin"
  },
  {
    "label":"TextBand",
    "type":"keyword",
    "info":"System`TextBand"
  },
  {
    "label":"TextBoundingBox",
    "type":"keyword",
    "info":"System`TextBoundingBox"
  },
  {
    "label":"TextBox",
    "type":"keyword",
    "info":"System`TextBox"
  },
  {
    "label":"TextCases",
    "type":"keyword",
    "info":"TextCases[text, form] gives a list of all cases of text identified as being of type form that appear"
  },
  {
    "label":"TextCell",
    "type":"keyword",
    "info":"TextCell[\"string\"] gives a text cell that can appear in a Wolfram System notebook.TextCell[\"string\","
  },
  {
    "label":"TextClipboardType",
    "type":"keyword",
    "info":"TextClipboardType is an option for cells that specifies how Edit â\\[Paragraph] Copy treats a cell when convertin"
  },
  {
    "label":"TextContents",
    "type":"keyword",
    "info":"TextContents[text] gives a dataset of information about entities, dates, quantities and other conten"
  },
  {
    "label":"TextData",
    "type":"keyword",
    "info":"TextData[exprs] is a low-level representation of the contents of a textual cell."
  },
  {
    "label":"TextElement",
    "type":"keyword",
    "info":"TextElement[text, props] represents an element of text with the specified properties.TextElement[{el"
  },
  {
    "label":"TextForm",
    "type":"keyword",
    "info":"System`TextForm"
  },
  {
    "label":"TextGrid",
    "type":"keyword",
    "info":"TextGrid[{{expr  , expr  , â¦}, {expr  , expr  , â¦}, â¦}] is an object that formats expr   textually a"
  },
  {
    "label":"TextJustification",
    "type":"keyword",
    "info":"TextJustification is an option for Cell and Inset which specifies how much lines of text can be stre"
  },
  {
    "label":"TextLine",
    "type":"keyword",
    "info":"System`TextLine"
  },
  {
    "label":"TextPacket",
    "type":"keyword",
    "info":"TextPacket[string] is a WSTP packet containing string, the text output from the Wolfram System as pr"
  },
  {
    "label":"TextParagraph",
    "type":"keyword",
    "info":"System`TextParagraph"
  },
  {
    "label":"TextPosition",
    "type":"keyword",
    "info":"TextPosition[text, form] gives a list of the starting and ending positions at which instances of for"
  },
  {
    "label":"TextRecognize",
    "type":"keyword",
    "info":"TextRecognize[image] recognizes text in image and returns it as a string.TextRecognize[image, level]"
  },
  {
    "label":"TextSearch",
    "type":"keyword",
    "info":"TextSearch[source, form] searches for files referenced by source that contain text matching form.Tex"
  },
  {
    "label":"TextSearchReport",
    "type":"keyword",
    "info":"TextSearchReport[source, form] gives a structured report of files referenced by source that contain "
  },
  {
    "label":"TextSentences",
    "type":"keyword",
    "info":"TextSentences[\"string\"] gives a list of the runs of characters identified as sentences in string.Tex"
  },
  {
    "label":"TextString",
    "type":"keyword",
    "info":"TextString[expr] gives a human-readable string representation of expr."
  },
  {
    "label":"TextStructure",
    "type":"keyword",
    "info":"TextStructure[\"text\"] generates a nested collection of TextElement objects representing the grammati"
  },
  {
    "label":"TextStyle",
    "type":"keyword",
    "info":"TextStyle is an option for graphics functions and for Text which specifies the default style and fon"
  },
  {
    "label":"TextTranslation",
    "type":"keyword",
    "info":"TextTranslation[\"text\"] translates text into the current default language. TextTranslation[\"text\", l"
  },
  {
    "label":"Texture",
    "type":"keyword",
    "info":"Texture[obj] is a graphics directive that specifies that obj should be used as a texture on faces of"
  },
  {
    "label":"TextureCoordinateFunction",
    "type":"keyword",
    "info":"TextureCoordinateFunction is an option to Plot3D and similar functions that specifies a function tha"
  },
  {
    "label":"TextureCoordinateScaling",
    "type":"keyword",
    "info":"TextureCoordinateScaling is an option to Plot3D and similar functions that specifies whether argumen"
  },
  {
    "label":"TextWords",
    "type":"keyword",
    "info":"TextWords[\"string\"] gives a list of the runs of characters identified as words in string.TextWords[\""
  },
  {
    "label":"Therefore",
    "type":"keyword",
    "info":"Therefore[x, y] displays as x â\.b4 y."
  },
  {
    "label":"ThermodynamicData",
    "type":"keyword",
    "info":"ThermodynamicData[\"name\", \"property\"] gives the value of the specific property for the substance \"na"
  },
  {
    "label":"ThermometerGauge",
    "type":"keyword",
    "info":"ThermometerGauge[value] draws a thermometer showing value in a range of 0 to 1.ThermometerGauge[valu"
  },
  {
    "label":"Thick",
    "type":"keyword",
    "info":"Thick is a graphics directive that specifies that lines which follow should be drawn thick."
  },
  {
    "label":"Thickness",
    "type":"keyword",
    "info":"Thickness[r] is a graphics directive which specifies that lines which follow are to be drawn with th"
  },
  {
    "label":"Thin",
    "type":"keyword",
    "info":"Thin is a graphics directive that specifies that lines which follow should be drawn thin."
  },
  {
    "label":"Thinning",
    "type":"keyword",
    "info":"Thinning[image] finds the skeletons of foreground regions in image by applying morphological thinnin"
  },
  {
    "label":"ThisLink",
    "type":"keyword",
    "info":"ThisLink is used in patterns for external packages to distinguish between several instances of the s"
  },
  {
    "label":"ThomasPointProcess",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"ThompsonGroupTh",
    "type":"keyword",
    "info":"ThompsonGroupTh[] represents the sporadic simple Thompson group Th."
  },
  {
    "label":"Thread",
    "type":"keyword",
    "info":"Thread[f[args]] \"threads\" f over any lists that appear in args. Thread[f[args], h] threads f over an"
  },
  {
    "label":"ThreadingLayer",
    "type":"keyword",
    "info":"ThreadingLayer[f] represents a net layer that takes several input arrays and applies a function f to"
  },
  {
    "label":"ThreeJSymbol",
    "type":"keyword",
    "info":"ThreeJSymbol[{j , m }, {j , m }, {j , m }] gives the values of the Wigner 3âj symbol. \n             "
  },
  {
    "label":"Threshold",
    "type":"keyword",
    "info":"Threshold[data] thresholds data by replacing values close to zero by zero.Threshold[data, tspec] thr"
  },
  {
    "label":"Through",
    "type":"keyword",
    "info":"Through[p[f , f ][x]] gives p[f [x], f [x]]. Through[expr, h] performs the transformation wherever h"
  },
  {
    "label":"Throw",
    "type":"keyword",
    "info":"Throw[value] stops evaluation and returns value as the value of the nearest enclosing Catch.Throw[va"
  },
  {
    "label":"ThueMorse",
    "type":"keyword",
    "info":"                         th\nThueMorse[n] gives the nï    term in the ThueâMorse sequence."
  },
  {
    "label":"Thumbnail",
    "type":"keyword",
    "info":"Thumbnail[image] gives a thumbnail version of an image.Thumbnail[file] gives a thumbnail of an image"
  },
  {
    "label":"Thursday",
    "type":"keyword",
    "info":"Thursday is a day of the week."
  },
  {
    "label":"TickDirection",
    "type":"keyword",
    "info":"TickDirection is an option for AxisObject that specifies where the ticks are drawn relative to the a"
  },
  {
    "label":"TickLabelOrientation",
    "type":"keyword",
    "info":"TickLabelOrientation is an option for AxisObject that specifies how the tick labels should be orient"
  },
  {
    "label":"TickLabelPositioning",
    "type":"keyword",
    "info":"TickLabelPositioning is an option for AxisObject that specifies how the tick labels should be positi"
  },
  {
    "label":"TickLabels",
    "type":"keyword",
    "info":"TickLabels is an option for AxisObject that specifies how the tick marks should be labeled."
  },
  {
    "label":"TickLengths",
    "type":"keyword",
    "info":"TickLengths is an option for AxisObject that specifies the lengths of the tick marks."
  },
  {
    "label":"TickPositions",
    "type":"keyword",
    "info":"TickPositions is an option for AxisObject that specifies where the tick marks should be positioned."
  },
  {
    "label":"Ticks",
    "type":"keyword",
    "info":"Ticks is an option for graphics functions that specifies tick marks for axes. "
  },
  {
    "label":"TicksStyle",
    "type":"keyword",
    "info":"TicksStyle is an option for graphics functions which specifies how ticks should be rendered."
  },
  {
    "label":"TideData",
    "type":"keyword",
    "info":"TideData[spec] returns the tidal properties for a location or a set of tidal parameters.TideData[spe"
  },
  {
    "label":"Tilde",
    "type":"keyword",
    "info":"Tilde[x, y, â¦] displays as x â¼ y â¼ â¦."
  },
  {
    "label":"TildeEqual",
    "type":"keyword",
    "info":"TildeEqual[x, y, â¦] displays as x â y â â¦."
  },
  {
    "label":"TildeFullEqual",
    "type":"keyword",
    "info":"TildeFullEqual[x, y, â¦] displays as x â y â â¦."
  },
  {
    "label":"TildeTilde",
    "type":"keyword",
    "info":"TildeTilde[x, y, â¦] displays as x â y â â¦."
  },
  {
    "label":"TimeConstrained",
    "type":"keyword",
    "info":"TimeConstrained[expr, t] evaluates expr, stopping after t seconds. TimeConstrained[expr, t, failexpr"
  },
  {
    "label":"TimeConstraint",
    "type":"keyword",
    "info":"TimeConstraint is an option for various functions that specifies the maximum time to spend doing a p"
  },
  {
    "label":"TimeDirection",
    "type":"keyword",
    "info":"TimeDirection is an option for Sunrise, Sunset, and related functions that specifies whether the nex"
  },
  {
    "label":"TimeFormat",
    "type":"keyword",
    "info":"TimeFormat is an option that determines the time formatting that is used when formatting a TimeObjec"
  },
  {
    "label":"TimeGoal",
    "type":"keyword",
    "info":"TimeGoal is an option for various functions that specifies how long to spend doing a particular oper"
  },
  {
    "label":"TimelinePlot",
    "type":"keyword",
    "info":"TimelinePlot[{date , date , â¦}] makes a timeline plot with dates date , date , â¦. TimelinePlot[{even"
  },
  {
    "label":"TimeObject",
    "type":"keyword",
    "info":"TimeObject[] represents the current time.TimeObject[{h, m, s}] represents a time object of standard "
  },
  {
    "label":"TimeObjectQ",
    "type":"keyword",
    "info":"TimeObjectQ[expr] gives True if expr is a TimeObject with valid arguments, and False otherwise."
  },
  {
    "label":"TimeRemaining",
    "type":"keyword",
    "info":"TimeRemaining[] gives the number of seconds remaining until the earliest enclosing TimeConstrained w"
  },
  {
    "label":"Times",
    "type":"keyword",
    "info":"x * y * z, x Ã y Ã z, or x y z represents a product of terms. "
  },
  {
    "label":"TimesBy",
    "type":"keyword",
    "info":"x *= c multiplies x by c and returns the new value of x. "
  },
  {
    "label":"TimeSeries",
    "type":"keyword",
    "info":"TimeSeries[{{t , v }, {t , v } â¦}] represents a time series specified by time-value pairs {t , v }.T"
  },
  {
    "label":"TimeSeriesAggregate",
    "type":"keyword",
    "info":"TimeSeriesAggregate[tseries, dt] computes the mean value of tseries over non-overlapping windows of "
  },
  {
    "label":"TimeSeriesForecast",
    "type":"keyword",
    "info":"TimeSeriesForecast[tproc, data, k] gives the k-step-ahead forecast beyond data according to the time"
  },
  {
    "label":"TimeSeriesInsert",
    "type":"keyword",
    "info":"TimeSeriesInsert[tseries, {t, v}] inserts a value v at time t in the time series tseries.TimeSeriesI"
  },
  {
    "label":"TimeSeriesInvertibility",
    "type":"keyword",
    "info":"TimeSeriesInvertibility[tproc] gives conditions for the time series process tproc to be invertible. "
  },
  {
    "label":"TimeSeriesMap",
    "type":"keyword",
    "info":"TimeSeriesMap[f, tseries] applies f to the values in tseries."
  },
  {
    "label":"TimeSeriesMapThread",
    "type":"keyword",
    "info":"TimeSeriesMapThread[f, tseries] gives {{t , f[t , x ]}, {t , f[t , x ]}, â¦} for the time series tser"
  },
  {
    "label":"TimeSeriesModel",
    "type":"keyword",
    "info":"TimeSeriesModel[â¦] represents the symbolic time series model obtained from TimeSeriesModelFit."
  },
  {
    "label":"TimeSeriesModelFit",
    "type":"keyword",
    "info":"TimeSeriesModelFit[data] constructs a time series model for data from an automatically selected mode"
  },
  {
    "label":"TimeSeriesResample",
    "type":"keyword",
    "info":"TimeSeriesResample[tseries] uniformly resamples tseries according to its minimum time increment.Time"
  },
  {
    "label":"TimeSeriesRescale",
    "type":"keyword",
    "info":"TimeSeriesRescale[tseries, {t   , t   }] rescales the times in time series tseries to run from t    "
  },
  {
    "label":"TimeSeriesShift",
    "type":"keyword",
    "info":"TimeSeriesShift[tseries, shift] shifts the time series tseries to the left or right according to shi"
  },
  {
    "label":"TimeSeriesThread",
    "type":"keyword",
    "info":"TimeSeriesThread[f, {tseries , tseries , â¦}] combines the tseries  using the function f.\n           "
  },
  {
    "label":"TimeSeriesWindow",
    "type":"keyword",
    "info":"TimeSeriesWindow[tseries, {t   , t   }] gives the elements of the time series tseries that fall betw"
  },
  {
    "label":"TimeSystem",
    "type":"keyword",
    "info":"TimeSystem is an option for time functions that specifies the time system being used to define time."
  },
  {
    "label":"TimeSystemConvert",
    "type":"keyword",
    "info":"TimeSystemConvert[date, tsys] converts the date object date to the specified time system tsys.TimeSy"
  },
  {
    "label":"TimeUsed",
    "type":"keyword",
    "info":"TimeUsed[] gives the total number of seconds of CPU time used so far in the current Wolfram System s"
  },
  {
    "label":"TimeValue",
    "type":"keyword",
    "info":"TimeValue[s, i, t] calculates the time value of a security s at time t for an interest specified by "
  },
  {
    "label":"TimeWarpingCorrespondence",
    "type":"keyword",
    "info":"TimeWarpingCorrespondence[s , s ] gives the time warping (DTW) similarity path between sequences s  "
  },
  {
    "label":"TimeWarpingDistance",
    "type":"keyword",
    "info":"TimeWarpingDistance[s , s ] gives the dynamic time warping (DTW) distance between sequences s  and s"
  },
  {
    "label":"TimeZone",
    "type":"keyword",
    "info":"TimeZone is an option for DateObject, DateString, and related functions that specifies the time zone"
  },
  {
    "label":"TimeZoneConvert",
    "type":"keyword",
    "info":"TimeZoneConvert[time, timezone] converts the date or time object time to the specified time zone tim"
  },
  {
    "label":"TimeZoneOffset",
    "type":"keyword",
    "info":"TimeZoneOffset[tz] gives the numeric offset between the time zone tz and GMT on the current date.Tim"
  },
  {
    "label":"Timing",
    "type":"keyword",
    "info":"Timing[expr] evaluates expr, and returns a list of the time in seconds used, together with the resul"
  },
  {
    "label":"Tiny",
    "type":"keyword",
    "info":"Tiny is a style or option setting that specifies that objects should be tiny."
  },
  {
    "label":"TitleGrouping",
    "type":"keyword",
    "info":"System`TitleGrouping"
  },
  {
    "label":"TitsGroupT",
    "type":"keyword",
    "info":"TitsGroupT[] represents the simple Tits group T."
  },
  {
    "label":"ToBoxes",
    "type":"keyword",
    "info":"ToBoxes[expr] generates boxes corresponding to the printed form of expr in StandardForm. ToBoxes[exp"
  },
  {
    "label":"ToCharacterCode",
    "type":"keyword",
    "info":"ToCharacterCode[\"string\"] gives a list of the integer codes corresponding to the characters in a str"
  },
  {
    "label":"ToColor",
    "type":"keyword",
    "info":"ToColor[color, form] converts color to form if form is GrayLevel, RGBColor or CMYKColor. Otherwise f"
  },
  {
    "label":"ToContinuousTimeModel",
    "type":"keyword",
    "info":"ToContinuousTimeModel[lsys] gives the continuous-time approximation of the discrete-time systems mod"
  },
  {
    "label":"ToDate",
    "type":"keyword",
    "info":"ToDate[time] converts an absolute time in seconds since the beginning of January 1, 1900 to a date o"
  },
  {
    "label":"Today",
    "type":"keyword",
    "info":"Today gives a DateObject representing the current day."
  },
  {
    "label":"ToDiscreteTimeModel",
    "type":"keyword",
    "info":"ToDiscreteTimeModel[lsys, Ï] gives the discrete-time approximation, with sampling period Ï, of the c"
  },
  {
    "label":"ToEntity",
    "type":"keyword",
    "info":"ToEntity[expr] returns an entity object corresponding to the given expression.ToEntity[expr, type] r"
  },
  {
    "label":"ToeplitzMatrix",
    "type":"keyword",
    "info":"ToeplitzMatrix[n] gives the nÃn Toeplitz matrix with first row and first column being successive int"
  },
  {
    "label":"ToExpression",
    "type":"keyword",
    "info":"ToExpression[input] gives the expression obtained by interpreting strings or boxes as Wolfram Langua"
  },
  {
    "label":"ToFileName",
    "type":"keyword",
    "info":"ToFileName[\"directory\", \"name\"] assembles a full file name from a directory name and a file name. To"
  },
  {
    "label":"Together",
    "type":"keyword",
    "info":"Together[expr] puts terms in a sum over a common denominator, and cancels factors in the result. "
  },
  {
    "label":"Toggle",
    "type":"keyword",
    "info":"System`Toggle"
  },
  {
    "label":"ToggleFalse",
    "type":"keyword",
    "info":"System`ToggleFalse"
  },
  {
    "label":"Toggler",
    "type":"keyword",
    "info":"Toggler[x] represents a toggler button with setting x, that toggles between True and False. Toggler["
  },
  {
    "label":"TogglerBar",
    "type":"keyword",
    "info":"TogglerBar[x, {val , val , â¦}] represents a toggler bar with setting x and with toggler buttons for "
  },
  {
    "label":"TogglerBox",
    "type":"keyword",
    "info":"System`TogglerBox"
  },
  {
    "label":"TogglerBoxOptions",
    "type":"keyword",
    "info":"TogglerBoxOptions ï¢ {opt  ï¢ val , opt  ï¢ val , â¦} is an option that specifies settings for TogglerBo"
  },
  {
    "label":"ToHeldExpression",
    "type":"keyword",
    "info":"System`ToHeldExpression"
  },
  {
    "label":"ToInvertibleTimeSeries",
    "type":"keyword",
    "info":"ToInvertibleTimeSeries[tproc] returns an invertible version of a time series process tproc."
  },
  {
    "label":"TokenWords",
    "type":"keyword",
    "info":"TokenWords is an option for Read and related functions which gives a list of token words to be used "
  },
  {
    "label":"Tolerance",
    "type":"keyword",
    "info":"Tolerance is an option for various numerical options which specifies the tolerance that should be al"
  },
  {
    "label":"ToLowerCase",
    "type":"keyword",
    "info":"ToLowerCase[string] yields a string in which all letters have been converted to lowercase. "
  },
  {
    "label":"Tomorrow",
    "type":"keyword",
    "info":"Tomorrow gives a DateObject representing the following day."
  },
  {
    "label":"ToNumberField",
    "type":"keyword",
    "info":"ToNumberField[a, Î¸] expresses the algebraic number a in the number field generated by Î¸. ToNumberFie"
  },
  {
    "label":"TooBig",
    "type":"keyword",
    "info":"TooBig is an internal symbol."
  },
  {
    "label":"Tooltip",
    "type":"keyword",
    "info":"Tooltip[expr, label] displays label as a tooltip while the mouse pointer is in the area where expr i"
  },
  {
    "label":"TooltipBox",
    "type":"keyword",
    "info":"System`TooltipBox"
  },
  {
    "label":"TooltipBoxOptions",
    "type":"keyword",
    "info":"TooltipBoxOptions ï¢ {opt  ï¢ val , opt  ï¢ val , â¦} is an option that specifies settings for TooltipBo"
  },
  {
    "label":"TooltipDelay",
    "type":"keyword",
    "info":"TooltipDelay is an option for objects such as Tooltip that specifies how long to delay after the mou"
  },
  {
    "label":"TooltipStyle",
    "type":"keyword",
    "info":"TooltipStyle is an option for tooltips that specifies the style to use in displaying their elements."
  },
  {
    "label":"ToonShading",
    "type":"keyword",
    "info":"ToonShading[] is a three-dimensional graphics directive specifying that surfaces that follow are to "
  },
  {
    "label":"Top",
    "type":"keyword",
    "info":"Top is a symbol that represents the top for purposes of alignment and positioning. "
  },
  {
    "label":"TopHatTransform",
    "type":"keyword",
    "info":"TopHatTransform[image, ker] gives the morphological top-hat transform of image with respect to struc"
  },
  {
    "label":"ToPolarCoordinates",
    "type":"keyword",
    "info":"ToPolarCoordinates[{x, y}] gives the {r, Î¸} polar coordinates corresponding to the Cartesian coordin"
  },
  {
    "label":"TopologicalSort",
    "type":"keyword",
    "info":"TopologicalSort[g] gives a list of vertices of g in topologically sorted order for a directed acycli"
  },
  {
    "label":"ToRadicals",
    "type":"keyword",
    "info":"ToRadicals[expr] attempts to express all Root objects in expr in terms of radicals. "
  },
  {
    "label":"ToRules",
    "type":"keyword",
    "info":"ToRules[eqns] takes logical combinations of equations, in the form generated by Roots and Reduce, an"
  },
  {
    "label":"Torus",
    "type":"keyword",
    "info":"Torus[{x, y, z}, {r     , r     }] represents a torus centered at {x, y, z} with inner radius r     "
  },
  {
    "label":"ToSphericalCoordinates",
    "type":"keyword",
    "info":"ToSphericalCoordinates[{x, y, z}] gives the {r, Î¸, Ï} spherical coordinates corresponding to the Car"
  },
  {
    "label":"ToString",
    "type":"keyword",
    "info":"ToString[expr] gives a string corresponding to the printed form of expr in OutputForm. ToString[expr"
  },
  {
    "label":"Total",
    "type":"keyword",
    "info":"Total[list] gives the total of the elements in list. Total[list, n] totals all elements down to leve"
  },
  {
    "label":"TotalHeight",
    "type":"keyword",
    "info":"System`TotalHeight"
  },
  {
    "label":"TotalLayer",
    "type":"keyword",
    "info":"TotalLayer[] represents a net layer taking a list of input arrays and performing elementwise additio"
  },
  {
    "label":"TotalVariationFilter",
    "type":"keyword",
    "info":"TotalVariationFilter[data] iteratively reduces noise while preserving rapid transitions in data.Tota"
  },
  {
    "label":"TotalWidth",
    "type":"keyword",
    "info":"TotalWidth is an option that can be set for output streams to specify the maximum total number of ch"
  },
  {
    "label":"TouchPosition",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"TouchscreenAutoZoom",
    "type":"keyword",
    "info":"TouchscreenAutoZoom is an option for Manipulate and Graphics3D that determines whether the interface"
  },
  {
    "label":"TouchscreenControlPlacement",
    "type":"keyword",
    "info":"TouchscreenControlPlacement is an option for Manipulate that determines the placement of the slide-o"
  },
  {
    "label":"ToUpperCase",
    "type":"keyword",
    "info":"ToUpperCase[string] yields a string in which all letters have been converted to uppercase. "
  },
  {
    "label":"TourVideo",
    "type":"keyword",
    "info":"TourVideo[graphics, {pt , pt , â¦}] generates a video by taking a tour at points pt  around graphics."
  },
  {
    "label":"Tr",
    "type":"keyword",
    "info":"Tr[list] finds the trace of the matrix or tensor list. Tr[list, f] finds a generalized trace, combin"
  },
  {
    "label":"Trace",
    "type":"keyword",
    "info":"Trace[expr] generates a list of all expressions used in the evaluation of expr. Trace[expr, form] in"
  },
  {
    "label":"TraceAbove",
    "type":"keyword",
    "info":"TraceAbove is an option for Trace and related functions which specifies whether to include evaluatio"
  },
  {
    "label":"TraceAction",
    "type":"keyword",
    "info":"TraceAction is an option for TracePrint and TraceDialog that specifies the function to be applied to"
  },
  {
    "label":"TraceBackward",
    "type":"keyword",
    "info":"TraceBackward is an option for Trace and related functions that specifies whether to include precedi"
  },
  {
    "label":"TraceDepth",
    "type":"keyword",
    "info":"TraceDepth is an option for Trace and related functions which specifies the maximum nesting of evalu"
  },
  {
    "label":"TraceDialog",
    "type":"keyword",
    "info":"TraceDialog[expr] initiates a dialog for every expression used in the evaluation of expr. TraceDialo"
  },
  {
    "label":"TraceForward",
    "type":"keyword",
    "info":"TraceForward is an option for Trace and related functions which specifies whether to include later e"
  },
  {
    "label":"TraceInternal",
    "type":"keyword",
    "info":"TraceInternal is an option for Trace and related functions which, if True or False, specifies whethe"
  },
  {
    "label":"TraceLevel",
    "type":"keyword",
    "info":"TraceLevel[] returns the level currently being traced when it appears within Trace and related funct"
  },
  {
    "label":"TraceOff",
    "type":"keyword",
    "info":"TraceOff is an option for Trace and related functions which specifies forms inside which tracing sho"
  },
  {
    "label":"TraceOn",
    "type":"keyword",
    "info":"TraceOn is an option for Trace and related functions which specifies when tracing should be switched"
  },
  {
    "label":"TraceOriginal",
    "type":"keyword",
    "info":"TraceOriginal is an option for Trace and related functions which specifies whether to test the form "
  },
  {
    "label":"TracePrint",
    "type":"keyword",
    "info":"TracePrint[expr] prints all expressions used in the evaluation of expr. TracePrint[expr, form] inclu"
  },
  {
    "label":"TraceScan",
    "type":"keyword",
    "info":"TraceScan[f, expr] applies f to all expressions used in the evaluation of expr. TraceScan[f, expr, f"
  },
  {
    "label":"TrackCellChangeTimes",
    "type":"keyword",
    "info":"System`TrackCellChangeTimes"
  },
  {
    "label":"TrackedSymbols",
    "type":"keyword",
    "info":"TrackedSymbols is an option to Refresh, Manipulate, and related functions that specifies which symbo"
  },
  {
    "label":"TrackingFunction",
    "type":"keyword",
    "info":"TrackingFunction is an option for Manipulate controls that specifies functions to use during interac"
  },
  {
    "label":"TracyWidomDistribution",
    "type":"keyword",
    "info":"TracyWidomDistribution[Î\.b2] represents a TracyâWidom distribution with Dyson index Î\.b2."
  },
  {
    "label":"TradingChart",
    "type":"keyword",
    "info":"TradingChart[{{date , {open , high , low , close , volume }}, â¦}] makes a chart showing prices and v"
  },
  {
    "label":"TraditionalForm",
    "type":"keyword",
    "info":"TraditionalForm[expr] prints as an approximation to the traditional mathematical notation for expr. "
  },
  {
    "label":"TraditionalFunctionNotation",
    "type":"keyword",
    "info":"TraditionalFunctionNotation is an option for selections that specifies whether input of the form f(x"
  },
  {
    "label":"TraditionalNotation",
    "type":"keyword",
    "info":"System`TraditionalNotation"
  },
  {
    "label":"TraditionalOrder",
    "type":"keyword",
    "info":"System`TraditionalOrder"
  },
  {
    "label":"TrainImageContentDetector",
    "type":"keyword",
    "info":"TrainImageContentDetector[{img  ï¢ {bbox  ï¢ class , â¦}, â¦}] trains a ContentDetectorFunction[â¦] based"
  },
  {
    "label":"TrainingProgressCheckpointing",
    "type":"keyword",
    "info":"TrainingProgressCheckpointing is an option for NetTrain that specifies how to save copies of the net"
  },
  {
    "label":"TrainingProgressFunction",
    "type":"keyword",
    "info":"TrainingProgressFunction is an option for NetTrain that specifies a function to run periodically dur"
  },
  {
    "label":"TrainingProgressMeasurements",
    "type":"keyword",
    "info":"TrainingProgressMeasurements is an option for NetTrain that specifies measurements to make while tra"
  },
  {
    "label":"TrainingProgressReporting",
    "type":"keyword",
    "info":"TrainingProgressReporting is an option for NetTrain and related functions that specifies how to repo"
  },
  {
    "label":"TrainingStoppingCriterion",
    "type":"keyword",
    "info":"TrainingStoppingCriterion is an option for NetTrain that specifies a criterion for stopping training"
  },
  {
    "label":"TrainingUpdateSchedule",
    "type":"keyword",
    "info":"TrainingUpdateSchedule is an option for NetTrain that specifies which arrays of the network can be u"
  },
  {
    "label":"TrainTextContentDetector",
    "type":"keyword",
    "info":"TrainTextContentDetector[{text  ï¢ {span  ï¢ class , â¦}, â¦}] trains a ContentDetectorFunction[â¦] based"
  },
  {
    "label":"TransferFunctionCancel",
    "type":"keyword",
    "info":"TransferFunctionCancel[tfm] cancels common poles and zeros in the TransferFunctionModel tfm.Transfer"
  },
  {
    "label":"TransferFunctionExpand",
    "type":"keyword",
    "info":"TransferFunctionExpand[tfm] expands polynomial terms in the numerators and denominators of the Trans"
  },
  {
    "label":"TransferFunctionFactor",
    "type":"keyword",
    "info":"TransferFunctionFactor[tfm] factors the polynomial terms in the numerators and denominators of the T"
  },
  {
    "label":"TransferFunctionModel",
    "type":"keyword",
    "info":"TransferFunctionModel[m, s] represents the model of the transfer-function matrix m with complex vari"
  },
  {
    "label":"TransferFunctionPoles",
    "type":"keyword",
    "info":"TransferFunctionPoles[tfm] gives a matrix of roots of the denominators in the TransferFunctionModel "
  },
  {
    "label":"TransferFunctionTransform",
    "type":"keyword",
    "info":"TransferFunctionTransform[f, tf] transforms the TransferFunctionModel object tf using the transforma"
  },
  {
    "label":"TransferFunctionZeros",
    "type":"keyword",
    "info":"TransferFunctionZeros[tfm] gives a matrix of roots of the numerators in the TransferFunctionModel tf"
  },
  {
    "label":"TransformationClass",
    "type":"keyword",
    "info":"TransformationClass is an option that specifies the class of geometric transformations to be used."
  },
  {
    "label":"TransformationFunction",
    "type":"keyword",
    "info":"TransformationFunction[data] represents a transformation function that applies geometric and other t"
  },
  {
    "label":"TransformationFunctions",
    "type":"keyword",
    "info":"TransformationFunctions is an option for Simplify and FullSimplify which gives the list of functions"
  },
  {
    "label":"TransformationMatrix",
    "type":"keyword",
    "info":"TransformationMatrix[tfun] gives the homogeneous matrix associated with a TransformationFunction obj"
  },
  {
    "label":"TransformedDistribution",
    "type":"keyword",
    "info":"TransformedDistribution[expr, x ï dist] represents the transformed distribution of expr where the ra"
  },
  {
    "label":"TransformedField",
    "type":"keyword",
    "info":"TransformedField[t, f, {x , x , â¦, x } ï¢ {y , y , â¦, y }] uses the coordinate transformation t to tr"
  },
  {
    "label":"TransformedProcess",
    "type":"keyword",
    "info":"TransformedProcess[expr, x ï proc, t] represents the transformed process of expr where the variable "
  },
  {
    "label":"TransformedRegion",
    "type":"keyword",
    "info":"TransformedRegion[reg, f] represents the transformed region {f(p) | p â reg}, where reg is a region "
  },
  {
    "label":"TransitionDirection",
    "type":"keyword",
    "info":"TransitionDirection is an option for PaneSelector that specifies the direction in which a transition"
  },
  {
    "label":"TransitionDuration",
    "type":"keyword",
    "info":"TransitionDuration is an option for PaneSelector that specifies the duration in seconds that a trans"
  },
  {
    "label":"TransitionEffect",
    "type":"keyword",
    "info":"TransitionEffect is an option for PaneSelector that specifies the visual effect used when transition"
  },
  {
    "label":"TransitiveClosureGraph",
    "type":"keyword",
    "info":"TransitiveClosureGraph[g] gives the transitive closure of the graph g.TransitiveClosureGraph[{v ï¢ w,"
  },
  {
    "label":"TransitiveReductionGraph",
    "type":"keyword",
    "info":"TransitiveReductionGraph[g] gives a transitive reduction of the graph g.TransitiveReductionGraph[{v "
  },
  {
    "label":"Translate",
    "type":"keyword",
    "info":"Translate[g, {x, y, â¦}] represents graphics primitives g translated by the vector {x, y, â¦}. Transla"
  },
  {
    "label":"TranslationOptions",
    "type":"keyword",
    "info":"TranslationOptions ï¢ {opt  ï¢ val , opt  ï¢ val , â¦} is an option for Style and Cell that controls how"
  },
  {
    "label":"TranslationTransform",
    "type":"keyword",
    "info":"TranslationTransform[v] gives a TransformationFunction that represents translation of points by a ve"
  },
  {
    "label":"Transliterate",
    "type":"keyword",
    "info":"Transliterate[\"string\"] attempts to transliterate string into plain ASCII.Transliterate[\"string\", sc"
  },
  {
    "label":"Transparent",
    "type":"keyword",
    "info":"Transparent represents perfect transparency in graphics or style specifications. "
  },
  {
    "label":"TransparentColor",
    "type":"keyword",
    "info":"System`TransparentColor"
  },
  {
    "label":"Transpose",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"TransposeLayer",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"TrapEnterKey",
    "type":"keyword",
    "info":"System`TrapEnterKey"
  },
  {
    "label":"TrapSelection",
    "type":"keyword",
    "info":"System`TrapSelection"
  },
  {
    "label":"TravelDirections",
    "type":"keyword",
    "info":"TravelDirections[{loc , loc , â¦}] generates directions for travel from loc  to loc , â¦.TravelDirecti"
  },
  {
    "label":"TravelDirectionsData",
    "type":"keyword",
    "info":"TravelDirectionsData[â¦] represents travel directions generated by TravelDirections."
  },
  {
    "label":"TravelDistance",
    "type":"keyword",
    "info":"TravelDistance[{loc , loc , â¦}] gives the estimated distance for travel from loc  to loc , â¦.\n      "
  },
  {
    "label":"TravelDistanceList",
    "type":"keyword",
    "info":"TravelDistanceList[{loc , loc , â¦, loc }] returns the list {TravelDistance[loc , loc ], â¦, TravelDis"
  },
  {
    "label":"TravelMethod",
    "type":"keyword",
    "info":"TravelMethod is an option for TravelDirections and related functions that specifies the mode of tran"
  },
  {
    "label":"TravelTime",
    "type":"keyword",
    "info":"TravelTime[{loc , loc , â¦}] gives the estimated time to travel from loc  to loc , â¦.\n               "
  },
  {
    "label":"Tree",
    "type":"keyword",
    "info":"Tree[{subtree , subtree , â¦}] represents a tree with a list of child subtrees subtree .Tree[data, su"
  },
  {
    "label":"TreeCases",
    "type":"keyword",
    "info":"TreeCases[tree, pattern] gives a list of subtrees of tree with data matching pattern.TreeCases[tree,"
  },
  {
    "label":"TreeChildren",
    "type":"keyword",
    "info":"TreeChildren[tree] extracts the children of the root of the Tree object tree."
  },
  {
    "label":"TreeCount",
    "type":"keyword",
    "info":"TreeCount[tree, pattern] gives the number of subtrees of tree whose data matches pattern.TreeCount[t"
  },
  {
    "label":"TreeData",
    "type":"keyword",
    "info":"TreeData[tree] extracts the data in the root of tree."
  },
  {
    "label":"TreeDelete",
    "type":"keyword",
    "info":"TreeDelete[tree, pos] deletes the subtree of tree at the position specified by pos.TreeDelete[tree, "
  },
  {
    "label":"TreeDepth",
    "type":"keyword",
    "info":"TreeDepth[tree] gives the maximum level of tree.TreeDepth[tree, pattern] gives the maximum level of "
  },
  {
    "label":"TreeElementLabel",
    "type":"keyword",
    "info":"TreeElementLabel is an option for Tree and related functions that specifies what labels should be us"
  },
  {
    "label":"TreeElementStyle",
    "type":"keyword",
    "info":"TreeElementStyle is an option for Tree and related functions that specifies what style to use for su"
  },
  {
    "label":"TreeExpression",
    "type":"keyword",
    "info":"TreeExpression[tree] gives the expression corresponding to the tree tree.TreeExpression[tree, struct"
  },
  {
    "label":"TreeExtract",
    "type":"keyword",
    "info":"TreeExtract[tree, pos] extracts the subtree of tree at the position specified by pos.TreeExtract[tre"
  },
  {
    "label":"TreeFold",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"TreeForm",
    "type":"keyword",
    "info":"TreeForm[expr] displays expr as a tree with different levels at different depths. TreeForm[expr, n] "
  },
  {
    "label":"TreeGraph",
    "type":"keyword",
    "info":"TreeGraph[{v , v , â¦}, {u , u , â¦}] yields a tree where u  is the predecessor of v .TreeGraph[{e , e"
  },
  {
    "label":"TreeGraphQ",
    "type":"keyword",
    "info":"TreeGraphQ[g] yields True if the graph g is a tree and False otherwise."
  },
  {
    "label":"TreeInsert",
    "type":"keyword",
    "info":"TreeInsert[tree, child, pos] inserts child at the position specified by pos in tree.TreeInsert[tree,"
  },
  {
    "label":"TreeLayout",
    "type":"keyword",
    "info":"TreeLayout is an option to Tree and related functions that specifies what layout to use."
  },
  {
    "label":"TreeLeafQ",
    "type":"keyword",
    "info":"TreeLeafQ[tree] gives True if tree is a tree with no children, and gives False otherwise."
  },
  {
    "label":"TreeLeaves",
    "type":"keyword",
    "info":"TreeLeaves[tree] returns the list of leaves of the tree tree."
  },
  {
    "label":"TreeLevel",
    "type":"keyword",
    "info":"TreeLevel[tree, levelspec] gives a list of all subtrees of tree on levels specified by levelspec.Tre"
  },
  {
    "label":"TreeMap",
    "type":"keyword",
    "info":"TreeMap[f, tree] applies f to the data in each subtree of tree.TreeMap[f, tree, levelspec] applies f"
  },
  {
    "label":"TreeMapAt",
    "type":"keyword",
    "info":"TreeMapAt[f, tree, pos] applies f to the data at the position specified by pos in tree.TreeMapAt[f, "
  },
  {
    "label":"TreeOutline",
    "type":"keyword",
    "info":"TreeOutline[tree] gives an outline of the data in tree as a nested OpenerView.TreeOutline[tree, pos]"
  },
  {
    "label":"TreePlot",
    "type":"keyword",
    "info":"TreePlot[g] generates a tree plot of the graph g.TreePlot[{e , e , â¦}] generates a tree plot of the "
  },
  {
    "label":"TreePosition",
    "type":"keyword",
    "info":"TreePosition[tree, pattern] gives a list of the positions of subtrees of tree whose data matches pat"
  },
  {
    "label":"TreeQ",
    "type":"keyword",
    "info":"TreeQ[tree] yields True if tree is a valid Tree object and False otherwise."
  },
  {
    "label":"TreeReplacePart",
    "type":"keyword",
    "info":"TreeReplacePart[tree, pos ï¢ new] gives a tree in which the subtree of tree at the position specified"
  },
  {
    "label":"TreeRules",
    "type":"keyword",
    "info":"TreeRules[tree] returns the rules associated with the Tree object tree."
  },
  {
    "label":"TreeScan",
    "type":"keyword",
    "info":"TreeScan[f, tree] evaluates f applied to the data in each subtree of tree in turn.TreeScan[f, tree, "
  },
  {
    "label":"TreeSelect",
    "type":"keyword",
    "info":"TreeSelect[tree, crit] picks out all subtrees tree  of tree for which crit[tree ] is True.TreeSelect"
  },
  {
    "label":"TreeSize",
    "type":"keyword",
    "info":"TreeSize[tree] gives the number of subtrees of tree."
  },
  {
    "label":"TreeTraversalOrder",
    "type":"keyword",
    "info":"TreeTraversalOrder is an option for TreeMap and related functions that specifies the order to visit "
  },
  {
    "label":"TrendStyle",
    "type":"keyword",
    "info":"TrendStyle is an option to CandlestickChart, RenkoChart, and other financial charting functions that"
  },
  {
    "label":"Triangle",
    "type":"keyword",
    "info":"Triangle[{p , p , p }] represents a filled triangle with corner points p , p , and p .Triangle[{{p  "
  },
  {
    "label":"TriangleCenter",
    "type":"keyword",
    "info":"TriangleCenter[tri, type] gives the specified type of center for the triangle tri.TriangleCenter[tri"
  },
  {
    "label":"TriangleConstruct",
    "type":"keyword",
    "info":"TriangleConstruct[tri, type] gives the specified type of construct for the triangle tri."
  },
  {
    "label":"TriangleMeasurement",
    "type":"keyword",
    "info":"TriangleMeasurement[tri, type] gives the specified type of measurement for the triangle tri."
  },
  {
    "label":"TriangleWave",
    "type":"keyword",
    "info":"TriangleWave[x] gives a triangle wave that varies between -1 and +1 with unit period.TriangleWave[{m"
  },
  {
    "label":"TriangularDistribution",
    "type":"keyword",
    "info":"TriangularDistribution[{min, max}] represents a symmetric triangular statistical distribution giving"
  },
  {
    "label":"TriangulateMesh",
    "type":"keyword",
    "info":"TriangulateMesh[mr] generates a triangulation of the mesh region mr."
  },
  {
    "label":"Trig",
    "type":"keyword",
    "info":"Trig is an option for various polynomial manipulation functions that specifies whether trigonometric"
  },
  {
    "label":"TrigExpand",
    "type":"keyword",
    "info":"TrigExpand[expr] expands out trigonometric functions in expr. "
  },
  {
    "label":"TrigFactor",
    "type":"keyword",
    "info":"TrigFactor[expr] factors trigonometric functions in expr. "
  },
  {
    "label":"TrigFactorList",
    "type":"keyword",
    "info":"TrigFactorList[expr] factors trigonometric functions in expr, yielding a list of lists containing tr"
  },
  {
    "label":"Trigger",
    "type":"keyword",
    "info":"Trigger[Dynamic[u]] represents a trigger that can be pressed to make the dynamically updated value o"
  },
  {
    "label":"TrigReduce",
    "type":"keyword",
    "info":"TrigReduce[expr] rewrites products and powers of trigonometric functions in expr in terms of trigono"
  },
  {
    "label":"TrigToExp",
    "type":"keyword",
    "info":"TrigToExp[expr] converts trigonometric functions in expr to exponentials. "
  },
  {
    "label":"TrimmedMean",
    "type":"keyword",
    "info":"TrimmedMean[list, f] gives the mean of the elements in list after dropping a fraction f of the small"
  },
  {
    "label":"TrimmedVariance",
    "type":"keyword",
    "info":"TrimmedVariance[list, f] gives the variance of the elements in list after dropping a fraction f of t"
  },
  {
    "label":"TropicalStormData",
    "type":"keyword",
    "info":"TropicalStormData[entity, property] gives the value of the specified property for the tropical storm"
  },
  {
    "label":"True",
    "type":"keyword",
    "info":"True is the symbol for the Boolean value true. "
  },
  {
    "label":"TrueQ",
    "type":"keyword",
    "info":"TrueQ[expr] yields True if expr is True, and yields False otherwise. "
  },
  {
    "label":"TruncatedDistribution",
    "type":"keyword",
    "info":"TruncatedDistribution[{x   , x   }, dist] represents the distribution obtained by truncating the val"
  },
  {
    "label":"TruncatedPolyhedron",
    "type":"keyword",
    "info":"TruncatedPolyhedron[poly] gives the truncated polyhedron of poly by truncating all vertices. Truncat"
  },
  {
    "label":"TsallisQExponentialDistribution",
    "type":"keyword",
    "info":"TsallisQExponentialDistribution[Î», q] represents a Tsallis q-exponential distribution with scale inv"
  },
  {
    "label":"TsallisQGaussianDistribution",
    "type":"keyword",
    "info":"TsallisQGaussianDistribution[Î¼, Î\.b2, q] represents a Tsallis q-Gaussian distribution with mean Î¼, scal"
  },
  {
    "label":"TTest",
    "type":"keyword",
    "info":"TTest[data] tests whether the mean of data is zero. TTest[{data , data }] tests whether the means of"
  },
  {
    "label":"Tube",
    "type":"keyword",
    "info":"Tube[{{x , y , z }, {x , y , z }, â¦}] represents a 3D tube around the line joining a sequence of poi"
  },
  {
    "label":"TubeBezierCurveBox",
    "type":"keyword",
    "info":"System`TubeBezierCurveBox"
  },
  {
    "label":"TubeBezierCurveBoxOptions",
    "type":"keyword",
    "info":"TubeBezierCurveBoxOptions ï¢ {opt  ï¢ val , opt  ï¢ val , â¦} is an option that specifies settings for T"
  },
  {
    "label":"TubeBox",
    "type":"keyword",
    "info":"System`TubeBox"
  },
  {
    "label":"TubeBoxOptions",
    "type":"keyword",
    "info":"TubeBoxOptions ï¢ {opt  ï¢ val , opt  ï¢ val , â¦} is an option that specifies settings for TubeBox obje"
  },
  {
    "label":"TubeBSplineCurveBox",
    "type":"keyword",
    "info":"System`TubeBSplineCurveBox"
  },
  {
    "label":"TubeBSplineCurveBoxOptions",
    "type":"keyword",
    "info":"TubeBSplineCurveBoxOptions ï¢ {opt  ï¢ val , opt  ï¢ val , â¦} is an option that specifies settings for "
  },
  {
    "label":"Tuesday",
    "type":"keyword",
    "info":"Tuesday is a day of the week."
  },
  {
    "label":"TukeyLambdaDistribution",
    "type":"keyword",
    "info":"TukeyLambdaDistribution[Î»] represents Tukey's lambda distribution with shape parameter Î».TukeyLambda"
  },
  {
    "label":"TukeyWindow",
    "type":"keyword",
    "info":"TukeyWindow[x] represents a Tukey window function of x.TukeyWindow[x, Î\\[PlusMinus]] uses the parameter Î\\[PlusMinus].\n"
  },
  {
    "label":"TunnelData",
    "type":"keyword",
    "info":"TunnelData[entity, property] gives the value of the specified property for the tunnel entity.TunnelD"
  },
  {
    "label":"Tuples",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"TuranGraph",
    "type":"keyword",
    "info":"TuranGraph[n, k] gives the k-partite TurÃ¡n graph with n vertices T    .\n                            "
  },
  {
    "label":"TuringMachine",
    "type":"keyword",
    "info":"TuringMachine[rule, init, t] generates a list representing the evolution of the Turing machine with "
  },
  {
    "label":"TuttePolynomial",
    "type":"keyword",
    "info":"TuttePolynomial[g, {x, y}] gives the Tutte polynomial of the graph g.TuttePolynomial[{v ï¢ w, â¦}, â¦] "
  },
  {
    "label":"TwoWayRule",
    "type":"keyword",
    "info":"x<->y or x ï  y represents a two-way rule expressing exchange or correspondence of x and y."
  },
  {
    "label":"Typed",
    "type":"keyword",
    "info":"Typed[expr, type] represents an expression that should be assumed to be of a specified type for comp"
  },
  {
    "label":"TypeDeclaration",
    "type":"keyword",
    "info":"System`TypeDeclaration"
  },
  {
    "label":"TypeSpecifier",
    "type":"keyword",
    "info":"TypeSpecifier[cons] represents a type specifier that can be applied to other types to create a compo"
  },
  {
    "label":"UnateQ",
    "type":"keyword",
    "info":"UnateQ[bexpr, {x , x , â¦}] tests whether the Boolean expression bexpr is positive unate in the varia"
  },
  {
    "label":"Uncompress",
    "type":"keyword",
    "info":"Uncompress[\"string\"] recovers an expression from a compressed string representation generated by Com"
  },
  {
    "label":"UnconstrainedParameters",
    "type":"keyword",
    "info":"UnconstrainedParameters is an option to functions like GeometricScene that specifies what parameters"
  },
  {
    "label":"Undefined",
    "type":"keyword",
    "info":"Undefined is a symbol that represents a quantity with no defined value."
  },
  {
    "label":"UnderBar",
    "type":"keyword",
    "info":"UnderBar[expr] displays with a bar under expr."
  },
  {
    "label":"Underflow",
    "type":"keyword",
    "info":"Underflow[] represents a number too small to represent explicitly on your computer system."
  },
  {
    "label":"Underlined",
    "type":"keyword",
    "info":"Underlined represents an underlined font."
  },
  {
    "label":"Underoverscript",
    "type":"keyword",
    "info":"                                                      z\nUnderoverscript[x, y, z] is an object that f"
  },
  {
    "label":"UnderoverscriptBox",
    "type":"keyword",
    "info":"                                                                    z\nUnderoverscriptBox[x, y, z] is"
  },
  {
    "label":"UnderoverscriptBoxOptions",
    "type":"keyword",
    "info":"UnderoverscriptBoxOptions is an option for selections that specifies settings for UnderoverscriptBox"
  },
  {
    "label":"Underscript",
    "type":"keyword",
    "info":"Underscript[x, y] is an object that formats as x. \n                                               y"
  },
  {
    "label":"UnderscriptBox",
    "type":"keyword",
    "info":"UnderscriptBox[x, y] is the lowâlevel box representation for x in notebook expressions. \n           "
  },
  {
    "label":"UnderscriptBoxOptions",
    "type":"keyword",
    "info":"UnderscriptBoxOptions is an option for selections that specifies settings for UnderscriptBox objects"
  },
  {
    "label":"UnderseaFeatureData",
    "type":"keyword",
    "info":"UnderseaFeatureData[entity, property] gives the value of the specified property for the undersea fea"
  },
  {
    "label":"UndirectedEdge",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"UndirectedGraph",
    "type":"keyword",
    "info":"UndirectedGraph[g] gives an undirected graph from the directed graph g.UndirectedGraph[{v ï¢ w, â¦}] u"
  },
  {
    "label":"UndirectedGraphQ",
    "type":"keyword",
    "info":"UndirectedGraphQ[g] yields True if the graph g is an undirected graph and False otherwise."
  },
  {
    "label":"UndoOptions",
    "type":"keyword",
    "info":"UndoOptions is an option for Style that specifies settings for controlling the behavior of the front"
  },
  {
    "label":"UndoTrackedVariables",
    "type":"keyword",
    "info":"UndoTrackedVariables is an option for Manipulate, DynamicModule, and related functions that sets var"
  },
  {
    "label":"Unequal",
    "type":"keyword",
    "info":"lhs != rhs or lhs â  rhs returns False if lhs and rhs are identical. "
  },
  {
    "label":"UnequalTo",
    "type":"keyword",
    "info":"UnequalTo[y] is an operator form that yields x â  y when applied to an expression x."
  },
  {
    "label":"Unevaluated",
    "type":"keyword",
    "info":"Unevaluated[expr] represents the unevaluated form of expr when it appears as the argument to a funct"
  },
  {
    "label":"UniformDistribution",
    "type":"keyword",
    "info":"UniformDistribution[{min, max}] represents a continuous uniform statistical distribution giving valu"
  },
  {
    "label":"UniformGraphDistribution",
    "type":"keyword",
    "info":"UniformGraphDistribution[n, m] represents a uniform graph distribution on n-vertex, m-edge graphs."
  },
  {
    "label":"UniformPolyhedron",
    "type":"keyword",
    "info":"UniformPolyhedron[\"name\"] gives the uniform polyhedron with the given name.UniformPolyhedron[{n, m}]"
  },
  {
    "label":"UniformSumDistribution",
    "type":"keyword",
    "info":"UniformSumDistribution[n] represents the distribution of a sum of n random variables uniformly distr"
  },
  {
    "label":"Uninstall",
    "type":"keyword",
    "info":"Uninstall[link] terminates an external program started by Install, and removes Wolfram Language defi"
  },
  {
    "label":"Union",
    "type":"keyword",
    "info":"Union[list , list , â¦] gives a sorted list of all the distinct elements that appear in any of the li"
  },
  {
    "label":"UnionedEntityClass",
    "type":"keyword",
    "info":"UnionedEntityClass[class , â¦] represents an entity class containing all the distinct entities in all"
  },
  {
    "label":"UnionPlus",
    "type":"keyword",
    "info":"UnionPlus[x, y, â¦] displays as x â y â â¦."
  },
  {
    "label":"Unique",
    "type":"keyword",
    "info":"Unique[] generates a new symbol, whose name is of the form $nnn. Unique[x] generates a new symbol, w"
  },
  {
    "label":"UnitaryMatrixQ",
    "type":"keyword",
    "info":"UnitaryMatrixQ[m] gives True if m is a unitary matrix, and False otherwise."
  },
  {
    "label":"UnitBox",
    "type":"keyword",
    "info":"                                                                    1                               "
  },
  {
    "label":"UnitConvert",
    "type":"keyword",
    "info":"UnitConvert[quantity, targetunit] attempts to convert the specified quantity to the specified target"
  },
  {
    "label":"UnitDimensions",
    "type":"keyword",
    "info":"UnitDimensions[unit] returns a list of base dimensions associated with the specified unit.UnitDimens"
  },
  {
    "label":"Unitize",
    "type":"keyword",
    "info":"Unitize[x] gives 0 when x is zero, and 1 when x has any other numerical value."
  },
  {
    "label":"UnitRootTest",
    "type":"keyword",
    "info":"UnitRootTest[data] tests whether data came from an autoregressive time series process with unit root"
  },
  {
    "label":"UnitSimplify",
    "type":"keyword",
    "info":"UnitSimplify[quantity] attempts to simplify the units of the specified quantity."
  },
  {
    "label":"UnitStep",
    "type":"keyword",
    "info":"UnitStep[x] represents the unit step function, equal to 0 for x < 0 and 1 for x â¥ 0. UnitStep[x , x "
  },
  {
    "label":"UnitSystem",
    "type":"keyword",
    "info":"UnitSystem is an option for functions like AirTemperatureData that determines the units of the resul"
  },
  {
    "label":"UnitTriangle",
    "type":"keyword",
    "info":"UnitTriangle[x] represents the unit triangle function on the interval ï x ï â¤ 1 .UnitTriangle[x , x "
  },
  {
    "label":"UnitVector",
    "type":"keyword",
    "info":"                                                             th                                     "
  },
  {
    "label":"UnitVectorLayer",
    "type":"keyword",
    "info":"UnitVectorLayer[n] represents a net layer that transforms integers between 1 and n into n-dimensiona"
  },
  {
    "label":"UnityDimensions",
    "type":"keyword",
    "info":"UnityDimensions is an option for UnitSimplify that specifies which UnitDimensions should be factored"
  },
  {
    "label":"UniverseModelData",
    "type":"keyword",
    "info":"UniverseModelData[spec] returns properties of the universe based on the default model at specificati"
  },
  {
    "label":"UniversityData",
    "type":"keyword",
    "info":"UniversityData[entity, property] gives the value of the specified property for the university entity"
  },
  {
    "label":"UnixTime",
    "type":"keyword",
    "info":"UnixTime[] gives the total number of seconds since the beginning of January 1, 1970, in the GMT time"
  },
  {
    "label":"Unprotect",
    "type":"keyword",
    "info":"Unprotect[s , s , â¦] removes the attribute Protected for the symbols s . Unprotect[\"form \", \"form \","
  },
  {
    "label":"UnregisterExternalEvaluator",
    "type":"keyword",
    "info":"UnregisterExternalEvaluator[sys, target] unregisters the external evaluator referenced by target for"
  },
  {
    "label":"UnsameQ",
    "type":"keyword",
    "info":"lhs =!= rhs yields True if the expression lhs is not identical to rhs, and yields False otherwise. "
  },
  {
    "label":"UnsavedVariables",
    "type":"keyword",
    "info":"UnsavedVariables is an option for Manipulate, DynamicModule, and related functions that specifies lo"
  },
  {
    "label":"Unset",
    "type":"keyword",
    "info":"lhs=. removes any rules defined for lhs. "
  },
  {
    "label":"UnsetShared",
    "type":"keyword",
    "info":"UnsetShared[s , s , â¦] stops the sharing of the variables or functions s  among parallel kernels.Uns"
  },
  {
    "label":"UntrackedVariables",
    "type":"keyword",
    "info":"System`UntrackedVariables"
  },
  {
    "label":"Up",
    "type":"keyword",
    "info":"System`Up"
  },
  {
    "label":"UpArrow",
    "type":"keyword",
    "info":"UpArrow[x, y, â¦] displays as x â y â â¦."
  },
  {
    "label":"UpArrowBar",
    "type":"keyword",
    "info":"UpArrowBar[x, y, â¦] displays as x â¤ y â¤ â¦."
  },
  {
    "label":"UpArrowDownArrow",
    "type":"keyword",
    "info":"UpArrowDownArrow[x, y, â¦] displays as x â y â â¦."
  },
  {
    "label":"Update",
    "type":"keyword",
    "info":"Update[symbol] tells the Wolfram Language that hidden changes have been made that could affect value"
  },
  {
    "label":"UpdateDynamicObjects",
    "type":"keyword",
    "info":"System`UpdateDynamicObjects"
  },
  {
    "label":"UpdateDynamicObjectsSynchronous",
    "type":"keyword",
    "info":"System`UpdateDynamicObjectsSynchronous"
  },
  {
    "label":"UpdateInterval",
    "type":"keyword",
    "info":"UpdateInterval is an option to Refresh and Dynamic that specifies at what time interval to do update"
  },
  {
    "label":"UpdatePacletSites",
    "type":"keyword",
    "info":"UpdatePacletSites is an option to PacletInstall and PacletInstallSubmit that specifies whether to fi"
  },
  {
    "label":"UpdateSearchIndex",
    "type":"keyword",
    "info":"UpdateSearchIndex[obj] updates the given search index object.UpdateSearchIndex[\"name\"] updates the s"
  },
  {
    "label":"UpDownArrow",
    "type":"keyword",
    "info":"UpDownArrow[x, y, â¦] displays as x â y â â¦."
  },
  {
    "label":"UpEquilibrium",
    "type":"keyword",
    "info":"UpEquilibrium[x, y, â¦] displays as x â¥® y â¥® â¦."
  },
  {
    "label":"UpperCaseQ",
    "type":"keyword",
    "info":"UpperCaseQ[string] yields True if all the characters in the string are uppercase letters, and yields"
  },
  {
    "label":"UpperLeftArrow",
    "type":"keyword",
    "info":"UpperLeftArrow[x, y, â¦] displays as x â y â â¦."
  },
  {
    "label":"UpperRightArrow",
    "type":"keyword",
    "info":"UpperRightArrow[x, y, â¦] displays as x â y â â¦."
  },
  {
    "label":"UpperTriangularize",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"UpperTriangularMatrixQ",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"Upsample",
    "type":"keyword",
    "info":"Upsample[array, n] returns an upsampled version of the array by inserting n - 1 zeros between array "
  },
  {
    "label":"UpSet",
    "type":"keyword",
    "info":"lhs^=rhs assigns rhs to be the value of lhs, and associates the assignment with symbols that occur a"
  },
  {
    "label":"UpSetDelayed",
    "type":"keyword",
    "info":"lhs^:=rhs assigns rhs to be the delayed value of lhs, and associates the assignment with symbols tha"
  },
  {
    "label":"UpTee",
    "type":"keyword",
    "info":"UpTee[x, y] displays as x â¥ y."
  },
  {
    "label":"UpTeeArrow",
    "type":"keyword",
    "info":"UpTeeArrow[x, y, â¦] displays as x â¥ y â¥ â¦."
  },
  {
    "label":"UpTo",
    "type":"keyword",
    "info":"UpTo[n] is a symbolic specification that represents up to n objects or positions. If n objects or po"
  },
  {
    "label":"UpValues",
    "type":"keyword",
    "info":"UpValues[f] gives a list of transformation rules corresponding to all upvalues (values for g[â¦, f[â¦]"
  },
  {
    "label":"URL",
    "type":"keyword",
    "info":"URL[\"url\"] is a symbolic representation of a URL."
  },
  {
    "label":"URLBuild",
    "type":"keyword",
    "info":"URLBuild[\"path\", {param  ï¢ val , param  ï¢ val , â¦}] builds a URL with the specified path and query p"
  },
  {
    "label":"URLDecode",
    "type":"keyword",
    "info":"URLDecode[\"string\"] decodes a URL-style percent-encoded string."
  },
  {
    "label":"URLDispatcher",
    "type":"keyword",
    "info":"URLDispatcher[{patt  ï content , patt  ï content , â¦}] represents a dispatcher for deployed URLs tha"
  },
  {
    "label":"URLDownload",
    "type":"keyword",
    "info":"URLDownload[url] downloads the content of the specified URL to a local temporary file.URLDownload[{u"
  },
  {
    "label":"URLDownloadSubmit",
    "type":"keyword",
    "info":"URLDownloadSubmit[url, file] submits the specified URL to be downloaded asynchronously to the file g"
  },
  {
    "label":"URLEncode",
    "type":"keyword",
    "info":"URLEncode[\"string\"] converts \"string\" into a URL-style, percent-encoded ASCII string. "
  },
  {
    "label":"URLExecute",
    "type":"keyword",
    "info":"URLExecute[url] executes the specified URL, importing whatever result is generated.URLExecute[url, {"
  },
  {
    "label":"URLExpand",
    "type":"keyword",
    "info":"URLExpand[\"url\"] expands a shortened \"url\"."
  },
  {
    "label":"URLFetch",
    "type":"keyword",
    "info":"URLFetch[url] returns the contents of a URL as a string.URLFetch[url, elements] returns the specifie"
  },
  {
    "label":"URLFetchAsynchronous",
    "type":"keyword",
    "info":"URLFetchAsynchronous[url, func] performs a connection in the background, calling func when an event "
  },
  {
    "label":"URLParse",
    "type":"keyword",
    "info":"URLParse[\"url\"] takes a well-formed URL and gives an association whose values correspond to the comp"
  },
  {
    "label":"URLQueryDecode",
    "type":"keyword",
    "info":"URLQueryDecode[\"string\"] decodes a URL-style query string into a list of key-value rules. "
  },
  {
    "label":"URLQueryEncode",
    "type":"keyword",
    "info":"URLQueryEncode[ï key  ï¢ val , key  ï¢ val , â¦ ï] creates a URL-style query string from an association"
  },
  {
    "label":"URLRead",
    "type":"keyword",
    "info":"URLRead[url] sends a request to a URL and reads back the response, returning it as a response object"
  },
  {
    "label":"URLResponseTime",
    "type":"keyword",
    "info":"URLResponseTime[url] gives the total number of seconds to request one byte from the specified URL.UR"
  },
  {
    "label":"URLSave",
    "type":"keyword",
    "info":"URLSave[\"url\"] saves the content of the URL to a file in $TemporaryDirectory.URLSave[\"url\", \"file\"] "
  },
  {
    "label":"URLSaveAsynchronous",
    "type":"keyword",
    "info":"URLSaveAsynchronous[\"url\", \"file\", func] performs a download to \"file\" in the background, calling fu"
  },
  {
    "label":"URLShorten",
    "type":"keyword",
    "info":"URLShorten[\"url\"] creates a shortened URL that redirects to \"url\".URLShorten[CloudObject[â¦]] creates"
  },
  {
    "label":"URLSubmit",
    "type":"keyword",
    "info":"URLSubmit[url] submits the specified URL to be executed asynchronously.URLSubmit[url, {param  ï¢ val "
  },
  {
    "label":"UseEmbeddedLibrary",
    "type":"keyword",
    "info":"UseEmbeddedLibrary is an option of FunctionCompile that embeds a shared library in a CompiledCodeFun"
  },
  {
    "label":"UseGraphicsRange",
    "type":"keyword",
    "info":"System`UseGraphicsRange"
  },
  {
    "label":"UserDefinedWavelet",
    "type":"keyword",
    "info":"System`UserDefinedWavelet"
  },
  {
    "label":"Using",
    "type":"keyword",
    "info":"Using is an option to Roots that specifies any subsidiary equations that are to be used."
  },
  {
    "label":"UsingFrontEnd",
    "type":"keyword",
    "info":"UsingFrontEnd[expr] evaluates expr, making use of a front end if necessary."
  },
  {
    "label":"UtilityFunction",
    "type":"keyword",
    "info":"UtilityFunction is an option for Predict, Classify, and related functions that specifies the utility"
  },
  {
    "label":"V2Get",
    "type":"keyword",
    "info":"V2Get[name] reads in a file written by the V2.x versions."
  },
  {
    "label":"ValenceErrorHandling",
    "type":"keyword",
    "info":"ValenceErrorHandling is an option for MoleculeModify that specifies whether molecule valences should"
  },
  {
    "label":"ValenceFilling",
    "type":"keyword",
    "info":"ValenceFilling is an option for Molecule that specifies whether to fill open valences with hydrogen "
  },
  {
    "label":"ValidationLength",
    "type":"keyword",
    "info":"ValidationLength is an option to FindSequenceFunction and related functions that specifies the numbe"
  },
  {
    "label":"ValidationSet",
    "type":"keyword",
    "info":"ValidationSet is an option for Predict, Classify, NetTrain, and related functions that specifies the"
  },
  {
    "label":"Value",
    "type":"keyword",
    "info":"System`Value"
  },
  {
    "label":"ValueBox",
    "type":"keyword",
    "info":"System`ValueBox"
  },
  {
    "label":"ValueBoxOptions",
    "type":"keyword",
    "info":"ValueBoxOptions ï¢ {opt  ï¢ val , opt  ï¢ val , â¦} is an option that specifies settings for ValueBox ob"
  },
  {
    "label":"ValueDimensions",
    "type":"keyword",
    "info":"ValueDimensions is an option to TemporalData, TimeSeries, and EventSeries that specifies the dimensi"
  },
  {
    "label":"ValueForm",
    "type":"keyword",
    "info":"ValueForm is an internal symbol."
  },
  {
    "label":"ValuePreprocessingFunction",
    "type":"keyword",
    "info":"ValuePreprocessingFunction is an option for functions such as PersistentSymbol and InitializationVal"
  },
  {
    "label":"ValueQ",
    "type":"keyword",
    "info":"ValueQ[expr] gives True if a value has been defined for expr, and gives False otherwise. "
  },
  {
    "label":"Values",
    "type":"keyword",
    "info":"Values[ï key  ï¢ val , key  ï¢ val , â¦ ï] gives a list of the values val  in an association.Values[{ke"
  },
  {
    "label":"ValuesData",
    "type":"keyword",
    "info":"System`ValuesData"
  },
  {
    "label":"Variables",
    "type":"keyword",
    "info":"Variables[poly] gives a list of all independent variables in a polynomial. "
  },
  {
    "label":"Variance",
    "type":"keyword",
    "info":"Variance[list] gives the sample variance of the elements in list. Variance[dist] gives the variance "
  },
  {
    "label":"VarianceEquivalenceTest",
    "type":"keyword",
    "info":"VarianceEquivalenceTest[{data , data , â¦}] tests whether the variances of the data  are equal. Varia"
  },
  {
    "label":"VarianceEstimatorFunction",
    "type":"keyword",
    "info":"VarianceEstimatorFunction is an option for LinearModelFit and NonlinearModelFit which specifies the "
  },
  {
    "label":"VarianceGammaDistribution",
    "type":"keyword",
    "info":"VarianceGammaDistribution[Î», Î\\[PlusMinus], Î\.b2, Î¼] represents a varianceâgamma distribution with location paramet"
  },
  {
    "label":"VarianceGammaPointProcess",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"VarianceTest",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"VariogramFunction",
    "type":"keyword",
    "info":"VariogramFunction is an option to SpatialEstimate that specifies the local variation model to use. "
  },
  {
    "label":"VariogramModel",
    "type":"keyword",
    "info":"VariogramModel[\"model\", {params}] represents the function for the variogram model specified by \"mode"
  },
  {
    "label":"VectorAngle",
    "type":"keyword",
    "info":"VectorAngle[u, v] gives the angle between the vectors u and v."
  },
  {
    "label":"VectorAround",
    "type":"keyword",
    "info":"VectorAround[{x , x , â¦}, {Î\.b4 , Î\.b4 , â¦}] represents a vector of uncorrelated approximate numbers or qu"
  },
  {
    "label":"VectorAspectRatio",
    "type":"keyword",
    "info":"VectorAspectRatio is an option setting for VectorPlot and related functions that determines the rela"
  },
  {
    "label":"VectorColorFunction",
    "type":"keyword",
    "info":"VectorColorFunction is an option for VectorPlot and related functions that specifies a function to a"
  },
  {
    "label":"VectorColorFunctionScaling",
    "type":"keyword",
    "info":"VectorColorFunctionScaling is an option for graphics functions which specifies whether arguments sup"
  },
  {
    "label":"VectorDensityPlot",
    "type":"keyword",
    "info":"VectorDensityPlot[{{v , v }, s}, {x, x   , x   }, {y, y   , y   }] generates a vector plot of the ve"
  },
  {
    "label":"VectorDisplacementPlot",
    "type":"keyword",
    "info":"VectorDisplacementPlot[{v , v }, {x, x   , x   }, {y, y   , y   }] generates a displacement plot for"
  },
  {
    "label":"VectorDisplacementPlot3D",
    "type":"keyword",
    "info":"VectorDisplacementPlot3D[{v , v , v }, {x, x   , x   }, {y, y   , y   }, {z, z   , z   }] generates "
  },
  {
    "label":"VectorGlyphData",
    "type":"keyword",
    "info":"System`VectorGlyphData"
  },
  {
    "label":"VectorGreater",
    "type":"keyword",
    "info":"x ï\.b4 y or VectorGreater[{x, y}] yields True for vectors of length n if x  > y  for all components 1 â¤"
  },
  {
    "label":"VectorGreaterEqual",
    "type":"keyword",
    "info":"x ï\\[Micro] y or VectorGreaterEqual[{x, y}] yields True for vectors of length n if x  â¥ y  for all component"
  },
  {
    "label":"VectorLess",
    "type":"keyword",
    "info":"x ï\\[Paragraph] y or VectorLess[{x, y}] yields True for vectors of length n if x  < y  for all components 1 â¤ i "
  },
  {
    "label":"VectorLessEqual",
    "type":"keyword",
    "info":"x ï\\[CenterDot] y or VectorLessEqual[{x, y}] yields True for vectors of length n if x  â¤ y  for all components 1"
  },
  {
    "label":"VectorMarkers",
    "type":"keyword",
    "info":"VectorMarkers is an option for graphics functions like VectorPlot, ListVectorPlot and related functi"
  },
  {
    "label":"VectorPlot",
    "type":"keyword",
    "info":"VectorPlot[{v , v }, {x, x   , x   }, {y, y   , y   }] generates a vector plot of the vector field {"
  },
  {
    "label":"VectorPlot3D",
    "type":"keyword",
    "info":"VectorPlot3D[{v , v , v }, {x, x   , x   }, {y, y   , y   }, {z, z   , z   }] generates a 3D vector "
  },
  {
    "label":"VectorPoints",
    "type":"keyword",
    "info":"VectorPoints is an option to VectorPlot, ListVectorPlot, and related functions that determines where"
  },
  {
    "label":"VectorQ",
    "type":"keyword",
    "info":"VectorQ[expr] gives True if expr is a list or a oneâdimensional SparseArray object, none of whose el"
  },
  {
    "label":"VectorRange",
    "type":"keyword",
    "info":"VectorRange is an option for VectorPlot and related functions that specifies the range of vector mag"
  },
  {
    "label":"Vectors",
    "type":"keyword",
    "info":"Vectors[d] represents the domain of vectors of dimension d.Vectors[d, dom] represents the domain of "
  },
  {
    "label":"VectorScale",
    "type":"keyword",
    "info":"VectorScale is an option to VectorPlot, ListVectorPlot, and related functions that determines the le"
  },
  {
    "label":"VectorScaling",
    "type":"keyword",
    "info":"VectorScaling is an option for VectorPlot and related functions that determines how the magnitudes o"
  },
  {
    "label":"VectorSizes",
    "type":"keyword",
    "info":"VectorSizes is an option for VectorPlot and related functions that specifies the range of sizes used"
  },
  {
    "label":"VectorStyle",
    "type":"keyword",
    "info":"VectorStyle is an option to VectorPlot, ListVectorPlot, and related functions that determines the st"
  },
  {
    "label":"Vee",
    "type":"keyword",
    "info":"Vee[x, y, â¦] displays as x â y â â¦."
  },
  {
    "label":"Verbatim",
    "type":"keyword",
    "info":"Verbatim[expr] represents expr in pattern matching, requiring that expr be matched exactly as it app"
  },
  {
    "label":"Verbose",
    "type":"keyword",
    "info":"System`Verbose"
  },
  {
    "label":"VerboseConvertToPostScriptPacket",
    "type":"keyword",
    "info":"System`VerboseConvertToPostScriptPacket"
  },
  {
    "label":"VerificationTest",
    "type":"keyword",
    "info":"VerificationTest[input] runs a verification test to determine whether input evaluates to True, witho"
  },
  {
    "label":"VerifyConvergence",
    "type":"keyword",
    "info":"VerifyConvergence is an option to Sum, NSum, and similar functions that specifies whether convergenc"
  },
  {
    "label":"VerifyDerivedKey",
    "type":"keyword",
    "info":"VerifyDerivedKey[key, password] verifies that password matches the password used to generate the der"
  },
  {
    "label":"VerifyDigitalSignature",
    "type":"keyword",
    "info":"VerifyDigitalSignature[{expr, sig}, key] verifies the digital signature sig for expr using the speci"
  },
  {
    "label":"VerifyFileSignature",
    "type":"keyword",
    "info":"VerifyFileSignature[{\"file\", sig}, key] verifies the digital signature sig for file using the specif"
  },
  {
    "label":"VerifyInterpretation",
    "type":"keyword",
    "info":"VerifyInterpretation is an option for TextCases, TextPosition and TextContents that verifies that re"
  },
  {
    "label":"VerifySecurityCertificates",
    "type":"keyword",
    "info":"VerifySecurityCertificates is an option for URLRead and related functions that specifies whether to "
  },
  {
    "label":"VerifySolutions",
    "type":"keyword",
    "info":"VerifySolutions is an option to Solve and related functions that controls whether to verify solution"
  },
  {
    "label":"VerifyTestAssumptions",
    "type":"keyword",
    "info":"VerifyTestAssumptions is an option to LocationTest and similar functions that controls which assumpt"
  },
  {
    "label":"Version",
    "type":"keyword",
    "info":"System`Version"
  },
  {
    "label":"VersionedPreferences",
    "type":"keyword",
    "info":"VersionedPreferences is a global front end option that specifies whether settings on $FrontEnd shoul"
  },
  {
    "label":"VersionNumber",
    "type":"keyword",
    "info":"System`VersionNumber"
  },
  {
    "label":"VertexAdd",
    "type":"keyword",
    "info":"VertexAdd[g, v] makes a graph by adding the vertex v to the graph g.VertexAdd[g, {v , v , â¦}] adds a"
  },
  {
    "label":"VertexCapacity",
    "type":"keyword",
    "info":"VertexCapacity is an option and annotation for Graph and related functions that specifies a vertex c"
  },
  {
    "label":"VertexChromaticNumber",
    "type":"keyword",
    "info":"VertexChromaticNumber[g] gives the chromatic number for the vertices of the graph g."
  },
  {
    "label":"VertexColors",
    "type":"keyword",
    "info":"VertexColors is an option for graphics primitives which specifies the colors to assign to vertices."
  },
  {
    "label":"VertexComponent",
    "type":"keyword",
    "info":"VertexComponent[g, {v , v , â¦}] gives the vertices in the graph g that have a path to at least one o"
  },
  {
    "label":"VertexConnectivity",
    "type":"keyword",
    "info":"VertexConnectivity[g] gives the vertex connectivity of the graph g.VertexConnectivity[g, s, t] gives"
  },
  {
    "label":"VertexContract",
    "type":"keyword",
    "info":"VertexContract[g, {v , v , â¦}] contracts a collection of vertices v , v , â¦ into a single vertex of "
  },
  {
    "label":"VertexCoordinateRules",
    "type":"keyword",
    "info":"VertexCoordinateRules is an option for GraphPlot and related functions which specifies rules for det"
  },
  {
    "label":"VertexCoordinates",
    "type":"keyword",
    "info":"VertexCoordinates is an option to Graph and related functions that specifies the coordinates to use "
  },
  {
    "label":"VertexCorrelationSimilarity",
    "type":"keyword",
    "info":"VertexCorrelationSimilarity[g, u, v] gives the correlation similarity between vertices u and v of th"
  },
  {
    "label":"VertexCosineSimilarity",
    "type":"keyword",
    "info":"VertexCosineSimilarity[g, u, v] gives the cosine similarity between vertices u and v of the graph g."
  },
  {
    "label":"VertexCount",
    "type":"keyword",
    "info":"VertexCount[g] gives a count of the number of vertices in the graph g.VertexCount[g, patt] gives a c"
  },
  {
    "label":"VertexCoverQ",
    "type":"keyword",
    "info":"VertexCoverQ[g, vlist] yields True if the vertex list vlist is a vertex cover of the graph g, and Fa"
  },
  {
    "label":"VertexDataCoordinates",
    "type":"keyword",
    "info":"VertexDataCoordinates is an option to Raster3D that determines how to map data to the displayed rang"
  },
  {
    "label":"VertexDegree",
    "type":"keyword",
    "info":"VertexDegree[g] gives the list of vertex degrees for all vertices in the graph g.VertexDegree[g, v] "
  },
  {
    "label":"VertexDelete",
    "type":"keyword",
    "info":"VertexDelete[g, v] makes a graph by deleting the vertex Î½ and all edges connected to v from the grap"
  },
  {
    "label":"VertexDiceSimilarity",
    "type":"keyword",
    "info":"VertexDiceSimilarity[g, u, v] gives the Dice similarity between vertices u and v of the graph g.Vert"
  },
  {
    "label":"VertexEccentricity",
    "type":"keyword",
    "info":"VertexEccentricity[g, s] gives the length of the longest shortest path from the source s to every ot"
  },
  {
    "label":"VertexInComponent",
    "type":"keyword",
    "info":"VertexInComponent[g, {v , v , â¦}] gives the vertices in the graph g that have a directed path to at "
  },
  {
    "label":"VertexInComponentGraph",
    "type":"keyword",
    "info":"VertexInComponentGraph[g, {v , v , â¦}] gives the subgraph of the graph g generated by the vertices t"
  },
  {
    "label":"VertexInDegree",
    "type":"keyword",
    "info":"VertexInDegree[g] gives the list of vertex in-degrees for all vertices in the graph g.VertexInDegree"
  },
  {
    "label":"VertexIndex",
    "type":"keyword",
    "info":"VertexIndex[g, v] gives the integer index for the vertex v in the graph g.VertexIndex[{v ï¢ w, â¦}, â¦]"
  },
  {
    "label":"VertexJaccardSimilarity",
    "type":"keyword",
    "info":"VertexJaccardSimilarity[g, u, v] gives the Jaccard similarity between vertices u and v of the graph "
  },
  {
    "label":"VertexLabeling",
    "type":"keyword",
    "info":"VertexLabeling is an option for GraphPlot and related functions which specifies whether labeling sho"
  },
  {
    "label":"VertexLabels",
    "type":"keyword",
    "info":"VertexLabels is an option and annotation for Graph and related functions that specifies what labels "
  },
  {
    "label":"VertexLabelStyle",
    "type":"keyword",
    "info":"VertexLabelStyle is an option and property for Graph and related functions that specifies the style "
  },
  {
    "label":"VertexList",
    "type":"keyword",
    "info":"VertexList[g] gives the list of vertices for the graph g.VertexList[g, patt] gives a list of vertice"
  },
  {
    "label":"VertexNormals",
    "type":"keyword",
    "info":"VertexNormals is an option for graphics primitives which specifies the normal directions to assign t"
  },
  {
    "label":"VertexOutComponent",
    "type":"keyword",
    "info":"VertexOutComponent[g, {v , v , â¦}] gives the vertices in the graph g that have a directed path from "
  },
  {
    "label":"VertexOutComponentGraph",
    "type":"keyword",
    "info":"VertexOutComponentGraph[g, {v , v , â¦}] gives the subgraph of the graph g generated by the vertices "
  },
  {
    "label":"VertexOutDegree",
    "type":"keyword",
    "info":"VertexOutDegree[g] gives the list of vertex out-degrees for all vertices in the graph g.VertexOutDeg"
  },
  {
    "label":"VertexQ",
    "type":"keyword",
    "info":"VertexQ[g, v] yields True if v is a vertex in the graph g and False otherwise."
  },
  {
    "label":"VertexRenderingFunction",
    "type":"keyword",
    "info":"VertexRenderingFunction is an option for GraphPlot and related functions that gives a function to ge"
  },
  {
    "label":"VertexReplace",
    "type":"keyword",
    "info":"VertexReplace[g, {v  ï¢ w , v  ï¢ w , â¦}] replaces each vertex v  in the graph g by w .VertexReplace[{"
  },
  {
    "label":"VertexShape",
    "type":"keyword",
    "info":"VertexShape is an option and property for Graph and related functions that specifies the graphics us"
  },
  {
    "label":"VertexShapeFunction",
    "type":"keyword",
    "info":"VertexShapeFunction is an option and annotation for Graph and related functions that specifies a fun"
  },
  {
    "label":"VertexSize",
    "type":"keyword",
    "info":"VertexSize is an option and property for Graph and related functions that specifies the size used fo"
  },
  {
    "label":"VertexStyle",
    "type":"keyword",
    "info":"VertexStyle is an option and annotation for Graph and related functions that specifies what style to"
  },
  {
    "label":"VertexTextureCoordinates",
    "type":"keyword",
    "info":"VertexTextureCoordinates is an option for graphics primitives that specifies the texture coordinates"
  },
  {
    "label":"VertexTransitiveGraphQ",
    "type":"keyword",
    "info":"VertexTransitiveGraphQ[g] yields True if the graph g is a vertexâtransitive graph and False otherwis"
  },
  {
    "label":"VertexWeight",
    "type":"keyword",
    "info":"VertexWeight is an option and annotation for Graph and related functions that specifies a vertex wei"
  },
  {
    "label":"VertexWeightedGraphQ",
    "type":"keyword",
    "info":"VertexWeightedGraphQ[g] yields True if the graph g is a vertex-weighted graph, and False otherwise."
  },
  {
    "label":"Vertical",
    "type":"keyword",
    "info":"System`Vertical"
  },
  {
    "label":"VerticalBar",
    "type":"keyword",
    "info":"VerticalBar[x, y, â¦] displays as x ï y ï â¦."
  },
  {
    "label":"VerticalForm",
    "type":"keyword",
    "info":"VerticalForm is an internal symbol used for formatting and printing."
  },
  {
    "label":"VerticalGauge",
    "type":"keyword",
    "info":"VerticalGauge[value] draws a linear gauge showing value in a range of 0 to 1.VerticalGauge[value, {m"
  },
  {
    "label":"VerticalSeparator",
    "type":"keyword",
    "info":"VerticalSeparator[x, y, â¦] displays as x ï\.b2 y ï\.b2 â¦."
  },
  {
    "label":"VerticalSlider",
    "type":"keyword",
    "info":"VerticalSlider[y] represents a vertical slider at position y with range 0 to 1. VerticalSlider[Dynam"
  },
  {
    "label":"VerticalTilde",
    "type":"keyword",
    "info":"VerticalTilde[x, y, â¦] displays as x â y â â¦."
  },
  {
    "label":"Video",
    "type":"keyword",
    "info":"Video[file] represents video stored in the given file.Video[url] represents video stored in the give"
  },
  {
    "label":"VideoCombine",
    "type":"keyword",
    "info":"VideoCombine[{obj , obj , â¦}] creates a multi-track video by combining all tracks of Video or Audio "
  },
  {
    "label":"VideoDelete",
    "type":"keyword",
    "info":"VideoDelete[video, t] deletes the first t seconds of video.VideoDelete[video, -t] deletes the last t"
  },
  {
    "label":"VideoEncoding",
    "type":"keyword",
    "info":"VideoEncoding is an option for Export and other functions that specifies the video encoding to use w"
  },
  {
    "label":"VideoExtractFrames",
    "type":"keyword",
    "info":"VideoExtractFrames[video, t] extracts a frame at time t from video.VideoExtractFrames[video, tspec] "
  },
  {
    "label":"VideoFrameList",
    "type":"keyword",
    "info":"VideoFrameList[video, n] gives a list of n images extracted from video.VideoFrameList[video, spec] g"
  },
  {
    "label":"VideoFrameMap",
    "type":"keyword",
    "info":"VideoFrameMap[f, video] applies f to each frame of the Video object video, returning a new Video obj"
  },
  {
    "label":"VideoGenerator",
    "type":"keyword",
    "info":"VideoGenerator[model] generates one second of video of a given model.VideoGenerator[model, dur] gene"
  },
  {
    "label":"VideoInsert",
    "type":"keyword",
    "info":"VideoInsert[video, t ï¢ new] inserts the video new at time t.VideoInsert[video, {t , t , â¦} ï¢ new] in"
  },
  {
    "label":"VideoIntervals",
    "type":"keyword",
    "info":"VideoIntervals[video, crit] returns time intervals of video for which the criterion crit is satisfie"
  },
  {
    "label":"VideoJoin",
    "type":"keyword",
    "info":"VideoJoin[video , video , â¦] concatenates all video  and returns a video object.\n               1   "
  },
  {
    "label":"VideoMap",
    "type":"keyword",
    "info":"VideoMap[f, video] applies f to partial video and audio data corresponding to one frame of video, re"
  },
  {
    "label":"VideoMapList",
    "type":"keyword",
    "info":"VideoMapList[f, video] applies f to a chunk of data corresponding to one frame from the Video object"
  },
  {
    "label":"VideoMapTimeSeries",
    "type":"keyword",
    "info":"VideoMapTimeSeries[f, video] applies f to each frame of the Video object video, returning a time ser"
  },
  {
    "label":"VideoPause",
    "type":"keyword",
    "info":"VideoPause[] pauses the playback of all VideoStream objects.VideoPause[vstream] pauses the playback "
  },
  {
    "label":"VideoPlay",
    "type":"keyword",
    "info":"VideoPlay[video] returns a new VideoStream object from video and starts the playback.VideoPlay[vstre"
  },
  {
    "label":"VideoQ",
    "type":"keyword",
    "info":"VideoQ[video] yields True if video has the form of a valid Video object, and False otherwise."
  },
  {
    "label":"VideoRecord",
    "type":"keyword",
    "info":"VideoRecord[source] creates a VideoStream object and records from source.VideoRecord[vstream] starts"
  },
  {
    "label":"VideoReplace",
    "type":"keyword",
    "info":"VideoReplace[video, {t , t } ï¢ new] replaces the video between t  and t  with the new video new.Vide"
  },
  {
    "label":"VideoSplit",
    "type":"keyword",
    "info":"VideoSplit[video, t] splits video at time t.VideoSplit[video, {t , t , â¦}] splits video at times t ."
  },
  {
    "label":"VideoStop",
    "type":"keyword",
    "info":"VideoStop[] stops the playback of all VideoStream objects.VideoStop[vstream] stops the playback of t"
  },
  {
    "label":"VideoStream",
    "type":"keyword",
    "info":"VideoStream[source] creates a new VideoStream object from source.VideoStream[id] is an object that r"
  },
  {
    "label":"VideoStreams",
    "type":"keyword",
    "info":"VideoStreams[] returns all existing video streams."
  },
  {
    "label":"VideoTimeStretch",
    "type":"keyword",
    "info":"VideoTimeStretch[video, spec] applies time stretching to video using the specified spec."
  },
  {
    "label":"VideoTrackSelection",
    "type":"keyword",
    "info":"VideoTrackSelection is an option that specifies the video tracks of interest."
  },
  {
    "label":"VideoTranscode",
    "type":"keyword",
    "info":"VideoTranscode[video, \"format\"] converts video to the specified format.VideoTranscode[video, service"
  },
  {
    "label":"VideoTrim",
    "type":"keyword",
    "info":"VideoTrim[video, t] returns the first t seconds of video.VideoTrim[video, -t] returns the last t sec"
  },
  {
    "label":"ViewAngle",
    "type":"keyword",
    "info":"ViewAngle is an option for Graphics3D and related functions that gives the opening angle for a simul"
  },
  {
    "label":"ViewCenter",
    "type":"keyword",
    "info":"ViewCenter is an option for Graphics3D and related functions which gives the scaled coordinates of t"
  },
  {
    "label":"ViewMatrix",
    "type":"keyword",
    "info":"ViewMatrix is an option for Graphics3D and related functions that can be used to specify a pair of e"
  },
  {
    "label":"ViewPoint",
    "type":"keyword",
    "info":"ViewPoint is an option for Graphics3D and related functions which gives the point in space from whic"
  },
  {
    "label":"ViewPointSelectorSettings",
    "type":"keyword",
    "info":"System`ViewPointSelectorSettings"
  },
  {
    "label":"ViewPort",
    "type":"keyword",
    "info":"System`ViewPort"
  },
  {
    "label":"ViewProjection",
    "type":"keyword",
    "info":"ViewProjection is an option for three-dimensional graphics that specifies the projection to use for "
  },
  {
    "label":"ViewRange",
    "type":"keyword",
    "info":"ViewRange is an option for Graphics3D and related functions which specifies the range of distances f"
  },
  {
    "label":"ViewVector",
    "type":"keyword",
    "info":"ViewVector is an option for Graphics3D and related functions which specifies the position and direct"
  },
  {
    "label":"ViewVertical",
    "type":"keyword",
    "info":"ViewVertical is an option for Graphics3D and related functions which specifies what direction in sca"
  },
  {
    "label":"VirtualGroupData",
    "type":"keyword",
    "info":"System`VirtualGroupData"
  },
  {
    "label":"Visible",
    "type":"keyword",
    "info":"Visible is a notebook option which specifies whether the notebook should be explicitly displayed on "
  },
  {
    "label":"VisibleCell",
    "type":"keyword",
    "info":"System`VisibleCell"
  },
  {
    "label":"VoiceStyleData",
    "type":"keyword",
    "info":"VoiceStyleData[] gives the list of available voices for speech synthesis.VoiceStyleData[voice] retur"
  },
  {
    "label":"VoigtDistribution",
    "type":"keyword",
    "info":"VoigtDistribution[Î\.b4, Ï] represents Voigt distribution with parameters Î\.b4 and Ï."
  },
  {
    "label":"VolcanoData",
    "type":"keyword",
    "info":"VolcanoData[entity, property] gives the value of the specified property for the volcano entity.Volca"
  },
  {
    "label":"Volume",
    "type":"keyword",
    "info":"Volume[reg] gives the volume of the three-dimensional region reg.Volume[{x , â¦, x }, {s, s   , s   }"
  },
  {
    "label":"VonMisesDistribution",
    "type":"keyword",
    "info":"VonMisesDistribution[Î¼, Îº] represents a von Mises distribution with mean Î¼ and concentration Îº."
  },
  {
    "label":"VoronoiMesh",
    "type":"keyword",
    "info":"VoronoiMesh[{p , â¦, p }] gives a MeshRegion representing the Voronoi mesh from the points p , p , â¦."
  },
  {
    "label":"WaitAll",
    "type":"keyword",
    "info":"WaitAll[expr] waits for all concurrent evaluations represented by EvaluationObject expressions in ex"
  },
  {
    "label":"WaitAsynchronousTask",
    "type":"keyword",
    "info":"WaitAsynchronousTask[task] waits for task to complete."
  },
  {
    "label":"WaitNext",
    "type":"keyword",
    "info":"WaitNext[{eid , eid , â¦}] waits until the first evaluation represented by any of the eid  finishes, "
  },
  {
    "label":"WaitUntil",
    "type":"keyword",
    "info":"System`WaitUntil"
  },
  {
    "label":"WakebyDistribution",
    "type":"keyword",
    "info":"WakebyDistribution[Î\\[PlusMinus], Î\.b2, Î\.b3, Î\.b4, Î¼] represents Wakeby distribution with shape parameters Î\.b2 and Î\.b4, scal"
  },
  {
    "label":"WalleniusHypergeometricDistribution",
    "type":"keyword",
    "info":"WalleniusHypergeometricDistribution[n, n    , n   , w] represents a Wallenius noncentral hypergeomet"
  },
  {
    "label":"WaringYuleDistribution",
    "type":"keyword",
    "info":"WaringYuleDistribution[Î\\[PlusMinus]] represents the Yule distribution with shape parameter Î\\[PlusMinus].WaringYuleDistribu"
  },
  {
    "label":"WarpingCorrespondence",
    "type":"keyword",
    "info":"WarpingCorrespondence[s , s ] gives the time warping (DTW) similarity path between sequences s  and "
  },
  {
    "label":"WarpingDistance",
    "type":"keyword",
    "info":"WarpingDistance[s , s ] gives the dynamic time warping (DTW) distance between sequences s  and s .Wa"
  },
  {
    "label":"WatershedComponents",
    "type":"keyword",
    "info":"WatershedComponents[image] computes the watershed transform of image, returning the result as an arr"
  },
  {
    "label":"WatsonUSquareTest",
    "type":"keyword",
    "info":"                                                                                     2              "
  },
  {
    "label":"WattsStrogatzGraphDistribution",
    "type":"keyword",
    "info":"WattsStrogatzGraphDistribution[n, p] represents the WattsâStrogatz graph distribution for n-vertex g"
  },
  {
    "label":"WaveletBestBasis",
    "type":"keyword",
    "info":"WaveletBestBasis[dwd] computes a best basis representation in the DiscreteWaveletData object dwd.Wav"
  },
  {
    "label":"WaveletFilterCoefficients",
    "type":"keyword",
    "info":"WaveletFilterCoefficients[wave, filt] gives the filter coefficients for the symbolic wavelet wave of"
  },
  {
    "label":"WaveletImagePlot",
    "type":"keyword",
    "info":"WaveletImagePlot[dwd] plots the basis tree of wavelet image coefficients in the DiscreteWaveletData "
  },
  {
    "label":"WaveletListPlot",
    "type":"keyword",
    "info":"WaveletListPlot[dwd] plots wavelet transform coefficients in the DiscreteWaveletData dwd.WaveletList"
  },
  {
    "label":"WaveletMapIndexed",
    "type":"keyword",
    "info":"WaveletMapIndexed[f, wd] applies the function f to the arrays of coefficients and indices of a Conti"
  },
  {
    "label":"WaveletMatrixPlot",
    "type":"keyword",
    "info":"WaveletMatrixPlot[dwd] plots the basis tree of wavelet matrix coefficients in the DiscreteWaveletDat"
  },
  {
    "label":"WaveletPhi",
    "type":"keyword",
    "info":"WaveletPhi[wave, x] gives the scaling function Ï(x) for the symbolic wavelet wave evaluated at x.Wav"
  },
  {
    "label":"WaveletPsi",
    "type":"keyword",
    "info":"WaveletPsi[wave, x] gives the wavelet function Ï(x) for the symbolic wavelet wave evaluated at x.Wav"
  },
  {
    "label":"WaveletScale",
    "type":"keyword",
    "info":"WaveletScale is an option for ContinuousWaveletTransform and related constructs used to specify the "
  },
  {
    "label":"WaveletScalogram",
    "type":"keyword",
    "info":"WaveletScalogram[wd] plots wavelet vector coefficients in a DiscreteWaveletData or ContinuousWavelet"
  },
  {
    "label":"WaveletThreshold",
    "type":"keyword",
    "info":"WaveletThreshold[dwd] thresholds the detail wavelet coefficients in the DiscreteWaveletData object d"
  },
  {
    "label":"WavePDEComponent",
    "type":"keyword",
    "info":"                                                                2\n                                  "
  },
  {
    "label":"WeaklyConnectedComponents",
    "type":"keyword",
    "info":"WeaklyConnectedComponents[g] gives the weakly connected components of the graph g.WeaklyConnectedCom"
  },
  {
    "label":"WeaklyConnectedGraphComponents",
    "type":"keyword",
    "info":"WeaklyConnectedGraphComponents[g] gives the weakly connected components of the graph g.WeaklyConnect"
  },
  {
    "label":"WeaklyConnectedGraphQ",
    "type":"keyword",
    "info":"WeaklyConnectedGraphQ[g] yields True if the graph g is weakly connected, and False otherwise."
  },
  {
    "label":"WeakStationarity",
    "type":"keyword",
    "info":"WeakStationarity[proc] gives conditions for the process proc to be weakly stationary. "
  },
  {
    "label":"WeatherData",
    "type":"keyword",
    "info":"WeatherData[loc, \"property\"] gives the most recent measurement for the specified weather property at"
  },
  {
    "label":"WeatherForecastData",
    "type":"keyword",
    "info":"WeatherForecastData[loc] gives the most recent forecast for all weather forecast properties for the "
  },
  {
    "label":"WebAudioSearch",
    "type":"keyword",
    "info":"WebAudioSearch[\"string\"] gives a dataset of the top web audio search results for the specified liter"
  },
  {
    "label":"WebColumn",
    "type":"keyword",
    "info":"WebColumn[{expr , expr , â¦}] represents an HTML column containing the expr .WebColumn[expr, options]"
  },
  {
    "label":"WebElementObject",
    "type":"keyword",
    "info":"WebElementObject[â¦] represents an element of an open webpage operated on by WebExecute."
  },
  {
    "label":"WeberE",
    "type":"keyword",
    "info":"                                                                                                 Î¼\nW"
  },
  {
    "label":"WebExecute",
    "type":"keyword",
    "info":"WebExecute[cmd] executes the command cmd in a web browser. WebExecute[{cmd , cmd , â¦}] executes a li"
  },
  {
    "label":"WebImage",
    "type":"keyword",
    "info":"WebImage[url] gives an image of the webpage specified by url.WebImage[list] gives images specified b"
  },
  {
    "label":"WebImageSearch",
    "type":"keyword",
    "info":"WebImageSearch[\"string\"] gives a list of thumbnails of the top web image search results for the spec"
  },
  {
    "label":"WebItem",
    "type":"keyword",
    "info":"WebItem[expr] represents an HTML element containing expr.WebItem[expr, options] represents an HTML e"
  },
  {
    "label":"WebPageMetaInformation",
    "type":"keyword",
    "info":"System`WebPageMetaInformation"
  },
  {
    "label":"WebRow",
    "type":"keyword",
    "info":"WebRow[{expr , expr , â¦}] represents an HTML column containing the expr .WebRow[expr, options] displ"
  },
  {
    "label":"WebSearch",
    "type":"keyword",
    "info":"WebSearch[\"string\"] gives a dataset of the top web search results for the specified literal string.W"
  },
  {
    "label":"WebSessionObject",
    "type":"keyword",
    "info":"WebSessionObject[â¦] represents a web browser session started by StartWebSession for use with WebExec"
  },
  {
    "label":"WebSessions",
    "type":"keyword",
    "info":"WebSessions[] gives the list of all active web sessions."
  },
  {
    "label":"WebWindowObject",
    "type":"keyword",
    "info":"WebWindowObject[â¦] represents an open window or tab in a web browser."
  },
  {
    "label":"Wedge",
    "type":"keyword",
    "info":"Wedge[x, y, â¦] displays as x â y â â¦."
  },
  {
    "label":"Wednesday",
    "type":"keyword",
    "info":"Wednesday is a day of the week."
  },
  {
    "label":"WeibullDistribution",
    "type":"keyword",
    "info":"WeibullDistribution[Î\\[PlusMinus], Î\.b2] represents a Weibull distribution with shape parameter Î\\[PlusMinus] and scale paramet"
  },
  {
    "label":"WeierstrassE1",
    "type":"keyword",
    "info":"WeierstrassE1[{g , g }] gives the value e  of the Weierstrass elliptic function â at the half-period"
  },
  {
    "label":"WeierstrassE2",
    "type":"keyword",
    "info":"WeierstrassE2[{g , g }] gives the value e  of the Weierstrass elliptic function â at the half-period"
  },
  {
    "label":"WeierstrassE3",
    "type":"keyword",
    "info":"WeierstrassE3[{g , g }] gives the value e  of the Weierstrass elliptic function â at the half-period"
  },
  {
    "label":"WeierstrassEta1",
    "type":"keyword",
    "info":"WeierstrassEta1[{g , g }] gives the value Î\\[CenterDot]  of the Weierstrass zeta function Î\\[Paragraph] at the half-period Ï"
  },
  {
    "label":"WeierstrassEta2",
    "type":"keyword",
    "info":"WeierstrassEta2[{g , g }] gives the value Î\\[CenterDot]  of the Weierstrass zeta function Î\\[Paragraph] at the half-period Ï"
  },
  {
    "label":"WeierstrassEta3",
    "type":"keyword",
    "info":"WeierstrassEta3[{g , g }] gives the value Î\\[CenterDot]  of the Weierstrass zeta function Î\\[Paragraph] at the half-period Ï"
  },
  {
    "label":"WeierstrassHalfPeriods",
    "type":"keyword",
    "info":"WeierstrassHalfPeriods[{g , g }] gives the halfâperiods {Ï , Ï } for Weierstrass elliptic functions "
  },
  {
    "label":"WeierstrassHalfPeriodW1",
    "type":"keyword",
    "info":"WeierstrassHalfPeriodW1[{g , g }] gives the half-period Ï  for Weierstrass elliptic functions corres"
  },
  {
    "label":"WeierstrassHalfPeriodW2",
    "type":"keyword",
    "info":"WeierstrassHalfPeriodW2[{g , g }] gives the half-period Ï  for the Weierstrass elliptic functions co"
  },
  {
    "label":"WeierstrassHalfPeriodW3",
    "type":"keyword",
    "info":"WeierstrassHalfPeriodW3[{g , g }] gives the half-period Ï  for the Weierstrass elliptic functions co"
  },
  {
    "label":"WeierstrassInvariantG2",
    "type":"keyword",
    "info":"                            â\.b2                                                                       "
  },
  {
    "label":"WeierstrassInvariantG3",
    "type":"keyword",
    "info":"                            â\.b2                                                                       "
  },
  {
    "label":"WeierstrassInvariants",
    "type":"keyword",
    "info":"WeierstrassInvariants[{Ï , Ï }] gives the invariants {g , g } for Weierstrass elliptic functions cor"
  },
  {
    "label":"WeierstrassP",
    "type":"keyword",
    "info":"WeierstrassP[u, {g , g }] gives the Weierstrass elliptic function â(u ; g , g ). \n                  "
  },
  {
    "label":"WeierstrassPPrime",
    "type":"keyword",
    "info":"WeierstrassPPrime[u, {g , g }] gives the derivative of the Weierstrass elliptic function â(u ; g , g"
  },
  {
    "label":"WeierstrassSigma",
    "type":"keyword",
    "info":"WeierstrassSigma[u, {g , g }] gives the Weierstrass sigma function Ï(u ; g , g ). \n                 "
  },
  {
    "label":"WeierstrassZeta",
    "type":"keyword",
    "info":"WeierstrassZeta[u, {g , g }] gives the Weierstrass zeta function Î\\[Paragraph](u ; g , g ). \n                   "
  },
  {
    "label":"WeightedAdjacencyGraph",
    "type":"keyword",
    "info":"WeightedAdjacencyGraph[wmat] gives the graph with weighted adjacency matrix wmat.WeightedAdjacencyGr"
  },
  {
    "label":"WeightedAdjacencyMatrix",
    "type":"keyword",
    "info":"WeightedAdjacencyMatrix[g] gives the adjacency matrix of edge weights of the graph g.WeightedAdjacen"
  },
  {
    "label":"WeightedData",
    "type":"keyword",
    "info":"WeightedData[{x , x , â¦}, {w , w , â¦}] represents observations x  with weights w .WeightedData[{x , "
  },
  {
    "label":"WeightedGraphQ",
    "type":"keyword",
    "info":"WeightedGraphQ[g] yields True if the graph g is a weighted graph and False otherwise."
  },
  {
    "label":"Weights",
    "type":"keyword",
    "info":"Weights is an option for various fitting and other functions which specifies weights to associate wi"
  },
  {
    "label":"WelchWindow",
    "type":"keyword",
    "info":"WelchWindow[x] represents a Welch window function of x.WelchWindow[x, Î\\[PlusMinus]] uses the parameter Î\\[PlusMinus].\n"
  },
  {
    "label":"WheelGraph",
    "type":"keyword",
    "info":"WheelGraph[n] gives the wheel graph with n vertices W .\n                                            "
  },
  {
    "label":"WhenEvent",
    "type":"keyword",
    "info":"WhenEvent[event, action] specifies an action that occurs when the event triggers it for equations in"
  },
  {
    "label":"Which",
    "type":"keyword",
    "info":"Which[test , value , test , value , â¦] evaluates each of the test  in turn, returning the value of t"
  },
  {
    "label":"While",
    "type":"keyword",
    "info":"While[test, body] evaluates test, then body, repetitively, until test first fails to give True. "
  },
  {
    "label":"White",
    "type":"keyword",
    "info":"White represents the color white in graphics or style specifications. "
  },
  {
    "label":"WhiteNoiseProcess",
    "type":"keyword",
    "info":"WhiteNoiseProcess[] represents a Gaussian white noise process with mean 0 and standard deviation 1.W"
  },
  {
    "label":"WhitePoint",
    "type":"keyword",
    "info":"WhitePoint is an option for ColorConvert, ChromaticityPlot and other functions to specify the white "
  },
  {
    "label":"Whitespace",
    "type":"keyword",
    "info":"Whitespace represents a sequence of whitespace characters in StringExpression."
  },
  {
    "label":"WhitespaceCharacter",
    "type":"keyword",
    "info":"WhitespaceCharacter represents a single whitespace character in StringExpression."
  },
  {
    "label":"WhittakerM",
    "type":"keyword",
    "info":"WhittakerM[k, m, z] gives the Whittaker function M    (z). \n                                        "
  },
  {
    "label":"WhittakerW",
    "type":"keyword",
    "info":"WhittakerW[k, m, z] gives the Whittaker function W    (z). \n                                        "
  },
  {
    "label":"WholeCellGroupOpener",
    "type":"keyword",
    "info":"System`WholeCellGroupOpener"
  },
  {
    "label":"WienerFilter",
    "type":"keyword",
    "info":"WienerFilter[data, r] removes noise from data by applying a range-r Wiener filter.WienerFilter[data,"
  },
  {
    "label":"WienerProcess",
    "type":"keyword",
    "info":"WienerProcess[Î¼, Ï] represents a Wiener process with a drift Î¼ and volatility Ï.WienerProcess[] repr"
  },
  {
    "label":"WignerD",
    "type":"keyword",
    "info":"                                                           j                                        "
  },
  {
    "label":"WignerSemicircleDistribution",
    "type":"keyword",
    "info":"WignerSemicircleDistribution[r] represents a Wigner semicircle distribution with radius r centered a"
  },
  {
    "label":"WikidataData",
    "type":"keyword",
    "info":"WikidataData[item, property] gives the values of the specified property for the given item.WikidataD"
  },
  {
    "label":"WikidataSearch",
    "type":"keyword",
    "info":"WikidataSearch[\"keywords\"] returns a list of Wikidata items whose labels include the given keywords."
  },
  {
    "label":"WikipediaData",
    "type":"keyword",
    "info":"WikipediaData[article] gives the plain text of the specified Wikipedia article.WikipediaData[article"
  },
  {
    "label":"WikipediaSearch",
    "type":"keyword",
    "info":"WikipediaSearch[keywords] returns a list of Wikipedia articles whose titles include the given keywor"
  },
  {
    "label":"WilksW",
    "type":"keyword",
    "info":"WilksW[m , m ] gives Wilks's ï for the matrices m  and m .\n        1   2                            "
  },
  {
    "label":"WilksWTest",
    "type":"keyword",
    "info":"WilksWTest[m , m ] tests whether the matrices m  and m  are independent.WilksWTest[â¦, \"property\"] re"
  },
  {
    "label":"WindDirectionData",
    "type":"keyword",
    "info":"WindDirectionData[] gives the most recent measurement for wind direction near the current location.W"
  },
  {
    "label":"WindingCount",
    "type":"keyword",
    "info":"WindingCount[contour, p] gives the count of the number of times a closed curve winds around a point "
  },
  {
    "label":"WindingPolygon",
    "type":"keyword",
    "info":"WindingPolygon[{p , p , â¦, p }] gives a polygon representing all points for which the closed contour"
  },
  {
    "label":"WindowClickSelect",
    "type":"keyword",
    "info":"WindowClickSelect is a notebook option that specifies whether the window for the notebook should bec"
  },
  {
    "label":"WindowElements",
    "type":"keyword",
    "info":"WindowElements is a notebook option that specifies the elements to include in the window used to dis"
  },
  {
    "label":"WindowFloating",
    "type":"keyword",
    "info":"WindowFloating is a notebook option that specifies whether the window for the notebook should float "
  },
  {
    "label":"WindowFrame",
    "type":"keyword",
    "info":"WindowFrame is a notebook option that specifies the type of frame to draw around the window in which"
  },
  {
    "label":"WindowFrameElements",
    "type":"keyword",
    "info":"WindowFrameElements is an option for notebooks that specifies the elements to include in the frame o"
  },
  {
    "label":"WindowMargins",
    "type":"keyword",
    "info":"WindowMargins is a notebook option that specifies what margins to leave around the window that is us"
  },
  {
    "label":"WindowMovable",
    "type":"keyword",
    "info":"WindowMovable is a notebook option that specifies whether to allow the window for the notebook to be"
  },
  {
    "label":"WindowOpacity",
    "type":"keyword",
    "info":"WindowOpacity is a notebook option that determines the overall opacity of a displayed window."
  },
  {
    "label":"WindowPersistentStyles",
    "type":"keyword",
    "info":"System`WindowPersistentStyles"
  },
  {
    "label":"WindowSelected",
    "type":"keyword",
    "info":"System`WindowSelected"
  },
  {
    "label":"WindowSize",
    "type":"keyword",
    "info":"WindowSize is a notebook option that specifies the size of window that should be used to display a n"
  },
  {
    "label":"WindowStatusArea",
    "type":"keyword",
    "info":"WindowStatusArea is a notebook option that specifies what should appear in the status area in the fr"
  },
  {
    "label":"WindowTitle",
    "type":"keyword",
    "info":"WindowTitle is an option that specifies the title to give for a window. "
  },
  {
    "label":"WindowToolbars",
    "type":"keyword",
    "info":"WindowToolbars is a notebook option that specifies the toolbars to include at the top of the window "
  },
  {
    "label":"WindowWidth",
    "type":"keyword",
    "info":"System`WindowWidth"
  },
  {
    "label":"WindSpeedData",
    "type":"keyword",
    "info":"WindSpeedData[] gives the most recent measurement for wind speed near the current location.WindSpeed"
  },
  {
    "label":"WindVectorData",
    "type":"keyword",
    "info":"WindVectorData[] gives the most recent weather station measurement for wind vector near the current "
  },
  {
    "label":"WinsorizedMean",
    "type":"keyword",
    "info":"WinsorizedMean[list, f] gives the mean of the elements in list after replacing the fraction f of the"
  },
  {
    "label":"WinsorizedVariance",
    "type":"keyword",
    "info":"WinsorizedVariance[list, f] gives the variance of the elements in list after replacing the fraction "
  },
  {
    "label":"WishartMatrixDistribution",
    "type":"keyword",
    "info":"WishartMatrixDistribution[Î½, Î£] represents a Wishart matrix distribution with Î½ degrees of freedom a"
  },
  {
    "label":"With",
    "type":"keyword",
    "info":"With[{x = x , y = y , â¦}, expr] specifies that all occurrences of the symbols x, y, â¦ in expr should"
  },
  {
    "label":"WithCleanup",
    "type":"keyword",
    "info":"WithCleanup[expr, cleanup] evaluates expr, running cleanup before returning the result, even if an a"
  },
  {
    "label":"WithLock",
    "type":"keyword",
    "info":"WithLock[File[\"path\"], expr] locks the file path, evaluates expr, then releases the file.WithLock[Lo"
  },
  {
    "label":"WolframAlpha",
    "type":"keyword",
    "info":"WolframAlpha[\"query\"] sends query to Wolfram|Alpha and imports the output.WolframAlpha[\"query\", form"
  },
  {
    "label":"WolframAlphaDate",
    "type":"keyword",
    "info":"System`WolframAlphaDate"
  },
  {
    "label":"WolframAlphaQuantity",
    "type":"keyword",
    "info":"System`WolframAlphaQuantity"
  },
  {
    "label":"WolframAlphaResult",
    "type":"keyword",
    "info":"System`WolframAlphaResult"
  },
  {
    "label":"WolframLanguageData",
    "type":"keyword",
    "info":"WolframLanguageData[entity, property] gives the value of the specified property for the Wolfram Lang"
  },
  {
    "label":"Word",
    "type":"keyword",
    "info":"Word represents a word in Read, Find, and related functions. "
  },
  {
    "label":"WordBoundary",
    "type":"keyword",
    "info":"WordBoundary represents a boundary between words for purposes of matching in StringExpression."
  },
  {
    "label":"WordCharacter",
    "type":"keyword",
    "info":"WordCharacter represents a letter or digit character in StringExpression."
  },
  {
    "label":"WordCloud",
    "type":"keyword",
    "info":"WordCloud[{s , s , â¦}] generates a word cloud graphic in which the s  are sized according to their m"
  },
  {
    "label":"WordCount",
    "type":"keyword",
    "info":"WordCount[\"string\"] gives the total number of words in string."
  },
  {
    "label":"WordCounts",
    "type":"keyword",
    "info":"WordCounts[\"string\"] gives an association whose keys are the distinct words identified in string, an"
  },
  {
    "label":"WordData",
    "type":"keyword",
    "info":"WordData[\"word\", \"property\"] gives the specified property for the English word \"word\".WordData[\"word"
  },
  {
    "label":"WordDefinition",
    "type":"keyword",
    "info":"WordDefinition[\"word\"] gives the dictionary definitions available for \"word\"."
  },
  {
    "label":"WordFrequency",
    "type":"keyword",
    "info":"WordFrequency[text, word] gives the frequency of word in text.WordFrequency[text, {word , word , â¦}]"
  },
  {
    "label":"WordFrequencyData",
    "type":"keyword",
    "info":"WordFrequencyData[word] gives the frequency of word in typical published English text.WordFrequencyD"
  },
  {
    "label":"WordList",
    "type":"keyword",
    "info":"WordList[] gives a list of common words.WordList[type] gives a list of words of the specified type.\n"
  },
  {
    "label":"WordOrientation",
    "type":"keyword",
    "info":"WordOrientation is an option for WordCloud that specifies the orientations in which words appear."
  },
  {
    "label":"WordSearch",
    "type":"keyword",
    "info":"WordSearch is an option for Find and FindList that specifies whether the text searched for must appe"
  },
  {
    "label":"WordSelectionFunction",
    "type":"keyword",
    "info":"WordSelectionFunction is an option for WordCloud and other functions that specifies which words to u"
  },
  {
    "label":"WordSeparators",
    "type":"keyword",
    "info":"WordSeparators is an option for Read, Find, and related functions that specifies the list of strings"
  },
  {
    "label":"WordSpacings",
    "type":"keyword",
    "info":"WordSpacings is an option for WordCloud that specifies the empty space to be added around each word."
  },
  {
    "label":"WordStem",
    "type":"keyword",
    "info":"WordStem[\"word\"] gives a stemmed form of word, removing plurals, inflections, etc."
  },
  {
    "label":"WordTranslation",
    "type":"keyword",
    "info":"WordTranslation[\"word\", lang] gives translations for word into the language lang.WordTranslation[\"wo"
  },
  {
    "label":"WorkingPrecision",
    "type":"keyword",
    "info":"WorkingPrecision is an option for various numerical operations that specifies how many digits of pre"
  },
  {
    "label":"WrapAround",
    "type":"keyword",
    "info":"WrapAround is an option for NotebookFind that specifies whether the find operation should continue p"
  },
  {
    "label":"Write",
    "type":"keyword",
    "info":"Write[channel, expr , expr , â¦] writes the expressions expr  in sequence, followed by a newline, to "
  },
  {
    "label":"WriteLine",
    "type":"keyword",
    "info":"WriteLine[stream, \"string\"] writes \"string\", followed by a newline, to the specified output stream.\n"
  },
  {
    "label":"WriteString",
    "type":"keyword",
    "info":"WriteString[\"file\", \"string\"] writes \"string\" to a file.WriteString[channel, \"string\"] writes \"strin"
  },
  {
    "label":"Wronskian",
    "type":"keyword",
    "info":"Wronskian[{y , y , â¦}, x] gives the Wronskian determinant for the functions y , y , â¦ depending on x"
  },
  {
    "label":"XMLElement",
    "type":"keyword",
    "info":"XMLElement[tag, {attr  ï¢ val , â¦}, {data , â¦}] represents an element in symbolic XML.\n              "
  },
  {
    "label":"XMLObject",
    "type":"keyword",
    "info":"XMLObject[\"type\"] represents the head of an XML object in symbolic XML."
  },
  {
    "label":"XMLTemplate",
    "type":"keyword",
    "info":"XMLTemplate[\"string\"] yields a TemplateObject that represents an XML template to be applied using fu"
  },
  {
    "label":"Xnor",
    "type":"keyword",
    "info":"Xnor[e , e , â¦] is the logical XNOR (not XOR) function. It gives True if an even number of the e  ar"
  },
  {
    "label":"Xor",
    "type":"keyword",
    "info":"Xor[e , e , â¦] is the logical XOR (exclusive OR) function. It gives True if an odd number of the e  "
  },
  {
    "label":"XYZColor",
    "type":"keyword",
    "info":"XYZColor[x, y, z] represents a color in the XYZ color space with tristimulus values x, y and z.XYZCo"
  },
  {
    "label":"Yellow",
    "type":"keyword",
    "info":"Yellow represents the color yellow in graphics or style specifications. "
  },
  {
    "label":"Yesterday",
    "type":"keyword",
    "info":"Yesterday gives a DateObject representing the previous day."
  },
  {
    "label":"YuleDissimilarity",
    "type":"keyword",
    "info":"YuleDissimilarity[u, v] gives the Yule dissimilarity between Boolean vectors u and v."
  },
  {
    "label":"ZernikeR",
    "type":"keyword",
    "info":"                                                       m\nZernikeR[n, m, r] gives the radial Zernike "
  },
  {
    "label":"ZeroSymmetric",
    "type":"keyword",
    "info":"ZeroSymmetric[{s , â¦, s }] represents the symmetry of a zero tensor in the slots s .\n               "
  },
  {
    "label":"ZeroTest",
    "type":"keyword",
    "info":"ZeroTest is an option to various linear algebra functions that gives a function to use in testing wh"
  },
  {
    "label":"ZeroWidthTimes",
    "type":"keyword",
    "info":"ZeroWidthTimes is an option for selections that specifies whether blank spaces representing multipli"
  },
  {
    "label":"Zeta",
    "type":"keyword",
    "info":"Zeta[s] gives the Riemann zeta function Î\\[Paragraph](s). Zeta[s, a] gives the generalized Riemann zeta function"
  },
  {
    "label":"ZetaZero",
    "type":"keyword",
    "info":"                             th                                                                     "
  },
  {
    "label":"ZIPCodeData",
    "type":"keyword",
    "info":"ZIPCodeData[entity, property] gives the value of the specified property for the ZIP code entity.ZIPC"
  },
  {
    "label":"ZipfDistribution",
    "type":"keyword",
    "info":"ZipfDistribution[Ï] represents a zeta distribution with parameter Ï.ZipfDistribution[n, Ï] represent"
  },
  {
    "label":"ZoomCenter",
    "type":"keyword",
    "info":"ZoomCenter is an option for DynamicImage that specifies the position of a zoom window within an imag"
  },
  {
    "label":"ZoomFactor",
    "type":"keyword",
    "info":"ZoomFactor is an option for DynamicImage that specifies the magnification factor of a zoom. "
  },
  {
    "label":"ZTest",
    "type":"keyword",
    "info":"                                                                                                    "
  },
  {
    "label":"ZTransform",
    "type":"keyword",
    "info":"ZTransform[expr, n, z] gives the Z transform of expr. ZTransform[expr, {n , n , â¦}, {z , z , â¦}] giv"
  },
  {
    "label":"Plotly",
    "type":"keyword",
    "info":"Plotly[expr, {x, 0, 1}] gives an interactive plot of a expr"
  },   
  {
    "label":"ListPlotly",
    "type":"keyword",
    "info":"ListPlotly[{{x1,y1},{x2,y2}...}] gives an interactive plot of data"
  }, 
  {
    "label":"ListLinePlotly",
    "type":"keyword",
    "info":"ListLinePlotly[{{x1,y1},{x2,y2}...}] gives an interactive plot of data"
  },  
  {
    "label":"HTMLForm",
    "type":"keyword",
    "info":"HTMLForm[\"<h1>Hi!</h1>\"] prints custom HTML script"
  },  
  {
    "label":"SVGForm",
    "type":"keyword",
    "info":"SVGForm[expr] exports and displays any object as SVG graphics"
  },  
  {
    "label":"CreateFrontEndObject",
    "type":"keyword",
    "info":"CreateFrontEndObject[expr, uid] put expr into sharable dynamic expression with uid as id, that can be read by frontend"
  },
  {
    "label":"FrontEndRef",
    "type":"keyword",
    "info":"FrontEndRef[object or uid] acts as a reference to frontend object. Prevents evaluation on a Kernel"
  }, 
  {
    "label":"FrontEndOnly",
    "type":"keyword",
    "info":"FrontEndOnly[expr] prevents evaluation on a Kernel"
  },  
  {
    "label":"SendToFrontEnd",
    "type":"keyword",
    "info":"SendToFrontEnd[expr] evaluate arbitary expression on frontend"
  }, 
  {
    "label":"EventObject",
    "type":"keyword",
    "info":"EventObject[<|expr|>] a holder of the event object"
  },   
  {
    "label":"EventBind",
    "type":"keyword",
    "info":"EventBind[EventObject[event], handler] binds a handler to event"
  },    
  {
    "label":"RequestAnimationFrame",
    "type":"keyword",
    "info":"RequestAnimationFrame an wrapper for ListLinePlotly or ListPlotly"
  },
  {
    "label":"SetFrontEndObject",
    "type":"keyword",
    "info":"SetFrontEndObject[obj or uid, expr] sets the frontend object by itself or uid to an arbitary expr"
  },
  {
    "label":"EventRemove",
    "type":"keyword",
    "info":"EventRemove[EventObject[event]] removes handler from event"
  },  
  {
    "label":"InputField",
    "type":"keyword",
    "info":"InputField[\"default string\"] creates an input form"
  },    

  
	{
		"label":"ESCca",
		"type":"text",
		"apply":"\\[CapitalAlpha]",
		"detail":"CapitalAlpha"
	},
	{
		"label":"ESCcb",
		"type":"text",
		"apply":"\\[CapitalBeta]",
		"detail":"CapitalBeta"
	},
	{
		"label":"ESCcg",
		"type":"text",
		"apply":"\\[CapitalGamma]",
		"detail":"CapitalGamma"
	},
	{
		"label":"ESCcd",
		"type":"text",
		"apply":"\\[CapitalDelta]",
		"detail":"CapitalDelta"
	},
	{
		"label":"ESCce",
		"type":"text",
		"apply":"\\[CapitalEpsilon]",
		"detail":"CapitalEpsilon"
	},
	{
		"label":"ESCcz",
		"type":"text",
		"apply":"\\[CapitalZeta]",
		"detail":"CapitalZeta"
	},
	{
		"label":"ESCce",
		"type":"text",
		"apply":"\\[CapitalEta]",
		"detail":"CapitalEta"
	},
	{
		"label":"ESCct",
		"type":"text",
		"apply":"\\[CapitalTheta]",
		"detail":"CapitalTheta"
	},
	{
		"label":"ESCci",
		"type":"text",
		"apply":"\\[CapitalIota]",
		"detail":"CapitalIota"
	},
	{
		"label":"ESCck",
		"type":"text",
		"apply":"\\[CapitalKappa]",
		"detail":"CapitalKappa"
	},
	{
		"label":"ESCcl",
		"type":"text",
		"apply":"\\[CapitalLambda]",
		"detail":"CapitalLambda"
	},
	{
		"label":"ESCcm",
		"type":"text",
		"apply":"\\[CapitalMu]",
		"detail":"CapitalMu"
	},
	{
		"label":"ESCcn",
		"type":"text",
		"apply":"\\[CapitalNu]",
		"detail":"CapitalNu"
	},
	{
		"label":"ESCcx",
		"type":"text",
		"apply":"\\[CapitalXi]",
		"detail":"CapitalXi"
	},
	{
		"label":"ESCco",
		"type":"text",
		"apply":"\\[CapitalOmicron]",
		"detail":"CapitalOmicron"
	},
	{
		"label":"ESCcp",
		"type":"text",
		"apply":"\\[CapitalPi]",
		"detail":"CapitalPi"
	},
	{
		"label":"ESCcr",
		"type":"text",
		"apply":"\\[CapitalRho]",
		"detail":"CapitalRho"
	},
	{
		"label":"ESCcs",
		"type":"text",
		"apply":"\\[CapitalSigma]",
		"detail":"CapitalSigma"
	},
	{
		"label":"ESCct",
		"type":"text",
		"apply":"\\[CapitalTau]",
		"detail":"CapitalTau"
	},
	{
		"label":"ESCcu",
		"type":"text",
		"apply":"\\[CapitalUpsilon]",
		"detail":"CapitalUpsilon"
	},
	{
		"label":"ESCcp",
		"type":"text",
		"apply":"\\[CapitalPhi]",
		"detail":"CapitalPhi"
	},
	{
		"label":"ESCcc",
		"type":"text",
		"apply":"\\[CapitalChi]",
		"detail":"CapitalChi"
	},
	{
		"label":"ESCcp",
		"type":"text",
		"apply":"\\[CapitalPsi]",
		"detail":"CapitalPsi"
	},
	{
		"label":"ESCco",
		"type":"text",
		"apply":"\\[CapitalOmega]",
		"detail":"CapitalOmega"
	},
	{
		"label":"ESCa",
		"type":"text",
		"apply":"\\[Alpha]",
		"detail":"Alpha"
	},
	{
		"label":"ESCb",
		"type":"text",
		"apply":"\\[Beta]",
		"detail":"Beta"
	},
	{
		"label":"ESCg",
		"type":"text",
		"apply":"\\[Gamma]",
		"detail":"Gamma"
	},
	{
		"label":"ESCd",
		"type":"text",
		"apply":"\\[Delta]",
		"detail":"Delta"
	},
	{
		"label":"ESCce",
		"type":"text",
		"apply":"\\[CurlyEpsilon]",
		"detail":"CurlyEpsilon"
	},
	{
		"label":"ESCz",
		"type":"text",
		"apply":"\\[Zeta]",
		"detail":"Zeta"
	},
	{
		"label":"ESCe",
		"type":"text",
		"apply":"\\[Eta]",
		"detail":"Eta"
	},
	{
		"label":"ESCt",
		"type":"text",
		"apply":"\\[Theta]",
		"detail":"Theta"
	},
	{
		"label":"ESCi",
		"type":"text",
		"apply":"\\[Iota]",
		"detail":"Iota"
	},
	{
		"label":"ESCk",
		"type":"text",
		"apply":"\\[Kappa]",
		"detail":"Kappa"
	},
	{
		"label":"ESCl",
		"type":"text",
		"apply":"\\[Lambda]",
		"detail":"Lambda"
	},
	{
		"label":"ESCm",
		"type":"text",
		"apply":"\\[Mu]",
		"detail":"Mu"
	},
	{
		"label":"ESCn",
		"type":"text",
		"apply":"\\[Nu]",
		"detail":"Nu"
	},
	{
		"label":"ESCx",
		"type":"text",
		"apply":"\\[Xi]",
		"detail":"Xi"
	},
	{
		"label":"ESCo",
		"type":"text",
		"apply":"\\[Omicron]",
		"detail":"Omicron"
	},
	{
		"label":"ESCp",
		"type":"text",
		"apply":"\\[Pi]",
		"detail":"Pi"
	},
	{
		"label":"ESCr",
		"type":"text",
		"apply":"\\[Rho]",
		"detail":"Rho"
	},
	{
		"label":"ESCf",
		"type":"text",
		"apply":"\\[FinalSigma]",
		"detail":"FinalSigma"
	},
	{
		"label":"ESCs",
		"type":"text",
		"apply":"\\[Sigma]",
		"detail":"Sigma"
	},
	{
		"label":"ESCt",
		"type":"text",
		"apply":"\\[Tau]",
		"detail":"Tau"
	},
	{
		"label":"ESCu",
		"type":"text",
		"apply":"\\[Upsilon]",
		"detail":"Upsilon"
	},
	{
		"label":"ESCcp",
		"type":"text",
		"apply":"\\[CurlyPhi]",
		"detail":"CurlyPhi"
	},
	{
		"label":"ESCc",
		"type":"text",
		"apply":"\\[Chi]",
		"detail":"Chi"
	},
	{
		"label":"ESCp",
		"type":"text",
		"apply":"\\[Psi]",
		"detail":"Psi"
	},
	{
		"label":"ESCo",
		"type":"text",
		"apply":"\\[Omega]",
		"detail":"Omega"
	},
	{
		"label":"ESCct",
		"type":"text",
		"apply":"\\[CurlyTheta]",
		"detail":"CurlyTheta"
	},
	{
		"label":"ESCcc",
		"type":"text",
		"apply":"\\[CurlyCapitalUpsilon]",
		"detail":"CurlyCapitalUpsilon"
	},
	{
		"label":"ESCp",
		"type":"text",
		"apply":"\\[Phi]",
		"detail":"Phi"
	},
	{
		"label":"ESCcp",
		"type":"text",
		"apply":"\\[CurlyPi]",
		"detail":"CurlyPi"
	},
	{
		"label":"ESCcs",
		"type":"text",
		"apply":"\\[CapitalStigma]",
		"detail":"CapitalStigma"
	},
	{
		"label":"ESCs",
		"type":"text",
		"apply":"\\[Stigma]",
		"detail":"Stigma"
	},
	{
		"label":"ESCcd",
		"type":"text",
		"apply":"\\[CapitalDigamma]",
		"detail":"CapitalDigamma"
	},
	{
		"label":"ESCd",
		"type":"text",
		"apply":"\\[Digamma]",
		"detail":"Digamma"
	},
	{
		"label":"ESCck",
		"type":"text",
		"apply":"\\[CapitalKoppa]",
		"detail":"CapitalKoppa"
	},
	{
		"label":"ESCk",
		"type":"text",
		"apply":"\\[Koppa]",
		"detail":"Koppa"
	},
	{
		"label":"ESCcs",
		"type":"text",
		"apply":"\\[CapitalSampi]",
		"detail":"CapitalSampi"
	},
	{
		"label":"ESCs",
		"type":"text",
		"apply":"\\[Sampi]",
		"detail":"Sampi"
	},
	{
		"label":"ESCck",
		"type":"text",
		"apply":"\\[CurlyKappa]",
		"detail":"CurlyKappa"
	},
	{
		"label":"ESCcr",
		"type":"text",
		"apply":"\\[CurlyRho]",
		"detail":"CurlyRho"
	},
	{
		"label":"ESCe",
		"type":"text",
		"apply":"\\[Epsilon]",
		"detail":"Epsilon"
	}
                                                                
];

