http                      =  $Options["HTTPHandler"];
env                       =  $Options["Env"];
AppEvent                  =  $Options["AppEvent"];
ExtensionTemplates        =  $Options["ExtensionTemplates"];
ExtensionSidebarIcons        =  $Options["ExtensionSidebarIcons"];
middleware                = $Options["Middleware"];


Head        := ImportComponent["Components/Head.wlx"];
Breadcrumbs := ImportComponent["Components/Topbar/Breadcrumbs.wlx"];

Kernels   =  ImportComponent["Components/Kernel/Minimal.wlx"];

Notifications  = ImportComponent["Components/Notifications/Notifications.wlx"];

Alert           = ImportComponent["Components/Alert.wlx"];

Modals           = ImportComponent["Components/Modals/Modals.wlx"];

Views            = ImportComponent["Views.wl"];

TopBar           = ImportComponent["Components/Topbar.wlx"];

ElectronBinds           := ImportComponent["Components/ElectronAppBinds.wlx"];

IframeAPI        = ImportComponent["Components/IframeAPI.wlx"];

BrowserMenu            = ImportComponent["Components/FakeMenuBrowser.wlx"];

FakeMenu            = ImportComponent["Components/FakeMenu.wlx"];

{saveNotebook, loadNotebook, renameNotebook, cloneNotebook}         = ImportComponent["Loader.wl"];
{deinitKernel, initKernel}           = ImportComponent["KernelUtils.wl"];

{loadSettings, storeSettings}        = ImportComponent["Settings.wl"];

autolaunch                           = ImportComponent["Autolaunch.wl"];

serverParams = <|"env" -> env|>;
settings = <||>;

loadSettings[settings];
loadSettingsOnceMore := With[{},
  Print["Load settings one more time"];
  loadSettingsOnceMore = Null;
  loadSettings[settings];
];


NotebookQ[str_] := FileExtension[str] === "wln"

reopenNotebookAsQuick[_, GlobalMessanger_, __] := EventFire[GlobalMessanger, "Info", "You are already in a quick view"]

checkUpdates[GlobalMessanger_, ModalController_, Client_] := With[{},
  DeleteFile[FileNameJoin[{Directory[], ".wljs_timestamp"}] ];
  DeleteFile[FileNameJoin[{Directory[], ".wl_timestamp"}] ];

  WebUISubmit[Global`UIClearCache[](*`*), Client];

  EventFire[GlobalMessanger, "Warning", "Restart is required"];
]


renameFile[notebook_Notebook, name_String, client_] := Module[{filename = name, oldPath = notebook["Path"]},
  If[StringTake[filename, -3] =!= "wln", filename = StringJoin[filename, ".wln"]];
  filename = FileNameJoin[Join[Drop[FileNameSplit[notebook["Path"]], -1], {filename}]];
  RenameFile[oldPath, filename];
  renameNotebook[notebook, filename];
  WebUILocation[StringJoin["/folder/", URLEncode[notebook["Path"]]], client];
]

createNotebook[props_Association, assoc_Association, GlobalMessanger_, ModalController_, client_, currentpath_] := With[{path = assoc["BaseDirectory"]},
  Print[StringJoin["Creating notebook using path : ", path]];
  Then[saveNotebook[path, "Props"->props, "Events"->AppEvent, "Modals"->ModalController, "Client"->client], Function[result,

      Print[result];
      EventFire[AppEvent, Notebook["OnCreate"], result];
      EventFire[GlobalMessanger, "Log", "Created! Please wait"];
      Print["Redirect"];
      Print[result["Path"]];
      
      WebUILocation[ StringJoin["/", URLEncode[ result["Path"] ]], client, "Target"->_ ];
      
    
  ], Function[error,
    EventFire[GlobalMessanger, "Error", "Failed to create a new notebook! Check if the working directory is writable"];
  ]]
]

backupNotebook[notebook_Notebook, GlobalMessanger_, client_] := With[{},
  If[!TrueQ[notebook["ReadOnly?"]], 
    Then[saveNotebook[notebook, "Events"->AppEvent, "Temporal"->True], Function[result,
        Print[result];
      ], Function[error, EventFire[GlobalMessanger, "Error", "Failed to save a notebook!"]]
    ]
  ]
]

dumpNotebook[notebook_Notebook, GlobalMessanger_, ModalController_, client_] := With[{promise = Promise[]},
  If[TrueQ[notebook["ReadOnly?"]],
    EventFire[GlobalMessanger, "Error", "This is read-only notebook"];
  ,
    If[TrueQ @ (notebook["HaveToSaveAs"]),
      With[{
          p = Promise[]
      },
          EventFire[ModalController, "RequestPathToSave", <|
              "Promise"->p,
              "Title"->"Notebook",
              "Ext"->"wln",
              "Client"->client
          |>];
          
          Then[p, Function[result, 
              Module[{filename = StringJoin[result, ".wln"]},
                  If[filename === ".wln", filename = StringJoin[name, filename] ];
                  If[DirectoryName[filename] === "", filename = FileNameJoin[{path, filename}] ];
                  
                  
                  Then[saveNotebook[filename, notebook, "Events"->AppEvent, "Modals"->ModalController, "Client"->client], 
                    Function[savedResult,
                      notebook["HaveToSaveAs"] = False;
                      EventFire[promise, Resolve, True];
                      WebUILocation[ StringJoin["/", URLEncode[ notebook["Path"] ]], client, "Target"->"self" ];
                    ], 
                    Function[error,
                      EventFire[GlobalMessanger, "Error", "Failed to save a notebook!"];
                    ]
                  ];                  
              ];
          ], Function[result, Echo["!!!R!!"]; Echo[result] ] ];

      ]
    ,
      Then[saveNotebook[notebook, "Events"->AppEvent, "Modals"->ModalController, "Client"->client], 
        Function[result,
          Print[result];
          EventFire[promise, Resolve, True];
        ], 
        Function[error,
          EventFire[GlobalMessanger, "Error", "Failed to save a notebook!"];
        ]
      ]
    ]
  ];

  promise
]

dumpNotebookAs[assoc_Association, GlobalMessanger_, ModalController_, client_] := With[{notebook = assoc["Notebook"], path = assoc["Path"], promise = Promise[]},
If[TrueQ[notebook["ReadOnly?"]],
  EventFire[GlobalMessanger, "Error", "This is read-only notebook"];
,
  Then[cloneNotebook[notebook, path, "Modals"->ModalController, "Client"->client], 
    Function[result,
      EventFire[promise, Resolve, True];
      WebUILocation[ StringJoin["/", URLEncode[ path ] ], client ];
    ], Function[error,
    EventFire[GlobalMessanger, "Error", "Failed to save a notebook!"];
    ]
  ]
  
];
promise
]


ExtensionsJS = (StringJoin["/", FileNameToURLPath[#]]) &/@ WLJS`PM`Includes["js"];
ExtensionsStyles = With[{Path = StringJoin["/", FileNameToURLPath[#]]},
  <link rel="stylesheet" href="{Path}"/> 
] &/@ WLJS`PM`Includes["styles"] // ToStringRiffle;


App[request_] := With[{
  Secret = CreateUUID[], 
  GlobalControls  = CreateUUID[],
  ModalController = CreateUUID[],
  GlobalMessanger = CreateUUID[],
  Path = URLDecode @ StringDrop[request["Path"], 
    Switch[$OperatingSystem,
      "Windows", 
      StringLength["/iframe/"], 
      "Linux",
      StringLength["iframe"],
      _,  
      StringLength["iframe/"] 
    ]
  ] 
},

  Print["## Loading by path : "]; Print[Path];

  
  With[{
        
        SidebarId = CreateUUID[],
        OnLoad    = CreateUUID[],
        kernels = Hold[AppExtensions`KernelList] (*`*),
        
        GlobalParameters = Join[<|"Navigator"->(If[KeyExistsQ[#, "AppOS"], #["AppOS"], "Browser"] &@ request["Headers"]), "ElectronQ" -> ElectronQ[request], "AccentColor"->"teal", "BackupTimeout" -> (3 60 1000)|>, settings],
        AppClass = If[ElectronQ[request], "", "dark:bg-gray-800"],
        NavigatorOS = If[KeyExistsQ[#, "AppOS"], #["AppOS"], "Browser"] &@ request["Headers"],
        
        FrontEndCustomCSS = If[KeyExistsQ[settings, "FrontEndCustomCSS"], If[
          StringLength[settings["FrontEndCustomCSS"]] > 0,
            With[{CSSValue = settings["FrontEndCustomCSS"]},
              <style>
                <CSSValue/>
              </style>
            ]
          ,
            ""
        ], ""],

        Transparency = If[KeyExistsQ[settings, "Transparency"], If[settings["Transparency"], "true", "false"], "false"]
    },

    (* /* collect any runtime changes  */ *)
    loadSettingsOnceMore;

    EventHandler[OnLoad, Function[Null,
      EventFire[AppEvent, "AfterUILoad", <|"Client"->$Client, "Settings"->settings, "Env"->env|>];

      If[env["AppJSON", "version"] =!= settings["CurrentVersion"], With[{version = env["AppJSON", "version"]},
        settings = Join[settings, <|"CurrentVersion" -> version|>];
        storeSettings[settings];
      ] ];

      EventRemove[OnLoad];
    ]];

    (* /* redirect to extensions  */ *)
    EventHandler[EventClone[GlobalMessanger], {
      any_ :> (EventFire[AppEvent, Messanger[any], #]&)
    }];

    (* /* redirect to extensions  */ *)
    EventHandler[EventClone[GlobalControls], {
      any_ :> (EventFire[AppEvent, any, #]&)
    }]; 
   
    (*/* Hard logic */*)
    EventHandler[EventClone[GlobalControls], {
      "OpenSettings" -> (WebUILocation[StringJoin["/settings", ""], $Client, "Target"->_]&), 
      "RenameFile" -> ((renameFile @@ #) &),
       ("NewNotebook" | "_NewNotebook" | "_NewQuickNotebook") -> (createNotebook[<|"Quick"->True, "HaveToSaveAs"->True|>, <|"BaseDirectory"->AppExtensions`QuickNotesDir(*`*)|>, GlobalMessanger, ModalController, $Client, Path]&),
      "DumpSave" -> (dumpNotebook[#, GlobalMessanger, ModalController, $Client]&),
      "DumpSaveAs" -> (dumpNotebookAs[#, GlobalMessanger, ModalController, $Client]&),
      "DumpSaveTemporal" -> (backupNotebook[#, GlobalMessanger, $Client]&),
      "ReopenAsQuick" -> (reopenNotebookAsQuick[#, GlobalMessanger, ModalController, $Client]&),
      "CheckUpdates" -> (checkUpdates[GlobalMessanger, ModalController, $Client]&)
    }];
  {
    "<!DOCTYPE html>"
  ,

    <html class="h-full {AppClass}" os="{NavigatorOS}" transparency="false" > 
        <Head Title={FileNameTake[Path]} Settings={settings}>
            <meta charset="utf-8"/>
            <WLJSHeader List={ExtensionsJS}/>  
            <WLJSTransportScript TwoKernels={True} Port={$Env["ws"]}/>     
            <WebUIInitializationScript/>
            <ExtensionsStyles/>
            <FrontEndCustomCSS/>
            <IframeAPI/>
        </Head>  
        <body class="h-full dark:linux:bg-gray-700 dark:owin:bg-gray-700 owin:bg-white owin:border owin:border-slate-400"> 
        <ExtensionTemplates Template={"AppHead"} />
        <div class="h-full">
          <Alert/>
          <Modals ModalsPort={ModalController}/>
          <ExtensionTemplates Template={"AppOverlay"} Path={Path} AppEvents={AppEvent} MessagePort={GlobalMessanger}/>
          <Kernels AppEvents={AppEvent} Controls={GlobalControls} Messager={GlobalMessanger} KernelList={kernels} OnConnected={initKernel[serverParams]} OnExit={deinitKernel}/>

          <div class="h-full" id="frame">
            <div class="h-full flex flex-col">
              <Notifications Controls={GlobalControls} MessagePort={GlobalMessanger}/>
              <Views Parameters={GlobalParameters} Modals={ModalController} Kernels={kernels} Path={Path} AppEvents={AppEvent} Messanger={GlobalMessanger} Controls={GlobalControls} ExtensionTemplateInjection={ExtensionTemplates}/>
              <ExtensionTemplates Template={"AppFooter"} Path={Path} AppEvents={AppEvent} MessagePort={GlobalMessanger}/>
            </div> 
          </div>
        </div>
        <Script Secret={Secret}/>
        <ExtensionTemplates Template={"AppScripts"} />
        <ElectronBinds Controls={GlobalControls}/>
        <WebUIOnLoad Event={OnLoad}/>
      </body>
    </html>
  } // StringRiffle
] ];

Script[Rule["Secret", Secret_]] := With[{},
  <script type="module">
    core.UIClearCache = async (args, env) => {
      if (window.electronAPI) {
        if (window.electronAPI.clearCache) {
          window.electronAPI.clearCache();
        }
      }
    }

  </script>
];

http["MessageHandler", "Iframe"] = AssocMatchQ[<|"Method" -> "GET", "Path" -> "/iframe/" ~~ ___|>] -> middleware[App];

Print["Iframe app Loaded!"];



