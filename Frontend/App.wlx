http                      =  $Options["HTTPHandler"];
AppEvent                  =  $Options["AppEvent"];
ExtensionTemplates        =  $Options["ExtensionTemplates"];

Head        := ImportComponent["Components/Head.wlx"];
Breadcrumbs := ImportComponent["Components/Topbar/Breadcrumbs.wlx"];

Mode := ImportComponent["Components/Mode.wlx"];
SettingsButton  = ImportComponent["Components/Settings.wlx"];
Kernels  = ImportComponent["Components/Kernel/Kernel.wlx"];
Sidebar     = ImportComponent["Components/Sidebar/Sidebar.wlx"];

Notifications  = ImportComponent["Components/Notifications/Notifications.wlx"];

Alert           = ImportComponent["Components/Alert.wlx"];

Modals           = ImportComponent["Components/Modals/Modals.wlx"];

Views            = ImportComponent["Views.wl"];

TopBar           = ImportComponent["Components/Topbar.wlx"];

{saveNotebook, loadNotebook}         = ImportComponent["Loader.wl"];
{deinitKernel, initKernel}           = ImportComponent["KernelUtils.wl"];

createNotebook[assoc_Association, GlobalMessanger_, client_] := With[{path = assoc["BaseDirectory"]},
  Print[StringJoin["Creating notebook using path : ", path]];
  With[{result = saveNotebook[path, "Events"->AppEvent]},
    If[FailureQ[result],
      EventFire[GlobalMessanger, "Error", "Failed to create a new notebook! Check logs"];
    ,
      Print[result];
      EventFire[AppEvent, Notebook["OnCreate"], result];
      EventFire[GlobalMessanger, "Log", "Created! Please wait"];
      Print["Redirect"];
      Print[result["Path"]];
      WebUILocation[ URLEncode[ result["Path"] ], client ];
    ]
  ]
]

dumpNotebook[notebook_Notebook, GlobalMessanger_, client_] := With[{},
  With[{result = saveNotebook[notebook, "Events"->AppEvent]},
    If[FailureQ[result],
      EventFire[GlobalMessanger, "Error", "Failed to save a notebook!"];
    ,
      Print[result];
    ]
  ]
]

toggleWindowSize[_, client_] := With[{},
  WebUISubmit[Global`UIToggleWindowBonds[True](*`*), client];
]

KernelList = {};

JSScripts = (StringJoin["/", FileNameToURLPath[#]]) &/@ Join[Includes["js"], Includes["jsmodule"]];

App[request_] := With[{
        Secret = CreateUUID[], 
        SidebarId = CreateUUID[],
        GlobalControls  = CreateUUID[],
        ModalController = CreateUUID[],
        GlobalMessanger = CreateUUID[],
        GlobalParameters = <|"ElectronQ" -> ElectronQ[request], "AccentColor"->"teal"|>,
        Path = If[StringTrim[request["Path"]] == "/", Directory[], URLDecode @ StringDrop[request["Path"],1] ]
    },

    (* /* destructor */ *)
    With[{socket = Null},
    
    ];

    (* /* redirect to extensions  */ *)
    EventHandler[EventClone[GlobalMessanger], {
      any_ :> (EventFire[AppEvent, Messanger[any], #]&)
    }];

    (* /* redirect to extensions  */ *)
    EventHandler[EventClone[GlobalControls], {
      any_ :> (EventFire[AppEvent, any, #]&)
    }]; 
   
    (*/* Hard logic */*)
    EventHandler[EventClone[GlobalControls], {
      "NewNotebook" -> (createNotebook[#, GlobalMessanger, $Client]&),
      "DumpSave" -> (dumpNotebook[#, GlobalMessanger, $Client]&),
      "SidebarToggle" -> (toggleWindowSize[#, $Client]&)
    }];

    <html class="h-full"> 
        <Head>
            <WLJSHeader List={JSScripts}/>  
            <WLJSTransportScript TwoKernels={True} Port={$Env["ws"]}/>     
            <WebUIInitializationScript/>
        </Head>  
        <body class="h-full"> 
        <div>
          <Alert/>
          <Modals ModalsPort={ModalController}/>

          <div id="sidebar" class="hidden md:fixed md:inset-y-0 md:z-50 md:flex md:flex-col md:w-70 border-r border-gray-300">
            <div style="height: 5rem" class="h-16 p-1 pl-24 pr-2 flex">
              <div class="grow h-full mr-8" style="-webkit-app-region: drag"></div>  
            </div>
            <Kernels Messager={GlobalMessanger} KernelList={Hold[KernelList]} OnConnected={initKernel} OnExit={deinitKernel}/>
            <Sidebar Parameters={GlobalParameters} Secret={Secret} Path={Path} Controls={GlobalControls}/>
            <div class="border-b border-gray-300"></div>
            <div class="px-4 pb-2 pt-1 flex flex-row">
              <SettingsButton/>
              <Mode Default={""}/>
            </div>
          </div>
          
          <div class="md:pl-70" id="frame">
            <div class="h-full flex flex-col">
              <TopBar Controls={GlobalControls} Path={Path}/>
              <Notifications MessagePort={GlobalMessanger}/>
              <Views Parameters={GlobalParameters} Modals={ModalController} Kernels={Hold[KernelList]} Path={Path} AppEvents={AppEvent} Messanger={GlobalMessanger} Controls={GlobalControls} ExtensionTemplateInjection={ExtensionTemplates}/>
            </div> 
          </div>
        </div>
        <Script/>
        </body>
    </html>
];

Script = With[{},
  <script type="module">
    core.UIToggleWindowBonds = async (args, env) => {
      if (window.electronAPI) {
        window.electronAPI.toggleWindowSize();
      }
    }
  </script>
];

http["MessageHandler", "Index"] = AssocMatchQ[<|"Method" -> "GET"|>] -> App;
Print["App Loaded!"];



