http                      =  $Options["HTTPHandler"];
env                       =  $Options["Env"];
AppEvent                  =  $Options["AppEvent"];
ExtensionTemplates        =  $Options["ExtensionTemplates"];
ExtensionSidebarIcons        =  $Options["ExtensionSidebarIcons"];
middleware                = $Options["Middleware"];


Head        := ImportComponent["Components/Head.wlx"];
Breadcrumbs := ImportComponent["Components/Topbar/Breadcrumbs.wlx"];

Kernels   =  ImportComponent["Components/Kernel/Minimal.wlx"];

Notifications  = ImportComponent["Components/Notifications/Notifications.wlx"];

Alert           = ImportComponent["Components/Alert.wlx"];

Modals           = ImportComponent["Components/Modals/Modals.wlx"];

Views            = ImportComponent["Views.wl"];

TopBar           = ImportComponent["Components/Topbar.wlx"];

ElectronBinds           := ImportComponent["Components/ElectronAppBinds.wlx"];

BrowserMenu            = ImportComponent["Components/FakeMenuBrowser.wlx"];

FakeMenu            = ImportComponent["Components/FakeMenu.wlx"];

{saveNotebook, loadNotebook, renameNotebook, cloneNotebook}         = ImportComponent["Loader.wl"];
{deinitKernel, initKernel}           = ImportComponent["KernelUtils.wl"];

{loadSettings, storeSettings}        = ImportComponent["Settings.wl"];

autolaunch                           = ImportComponent["Autolaunch.wl"];

serverParams = <|"env" -> env|>;
settings = <||>;


loadSettings[settings];
loadSettingsOnceMore := With[{},
  Print["Load settings one more time"];
  loadSettingsOnceMore = Null;
  loadSettings[settings];
];

checkReleaseNotes[client_] := If[env["AppJSON", "version"] =!= settings["CurrentVersion"], With[{version = env["AppJSON", "version"]},
  With[{files = FileNames["*.wln", FileNameJoin[{Directory[], "Demos", "Release notes"}]]},
    With[{books = Select[files, Function[name, StringMatchQ[FileNameTake[name], version~~__]]]},
      Echo[StringJoin["Checking release notes for ", version]];
      Echo[books];
      If[Length[books] > 0,
        WebUILocation[StringJoin["/", URLEncode[books[[1]]]], client, "Target"->_];
      ];

      settings = Join[settings, <|"CurrentVersion" -> version|>];
      storeSettings[settings];
    ]
  ]
] ];

NotebookQ[str_] := FileExtension[str] === "wln"

reopenNotebookAsQuick[_, GlobalMessanger_, __] := EventFire[GlobalMessanger, "Info", "You are already in a quick view"]

renameFile[notebook_Notebook, name_String, client_] := Module[{filename = name, oldPath = notebook["Path"]},
  If[StringTake[filename, -3] =!= "wln", filename = StringJoin[filename, ".wln"]];
  filename = FileNameJoin[Join[Drop[FileNameSplit[notebook["Path"]], -1], {filename}]];
  RenameFile[oldPath, filename];
  renameNotebook[notebook, filename];
  WebUILocation[StringJoin["/folder/", URLEncode[notebook["Path"]]], client];
]

createNotebook[props_Association, assoc_Association, GlobalMessanger_, ModalController_, client_, currentpath_] := With[{path = assoc["BaseDirectory"]},
  Print[StringJoin["Creating notebook using path : ", path]];
  Then[saveNotebook[path, "Props"->props, "Events"->AppEvent, "Modals"->ModalController, "Client"->client], Function[result,

      Print[result];
      EventFire[AppEvent, Notebook["OnCreate"], result];
      EventFire[GlobalMessanger, "Log", "Created! Please wait"];
      Print["Redirect"];
      Print[result["Path"]];
      
      WebUILocation[ StringJoin["/", URLEncode[ result["Path"] ]], client, "Target"->_ ];
      
    
  ], Function[error,
    EventFire[GlobalMessanger, "Error", "Failed to create a new notebook! Check logs"];
  ]]
]

backupNotebook[notebook_Notebook, GlobalMessanger_, client_] := With[{},
  If[!TrueQ[notebook["ReadOnly?"]], 
    Then[saveNotebook[notebook, "Events"->AppEvent, "Temporal"->True], Function[result,
        Print[result];
      ], Function[error, EventFire[GlobalMessanger, "Error", "Failed to save a notebook!"]]
    ]
  ]
]

dumpNotebook[notebook_Notebook, GlobalMessanger_, ModalController_, client_] := With[{promise = Promise[]},
  If[TrueQ[notebook["ReadOnly?"]],
    EventFire[GlobalMessanger, "Error", "This is read-only notebook"];
  ,
    If[TrueQ @ (notebook["HaveToSaveAs"]),
      With[{
          p = Promise[]
      },
          EventFire[ModalController, "RequestPathToSave", <|
              "Promise"->p,
              "Title"->"Notebook",
              "Ext"->"wln",
              "Client"->client
          |>];
          
          Then[p, Function[result, 
              Module[{filename = StringJoin[result, ".wln"]},
                  If[filename === ".wln", filename = StringJoin[name, filename] ];
                  If[DirectoryName[filename] === "", filename = FileNameJoin[{path, filename}] ];
                  
                  
                  Then[saveNotebook[filename, notebook, "Events"->AppEvent, "Modals"->ModalController, "Client"->client], 
                    Function[savedResult,
                      notebook["HaveToSaveAs"] = False;
                      EventFire[promise, Resolve, True];
                      WebUILocation[ StringJoin["/", URLEncode[ notebook["Path"] ]], client, "Target"->"self" ];
                    ], 
                    Function[error,
                      EventFire[GlobalMessanger, "Error", "Failed to save a notebook!"];
                    ]
                  ];                  
              ];
          ], Function[result, Echo["!!!R!!"]; Echo[result] ] ];

      ]
    ,
      Then[saveNotebook[notebook, "Events"->AppEvent, "Modals"->ModalController, "Client"->client], 
        Function[result,
          Print[result];
          EventFire[promise, Resolve, True];
        ], 
        Function[error,
          EventFire[GlobalMessanger, "Error", "Failed to save a notebook!"];
        ]
      ]
    ]
  ];

  promise
]

dumpNotebookAs[assoc_Association, GlobalMessanger_, ModalController_, client_] := With[{notebook = assoc["Notebook"], path = assoc["Path"], promise = Promise[]},
If[TrueQ[notebook["ReadOnly?"]],
  EventFire[GlobalMessanger, "Error", "This is read-only notebook"];
,
  Then[cloneNotebook[notebook, path, "Modals"->ModalController, "Client"->client], 
    Function[result,
      EventFire[promise, Resolve, True];
      WebUILocation[ StringJoin["/", URLEncode[ path ] ], client ];
    ], Function[error,
    EventFire[GlobalMessanger, "Error", "Failed to save a notebook!"];
    ]
  ]
  
];
promise
]


ExtensionsJS = (StringJoin["/", FileNameToURLPath[#]]) &/@ WLJS`PM`Includes["js"];
ExtensionsStyles = With[{Path = StringJoin["/", FileNameToURLPath[#]]},
  <link rel="stylesheet" href="{Path}"/> 
] &/@ WLJS`PM`Includes["styles"] // ToStringRiffle;

defaultHomeFolder = If[KeyExistsQ[$Env, "folder"], $Env["folder"], Join[<|"Home"->FileNameJoin[{Directory[], "Demos"}]|>, settings]["Home"] ];

ExtensionMenuItems = <|"file"->{}, "misc"->{}, "view"->{}, "edit"->{}|>;

Map[Function[item, 
  If[KeyExistsQ[item, "section"], 
    With[{sec = item["section"]},
      ExtensionMenuItems[sec] = Append[ExtensionMenuItems[sec], item]
    ]
  ,
    ExtensionMenuItems["misc"] = Append[ExtensionMenuItems["misc"], item]
  ];
], Select[Flatten[WLJS`PM`Packages[#, "wljs-meta", "menu"] &/@ Keys[WLJS`PM`Packages]], AssociationQ]];

App[request_] := With[{
  Secret = CreateUUID[], 
  GlobalControls  = CreateUUID[],
  Path = Switch[$OperatingSystem,
    "Windows",  
    URLDecode @ StringDrop[request["Path"],1],  
    
    "Linux",
    URLDecode @ StringDrop[request["Path"],1 ],

    _,
    URLDecode @ StringDrop[request["Path"],1 ]]
},

  Print["## Loading by path : "]; Print[Path];

  
  With[{
        
        SidebarId = CreateUUID[],
        OnLoad    = CreateUUID[],
        ModalController = CreateUUID[],
        kernels = Hold[AppExtensions`KernelList] (*`*),
        GlobalMessanger = CreateUUID[],
        GlobalParameters = Join[<|"Navigator"->(If[KeyExistsQ[#, "AppOS"], #["AppOS"], "Browser"] &@ request["Headers"]), "ElectronQ" -> ElectronQ[request], "AccentColor"->"teal", "BackupTimeout" -> (3 60 1000)|>, settings],
        AppClass = If[ElectronQ[request], "", "dark:bg-gray-800"],
        NavigatorOS = If[KeyExistsQ[#, "AppOS"], #["AppOS"], "Browser"] &@ request["Headers"],
        
        Transparency = If[KeyExistsQ[settings, "Transparency"], If[settings["Transparency"], "true", "false"], "false"],

        FakeMenu = 
          Switch[If[KeyExistsQ[#, "AppOS"], #["AppOS"], "Browser"] &@ request["Headers"],
            "Browser",
              With[{middleware = CreateUUID[]},
                EventHandler[middleware, {
                  "NewNotebook" -> Function[Null,
                    EventFire[GlobalControls, "NewNotebook", True]
                  ],

                  "LocateExamples" -> Function[Null,
                    WebUILocation[StringJoin["/folder/", URLEncode[FileNameJoin[{Directory[], "Demos"}]]], $Client, "Target"->_];
                  ],

                  "Acknowledgments" -> Function[Null,
                    WebUILocation[StringJoin["/acknowledgments", ""], $Client, "Target"->_];
                  ],

                  "OpenDocs" -> Function[Null,
                    WebUISubmit[Global`UIDocsOpen[env["docs"], "index.html"](*`*), $Client];
                  ], 

                  "Exit" -> Function[Null,
                    Exit[0];
                  ],

                  any_String :> (EventFire[GlobalControls, any, #]&)
                }];
              

                BrowserMenu["Event" -> middleware, "Plugins"->ExtensionMenuItems, "Navigator"->(If[KeyExistsQ[#, "AppOS"], #["AppOS"], "Browser"] &@ request["Headers"])]
              ]
            ,

            "OSX",
              ""
            ,

            _,
              FakeMenu["Plugins" -> ExtensionMenuItems, "Controls"-> GlobalControls,  "Class"->"ml-1", "Style"->""]

          ]
    },

    (* /* collect any runtime changes  */ *)
    loadSettingsOnceMore;

    EventHandler[OnLoad, Function[Null,
      checkReleaseNotes[$Client];
      EventRemove[OnLoad];
    ]];

    (* /* redirect to extensions  */ *)
    EventHandler[EventClone[GlobalMessanger], {
      any_ :> (EventFire[AppEvent, Messanger[any], #]&)
    }];

    (* /* redirect to extensions  
    EventHandler[EventClone[GlobalControls], {
      any_ :> (EventFire[AppEvent, any, #]&)
    }]; */ *)
   
    (*/* Hard logic */*)
    EventHandler[EventClone[GlobalControls], {
      "RenameFile" -> ((renameFile @@ #) &),
       ("NewNotebook" | "_NewNotebook" | "_NewQuickNotebook") -> (createNotebook[<|"Quick"->True, "HaveToSaveAs"->True|>, <|"BaseDirectory"->AppExtensions`QuickNotesDir(*`*)|>, GlobalMessanger, ModalController, $Client, Path]&),
      "DumpSave" -> (dumpNotebook[#, GlobalMessanger, ModalController, $Client]&),
      "DumpSaveAs" -> (dumpNotebookAs[#, GlobalMessanger, ModalController, $Client]&),
      "DumpSaveTemporal" -> (backupNotebook[#, GlobalMessanger, $Client]&),
      "ReopenAsQuick" -> (reopenNotebookAsQuick[#, GlobalMessanger, ModalController, $Client]&)
    }];
  {
    "<!DOCTYPE html>"
  ,

    <html class="h-full {AppClass}" os="{NavigatorOS}" transparency="{Transparency}" > 
        <Head Title={FileNameTake[Path]} Settings={settings}>
            <meta charset="utf-8"/>
            <WLJSHeader List={ExtensionsJS}/>  
            <WLJSTransportScript TwoKernels={True} Port={$Env["ws"]}/>     
            <WebUIInitializationScript/>
            <ExtensionTemplates Template={"AppHead"} />
            <ExtensionsStyles/>
        </Head>  
        <body class="h-full dark:linux:bg-gray-700 dark:owin:bg-gray-700 owin:bg-white owin:border owin:border-slate-400"> 
        <div class="h-full">
          <Alert/>
          <Modals ModalsPort={ModalController}/>
          <ExtensionTemplates Template={"AppOverlay"} Path={Path} AppEvents={AppEvent} MessagePort={GlobalMessanger}/>
          <Kernels AppEvents={AppEvent} Controls={GlobalControls} Messager={GlobalMessanger} KernelList={kernels} OnConnected={initKernel[serverParams]} OnExit={deinitKernel}/>

          <div class="h-full" id="frame">
            <div class="h-full flex flex-col">
              <TopBar Menu={FakeMenu} ExtensionTemplates={ExtensionTemplates} AppEvents={AppEvent} Messanger={GlobalMessanger} Parameters={GlobalParameters} Controls={GlobalControls} Path={Path} Modals={ModalController}/>
              <Notifications MessagePort={GlobalMessanger}/>
              <Views Parameters={GlobalParameters} Modals={ModalController} Kernels={kernels} Path={Path} AppEvents={AppEvent} Messanger={GlobalMessanger} Controls={GlobalControls} ExtensionTemplateInjection={ExtensionTemplates}/>
              <ExtensionTemplates Template={"AppFooter"} Path={Path} AppEvents={AppEvent} MessagePort={GlobalMessanger}/>
            </div> 
          </div>
        </div>
        <Script Secret={Secret}/>
        <ExtensionTemplates Template={"AppScripts"} />
        <ElectronBinds Controls={GlobalControls}/>
        <WebUIOnLoad Event={OnLoad}/>
      </body>
    </html>
  } // StringRiffle
] ];

Script[Rule["Secret", Secret_]] := With[{},
  <script type="module">
    core.UIDocsOpen = async (args, env) => {
      const port = await interpretate(args[0], env);
      const link = await interpretate(args[1], env);
      const fake = document.createElement('a');
            fake.target = "_blank";
            fake.href = 'http://' + window.location.hostname + ':'+String(port) + '/' + link;
            fake.click();
    }

  </script>
];

http["MessageHandler", "App"] = AssocMatchQ[<|"Method" -> "GET"|>] -> middleware[App];


Print["App Loaded!"];



