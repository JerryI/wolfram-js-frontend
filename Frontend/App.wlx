http        =  $Server["HTTPHandler"];

Head        := ImportComponent["Components/Head.wlx"];
Breadcrumbs := ImportComponent["Components/Topbar/Breadcrumbs.wlx"];

Mode := ImportComponent["Components/Mode.wlx"];
SettingsButton  = ImportComponent["Components/Settings.wlx"];
Kernels  = ImportComponent["Components/Kernel/Kernel.wlx"];
Sidebar     = ImportComponent["Components/Sidebar/Sidebar.wlx"];

Notifications  = ImportComponent["Components/Notifications/Notifications.wlx"];

Alert           = ImportComponent["Components/Alert.wlx"];

Modals           = ImportComponent["Components/Modals/Modals.wlx"];

Views            = ImportComponent["Views.wl"];
Loader           = ImportComponent["Loader.wl"];

{deinitKernel, initKernel}           = ImportComponent["KernelUtils.wl"];

createNotebook[assoc_Association, GlobalMessanger_, client_] := With[{path = assoc["BaseDirectory"]},
  Print[StringJoin["Creating notebook using path : ", path]];
  With[{result = JerryI`Notebook`Loader`Save[path](*`*)},
    If[FailureQ[result],
      EventFire[GlobalMessanger, "Error", "Failed to create a new notebook! Check logs"];
    ,
      Print[result];
      EventFire[GlobalMessanger, "Log", "Created! Please wait"];
      Print["Redirect"];
      Print[result["Path"]];
      WebUILocation[ URLEncode[ result["Path"] ], client ];
    ]
  ]
]

toggleWindowSize[_, client_] := With[{},
  WebUISubmit[Global`UIToggleWindowBonds[True](*`*), client];
]

KernelList = {};

JSScripts = (StringJoin["/", FileNameToURLPath[#]]) &/@ Join[Includes["js"], Includes["jsmodule"]];

App[request_] := With[{
        Secret = CreateUUID[], 
        SidebarId = CreateUUID[],
        GlobalControls  = CreateUUID[],
        ModalController = CreateUUID[],
        GlobalMessanger = CreateUUID[],
        GlobalParameters = <|"ElectronQ" -> ElectronQ[request], "AccentColor"->"teal"|>,
        Path = If[StringTrim[request["Path"]] == "/", Directory[], URLDecode @ StringDrop[request["Path"],1] ]
    },
   
    (*/* Hard logic */*)
    EventHandler[GlobalControls, {
      "NewNotebook" -> (createNotebook[#, GlobalMessanger, $Client]&),
      "SidebarToggle" -> (toggleWindowSize[#, $Client]&)
    }];

    <html class="h-full"> 
        <Head>
            <WLJSHeader List={JSScripts}/>  
            <WLJSTransportScript TwoKernels={True} Port={$Env["ws"]}/>     
            <WebUIInitializationScript/>
        </Head>  
        <body class="h-full"> 
        <div>
          <Alert/>
          <Modals ModalsPort={ModalController}/>

          <div id="sidebar" class="hidden md:fixed md:inset-y-0 md:z-50 md:flex md:flex-col md:w-70 border-r border-gray-300">
            <div style="height: 5rem" class="h-16 p-1 pl-24 pr-2 flex">
              <div class="grow h-full mr-8" style="-webkit-app-region: drag"></div>  
            </div>
            <Kernels Messager={GlobalMessanger} KernelList={Hold[KernelList]} OnConnected={initKernel} OnExit={deinitKernel}/>
            <Sidebar Parameters={GlobalParameters} Secret={Secret} Path={Path} Controls={GlobalControls}/>
            <div class="border-b border-gray-300"></div>
            <div class="px-4 pb-2 pt-1 flex flex-row">
              <SettingsButton/>
              <Mode Default={""}/>
            </div>
          </div>
          
          <div class="md:pl-70" id="frame">
            <div class="h-full flex flex-col">
              <div style="z-index: 100; background: rgb(239,239,239)" class="flex sticky top-0 z-40 flex h-10 shrink-0 items-center gap-x-4 border-b border-gray-300 bg-white px-2 pl-20 md:pl-2">
                <div class="my-auto mr-auto">
                  <button id="sidebar-toggle" class="md:-ml-14 text-gray-500 hover:bg-gray-50 rounded-md w-8 h-6" style="padding-top: 0.2em">
                    <svg fill="currentColor" class="w-5 h-5 mr-auto ml-auto" viewBox="0 0 56 56" xmlns="http://www.w3.org/2000/svg">
                      <path d="M 7.7148 49.5742 L 48.2852 49.5742 C 53.1836 49.5742 55.6446 47.1367 55.6446 42.3086 L 55.6446 13.6914 C 55.6446 8.8633 53.1836 6.4258 48.2852 6.4258 L 7.7148 6.4258 C 2.8398 6.4258 .3554 8.8398 .3554 13.6914 L .3554 42.3086 C .3554 47.1602 2.8398 49.5742 7.7148 49.5742 Z M 7.7851 45.8008 C 5.4413 45.8008 4.1288 44.5586 4.1288 42.1211 L 4.1288 13.8789 C 4.1288 11.4414 5.4413 10.1992 7.7851 10.1992 L 18.2148 10.1992 L 18.2148 45.8008 Z M 48.2147 10.1992 C 50.5350 10.1992 51.8708 11.4414 51.8708 13.8789 L 51.8708 42.1211 C 51.8708 44.5586 50.5350 45.8008 48.2147 45.8008 L 21.8944 45.8008 L 21.8944 10.1992 Z M 13.7148 18.8945 C 14.4179 18.8945 15.0507 18.2617 15.0507 17.5820 C 15.0507 16.8789 14.4179 16.2696 13.7148 16.2696 L 8.6757 16.2696 C 7.9726 16.2696 7.3632 16.8789 7.3632 17.5820 C 7.3632 18.2617 7.9726 18.8945 8.6757 18.8945 Z M 13.7148 24.9649 C 14.4179 24.9649 15.0507 24.3320 15.0507 23.6289 C 15.0507 22.9258 14.4179 22.3398 13.7148 22.3398 L 8.6757 22.3398 C 7.9726 22.3398 7.3632 22.9258 7.3632 23.6289 C 7.3632 24.3320 7.9726 24.9649 8.6757 24.9649 Z M 13.7148 31.0118 C 14.4179 31.0118 15.0507 30.4258 15.0507 29.7227 C 15.0507 29.0196 14.4179 28.4102 13.7148 28.4102 L 8.6757 28.4102 C 7.9726 28.4102 7.3632 29.0196 7.3632 29.7227 C 7.3632 30.4258 7.9726 31.0118 8.6757 31.0118 Z"/>
                    </svg>  
                  </button>            
                </div>   
                <div class="grow h-full" style="-webkit-app-region: drag"></div>  
                <WebUIEventListener Type={"click"} Id={"sidebar-toggle"} Pattern={"SidebarToggle"} Event={GlobalControls} />         
              </div>
              <Notifications MessagePort={GlobalMessanger}/>
              <Views Parameters={GlobalParameters} Modals={ModalController} Kernels={Hold[KernelList]} Path={Path} Messager={GlobalMessanger} Controls={GlobalControls}/>
            </div> 
          </div>
        </div>
        <Script/>
        </body>
    </html>
];

Script = With[{},
  <script type="module">
    core.UIToggleWindowBonds = async (args, env) => {
      if (window.electronAPI) {
        window.electronAPI.toggleWindowSize();
      }
    }
  </script>
];

http["MessageHandler", "Index"] = AssocMatchQ[<|"Method" -> "GET"|>] -> App;
Print["App Loaded!"];



