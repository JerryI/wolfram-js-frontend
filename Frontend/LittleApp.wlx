http                      =  $Options["HTTPHandler"];
env                       =  $Options["Env"];
AppEvent                  =  $Options["AppEvent"];
ExtensionTemplates        =  $Options["ExtensionTemplates"];
ExtensionSidebarIcons        =  $Options["ExtensionSidebarIcons"];

Head        := ImportComponent["Components/Head.wlx"];
Breadcrumbs := ImportComponent["Components/Topbar/Breadcrumbs.wlx"];

Mode := ImportComponent["Components/Mode.wlx"];
SettingsButton  = ImportComponent["Components/Settings.wlx"];
Kernels  = ImportComponent["Components/Kernel/Kernel.wlx"];
Sidebar     = ImportComponent["Components/Sidebar/Sidebar.wlx"];

Notifications  = ImportComponent["Components/Notifications/Notifications.wlx"];

Alert           = ImportComponent["Components/Alert.wlx"];

Modals           = ImportComponent["Components/Modals/Modals.wlx"];

Views            = ImportComponent["Views.wl"];

TopBar           = ImportComponent["Components/Topbar.wlx"];

ElectronBinds           := ImportComponent["Components/ElectronAppBinds.wlx"];

BrowserMenu            = ImportComponent["Components/FakeMenuBrowser.wlx"];

FakeMenu            = ImportComponent["Components/FakeMenu.wlx"];

{saveNotebook, loadNotebook, renameNotebook, cloneNotebook}         = ImportComponent["Loader.wl"];
{deinitKernel, initKernel}           = ImportComponent["KernelUtils.wl"];

{loadSettings, storeSettings}        = ImportComponent["Settings.wl"];

autolaunch                           = ImportComponent["Autolaunch.wl"];

serverParams = <|"env" -> env|>;
settings = <||>;

sidebarState = "show";

loadSettings[settings];

NotebookQ[str_] := FileExtension[str] === "wln"

createNotebook[assoc_Association, GlobalMessanger_, ModalController_, client_, currentpath_] := With[{path = assoc["BaseDirectory"]},
  Print[StringJoin["Creating notebook using path : ", path]];
  Then[saveNotebook[path, "Events"->AppEvent, "Modals"->ModalController, "Client"->client], Function[result,

      Print[result];
      EventFire[AppEvent, Notebook["OnCreate"], result];
      EventFire[GlobalMessanger, "Log", "Created! Please wait"];
      Print["Redirect"];
      Print[result["Path"]];
      
      WebUILocation[ URLEncode[ result["Path"] ], client, "Target"->If[NotebookQ[currentpath], _, "Same"] ];
    
  ], Function[error,
    EventFire[GlobalMessanger, "Error", "Failed to create a new notebook! Check logs"];
  ]]
]

backupNotebook[notebook_Notebook, GlobalMessanger_, client_] := With[{},
  If[!TrueQ[notebook["ReadOnly"]], 
    Then[saveNotebook[notebook, "Events"->AppEvent, "Temporal"->True], Function[result,
        Print[result];
      ], Function[error, EventFire[GlobalMessanger, "Error", "Failed to save a notebook!"]]
    ]
  ]
]

dumpNotebook[notebook_Notebook, GlobalMessanger_, ModalController_, client_] := With[{},
  If[TrueQ[notebook["ReadOnly"]],
    EventFire[GlobalMessanger, "Error", "This is read-only notebook"];
  ,
    Then[saveNotebook[notebook, "Events"->AppEvent, "Modals"->ModalController, "Client"->client], 
      Function[result,
        Print[result]
      ], 
      Function[error,
        EventFire[GlobalMessanger, "Error", "Failed to save a notebook!"];
      ]
    ]
  ]
]

dumpNotebookAs[assoc_Association, GlobalMessanger_, ModalController_, client_] := With[{notebook = assoc["Notebook"], path = assoc["Path"]},
If[TrueQ[notebook["ReadOnly"]],
  EventFire[GlobalMessanger, "Error", "This is read-only notebook"];
,
  Then[cloneNotebook[notebook, path, "Modals"->ModalController, "Client"->client], 
    Function[result,
      WebUILocation[ URLEncode[ path ], client ];
    ], Function[error,
    EventFire[GlobalMessanger, "Error", "Failed to save a notebook!"];
    ]
  ]
]]


KernelList := ReleaseHold[AppExtensions`KernelList(*`*)]

ExtensionsJS = (StringJoin["/", FileNameToURLPath[#]]) &/@ WLJS`PM`Includes["js"];
ExtensionsStyles = With[{Path = StringJoin["/", FileNameToURLPath[#]]},
  <link rel="stylesheet" href="{Path}"/> 
] &/@ WLJS`PM`Includes["styles"] // ToStringRiffle;

defaultHomeFolder = If[KeyExistsQ[$Env, "folder"], $Env["folder"], Join[<|"Home"->FileNameJoin[{Directory[], "Demos"}]|>, settings]["Home"] ];

ExtensionMenuItems = <|"file"->{}, "misc"->{}, "view"->{}, "edit"->{}|>;

Map[Function[item, 
  If[KeyExistsQ[item, "section"], 
    With[{sec = item["section"]},
      ExtensionMenuItems[sec] = Append[ExtensionMenuItems[sec], item]
    ]
  ,
    ExtensionMenuItems["misc"] = Append[ExtensionMenuItems["misc"], item]
  ];
], Select[Flatten[WLJS`PM`Packages[#, "wljs-meta", "menu"] &/@ Keys[WLJS`PM`Packages]], AssociationQ]];

App[request_] := With[{
  Secret = CreateUUID[], 
  GlobalControls  = CreateUUID[],
  Path = If[StringTrim[request["Path"]] == "/", defaultHomeFolder, URLDecode @ StringDrop[request["Path"],1] ]
},

  EventHandler[Secret, {
    "SaveSidebarState" -> Function[state, sidebarState = state]
  }];
  
  With[{
        
        SidebarId = CreateUUID[],
        ModalController = CreateUUID[],
        GlobalMessanger = CreateUUID[],
        GlobalParameters = Join[<|"Navigator"->(If[KeyExistsQ[#, "AppOS"], #["AppOS"], "Browser"] &@ request["Headers"]), "ElectronQ" -> ElectronQ[request], "AccentColor"->"teal", "BackupTimeout" -> (3 60 1000)|>, settings],
        AppClass = If[ElectronQ[request], "", "dark:bg-gray-800"],
        NavigatorOS = If[KeyExistsQ[#, "AppOS"], #["AppOS"], "Browser"] &@ request["Headers"],
        
        Transparency = If[KeyExistsQ[settings, "Transparency"], If[settings["Transparency"], "true", "false"], "false"],

        FakeMenu = 
          Switch[If[KeyExistsQ[#, "AppOS"], #["AppOS"], "Browser"] &@ request["Headers"],
            "Browser",
              With[{middleware = CreateUUID[]},
                EventHandler[middleware, {
                  "NewNotebook" -> Function[Null,
                    EventFire[GlobalControls, "NewNotebook", <|"BaseDirectory" -> If[DirectoryQ[Path], Path, DirectoryName[Path]]|>]
                  ],

                  "LocateExamples" -> Function[Null,
                    WebUILocation[URLEncode[FileNameJoin[{Directory[], "Demos"}]], $Client, "Target"->_];
                  ],

                  "OpenDocs" -> Function[Null,
                    WebUISubmit[Global`UIDocsOpen[env["docs"], "index.html"](*`*), $Client];
                  ], 

                  "Exit" -> Function[Null,
                    Exit[0];
                  ],

                  any_String :> (EventFire[GlobalControls, any, #]&)
                }];
              

                BrowserMenu["Event" -> middleware, "Plugins"->ExtensionMenuItems, "Navigator"->(If[KeyExistsQ[#, "AppOS"], #["AppOS"], "Browser"] &@ request["Headers"])]
              ]
            ,

            "OSX",
              <div style="height: 5rem" class="h-16 p-1 pl-24 pr-2 hidden osx:flex">
                <div class="grow h-full mr-8" style="-webkit-app-region: drag"></div>
              </div>
            ,

            _,
              FakeMenu["Plugins" -> ExtensionMenuItems, "Controls"-> GlobalControls]

          ]
    },


    (* /* redirect to extensions  */ *)
    EventHandler[EventClone[GlobalMessanger], {
      any_ :> (EventFire[AppEvent, Messanger[any], #]&)
    }];

    (* /* redirect to extensions  
    EventHandler[EventClone[GlobalControls], {
      any_ :> (EventFire[AppEvent, any, #]&)
    }]; */ *)
   
    (*/* Hard logic */*)
    EventHandler[EventClone[GlobalControls], {
      "NewNotebook" -> (createNotebook[#, GlobalMessanger, ModalController, $Client, Path]&),
      "_NewNotebook" -> (createNotebook[<|"BaseDirectory"->If[DirectoryQ[Path], Path, DirectoryName[Path]]|>, GlobalMessanger, ModalController, $Client, Path]&),
      "DumpSave" -> (dumpNotebook[#, GlobalMessanger, ModalController, $Client]&),
      "DumpSaveAs" -> (dumpNotebookAs[#, GlobalMessanger, ModalController, $Client]&),
      "DumpSaveTemporal" -> (backupNotebook[#, GlobalMessanger, $Client]&)
    }];
  {
    "<!DOCTYPE html>"
  ,

    <html class="h-full {AppClass}" os="{NavigatorOS}" transparency="{Transparency}" > 
        <Head Title={FileNameTake[Path]} Settings={settings}>
            <meta charset="utf-8"/>
            <WLJSHeader List={ExtensionsJS}/>  
            <WLJSTransportScript TwoKernels={True} Port={$Env["ws"]}/>     
            <WebUIInitializationScript/>
            <ExtensionTemplates Template={"AppHead"} />
            <ExtensionsStyles/>
        </Head>  
        <body class="h-full dark:linux:bg-gray-700 dark:owin:bg-gray-700 owin:border owin:border-gray-300 owin:bg-blue-100/20"> 
        <div class="h-full">
          <Alert/>
          <Modals ModalsPort={ModalController}/>
          <ExtensionTemplates Template={"AppOverlay"} Path={Path} AppEvents={AppEvent} MessagePort={GlobalMessanger}/>

          
          <div class="h-full" id="frame">
            <div class="h-full flex flex-col">
              <TopBar ExtensionTemplates={ExtensionTemplates} AppEvents={AppEvent} Messanger={GlobalMessanger} Parameters={GlobalParameters} Controls={GlobalControls} Path={Path} Modals={ModalController}/>
              <Notifications MessagePort={GlobalMessanger}/>
              <Views Parameters={GlobalParameters} Modals={ModalController} Kernels={Hold[KernelList]} Path={Path} AppEvents={AppEvent} Messanger={GlobalMessanger} Controls={GlobalControls} ExtensionTemplateInjection={ExtensionTemplates}/>
              <ExtensionTemplates Template={"AppFooter"} Path={Path} AppEvents={AppEvent} MessagePort={GlobalMessanger}/>
            </div> 
          </div>
        </div>
        <Script Secret={Secret}/>
        <ExtensionTemplates Template={"AppScripts"} />
        <ElectronBinds Controls={GlobalControls}/>
      </body>
    </html>
  } // StringRiffle
] ];

Script[Rule["Secret", Secret_]] := With[{},
  <script type="module">
    core.UIDocsOpen = async (args, env) => {
      const port = await interpretate(args[0], env);
      const link = await interpretate(args[1], env);
      const fake = document.createElement('a');
            fake.target = "_blank";
            fake.href = 'http://' + window.location.hostname + ':'+String(port) + '/' + link;
            fake.click();
    }

  </script>
];

http["MessageHandler", "Index"] = AssocMatchQ[<|"Path" -> "/little"|>] -> App;


Print["LittleApp Loaded!"];



