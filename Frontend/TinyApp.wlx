http                      =  $Options["HTTPHandler"];
env                       =  $Options["Env"];
AppEvent                  =  $Options["AppEvent"];
ExtensionTemplates        =  $Options["ExtensionTemplates"];
ExtensionSidebarIcons        =  $Options["ExtensionSidebarIcons"];

Head        := ImportComponent["Components/Head.wlx"];
Breadcrumbs := ImportComponent["Components/Topbar/Breadcrumbs.wlx"];

Notifications  = ImportComponent["Components/Notifications/Notifications.wlx"];

Alert           = ImportComponent["Components/Alert.wlx"];

Modals           = ImportComponent["Components/Modals/Modals.wlx"];

Views            = ImportComponent["Views.wl"];

TopBar           = ImportComponent["Components/LittleTopbar.wlx"];

ElectronBinds           := ImportComponent["Components/ElectronAppBinds.wlx"];

BrowserMenu            = ImportComponent["Components/FakeMenuBrowser.wlx"];

FakeMenu            = ImportComponent["Components/FakeMenu.wlx"];

{saveNotebook, loadNotebook, renameNotebook, cloneNotebook}         = ImportComponent["Loader.wl"];
{deinitKernel, initKernel}           = ImportComponent["KernelUtils.wl"];

{loadSettings, storeSettings}        = ImportComponent["Settings.wl"];

autolaunch                           = ImportComponent["Autolaunch.wl"];

serverParams = <|"env" -> env|>;
settings = <||>;

sidebarState = "show";

loadSettings[settings];

NotebookQ[str_] := FileExtension[str] === "wln"

createNotebook[assoc_Association, GlobalMessanger_, ModalController_, client_, currentpath_] := With[{path = assoc["BaseDirectory"]},
  Print[StringJoin["Creating notebook using path : ", path]];
  Then[saveNotebook[path, "Events"->AppEvent, "Modals"->ModalController, "Client"->client], Function[result,

      Print[result];
      EventFire[AppEvent, Notebook["OnCreate"], result];
      EventFire[GlobalMessanger, "Log", "Created! Please wait"];
      Print["Redirect"];
      Print[result["Path"]];
      
      If[client =!= Null, WebUILocation[ URLEncode[ result["Path"] ], client, "Target"->If[NotebookQ[currentpath], _, "Same"] ] ];
    
  ], Function[error,
    EventFire[GlobalMessanger, "Error", "Failed to create a new notebook! Check logs"];
  ]]
]

createNotebook[props_Association, assoc_Association, GlobalMessanger_, ModalController_, client_, currentpath_] := With[{path = assoc["BaseDirectory"]},
  Print[StringJoin["Creating notebook using path : ", path]];
  Then[saveNotebook[path, "Props"->props, "Events"->AppEvent, "Modals"->ModalController, "Client"->client], Function[result,

      Print[result];
      EventFire[AppEvent, Notebook["OnCreate"], result];
      EventFire[GlobalMessanger, "Log", "Created! Please wait"];
      Print["Redirect"];
      Print[result["Path"]];
      
      If[props["Little"] === True,
        WebUILocation[ StringJoin["little/", URLEncode[ result["Path"] ]], client, "Target"->_ ];
      , 
        WebUILocation[ URLEncode[ result["Path"] ], client, "Target"->If[NotebookQ[currentpath], _, "Same"] ];
      ];
      
    
  ], Function[error,
    EventFire[GlobalMessanger, "Error", "Failed to create a new notebook! Check logs"];
  ]]
]

backupNotebook[notebook_Notebook, GlobalMessanger_, client_] := With[{},
  If[!TrueQ[notebook["ReadOnly"]], 
    Then[saveNotebook[notebook, "Events"->AppEvent, "Temporal"->True], Function[result,
        Print[result];
      ], Function[error, EventFire[GlobalMessanger, "Error", "Failed to save a notebook!"]]
    ]
  ]
]

dumpNotebook[notebook_Notebook, GlobalMessanger_, ModalController_, client_] := With[{},
  If[TrueQ[notebook["ReadOnly"]],
    EventFire[GlobalMessanger, "Error", "This is read-only notebook"];
  ,
    If[TrueQ @ (notebook["HaveToSaveAs"]),
      With[{
          p = Promise[]
      },
          EventFire[ModalController, "RequestPathToSave", <|
              "Promise"->p,
              "Title"->"Notebook",
              "Ext"->"wln",
              "Client"->client
          |>];
          
          Then[p, Function[result, 
              Module[{filename = StringJoin[result, ".wln"]},
                  If[filename === ".wln", filename = StringJoin[name, filename] ];
                  If[DirectoryName[filename] === "", filename = FileNameJoin[{path, filename}] ];
                  
                  
                  Then[saveNotebook[filename, notebook, "Events"->AppEvent, "Modals"->ModalController, "Client"->client], 
                    Function[savedResult,
                      notebook["HaveToSaveAs"] = False;
                      Print[savedResult]
                    ], 
                    Function[error,
                      EventFire[GlobalMessanger, "Error", "Failed to save a notebook!"];
                    ]
                  ];                  
              ];
          ], Function[result, Echo["!!!R!!"]; Echo[result] ] ];

      ]
    ,
      Then[saveNotebook[notebook, "Events"->AppEvent, "Modals"->ModalController, "Client"->client], 
        Function[result,
          Print[result]
        ], 
        Function[error,
          EventFire[GlobalMessanger, "Error", "Failed to save a notebook!"];
        ]
      ]
    ]
  ]
]

dumpNotebookAs[assoc_Association, GlobalMessanger_, ModalController_, client_] := With[{notebook = assoc["Notebook"], path = assoc["Path"]},
If[TrueQ[notebook["ReadOnly"]],
  EventFire[GlobalMessanger, "Error", "This is read-only notebook"];
,
  Then[cloneNotebook[notebook, path, "Modals"->ModalController, "Client"->client], 
    Function[result,
      WebUILocation[ URLEncode[ path ], client ];
    ], Function[error,
    EventFire[GlobalMessanger, "Error", "Failed to save a notebook!"];
    ]
  ]
]]


KernelList := ReleaseHold[AppExtensions`KernelList(*`*)]

ExtensionsJS = (StringJoin["/", FileNameToURLPath[#]]) &/@ WLJS`PM`Includes["js"];
ExtensionsStyles = With[{Path = StringJoin["/", FileNameToURLPath[#]]},
  <link rel="stylesheet" href="{Path}"/> 
] &/@ WLJS`PM`Includes["styles"] // ToStringRiffle;

defaultHomeFolder = If[KeyExistsQ[$Env, "folder"], $Env["folder"], Join[<|"Home"->FileNameJoin[{Directory[], "Demos"}]|>, settings]["Home"] ];

ExtensionMenuItems = <|"file"->{}, "misc"->{}, "view"->{}, "edit"->{}|>;

Map[Function[item, 
  If[KeyExistsQ[item, "section"], 
    With[{sec = item["section"]},
      ExtensionMenuItems[sec] = Append[ExtensionMenuItems[sec], item]
    ]
  ,
    ExtensionMenuItems["misc"] = Append[ExtensionMenuItems["misc"], item]
  ];
], Select[Flatten[WLJS`PM`Packages[#, "wljs-meta", "menu"] &/@ Keys[WLJS`PM`Packages]], AssociationQ]];

temporalNotebook = Null;

recreateNotebook[modals_] := With[{n = Notebook[]},
  temporalNotebook = n;
  CellObj["Notebook"->temporalNotebook];
  temporalNotebook["Path"] = FileNameJoin[{ AppExtensions`QuickNotesDir(*`*), "overlayNote.wln"}];
  dumpNotebook[temporalNotebook, Null, Null, Null];

  EventHandler[EventClone[n], {
    "New Cell" -> Function[cell,
        If[Length[n["Cells"]] > 2 && !TrueQ[n["AskedToExtend"]],
          With[{
            cli = $Client
          }, 

            With[{request = CreateUUID[]},
              EventHandler[request, {
                  "Success" -> Function[Null, 
                      EventRemove[request];

                      temporalNotebook["Path"] = FileNameJoin[{ AppExtensions`QuickNotesDir(*`*), StringJoin[RandomWord[], StringTake[CreateUUID[], 3], ".wln"]}];
                      dumpNotebook[temporalNotebook, Null, Null, Null];

                      WebUILocation[ StringJoin["little/", URLEncode[ temporalNotebook["Path"] ]], cli, "Target"->_ ];
                      temporalNotebook = Null;
                  ],
                
                  _ -> Function[Null,
                      EventRemove[request]
                  ]
              }];
            
              EventFire[modals, "GenericAskTemplate", <|
                  "Callback" -> request, 
                  "Client" -> cli,
                  "Title" -> "Create a proper notebook?", 
                  "Content" -> "It will be transformed into a quick note",
                  "SVGIcon" -> With[{},
                      <svg class="mr-2 h-4 w-4 text-gray-500" viewBox="0 0 24 24" fill="none" >
                        <rect width="24" height="24" fill="none"/>
                        <path d="M13.8284 13.8284L20.8995 20.8995M20.8995 20.8995L20.7816 15.1248M20.8995 20.8995L15.1248 20.7816" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"/>
                        <path d="M9.89948 13.8284L2.82841 20.8995M2.82841 20.8995L8.60312 20.7816M2.82841 20.8995L2.94626 15.1248" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"/>
                        <path d="M13.8284 9.8995L20.8995 2.82843M20.8995 2.82843L15.1248 2.94629M20.8995 2.82843L20.7816 8.60314" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"/>
                        <path d="M9.89947 9.89951L2.8284 2.82844M2.8284 2.82844L2.94626 8.60315M2.8284 2.82844L8.60311 2.94629" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"/>
                      </svg>
                    ]
              |>];

            ];          
          
          ];

          n["AskedToExtend"] = True;
        ]
    ]
  }];
]

App[request_] := With[{
  Secret = CreateUUID[], 
  GlobalControls  = CreateUUID[]
},


  Echo[temporalNotebook];
  Echo["Created temporal notebook"];

  EventHandler[Secret, {
    "SaveSidebarState" -> Function[state, sidebarState = state]
  }];
  
  With[{
        
        SidebarId = CreateUUID[],
        ModalController = CreateUUID[],
        GlobalMessanger = CreateUUID[],
        GlobalParameters = Join[<|"Navigator"->(If[KeyExistsQ[#, "AppOS"], #["AppOS"], "Browser"] &@ request["Headers"]), "ElectronQ" -> ElectronQ[request], "AccentColor"->"teal", "BackupTimeout" -> (3 60 1000)|>, settings],
        AppClass = If[ElectronQ[request], "", "dark:bg-gray-800"],
        NavigatorOS = If[KeyExistsQ[#, "AppOS"], #["AppOS"], "Browser"] &@ request["Headers"],
        
        Transparency = If[KeyExistsQ[settings, "Transparency"], If[settings["Transparency"], "true", "false"], "false"],

        n := temporalNotebook
    },

    If[temporalNotebook === Null, 
      recreateNotebook[ModalController];
    ];

    Echo[n["Path"]];


    (* /* redirect to extensions  */ *)
    EventHandler[EventClone[GlobalMessanger], {
      any_ :> (EventFire[AppEvent, Messanger[any], #]&)
    }];

    (* /* redirect to extensions  
    EventHandler[EventClone[GlobalControls], {
      any_ :> (EventFire[AppEvent, any, #]&)
    }]; */ *)
   
    (*/* Hard logic */*)
    EventHandler[EventClone[GlobalControls], {
      "NewNotebook" -> (createNotebook[#, GlobalMessanger, ModalController, $Client, Path]&),
      "_NewNotebook" -> (createNotebook[<|"BaseDirectory"->If[DirectoryQ[Path], Path, DirectoryName[Path]]|>, GlobalMessanger, ModalController, $Client, Path]&),
      "_NewLittleNotebook" -> (createNotebook[<|"Little"->True, "HaveToSaveAs"->True|>, <|"BaseDirectory"->AppExtensions`QuickNotesDir(*`*)|>, GlobalMessanger, ModalController, $Client, Path]&),
      "DumpSave" -> (dumpNotebook[#, GlobalMessanger, ModalController, $Client]&),
      "DumpSaveAs" -> (dumpNotebookAs[#, GlobalMessanger, ModalController, $Client]&),
      "DumpSaveTemporal" -> (backupNotebook[#, GlobalMessanger, $Client]&)
    }];
  {
    "<!DOCTYPE html>"
  ,

    <html class="h-full {AppClass}" os="{NavigatorOS}" transparency="{Transparency}" > 
        <Head Title={FileNameTake[Path]} Settings={settings}>
            <meta charset="utf-8"/>
            <WLJSHeader List={ExtensionsJS}/>  
            <WLJSTransportScript TwoKernels={True} Port={$Env["ws"]}/>     
            <WebUIInitializationScript/>
            <ExtensionTemplates Template={"AppHead"} />
            <ExtensionsStyles/>
        </Head>  
        <body class="h-full"> 
        <div class="h-full">
          <Modals ModalsPort={ModalController}/>
          <ExtensionTemplates Template={"AppOverlay"} Path={Path} AppEvents={AppEvent} MessagePort={GlobalMessanger}/>
          <style>
            .ccontainer {
              padding-bottom: 0.5rem !important;
            }

            main {
              flex-grow: unset !important;
              margin-top: auto !important;
              margin-bottom: auto !important;
            }

            .cwrapper {
                background: #fff;
                padding: 0.5rem;
                border-radius: 0.75rem;
                /* backdrop-filter: blur(29px); */
            }

            .cborder {
              display: none !important;
            }
          </style>
          <div class="h-full" id="frame">
            <div class="h-full flex flex-col">
              <Views Parameters={GlobalParameters} Modals={ModalController} Kernels={Hold[KernelList]} Path={n["Path"]} AppEvents={AppEvent} Messanger={GlobalMessanger} Controls={GlobalControls} ExtensionTemplateInjection={ExtensionTemplates}/>
            </div> 
          </div>
        </div>
        <Script Secret={Secret}/>
        <ExtensionTemplates Template={"AppScripts"} />
        <ElectronBinds Controls={GlobalControls}/>
      </body>
    </html>
  } // StringRiffle
] ];

Script[Rule["Secret", Secret_]] := With[{},
  <script type="module">
    core.UIDocsOpen = async (args, env) => {
      const port = await interpretate(args[0], env);
      const link = await interpretate(args[1], env);
      const fake = document.createElement('a');
            fake.target = "_blank";
            fake.href = 'http://' + window.location.hostname + ':'+String(port) + '/' + link;
            fake.click();
    }


    const checkOverflow = (el) => {
      const isOverflowing = el.clientWidth < el.scrollWidth ||
        el.clientHeight < el.scrollHeight;
      return isOverflowing;
    }

    const container = document.getElementsByClassName('ccontainer')[0];
    let interval;

    const resizeBy = (sz) => {
      electronAPI.changeWindowSizeBy(sz);
    }

    const checkBorders = () => {
      if (checkOverflow(container)) {
        clearInterval(interval);
        console.log('overflow!');
        resizeBy([0, container.scrollHeight - container.clientHeight]);
        setTimeout(() => {
          interval = setInterval(checkBorders, 300);
        }, 500);
      }
    }

    interval = setInterval(checkBorders, 300);
  </script>
];

http["MessageHandler", "Tiny"] = AssocMatchQ[<|"Method" -> "GET", "Path" -> "/tiny" ~~___|>] -> App;


Print["LittleApp Loaded!"];



