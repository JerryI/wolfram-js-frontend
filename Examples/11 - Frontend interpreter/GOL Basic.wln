<|"Notebook" -> <|"ReadOnly"->True, "FocusedCell" -> CellObj[JerryI`Notebook`CellObj`$312], 
   "Objects" -> <||>, "Path" -> "/users/kirill/Github/wolfram-js-frontend-dev\
/Examples/09 - Frontend interpreter/GOL-Basic.wln"|>, 
 "Cells" -> 
  {<|"Data" -> 
     ".md\n# GOL: Example with a simple call\nUsing frontend function", 
    "Display" -> "codemirror", "Hash" -> 
     "d311daa6-f96c-47a8-b054-66b0f0bd34de", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "adbcd37f-eeb4-4cec-bc3b-99fd23bb999d"|>, 
   <|"Data" -> 
     "\n# GOL: Example with a simple call\nUsing frontend function", 
    "Display" -> "markdown", "Hash" -> 
     "86e52449-c11a-467f-b1db-c464f8a3cb24", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> False|>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "adbcd37f-eeb4-4cec-bc3b-99fd23bb999d"|>, 
   <|"Data" -> ".js\n//create js canvas\nconst canvas = \
document.createElement(\"canvas\");\ncanvas.width = 400;\ncanvas.height = \
400;\n\nlet context = canvas.getContext(\"2d\");\ncontext.fillStyle = \
\"lightgray\";\ncontext.fillRect(0, 0, 500, 500);\n\n//an array to store the \
previous state\nlet old = new Array(40);\nfor (let i = 0; i < old.length; \
i++) {\n  old[i] = new Array(40).fill(0); \n}\n\n//a function to draw on \
it\ncore.MyFunction = async (args, env) => {\n  const data = await \
interpretate(args[0], env);\n\n  //draw our boxes\n  for(let i=0; i<40; ++i) \
{\n    for (let j=0; j<40; ++j) {\n      //old pixels will leave blue \
traces\n      if (old[i][j] > 0) {\n        context.fillStyle = \
\"rgba(0,0,255,0.2)\"; \n        context.fillRect(i*10 + 2, j*10 + 2, 6, \
6);\n      }\n      //new pixels\n      if (data[i][j] > 0) {\n        \
context.fillStyle = \"rgba(255,0,0,0.4)\"; \n        context.fillRect(i*10 + \
1, j*10 + 1, 8, 8);\n      } else {\n        context.fillStyle = \
\"rgba(255,255,255,0.4)\"; \n        context.fillRect(i*10 + 1, j*10 + 1, 8, \
8);\n      }\n      \n      //store the previous frame\n      old[i][j] = \
data[i][j];\n    }\n  }\n}\n\nreturn canvas", "Display" -> "codemirror", 
    "Hash" -> "8c442929-bc69-44f1-923c-660a5f55ac42", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> False|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "adbcd37f-eeb4-4cec-bc3b-99fd23bb999d"|>, 
   <|"Data" -> ".md\nWolfram Mathematica code", "Display" -> "codemirror", 
    "Hash" -> "8d0eff89-6c1c-4fb5-b2e7-8027d738219f", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "adbcd37f-eeb4-4cec-bc3b-99fd23bb999d"|>, 
   <|"Data" -> "\nWolfram Mathematica code", "Display" -> "markdown", 
    "Hash" -> "9e8a603d-4992-4c20-9b70-32434eab2849", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> False|>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "adbcd37f-eeb4-4cec-bc3b-99fd23bb999d"|>, 
   <|"Data" -> "gameOfLife = {224, {2, {{2, 2, 2}, {2, 1, 2}, {2, 2, 2}}}, \
{1, 1}};\nboard = RandomInteger[1, {40, 40}];\nDo[\n  MyFunction[board = \
CellularAutomaton[gameOfLife, board, {{0, 1}}] // Last] // FrontSubmit;\n  \n \
 Pause[0.1];\n, {i,1,100}]", "Display" -> "codemirror", 
    "Hash" -> "121cb43b-eaed-414c-ace6-4747725a3768", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> False|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "adbcd37f-eeb4-4cec-bc3b-99fd23bb999d"|>}, "serializer" -> "jsfn4"|>
