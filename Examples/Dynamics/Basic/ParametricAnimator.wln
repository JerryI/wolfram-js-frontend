<|"notebook" -> <|"name" -> "Joyously", "id" -> "vaguely-e3610", 
   "kernel" -> LocalKernel, "objects" -> <||>, "path" -> "/Volumes/Data/Githu\
b/wolfram-js-frontend/Examples/Dynamics/Basic/ParametricAnimator.wln", 
   "cell" :> Exit[], "date" -> DateObject[{2023, 9, 27, 10, 26, 
      0.773231`6.640884246387989}, "Instant", "Gregorian", 2.], 
   "symbols" -> <||>, "channel" -> WebSocketChannel[
     KirillBelov`WebSocketHandler`WebSocketChannel`$18], 
   "SelectedCell" -> "fecc8db6-7ece-46ea-8401-2e82fc76f6c6"|>, 
 "cells" -> {<|"id" -> "d2876f65-5146-405d-b28f-dc4732c56ab58f9", 
    "type" -> "input", "data" -> ".md\n## Parametric curve animator\nProvide \
a curve equation as a function of the angle and the ranges", 
    "display" -> "codemirror", "sign" -> "vaguely-e3610", 
    "props" -> <|"hidden" -> True|>|>, 
   <|"id" -> "a2a4dff7-6882-48bc-8008-95691eb49cbe8f9", "type" -> "output", 
    "data" -> "\n## Parametric curve animator\nProvide a curve equation as a \
function of the angle and the ranges", "display" -> "markdown", 
    "sign" -> "vaguely-e3610", "props" -> <|"hidden" -> False|>|>, 
   <|"id" -> "fecc8db6-7ece-46ea-8401-2e82fc76f6c68f9", "type" -> "input", 
    "data" -> "ParametricAnimator[equation_, variable_:t, range_:{0, \
Infinity, 0.1}] := LeakyModule[{time = range[[1]], task, scale = 1, array = \
{}, scaledArray={}},\n\n    (* sample the equation each frame and rescale if \
needed *)\n\tanimate := Block[{variable = time},\n        With[{e = {Sin[t], \
Cos[t]} equation},\n    \t\tscale = If[Norm[e scale] > 1.4, scale 0.95, scale \
1];\n            array = Append[array, e];\n    \t\tscaledArray = scale \
array; \n            pointer = e scale;\n        ];\n\n\t\ttime += \
range[[3]];\n\t\tIf[time >= range[[2]], TaskRemove[task]];\n\t];\n\n    \
animate;\n\n    (* async task to animate every 30 ms *)\n\ttask = \
SetInterval[animate, 30];\n\n    (* stop the task if cell was destroyed or \
reevaluated *)\n\tEventHandler[EvaluationCell[], {\"destroy\"->Function[Null, \
TaskRemove[task]; Print[\"removed\"]]}];\n\n\tGraphics[{Red, PointSize[0.05], \
Point[pointer // Offload],\n Opacity[0.5], Line[scaledArray // Offload]\n  }, \
TransitionDuration->10, TransitionType->\"Linear\", Controls->True]\n]", 
    "display" -> "codemirror", "sign" -> "vaguely-e3610", 
    "props" -> <|"hidden" -> False, "init" -> True|>|>, 
   <|"id" -> "fc2db819-d818-4848-8eb3-6a5eb02e1b798f9", "type" -> "input", 
    "data" -> "ParametricAnimator[Exp[Sin[t]] - 2 Cos[4t] + Sin[(2t - \
Pi)/24], t, {0,16, 0.05}]", "display" -> "codemirror", 
    "sign" -> "vaguely-e3610", "props" -> <|"hidden" -> False|>|>}, 
 "serializer" -> "jsfn3"|>
