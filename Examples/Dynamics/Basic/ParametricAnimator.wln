<|"notebook" -> <|"name" -> "Joyously", "id" -> "appalling-b83bb", 
   "kernel" -> LocalKernel, "objects" :> 
    Association["3971499d-8fa7-4f4e-98d4-d8e03c9c2fce" -> 
      Association["json" -> "[\"Graphics\",[\"List\",[\"RGBColor\",1,0,0],[\"\
PointSize\",5.0e-2],[\"Point\",[\"Offload\",\"pointer\"]],[\"Opacity\",0.5],[\
\"Line\",[\"Offload\",\"scaledArray$80750\"]]],[\"Rule\",\"TransitionDuration\
\",10],[\"Rule\",\"TransitionType\",\"'Linear'\"],[\"Rule\",\"Controls\",true\
],[\"Rule\",\"PlotRange\",[\"List\",[\"List\",-1,1],[\"List\",-1,1]]]]", 
       "date" -> DateObject[{2023, 10, 16, 11, 9, 
          32.441788`8.263679762380798}, "Instant", "Gregorian", 2.]]], 
   "path" -> "/Volumes/Data/Github/wolfram-js-frontend/Examples/Dynamics/Basi\
c/ParametricAnimator.wln", "cell" :> Exit[], 
   "date" -> DateObject[{2023, 11, 5, 22, 42, 11.706004`7.820983654338453}, 
     "Instant", "Gregorian", 1.], "symbols" -> 
    <|"pointer" -> <|"date" -> DateObject[{2023, 10, 16, 11, 9, 
          1.638039`6.9668992265333065}, "Instant", "Gregorian", 2.]|>, 
     "scaledArray$70403" -> <|"date" -> DateObject[{2023, 10, 16, 11, 9, 
          1.763975`6.999067414672241}, "Instant", "Gregorian", 2.]|>, 
     "scaledArray$80750" -> <|"date" -> DateObject[{2023, 10, 16, 11, 9, 
          32.473899`8.2641094160405}, "Instant", "Gregorian", 2.]|>|>, 
   "channel" -> WebSocketChannel[
     KirillBelov`WebSocketHandler`WebSocketChannel`$44], 
   "SelectedCell" -> "fecc8db6-7ece-46ea-8401-2e82fc76f6c68f9420"|>, 
 "cells" -> {<|"id" -> "d2876f65-5146-405d-b28f-dc4732c56ab58f9420978", 
    "type" -> "input", "data" -> ".md\n## Parametric curve animator\nProvide \
a curve equation as a function of the angle and the ranges", 
    "display" -> "codemirror", "sign" -> "appalling-b83bb", 
    "props" -> <|"hidden" -> True|>|>, 
   <|"id" -> "a2a4dff7-6882-48bc-8008-95691eb49cbe8f9420978", 
    "type" -> "output", "data" -> "\n## Parametric curve animator\nProvide a \
curve equation as a function of the angle and the ranges", 
    "display" -> "markdown", "sign" -> "appalling-b83bb", 
    "props" -> <|"hidden" -> False|>|>, 
   <|"id" -> "fecc8db6-7ece-46ea-8401-2e82fc76f6c68f9420978", 
    "type" -> "input", "data" -> "ParametricAnimator[equation_, variable_:t, \
range_:{0, Infinity, 0.1}] := LeakyModule[{time = range[[1]], task, scale = \
1, array = {}, scaledArray={}},\n\n    (* sample the equation each frame and \
rescale if needed *)\n\tanimate := Block[{variable = time},\n        With[{e \
= {Sin[t], Cos[t]} equation},\n    \t\tscale = If[Norm[e scale] > 1.4, scale \
0.95, scale 1];\n            array = Append[array, e];\n    \t\tscaledArray = \
scale array; \n            pointer = e scale;\n        ];\n\n\t\ttime += \
range[[3]];\n\t\tIf[time >= range[[2]], TaskRemove[task]];\n\t];\n\n    \
animate;\n\n    (* async task to animate every 30 ms *)\n\ttask = \
SetInterval[animate, 30];\n\n    (* stop the task if cell was destroyed or \
reevaluated *)\n\tEventHandler[EvaluationCell[], {\"destroy\"->Function[Null, \
TaskRemove[task]; Print[\"removed\"]]}];\n\n\tGraphics[{Red, PointSize[0.05], \
Point[pointer // Offload],\n Opacity[0.5], Line[scaledArray // Offload]\n  }, \
TransitionDuration->10, TransitionType->\"Linear\", Controls->True, \
PlotRange->{{-1,1}, {-1,1}}]\n]", "display" -> "codemirror", 
    "sign" -> "appalling-b83bb", "props" -> <|"hidden" -> False, 
      "init" -> True|>|>, 
   <|"id" -> "fc2db819-d818-4848-8eb3-6a5eb02e1b798f9420978", 
    "type" -> "input", "data" -> "ParametricAnimator[Exp[Sin[t]] - 2 Cos[4t] \
+ Sin[(2t - Pi)/24], t, {0,16, 0.05}]", "display" -> "codemirror", 
    "sign" -> "appalling-b83bb", "props" -> <|"hidden" -> False|>|>}, 
 "serializer" -> "jsfn3"|>
