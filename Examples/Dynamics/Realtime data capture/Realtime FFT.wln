<|"Notebook" -> <|"FocusedCell" -> CellObj[JerryI`Notebook`CellObj`$189], 
   "Objects" -> <||>, "Path" -> "/users/kirill/Github/wolfram-js-frontend-dev\
/Examples/Dynamics/Realtime data capture/Realtime FFT.wln"|>, 
 "Cells" -> {<|"Data" -> ".md\n## Realtime FFT\nCapture data from the \
microphone, peform Fourier transformation and send the data to the bar plot \
using Plotly.js", "Display" -> "codemirror", 
    "Hash" -> "1ec67dd1-4844-4885-84d5-6a1df6a54cb8", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "43dcb18d-303f-41f4-b8e8-57996d92c9d2"|>, 
   <|"Data" -> "## Realtime FFT\nCapture data from the microphone, peform \
Fourier transformation and send the data to the bar plot using Plotly.js", 
    "Display" -> "markdown", "Hash" -> 
     "fe0b7a19-fc04-4f52-b806-5ea01e453a40", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "43dcb18d-303f-41f4-b8e8-57996d92c9d2"|>, 
   <|"Data" -> ".md\n__run evaluation cells first__ and then this one", 
    "Display" -> "codemirror", "Hash" -> 
     "25bcd67e-de9a-4733-b06c-996120e7a512", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "43dcb18d-303f-41f4-b8e8-57996d92c9d2"|>, 
   <|"Data" -> "__run evaluation cells first__ and then this one", 
    "Display" -> "markdown", "Hash" -> 
     "d5661cd6-b1f4-4e57-8481-29f308e89f87", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "43dcb18d-303f-41f4-b8e8-57996d92c9d2"|>, 
   <|"Data" -> "diagram = Plotly[<|\"type\"->\"bar\", \
\"y\"->(*VB[*)(Uncompress[\"1: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\
0U=\"])(*,*)(*\"1:eJxTTMoPSmNkYGAoZgESHvk5KRAeF5DwTM7Py6xKdcqvyHzBwcAAAMB5CeE\
=\"*)(*]VB*)|>]", "Display" -> "codemirror", 
    "Hash" -> "efedf319-59ec-4401-8c39-b4ff27e3f876", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "43dcb18d-303f-41f4-b8e8-57996d92c9d2"|>, 
   <|"Data" -> " ", "Display" -> "codemirror", 
    "Hash" -> "2eb1349a-0a75-4ce5-bb7f-6717f63c914c", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "43dcb18d-303f-41f4-b8e8-57996d92c9d2"|>, 
   <|"Data" -> ".md\nControl the microphone capture", 
    "Display" -> "codemirror", "Hash" -> 
     "2e03ffbd-f16a-42aa-9ed6-9d81d1e139c5", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "43dcb18d-303f-41f4-b8e8-57996d92c9d2"|>, 
   <|"Data" -> "Control the microphone capture", "Display" -> "markdown", 
    "Hash" -> "dd9eb7b4-4136-454d-aa81-a36bba3ce66a", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "43dcb18d-303f-41f4-b8e8-57996d92c9d2"|>, 
   <|"Data" -> "With[{win = CurrentWindow[]},\n  \
EventHandler[InputButton[\"Start\"], Function[Null, FrontSubmit[MicStart[], \
\"Window\"->win]]]\n]\nWith[{win = CurrentWindow[]},\n  \
EventHandler[InputButton[\"Stop\"], Function[Null, FrontSubmit[MicStop[], \
\"Window\"->win]]]\n]", "Display" -> "codemirror", 
    "Hash" -> "fe9b6e4d-3569-45ca-9cd2-b973af9015e6", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"InitGroup" -> True|>, 
    "State" -> "Idle", "Type" -> "Input", "UID" -> Null, 
    "Notebook" -> "43dcb18d-303f-41f4-b8e8-57996d92c9d2"|>, 
   <|"Data" -> " ", "Display" -> "codemirror", 
    "Hash" -> "8d5d6657-6d94-45b5-82aa-af3cc3f2fc9c", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "43dcb18d-303f-41f4-b8e8-57996d92c9d2"|>, 
   <|"Data" -> ".md\n## Audio processor\nHandles incomming audio signal and \
updates the graph", "Display" -> "codemirror", 
    "Hash" -> "ebd1259a-d893-42a4-91df-349e56d67b8b", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "43dcb18d-303f-41f4-b8e8-57996d92c9d2"|>, 
   <|"Data" -> 
     "## Audio processor\nHandles incomming audio signal and updates the \
graph", "Display" -> "markdown", "Hash" -> 
     "dcff7568-5e60-4a7c-b243-f31b7d8672ab", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "43dcb18d-303f-41f4-b8e8-57996d92c9d2"|>, 
   <|"Data" -> "DropHalf[x_] := Drop[x, \
-Floor[Length[x]/2]]\n\nEventHandler[\"audio\", Function[data,    \n  \
With[{new = (Drop[data // Fourier // Abs,1] // DropHalf )},\n\n    \
Plotly`animate[diagram, \n      <|\"data\"->{\n        <|\"y\"->new, \
\"traces\"->{0}, \"layout\"-><||> |>\n      }|>,\n      \n      \
<|\"transition\" -> \n          <|\"duration\"->0|>, \n        \n        \
\"frame\"-><|\n          \"duration\"->0, \"redraw\"->False\n        |>\n     \
 |>\n\n    ];\n  ];\n]];", "Display" -> "codemirror", 
    "Hash" -> "2341881b-db59-4973-8663-38e993157e29", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"InitGroup" -> True|>, 
    "State" -> "Idle", "Type" -> "Input", "UID" -> Null, 
    "Notebook" -> "43dcb18d-303f-41f4-b8e8-57996d92c9d2"|>, 
   <|"Data" -> " ", "Display" -> "codemirror", 
    "Hash" -> "4340e378-4908-4f0b-b548-3f7d5d57237a", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "43dcb18d-303f-41f4-b8e8-57996d92c9d2"|>, 
   <|"Data" -> ".md\n## JS microphone listener\nA simple script to capture \
audio and forward it to Wolfram Kernel using websockets", 
    "Display" -> "codemirror", "Hash" -> 
     "6c982d4b-29b4-49bb-a35a-6c8e65bfd44d", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "43dcb18d-303f-41f4-b8e8-57996d92c9d2"|>, 
   <|"Data" -> "## JS microphone listener\nA simple script to capture audio \
and forward it to Wolfram Kernel using websockets", "Display" -> "markdown", 
    "Hash" -> "df0cfda6-bb2a-469a-a4e4-c622fd6809f5", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "43dcb18d-303f-41f4-b8e8-57996d92c9d2"|>, 
   <|"Data" -> ".js\n\n  // Constants\n  const audioContext = new \
AudioContext();\n  const analyser = audioContext.createAnalyser();\n  const \
scriptProcessor = audioContext.createScriptProcessor(2048, 1, 1);\n  const \
chunks = [];\n\n  // Variables\n  let stream = null;\n  let input = null;\n  \
let recorder = null;\n  let recording = null;\n  let isRecording = true;\n  \
let isPlaying = false;\n\n  // Setup analyser node\n  \
analyser.smoothingTimeConstant = 0.3;\n  analyser.fftSize = 1024;\n  \n  // \
Request access to the user's microphone.\n  const requestMicrophoneAccess = \
() => { \n    if (navigator.mediaDevices) {\n      \
navigator.mediaDevices.getUserMedia({audio: true}).then(stream => {\n        \
setAudioStream(stream);\n      }, error => {\n        alert('Something went \
wrong requesting the userMedia. <br/>Please make sure you\\'re viewing this \
demo over https.');\n      });\n    } else {\n      alert('Your browser does \
not support navigator.mediadevices. <br/>This is needed for this demo to \
work. Please try again in a differen browser.');\n    }  \n  }\n\n  // Set \
all variables which needed the audio stream\n  const setAudioStream = stream \
=> {\n    stream = stream;\n    input = \
audioContext.createMediaStreamSource(stream);\n    \n    \
input.connect(analyser);\n    analyser.connect(scriptProcessor);\n    \
scriptProcessor.connect(audioContext.destination);\n    \
scriptProcessor.onaudioprocess = processInput;\n  };\n\n\n  // Process the \
microphone input\n  const processInput = audioProcessingEvent => {\n      \
const array = new Uint8Array(analyser.frequencyBinCount);\n      \
analyser.getByteTimeDomainData(array);\n\n      server.kernel.emitt('audio', \
'{'+array.map((el) => el).join(',')+'}');\n      \
//bars.push(getAverageVolume(array));\n  }  \n  \n  // Start the \
application\n\nlet state = false;\n\ncore.MicStart = async () => {\n  if \
(state) return;\n  state = true;\n  requestMicrophoneAccess(); \n  sign.style \
= \"color: red\";\n  sign.innerText = \"Recording...\";\n}\n\ncore.MicStop = \
async () => {\n  state = false;\n  input.disconnect();\n  \
analyser.disconnect();\n  scriptProcessor.disconnect();\n  \n  sign.style = \
\"color: blue\";\n  sign.innerText = \"Stopped\";\n}\n\nthis.ondestroy = () \
=> {\n  if (!state) return;\n  input.disconnect();\n  \
analyser.disconnect();\n  scriptProcessor.disconnect();\n};\n\nconst sign = \
document.createElement('div');\nsign.style = \"color: gray\";\nsign.innerText \
= \"Idle\";\n\nreturn sign;", "Display" -> "codemirror", 
    "Hash" -> "0c1be951-b757-4baf-a93b-061895a746fe", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "43dcb18d-303f-41f4-b8e8-57996d92c9d2"|>, 
   <|"Data" -> "\n  // Constants\n  const audioContext = new \
AudioContext();\n  const analyser = audioContext.createAnalyser();\n  const \
scriptProcessor = audioContext.createScriptProcessor(2048, 1, 1);\n  const \
chunks = [];\n\n  // Variables\n  let stream = null;\n  let input = null;\n  \
let recorder = null;\n  let recording = null;\n  let isRecording = true;\n  \
let isPlaying = false;\n\n  // Setup analyser node\n  \
analyser.smoothingTimeConstant = 0.3;\n  analyser.fftSize = 1024;\n  \n  // \
Request access to the user's microphone.\n  const requestMicrophoneAccess = \
() => { \n    if (navigator.mediaDevices) {\n      \
navigator.mediaDevices.getUserMedia({audio: true}).then(stream => {\n        \
setAudioStream(stream);\n      }, error => {\n        alert('Something went \
wrong requesting the userMedia. <br/>Please make sure you\\'re viewing this \
demo over https.');\n      });\n    } else {\n      alert('Your browser does \
not support navigator.mediadevices. <br/>This is needed for this demo to \
work. Please try again in a differen browser.');\n    }  \n  }\n\n  // Set \
all variables which needed the audio stream\n  const setAudioStream = stream \
=> {\n    stream = stream;\n    input = \
audioContext.createMediaStreamSource(stream);\n    \n    \
input.connect(analyser);\n    analyser.connect(scriptProcessor);\n    \
scriptProcessor.connect(audioContext.destination);\n    \
scriptProcessor.onaudioprocess = processInput;\n  };\n\n\n  // Process the \
microphone input\n  const processInput = audioProcessingEvent => {\n      \
const array = new Uint8Array(analyser.frequencyBinCount);\n      \
analyser.getByteTimeDomainData(array);\n\n      server.kernel.emitt('audio', \
'{'+array.map((el) => el).join(',')+'}');\n      \
//bars.push(getAverageVolume(array));\n  }  \n  \n  // Start the \
application\n\nlet state = false;\n\ncore.MicStart = async () => {\n  if \
(state) return;\n  state = true;\n  requestMicrophoneAccess(); \n  sign.style \
= \"color: red\";\n  sign.innerText = \"Recording...\";\n}\n\ncore.MicStop = \
async () => {\n  state = false;\n  input.disconnect();\n  \
analyser.disconnect();\n  scriptProcessor.disconnect();\n  \n  sign.style = \
\"color: blue\";\n  sign.innerText = \"Stopped\";\n}\n\nthis.ondestroy = () \
=> {\n  if (!state) return;\n  input.disconnect();\n  \
analyser.disconnect();\n  scriptProcessor.disconnect();\n};\n\nconst sign = \
document.createElement('div');\nsign.style = \"color: gray\";\nsign.innerText \
= \"Idle\";\n\nreturn sign;", "Display" -> "js", 
    "Hash" -> "b493dc64-59f0-4a28-a1c2-b1a30e523e09", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "43dcb18d-303f-41f4-b8e8-57996d92c9d2"|>, 
   <|"Data" -> " ", "Display" -> "codemirror", 
    "Hash" -> "9bb40e5b-c6a7-4a27-a073-f9f019b1c68c", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "43dcb18d-303f-41f4-b8e8-57996d92c9d2"|>}, "serializer" -> "jsfn4"|>
