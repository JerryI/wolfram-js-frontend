<|"Notebook" -> <|"ReadOnly"->True, "FocusedCell" -> CellObj[JerryI`Notebook`CellObj`$726], 
   "Objects" -> <||>, "Path" -> "/users/kirill/Github/wolfram-js-frontend-dev\
/Examples/04 - Mixing languages/Sparkles Plot.wln"|>, 
 "Cells" -> {<|"Data" -> ".md\nLet's try something fancy", 
    "Display" -> "codemirror", "Hash" -> 
     "80cdcfd2-ea77-41f9-b5dc-ad46c4d77e55", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "ad3eea85-e23e-40b2-a9dc-b7c704e209db"|>, 
   <|"Data" -> ".md\n## Javascript cells\n### Example with sparkles plot\nHe \
we will couple Javascript canvas and WL plot function", 
    "Display" -> "codemirror", "Hash" -> 
     "78dfe498-0c66-40ac-91fa-59097f9786bb", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "ad3eea85-e23e-40b2-a9dc-b7c704e209db"|>, 
   <|"Data" -> "\n## Javascript cells\n### Example with sparkles plot\nHe we \
will couple Javascript canvas and WL plot function", "Display" -> "markdown", 
    "Hash" -> "ae788d50-1abf-402e-87fd-843b09e4cf24", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> False|>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "ad3eea85-e23e-40b2-a9dc-b7c704e209db"|>, 
   <|"Data" -> ".js\nconst canvas = \
document.createElement('canvas');\ncanvas.width = 600;\ncanvas.height = \
400;\nconst context = canvas.getContext('2d');\nconst particles = \
[];\n\nfunction random (min, max) {\n  return Math.random() * (max - min) + \
min;\n}\n\nfunction convertRange( value, r1, r2 ) { \n    return ( value - \
r1[ 0 ] ) * ( r2[ 1 ] - r2[ 0 ] ) / ( r1[ 1 ] - r1[ 0 ] ) + r2[ 0 \
];\n}\n\nlet uid = 0;\nlet data = [];\n\nfunction animate() {\n  if \
(data.length > 0) {\n  for (let j=0; j<3; ++j) {\n    const it = \
Math.floor(random(0, data.length-1));\n  \n    const particle = {\n      x: \
data[it][0],\n      y: data[it][1],\n      xvel: random(-1,1),\n      yvel: \
random(-1,1),\n      color: `rgba(${random(0, 255)}, ${random(0, 255)}, \
${random(0, 255)}, 0.5)`,\n      size: 7,\n      age: 1\n    };\n  \n    \
particles.push(particle);\n    if (particles.length > 2000) {\n      \
particles.shift();\n    }\n  }\n  }\n  \n  context.clearRect(0, 0, \
canvas.width, canvas.height);\n  for (let i = 0; i < particles.length; i += \
1){\n    const p = particles[i];\n    context.beginPath();\n    \
context.arc(p.x, p.y, p.size/p.age, 0, Math.PI * 2, true);\n    \
context.fillStyle = p.color;\n    context.fill();\n    context.closePath(); \
\n    p.age += 0.1;\n    p.x += p.xvel;\n    p.y -= p.yvel;  \n  }\n\n  uid = \
window.requestAnimationFrame(animate);\n}\n\nthis.ondestroy = () => {\n  \
window.cancelAnimationFrame(uid)\n}\n\n//function definition \ncore.Spark = \
async (args, env) => {\n  //update the positions\n  const raw = await \
interpretate(args[0], env);\n  const min = [Math.min.apply(null, raw.map((e) \
=> e[0])), Math.min.apply(null, raw.map((e) => e[1]))];\n  const max = \
[Math.max.apply(null, raw.map((e) => e[0])), Math.max.apply(null, raw.map((e) \
=> e[1]))];\n\n  data = raw.map((e)=>[convertRange(e[0], [min[0], max[0]], \
[50, 550]), convertRange(e[1], [max[1], min[1]], [50, 350])]);\n  \
\n}\n\n//kickstarter\nanimate();\n\nreturn canvas;", 
    "Display" -> "codemirror", "Hash" -> 
     "b992ae63-2b56-4948-a706-0692b1bde04c", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> False|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "ad3eea85-e23e-40b2-a9dc-b7c704e209db"|>, 
   <|"Data" -> "const canvas = \
document.createElement('canvas');\ncanvas.width = 600;\ncanvas.height = \
400;\nconst context = canvas.getContext('2d');\nconst particles = \
[];\n\nfunction random (min, max) {\n  return Math.random() * (max - min) + \
min;\n}\n\nfunction convertRange( value, r1, r2 ) { \n    return ( value - \
r1[ 0 ] ) * ( r2[ 1 ] - r2[ 0 ] ) / ( r1[ 1 ] - r1[ 0 ] ) + r2[ 0 \
];\n}\n\nlet uid = 0;\nlet data = [];\n\nfunction animate() {\n  if \
(data.length > 0) {\n  for (let j=0; j<3; ++j) {\n    const it = \
Math.floor(random(0, data.length-1));\n  \n    const particle = {\n      x: \
data[it][0],\n      y: data[it][1],\n      xvel: random(-1,1),\n      yvel: \
random(-1,1),\n      color: `rgba(${random(0, 255)}, ${random(0, 255)}, \
${random(0, 255)}, 0.5)`,\n      size: 7,\n      age: 1\n    };\n  \n    \
particles.push(particle);\n    if (particles.length > 2000) {\n      \
particles.shift();\n    }\n  }\n  }\n  \n  context.clearRect(0, 0, \
canvas.width, canvas.height);\n  for (let i = 0; i < particles.length; i += \
1){\n    const p = particles[i];\n    context.beginPath();\n    \
context.arc(p.x, p.y, p.size/p.age, 0, Math.PI * 2, true);\n    \
context.fillStyle = p.color;\n    context.fill();\n    context.closePath(); \
\n    p.age += 0.1;\n    p.x += p.xvel;\n    p.y -= p.yvel;  \n  }\n\n  uid = \
window.requestAnimationFrame(animate);\n}\n\nthis.ondestroy = () => {\n  \
window.cancelAnimationFrame(uid)\n}\n\n//function definition \ncore.Spark = \
async (args, env) => {\n  //update the positions\n  const raw = await \
interpretate(args[0], env);\n  const min = [Math.min.apply(null, raw.map((e) \
=> e[0])), Math.min.apply(null, raw.map((e) => e[1]))];\n  const max = \
[Math.max.apply(null, raw.map((e) => e[0])), Math.max.apply(null, raw.map((e) \
=> e[1]))];\n\n  data = raw.map((e)=>[convertRange(e[0], [min[0], max[0]], \
[50, 550]), convertRange(e[1], [max[1], min[1]], [50, 350])]);\n  \
\n}\n\n//kickstarter\nanimate();\n\nreturn canvas;", "Display" -> "js", 
    "Hash" -> "c2345490-ec49-40b5-a879-59df7423d92e", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "ad3eea85-e23e-40b2-a9dc-b7c704e209db"|>, 
   <|"Data" -> ".md\nNow a couple of adapters to make it easier", 
    "Display" -> "codemirror", "Hash" -> 
     "8515c77f-8887-41c6-9cc8-8e0ecb112ca1", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "ad3eea85-e23e-40b2-a9dc-b7c704e209db"|>, 
   <|"Data" -> "\nNow a couple of adapters to make it easier", 
    "Display" -> "markdown", "Hash" -> 
     "1410e29b-3086-4af8-ae8a-3b60fffea6a9", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> False|>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "ad3eea85-e23e-40b2-a9dc-b7c704e209db"|>, 
   <|"Data" -> "SparkPlot[func_, range_] := With[{var = Extract[range,1, \
Inactivate], min = range[[2]], max = range[[3]]}, Table[{var, func}, {var, \
min, max, (max-min)/200.0}]] // FrontSubmit[Spark[#]] \
&\n\nSetAttributes[SparkPlot, HoldAll]", "Display" -> "codemirror", 
    "Hash" -> "39d6eae7-47a8-4dde-8eae-73cd35c9119e", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> False, "init" -> True|>, 
    "State" -> "Idle", "Type" -> "Input", "UID" -> Null, 
    "Notebook" -> "ad3eea85-e23e-40b2-a9dc-b7c704e209db"|>, 
   <|"Data" -> ".md\nPlot it!", "Display" -> "codemirror", 
    "Hash" -> "7698a7fe-1f20-434c-b7e1-9fd1670ec82f", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "ad3eea85-e23e-40b2-a9dc-b7c704e209db"|>, <|"Data" -> "\nPlot it!", 
    "Display" -> "markdown", "Hash" -> 
     "31c3ee17-4d7d-475a-81b4-b59c0eaaa34e", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> False|>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "ad3eea85-e23e-40b2-a9dc-b7c704e209db"|>, 
   <|"Data" -> "SparkPlot[Sinc[x], {x,-10,10}]", "Display" -> "codemirror", 
    "Hash" -> "de939251-f0a4-40fa-aa46-5c5d97ecf12c", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> False|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "ad3eea85-e23e-40b2-a9dc-b7c704e209db"|>}, "serializer" -> "jsfn4"|>
