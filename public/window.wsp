<html><head lang="en">
        <meta charset="utf-8">

        <?wsp Table[ ?> 
            <link rel="stylesheet" href="/<?wsp i // FileNameToURLPath ?>">
        <?wsp , {i, Includes["styles"]}]?>

        <!-- any inline js including core library (global) UPD: No longer exists -->
        <?wsp Table[ ?> 
            <script>
            <?wsp Import[FileNameJoin[{"Packages", i}], "String"] ?>
            </script>
        <?wsp , {i, Includes["js"]}]?>
 
        
        <!-- user's plugins (module) -->
        <?wsp Table[ ?> 
            <script type="module" src="/<?wsp i // FileNameToURLPath ?>"></script>
        <?wsp , {i, Includes["jsmodule"]}]?> 

        <!-- connection to the server (global) -->

        <script type="module">
            window.Notebook = "<?wsp $CurrentRequest["Query", "notebook"] ?>";

            core.FrontEndPopUp = async (args, env) => {
                const mess = await interpretate(args[0]);
                console.warn(mess);
            }

            core.Pong = function(args, env) {
                console.log('pong');
            }

            core.Ping = function(args, env) {
                console.log('ping');
            }

            core.FrontEndWSAttached = () => {
                console.log('attached');
            }

            core.Suicide = () => {
                window.close();
            }

            
            
            
        </script>

        <script type="module">
            <?wsp LoadPage["template/components/sockets.wsp"] ?>
        </script>

        <script type="module">
            window.addEventListener("wsconnected", () => {
                server.ask(`NotebookWindowReady["<?wsp $CurrentRequest["Query", "id"] ?>"]`).then((res)=>{
                    server.ask(`NotebookWindowReady2["<?wsp $CurrentRequest["Query", "id"] ?>"]`);
                });

            });
        </script>

        <!-- editors autocomplete -->
        <?wsp Table[ ?> 
            <script type="module" src="/<?wsp i // FileNameToURLPath ?>"></script>
        <?wsp , {i, Includes["autocomplete"]}]?>  
        
        
        
        <style>
            .notion-app-inner.notion-light-theme {
                height: auto;
            }

            section.cell-wrapper.frontend-node {
                padding: 0.4em;
    /* padding-top: 0.5em; */
    <?wsp If[isWindows || isLinux, "margin-top: 0;", "margin-top: 2em;"] ?>
    width: 100%;
    filter: var(--filter-frame);
    position: relative;
            }

            .content-wrapper {
                width: 100%;
                height: 100%;
                -webkit-app-region: no-drag;
            }

            .cm-scroller {
                overflow: overlay;
                width: 100%;
            }

            .cm-focused {
                outline: none;
            }

            .cm-content.cm-lineWrapping {
                height: calc(100vh - 2.5em);
                overflow: hidden;
            }

            body {
                -webkit-app-region: drag;
            }
        </style>
        <script type="module">
            window.isElectron = () => {
                // Renderer process
                if (typeof window !== 'undefined' && typeof window.process === 'object' && window.process.type === 'renderer') {
                    return true;
                }
            
                // Main process
                if (typeof process !== 'undefined' && typeof process.versions === 'object' && !!process.versions.electron) {
                    return true;
                }
            
                // Detect the user agent when the `nodeIntegration` option is set to true
                if (typeof navigator === 'object' && typeof navigator.userAgent === 'string' && navigator.userAgent.indexOf('Electron') >= 0) {
                    return true;
                }
            
                return false;
            }  

            window.ifLinux = () => {
                if (navigator.appVersion.indexOf("X11") != -1) return true;
                if (navigator.appVersion.indexOf("Linux") != -1) return true;

                return false;
            }

            window.ifWin = () => {
                console.warn(navigator.appVersion);
                if (navigator.appVersion.indexOf('Win') != -1) return true;
                return false;
            }
            
            window.runColorMode = (fn) => {
              if (!window.matchMedia) {
                return;
              }

              const query = window.matchMedia('(prefers-color-scheme: dark)');
          
              fn(query.matches);
          
              query.addEventListener('change', (event) => fn(event.matches));
            }

            window.resetBackground = () => {
                if (!isElectron() || ifLinux() || ifWin()) {
                    document.body.style.background = "var(--topbar-background)";
                } else {
                    document.body.style.background = "";
                }


            }

            <?wsp If[!TrueQ[JerryI`WolframJSFrontend`settings["background"]], ?>
                    document.body.style.setProperty('--topbar-background', 'transparent');
                    document.body.style.setProperty('--background-frame-color', 'transparent');
            <?wsp , "" ] ?>

            resetBackground();

            let darkmode = '<?wsp NotebookTheme ?>';      

            if (darkmode === 'system') {
                runColorMode((isDarkMode) => {
                  if (isDarkMode) {
                    document.body.setAttribute('data-theme', 'dark');
                  } else {
                    document.body.removeAttribute('data-theme');
                  }
                });
            } else {
                document.body.style.background = "var(--topbar-background)";
                if (darkmode === 'enabled') {
                    document.body.setAttribute('data-theme', 'dark');
                } else {
                    document.body.removeAttribute('data-theme', 'dark');
                }
            }
        </script>
    </head>
    <body class="notion-body">
        <div id="notion-app">
            <div class="notion-app-inner notion-light-theme" style="">
                <div style="">
                    <div class="notion-cursor-listener" id="<?wsp $CurrentRequest["Query", "notebook"] ?>">


                    </div>
                </div>
                
                
            </div>
        </div>





</body></html>