name: Build for Mac
on: workflow_dispatch
jobs:
  build-MacOSX-ARM:
    runs-on: macos-latest
    env:
      WOLFRAM_SYSTEM_ID: MacOSX-ARM
      WOLFRAMENGINE_CACHE_KEY: WolframEngine-B
      WOLFRAMENGINE_INSTALLATION_DIRECTORY: "/Applications/Wolfram Engine.app"
    steps:
      - name: Check out repository
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.GH_TOKEN }}        

      - name: Cache/restore Wolfram Engine install
        id: cache-restore
        uses: actions/cache@v2
        with:
          path: ${{ env.WOLFRAMENGINE_INSTALLATION_DIRECTORY }}
          key: wolframengine-${{ env.WOLFRAM_SYSTEM_ID }}-${{ env.WOLFRAMENGINE_CACHE_KEY }}

      - name: Install Wolfram Engine
        if: steps.cache-restore.outputs.cache-hit != 'true'
        run: |
          echo 'Installing Wolfram Engine...'
          brew install --cask wolfram-engine
          brew install libuv
          echo 'Installed Wolfram Engine.'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '23'  # or '25', etc.
          architecture: 'arm64'

      - name: Verify Node.js
        run: |
          node -v
          npm -v

      - name: Install dependencies
        run: /
          npm i

      - name: Prepare bundle
        env:
          WOLFRAMENGINE_EXECUTABLES_DIRECTORY: "${{ env.WOLFRAMENGINE_INSTALLATION_DIRECTORY }}/Contents/Resources/Wolfram Player.app/Contents/MacOS"
          WOLFRAMSCRIPT_ENTITLEMENTID: ${{ secrets.WOLFRAM_LICENSE_ENTITLEMENT_ID }}
          WOLFRAMSCRIPT_KERNELPATH: "${{ env.WOLFRAMENGINE_INSTALLATION_DIRECTORY }}/Contents/MacOS/WolframKernel"
        run: |
          export PATH="${{ env.WOLFRAMENGINE_EXECUTABLES_DIRECTORY }}:$PATH"
          npm run pre-dist


      - name: Build electron
        run: |
          npm run dist-mac


  build-MacOSX-x64:
    runs-on: macos-13
    env:
      WOLFRAM_SYSTEM_ID: MacOSX-x64
      WOLFRAMENGINE_CACHE_KEY: WolframEngine-D
      WOLFRAMENGINE_INSTALLATION_DIRECTORY: "/Applications/Wolfram Engine.app"
    steps:
      - name: Check out repository
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.GH_TOKEN }}        

      - name: Cache/restore Wolfram Engine install
        id: cache-restore
        uses: actions/cache@v2
        with:
          path: ${{ env.WOLFRAMENGINE_INSTALLATION_DIRECTORY }}
          key: wolframengine-${{ env.WOLFRAM_SYSTEM_ID }}-${{ env.WOLFRAMENGINE_CACHE_KEY }}

      - name: Install Wolfram Engine
        if: steps.cache-restore.outputs.cache-hit != 'true'
        run: |
          echo 'Installing Wolfram Engine...'
          brew install --cask wolfram-engine
          brew install libuv
          echo 'Installed Wolfram Engine.'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '23'  # or '25', etc.
          architecture: 'x86'

      - name: Verify Node.js
        run: |
          node -v
          npm -v

      - name: Install dependencies
        run: /
          npm i

      - name: Bundle files
        env:
          WOLFRAMENGINE_EXECUTABLES_DIRECTORY: "${{ env.WOLFRAMENGINE_INSTALLATION_DIRECTORY }}/Contents/Resources/Wolfram Player.app/Contents/MacOS"
          WOLFRAMSCRIPT_ENTITLEMENTID: ${{ secrets.WOLFRAM_LICENSE_ENTITLEMENT_ID }}
          WOLFRAMSCRIPT_KERNELPATH: "${{ env.WOLFRAMENGINE_INSTALLATION_DIRECTORY }}/Contents/MacOS/WolframKernel"
        run: |
          export PATH="${{ env.WOLFRAMENGINE_EXECUTABLES_DIRECTORY }}:$PATH"
          npm run pre-dist

      - name: Build electron
        run: |
          npm run dist-mac86          