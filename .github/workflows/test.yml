name: Autotest

on: workflow_dispatch

# WL cannot spawn evaluation kernel using entitlements
# LinkObject::linkd: Unable to communicate with closed link LinkObject["/Applications/Wolfram Engine.app/Contents/Resources/Wolfram Player.app/Contents/MacOS/WolframKernel" -wstp, 6290, 13].
# >> $Failed

jobs:
  autotest:
    runs-on: macos-latest
    env:
      WOLFRAM_SYSTEM_ID: MacOSX-ARM
      WOLFRAMENGINE_CACHE_KEY: WolframEngine-B
      WOLFRAMENGINE_INSTALLATION_DIRECTORY: "/Applications/Wolfram Engine.app"
    steps:
      - name: Check out repository
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.GH_TOKEN }}        
      - name: Install Python 3.11
        run: |
          brew install python@3.11
          echo "/opt/homebrew/opt/python@3.11/bin" >> $GITHUB_PATH
          echo "PYTHON=/opt/homebrew/opt/python@3.11/bin/python3.11" >> $GITHUB_ENV
      - name: Check Python version
        run: |
          python3.11 -V
          which python3.11
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '23'  # or '25', etc.
          architecture: 'arm64'
      - name: Verify Node.js
        run: |
          node -v
          npm -v
      - name: Create Python virtual environment
        run: |
          python3.11 -m venv venv
          source venv/bin/activate
          pip install --upgrade pip setuptools wheel
      - name: Install Node.js dependencies
        run: |
          source venv/bin/activate
          npm install
      - name: Cache/restore Wolfram Engine install
        id: cache-restore
        uses: actions/cache@v4
        with:
          path: ${{ env.WOLFRAMENGINE_INSTALLATION_DIRECTORY }}
          key: wolframengine-${{ env.WOLFRAM_SYSTEM_ID }}-${{ env.WOLFRAMENGINE_CACHE_KEY }}
      - name: Install Wolfram Engine
        if: steps.cache-restore.outputs.cache-hit != 'true'
        run: |
          echo 'Installing Wolfram Engine...'
          brew install --cask wolfram-engine
          brew install libuv
          echo 'Installed Wolfram Engine.'

      - name: Install GNU timeout
        run: |
          brew install coreutils          
      - name: Prepare bundle
        env:
          WOLFRAMENGINE_EXECUTABLES_DIRECTORY: "${{ env.WOLFRAMENGINE_INSTALLATION_DIRECTORY }}/Contents/Resources/Wolfram Player.app/Contents/MacOS"
          WOLFRAM_ID: "${{ secrets.WolframID }}"
          WOLFRAM_PASS: "${{ secrets.WolframPW }}"
          WOLFRAMSCRIPT_KERNELPATH: "${{ env.WOLFRAMENGINE_INSTALLATION_DIRECTORY }}/Contents/MacOS/WolframKernel"
        run: |
          export PATH="${{ env.WOLFRAMENGINE_EXECUTABLES_DIRECTORY }}:$PATH"
          # Activate
          echo $WOLFRAM_ID
          echo $WOLFRAM_PASS
          wolframscript -authenticate $WOLFRAM_ID $WOLFRAM_PASS
          wolframscript -activate
          # Start script, stream logs to console and file
          gtimeout 260s bash -c '
            wolframscript -f Scripts/start.wls | tee /tmp/wolfram.log &
            pid=$!
            while ! grep -q "Open http://" /tmp/wolfram.log; do
              sleep 1
              if ! kill -0 $pid 2>/dev/null; then
                echo "❌ wolframscript exited early before printing expected output."
                exit 1
              fi
            done
            echo "✅ Found expected signal: Open http://"
          '
      - name: Install Playwright Browsers
        run: npx playwright install --with-deps
      - name: Run Playwright tests
        run: npx playwright test
      - uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 3
      