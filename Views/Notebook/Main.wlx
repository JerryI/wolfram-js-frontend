CellsContainer := ImportComponent["Components/CellsContainer.wlx"];
TopBar         := ImportComponent["Components/TopBar.wlx"];
Console        := ImportComponent["Components/Console.wlx"];

CellsGroup     := ImportComponent["Components/CellsGroup.wlx"];
CellFrame      := ImportComponent["Components/CellFrame.wlx"];
Children       := ImportComponent["Components/Children.wlx"];

CellWrapper    := ImportComponent["Components/CellWrapper.wlx"];
Hr             := ImportComponent["Components/Hr.wlx"];
Controls       := ImportComponent["Components/Controls.wlx"];
{EvaluationBar, EvaluationBarScript}  = ImportComponent["Component/EvaluationBar.wlx"];

KernelIndicator:= ImportComponent["Components/KernelIndicator.wlx"];

ElectronBinds  := ImportComponent["Components/ElectronBinds.wlx"];

CellGenerator[cell_CellObj] := Module[{},
    If[InputCellQ @ cell,
        <CellsGroup>
            <Controls/>
            <CellFrame>
                <CellWrapper/>
            </CellFrame>
            <EvaluationBar/>
            <Children></Children>
            <Hr/>
        </CellsGroup>
    ,
        <CellsGroup>
            <Hr/> 
            <CellFrame>
                <CellWrapper/>
            </CellFrame>   
        </CellsGroup>  
    ]
]

Options[CellGenerator] = {"Cell"->Null}

addListeners[notebook_, secret_, client_] := Module[{},
    EventHandler[notebook, {
        "New Cell" -> Function[cell,
            WebSocketSend...
        ]
    }];
];

restoreCells[notebook_, secret_, client_] := Module[{},
    Map[
        Function[cell,
            With[{list = #["Hash"] &/@ (cell["Notebook"]["Cells"])},
                WebSocketSend[client, $DefaultSerializer @ UINotebook["NewCell", CellGenerator[cell], CellObj`Serialize[cell, "OnlyMeta"->True] (*`*), list, secret]];
            ]
        ]   
    ,    
        notebook["Cells"]
    ]
];

NotebookJSScripts = With[{JSLibrary = Import[FileNameJoin[{$WLXInputPath, "Assets", "JSCells.js"}], "String"]},
    <script type="module">
        const UI = {};

        UI.UINotebook = async (args, env) => {
            const type = await interpretate(args[0], {...env, context: UI});
            core.UINotebook[type](args.slice(1), {...env, context: UI});
        }

        UI.UINotebook.NewCell = async (args, env) => {
            const template = await interpretate(args[0], env);
            const store    = await interpretate(args[1], env);
            const list     = await interpretate(args[2], env);

            const ev     = await interpretate(args[3], env);

            new CellWrapper(template, store, list, ev);
        }

        // Add new context to interpreter
        interpretate.contextExpand(UI);

        <JSLibrary/>
        <EvaluationBarScript/>
    </script>
] 

NotebookComponent[OptionsPattern[]] := Module[{
    secret = OptionValue["Secret"], 
    notebook = OptionValue["Notebook"], 
    event = OptionValue["Event"],
    controller = OptionValue["Controller"],
    log = OptionValue["Messanger"]
},

    
    EventHandler[secret, {
        (* /* Add listeners and load cells */ *)
        "Load" -> Function[Null,

            (* /* Assign socket to a notebook 
            Notebook`Sockets`Assign[notebook, $Client]; */ *)

            (* /* Add all listeners to a **notebook** */ *)
            addListeners[notebook, secret, $Client];
            restoreCells[notebook, secret, $Client];

            (*/* finish */*)
            EventFire[event, "Loaded", notebook];
        ],

        (* /* When a user focuses on a notebook */ *)
        "Activate" -> Function[Null,
        
        ],

        "RequestObject" -> Function[uid,
            (* /* Automatically reply with an object using $Client variable */ *)
        ],

        "RequestCachedSymbol" -> Function[uid,
        
        ],

        "Save" -> Function[uid,
            Notebook`Loader`Save[notebook];
            "Saved" >> log;
        ],    

        "SetProps" -> ,
        
        "NewCellAfter" -> Function[uid,
            (*/* request from the client with event provided */*)
        ],

        "Evaluate" -> Function[celluid,
            (*/* evalaute arbitary cell */*)
            EventHandler[cell, "State" -> WebSocketSend[UIUpdate[cell,  state]]]
        ],

        "New" -> Function[uid,
        
        ]
    }];

    With[{nid = notebook["Hash"]},

        <main class="py-8 h-full">
            <KernelIndicator Notebook={notebook}/>
            <TopBar Notebook={notebook}/>
            <CellsContainer Notebook={notebook}>Here our Notebook</CellsContainer>
            <Console Notebook={notebook}/>

            <ElectronBinds Event={secret}/>
            <WebUIOnLoad Event={secret}/>
        </main>

    ]
]

Options[NotebookComponent] = {"Notebook"->Null, "Event"->"blackhole", "Messager"->"blackout", "Secret" :> CreateUUID[]}


{NotebookJSScripts, NotebookComponent}
