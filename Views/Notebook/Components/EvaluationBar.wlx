Element[OptionsPattern[]] := With[{cell = OptionValue["Cell"], client = OptionValue["Client"]},
    With[{uid = cell["Hash"], State = cell["State"]},
        EventHandler[cell,
            {
                "State" -> Function[state,
                    Print["State update"];
                    WebUISubmit[Global`UINotebook["CellState", uid, state] (*`*), client];
                ],
                "ChangeContent" -> Function[content,
                    Print["ChangeContent update"];
                    WebUISubmit[Global`UINotebook["CellContent", uid, content] (*`*), client];
                ],                
                "Info" -> Function[state,
                    WebUISubmit[Global`UINotebook["CellInfo", uid, state] (*`*), client];
                ],
                "Error" -> Function[state,
                    WebUISubmit[Global`UINotebook["CellError", uid, ToString[state]] (*`*), client];
                ]
            }
        ];

        With[{Style = If[State == "Idle", "opacity: 0", "opacity: 1"]},
          <div style="position:absolute;width:100%;height:0;overflow: visible">
            <div class="w-full bg-gray-200 rounded-full h-1 dark:bg-gray-700" style="{Style}">
                <div id="bar-{uid}" style="transition: width 5s" class="bg-teal-600 h-1 rounded-full dark:bg-teal-500 w-2/4"></div>
            </div>
            <div id="info-{uid}" class="pl-0.5 hidden text-xs -mt-1"></div>
          </div>
        ]
    ]
];

Options[Element] = {"Cell"->Null, "Client"->""};

Script = With[{},
    <Placebo>
        core.UINotebook.CellContent = async (args, env) => {
            const uid      = await interpretate(args[0], env);
            const content    = await interpretate(args[1], env);
            CellWrapper.setContent(uid, content);
        }
        core.UINotebook.CellError = async (args, env) => {
            const uid      = await interpretate(args[0], env);
            const state    = await interpretate(args[1], env);
            const info = document.getElementById('info-'+uid);
            info.innerText = state; 
            console.log('cell error '+state);
            info.classList.remove('hidden');
            info.classList.add('text-red-600');
            info.parentNode.style.position = "relative";
            info.parentNode.style.height = "1rem";
        }        
        core.UINotebook.CellState = async (args, env) => {
            const uid      = await interpretate(args[0], env);
            const state    = await interpretate(args[1], env);
            const bar = document.getElementById('bar-'+uid);
            const info = document.getElementById('info-'+uid);
            console.log('state update '+state);
            if (!info.classList.contains('hidden') ) {
                info.classList.add('hidden');
                info.parentNode.style.position = "absolute";
                info.parentNode.style.height = 0;
            }

            bar.style.width = "0%";

            if (state != 'Idle') {
                //bar.parentNode.classList.remove('opacity-0');
                setTimeout(() => {
                    bar.parentNode.style.opacity = 1;
                    bar.style.transition = "width 3s";
                    bar.style.width = "70%";
                }, 100);
            } else {
                //bar.parentNode.classList.add('opacity-0');
                bar.style.transition = "width 200ms";
                bar.style.width = "100%";
                setTimeout(() => {
                    bar.style.transition = "width 3s";
                    bar.style.width = "0%";
                    bar.parentNode.style.opacity = 0;
                }, 100);
            }
        }
    </Placebo>
]


{Element, Script}