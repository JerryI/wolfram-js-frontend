CellsContainer := ImportComponent["Components/CellsContainer.wlx"];
TopBar         := ImportComponent["Components/TopBar.wlx"];
Console        := ImportComponent["Components/Console.wlx"];

{CellGenerator, CellGeneratorScript}   = ImportComponent["CellGenerator.wlx"];

{ControlsL, ControlsR, ControlsScript}            = ImportComponent["Components/Controls.wlx"];
{Hr, HrScript}                        = ImportComponent["Components/Hr.wlx"];
{EvaluationBar, EvaluationBarScript}  = ImportComponent["Components/EvaluationBar.wlx"];

{CellDropdown, DropdownScript} = ImportComponent["Components/Dropdown.wlx"];


KernelIndicator:= ImportComponent["Components/KernelIndicator.wlx"];

ElectronBinds  := ImportComponent["Components/ElectronBinds.wlx"];

addListeners[notebook_Notebook, secret_String, client_, extensions__] := Module[{},
    (* /* don't clone Notebook event, must be one ! */ *)
    EventHandler[notebook, {
        "New Cell" -> Function[cell,
            With[{list = #["Hash"] &/@ (cell["Notebook","Cells"])},
                WebUISubmit[Global`UINotebook["NewCell", CellGenerator[cell, client, extensions], CellObj`Serialize[cell] , list, secret], client]
            ];
        ],

        "Remove Cell" -> Function[cell,
            With[{},
                WebUISubmit[Global`UINotebook["RemoveCell", cell["Hash"], secret], client](*`*)
            ];            
        ]
    }];
];

restoreCells[notebook_Notebook, secret_String, client_, extensions__] := Module[{},
    Map[
        Function[cell,
            With[{list = #["Hash"] &/@ (cell["Notebook","Cells"])},
                WebUISubmit[Global`UINotebook["NewCell", CellGenerator[cell, client, extensions], CellObj`Serialize[cell], list, secret], client];
            ]
        ]   
    ,    
        notebook["Cells"]
    ]
];

evaluateCell[celluid_, notebook_, kernels_, client_, modals_] := With[{},
    Print["Evaluate"];
        If[MissingQ[notebook["Evaluator"]] || (Length[ReleaseHold @ kernels] == 0),
              If[Length[ReleaseHold @ kernels] == 0,
                    WebUISubmit[Global`Alert["No Kernels are available"](*`*), client];
                ,
                    Print["requesting modal...."];
                    With[{request = CreateUUID[]},
                        EventHandler[request, {
                            "Success" -> Function[data,
                                notebook["Evaluator"] = data["Container"];
                                Echo[data];
                                If[TrueQ[data["ContainerReadyQ"]],
                                    With[{cell = CellObj`HashMap[celluid] (*`*)},
                                        If[cell["State"] != "Idle",
                                            WebUISubmit[Global`Alert["Cell is still under evaluation"](*`*), client];
                                        ,
                                            cell // CellObj`Evaluate;
                                        ]
                                    ];
                                ,
                                    WebUISubmit[Global`Alert["Initialization is not complete"](*`*), client];
                                ];
                                EventRemove[request];
                            ],
                            "Error" -> Function[error,
                                WebUISubmit[Global`Alert[error](*`*), client];
                                EventRemove[request];
                            ],
                            _ -> Function[Null,
                                Print["Cancelled"];
                                EventRemove[request];
                            ]
                        }];
                        Print["fire!"];
                        EventFire[modals, "SuggestKernel", <|"Client"->client, "Callback"->request, "Notebook"->notebook, "Kernels"->kernels|>];
                    ];
                ]
            ,
                Print["ok!"];
                With[{cell = CellObj`HashMap[celluid] (*`*)},
                    If[cell["State"] != "Idle",
                        WebUISubmit[Global`Alert["Cell is still under evaluation"](*`*), client];
                    ,
                        cell // CellObj`Evaluate;
                    ]
                ];
                 
        ]
];

Script[opts__] := With[{},
    <script type="module">
        core.UINotebook = async (args, env) => {
            const type = await interpretate(args[0], env);
            core.UINotebook[type](args.slice(1), env);
        }

        core.UINotebook.RemoveCell = async (args, env) => {
            const uid = await interpretate(args[0], env);
            const ev = await interpretate(args[1], env);

            CellWrapper.remove(uid, ev);
        }        

        core.UINotebook.NewCell = async (args, env) => {
            const template = await interpretate(args[0], env);
            const store    = await interpretate(args[1], env);
            const list     = await interpretate(args[2], env);

            const ev     = await interpretate(args[3], env);

            new CellWrapper(template, store, list, ev);
        };;
        <CellGeneratorScript/>;;
        <EvaluationBarScript/>;;
        <ControlsScript/>;;
        <HrScript/>;;
        <DropdownScript/>;;
    </script>
] 

(* /*  Exstension API */  *)
(* /*  Prolog, Epilog, Mesis, EventHandler */  *)

Component[OptionsPattern[]] := Module[{
    secret = OptionValue["Secret"], 
    notebook = OptionValue["Notebook"], 
    event = OptionValue["Event"],
    controllerPort = OptionValue["ControlsPort"],
    controller     = OptionValue["Controls"],
    modals         = OptionValue["Modals"],
    log = OptionValue["Messanger"],
    kernels = OptionValue["Kernels"],

    ExtensionTemplateWrapper = OptionValue["ExtensionTemplateWrapper"],  
    ExtensionTemplateInjection = OptionValue["ExtensionTemplateInjection"], 
    ExternalEventHandlers = OptionValue["ExternalEventHandlers"],

    extensions = Sequence[
        "ExtensionTemplateWrapper" -> OptionValue["ExtensionTemplateWrapper"], 
        "ExtensionTemplateInjection" -> OptionValue["ExtensionTemplateInjection"]
    ]
},

    
    EventHandler[secret, {
        (* /* Add listeners and load cells */ *)
        "Load" -> Function[Null,
            Print["Notebook is about to be shown"];
            (* /* Assign socket to a notebook 
            Notebook`Sockets`Assign[notebook, $Client]; */ *)

            (* /* Add all listeners to a **notebook** */ *)
            addListeners[notebook, secret, $Client, extensions];
            restoreCells[notebook, secret, $Client, extensions];

            (*/* finish */*)
            EventFire[event, "Loaded", notebook];
        ],

        (* /* When a user focuses on a notebook */ *)
        "Activate" -> Function[Null,
        
        ],

        "CallDropdown" -> Function[data,
            Echo[data];
        ],

        "RequestObject" -> Function[uid,
            (* /* Automatically reply with an object using $Client variable */ *)
        ],

        "RequestCachedSymbol" -> Function[uid,
        
        ],

        "Save" -> Function[payload,
            (* /* Notebook`Loader`Save[notebook];
            "Saved" >> log; */ *)
        ],    

        "ClearOutputs" -> Function[uid,
            With[{cell = CellObj`HashMap[uid](*`*)},
                Delete /@ CellObj`SelectCells[cell["Notebook"]["Cells"], Sequence[cell, __?OutputCellQ]](*`*);
            ]
        ],

        "UpdateCell" -> Function[payload,
            With[{cell = CellObj`HashMap[payload // First], content = payload // Last (*`*)},
                cell["Data"] = content;
            ]
        ],

        "RemoveCell" -> Function[uid,
            CellObj`HashMap[uid] (*`*) //Delete;
            If[notebook["Cells"] === {}, CellObj["Notebook"->notebook, "Data"->""]];
        ],

        "SetProperty" -> Function[json,
            Print["Prop set..."];
            With[{obj = ImportString[json, "JSON"] // Association},
                If[AssociationQ[obj],
                    With[{c = CellObj`HashMap[obj["Cell"]]  (*`*), key = obj["Key"]},
                        c["Props", key] = obj["Value"];
                    ];
                ];
            ]
        ],
        
        "AddAfter" -> Function[uid,
            (*/* request from the client with event provided */*)

            With[{o = CellObj`HashMap[uid] (*`*)},
                CellObj["Notebook"->notebook, "Data"->"", "After"-> o];   
            ]
        ],

        "AddAfterOutputs" -> Function[uid,
            (*/* request from the client with event provided */*)

            With[{o = CellObj`HashMap[uid] (*`*)},
                CellObj["Notebook"->notebook, "Data"->"", "After"-> Sequence[o, ___?OutputCellQ]];   
            ]
        ],        

        "AddBefore" -> Function[uid,
            (*/* request from the client with event provided */*)

            With[{o = CellObj`HashMap[uid] (*`*)},
                CellObj["Notebook"->notebook, "Data"->"", "Before"-> o];   
            ]
        ],        

        "Evaluate" -> Function[celluid, evaluateCell[celluid, notebook, kernels, $Client, modals]],

        else_String :> ExternalEventHandlers[else]
    }];

    With[{nid = notebook["Hash"]},

        <main class="grow flex flex-col overflow-hidden">
            <KernelIndicator Notebook={notebook}/>
            <ExtensionTemplateInjection Template={"Notebook-Prolog"} Notebook={notebook} Event={secret} />
            <TopBar Notebook={notebook}/>
            <ExtensionTemplateWrapper Template={"CellsContainer"} Notebook={notebook} Event={secret}>
                <CellsContainer Notebook={notebook} Event={secret}></CellsContainer>
            </ExtensionTemplateWrapper>
            <ExtensionTemplateInjection Template={"Notebook-Epilog"} Notebook={notebook} Event={secret} />

            <CellDropdown Event={secret}/>
            <ElectronBinds Event={secret}/>
            <ExtensionTemplateInjection Template={"Scripts"} />
            
            <WebUIOnLoad Event={secret} Type={"Load"}/>
        </main>

    ]
]

Options[Component] = {"Kernels"->{}, "Modals"->"", "Controls" ->"", "ControlsPort"->"", "Notebook"->Null, "Event"->"blackhole", "Messager"->"blackout", "Secret" :> CreateUUID[], "ExtensionTemplateWrapper"-> sequenceIdentity, "ExtensionTemplateInjection" -> emptyStringFunction, "ExternalEventHandlers" -> Null}

emptyStringFunction[x__] := ""
sequenceIdentity[first__, rulels___Rule] := first 

{Component, Script}

