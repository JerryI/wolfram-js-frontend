{WindowGenerator, WindowGeneratorScript}   = ImportComponent["WindowGenerator.wlx"];
Container := ImportComponent["Components/Container.wlx"];

addListeners[window_, secret_String, client_, parameters_, extensions__] := Module[{},
    (* /* don't clone  event, must be one ! */ *)
    Echo["Add listeners::::"];
    Echo[window["Hash"]];
    EventHandler[window, {
        "Ready" -> Function[Null,
            Echo["Window.wlx >> Ready to show!"];
            WebUISubmit[Global`UIWindow["Load", WindowGenerator[window, client, parameters, extensions], WindowObj`Serialize[window] ,  secret], client]
        ]
    }];

    With[{socket = EventClone[client]},
        EventHandler[socket, {"Closed" -> Function[Null,
            EventRemove[socket];
            EventRemove[window];
            Echo["addListeners >> destroed listeners"];        
        ]}];
    ];
];

restoreCells[window_Notebook, secret_String, client_, parameters_, extensions__] := Module[{},
    
];

checkWSLink[window_, client_, event_String] := Module[{},
    (*/* check if connected already */*)
    Echo["checkWSLink >> window"];

    If[window["WebSocketQ"] === True, 
        Echo["checkWSLink >> Already connected"];
        Return[];
    ];

    WebUISubmit[Global`UIWindow["WSConnect", window["Notebook"]["Evaluator"]["Kernel"]["WebSocket"], event ] (*`*), client];
];

evaluate[window_, secret_String, client_, modals_, parameters_, extensions__] := Module[{},
    checkWSLink[window, client, secret];
    window // WindowObj`Evaluate;
];

Script[OptionsPattern[]] := With[{ExtensionTemplateInjection = OptionValue["ExtensionTemplateInjection"]},
    <div>
        <script type="module">
            core.UIWindow = async (args, env) => {
                const type = await interpretate(args[0], env);
                core.UIWindow[type](args.slice(1), env);
            }

            core.UIWindow.CreateServer = async (args, env) => {
                server.kernel = new Server('Evaluation Kernel');
                console.warn("server.kernel :: created, waiting for initialization...");
            }

            core.UIWindow.WSConnect = async (args, env) => {
                const port = await interpretate(args[0], env);
                const ev = await interpretate(args[1], env);

                if (server.kernel.connected) {
                    console.warn('A request to connect was rejected, since socket is still alive');
                    return;
                }

                server.kernel.connected = true;
                const socket = new WebSocket('ws://'+window.location.hostname+':'+port);

                socket.onopen = function(e) {
                  console.log("[open]");
                  server.kernel.init({socket: socket});
                  server.emitt(ev, 'True', 'WebSocketConnected');
                }; 

                socket.onmessage = function(event) {
                  //create global context
                  //callid
                  const uid = Math.floor(Math.random() * 100);
                  var global = {call: uid};
                  interpretate(JSON.parse(event.data), {global: global});
                };

                socket.onclose = function(event) {
                  console.log(event);
                  console.warn('Connection lost to a Evaluation Kernel');
                  //server.kernel = undefined;
                  server.kernel.connected = false;

                  server.emitt(ev, 'True', 'WebSocketLost');
                }; 
            }       

            core.UIWindow.Load = async (args, env) => {
                console.log(args);

                const template = await interpretate(args[0], env);
                const store    = await interpretate(args[1], env);

                const ev     = await interpretate(args[2], env);

                const opts   = await core._getRules(args, env);

                new WindowWrapper(template, store, ev, opts);
            };;
            <WindowGeneratorScript/>;;
        </script>
    </div>
] 

destructor[window_, secret_, __] := With[{},
    Echo["Window.wlx >> Destroy"];
    
    (* /* clean up secret and all handlers created */ *)
    EventRemove[secret];
    (* /* make sure that WebSocketQ flag is removed */ *)
    window["WebSocketQ"] = False;
    Delete[window];
];

(* /*  Exstension API */  *)
(* /*  Prolog, Epilog, Mesis, EventHandler */  *)

Component[OptionsPattern[]] := With[{
    secret = OptionValue["Secret"], 
    window = OptionValue["Window"], 
    event = OptionValue["Event"],
    parameters = OptionValue["Parameters"],
    controller     = OptionValue["Controls"],
    modals         = OptionValue["Modals"],
    log = OptionValue["Messanger"],

    appEvents = OptionValue["AppEvents"],

    ExtensionTemplateWrapper = OptionValue["ExtensionTemplateWrapper"],  
    ExtensionTemplateInjection = OptionValue["ExtensionTemplateInjection"], 
    ExternalEventHandlers = OptionValue["ExternalEventHandlers"],

    extensions = Sequence[
        "ExtensionTemplateWrapper" -> OptionValue["ExtensionTemplateWrapper"], 
        "ExtensionTemplateInjection" -> OptionValue["ExtensionTemplateInjection"]
    ]
},
    
    EventHandler[secret, {
        (* /* Add listeners and load cells */ *)

        "Load" -> Function[Null,
            Print["Window is about to be shown"];
            Echo[StringJoin["Connected using socket: ", $Client // ToString]];

            (* /* reset WS connection for sure, in a case of incorrect closed socket */*)
            window["WebSocketQ"] = False; 
            window["Opened"] = True;
            window["Socket"] = $Client;

            (* /* Destructor */ *)
            With[{socket = EventClone[Global`$Client(*`*)]},
                EventHandler[socket, {"Closed" -> Function[Null,
                    Echo[">> SOCKET CLOSED!!!"];
                    EventRemove[socket];
                    EventFire[appEvents, "Window:Close", window];
                    
                    destructor[window, secret, parameters, extensions];
                ]}];
            ];

            (* /* Add all listeners to a **notebook** */ *)
            addListeners[window, secret, $Client, parameters, extensions];

            WebUISubmit[Global`UIWindow["CreateServer"](*`*), $Client];
    
            (* /* Establish WS Connection to a Kernel (if available) */ *)
            checkWSLink[window, $Client, secret];

            (* /* Restore cells */ *)
            restoreCells[window, secret, $Client, parameters, extensions];

        ],

        "WebSocketConnected" -> Function[Null,
            Echo["window.wlx >> WebSocket link to evaluation Kernel was established"];
            window["WebSocketQ"] = True;

            (* /* start evluation */ *)
            evaluate[window, secret, $Client, modals, parameters, extensions];
        ],

        "WebSocketLost" -> Function[Null,
            Echo["window.wlx >> WebSocket link to evaluation Kernel was LOST"];
            window["WebSocketQ"] = False;

            (* /* reset a preliminary link */ *)
            WebUISubmit[Global`UIWindow["CreateServer"](*`*), $Client];
        ]

        else_String :> (Echo[StringTemplate["Unknown window view event ``: ``"][else, #]]&)
    }];

    With[{},

        <main class="grow flex flex-col overflow-hidden">
            <Container Parameters={parameters} Window={window} Event={secret}></Container>
            <WebUIOnLoad Event={secret} Type={"Load"}/>
        </main>

    ]
]

Options[Component] = {"Parameters"->Null, "Window"->"", "AppEvents"->"blacksheep", "Kernels"->{}, "Modals"->"", "Controls" ->"", "ControlsPort"->"", "Notebook"->Null, "Event"->"blackhole", "Messager"->"blackout", "Secret" :> CreateUUID[], "ExtensionTemplateWrapper"-> sequenceIdentity, "ExtensionTemplateInjection" -> emptyStringFunction, "ExternalEventHandlers" -> Null}
Options[Script] = {"ExtensionTemplateInjection" -> emptyStringFunction}

emptyStringFunction[x__] := ""
sequenceIdentity[first__, rulels___Rule] := first 

{Component, Script}

