Checkbox = ImportComponent["Components/UI/Checkbox.wlx"];

Extensions := ImportComponent["Components/Extensions.wlx"];

Script[OptionsPattern[]] := With[{ExtensionTemplateInjection = OptionValue["ExtensionTemplateInjection"]},
    <div>
        <script type="module">
            
        </script>
    </div>
] 

loadConfiguration  := If[FileExistsQ[FileNameJoin[{Directory[], "settings.wl"}]], Get[FileNameJoin[{Directory[], "settings.wl"}]], Missing[]];
storeConfiguration[c_Association] := Put[FileNameJoin[{Directory[], "settings.wl"}], c];

initialize[conf_, OptionsPattern[]] := With[{default = OptionValue["Defaults"]},
    conf = Join[default, (If[MissingQ[#], <||>, #]& ) @ loadConfiguration];
    storeConfiguration[conf]
];

SetAttributes[initialize, HoldFirst];
Options[initialize] = {"Defaults" -> <||>}


Component[OptionsPattern[]] := With[{
    secret = OptionValue["Secret"], 
    event = OptionValue["Event"],
    parameters = OptionValue["Parameters"],
    controller     = OptionValue["Controls"],
    modals         = OptionValue["Modals"],
    log = OptionValue["Messanger"],

    appEvents = OptionValue["AppEvents"],

    ExtensionTemplateWrapper = OptionValue["ExtensionTemplateWrapper"],  
    ExtensionTemplateInjection = OptionValue["ExtensionTemplateInjection"], 
    ExternalEventHandlers = OptionValue["ExternalEventHandlers"],

    extensions = Sequence[
        "ExtensionTemplateWrapper" -> OptionValue["ExtensionTemplateWrapper"], 
        "ExtensionTemplateInjection" -> OptionValue["ExtensionTemplateInjection"]
    ]
},
    
    EventHandler[secret, {
        (* /* Add listeners and load cells */ *)

        "Load" -> Function[Null,
            Print["Settings is about to be shown"];
            Echo[StringJoin["Connected using socket: ", $Client // ToString]];

            

            (* /* Destructor */ *)
            With[{socket = EventClone[Global`$Client(*`*)]},
                EventHandler[socket, {"Closed" -> Function[Null,
                    Echo[">> SOCKET CLOSED!!!"];
                    EventRemove[socket];
                    EventFire[appEvents, "Settings:Close", True];
                ]}];
            ];
        ],

        else_String :> (Echo[StringTemplate["Unknown settings view event ``: ``"][else, #]]&)
    }];

    With[{},

        <main class="grow flex flex-col overflow-hidden">
            <div class="divide-y divide-gray-200 overflow-hidden h-full bg-white">
              <div class="px-4 py-2 text-center text-sm font-semibold" style="-webkit-app-region: drag">
                Settings
              </div>
              <div class="px-4 py-0">
                <ul role="list" class="divide-y divide-gray-200">
                    <li class="px-4 py-4 sm:px-0">
                        <Extensions Parameters={parameters} Secret={secret}/>
                    </li>
                </ul>                
              </div>
            </div>           
            <WebUIOnLoad Event={secret} Type={"Load"}/>
        </main>

    ]
]

Options[Component] = {"Parameters"->Null, "Window"->"", "AppEvents"->"blacksheep", "Kernels"->{}, "Modals"->"", "Controls" ->"", "ControlsPort"->"", "Notebook"->Null, "Event"->"blackhole", "Messager"->"blackout", "Secret" :> CreateUUID[], "ExtensionTemplateWrapper"-> sequenceIdentity, "ExtensionTemplateInjection" -> emptyStringFunction, "ExternalEventHandlers" -> Null}
Options[Script] = {"ExtensionTemplateInjection" -> emptyStringFunction}

emptyStringFunction[x__] := ""
sequenceIdentity[first__, rulels___Rule] := first 

{Component, Script, initialize}

