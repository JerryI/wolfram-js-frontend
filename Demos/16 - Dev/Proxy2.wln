<|"Notebook" -> <|"Controller" -> "73905ac7-9034-4d7c-b191-fec2b5131d30", 
   "FocusedCell" -> CellObj[JerryI`Notebook`CellObj`$34], 
   "HaveToSaveAs" -> False, "MessangerChannel" -> Messanger, 
   "ModalsChannel" -> "2b720d8f-3445-45c4-9b8b-b85e8e3e89c7", 
   "Path" -> 
    "/Users/kirill/Github/wolfram-js-frontend/Demos/16 - Dev/Proxy2.wln", 
   "Quick" -> True, "TOC" -> {Notebook`Editor`TOC`Private`heading[2, 
      "Proxies Demo", CellObj[JerryI`Notebook`CellObj`$367]]}|>, 
 "Cells" -> {<|"Data" -> ".md\n## Proxies Demo", "Display" -> "codemirror", 
    "Hash" -> "8642bee1-6e42-43ce-98ae-4766ade8bf20", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "6c3ba5b4-9b26-47d8-912a-f29d7adf7e17"|>, <|"Data" -> "## Proxies Demo", 
    "Display" -> "markdown", "Hash" -> 
     "b8856a60-5a08-4df7-a352-42e4960f0b09", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "6c3ba5b4-9b26-47d8-912a-f29d7adf7e17"|>, 
   <|"Data" -> ".md\nIn this context, \
\[OpenCurlyDoubleQuote]Proxy\[CloseCurlyDoubleQuote] refers to an abstraction \
for managing and manipulating graphical or any dynamic elements on the \
frontend efficiently. The idea is to use proxy objects as lightweight \
references to groups of instances (like rectangles, circles combined with \
other primitives) in a larger scene. \n\n1.\tEfficiency: all proxies use the \
same linear indexed buffer instead of separate dynamic symbols. This allows \
to involve JIT on Wolfram Kernel more often and transfer the data to the \
frontend in a single transaction. This can improve performance for many small \
objects used in animations and reduces memory footprint.\n\n2.\tBatch \
Operations: Proxy objects can be updated in bulk, making it easier to apply \
changes to multiple objects simultaneously.\n\t\n4.\tManagement: You can \
proxies for complex graphical scenes to help in managing visibility, \
position, color, or other properties of groups of primitives dynamically.", 
    "Display" -> "codemirror", "Hash" -> 
     "e6bbc699-3056-4921-a991-11851109a565", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "6c3ba5b4-9b26-47d8-912a-f29d7adf7e17"|>, 
   <|"Data" -> "In this context, \
\[OpenCurlyDoubleQuote]Proxy\[CloseCurlyDoubleQuote] refers to an abstraction \
for managing and manipulating graphical or any dynamic elements on the \
frontend efficiently. The idea is to use proxy objects as lightweight \
references to groups of instances (like rectangles, circles combined with \
other primitives) in a larger scene. \n\n1.\tEfficiency: all proxies use the \
same linear indexed buffer instead of separate dynamic symbols. This allows \
to involve JIT on Wolfram Kernel more often and transfer the data to the \
frontend in a single transaction. This can improve performance for many small \
objects used in animations.\n\n2.\tBatch Operations: Proxy objects can be \
updated in bulk, making it easier to apply changes to multiple objects \
simultaneously.\n\t\n4.\tManagement: You can proxies for complex graphical \
scenes to help in managing visibility, position, color, or other properties \
of groups of primitives dynamically.", "Display" -> "markdown", 
    "Hash" -> "a3ec115f-e04c-4a0d-9122-1e5ac91dd265", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "6c3ba5b4-9b26-47d8-912a-f29d7adf7e17"|>, 
   <|"Data" -> "(* Define the rectangle proxy with initial properties \
*)\nrectangleProxy = CreateFrontProxy[\n  {position, velocity, rotationAngle, \
lifeSpan}, \n  Translate[\n    {Opacity[lifeSpan], RGBColor[With[{l = \
lifeSpan}, {l, 0, 1 - l}]], Rectangle[{-1, -1}, {1, 1}]}, \n    position\n  \
]\n];\n\n(* Initialize variables *)\nnewProxies = {};\nexpiredProxies = \
{};\nframeCounter = 1;\nframeRate = 1;\nlastUpdateTime = \
AbsoluteTime[];\n\nsceneReference = FrontInstanceReference[];\n\n(* Function \
to add new proxies at a given position *)\naddProxyAtPosition[position_] := \
newProxies = {\n  newProxies, \n  FrontProxyAdd[\n    rectangleProxy, \n    \
Sequence @@ Table[\n      {position, {Cos[angle], Sin[angle]} // N, \
RandomReal[{0, 3.14}], 1.0},\n      {angle, 0., 2 Pi, 2 Pi / 12.0}\n    ]\n  \
]\n};\n\n(* Frame update logic *)\nModule[{},\n  EventHandler[\"frame\", \
Function[Null,\n    With[{\n      positions = \
FrontProxyBuffer[rectangleProxy, 1],\n      velocities = \
FrontProxyBuffer[rectangleProxy, 2],\n      lifeSpans = \
FrontProxyBuffer[rectangleProxy, 4],\n      isValid = \
FrontProxyBuffer[rectangleProxy, -1]\n    },\n      (* Identify expired \
proxies for disposal *)\n      expiredProxies = MapThread[\n        If[#1 && \
#2 < 0.2, #3, Nothing] &, \n        {isValid, lifeSpans, \
Range[Length[lifeSpans]]}\n      ];\n      \n      (* Update positions and \
life spans *)\n      FrontProxyBufferSet[rectangleProxy, 1, positions + \
velocities];\n      FrontProxyBufferSet[rectangleProxy, 4, lifeSpans * \
0.95];\n    ];\n\n    (* Dispatch updates to proxies *)\n    \
FrontProxyDispatch[rectangleProxy];\n\n    (* Remove expired proxies *)\n    \
If[Length[expiredProxies] > 0,\n      FrontProxyRemove[rectangleProxy, \
expiredProxies];\n      expiredProxies = {};\n    ];\n\n    (* Submit new \
proxies *)\n    If[Length[newProxies] > 0, \n      \
FrontSubmit[FrontProxyShow[rectangleProxy, newProxies // Flatten], \
sceneReference];\n      newProxies = {};\n    ];\n\n    (* Update FPS counter \
*)\n    With[{currentTime = AbsoluteTime[]},\n      If[currentTime - \
lastUpdateTime > 1.0,\n        frameRate = Round[(frameCounter + frameRate) / \
2.0];\n        frameCounter = 1;\n        lastUpdateTime = currentTime;\n     \
 ,\n        frameCounter++;\n      ];\n    ];\n  ]]\n];\n\n(* Create the \
graphics and event handlers *)\nGraphics[\n  {\n    sceneReference, \n    \
{Directive[FontSize -> 20], Text[frameRate // Offload, {-80, -80}]}, \n    \
AnimationFrameListener[frameCounter // Offload, \"Event\" -> \"frame\"], \n   \
 EventHandler[\n      Graphics`Canvas[], \n      {\"mousemove\" -> \
addProxyAtPosition}\n    ]\n  }, \n  PlotRange -> {{-100, 100}, {-100, 100}}, \
\n  TransitionType -> None\n]", "Display" -> "codemirror", 
    "Hash" -> "f449e19f-9a89-4a01-9b12-bbf7f3fea8bb", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "6c3ba5b4-9b26-47d8-912a-f29d7adf7e17"|>}, "serializer" -> "jsfn4"|>
