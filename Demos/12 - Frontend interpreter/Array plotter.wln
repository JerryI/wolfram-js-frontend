<|"Notebook" -> <|"FocusedCell" -> CellObj[JerryI`Notebook`CellObj`$2115], 
   "Objects" -> <|"b8ed468f-eb4a-43c6-89d5-e1ea907e05c5" -> 
      <|"Public" -> Hold[ArrayDraw[{{0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 
            0, 0, 0, 0, 0, 0, 0}, {0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 
            0, 1, 0, 0, 0, 0}, {1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
            0, 0, 0, 1, 0}, {0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 
            0, 1, 1, 0}, {1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
            1, 0, 1}, {0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 
            0, 1}, {0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 
            0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1}, 
           {0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0}, 
           {0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, 
           {1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0}, 
           {0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1}, 
           {0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1}, 
           {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1}, 
           {0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0}, 
           {1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1}, 
           {0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1}, 
           {1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0}, 
           {1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0}, 
           {0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0}}]]|>, 
     "69b24a89-b6a3-4ec6-85dd-1047bee451c1" -> 
      <|"Public" -> Hold[ArrayDraw[Offload[sboard]]]|>|>, 
   "Path" -> "/Users/kirill/Github/wolfram-js-frontend-dev/Demos/12 - \
Frontend interpreter/Array plotter.wln", "ReadOnly" -> True, 
   "Symbols" -> <|"sboard" -> {{1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0}, {0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0}, {0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, 
       {0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0}, 
       {0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, 
       {0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0}, 
       {0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, 
       {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0}, 
       {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0}, 
       {0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, 
       {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0}, 
       {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0}, 
       {1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1}, 
       {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1}, 
       {0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0}, 
       {1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0}, 
       {1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, 
       {1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, 
       {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}}|>, 
   "TOC" -> {Notebook`Editor`TOC`Private`heading[1, "Frontend functions", 
      CellObj[JerryI`Notebook`CellObj`$2098]], 
     Notebook`Editor`TOC`Private`heading[2, "Animated array plotter", 
      CellObj[JerryI`Notebook`CellObj`$2098]], 
     Notebook`Editor`TOC`Private`heading[2, "Cleanning up method", 
      CellObj[JerryI`Notebook`CellObj`$2106]], 
     Notebook`Editor`TOC`Private`heading[2, "Update method", 
      CellObj[JerryI`Notebook`CellObj`$2111]], 
     Notebook`Editor`TOC`Private`heading[3, "Animation", 
      CellObj[JerryI`Notebook`CellObj`$2120]]}|>, 
 "Cells" -> {<|"Data" -> ".md\n# Frontend functions\n## Animated array \
plotter\nIn this small session we will show how to write our own raw function \
for the frontend, that allows to visualize an array of data in a unique \
way.\n\n<br/>\n\nIt is important to note, that here it does not rely on \
`Graphics` object or anyhting else. Just a plain HTML and Javascript coupled \
to Wolfram Language.\n\n<br/>\n\nThis __will be the fastest way of handling \
the data from WL to a browser's screen__. Most in-build components are made \
in this way.", "Display" -> "codemirror", 
    "Hash" -> "7c2b7609-bb22-4234-a630-c696156c2a5d", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "bc37cf2c-75e9-4bca-b116-f482382bf3a8"|>, 
   <|"Data" -> "\n# Frontend functions\n## Animated array plotter\nIn this \
small session we will show how to write our own raw function for the \
frontend, that allows to visualize an array of data in a unique \
way.\n\n<br/>\n\nIt is important to note, that here it does not rely on \
`Graphics` object or anyhting else. Just a plain HTML and Javascript coupled \
to Wolfram Language.\n\n<br/>\n\nThis __will be the fastest way of handling \
the data from WL to a browser's screen__. Most in-build components are made \
in this way.", "Display" -> "markdown", 
    "Hash" -> "153f14ae-15e3-4e25-8d43-ae7820eb93dc", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> False|>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "bc37cf2c-75e9-4bca-b116-f482382bf3a8"|>, 
   <|"Data" -> ".md\nLet's sketch a plan!\n1. The size of an array is \
determined in a runtime.\n2. It should use `canvas` element of HTML5.\n3. It \
will be animated independently from the incomming data with a nice fading \
effect.\n4. It should be synced to the framerate of the browser.\n\nIt sound \
complicated, however using a modern Javascript thing are going much easier", 
    "Display" -> "codemirror", "Hash" -> 
     "0bb016c1-f967-403c-968c-24eb19d01e15", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "bc37cf2c-75e9-4bca-b116-f482382bf3a8"|>, 
   <|"Data" -> "\nLet's sketch a plan!\n1. The size of an array is determined \
in a runtime.\n2. It should use `canvas` element of HTML5.\n3. It will be \
animated independently from the incomming data with a nice fading effect.\n4. \
It should be synced to the framerate of the browser.\n\nIt sound complicated, \
however using a modern Javascript thing are going much easier", 
    "Display" -> "markdown", "Hash" -> 
     "9b5dcbd2-08f2-42f7-8543-cb74e6c88c68", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> False|>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "bc37cf2c-75e9-4bca-b116-f482382bf3a8"|>, 
   <|"Data" -> ".js\ncore.ArrayDraw = async (args, env) => {\n  const canvas \
= document.createElement('canvas');\n  \n  //fixed, but one can use \
core._getRules(args, env) to derive the ImageSize option\n  canvas.width = \
300;\n  canvas.height = 300;\n  \n  //append our canvas to the provided DOM \
element\n  env.element.appendChild(canvas);\n  \n  let context = \
canvas.getContext(\"2d\");\n  \n  //use local memory to store the canvas\n  \
env.local.ctx = context;\n\n  //get the provided data from WL\n  const array \
= await interpretate(args[0], env);\n\n  //copy by the reference to the \
instance of a frontend object\n  env.local.array = array;  \n\n  //check the \
width/height\n  const width = array.length;\n  const height = \
array[0].length;\n\n  //some helpers to determine the sizes\n  \
env.local.width = width;\n  env.local.height = height;\n\n  const sizex = \
Math.floor((300/width)-1);\n  const sizey = Math.floor((300/height)-1);\n\n  \
env.local.sizex = sizex;\n  env.local.sizey = sizey;\n\n  \
env.local.arr2screen = {x: 300.0/width, y: 300.0/height};\n\n  //animation \
function\n  //this will be executed asynchroniously\n\n  function random \
(min, max) {\n    return Math.random() * (max - min) + min;\n  }\n\n  //our \
heros\n  const particles = [];\n  \n  function animate() {\n    //randomly \
select 60 potitions from the array\n    for (let i=0; i<60; ++i) {\n      if \
(particles.length > 30*30*5) particles.shift();\n      \n      const ri = \
Math.floor(random(0, env.local.width - 1));\n      const rj = \
Math.floor(random(0, env.local.height - 1));\n      const val = \
env.local.array[ri][rj];\n\n      //create a projectile\n      \
particles.push({\n        r: 127+127*Math.sin(2048*val), \n        g: \
127+127*Math.sin(1048*val), \n        b: 0,\n        lifetime: 1,\n        x: \
ri * env.local.arr2screen.x,\n        y: rj * env.local.arr2screen.y,\n       \
 xvel: random(-1,1),\n        yvel: random(1,-1)\n      });\n    }\n\n    \
//clearscreen\n    context.fillStyle = \"white\";\n    context.fillRect(0, 0, \
300, 300);\n\n\n    //draw all projectiles\n    for (let i=0; \
i<particles.length; ++i) {\n      //age of a projectile\n      const age = \
1/particles[i].lifetime;\n\n      //draw a projectile\n      \
context.fillStyle = `rgba(${particles[i].r}, ${particles[i].g}, \
${particles[i].b}, ${age}`;\n      context.fillRect(particles[i].x + sizex/2, \
particles[i].y + sizey/2, sizex, sizey);\n      \n      //a projectile gets \
older\n      particles[i].lifetime = particles[i].lifetime + 0.2;\n\n      \
//move it a bit\n      particles[i].x = particles[i].x + \
0.1*particles[i].xvel;\n      particles[i].y = particles[i].y + \
0.1*particles[i].yvel;\n    }\n\n    //sync to the browser's frame rate\n    \
//and store the ID of a request to cancel it later if needed\n    \
env.local.uid = requestAnimationFrame(animate);\n  }\n\n  //kickstarter\n  \
requestAnimationFrame(animate);\n}\n\ncore.ArrayDraw.virtual = true;", 
    "Display" -> "codemirror", "Hash" -> 
     "df58238c-ace6-4e36-a65e-cb82e314d021", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> False|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "bc37cf2c-75e9-4bca-b116-f482382bf3a8"|>, 
   <|"Data" -> "core.ArrayDraw = async (args, env) => {\n  const canvas = \
document.createElement('canvas');\n  \n  //fixed, but one can use \
core._getRules(args, env) to derive the ImageSize option\n  canvas.width = \
300;\n  canvas.height = 300;\n  \n  //append our canvas to the provided DOM \
element\n  env.element.appendChild(canvas);\n  \n  let context = \
canvas.getContext(\"2d\");\n  \n  //use local memory to store the canvas\n  \
env.local.ctx = context;\n\n  //get the provided data from WL\n  const array \
= await interpretate(args[0], env);\n\n  //copy by the reference to the \
instance of a frontend object\n  env.local.array = array;  \n\n  //check the \
width/height\n  const width = array.length;\n  const height = \
array[0].length;\n\n  //some helpers to determine the sizes\n  \
env.local.width = width;\n  env.local.height = height;\n\n  const sizex = \
Math.floor((300/width)-1);\n  const sizey = Math.floor((300/height)-1);\n\n  \
env.local.sizex = sizex;\n  env.local.sizey = sizey;\n\n  \
env.local.arr2screen = {x: 300.0/width, y: 300.0/height};\n\n  //animation \
function\n  //this will be executed asynchroniously\n\n  function random \
(min, max) {\n    return Math.random() * (max - min) + min;\n  }\n\n  //our \
heros\n  const particles = [];\n  \n  function animate() {\n    //randomly \
select 60 potitions from the array\n    for (let i=0; i<60; ++i) {\n      if \
(particles.length > 30*30*5) particles.shift();\n      \n      const ri = \
Math.floor(random(0, env.local.width - 1));\n      const rj = \
Math.floor(random(0, env.local.height - 1));\n      const val = \
env.local.array[ri][rj];\n\n      //create a projectile\n      \
particles.push({\n        r: 127+127*Math.sin(2048*val), \n        g: \
127+127*Math.sin(1048*val), \n        b: 0,\n        lifetime: 1,\n        x: \
ri * env.local.arr2screen.x,\n        y: rj * env.local.arr2screen.y,\n       \
 xvel: random(-1,1),\n        yvel: random(1,-1)\n      });\n    }\n\n    \
//clearscreen\n    context.fillStyle = \"white\";\n    context.fillRect(0, 0, \
300, 300);\n\n\n    //draw all projectiles\n    for (let i=0; \
i<particles.length; ++i) {\n      //age of a projectile\n      const age = \
1/particles[i].lifetime;\n\n      //draw a projectile\n      \
context.fillStyle = `rgba(${particles[i].r}, ${particles[i].g}, \
${particles[i].b}, ${age}`;\n      context.fillRect(particles[i].x + sizex/2, \
particles[i].y + sizey/2, sizex, sizey);\n      \n      //a projectile gets \
older\n      particles[i].lifetime = particles[i].lifetime + 0.2;\n\n      \
//move it a bit\n      particles[i].x = particles[i].x + \
0.1*particles[i].xvel;\n      particles[i].y = particles[i].y + \
0.1*particles[i].yvel;\n    }\n\n    //sync to the browser's frame rate\n    \
//and store the ID of a request to cancel it later if needed\n    \
env.local.uid = requestAnimationFrame(animate);\n  }\n\n  //kickstarter\n  \
requestAnimationFrame(animate);\n}\n\ncore.ArrayDraw.virtual = true;", 
    "Display" -> "js", "Hash" -> "abc0d4cb-d484-4a69-b4d8-e3bcfd9ccbe1", 
    "Invisible" -> False, "MetaOnly" -> False, "Props" -> <||>, 
    "State" -> "Idle", "Type" -> "Output", "UID" -> Null, 
    "Notebook" -> "bc37cf2c-75e9-4bca-b116-f482382bf3a8"|>, 
   <|"Data" -> " ", "Display" -> "codemirror", 
    "Hash" -> "9019f8f5-4ff4-4d5f-a7c9-b18bf66b57f5", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> False|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "bc37cf2c-75e9-4bca-b116-f482382bf3a8"|>, 
   <|"Data" -> ".md\n## Cleanning up method\nOnce you delete this widget or \
object (i dunno how to call it), __we should take care about animation \
loop__, otherwise it will continue to run in the background", 
    "Display" -> "codemirror", "Hash" -> 
     "415301cf-1d4f-46c8-b1de-d04a4664d284", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "bc37cf2c-75e9-4bca-b116-f482382bf3a8"|>, 
   <|"Data" -> "\n## Cleanning up method\nOnce you delete this widget or \
object (i dunno how to call it), __we should take care about animation \
loop__, otherwise it will continue to run in the background", 
    "Display" -> "markdown", "Hash" -> 
     "f83011a5-6769-4258-a542-07539db6c829", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> False|>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "bc37cf2c-75e9-4bca-b116-f482382bf3a8"|>, 
   <|"Data" -> ".js\ncore.ArrayDraw.destroy = async (args, env) => {\n  \
//remove animation loop\n  cancelAnimationFrame(env.local.uid);\n  //make \
shure that all other nested object will do the same\n  await \
interpretate(args[0], env);\n}", "Display" -> "codemirror", 
    "Hash" -> "ed663b58-6956-46bb-9cc5-5487fcadb822", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> False|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "bc37cf2c-75e9-4bca-b116-f482382bf3a8"|>, 
   <|"Data" -> "core.ArrayDraw.destroy = async (args, env) => {\n  //remove \
animation loop\n  cancelAnimationFrame(env.local.uid);\n  //make shure that \
all other nested object will do the same\n  await interpretate(args[0], \
env);\n}", "Display" -> "js", "Hash" -> 
     "06d959da-094c-4ed7-aa2d-90c7deae8714", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "bc37cf2c-75e9-4bca-b116-f482382bf3a8"|>, 
   <|"Data" -> ".md\nNow the second important method", 
    "Display" -> "codemirror", "Hash" -> 
     "54a3b878-60a8-42fe-b6e2-fa100d390b7d", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "bc37cf2c-75e9-4bca-b116-f482382bf3a8"|>, 
   <|"Data" -> "\nNow the second important method", "Display" -> "markdown", 
    "Hash" -> "138ed460-3c31-473d-848e-4c0a1027ec0a", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> False|>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "bc37cf2c-75e9-4bca-b116-f482382bf3a8"|>, 
   <|"Data" -> ".md\n## Update method\nWhen the dependent variables changes, \
we should update the canvas without reevaluating cells", 
    "Display" -> "codemirror", "Hash" -> 
     "d2ce138f-7066-4d07-ae51-2bbf2fd45687", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "bc37cf2c-75e9-4bca-b116-f482382bf3a8"|>, 
   <|"Data" -> "\n## Update method\nWhen the dependent variables changes, we \
should update the canvas without reevaluating cells", 
    "Display" -> "markdown", "Hash" -> 
     "c9eb6032-92b8-42ad-9e2d-90d8da15457d", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> False|>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "bc37cf2c-75e9-4bca-b116-f482382bf3a8"|>, 
   <|"Data" -> ".js\ncore.ArrayDraw.update = async (args, env) => {\n  const \
innerData = env.local.innerData;\n\n  //get the provided data from WL\n  \
const array = await interpretate(args[0], env);\n  if (array.length != \
env.local.array.length) return;\n  if (array[0].length != \
env.local.array[0].length) return;\n  env.local.array = array;\n}", 
    "Display" -> "codemirror", "Hash" -> 
     "f9d19ec9-3c8b-486e-b51f-2723c33b7996", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> False|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "bc37cf2c-75e9-4bca-b116-f482382bf3a8"|>, 
   <|"Data" -> "core.ArrayDraw.update = async (args, env) => {\n  const \
innerData = env.local.innerData;\n\n  //get the provided data from WL\n  \
const array = await interpretate(args[0], env);\n  if (array.length != \
env.local.array.length) return;\n  if (array[0].length != \
env.local.array[0].length) return;\n  env.local.array = array;\n}", 
    "Display" -> "js", "Hash" -> "c69bf1e8-8c2b-4cdd-ad3f-69c9c5130980", 
    "Invisible" -> False, "MetaOnly" -> False, "Props" -> <||>, 
    "State" -> "Idle", "Type" -> "Output", "UID" -> Null, 
    "Notebook" -> "bc37cf2c-75e9-4bca-b116-f482382bf3a8"|>, 
   <|"Data" -> ".md\nNow all data is stored inside the `env.local` variable, \
which is unique for each instance.\n\nThen to call it like a proper Wolfram \
Function, we need to wrap it into", "Display" -> "codemirror", 
    "Hash" -> "05c2de85-7582-4e47-a028-1e55d1619110", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "bc37cf2c-75e9-4bca-b116-f482382bf3a8"|>, 
   <|"Data" -> "\nNow all data is stored inside the `env.local` variable, \
which is unique for each instance.\n\nThen to call it like a proper Wolfram \
Function, we need to wrap it into", "Display" -> "markdown", 
    "Hash" -> "0b23c9e9-b15b-4fee-a4ba-796e24aa5a5d", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> False|>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "bc37cf2c-75e9-4bca-b116-f482382bf3a8"|>, 
   <|"Data" -> "gameOfLife = {224, {2, {{2, 2, 2}, {2, 1, 2}, {2, 2, 2}}}, \
{1, 1}};\nbboard = RandomInteger[1, {20, \
20}];\nCreateFrontEndObject[ArrayDraw[bboard = \
Last[CellularAutomaton[gameOfLife, bboard, {{0, 1}}]]]]", 
    "Display" -> "codemirror", "Hash" -> 
     "ede4910d-6e97-4a4a-a436-6ae553bc6174", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> False|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "bc37cf2c-75e9-4bca-b116-f482382bf3a8"|>, 
   <|"Data" -> "(*VB[*)(FrontEndRef[\"b8ed468f-eb4a-43c6-89d5-e1ea907e05c5\"]\
)(*,*)(*\"1:eJxTTMoPSmNkYGAoZgESHvk5KRCeEJBwK8rPK3HNS3GtSE0uLUlMykkNVgEKJ1mkp\
piYWaTppiaZJOqaGCeb6VpYppjqphqmJloamKcamCabAgCRrxYS\"*)(*]VB*)", 
    "Display" -> "codemirror", "Hash" -> 
     "c9c9e216-b378-4497-8088-efb94d02f79b", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "bc37cf2c-75e9-4bca-b116-f482382bf3a8"|>, 
   <|"Data" -> "", "Display" -> "codemirror", 
    "Hash" -> "49ace0dc-7e09-4b41-9bfa-f12ca14515ca", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> False|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "bc37cf2c-75e9-4bca-b116-f482382bf3a8"|>, 
   <|"Data" -> ".md\nYou __can copy and paste__, since this is a proper \
frontend object.\n\nHowever, there is much more we need to do as well. ", 
    "Display" -> "codemirror", "Hash" -> 
     "0f4546f2-5728-4708-94da-538a34a9d05e", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "bc37cf2c-75e9-4bca-b116-f482382bf3a8"|>, 
   <|"Data" -> "\nYou __can copy and paste__, since this is a proper frontend \
object.\n\nHowever, there is much more we need to do as well. ", 
    "Display" -> "markdown", "Hash" -> 
     "bff52ca0-9cc6-4fe9-9c65-775d4d27e54d", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> False|>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "bc37cf2c-75e9-4bca-b116-f482382bf3a8"|>, 
   <|"Data" -> ".md\n### Animation", "Display" -> "codemirror", 
    "Hash" -> "892593e3-05db-4e06-9a7e-d549b9daf487", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "bc37cf2c-75e9-4bca-b116-f482382bf3a8"|>, <|"Data" -> "\n### Animation", 
    "Display" -> "markdown", "Hash" -> 
     "1190806e-ec48-44fc-9436-db1ffa4bae81", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> False|>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "bc37cf2c-75e9-4bca-b116-f482382bf3a8"|>, 
   <|"Data" -> ".md\nNow we can check the result by rewritting the update \
cycle in WL in a much shorter way", "Display" -> "codemirror", 
    "Hash" -> "57a27977-cfaf-4883-b2a7-37e56704be6d", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "bc37cf2c-75e9-4bca-b116-f482382bf3a8"|>, 
   <|"Data" -> "\nNow we can check the result by rewritting the update cycle \
in WL in a much shorter way", "Display" -> "markdown", 
    "Hash" -> "cc845d27-98dd-4f7a-90be-4176b12d7ff9", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> False|>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "bc37cf2c-75e9-4bca-b116-f482382bf3a8"|>, 
   <|"Data" -> "\ngameOfLife = {224, {2, {{2, 2, 2}, {2, 1, 2}, {2, 2, 2}}}, \
{1, 1}};\nsboard = RandomInteger[1, {20, \
20}];\nCreateFrontEndObject[ArrayDraw[sboard // Offload]]\n\nDo[\n  sboard = \
Last[CellularAutomaton[gameOfLife, sboard, {{0, 1}}]];\n  Pause[0.2];\n, {i, \
1, 30}]", "Display" -> "codemirror", 
    "Hash" -> "349356c5-10a2-4a2b-9184-741fa6e2ad7b", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> False|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "bc37cf2c-75e9-4bca-b116-f482382bf3a8"|>, 
   <|"Data" -> "(*VB[*)(FrontEndRef[\"69b24a89-b6a3-4ec6-85dd-1047bee451c1\"]\
)(*,*)(*\"1:eJxTTMoPSmNkYGAoZgESHvk5KRCeEJBwK8rPK3HNS3GtSE0uLUlMykkNVgEKm1kmG\
ZkkWljqJpklGuuapCab6VqYpqToGhqYmCelppqYGiYbAgCDnRWl\"*)(*]VB*)", 
    "Display" -> "codemirror", "Hash" -> 
     "6a894ec4-e11b-4a84-aa37-9a080463b281", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "bc37cf2c-75e9-4bca-b116-f482382bf3a8"|>, 
   <|"Data" -> ".md\nSo it just updates our variable `sboard` without \
thinking of redrawing the canvas", "Display" -> "codemirror", 
    "Hash" -> "860f3e04-ee6d-4f36-9341-24fd6335e6ce", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "bc37cf2c-75e9-4bca-b116-f482382bf3a8"|>, 
   <|"Data" -> "\nSo it just updates our variable `sboard` without thinking \
of redrawing the canvas", "Display" -> "markdown", 
    "Hash" -> "7c2120a6-a675-4a8e-93c8-7b6afbb77345", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> False|>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "bc37cf2c-75e9-4bca-b116-f482382bf3a8"|>, 
   <|"Data" -> " ", "Display" -> "codemirror", 
    "Hash" -> "988d497a-9305-49a1-a3d0-d957d015ffa5", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> False|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "bc37cf2c-75e9-4bca-b116-f482382bf3a8"|>}, "serializer" -> "jsfn4"|>
