<|"Notebook" -> <|"FocusedCell" -> CellObj[JerryI`Notebook`CellObj`$321], 
   "HaveToSaveAs" -> True, "MessangerChannel" -> Messanger, 
   "ModalsChannel" -> "157f1574-bb6f-4ef2-af60-24411f6e8f8d", 
   "Objects" -> <||>, "Path" -> "/Users/kirill/Github/wolfram-js-frontend/Dem\
os/04 - Animation/Tesseract.wln", "Quick" -> True, "Symbols" -> <||>, 
   "TOC" -> {Notebook`Editor`TOC`Private`heading[1, "Tesseract", 
      CellObj[JerryI`Notebook`CellObj`$602]]}|>, 
 "Cells" -> {<|"Data" -> ".md\n\n# Tesseract\n\nThis demo illustrates the \
projection and rotation of a 4-dimensional hypercube (tesseract) into \
3-dimensional space, using a series of animated frames. The code performs \
several steps to create this visualization:\n\n<br/>\n\n  1.\tVertex and Edge \
Creation: Defines vertices in 4D space using tuples of \:fffc and constructs \
edges based on the condition that exactly three coordinates are identical \
between connected vertices.\n  2.\tFace Selection: Generates unique sets of \
four edges to represent 2D faces within the 4D structure, enforcing that each \
face includes four unique vertices to maintain structure.\n  3.\tRotation and \
Projection: Applies rotation in two planes to simulate the \
tesseract\[CloseCurlyQuote]s 4D rotation, which is then projected into 3D for \
visualization.\n  4.\tAnimation Setup: A frame-based update handler updates \
vertex positions on each frame to create a continuous rotation effect, \
visually representing the shifting geometry.\n  5.\t3D Rendering and \
Animation: Renders the evolving 3D projection of the tesseract with \
adjustable material properties (like transparency and thickness) for a \
glass-like effect. The animation provides a vivid sense of the \
higher-dimensional rotation projected into a 3D experience\n\n*Code design by \
Vitaliy Kaurov*", "Display" -> "codemirror", 
    "Hash" -> "1ec3c331-15f0-47c8-a302-88f2f60ae006", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "9a18c889-bf48-4360-a7ea-1f7afa34945b"|>, 
   <|"Data" -> "\n# Tesseract\n\nThis demo illustrates the projection and \
rotation of a 4-dimensional hypercube (tesseract) into 3-dimensional space, \
using a series of animated frames. The code performs several steps to create \
this visualization:\n\n<br />\n\n  1.\tVertex and Edge Creation: Defines \
vertices in 4D space using tuples of \:fffc and constructs edges based on the \
condition that exactly three coordinates are identical between connected \
vertices.\n  2.\tFace Selection: Generates unique sets of four edges to \
represent 2D faces within the 4D structure, enforcing that each face includes \
four unique vertices to maintain structure.\n  3.\tRotation and Projection: \
Applies rotation in two planes to simulate the tesseract\[CloseCurlyQuote]s \
4D rotation, which is then projected into 3D for visualization.\n  \
4.\tAnimation Setup: A frame-based update handler updates vertex positions on \
each frame to create a continuous rotation effect, visually representing the \
shifting geometry.\n  5.\t3D Rendering and Animation: Renders the evolving 3D \
projection of the tesseract with adjustable material properties (like \
transparency and thickness) for a glass-like effect. The animation provides a \
vivid sense of the higher-dimensional rotation projected into a 3D \
experience\n\n*Code design by Vitaliy Kaurov*", "Display" -> "markdown", 
    "Hash" -> "4b453315-c98d-44e7-b4c5-f166ec113879", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "9a18c889-bf48-4360-a7ea-1f7afa34945b"|>, 
   <|"Data" -> "(*BB[*)(* Define Vertex Generation and Edge Selection \
*)(*,*)(*\"1:eJxTTMoPSmNhYGAo5gcSAUX5ZZkpqSn+BSWZ+XnFaYwgCS4g4Zyfm5uaV+KUXxEM\
Uqxsbm6exgSSBPGCSnNSg9mAjOCSosy8dLBYSFFpKpoKkDkeqYkpEFXBILO1sCgJSczMQVYCAOFrJ\
EU=\"*)(*]BB*)\n\nvertices = Tuples[{-1, 1}, 4];\nedges = \
Select[Subsets[Range[Length[vertices]], {2}], Count[Subtract @@ \
vertices[[#]], 0] == 3 &];\n\n(*BB[*)(* Generate Unique Sets of Four Edges \
*)(*,*)(*\"1:eJxTTMoPSmNhYGAo5gcSAUX5ZZkpqSn+BSWZ+XnFaYwgCS4g4Zyfm5uaV+KUXxEM\
Uqxsbm6exgSSBPGCSnNSg9mAjOCSosy8dLBYSFFpKpoKkDkeqYkpEFXBILO1sCgJSczMQVYCAOFrJ\
EU=\"*)(*]BB*)\nfaceSets = Select[Union[Flatten[#]] & /@ Subsets[edges, {4}], \
Length@# == 4 &];\nfaceSets = faceSets /. {a_, b_, c_, d_} :> {b, a, c, \
d};\n\n(*BB[*)(* Define Rotation and Projection Functions \
*)(*,*)(*\"1:eJxTTMoPSmNhYGAo5gcSAUX5ZZkpqSn+BSWZ+XnFaYwgCS4g4Zyfm5uaV+KUXxEM\
Uqxsbm6exgSSBPGCSnNSg9mAjOCSosy8dLBYSFFpKpoKkDkeqYkpEFXBILO1sCgJSczMQVYCAOFrJ\
EU=\"*)(*]BB*)\n\nClearAll[rotateVertices, \
projectVertices];\n\nrotateVertices[t_] := Module[{rotated},\n  rotated = \
(RotationMatrix[t, {{0, 0, 1, 0}, {0, 1, 0, 0}}] .\n             \
RotationMatrix[2 t, {{1, 0, 0, 0}, {0, 0, 0, 1}}] . #) & /@ vertices;\n  \
rotated\n];\n\nprojectVertices[t_] := Most[#] / (3 - Last[#]) & /@ \
rotateVertices[t];\n\n(*BB[*)(* Set Animation and Frame Update \
*)(*,*)(*\"1:eJxTTMoPSmNhYGAo5gcSAUX5ZZkpqSn+BSWZ+XnFaYwgCS4g4Zyfm5uaV+KUXxEM\
Uqxsbm6exgSSBPGCSnNSg9mAjOCSosy8dLBYSFFpKpoKkDkeqYkpEFXBILO1sCgJSczMQVYCAOFrJ\
EU=\"*)(*]BB*)\n\ntime = 0;\nEventHandler[\n \"frame\",\n Function[Null,\n   \
tubes = With[{projection = projectVertices[time]},\n     Map[Map[Function[i, \
projection[[i]]], #] &, edges]\n   ];\n   poly = projectVertices[time];\n   \
time += 0.01;\n ]\n];\n\nEventFire[\"frame\", True];\n\n(*BB[*)(* 3D Graphics \
Setup \
*)(*,*)(*\"1:eJxTTMoPSmNhYGAo5gcSAUX5ZZkpqSn+BSWZ+XnFaYwgCS4g4Zyfm5uaV+KUXxEM\
Uqxsbm6exgSSBPGCSnNSg9mAjOCSosy8dLBYSFFpKpoKkDkeqYkpEFXBILO1sCgJSczMQVYCAOFrJ\
EU=\"*)(*]BB*)\n\nGraphics3D[{\n   {Cyan, Table[With[{i = i}, Tube[tubes[[i]] \
// Offload, 0.02]], {i, Length[tubes]}]},\n   GraphicsComplex[\n     poly // \
Offload, {\n      Graphics3D`Materials[\"Glass\"], Cyan,\n      \
Directive[\"MaterialThickness\" -> 0.02, \"Roughness\"->0.2],\n      Polygon \
@ faceSets\n     }\n   ],\n   AnimationFrameListener[poly // Offload, \
\"Event\" -> \"frame\"]\n }\n]", "Display" -> "codemirror", 
    "Hash" -> "14acf6fc-adc0-45b2-8f32-22a25329234d", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "9a18c889-bf48-4360-a7ea-1f7afa34945b"|>}, "serializer" -> "jsfn4"|>
