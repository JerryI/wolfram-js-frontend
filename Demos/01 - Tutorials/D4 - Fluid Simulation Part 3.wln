<|"Notebook" -> <|"FocusedCell" -> CellObj[JerryI`Notebook`CellObj`$1752], 
   "HaveToSaveAs" -> False, "Objects" -> 
    <|"1600" -> <|"Public" -> Hold[EditorView["22", "ReadOnly" -> True]]|>, 
     "48631" -> <|"Public" -> Hold[EditorView["106", "ReadOnly" -> True]]|>, 
     "48718" -> <|"Public" -> Hold[EditorView["130", "ReadOnly" -> True]]|>, 
     "1475711" -> <|"Public" -> Hold[EditorView["0.01`", 
          "ReadOnly" -> True]]|>, "1475713" -> 
      <|"Public" -> Hold[EditorView["0.03`", "ReadOnly" -> True]]|>, 
     "45747059" -> <|"Public" -> Hold[EditorView["0.001`", 
          "ReadOnly" -> True]]|>, "45747060" -> 
      <|"Public" -> Hold[EditorView["0.002`", "ReadOnly" -> True]]|>, 
     "45747064" -> <|"Public" -> Hold[EditorView["0.006`", 
          "ReadOnly" -> True]]|>, "45747065" -> 
      <|"Public" -> Hold[EditorView["0.007`", "ReadOnly" -> True]]|>, 
     "bc61c228-82bc-43b5-a78b-b2829082984b" -> 
      <|"Public" -> Hold[Dataset[{{Style["time, s", Italic], 0.01, 0.01, 
            0.03}, {Style["Max FPS", Italic], 22}}, TypeSystem`Vector[
           TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 2], 
          Association[]]]|>, "695430be-0583-497f-8116-2c88bdb6b06d" -> 
      <|"Public" -> Hold[Dataset[{{Style["time, s", Italic], 0.001, 0.002, 
            0.007}, {Style["Max FPS", Italic], 106}}, TypeSystem`Vector[
           TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 2], 
          Association[]]]|>, "09dd1aaf-1abc-48e4-8407-2d04783abf9c" -> 
      <|"Public" -> Hold[Dataset[{{Style["time, s", Italic], 0.001, 0.001, 
            0.006}, {Style["Max FPS", Italic], 130}}, TypeSystem`Vector[
           TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 2], 
          Association[]]]|>, "a38a8802-948f-46d8-9f9a-33a0bf6828dd" -> 
      <|"Public" -> Hold[Image[{{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
            1, 1, 1, 1, 0.25, 0, 0.25, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
            1, 1, 1, 1, 1, 1}, {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
            1, 1, 1, 1}, {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
            1, 1}, {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
            1}, {1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1}, 
           {1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1}, 
           {1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1}, 
           {1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1}, 
           {1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1}, 
           {1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1}, 
           {1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1}, 
           {1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1}, 
           {1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1}, 
           {1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1}, 
           {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}, 
           {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}, 
           {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}, 
           {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}, 
           {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}, 
           {0.25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.25}, 
           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, 
           {0.25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.25}, 
           {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}, 
           {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}, 
           {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}, 
           {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}, 
           {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}, 
           {1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1}, 
           {1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1}, 
           {1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1}, 
           {1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1}, 
           {1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1}, 
           {1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1}, 
           {1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1}, 
           {1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1}, 
           {1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1}, 
           {1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1}, 
           {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, 
           {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, 
           {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, 
           {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.25, 0, 
            0.25, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}}, 
          Magnification -> 5, Antialiasing -> False]]|>, 
     "37dbfc31-9a78-43de-bb3d-a7828a5639f6" -> 
      <|"Public" -> Hold[Image[NumericArray[{{{1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {0.25, 1, 1, 1}, {0, 1, 1, 1}, {0.25, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}}, {{1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}}, 
            {{1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}}, {{1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}}, {{1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}}, {{1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}}, 
            {{1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}}, {{1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}}, {{1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}}, {{1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}}, 
            {{1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 0.25, 1, 1}, 
             {0, 0, 1, 1}, {0, 0.25, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}}, {{1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, 
             {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, 
             {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}}, {{1, 1, 1, 1}, {1, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, 
             {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, 
             {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, 
             {0, 0, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}}, {{1, 1, 1, 1}, 
             {1, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, 
             {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, 
             {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, 
             {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}}, 
            {{1, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, 
             {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 0.25, 1}, 
             {0, 0, 0, 1}, {0, 0, 0.25, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, 
             {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, 
             {0, 0, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {1, 1, 1, 1}}, {{1, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, 
             {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 0, 1}, {0, 0, 0, 1}, 
             {0, 0, 0, 1}, {0, 0, 0, 1}, {0, 0, 0, 1}, {0, 0, 0, 1}, 
             {0, 0, 0, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, 
             {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {1, 1, 1, 1}}, {{1, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, 
             {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 0, 1}, {0, 0, 0, 1}, 
             {0, 0, 0, 1}, {0, 0, 0, 1}, {0, 0, 0, 1}, {0, 0, 0, 1}, 
             {0, 0, 0, 1}, {0, 0, 0, 1}, {0, 0, 0, 1}, {0, 0, 1, 1}, 
             {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {1, 1, 1, 1}}, {{1, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, 
             {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 0, 1}, {0, 0, 0, 1}, 
             {0, 0, 0, 1}, {0, 0, 0, 1}, {0, 0, 0, 1}, {0, 0, 0, 1}, 
             {0, 0, 0, 1}, {0, 0, 0, 1}, {0, 0, 0, 1}, {0, 0, 0, 1}, 
             {0, 0, 0, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, 
             {0, 0, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {1, 1, 1, 1}}, 
            {{1, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 0, 1, 1}, 
             {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 0, 1}, 
             {0, 0, 0, 1}, {0, 0, 0, 1}, {0, 0, 0, 1}, {0, 0, 0, 0.25}, 
             {0, 0, 0, 0}, {0, 0, 0, 0.25}, {0, 0, 0, 1}, {0, 0, 0, 1}, 
             {0, 0, 0, 1}, {0, 0, 0, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, 
             {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {1, 1, 1, 1}}, {{0.25, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 0.25, 1, 1}, 
             {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 0.25, 1}, 
             {0, 0, 0, 1}, {0, 0, 0, 1}, {0, 0, 0, 1}, {0, 0, 0, 0.25}, 
             {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0.25}, 
             {0, 0, 0, 1}, {0, 0, 0, 1}, {0, 0, 0, 1}, {0, 0, 0.25, 1}, 
             {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0.25, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0.25, 1, 1, 1}}, {{0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, 
             {0, 0, 0, 1}, {0, 0, 0, 1}, {0, 0, 0, 1}, {0, 0, 0, 1}, 
             {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, 
             {0, 0, 0, 0}, {0, 0, 0, 1}, {0, 0, 0, 1}, {0, 0, 0, 1}, 
             {0, 0, 0, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, 
             {0, 0, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}}, {{0.25, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 0.25, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, 
             {0, 0, 1, 1}, {0, 0, 0.25, 1}, {0, 0, 0, 1}, {0, 0, 0, 1}, 
             {0, 0, 0, 1}, {0, 0, 0, 0.25}, {0, 0, 0, 0}, {0, 0, 0, 0}, 
             {0, 0, 0, 0}, {0, 0, 0, 0.25}, {0, 0, 0, 1}, {0, 0, 0, 1}, 
             {0, 0, 0, 1}, {0, 0, 0.25, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, 
             {0, 0, 1, 1}, {0, 0.25, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0.25, 1, 1, 1}}, 
            {{1, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 0, 1, 1}, 
             {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 0, 1}, 
             {0, 0, 0, 1}, {0, 0, 0, 1}, {0, 0, 0, 1}, {0, 0, 0, 0.25}, 
             {0, 0, 0, 0}, {0, 0, 0, 0.25}, {0, 0, 0, 1}, {0, 0, 0, 1}, 
             {0, 0, 0, 1}, {0, 0, 0, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, 
             {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {1, 1, 1, 1}}, {{1, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, 
             {0, 0, 0, 1}, {0, 0, 0, 1}, {0, 0, 0, 1}, {0, 0, 0, 1}, 
             {0, 0, 0, 1}, {0, 0, 0, 1}, {0, 0, 0, 1}, {0, 0, 0, 1}, 
             {0, 0, 0, 1}, {0, 0, 0, 1}, {0, 0, 0, 1}, {0, 0, 1, 1}, 
             {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {1, 1, 1, 1}}, {{1, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, 
             {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 0, 1}, {0, 0, 0, 1}, 
             {0, 0, 0, 1}, {0, 0, 0, 1}, {0, 0, 0, 1}, {0, 0, 0, 1}, 
             {0, 0, 0, 1}, {0, 0, 0, 1}, {0, 0, 0, 1}, {0, 0, 1, 1}, 
             {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {1, 1, 1, 1}}, {{1, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 0, 1, 1}, 
             {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, 
             {0, 0, 0, 1}, {0, 0, 0, 1}, {0, 0, 0, 1}, {0, 0, 0, 1}, 
             {0, 0, 0, 1}, {0, 0, 0, 1}, {0, 0, 0, 1}, {0, 0, 1, 1}, 
             {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {1, 1, 1, 1}}, 
            {{1, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, 
             {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 0.25, 1}, 
             {0, 0, 0, 1}, {0, 0, 0.25, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, 
             {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, 
             {0, 0, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {1, 1, 1, 1}}, {{1, 1, 1, 1}, {1, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, 
             {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, 
             {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, 
             {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, 
             {0, 0, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}}, {{1, 1, 1, 1}, {1, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, 
             {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, 
             {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, 
             {0, 0, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}}, {{1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 0, 1, 1}, 
             {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, 
             {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}}, 
            {{1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 0.25, 1, 1}, 
             {0, 0, 1, 1}, {0, 0.25, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}}, {{1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}}, {{1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}}, {{1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}}, 
            {{1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}}, {{1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}}, {{1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}}, {{1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}}, 
            {{1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}}, {{1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}}, {{1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {0.25, 1, 1, 1}, {0, 1, 1, 1}, {0.25, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}}}, "Real32"], 
          Magnification -> 5, Antialiasing -> False]]|>, 
     "e671691c-98b4-40b0-a900-3da0cd9b8b92" -> 
      <|"Public" -> Hold[Image[Offload[buffer], "Byte", Magnification -> 5, 
          Antialiasing -> False]]|>, "-3328664717" -> 
      <|"Public" -> Hold[EditorView["(*BB[*)(\"time, \
s\")(*,*)(*\"1:eJxTTMoPSmNiYGAo5gcSAUX5ZZkpqSn+BSWZ+XnFaYwgCRYg4ZGfkwLhcQKJ4J\
KizLx0p/yKYjYgz7MkMSczGWIISG1QaU5qMBtcGVgspKg0FQBd8Rlt\"*)(*]BB*)", 
          "ReadOnly" -> True]]|>, "-3802473522" -> 
      <|"Public" -> Hold[EditorView["(*BB[*)(\"Max \
FPS\")(*,*)(*\"1:eJxTTMoPSmNiYGAo5gcSAUX5ZZkpqSn+BSWZ+XnFaYwgCRYg4ZGfkwLhcQKJ\
4JKizLx0p/yKYjYgz7MkMSczGWIISG1QaU5qMBtcGVgspKg0FQBd8Rlt\"*)(*]BB*)", 
          "ReadOnly" -> True]]|>|>, "Path" -> "/Users/kirill/Github/wolfram-j\
s-frontend-dev/Demos/01 - Tutorials/D4 - Fluid Simulation Part 3.wln", 
   "Quick" -> True, "Symbols" -> 
    <|"buffer" -> NumericArray[{{{255, 255, 255, 255}, {255, 255, 255, 255}, 
       {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 255}, 
       {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 255}, 
       {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 255}, 
       {255, 255, 255, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 
       255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 
       255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 212, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}}, {{255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 136, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       67, 255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}}, {{255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 255}, 
       {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 255}, 
       {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 255}, 
       {255, 255, 255, 255}, {255, 255, 255, 255}}, {{255, 255, 255, 255}, 
       {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 255}, 
       {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 113, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       35, 255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}}, {{255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 255, 255}, 
       {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 255}, 
       {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 255}, 
       {255, 255, 255, 255}}, {{255, 255, 255, 255}, {255, 255, 255, 255}, 
       {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 0, 255}, {255, 
       255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 
       255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 
       255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 
       255, 255}, {255, 255, 255, 255}}, {{255, 255, 255, 255}, {255, 255, 
       255, 255}, {255, 255, 255, 255}, {255, 255, 65, 255}, {255, 255, 0, 
       255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 255, 255}, 
       {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 255}, 
       {255, 255, 255, 255}, {255, 255, 255, 255}}, {{255, 255, 255, 255}, 
       {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 0, 255}, {255, 
       255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 
       255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       255, 255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}}, {{255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}}, {{255, 255, 255, 
       255}, {255, 255, 5, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}}, {{255, 255, 255, 
       255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}}, {{255, 255, 88, 
       255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 47, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}}, {{255, 255, 0, 
       255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 
       255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 255, 255}, {255, 
       255, 255, 255}, {255, 255, 255, 255}}, {{255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {152, 
       0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 
       255}, {155, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 255}}, 
       {{255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 
       255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 
       255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 
       0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 
       255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, 
       {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 255, 0, 
       255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 127, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}}, {{255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 
       0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 
       255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, 
       {0, 0, 0, 255}, {0, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, 
       {255, 0, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       255, 255}, {255, 255, 255, 255}}, {{255, 255, 0, 255}, {255, 255, 0, 
       255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 37, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 
       255}, {90, 0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, 
       {0, 0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {0, 0, 
       0, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {90, 0, 0, 255}, {255, 0, 0, 
       255}, {255, 0, 0, 255}, {255, 37, 0, 255}, {255, 255, 0, 255}, {255, 
       255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 
       255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 255, 255}, {255, 255, 255, 255}}, {{255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 
       0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 
       255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, 
       {0, 0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {255, 
       0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 255, 255}, {255, 255, 255, 255}}, {{255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 85, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 
       0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 
       255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, 
       {0, 0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {255, 
       0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 76, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 255, 255}, {255, 255, 255, 255}}, {{255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 
       0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 230}, {0, 0, 0, 103}, {0, 0, 0, 
       104}, {0, 0, 0, 232}, {0, 0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, 
       {0, 0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {255, 
       0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 255, 255}, {255, 255, 255, 255}}, {{255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 
       0, 0, 255}, {0, 0, 0, 252}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, 
       {0, 0, 0, 0}, {0, 0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {0, 0, 
       0, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {255, 0, 0, 
       255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       255, 255}, {255, 255, 255, 255}}, {{255, 255, 0, 255}, {255, 255, 0, 
       255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 
       255}, {0, 0, 0, 147}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 
       0, 0}, {0, 0, 0, 152}, {0, 0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, 
       {0, 0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {255, 0, 0, 255}, 
       {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 255, 0, 
       255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       255, 255}, {255, 255, 255, 255}}, {{255, 255, 0, 255}, {255, 255, 0, 
       255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 
       255}, {255, 0, 0, 171}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 
       0, 0, 0}, {0, 0, 0, 177}, {0, 0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 
       255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 
       255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       255, 255}, {255, 255, 255, 255}}, {{255, 255, 0, 255}, {255, 255, 0, 
       255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 
       255}, {255, 0, 0, 255}, {187, 0, 0, 68}, {0, 0, 0, 0}, {0, 0, 0, 0}, 
       {0, 0, 0, 73}, {0, 0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {0, 0, 
       0, 255}, {0, 0, 0, 255}, {173, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 
       0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 
       255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 
       255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 255, 255}, {255, 255, 255, 255}}, {{255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 
       0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 222}, {0, 
       0, 0, 224}, {0, 0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 
       255}, {0, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 
       255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       255, 255}, {255, 255, 255, 255}, {255, 255, 255, 255}}, {{255, 255, 0, 
       255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 
       255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 
       0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 
       0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, 
       {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 
       255}, {255, 0, 0, 255}, {255, 230, 0, 255}, {255, 255, 0, 255}, {255, 
       255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 
       255}, {255, 255, 0, 255}, {255, 255, 255, 255}, {255, 255, 255, 255}, 
       {255, 255, 255, 255}}, {{255, 255, 0, 255}, {255, 255, 0, 255}, {255, 
       255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 
       255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 
       0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, 
       {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 
       255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 
       0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 
       255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 
       255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 255}}, 
       {{255, 255, 255, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 
       255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 
       255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 
       0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, 
       {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 
       255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 
       0, 255}, {255, 0, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}}, {{255, 255, 255, 
       255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 90, 
       0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 
       0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, 
       {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 
       255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 54, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}}, {{255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 117, 
       0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 
       0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, 
       {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 
       255}, {255, 0, 0, 255}, {255, 82, 0, 255}, {255, 255, 0, 255}, {255, 
       255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 
       255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 255, 255}, 
       {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 255}, 
       {255, 255, 255, 255}}, {{255, 255, 255, 255}, {255, 255, 255, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 
       255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 
       0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 
       255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 
       255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 39, 255}, {255, 255, 255, 255}, {255, 
       255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 
       255, 255}}, {{255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 
       255, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 35, 0, 255}, 
       {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 
       255}, {255, 20, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 
       255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 
       255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 
       255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 
       255, 255}}, {{255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 
       255, 255}, {255, 255, 255, 255}, {255, 255, 0, 255}, {255, 255, 0, 
       255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}}, {{255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}}, {{255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}}, {{255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 
       255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 
       255, 255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}}, {{255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}}, {{255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 
       255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 
       255, 255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}}, {{255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 109, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 156, 255}, {255, 255, 255, 255}, {255, 
       255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 
       255, 255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}}, {{255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}}, {{255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}}}, "UnsignedInteger8"], "vfps" -> 23, 
     "nink" -> NumericArray[{{{195, 215, 215, 255}, {184, 209, 209, 255}, 
       {188, 213, 213, 255}, {191, 216, 216, 255}, {193, 217, 217, 255}, 
       {194, 218, 218, 255}, {194, 219, 219, 255}, {194, 219, 219, 255}, 
       {194, 218, 218, 255}, {195, 217, 217, 255}, {194, 215, 215, 255}, 
       {191, 211, 211, 255}, {190, 209, 209, 255}, {189, 206, 206, 255}, 
       {184, 202, 202, 255}, {173, 193, 193, 255}, {154, 198, 198, 255}, 
       {163, 230, 230, 255}, {173, 233, 233, 255}, {175, 233, 233, 255}, 
       {174, 232, 232, 255}, {175, 231, 231, 255}, {175, 231, 231, 255}, 
       {174, 230, 230, 255}, {172, 229, 229, 255}, {170, 228, 228, 255}, 
       {167, 228, 228, 255}, {164, 227, 227, 255}, {161, 227, 227, 255}, 
       {157, 227, 227, 255}, {154, 227, 227, 255}, {153, 229, 229, 255}, 
       {156, 231, 231, 255}, {162, 233, 233, 255}, {171, 236, 236, 255}, 
       {178, 237, 237, 255}, {182, 238, 238, 255}, {183, 237, 237, 255}, 
       {183, 237, 237, 255}, {182, 236, 236, 255}, {182, 236, 236, 255}, 
       {183, 236, 236, 255}, {184, 236, 236, 255}, {186, 236, 236, 255}, 
       {189, 237, 237, 255}, {190, 237, 237, 255}, {190, 237, 237, 255}, 
       {188, 237, 237, 255}, {185, 236, 236, 255}, {190, 238, 238, 255}}, 
       {{191, 214, 214, 255}, {173, 206, 206, 255}, {174, 208, 208, 255}, 
       {176, 211, 211, 255}, {178, 213, 213, 255}, {179, 214, 214, 255}, 
       {178, 214, 214, 255}, {178, 213, 213, 255}, {179, 213, 213, 255}, 
       {180, 212, 212, 255}, {182, 210, 210, 255}, {178, 203, 203, 255}, 
       {172, 194, 194, 255}, {169, 188, 188, 255}, {171, 189, 189, 255}, 
       {173, 192, 192, 255}, {168, 203, 203, 255}, {166, 218, 218, 255}, 
       {158, 225, 225, 255}, {160, 229, 229, 255}, {165, 226, 226, 255}, 
       {165, 224, 224, 255}, {162, 221, 221, 255}, {159, 219, 219, 255}, 
       {157, 218, 218, 255}, {156, 217, 217, 255}, {156, 217, 217, 255}, 
       {156, 217, 217, 255}, {157, 217, 217, 255}, {158, 218, 218, 255}, 
       {160, 219, 219, 255}, {162, 220, 220, 255}, {164, 221, 221, 255}, 
       {166, 222, 222, 255}, {166, 223, 223, 255}, {165, 223, 223, 255}, 
       {162, 223, 223, 255}, {157, 223, 223, 255}, {151, 222, 222, 255}, 
       {147, 221, 221, 255}, {145, 221, 221, 255}, {147, 222, 222, 255}, 
       {150, 223, 223, 255}, {154, 224, 224, 255}, {158, 225, 225, 255}, 
       {163, 227, 227, 255}, {168, 228, 228, 255}, {173, 230, 230, 255}, 
       {175, 231, 231, 255}, {188, 236, 236, 255}}, {{191, 214, 214, 255}, 
       {175, 209, 209, 255}, {177, 213, 213, 255}, {180, 217, 217, 255}, 
       {181, 218, 218, 255}, {181, 219, 219, 255}, {180, 218, 218, 255}, 
       {180, 218, 218, 255}, {179, 217, 217, 255}, {179, 215, 215, 255}, 
       {181, 213, 213, 255}, {182, 209, 209, 255}, {175, 196, 196, 255}, 
       {177, 192, 192, 255}, {177, 191, 191, 255}, {173, 192, 192, 255}, 
       {168, 199, 199, 255}, {168, 209, 209, 255}, {170, 216, 216, 255}, 
       {171, 219, 219, 255}, {169, 217, 217, 255}, {166, 215, 215, 255}, 
       {162, 212, 212, 255}, {159, 210, 210, 255}, {157, 209, 209, 255}, 
       {156, 208, 208, 255}, {155, 208, 208, 255}, {156, 208, 208, 255}, 
       {156, 209, 209, 255}, {156, 210, 210, 255}, {157, 211, 211, 255}, 
       {158, 212, 212, 255}, {158, 213, 213, 255}, {159, 214, 214, 255}, 
       {160, 215, 215, 255}, {161, 216, 216, 255}, {163, 217, 217, 255}, 
       {166, 219, 219, 255}, {169, 220, 220, 255}, {172, 222, 222, 255}, 
       {175, 223, 223, 255}, {178, 224, 224, 255}, {180, 225, 225, 255}, 
       {182, 226, 226, 255}, {183, 226, 226, 255}, {182, 227, 227, 255}, 
       {181, 227, 227, 255}, {178, 228, 228, 255}, {176, 229, 229, 255}, 
       {187, 235, 235, 255}}, {{190, 214, 214, 255}, {177, 210, 210, 255}, 
       {182, 217, 217, 255}, {184, 220, 220, 255}, {184, 220, 220, 255}, 
       {183, 220, 220, 255}, {182, 220, 220, 255}, {180, 220, 220, 255}, 
       {179, 220, 220, 255}, {180, 219, 219, 255}, {181, 217, 217, 255}, 
       {183, 215, 215, 255}, {182, 209, 209, 255}, {181, 199, 199, 255}, 
       {175, 191, 191, 255}, {170, 190, 190, 255}, {168, 194, 194, 255}, 
       {168, 199, 199, 255}, {168, 202, 202, 255}, {169, 202, 202, 255}, 
       {169, 201, 201, 255}, {170, 201, 201, 255}, {169, 201, 201, 255}, 
       {169, 200, 200, 255}, {169, 200, 200, 255}, {168, 201, 201, 255}, 
       {167, 201, 201, 255}, {166, 202, 202, 255}, {166, 203, 203, 255}, 
       {165, 205, 205, 255}, {166, 206, 206, 255}, {166, 208, 208, 255}, 
       {167, 210, 210, 255}, {169, 212, 212, 255}, {171, 214, 214, 255}, 
       {172, 215, 215, 255}, {174, 217, 217, 255}, {176, 218, 218, 255}, 
       {179, 219, 219, 255}, {181, 221, 221, 255}, {184, 222, 222, 255}, 
       {186, 223, 223, 255}, {188, 224, 224, 255}, {189, 225, 225, 255}, 
       {189, 226, 226, 255}, {189, 227, 227, 255}, {187, 227, 227, 255}, 
       {184, 228, 228, 255}, {179, 229, 229, 255}, {188, 235, 235, 255}}, 
       {{189, 213, 213, 255}, {175, 209, 209, 255}, {182, 217, 217, 255}, 
       {190, 222, 222, 255}, {186, 219, 219, 255}, {184, 218, 218, 255}, 
       {182, 219, 219, 255}, {180, 219, 219, 255}, {178, 220, 220, 255}, 
       {178, 220, 220, 255}, {179, 220, 220, 255}, {180, 219, 219, 255}, 
       {182, 216, 216, 255}, {180, 209, 209, 255}, {187, 206, 206, 255}, 
       {183, 201, 201, 255}, {181, 199, 199, 255}, {180, 198, 198, 255}, 
       {180, 197, 197, 255}, {180, 196, 196, 255}, {180, 195, 195, 255}, 
       {180, 194, 194, 255}, {180, 193, 193, 255}, {179, 193, 193, 255}, 
       {179, 193, 193, 255}, {178, 194, 194, 255}, {177, 196, 196, 255}, 
       {176, 198, 198, 255}, {176, 200, 200, 255}, {176, 203, 203, 255}, 
       {178, 206, 206, 255}, {180, 209, 209, 255}, {182, 212, 212, 255}, 
       {184, 214, 214, 255}, {186, 217, 217, 255}, {189, 219, 219, 255}, 
       {191, 220, 220, 255}, {192, 221, 221, 255}, {194, 223, 223, 255}, 
       {196, 224, 224, 255}, {198, 225, 225, 255}, {198, 227, 227, 255}, 
       {197, 228, 228, 255}, {196, 229, 229, 255}, {195, 229, 229, 255}, 
       {192, 229, 229, 255}, {190, 229, 229, 255}, {187, 229, 229, 255}, 
       {182, 230, 230, 255}, {189, 235, 235, 255}}, {{187, 211, 211, 255}, 
       {175, 207, 207, 255}, {179, 212, 212, 255}, {178, 211, 211, 255}, 
       {180, 211, 211, 255}, {180, 212, 212, 255}, {181, 214, 214, 255}, 
       {179, 215, 215, 255}, {177, 217, 217, 255}, {176, 219, 219, 255}, 
       {175, 220, 220, 255}, {177, 221, 221, 255}, {179, 220, 220, 255}, 
       {179, 217, 217, 255}, {182, 212, 212, 255}, {186, 211, 211, 255}, 
       {188, 208, 208, 255}, {189, 204, 204, 255}, {190, 201, 201, 255}, 
       {190, 198, 198, 255}, {190, 195, 195, 255}, {190, 193, 193, 255}, 
       {189, 191, 191, 255}, {188, 191, 191, 255}, {187, 191, 191, 255}, 
       {187, 193, 193, 255}, {187, 196, 196, 255}, {187, 200, 200, 255}, 
       {188, 204, 204, 255}, {190, 208, 208, 255}, {192, 211, 211, 255}, 
       {195, 214, 214, 255}, {198, 217, 217, 255}, {199, 220, 220, 255}, 
       {201, 221, 221, 255}, {205, 224, 224, 255}, {208, 227, 227, 255}, 
       {210, 229, 229, 255}, {209, 228, 228, 255}, {203, 225, 225, 255}, 
       {188, 222, 222, 255}, {181, 225, 225, 255}, {188, 232, 232, 255}, 
       {196, 237, 237, 255}, {199, 237, 237, 255}, {198, 236, 236, 255}, 
       {194, 233, 233, 255}, {189, 231, 231, 255}, {183, 231, 231, 255}, 
       {190, 235, 235, 255}}, {{185, 209, 209, 255}, {173, 204, 204, 255}, 
       {174, 205, 205, 255}, {176, 206, 206, 255}, {177, 206, 206, 255}, 
       {177, 206, 206, 255}, {176, 206, 206, 255}, {175, 208, 208, 255}, 
       {175, 211, 211, 255}, {173, 214, 214, 255}, {172, 217, 217, 255}, 
       {173, 219, 219, 255}, {174, 221, 221, 255}, {178, 221, 221, 255}, 
       {179, 219, 219, 255}, {185, 218, 218, 255}, {189, 217, 217, 255}, 
       {192, 214, 214, 255}, {194, 210, 210, 255}, {195, 205, 205, 255}, 
       {194, 200, 200, 255}, {193, 196, 196, 255}, {191, 193, 193, 255}, 
       {190, 191, 191, 255}, {189, 192, 192, 255}, {189, 196, 196, 255}, 
       {190, 200, 200, 255}, {192, 205, 205, 255}, {196, 209, 209, 255}, 
       {200, 213, 213, 255}, {203, 217, 217, 255}, {206, 219, 219, 255}, 
       {208, 222, 222, 255}, {212, 226, 226, 255}, {214, 227, 227, 255}, 
       {206, 224, 224, 255}, {182, 217, 217, 255}, {194, 231, 231, 255}, 
       {205, 235, 235, 255}, {207, 237, 237, 255}, {206, 238, 238, 255}, 
       {202, 237, 237, 255}, {198, 237, 237, 255}, {195, 238, 238, 255}, 
       {195, 239, 239, 255}, {197, 238, 238, 255}, {194, 235, 235, 255}, 
       {190, 233, 233, 255}, {184, 232, 232, 255}, {190, 236, 236, 255}}, 
       {{178, 203, 203, 255}, {174, 202, 202, 255}, {177, 204, 204, 255}, 
       {178, 204, 204, 255}, {178, 205, 205, 255}, {177, 205, 205, 255}, 
       {176, 204, 204, 255}, {174, 205, 205, 255}, {172, 206, 206, 255}, 
       {171, 208, 208, 255}, {170, 212, 212, 255}, {169, 215, 215, 255}, 
       {170, 218, 218, 255}, {173, 220, 220, 255}, {177, 221, 221, 255}, 
       {182, 222, 222, 255}, {188, 221, 221, 255}, {194, 220, 220, 255}, 
       {197, 217, 217, 255}, {199, 212, 212, 255}, {199, 206, 206, 255}, 
       {197, 200, 200, 255}, {194, 195, 195, 255}, {192, 193, 193, 255}, 
       {191, 195, 195, 255}, {192, 199, 199, 255}, {195, 204, 204, 255}, 
       {199, 208, 208, 255}, {204, 212, 212, 255}, {208, 215, 215, 255}, 
       {210, 219, 219, 255}, {213, 223, 223, 255}, {214, 225, 225, 255}, 
       {204, 221, 221, 255}, {194, 223, 223, 255}, {200, 229, 229, 255}, 
       {200, 232, 232, 255}, {201, 234, 234, 255}, {199, 234, 234, 255}, 
       {199, 233, 233, 255}, {198, 233, 233, 255}, {197, 234, 234, 255}, 
       {195, 236, 236, 255}, {194, 238, 238, 255}, {193, 239, 239, 255}, 
       {195, 238, 238, 255}, {194, 236, 236, 255}, {189, 234, 234, 255}, 
       {184, 232, 232, 255}, {190, 236, 236, 255}}, {{189, 211, 211, 255}, 
       {196, 216, 216, 255}, {198, 218, 218, 255}, {199, 219, 219, 255}, 
       {198, 219, 219, 255}, {194, 217, 217, 255}, {189, 214, 214, 255}, 
       {182, 210, 210, 255}, {176, 208, 208, 255}, {171, 207, 207, 255}, 
       {169, 209, 209, 255}, {168, 212, 212, 255}, {169, 215, 215, 255}, 
       {171, 218, 218, 255}, {175, 220, 220, 255}, {180, 222, 222, 255}, 
       {187, 223, 223, 255}, {194, 223, 223, 255}, {199, 221, 221, 255}, 
       {202, 217, 217, 255}, {203, 212, 212, 255}, {201, 204, 204, 255}, 
       {198, 198, 198, 255}, {196, 195, 195, 255}, {195, 195, 195, 255}, 
       {197, 199, 199, 255}, {200, 202, 202, 255}, {205, 206, 206, 255}, 
       {209, 210, 210, 255}, {212, 216, 216, 255}, {212, 220, 220, 255}, 
       {205, 219, 219, 255}, {196, 220, 220, 255}, {202, 227, 227, 255}, 
       {201, 230, 230, 255}, {200, 231, 231, 255}, {201, 231, 231, 255}, 
       {201, 231, 231, 255}, {201, 230, 230, 255}, {200, 230, 230, 255}, 
       {200, 231, 231, 255}, {198, 232, 232, 255}, {196, 234, 234, 255}, 
       {193, 237, 237, 255}, {192, 238, 238, 255}, {192, 238, 238, 255}, 
       {193, 237, 237, 255}, {189, 234, 234, 255}, {184, 233, 233, 255}, 
       {190, 237, 237, 255}}, {{216, 231, 231, 255}, {216, 231, 231, 255}, 
       {217, 232, 232, 255}, {218, 233, 233, 255}, {218, 233, 233, 255}, 
       {218, 232, 232, 255}, {215, 231, 231, 255}, {211, 229, 229, 255}, 
       {203, 226, 226, 255}, {193, 222, 222, 255}, {183, 218, 218, 255}, 
       {175, 215, 215, 255}, {172, 215, 215, 255}, {173, 217, 217, 255}, 
       {176, 220, 220, 255}, {181, 222, 222, 255}, {187, 223, 223, 255}, 
       {194, 224, 224, 255}, {201, 224, 224, 255}, {205, 221, 221, 255}, 
       {207, 217, 217, 255}, {206, 210, 210, 255}, {203, 203, 203, 255}, 
       {200, 197, 197, 255}, {198, 195, 195, 255}, {199, 195, 195, 255}, 
       {202, 198, 198, 255}, {206, 202, 202, 255}, {210, 209, 209, 255}, 
       {210, 215, 215, 255}, {197, 216, 216, 255}, {200, 225, 225, 255}, 
       {202, 228, 228, 255}, {202, 229, 229, 255}, {202, 230, 230, 255}, 
       {203, 230, 230, 255}, {204, 229, 229, 255}, {205, 227, 227, 255}, 
       {206, 226, 226, 255}, {206, 226, 226, 255}, {205, 227, 227, 255}, 
       {202, 229, 229, 255}, {198, 232, 232, 255}, {193, 235, 235, 255}, 
       {190, 237, 237, 255}, {189, 237, 237, 255}, {190, 237, 237, 255}, 
       {188, 235, 235, 255}, {184, 234, 234, 255}, {190, 237, 237, 255}}, 
       {{221, 234, 234, 255}, {218, 234, 234, 255}, {220, 235, 235, 255}, 
       {222, 235, 235, 255}, {224, 236, 236, 255}, {225, 236, 236, 255}, 
       {226, 236, 236, 255}, {225, 235, 235, 255}, {224, 235, 235, 255}, 
       {220, 233, 233, 255}, {216, 232, 232, 255}, {209, 229, 229, 255}, 
       {200, 226, 226, 255}, {191, 224, 224, 255}, {187, 223, 223, 255}, 
       {188, 223, 223, 255}, {192, 225, 225, 255}, {198, 226, 226, 255}, 
       {204, 226, 226, 255}, {208, 224, 224, 255}, {210, 221, 221, 255}, 
       {210, 215, 215, 255}, {208, 207, 207, 255}, {204, 200, 200, 255}, 
       {201, 195, 195, 255}, {200, 193, 193, 255}, {202, 195, 195, 255}, 
       {206, 200, 200, 255}, {207, 209, 209, 255}, {201, 221, 221, 255}, 
       {201, 227, 227, 255}, {202, 228, 228, 255}, {202, 228, 228, 255}, 
       {203, 229, 229, 255}, {205, 228, 228, 255}, {207, 227, 227, 255}, 
       {209, 225, 225, 255}, {212, 223, 223, 255}, {213, 222, 222, 255}, 
       {214, 222, 222, 255}, {212, 224, 224, 255}, {208, 226, 226, 255}, 
       {203, 229, 229, 255}, {196, 232, 232, 255}, {190, 235, 235, 255}, 
       {186, 236, 236, 255}, {186, 236, 236, 255}, {186, 235, 235, 255}, 
       {184, 234, 234, 255}, {190, 237, 237, 255}}, {{223, 236, 236, 255}, 
       {219, 235, 235, 255}, {221, 236, 236, 255}, {224, 237, 237, 255}, 
       {227, 237, 237, 255}, {229, 237, 237, 255}, {230, 238, 238, 255}, 
       {231, 238, 238, 255}, {231, 237, 237, 255}, {230, 237, 237, 255}, 
       {228, 236, 236, 255}, {226, 235, 235, 255}, {223, 234, 234, 255}, 
       {220, 233, 233, 255}, {215, 231, 231, 255}, {208, 229, 229, 255}, 
       {205, 228, 228, 255}, {206, 228, 228, 255}, {210, 228, 228, 255}, 
       {213, 227, 227, 255}, {215, 224, 224, 255}, {214, 218, 218, 255}, 
       {211, 211, 211, 255}, {207, 203, 203, 255}, {203, 197, 197, 255}, 
       {202, 194, 194, 255}, {203, 194, 194, 255}, {206, 201, 201, 255}, 
       {207, 221, 221, 255}, {200, 229, 229, 255}, {199, 228, 228, 255}, 
       {201, 228, 228, 255}, {203, 229, 229, 255}, {205, 228, 228, 255}, 
       {207, 227, 227, 255}, {211, 225, 225, 255}, {215, 222, 222, 255}, 
       {218, 220, 220, 255}, {220, 219, 219, 255}, {221, 219, 219, 255}, 
       {219, 220, 220, 255}, {216, 222, 222, 255}, {211, 225, 225, 255}, 
       {203, 228, 228, 255}, {194, 232, 232, 255}, {186, 235, 235, 255}, 
       {183, 236, 236, 255}, {184, 236, 236, 255}, {183, 235, 235, 255}, 
       {190, 238, 238, 255}}, {{224, 237, 237, 255}, {219, 236, 236, 255}, 
       {222, 237, 237, 255}, {226, 238, 238, 255}, {229, 238, 238, 255}, 
       {232, 238, 238, 255}, {234, 239, 239, 255}, {235, 239, 239, 255}, 
       {235, 239, 239, 255}, {235, 239, 239, 255}, {234, 238, 238, 255}, 
       {233, 238, 238, 255}, {231, 237, 237, 255}, {229, 236, 236, 255}, 
       {228, 236, 236, 255}, {226, 235, 235, 255}, {224, 234, 234, 255}, 
       {221, 232, 232, 255}, {220, 231, 231, 255}, {220, 230, 230, 255}, 
       {220, 227, 227, 255}, {218, 221, 221, 255}, {215, 213, 213, 255}, 
       {210, 205, 205, 255}, {205, 198, 198, 255}, {204, 195, 195, 255}, 
       {205, 195, 195, 255}, {211, 213, 213, 255}, {203, 228, 228, 255}, 
       {197, 229, 229, 255}, {199, 229, 229, 255}, {201, 229, 229, 255}, 
       {204, 228, 228, 255}, {206, 227, 227, 255}, {210, 225, 225, 255}, 
       {214, 223, 223, 255}, {218, 220, 220, 255}, {222, 217, 217, 255}, 
       {224, 216, 216, 255}, {225, 216, 216, 255}, {224, 216, 216, 255}, 
       {222, 218, 218, 255}, {220, 220, 220, 255}, {213, 224, 224, 255}, 
       {202, 228, 228, 255}, {190, 233, 233, 255}, {183, 236, 236, 255}, 
       {182, 236, 236, 255}, {183, 236, 236, 255}, {189, 238, 238, 255}}, 
       {{224, 237, 237, 255}, {219, 236, 236, 255}, {223, 237, 237, 255}, 
       {227, 238, 238, 255}, {231, 239, 239, 255}, {234, 239, 239, 255}, 
       {236, 239, 239, 255}, {237, 239, 239, 255}, {238, 239, 239, 255}, 
       {238, 239, 239, 255}, {238, 239, 239, 255}, {237, 239, 239, 255}, 
       {236, 239, 239, 255}, {235, 238, 238, 255}, {233, 238, 238, 255}, 
       {232, 237, 237, 255}, {231, 236, 236, 255}, {230, 236, 236, 255}, 
       {229, 234, 234, 255}, {227, 233, 233, 255}, {226, 230, 230, 255}, 
       {223, 224, 224, 255}, {218, 216, 216, 255}, {212, 206, 206, 255}, 
       {207, 198, 198, 255}, {207, 196, 196, 255}, {217, 207, 207, 255}, 
       {213, 223, 223, 255}, {197, 230, 230, 255}, {196, 229, 229, 255}, 
       {199, 229, 229, 255}, {201, 228, 228, 255}, {204, 228, 228, 255}, 
       {208, 227, 227, 255}, {212, 225, 225, 255}, {216, 222, 222, 255}, 
       {220, 219, 219, 255}, {224, 217, 217, 255}, {225, 215, 215, 255}, 
       {224, 214, 214, 255}, {224, 215, 215, 255}, {225, 215, 215, 255}, 
       {226, 218, 218, 255}, {224, 220, 220, 255}, {215, 223, 223, 255}, 
       {201, 228, 228, 255}, {187, 233, 233, 255}, {181, 236, 236, 255}, 
       {181, 236, 236, 255}, {188, 238, 238, 255}}, {{224, 238, 238, 255}, 
       {219, 236, 236, 255}, {223, 238, 238, 255}, {228, 239, 239, 255}, 
       {232, 239, 239, 255}, {235, 239, 239, 255}, {238, 239, 239, 255}, 
       {239, 239, 239, 255}, {240, 239, 239, 255}, {241, 239, 239, 255}, 
       {241, 239, 239, 255}, {240, 239, 239, 255}, {239, 239, 239, 255}, 
       {238, 239, 239, 255}, {237, 239, 239, 255}, {236, 238, 238, 255}, 
       {235, 238, 238, 255}, {234, 237, 237, 255}, {233, 236, 236, 255}, 
       {232, 235, 235, 255}, {230, 232, 232, 255}, {227, 226, 226, 255}, 
       {222, 218, 218, 255}, {215, 207, 207, 255}, {209, 199, 199, 255}, 
       {214, 202, 202, 255}, {223, 213, 213, 255}, {210, 226, 226, 255}, 
       {194, 231, 231, 255}, {196, 229, 229, 255}, {198, 228, 228, 255}, 
       {201, 228, 228, 255}, {204, 228, 228, 255}, {208, 227, 227, 255}, 
       {212, 224, 224, 255}, {217, 222, 222, 255}, {221, 219, 219, 255}, 
       {224, 217, 217, 255}, {225, 216, 216, 255}, {224, 216, 216, 255}, 
       {222, 215, 215, 255}, {224, 215, 215, 255}, {228, 217, 217, 255}, 
       {230, 219, 219, 255}, {229, 220, 220, 255}, {220, 222, 222, 255}, 
       {202, 226, 226, 255}, {185, 232, 232, 255}, {181, 235, 235, 255}, 
       {186, 237, 237, 255}}, {{224, 238, 238, 255}, {218, 236, 236, 255}, 
       {223, 238, 238, 255}, {228, 239, 239, 255}, {232, 239, 239, 255}, 
       {236, 239, 239, 255}, {238, 239, 239, 255}, {240, 239, 239, 255}, 
       {242, 239, 239, 255}, {242, 239, 239, 255}, {243, 239, 239, 255}, 
       {242, 239, 239, 255}, {242, 240, 240, 255}, {241, 239, 239, 255}, 
       {240, 239, 239, 255}, {238, 239, 239, 255}, {237, 238, 238, 255}, 
       {236, 237, 237, 255}, {236, 237, 237, 255}, {235, 235, 235, 255}, 
       {234, 233, 233, 255}, {231, 228, 228, 255}, {225, 219, 219, 255}, 
       {217, 208, 208, 255}, {212, 201, 201, 255}, {218, 206, 206, 255}, 
       {228, 217, 217, 255}, {208, 227, 227, 255}, {191, 231, 231, 255}, 
       {195, 229, 229, 255}, {198, 228, 228, 255}, {200, 228, 228, 255}, 
       {204, 228, 228, 255}, {208, 227, 227, 255}, {212, 225, 225, 255}, 
       {217, 222, 222, 255}, {221, 220, 220, 255}, {224, 218, 218, 255}, 
       {225, 217, 217, 255}, {224, 218, 218, 255}, {220, 215, 215, 255}, 
       {222, 215, 215, 255}, {226, 216, 216, 255}, {231, 219, 219, 255}, 
       {234, 221, 221, 255}, {234, 221, 221, 255}, {226, 221, 221, 255}, 
       {204, 225, 225, 255}, {186, 231, 231, 255}, {181, 235, 235, 255}}, 
       {{223, 238, 238, 255}, {218, 236, 236, 255}, {223, 238, 238, 255}, 
       {228, 239, 239, 255}, {232, 239, 239, 255}, {236, 239, 239, 255}, 
       {239, 239, 239, 255}, {241, 239, 239, 255}, {242, 238, 238, 255}, 
       {243, 238, 238, 255}, {244, 239, 239, 255}, {244, 239, 239, 255}, 
       {243, 239, 239, 255}, {242, 239, 239, 255}, {241, 239, 239, 255}, 
       {240, 239, 239, 255}, {239, 238, 238, 255}, {238, 238, 238, 255}, 
       {237, 237, 237, 255}, {237, 235, 235, 255}, {235, 233, 233, 255}, 
       {233, 228, 228, 255}, {226, 219, 219, 255}, {218, 208, 208, 255}, 
       {214, 202, 202, 255}, {223, 210, 210, 255}, {232, 220, 220, 255}, 
       {208, 228, 228, 255}, {190, 231, 231, 255}, {194, 229, 229, 255}, 
       {196, 228, 228, 255}, {200, 228, 228, 255}, {203, 228, 228, 255}, 
       {207, 227, 227, 255}, {212, 225, 225, 255}, {216, 222, 222, 255}, 
       {220, 220, 220, 255}, {223, 219, 219, 255}, {224, 218, 218, 255}, 
       {223, 218, 218, 255}, {219, 214, 214, 255}, {222, 215, 215, 255}, 
       {226, 217, 217, 255}, {230, 219, 219, 255}, {234, 222, 222, 255}, 
       {236, 223, 223, 255}, {236, 223, 223, 255}, {227, 221, 221, 255}, 
       {205, 224, 224, 255}, {182, 228, 228, 255}}, {{223, 238, 238, 255}, 
       {217, 236, 236, 255}, {222, 238, 238, 255}, {227, 239, 239, 255}, 
       {232, 239, 239, 255}, {236, 239, 239, 255}, {239, 239, 239, 255}, 
       {241, 238, 238, 255}, {243, 238, 238, 255}, {244, 237, 237, 255}, 
       {244, 238, 238, 255}, {245, 238, 238, 255}, {244, 239, 239, 255}, 
       {243, 239, 239, 255}, {242, 239, 239, 255}, {241, 238, 238, 255}, 
       {240, 238, 238, 255}, {240, 237, 237, 255}, {239, 236, 236, 255}, 
       {238, 235, 235, 255}, {237, 232, 232, 255}, {233, 227, 227, 255}, 
       {227, 218, 218, 255}, {218, 207, 207, 255}, {215, 203, 203, 255}, 
       {225, 212, 212, 255}, {236, 223, 223, 255}, {210, 229, 229, 255}, 
       {189, 232, 232, 255}, {192, 230, 230, 255}, {194, 228, 228, 255}, 
       {198, 227, 227, 255}, {203, 228, 228, 255}, {207, 227, 227, 255}, 
       {211, 225, 225, 255}, {215, 223, 223, 255}, {218, 221, 221, 255}, 
       {221, 220, 220, 255}, {222, 219, 219, 255}, {219, 217, 217, 255}, 
       {219, 215, 215, 255}, {223, 216, 216, 255}, {227, 218, 218, 255}, 
       {232, 221, 221, 255}, {235, 223, 223, 255}, {238, 224, 224, 255}, 
       {238, 225, 225, 255}, {236, 222, 222, 255}, {223, 222, 222, 255}, 
       {198, 224, 224, 255}}, {{222, 238, 238, 255}, {217, 236, 236, 255}, 
       {222, 238, 238, 255}, {227, 238, 238, 255}, {232, 239, 239, 255}, 
       {236, 239, 239, 255}, {239, 238, 238, 255}, {241, 238, 238, 255}, 
       {243, 237, 237, 255}, {244, 236, 236, 255}, {245, 237, 237, 255}, 
       {245, 237, 237, 255}, {245, 238, 238, 255}, {244, 238, 238, 255}, 
       {243, 238, 238, 255}, {242, 238, 238, 255}, {241, 237, 237, 255}, 
       {241, 236, 236, 255}, {240, 235, 235, 255}, {239, 233, 233, 255}, 
       {237, 231, 231, 255}, {234, 225, 225, 255}, {227, 216, 216, 255}, 
       {219, 206, 206, 255}, {217, 204, 204, 255}, {227, 214, 214, 255}, 
       {238, 225, 225, 255}, {214, 229, 229, 255}, {190, 232, 232, 255}, 
       {190, 231, 231, 255}, {192, 228, 228, 255}, {197, 226, 226, 255}, 
       {203, 227, 227, 255}, {206, 227, 227, 255}, {209, 225, 225, 255}, 
       {213, 223, 223, 255}, {217, 221, 221, 255}, {219, 220, 220, 255}, 
       {219, 219, 219, 255}, {216, 215, 215, 255}, {219, 215, 215, 255}, 
       {224, 217, 217, 255}, {230, 220, 220, 255}, {234, 223, 223, 255}, 
       {237, 224, 224, 255}, {239, 226, 226, 255}, {240, 226, 226, 255}, 
       {239, 225, 225, 255}, {233, 222, 222, 255}, {217, 224, 224, 255}}, 
       {{222, 238, 238, 255}, {216, 236, 236, 255}, {221, 238, 238, 255}, 
       {226, 238, 238, 255}, {231, 239, 239, 255}, {235, 239, 239, 255}, 
       {238, 238, 238, 255}, {241, 237, 237, 255}, {242, 236, 236, 255}, 
       {244, 235, 235, 255}, {245, 235, 235, 255}, {245, 236, 236, 255}, 
       {245, 237, 237, 255}, {245, 237, 237, 255}, {244, 237, 237, 255}, 
       {243, 236, 236, 255}, {242, 236, 236, 255}, {241, 235, 235, 255}, 
       {240, 234, 234, 255}, {239, 232, 232, 255}, {237, 228, 228, 255}, 
       {233, 223, 223, 255}, {226, 214, 214, 255}, {218, 205, 205, 255}, 
       {217, 204, 204, 255}, {227, 214, 214, 255}, {238, 225, 225, 255}, 
       {221, 229, 229, 255}, {194, 232, 232, 255}, {189, 231, 231, 255}, 
       {189, 228, 228, 255}, {195, 226, 226, 255}, {202, 226, 226, 255}, 
       {205, 226, 226, 255}, {208, 225, 225, 255}, {212, 223, 223, 255}, 
       {215, 221, 221, 255}, {216, 219, 219, 255}, {215, 216, 216, 255}, 
       {217, 214, 214, 255}, {222, 216, 216, 255}, {228, 219, 219, 255}, 
       {233, 223, 223, 255}, {237, 224, 224, 255}, {240, 225, 225, 255}, 
       {241, 226, 226, 255}, {242, 227, 227, 255}, {242, 226, 226, 255}, 
       {238, 224, 224, 255}, {229, 227, 227, 255}}, {{221, 237, 237, 255}, 
       {215, 236, 236, 255}, {220, 237, 237, 255}, {225, 238, 238, 255}, 
       {230, 238, 238, 255}, {234, 238, 238, 255}, {238, 238, 238, 255}, 
       {240, 236, 236, 255}, {242, 235, 235, 255}, {243, 233, 233, 255}, 
       {244, 233, 233, 255}, {245, 235, 235, 255}, {246, 236, 236, 255}, 
       {245, 236, 236, 255}, {244, 236, 236, 255}, {244, 235, 235, 255}, 
       {243, 234, 234, 255}, {242, 233, 233, 255}, {241, 232, 232, 255}, 
       {239, 229, 229, 255}, {237, 226, 226, 255}, {232, 219, 219, 255}, 
       {225, 211, 211, 255}, {218, 204, 204, 255}, {218, 205, 205, 255}, 
       {227, 214, 214, 255}, {237, 225, 225, 255}, {227, 229, 229, 255}, 
       {201, 232, 232, 255}, {189, 232, 232, 255}, {186, 229, 229, 255}, 
       {193, 225, 225, 255}, {202, 225, 225, 255}, {204, 225, 225, 255}, 
       {207, 224, 224, 255}, {210, 222, 222, 255}, {212, 220, 220, 255}, 
       {213, 217, 217, 255}, {213, 213, 213, 255}, {219, 214, 214, 255}, 
       {227, 219, 219, 255}, {233, 223, 223, 255}, {238, 225, 225, 255}, 
       {240, 225, 225, 255}, {242, 225, 225, 255}, {242, 225, 225, 255}, 
       {243, 226, 226, 255}, {243, 226, 226, 255}, {240, 225, 225, 255}, 
       {236, 229, 229, 255}}, {{220, 237, 237, 255}, {214, 236, 236, 255}, 
       {219, 237, 237, 255}, {225, 238, 238, 255}, {229, 238, 238, 255}, 
       {234, 238, 238, 255}, {237, 237, 237, 255}, {239, 236, 236, 255}, 
       {241, 234, 234, 255}, {242, 232, 232, 255}, {243, 231, 231, 255}, 
       {245, 233, 233, 255}, {245, 234, 234, 255}, {245, 235, 235, 255}, 
       {245, 234, 234, 255}, {244, 233, 233, 255}, {243, 232, 232, 255}, 
       {242, 231, 231, 255}, {241, 229, 229, 255}, {239, 226, 226, 255}, 
       {236, 222, 222, 255}, {230, 215, 215, 255}, {223, 208, 208, 255}, 
       {217, 203, 203, 255}, {218, 206, 206, 255}, {226, 214, 214, 255}, 
       {235, 224, 224, 255}, {232, 229, 229, 255}, {208, 231, 231, 255}, 
       {191, 232, 232, 255}, {184, 229, 229, 255}, {191, 225, 225, 255}, 
       {203, 224, 224, 255}, {204, 223, 223, 255}, {206, 222, 222, 255}, 
       {209, 220, 220, 255}, {210, 217, 217, 255}, {211, 212, 212, 255}, 
       {217, 212, 212, 255}, {225, 218, 218, 255}, {233, 224, 224, 255}, 
       {239, 227, 227, 255}, {241, 226, 226, 255}, {242, 224, 224, 255}, 
       {242, 223, 223, 255}, {243, 222, 222, 255}, {243, 223, 223, 255}, 
       {244, 225, 225, 255}, {242, 226, 226, 255}, {239, 230, 230, 255}}, 
       {{219, 237, 237, 255}, {213, 236, 236, 255}, {218, 237, 237, 255}, 
       {224, 237, 237, 255}, {228, 238, 238, 255}, {233, 238, 238, 255}, 
       {236, 237, 237, 255}, {238, 236, 236, 255}, {240, 234, 234, 255}, 
       {241, 231, 231, 255}, {242, 229, 229, 255}, {243, 229, 229, 255}, 
       {244, 231, 231, 255}, {245, 232, 232, 255}, {244, 231, 231, 255}, 
       {243, 230, 230, 255}, {242, 229, 229, 255}, {241, 227, 227, 255}, 
       {239, 225, 225, 255}, {237, 222, 222, 255}, {233, 217, 217, 255}, 
       {227, 211, 211, 255}, {221, 205, 205, 255}, {217, 203, 203, 255}, 
       {218, 207, 207, 255}, {225, 215, 215, 255}, {233, 223, 223, 255}, 
       {234, 229, 229, 255}, {215, 231, 231, 255}, {193, 232, 232, 255}, 
       {182, 230, 230, 255}, {190, 224, 224, 255}, {203, 222, 222, 255}, 
       {204, 221, 221, 255}, {206, 220, 220, 255}, {208, 217, 217, 255}, 
       {209, 211, 211, 255}, {213, 209, 209, 255}, {224, 217, 217, 255}, 
       {234, 227, 227, 255}, {240, 229, 229, 255}, {242, 226, 226, 255}, 
       {242, 223, 223, 255}, {242, 221, 221, 255}, {242, 220, 220, 255}, 
       {242, 219, 219, 255}, {242, 220, 220, 255}, {243, 222, 222, 255}, 
       {243, 225, 225, 255}, {241, 231, 231, 255}}, {{218, 237, 237, 255}, 
       {213, 235, 235, 255}, {217, 236, 236, 255}, {222, 237, 237, 255}, 
       {227, 237, 237, 255}, {232, 238, 238, 255}, {235, 237, 237, 255}, 
       {237, 236, 236, 255}, {239, 234, 234, 255}, {239, 231, 231, 255}, 
       {240, 228, 228, 255}, {240, 226, 226, 255}, {241, 225, 225, 255}, 
       {242, 226, 226, 255}, {242, 227, 227, 255}, {241, 226, 226, 255}, 
       {240, 225, 225, 255}, {239, 223, 223, 255}, {237, 221, 221, 255}, 
       {234, 217, 217, 255}, {230, 213, 213, 255}, {224, 208, 208, 255}, 
       {218, 204, 204, 255}, {216, 204, 204, 255}, {219, 208, 208, 255}, 
       {225, 216, 216, 255}, {232, 224, 224, 255}, {235, 230, 230, 255}, 
       {220, 232, 232, 255}, {195, 232, 232, 255}, {180, 229, 229, 255}, 
       {191, 224, 224, 255}, {202, 221, 221, 255}, {204, 219, 219, 255}, 
       {207, 219, 219, 255}, {205, 210, 210, 255}, {211, 208, 208, 255}, 
       {222, 217, 217, 255}, {235, 231, 231, 255}, {242, 234, 234, 255}, 
       {244, 228, 228, 255}, {243, 222, 222, 255}, {242, 219, 219, 255}, 
       {241, 219, 219, 255}, {241, 218, 218, 255}, {241, 218, 218, 255}, 
       {242, 218, 218, 255}, {243, 221, 221, 255}, {243, 224, 224, 255}, 
       {242, 231, 231, 255}}, {{218, 237, 237, 255}, {212, 235, 235, 255}, 
       {216, 236, 236, 255}, {221, 236, 236, 255}, {226, 237, 237, 255}, 
       {230, 237, 237, 255}, {234, 237, 237, 255}, {236, 237, 237, 255}, 
       {238, 234, 234, 255}, {238, 231, 231, 255}, {238, 228, 228, 255}, 
       {237, 225, 225, 255}, {238, 223, 223, 255}, {238, 222, 222, 255}, 
       {238, 222, 222, 255}, {237, 221, 221, 255}, {236, 220, 220, 255}, 
       {235, 218, 218, 255}, {233, 216, 216, 255}, {230, 213, 213, 255}, 
       {226, 209, 209, 255}, {221, 205, 205, 255}, {217, 204, 204, 255}, 
       {216, 206, 206, 255}, {219, 211, 211, 255}, {225, 218, 218, 255}, 
       {232, 225, 225, 255}, {237, 231, 231, 255}, {221, 232, 232, 255}, 
       {193, 232, 232, 255}, {179, 228, 228, 255}, {192, 222, 222, 255}, 
       {203, 219, 219, 255}, {204, 216, 216, 255}, {208, 216, 216, 255}, 
       {206, 204, 204, 255}, {221, 218, 218, 255}, {236, 235, 235, 255}, 
       {245, 240, 240, 255}, {246, 231, 231, 255}, {243, 221, 221, 255}, 
       {242, 217, 217, 255}, {241, 218, 218, 255}, {241, 219, 219, 255}, 
       {241, 220, 220, 255}, {241, 219, 219, 255}, {241, 218, 218, 255}, 
       {243, 220, 220, 255}, {243, 224, 224, 255}, {243, 231, 231, 255}}, 
       {{217, 237, 237, 255}, {211, 235, 235, 255}, {215, 235, 235, 255}, 
       {220, 236, 236, 255}, {224, 236, 236, 255}, {228, 237, 237, 255}, 
       {232, 237, 237, 255}, {235, 237, 237, 255}, {237, 236, 236, 255}, 
       {237, 233, 233, 255}, {236, 230, 230, 255}, {235, 226, 226, 255}, 
       {234, 222, 222, 255}, {234, 220, 220, 255}, {233, 219, 219, 255}, 
       {233, 218, 218, 255}, {232, 216, 216, 255}, {230, 215, 215, 255}, 
       {228, 213, 213, 255}, {225, 210, 210, 255}, {222, 208, 208, 255}, 
       {218, 206, 206, 255}, {216, 206, 206, 255}, {216, 209, 209, 255}, 
       {220, 215, 215, 255}, {226, 221, 221, 255}, {233, 228, 228, 255}, 
       {236, 232, 232, 255}, {218, 233, 233, 255}, {191, 231, 231, 255}, 
       {180, 227, 227, 255}, {193, 221, 221, 255}, {203, 216, 216, 255}, 
       {205, 214, 214, 255}, {207, 210, 210, 255}, {218, 217, 217, 255}, 
       {235, 237, 237, 255}, {247, 245, 245, 255}, {248, 236, 236, 255}, 
       {244, 222, 222, 255}, {241, 216, 216, 255}, {241, 217, 217, 255}, 
       {241, 219, 219, 255}, {242, 221, 221, 255}, {242, 221, 221, 255}, 
       {242, 219, 219, 255}, {242, 218, 218, 255}, {243, 219, 219, 255}, 
       {244, 223, 223, 255}, {243, 232, 232, 255}}, {{216, 236, 236, 255}, 
       {210, 234, 234, 255}, {214, 235, 235, 255}, {218, 235, 235, 255}, 
       {222, 235, 235, 255}, {226, 236, 236, 255}, {230, 237, 237, 255}, 
       {233, 238, 238, 255}, {236, 238, 238, 255}, {237, 236, 236, 255}, 
       {236, 233, 233, 255}, {235, 230, 230, 255}, {233, 226, 226, 255}, 
       {231, 222, 222, 255}, {230, 219, 219, 255}, {229, 218, 218, 255}, 
       {228, 216, 216, 255}, {226, 215, 215, 255}, {225, 213, 213, 255}, 
       {222, 211, 211, 255}, {220, 210, 210, 255}, {218, 209, 209, 255}, 
       {217, 211, 211, 255}, {219, 214, 214, 255}, {223, 220, 220, 255}, 
       {229, 225, 225, 255}, {234, 231, 231, 255}, {232, 233, 233, 255}, 
       {212, 232, 232, 255}, {188, 229, 229, 255}, {182, 225, 225, 255}, 
       {196, 218, 218, 255}, {204, 214, 214, 255}, {207, 211, 211, 255}, 
       {206, 203, 203, 255}, {233, 236, 236, 255}, {245, 245, 245, 255}, 
       {249, 241, 241, 255}, {245, 225, 225, 255}, {242, 215, 215, 255}, 
       {241, 215, 215, 255}, {242, 219, 219, 255}, {242, 221, 221, 255}, 
       {242, 223, 223, 255}, {243, 223, 223, 255}, {243, 219, 219, 255}, 
       {242, 219, 219, 255}, {243, 219, 219, 255}, {244, 223, 223, 255}, 
       {244, 232, 232, 255}}, {{216, 236, 236, 255}, {209, 234, 234, 255}, 
       {212, 234, 234, 255}, {216, 234, 234, 255}, {220, 234, 234, 255}, 
       {224, 235, 235, 255}, {228, 236, 236, 255}, {231, 238, 238, 255}, 
       {234, 238, 238, 255}, {236, 239, 239, 255}, {237, 237, 237, 255}, 
       {236, 235, 235, 255}, {234, 231, 231, 255}, {232, 228, 228, 255}, 
       {230, 224, 224, 255}, {228, 222, 222, 255}, {227, 220, 220, 255}, 
       {225, 218, 218, 255}, {223, 217, 217, 255}, {222, 216, 216, 255}, 
       {220, 215, 215, 255}, {219, 216, 216, 255}, {220, 218, 218, 255}, 
       {223, 221, 221, 255}, {227, 225, 225, 255}, {231, 229, 229, 255}, 
       {233, 233, 233, 255}, {225, 233, 233, 255}, {205, 231, 231, 255}, 
       {187, 227, 227, 255}, {186, 222, 222, 255}, {198, 216, 216, 255}, 
       {206, 212, 212, 255}, {210, 210, 210, 255}, {213, 211, 211, 255}, 
       {241, 243, 243, 255}, {248, 243, 243, 255}, {247, 231, 231, 255}, 
       {243, 217, 217, 255}, {241, 214, 214, 255}, {242, 216, 216, 255}, 
       {242, 220, 220, 255}, {243, 222, 222, 255}, {243, 224, 224, 255}, 
       {243, 223, 223, 255}, {243, 219, 219, 255}, {243, 218, 218, 255}, 
       {243, 219, 219, 255}, {244, 223, 223, 255}, {244, 232, 232, 255}}, 
       {{215, 236, 236, 255}, {208, 234, 234, 255}, {211, 234, 234, 255}, 
       {214, 233, 233, 255}, {218, 233, 233, 255}, {221, 234, 234, 255}, 
       {225, 235, 235, 255}, {229, 237, 237, 255}, {232, 238, 238, 255}, 
       {235, 240, 240, 255}, {237, 240, 240, 255}, {238, 239, 239, 255}, 
       {237, 237, 237, 255}, {235, 234, 234, 255}, {232, 231, 231, 255}, 
       {230, 229, 229, 255}, {228, 227, 227, 255}, {227, 225, 225, 255}, 
       {226, 224, 224, 255}, {225, 223, 223, 255}, {224, 223, 223, 255}, 
       {224, 223, 223, 255}, {225, 224, 224, 255}, {227, 227, 227, 255}, 
       {230, 230, 230, 255}, {232, 232, 232, 255}, {228, 233, 233, 255}, 
       {217, 232, 232, 255}, {200, 229, 229, 255}, {187, 225, 225, 255}, 
       {190, 219, 219, 255}, {202, 215, 215, 255}, {209, 212, 212, 255}, 
       {213, 212, 212, 255}, {229, 231, 231, 255}, {244, 242, 242, 255}, 
       {248, 237, 237, 255}, {245, 223, 223, 255}, {242, 214, 214, 255}, 
       {242, 214, 214, 255}, {242, 217, 217, 255}, {243, 221, 221, 255}, 
       {243, 223, 223, 255}, {243, 225, 225, 255}, {244, 223, 223, 255}, 
       {244, 220, 220, 255}, {243, 218, 218, 255}, {243, 219, 219, 255}, 
       {244, 223, 223, 255}, {244, 232, 232, 255}}, {{215, 236, 236, 255}, 
       {207, 234, 234, 255}, {209, 233, 233, 255}, {213, 232, 232, 255}, 
       {216, 232, 232, 255}, {219, 233, 233, 255}, {222, 234, 234, 255}, 
       {226, 235, 235, 255}, {229, 237, 237, 255}, {233, 239, 239, 255}, 
       {236, 241, 241, 255}, {239, 242, 242, 255}, {240, 242, 242, 255}, 
       {239, 240, 240, 255}, {237, 238, 238, 255}, {234, 236, 236, 255}, 
       {233, 234, 234, 255}, {231, 232, 232, 255}, {230, 231, 231, 255}, 
       {229, 230, 230, 255}, {229, 230, 230, 255}, {229, 230, 230, 255}, 
       {230, 230, 230, 255}, {231, 232, 232, 255}, {231, 233, 233, 255}, 
       {229, 233, 233, 255}, {221, 233, 233, 255}, {209, 230, 230, 255}, 
       {196, 226, 226, 255}, {190, 222, 222, 255}, {195, 218, 218, 255}, 
       {205, 214, 214, 255}, {213, 214, 214, 255}, {219, 219, 219, 255}, 
       {241, 239, 239, 255}, {243, 232, 232, 255}, {244, 224, 224, 255}, 
       {243, 216, 216, 255}, {241, 211, 211, 255}, {241, 210, 210, 255}, 
       {242, 216, 216, 255}, {243, 221, 221, 255}, {243, 224, 224, 255}, 
       {243, 226, 226, 255}, {244, 224, 224, 255}, {244, 220, 220, 255}, 
       {243, 218, 218, 255}, {244, 220, 220, 255}, {244, 224, 224, 255}, 
       {244, 233, 233, 255}}, {{215, 236, 236, 255}, {206, 233, 233, 255}, 
       {208, 233, 233, 255}, {211, 232, 232, 255}, {214, 231, 231, 255}, 
       {216, 231, 231, 255}, {219, 232, 232, 255}, {222, 233, 233, 255}, 
       {226, 235, 235, 255}, {229, 237, 237, 255}, {233, 239, 239, 255}, 
       {237, 242, 242, 255}, {240, 243, 243, 255}, {241, 244, 244, 255}, 
       {241, 243, 243, 255}, {239, 241, 241, 255}, {238, 240, 240, 255}, 
       {236, 238, 238, 255}, {235, 237, 237, 255}, {234, 236, 236, 255}, 
       {233, 235, 235, 255}, {233, 234, 234, 255}, {232, 234, 234, 255}, 
       {231, 234, 234, 255}, {228, 234, 234, 255}, {223, 233, 233, 255}, 
       {214, 231, 231, 255}, {204, 228, 228, 255}, {195, 224, 224, 255}, 
       {194, 220, 220, 255}, {201, 218, 218, 255}, {211, 217, 217, 255}, 
       {219, 218, 218, 255}, {230, 223, 223, 255}, {230, 195, 195, 255}, 
       {238, 206, 206, 255}, {244, 223, 223, 255}, {245, 225, 225, 255}, 
       {244, 221, 221, 255}, {243, 216, 216, 255}, {242, 213, 213, 255}, 
       {242, 217, 217, 255}, {242, 223, 223, 255}, {243, 226, 226, 255}, 
       {244, 225, 225, 255}, {244, 223, 223, 255}, {244, 221, 221, 255}, 
       {244, 221, 221, 255}, {244, 224, 224, 255}, {244, 233, 233, 255}}, 
       {{215, 236, 236, 255}, {206, 233, 233, 255}, {208, 232, 232, 255}, 
       {210, 231, 231, 255}, {212, 230, 230, 255}, {214, 230, 230, 255}, 
       {217, 230, 230, 255}, {219, 231, 231, 255}, {222, 232, 232, 255}, 
       {225, 234, 234, 255}, {229, 237, 237, 255}, {234, 239, 239, 255}, 
       {238, 242, 242, 255}, {241, 245, 245, 255}, {243, 245, 245, 255}, 
       {243, 245, 245, 255}, {241, 243, 243, 255}, {240, 242, 242, 255}, 
       {239, 241, 241, 255}, {237, 239, 239, 255}, {236, 238, 238, 255}, 
       {234, 237, 237, 255}, {232, 236, 236, 255}, {228, 235, 235, 255}, 
       {224, 233, 233, 255}, {217, 231, 231, 255}, {209, 229, 229, 255}, 
       {201, 225, 225, 255}, {197, 222, 222, 255}, {199, 219, 219, 255}, 
       {207, 216, 216, 255}, {216, 214, 214, 255}, {226, 211, 211, 255}, 
       {239, 219, 219, 255}, {242, 230, 230, 255}, {243, 238, 238, 255}, 
       {243, 236, 236, 255}, {242, 235, 235, 255}, {242, 233, 233, 255}, 
       {243, 233, 233, 255}, {243, 232, 232, 255}, {243, 229, 229, 255}, 
       {240, 219, 219, 255}, {240, 220, 220, 255}, {245, 230, 230, 255}, 
       {245, 229, 229, 255}, {243, 221, 221, 255}, {243, 222, 222, 255}, 
       {244, 226, 226, 255}, {244, 233, 233, 255}}, {{215, 236, 236, 255}, 
       {206, 234, 234, 255}, {207, 232, 232, 255}, {209, 231, 231, 255}, 
       {212, 230, 230, 255}, {213, 229, 229, 255}, {215, 229, 229, 255}, 
       {217, 229, 229, 255}, {218, 230, 230, 255}, {221, 231, 231, 255}, 
       {224, 233, 233, 255}, {229, 236, 236, 255}, {234, 239, 239, 255}, 
       {238, 243, 243, 255}, {241, 245, 245, 255}, {243, 245, 245, 255}, 
       {242, 245, 245, 255}, {241, 243, 243, 255}, {239, 242, 242, 255}, 
       {237, 241, 241, 255}, {235, 239, 239, 255}, {232, 237, 237, 255}, 
       {228, 236, 236, 255}, {224, 234, 234, 255}, {218, 232, 232, 255}, 
       {212, 229, 229, 255}, {205, 226, 226, 255}, {201, 223, 223, 255}, 
       {200, 220, 220, 255}, {205, 217, 217, 255}, {214, 215, 215, 255}, 
       {225, 216, 216, 255}, {238, 225, 225, 255}, {241, 239, 239, 255}, 
       {239, 237, 237, 255}, {239, 235, 235, 255}, {239, 232, 232, 255}, 
       {239, 230, 230, 255}, {240, 228, 228, 255}, {240, 227, 227, 255}, 
       {241, 227, 227, 255}, {241, 228, 228, 255}, {242, 231, 231, 255}, 
       {243, 231, 231, 255}, {238, 221, 221, 255}, {242, 226, 226, 255}, 
       {245, 229, 229, 255}, {245, 228, 228, 255}, {244, 227, 227, 255}, 
       {243, 233, 233, 255}}, {{215, 236, 236, 255}, {207, 234, 234, 255}, 
       {207, 232, 232, 255}, {210, 231, 231, 255}, {212, 230, 230, 255}, 
       {213, 229, 229, 255}, {214, 228, 228, 255}, {215, 228, 228, 255}, 
       {216, 228, 228, 255}, {218, 229, 229, 255}, {220, 230, 230, 255}, 
       {223, 233, 233, 255}, {228, 236, 236, 255}, {233, 239, 239, 255}, 
       {237, 242, 242, 255}, {239, 244, 244, 255}, {240, 244, 244, 255}, 
       {239, 243, 243, 255}, {237, 242, 242, 255}, {235, 240, 240, 255}, 
       {232, 238, 238, 255}, {228, 236, 236, 255}, {224, 234, 234, 255}, 
       {219, 232, 232, 255}, {214, 230, 230, 255}, {208, 227, 227, 255}, 
       {204, 224, 224, 255}, {203, 221, 221, 255}, {206, 219, 219, 255}, 
       {213, 218, 218, 255}, {223, 219, 219, 255}, {233, 226, 226, 255}, 
       {238, 238, 238, 255}, {236, 237, 237, 255}, {237, 233, 233, 255}, 
       {238, 230, 230, 255}, {238, 226, 226, 255}, {239, 223, 223, 255}, 
       {240, 221, 221, 255}, {241, 220, 220, 255}, {241, 220, 220, 255}, 
       {242, 221, 221, 255}, {242, 222, 222, 255}, {242, 224, 224, 255}, 
       {242, 226, 226, 255}, {243, 228, 228, 255}, {240, 223, 223, 255}, 
       {242, 227, 227, 255}, {244, 231, 231, 255}, {243, 232, 232, 255}}, 
       {{215, 235, 235, 255}, {208, 234, 234, 255}, {208, 232, 232, 255}, 
       {210, 231, 231, 255}, {213, 230, 230, 255}, {214, 229, 229, 255}, 
       {215, 228, 228, 255}, {215, 228, 228, 255}, {215, 228, 228, 255}, 
       {216, 228, 228, 255}, {217, 228, 228, 255}, {219, 229, 229, 255}, 
       {222, 232, 232, 255}, {226, 235, 235, 255}, {231, 238, 238, 255}, 
       {234, 241, 241, 255}, {235, 242, 242, 255}, {235, 241, 241, 255}, 
       {233, 240, 240, 255}, {230, 238, 238, 255}, {227, 237, 237, 255}, 
       {224, 235, 235, 255}, {219, 232, 232, 255}, {215, 230, 230, 255}, 
       {211, 228, 228, 255}, {207, 225, 225, 255}, {206, 223, 223, 255}, 
       {208, 221, 221, 255}, {213, 221, 221, 255}, {221, 223, 223, 255}, 
       {229, 228, 228, 255}, {235, 237, 237, 255}, {235, 237, 237, 255}, 
       {237, 234, 234, 255}, {237, 230, 230, 255}, {238, 226, 226, 255}, 
       {239, 223, 223, 255}, {240, 220, 220, 255}, {241, 218, 218, 255}, 
       {241, 217, 217, 255}, {242, 218, 218, 255}, {243, 218, 218, 255}, 
       {242, 217, 217, 255}, {243, 223, 223, 255}, {242, 225, 225, 255}, 
       {243, 227, 227, 255}, {242, 226, 226, 255}, {241, 226, 226, 255}, 
       {242, 228, 228, 255}, {240, 227, 227, 255}}, {{216, 235, 235, 255}, 
       {209, 234, 234, 255}, {209, 233, 233, 255}, {211, 231, 231, 255}, 
       {214, 230, 230, 255}, {216, 229, 229, 255}, {217, 229, 229, 255}, 
       {217, 228, 228, 255}, {216, 228, 228, 255}, {215, 227, 227, 255}, 
       {215, 227, 227, 255}, {215, 227, 227, 255}, {217, 228, 228, 255}, 
       {220, 230, 230, 255}, {225, 234, 234, 255}, {228, 237, 237, 255}, 
       {230, 239, 239, 255}, {230, 239, 239, 255}, {228, 238, 238, 255}, 
       {226, 236, 236, 255}, {223, 234, 234, 255}, {219, 233, 233, 255}, 
       {216, 230, 230, 255}, {212, 228, 228, 255}, {210, 226, 226, 255}, 
       {209, 224, 224, 255}, {210, 223, 223, 255}, {214, 223, 223, 255}, 
       {220, 226, 226, 255}, {228, 231, 231, 255}, {234, 237, 237, 255}, 
       {236, 239, 239, 255}, {236, 236, 236, 255}, {237, 232, 232, 255}, 
       {237, 229, 229, 255}, {238, 226, 226, 255}, {239, 223, 223, 255}, 
       {240, 220, 220, 255}, {241, 219, 219, 255}, {241, 218, 218, 255}, 
       {242, 218, 218, 255}, {243, 220, 220, 255}, {244, 221, 221, 255}, 
       {243, 222, 222, 255}, {243, 224, 224, 255}, {243, 226, 226, 255}, 
       {242, 226, 226, 255}, {241, 226, 226, 255}, {241, 227, 227, 255}, 
       {238, 218, 218, 255}}, {{217, 235, 235, 255}, {210, 234, 234, 255}, 
       {211, 233, 233, 255}, {214, 232, 232, 255}, {217, 231, 231, 255}, 
       {219, 230, 230, 255}, {220, 230, 230, 255}, {220, 229, 229, 255}, 
       {218, 228, 228, 255}, {216, 227, 227, 255}, {215, 226, 226, 255}, 
       {213, 226, 226, 255}, {214, 226, 226, 255}, {215, 227, 227, 255}, 
       {219, 229, 229, 255}, {223, 233, 233, 255}, {226, 236, 236, 255}, 
       {225, 236, 236, 255}, {224, 235, 235, 255}, {222, 234, 234, 255}, 
       {219, 232, 232, 255}, {216, 231, 231, 255}, {214, 229, 229, 255}, 
       {212, 227, 227, 255}, {211, 226, 226, 255}, {212, 225, 225, 255}, 
       {215, 225, 225, 255}, {220, 228, 228, 255}, {227, 233, 233, 255}, 
       {232, 238, 238, 255}, {235, 241, 241, 255}, {235, 239, 239, 255}, 
       {235, 236, 236, 255}, {236, 233, 233, 255}, {237, 230, 230, 255}, 
       {238, 227, 227, 255}, {239, 225, 225, 255}, {240, 222, 222, 255}, 
       {241, 221, 221, 255}, {241, 220, 220, 255}, {242, 220, 220, 255}, 
       {243, 220, 220, 255}, {243, 221, 221, 255}, {243, 221, 221, 255}, 
       {244, 225, 225, 255}, {243, 225, 225, 255}, {243, 226, 226, 255}, 
       {242, 226, 226, 255}, {240, 224, 224, 255}, {240, 221, 221, 255}}, 
       {{218, 235, 235, 255}, {212, 234, 234, 255}, {214, 233, 233, 255}, 
       {217, 232, 232, 255}, {220, 232, 232, 255}, {223, 231, 231, 255}, 
       {224, 231, 231, 255}, {224, 231, 231, 255}, {222, 230, 230, 255}, 
       {220, 228, 228, 255}, {217, 227, 227, 255}, {214, 225, 225, 255}, 
       {212, 224, 224, 255}, {212, 224, 224, 255}, {214, 225, 225, 255}, 
       {218, 228, 228, 255}, {222, 232, 232, 255}, {223, 234, 234, 255}, 
       {221, 233, 233, 255}, {219, 232, 232, 255}, {217, 231, 231, 255}, 
       {215, 229, 229, 255}, {213, 228, 228, 255}, {212, 227, 227, 255}, 
       {213, 226, 226, 255}, {216, 227, 227, 255}, {220, 229, 229, 255}, 
       {225, 234, 234, 255}, {230, 239, 239, 255}, {233, 243, 243, 255}, 
       {234, 243, 243, 255}, {234, 241, 241, 255}, {234, 238, 238, 255}, 
       {235, 236, 236, 255}, {236, 233, 233, 255}, {237, 230, 230, 255}, 
       {238, 228, 228, 255}, {239, 225, 225, 255}, {240, 223, 223, 255}, 
       {241, 222, 222, 255}, {241, 221, 221, 255}, {242, 221, 221, 255}, 
       {243, 222, 222, 255}, {244, 223, 223, 255}, {244, 225, 225, 255}, 
       {243, 226, 226, 255}, {243, 226, 226, 255}, {242, 224, 224, 255}, 
       {239, 220, 220, 255}, {241, 222, 222, 255}}, {{219, 235, 235, 255}, 
       {214, 234, 234, 255}, {217, 234, 234, 255}, {221, 233, 233, 255}, 
       {225, 233, 233, 255}, {227, 233, 233, 255}, {229, 233, 233, 255}, 
       {229, 232, 232, 255}, {228, 232, 232, 255}, {225, 230, 230, 255}, 
       {221, 228, 228, 255}, {216, 227, 227, 255}, {212, 225, 225, 255}, 
       {210, 223, 223, 255}, {210, 222, 222, 255}, {213, 223, 223, 255}, 
       {218, 227, 227, 255}, {222, 233, 233, 255}, {219, 232, 232, 255}, 
       {217, 230, 230, 255}, {215, 229, 229, 255}, {214, 228, 228, 255}, 
       {213, 227, 227, 255}, {214, 227, 227, 255}, {216, 227, 227, 255}, 
       {219, 230, 230, 255}, {224, 233, 233, 255}, {228, 239, 239, 255}, 
       {231, 243, 243, 255}, {232, 245, 245, 255}, {233, 245, 245, 255}, 
       {233, 243, 243, 255}, {233, 242, 242, 255}, {234, 240, 240, 255}, 
       {235, 238, 238, 255}, {236, 235, 235, 255}, {237, 233, 233, 255}, 
       {238, 230, 230, 255}, {239, 227, 227, 255}, {239, 224, 224, 255}, 
       {240, 222, 222, 255}, {241, 221, 221, 255}, {242, 221, 221, 255}, 
       {242, 222, 222, 255}, {243, 223, 223, 255}, {243, 224, 224, 255}, 
       {242, 223, 223, 255}, {241, 221, 221, 255}, {239, 217, 217, 255}, 
       {241, 219, 219, 255}}, {{220, 236, 236, 255}, {216, 234, 234, 255}, 
       {220, 234, 234, 255}, {225, 234, 234, 255}, {230, 234, 234, 255}, 
       {233, 235, 235, 255}, {235, 235, 235, 255}, {235, 234, 234, 255}, 
       {233, 233, 233, 255}, {231, 232, 232, 255}, {226, 230, 230, 255}, 
       {221, 228, 228, 255}, {216, 226, 226, 255}, {211, 224, 224, 255}, 
       {208, 222, 222, 255}, {208, 220, 220, 255}, {213, 221, 221, 255}, 
       {219, 227, 227, 255}, {221, 232, 232, 255}, {216, 229, 229, 255}, 
       {214, 228, 228, 255}, {214, 227, 227, 255}, {214, 227, 227, 255}, 
       {215, 227, 227, 255}, {218, 229, 229, 255}, {222, 232, 232, 255}, 
       {226, 237, 237, 255}, {230, 242, 242, 255}, {231, 246, 246, 255}, 
       {231, 247, 247, 255}, {231, 247, 247, 255}, {232, 246, 246, 255}, 
       {232, 245, 245, 255}, {233, 244, 244, 255}, {234, 242, 242, 255}, 
       {235, 241, 241, 255}, {236, 239, 239, 255}, {236, 236, 236, 255}, 
       {237, 233, 233, 255}, {237, 230, 230, 255}, {238, 226, 226, 255}, 
       {238, 223, 223, 255}, {239, 220, 220, 255}, {239, 217, 217, 255}, 
       {240, 216, 216, 255}, {241, 217, 217, 255}, {241, 217, 217, 255}, 
       {240, 215, 215, 255}, {239, 213, 213, 255}, {239, 213, 213, 255}}, 
       {{221, 236, 236, 255}, {218, 235, 235, 255}, {223, 235, 235, 255}, 
       {229, 235, 235, 255}, {234, 236, 236, 255}, {238, 236, 236, 255}, 
       {239, 236, 236, 255}, {239, 236, 236, 255}, {238, 235, 235, 255}, 
       {236, 234, 234, 255}, {232, 232, 232, 255}, {227, 230, 230, 255}, 
       {221, 228, 228, 255}, {214, 226, 226, 255}, {208, 223, 223, 255}, 
       {206, 220, 220, 255}, {209, 219, 219, 255}, {215, 220, 220, 255}, 
       {223, 231, 231, 255}, {216, 228, 228, 255}, {216, 228, 228, 255}, 
       {214, 227, 227, 255}, {214, 226, 226, 255}, {215, 227, 227, 255}, 
       {219, 229, 229, 255}, {223, 233, 233, 255}, {227, 238, 238, 255}, 
       {230, 244, 244, 255}, {230, 247, 247, 255}, {230, 248, 248, 255}, 
       {230, 247, 247, 255}, {230, 247, 247, 255}, {231, 247, 247, 255}, 
       {231, 246, 246, 255}, {232, 246, 246, 255}, {233, 245, 245, 255}, 
       {233, 245, 245, 255}, {234, 244, 244, 255}, {235, 242, 242, 255}, 
       {235, 240, 240, 255}, {235, 238, 238, 255}, {235, 235, 235, 255}, 
       {234, 231, 231, 255}, {234, 228, 228, 255}, {235, 225, 225, 255}, 
       {235, 222, 222, 255}, {236, 220, 220, 255}, {236, 219, 219, 255}, 
       {236, 218, 218, 255}, {235, 216, 216, 255}}, {{222, 236, 236, 255}, 
       {220, 235, 235, 255}, {226, 235, 235, 255}, {232, 236, 236, 255}, 
       {238, 237, 237, 255}, {241, 237, 237, 255}, {242, 237, 237, 255}, 
       {242, 237, 237, 255}, {241, 236, 236, 255}, {239, 235, 235, 255}, 
       {237, 234, 234, 255}, {233, 232, 232, 255}, {227, 230, 230, 255}, 
       {219, 228, 228, 255}, {210, 225, 225, 255}, {205, 221, 221, 255}, 
       {206, 219, 219, 255}, {214, 218, 218, 255}, {222, 225, 225, 255}, 
       {221, 229, 229, 255}, {217, 228, 228, 255}, {214, 225, 225, 255}, 
       {214, 225, 225, 255}, {216, 226, 226, 255}, {219, 228, 228, 255}, 
       {223, 232, 232, 255}, {227, 238, 238, 255}, {229, 243, 243, 255}, 
       {229, 246, 246, 255}, {228, 247, 247, 255}, {227, 247, 247, 255}, 
       {228, 247, 247, 255}, {229, 247, 247, 255}, {229, 247, 247, 255}, 
       {230, 246, 246, 255}, {230, 246, 246, 255}, {231, 246, 246, 255}, 
       {231, 246, 246, 255}, {232, 246, 246, 255}, {232, 247, 247, 255}, 
       {231, 246, 246, 255}, {231, 246, 246, 255}, {230, 245, 245, 255}, 
       {229, 244, 244, 255}, {228, 242, 242, 255}, {227, 241, 241, 255}, 
       {227, 240, 240, 255}, {227, 239, 239, 255}, {227, 238, 238, 255}, 
       {227, 236, 236, 255}}, {{223, 236, 236, 255}, {222, 235, 235, 255}, 
       {228, 235, 235, 255}, {235, 236, 236, 255}, {240, 237, 237, 255}, 
       {243, 238, 238, 255}, {244, 238, 238, 255}, {244, 237, 237, 255}, 
       {242, 236, 236, 255}, {241, 235, 235, 255}, {239, 234, 234, 255}, 
       {237, 233, 233, 255}, {232, 232, 232, 255}, {225, 230, 230, 255}, 
       {215, 227, 227, 255}, {205, 223, 223, 255}, {204, 219, 219, 255}, 
       {214, 219, 219, 255}, {200, 211, 211, 255}, {226, 230, 230, 255}, 
       {217, 225, 225, 255}, {214, 224, 224, 255}, {214, 224, 224, 255}, 
       {216, 224, 224, 255}, {219, 226, 226, 255}, {223, 230, 230, 255}, 
       {227, 236, 236, 255}, {229, 239, 239, 255}, {228, 240, 240, 255}, 
       {227, 241, 241, 255}, {225, 246, 246, 255}, {225, 247, 247, 255}, 
       {226, 247, 247, 255}, {226, 246, 246, 255}, {227, 246, 246, 255}, 
       {228, 245, 245, 255}, {228, 245, 245, 255}, {228, 245, 245, 255}, 
       {229, 245, 245, 255}, {229, 245, 245, 255}, {229, 245, 245, 255}, 
       {228, 244, 244, 255}, {226, 243, 243, 255}, {225, 242, 242, 255}, 
       {224, 240, 240, 255}, {224, 237, 237, 255}, {223, 235, 235, 255}, 
       {224, 233, 233, 255}, {225, 232, 232, 255}, {227, 231, 231, 255}}, 
       {{224, 235, 235, 255}, {223, 235, 235, 255}, {229, 236, 236, 255}, 
       {236, 237, 237, 255}, {242, 238, 238, 255}, {245, 239, 239, 255}, 
       {245, 239, 239, 255}, {244, 238, 238, 255}, {243, 236, 236, 255}, 
       {241, 235, 235, 255}, {240, 234, 234, 255}, {238, 233, 233, 255}, 
       {235, 232, 232, 255}, {230, 231, 231, 255}, {220, 228, 228, 255}, 
       {206, 224, 224, 255}, {203, 220, 220, 255}, {214, 219, 219, 255}, 
       {211, 222, 222, 255}, {227, 229, 229, 255}, {219, 223, 223, 255}, 
       {217, 224, 224, 255}, {215, 223, 223, 255}, {215, 223, 223, 255}, 
       {218, 224, 224, 255}, {222, 227, 227, 255}, {226, 232, 232, 255}, 
       {228, 235, 235, 255}, {228, 232, 232, 255}, {228, 229, 229, 255}, 
       {226, 233, 233, 255}, {223, 243, 243, 255}, {223, 247, 247, 255}, 
       {224, 246, 246, 255}, {224, 246, 246, 255}, {225, 245, 245, 255}, 
       {226, 245, 245, 255}, {226, 244, 244, 255}, {226, 244, 244, 255}, 
       {227, 244, 244, 255}, {227, 243, 243, 255}, {227, 243, 243, 255}, 
       {226, 242, 242, 255}, {225, 241, 241, 255}, {224, 239, 239, 255}, 
       {223, 236, 236, 255}, {223, 233, 233, 255}, {224, 231, 231, 255}, 
       {225, 228, 228, 255}, {229, 230, 230, 255}}, {{225, 235, 235, 255}, 
       {224, 234, 234, 255}, {230, 235, 235, 255}, {237, 237, 237, 255}, 
       {242, 238, 238, 255}, {244, 239, 239, 255}, {245, 239, 239, 255}, 
       {244, 238, 238, 255}, {243, 237, 237, 255}, {242, 235, 235, 255}, 
       {240, 234, 234, 255}, {239, 233, 233, 255}, {236, 232, 232, 255}, 
       {232, 231, 231, 255}, {224, 229, 229, 255}, {208, 225, 225, 255}, 
       {202, 221, 221, 255}, {215, 219, 219, 255}, {218, 226, 226, 255}, 
       {218, 219, 219, 255}, {222, 223, 223, 255}, {219, 222, 222, 255}, 
       {216, 222, 222, 255}, {216, 221, 221, 255}, {217, 222, 222, 255}, 
       {221, 224, 224, 255}, {224, 227, 227, 255}, {226, 229, 229, 255}, 
       {227, 227, 227, 255}, {227, 223, 223, 255}, {227, 222, 222, 255}, 
       {225, 228, 228, 255}, {224, 237, 237, 255}, {223, 243, 243, 255}, 
       {223, 246, 246, 255}, {221, 245, 245, 255}, {221, 245, 245, 255}, 
       {224, 245, 245, 255}, {225, 244, 244, 255}, {225, 244, 244, 255}, 
       {225, 243, 243, 255}, {226, 242, 242, 255}, {225, 241, 241, 255}, 
       {225, 240, 240, 255}, {224, 238, 238, 255}, {223, 236, 236, 255}, 
       {224, 233, 233, 255}, {224, 229, 229, 255}, {225, 226, 226, 255}, 
       {230, 229, 229, 255}}, {{225, 235, 235, 255}, {225, 234, 234, 255}, 
       {230, 235, 235, 255}, {236, 236, 236, 255}, {240, 237, 237, 255}, 
       {243, 238, 238, 255}, {244, 238, 238, 255}, {243, 237, 237, 255}, 
       {242, 236, 236, 255}, {241, 235, 235, 255}, {240, 234, 234, 255}, 
       {238, 233, 233, 255}, {237, 232, 232, 255}, {233, 231, 231, 255}, 
       {225, 229, 229, 255}, {209, 226, 226, 255}, {203, 221, 221, 255}, 
       {216, 219, 219, 255}, {217, 225, 225, 255}, {204, 215, 215, 255}, 
       {222, 223, 223, 255}, {220, 221, 221, 255}, {218, 220, 220, 255}, 
       {217, 220, 220, 255}, {218, 220, 220, 255}, {219, 221, 221, 255}, 
       {222, 223, 223, 255}, {224, 223, 223, 255}, {225, 222, 222, 255}, 
       {225, 219, 219, 255}, {225, 217, 217, 255}, {225, 219, 219, 255}, 
       {224, 224, 224, 255}, {223, 232, 232, 255}, {223, 238, 238, 255}, 
       {223, 243, 243, 255}, {224, 245, 245, 255}, {223, 246, 246, 255}, 
       {220, 246, 246, 255}, {220, 245, 245, 255}, {223, 244, 244, 255}, 
       {224, 242, 242, 255}, {225, 241, 241, 255}, {225, 240, 240, 255}, 
       {225, 238, 238, 255}, {222, 235, 235, 255}, {225, 233, 233, 255}, 
       {225, 229, 229, 255}, {225, 225, 225, 255}, {231, 228, 228, 255}}, 
       {{226, 234, 234, 255}, {225, 233, 233, 255}, {230, 234, 234, 255}, 
       {234, 235, 235, 255}, {238, 236, 236, 255}, {240, 237, 237, 255}, 
       {241, 237, 237, 255}, {241, 236, 236, 255}, {240, 235, 235, 255}, 
       {240, 234, 234, 255}, {239, 233, 233, 255}, {238, 233, 233, 255}, 
       {237, 232, 232, 255}, {234, 232, 232, 255}, {225, 229, 229, 255}, 
       {208, 225, 225, 255}, {204, 221, 221, 255}, {217, 219, 219, 255}, 
       {215, 222, 222, 255}, {215, 223, 223, 255}, {220, 222, 222, 255}, 
       {221, 221, 221, 255}, {219, 219, 219, 255}, {218, 218, 218, 255}, 
       {218, 218, 218, 255}, {219, 218, 218, 255}, {221, 218, 218, 255}, 
       {222, 218, 218, 255}, {223, 217, 217, 255}, {223, 216, 216, 255}, 
       {224, 214, 214, 255}, {224, 213, 213, 255}, {224, 216, 216, 255}, 
       {223, 221, 221, 255}, {223, 227, 227, 255}, {223, 232, 232, 255}, 
       {223, 237, 237, 255}, {223, 240, 240, 255}, {224, 242, 242, 255}, 
       {225, 244, 244, 255}, {225, 245, 245, 255}, {225, 244, 244, 255}, 
       {224, 242, 242, 255}, {223, 240, 240, 255}, {224, 237, 237, 255}, 
       {223, 234, 234, 255}, {225, 232, 232, 255}, {225, 229, 229, 255}, 
       {225, 225, 225, 255}, {231, 228, 228, 255}}, {{226, 234, 234, 255}, 
       {226, 233, 233, 255}, {229, 233, 233, 255}, {232, 234, 234, 255}, 
       {235, 234, 234, 255}, {236, 234, 234, 255}, {237, 234, 234, 255}, 
       {238, 234, 234, 255}, {238, 234, 234, 255}, {237, 233, 233, 255}, 
       {237, 232, 232, 255}, {237, 232, 232, 255}, {237, 232, 232, 255}, 
       {235, 232, 232, 255}, {226, 229, 229, 255}, {206, 224, 224, 255}, 
       {207, 220, 220, 255}, {217, 219, 219, 255}, {216, 221, 221, 255}, 
       {217, 222, 222, 255}, {217, 220, 220, 255}, {222, 221, 221, 255}, 
       {220, 218, 218, 255}, {219, 217, 217, 255}, {219, 216, 216, 255}, 
       {219, 215, 215, 255}, {220, 215, 215, 255}, {220, 214, 214, 255}, 
       {221, 213, 213, 255}, {222, 212, 212, 255}, {222, 211, 211, 255}, 
       {222, 210, 210, 255}, {222, 211, 211, 255}, {223, 213, 213, 255}, 
       {223, 216, 216, 255}, {223, 220, 220, 255}, {223, 224, 224, 255}, 
       {223, 228, 228, 255}, {223, 231, 231, 255}, {224, 233, 233, 255}, 
       {224, 235, 235, 255}, {225, 236, 236, 255}, {225, 236, 236, 255}, 
       {225, 236, 236, 255}, {226, 235, 235, 255}, {225, 233, 233, 255}, 
       {225, 230, 230, 255}, {225, 227, 227, 255}, {226, 223, 223, 255}, 
       {232, 227, 227, 255}}, {{225, 232, 232, 255}, {226, 231, 231, 255}, 
       {228, 232, 232, 255}, {230, 232, 232, 255}, {231, 232, 232, 255}, 
       {232, 232, 232, 255}, {233, 232, 232, 255}, {234, 232, 232, 255}, 
       {234, 232, 232, 255}, {235, 232, 232, 255}, {235, 232, 232, 255}, 
       {236, 232, 232, 255}, {236, 232, 232, 255}, {235, 232, 232, 255}, 
       {227, 230, 230, 255}, {202, 223, 223, 255}, {210, 218, 218, 255}, 
       {217, 217, 217, 255}, {216, 218, 218, 255}, {217, 219, 219, 255}, 
       {217, 218, 218, 255}, {220, 218, 218, 255}, {220, 217, 217, 255}, 
       {220, 216, 216, 255}, {219, 214, 214, 255}, {219, 213, 213, 255}, 
       {219, 212, 212, 255}, {219, 211, 211, 255}, {220, 210, 210, 255}, 
       {220, 210, 210, 255}, {221, 209, 209, 255}, {221, 208, 208, 255}, 
       {221, 208, 208, 255}, {222, 209, 209, 255}, {222, 210, 210, 255}, 
       {222, 212, 212, 255}, {222, 214, 214, 255}, {223, 216, 216, 255}, 
       {223, 218, 218, 255}, {223, 219, 219, 255}, {224, 220, 220, 255}, 
       {224, 221, 221, 255}, {225, 222, 222, 255}, {225, 223, 223, 255}, 
       {225, 224, 224, 255}, {226, 224, 224, 255}, {226, 223, 223, 255}, 
       {226, 222, 222, 255}, {226, 221, 221, 255}, {232, 226, 226, 255}}, 
       {{230, 234, 234, 255}, {232, 235, 235, 255}, {232, 235, 235, 255}, 
       {233, 235, 235, 255}, {234, 235, 235, 255}, {235, 235, 235, 255}, 
       {235, 235, 235, 255}, {236, 235, 235, 255}, {236, 235, 235, 255}, 
       {236, 235, 235, 255}, {237, 235, 235, 255}, {237, 235, 235, 255}, 
       {237, 234, 234, 255}, {235, 233, 233, 255}, {226, 229, 229, 255}, 
       {194, 220, 220, 255}, {213, 216, 216, 255}, {218, 216, 216, 255}, 
       {220, 218, 218, 255}, {221, 219, 219, 255}, {222, 220, 220, 255}, 
       {224, 221, 221, 255}, {224, 221, 221, 255}, {225, 220, 220, 255}, 
       {225, 220, 220, 255}, {225, 219, 219, 255}, {225, 219, 219, 255}, 
       {226, 218, 218, 255}, {226, 218, 218, 255}, {227, 218, 218, 255}, 
       {227, 218, 218, 255}, {228, 218, 218, 255}, {228, 217, 217, 255}, 
       {228, 217, 217, 255}, {228, 218, 218, 255}, {229, 218, 218, 255}, 
       {229, 219, 219, 255}, {229, 219, 219, 255}, {230, 220, 220, 255}, 
       {230, 220, 220, 255}, {230, 221, 221, 255}, {231, 221, 221, 255}, 
       {231, 221, 221, 255}, {231, 221, 221, 255}, {231, 221, 221, 255}, 
       {231, 221, 221, 255}, {231, 221, 221, 255}, {230, 220, 220, 255}, 
       {229, 218, 218, 255}, {233, 224, 224, 255}}}, "UnsignedInteger8"]|>, 
   "TOC" -> {Notebook`Editor`TOC`Private`heading[1, 
      "Real-time Fluid Simulation Part 3", 
      CellObj[JerryI`Notebook`CellObj`$823]], 
     Notebook`Editor`TOC`Private`heading[2, 
      "Measure and optimize \:23f1\:fe0f", 
      CellObj[JerryI`Notebook`CellObj`$1508]], 
     Notebook`Editor`TOC`Private`heading[3, "Compile", 
      CellObj[JerryI`Notebook`CellObj`$1505]], 
     Notebook`Editor`TOC`Private`heading[2, "Immediate Graphics Mode", 
      CellObj[JerryI`Notebook`CellObj`$1618]], 
     Notebook`Editor`TOC`Private`heading[3, "Dynamic image", 
      CellObj[JerryI`Notebook`CellObj`$1675]], 
     Notebook`Editor`TOC`Private`heading[2, "Virtual Ink", 
      CellObj[JerryI`Notebook`CellObj`$1743]]}|>, 
 "Cells" -> {<|"Data" -> ".md\n# Real-time Fluid Simulation Part 3\n*Using \
Wolfram Language and WLJS*\n\nIn this notebook we will apply some \
optimizations to the code, expand the resolution and switch to immediate mode \
of graphics rendering. ", "Display" -> "codemirror", 
    "Hash" -> "7288a6ee-d91f-4719-ab72-0879f8a30230", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "73fe49db-9a23-480c-b68c-e4e3334021f7"|>, 
   <|"Data" -> "# Real-time Fluid Simulation Part 3\n*Using Wolfram Language \
and WLJS*\n\nIn this notebook we will apply some optimizations to the code, \
expand the resolution and switch to immediate mode of graphics rendering. ", 
    "Display" -> "markdown", "Hash" -> 
     "b9204145-9c38-427c-958b-800f1c4288e1", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "73fe49db-9a23-480c-b68c-e4e3334021f7"|>, 
   <|"Data" -> ".md\n## Measure and optimize \:23f1\:fe0f\nLet us try to \
estimate the time we need to do our normal calculations on *devergence*, \
*advection* and *billinear interpolation*", "Display" -> "codemirror", 
    "Hash" -> "102b3b13-ad6a-4fcc-b405-3bca2148bb9a", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "73fe49db-9a23-480c-b68c-e4e3334021f7"|>, 
   <|"Data" -> "## Measure and optimize \:23f1\:fe0f\nLet us try to estimate \
the time we need to do our normal calculations on *devergence*, *advection* \
and *billinear interpolation*", "Display" -> "markdown", 
    "Hash" -> "f7e34bd6-223b-42cf-a626-88ac5b30c89e", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "73fe49db-9a23-480c-b68c-e4e3334021f7"|>, 
   <|"Data" -> "ClearAll[advect]; ClearAll[removeDivergence]; \
ClearAll[bilinearInterpolation];\n\nadvect[v_, u_, \[Delta]t_:0.1] := \
With[{max = Length[v]}, With[{\n  take = Function[{array, x,y}, If[x >= 1 && \
x <= max && y >= 1 && y <= max, array[[x,y]], array[[1,1]] 0.]]\n},\n  Table[ \
\n  \n    With[{\n      v1 =  (*FB[*)((take[v, i-1, j] + take[v, i, \
j])(*,*)/(*,*)(2.0))(*]FB*).{1,0},\n      v2 =  (*FB[*)((take[v, i, j+1] + \
take[v, i, j])(*,*)/(*,*)(2.0))(*]FB*).{0,-1},\n      v3 =  (*FB[*)((take[v, \
i+1, j] + take[v, i, j])(*,*)/(*,*)(2.0))(*]FB*).{-1,0},\n      v4 =  \
(*FB[*)((take[v, i, j-1] + take[v, i, j])(*,*)/(*,*)(2.0))(*]FB*).{0,1},\n    \
  org = u[[i,j]]\n    },\n\n      org + (\n      \n        v1 \
(*TB[*)Piecewise[{{(*|*)take[u, i-1, j](*|*),(*|*)v1 > \
0(*|*)},{(*|*)org(*|*),(*|*)True(*|*)}}](*|*)(*1:eJxTTMoPSmNkYGAo5gESAZmpyanl\
mcWpTvkVmUxAAQBzVQdd*)(*]TB*) + v3 (*TB[*)Piecewise[{{(*|*)take[u, i+1, \
j](*|*),(*|*)v3 > \
0(*|*)},{(*|*)org(*|*),(*|*)True(*|*)}}](*|*)(*1:eJxTTMoPSmNkYGAo5gESAZmpyanl\
mcWpTvkVmUxAAQBzVQdd*)(*]TB*)  +\n        \n        v4 \
(*TB[*)Piecewise[{{(*|*)take[u, i, j-1](*|*),(*|*)v4 > \
0(*|*)},{(*|*)org(*|*),(*|*)True(*|*)}}](*|*)(*1:eJxTTMoPSmNkYGAo5gESAZmpyanl\
mcWpTvkVmUxAAQBzVQdd*)(*]TB*) + v2 (*TB[*)Piecewise[{{(*|*)take[u, i, \
j+1](*|*),(*|*)v2 > \
0(*|*)},{(*|*)org(*|*),(*|*)True(*|*)}}](*|*)(*1:eJxTTMoPSmNkYGAo5gESAZmpyanl\
mcWpTvkVmUxAAQBzVQdd*)(*]TB*)\n        \n      ) \[Delta]t\n    ]\n    \n  , \
{i, max}, {j, max}] // Chop\n ]]\n\n removeDivergence[grid_] := With[{\n  \
(*BB[*)(*safety checks, which enforce closed \
boundaries*)(*,*)(*\"1:eJxTTMoPSmNhYGAo5gcSAUX5ZZkpqSn+BSWZ+XnFaYwgCS4g4Zyfm5\
uaV+KUXxEMUqxsbm6exgSSBPGCSnNSg9mAjOCSosy8dLBYSFFpKpoKkDkeqYkpEFXBILO1sCgJScz\
MQVYCAOFrJEU=\"*)(*]BB*)\n  take = Function[{array, x,y}, If[x >= 1 && x <= \
Length[grid] && y >= 1 && y <= Length[grid], array[[x,y]], {0,0}]]\n},\n  \
MapIndexed[Function[{val, i}, \n    val + (*FB[*)((1)(*,*)/(*,*)(8.0))(*]FB*) \
(\n      ((take[grid, i[[1]] - 1, i[[2]] - 1] + take[grid, i[[1]] + 1, i[[2]] \
+ 1]).{1,1}){1,1} +\n\n      ((take[grid, i[[1]] - 1, i[[2]] + 1] + \
take[grid, i[[1]] + 1, i[[2]] - 1]).{1,-1}){1,-1} +\n\n      (take[grid, \
i[[1]]-1, i[[2]]] + take[grid, i[[1]]+1, i[[2]]] - take[grid, i[[1]], \
i[[2]]-1] - take[grid, i[[1]], i[[2]]+1]){2,-2} + take[grid, i[[1]], i[[2]]] \
(-4)\n\n    )\n  ], grid, {2}]\n]\n\nbilinearInterpolation[array_, {x0_, \
y0_}] := Module[\n  {rows, cols, x = y0, y = x0, x1, x2, y1, y2, fQ11, fQ12, \
fQ21, fQ22},\n  \n  (* Get the dimensions of the array *)\n  {rows, cols} = \
Take[Dimensions[array], 2];\n  \n  (* Clip points to the boundaries *)\n  x = \
Clip[x, {1, cols}];\n  y = Clip[y, {1, rows}];\n  \n  (* Find the bounding \
indices *)\n  x1 = Floor[x]; \n  x2 = Ceiling[x];\n  y1 = Floor[y]; \n  y2 = \
Ceiling[y];\n  \n  (* Get the values at the four corners *)\n  fQ11 = \
array[[y1, x1]];\n  fQ12 = array[[y2, x1]];\n  fQ21 = array[[y1, x2]];\n  \
fQ22 = array[[y2, x2]];\n  \n  (* Perform bilinear interpolation *)\n  If[x2 \
== x1,\n    If[y2 == y1,\n      fQ11,\n      1/(2 (y2 - y1)) * (\n        \
fQ11 (y2 - y) +\n        fQ21 (y2 - y) +\n        fQ12 (y - y1) +\n        \
fQ22 (y - y1)\n      )\n    ],\n    If[y2 == y1,\n      1/(2 (x2 - x1)) * (\n \
       fQ11 (x2 - x) +\n        fQ21 (x - x1) +\n        fQ12 (x2 - x) +\n    \
    fQ22 (x - x1)\n      ),\n      1/((x2 - x1) (y2 - y1)) * (\n        fQ11 \
(x2 - x) (y2 - y) +\n        fQ21 (x - x1) (y2 - y) +\n        fQ12 (x2 - x) \
(y - y1) +\n        fQ22 (x - x1) (y - y1)\n      )\n    ]\n  \
]\n]\n\nadvectParticles[v_, pts_, \[Delta]t_:0.02] := Map[Function[p, p + \
\[Delta]t (bilinearInterpolation[v, p])], pts]", "Display" -> "codemirror", 
    "Hash" -> "3778f713-f0ac-4279-af40-99061d14cf32", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Fade" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "73fe49db-9a23-480c-b68c-e4e3334021f7"|>, 
   <|"Data" -> ".md\nFor a single run we have", "Display" -> "codemirror", 
    "Hash" -> "6fbc5881-adf2-4d60-96b5-fa081a226fda", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "73fe49db-9a23-480c-b68c-e4e3334021f7"|>, 
   <|"Data" -> "For a single run we have", "Display" -> "markdown", 
    "Hash" -> "838f52c8-6955-404d-8745-7626d6be68c1", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "73fe49db-9a23-480c-b68c-e4e3334021f7"|>, 
   <|"Data" -> "runTest[title_] := With[{},\n  testGrid = Table[{0.,0.}, \
{i,15}, {j,15}];\n  testParticles = Table[RandomReal[{1,15}, 2], \
{i,1000}];\n\n  timing = {0., 0., 0.};\n\n  timing[[1]] = -AbsoluteTime[];\n  \
testGrid = advect[testGrid, testGrid, 0.2];\n  timing[[1]] += \
AbsoluteTime[];\n\n  timing[[2]] = -AbsoluteTime[];\n  testGrid = \
removeDivergence[testGrid];\n  timing[[2]] += AbsoluteTime[];\n\n  \
timing[[3]] = -AbsoluteTime[];\n  testParticles = advectParticles[testGrid, \
testParticles, 0.2];\n  timing[[3]] += AbsoluteTime[];\n\n  {\n    \
Style[title, Italic, 12],\n\n    Flatten /@ {\n      {Style[\"time, s\", \
Italic], Round[timing, 0.001]},\n      {Style[\"Max FPS\", Italic], Round[1 / \
(timing // Total), 1]}\n    } // TableView \n  } // \
Column\n];\n\nrunTest[\"Uncompiled\"]", "Display" -> "codemirror", 
    "Hash" -> "4aac5186-935d-4ad1-a8f6-18284ad46ac1", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Fade" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "73fe49db-9a23-480c-b68c-e4e3334021f7"|>, 
   <|"Data" -> "(*GB[*){{(*BB[*)(\"Uncompiled\")(*,*)(*\"1:eJxTTMoPSmNiYGAo5g\
cSAUX5ZZkpqSn+BSWZ+XnFaYwgCRYg4ZGfkwJRxgkkgkuKMvPSnfIritmAPM+SxJzM5EweIBOiBKQ\
hqDQnNZgNrhYsFlJUmgoAykcZ4w==\"*)(*]BB*)}(*||*),(*||*){(*VB[*)(FrontEndRef[\"\
bc61c228-82bc-43b5-a78b-b2829082984b\"])(*,*)(*\"1:eJxTTMoPSmNkYGAoZgESHvk5KR\
CeEJBwK8rPK3HNS3GtSE0uLUlMykkNVgEKJyWbGSYbGVnoWhglJeuaGCeZ6iaaWyTpJhlZGFkaALG\
FSRIAgx0VRQ==\"*)(*]VB*)}}(*]GB*)", "Display" -> "codemirror", 
    "Hash" -> "fb3892d8-c313-401d-88d4-9156b13de3bf", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "73fe49db-9a23-480c-b68c-e4e3334021f7"|>, 
   <|"Data" -> ".md\n### Compile\nMost probably for pure function JIT \
compiler should kick in, however, not all expressions are compilable in our \
case. We can make them by removing function declaraction within the `Module` \
and replacing `Piecewise` with just a normal `If` statement.\n\nIt makes our \
code looks less readable ~~and removes all magic of WL~~, but the result \
worth it", "Display" -> "codemirror", 
    "Hash" -> "19562359-11d2-4fd1-9e00-25e1ad44a30b", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "73fe49db-9a23-480c-b68c-e4e3334021f7"|>, 
   <|"Data" -> "### Compile\nMost probably for pure function JIT compiler \
should kick in, however, not all expressions are compilable in our case. We \
can make them by removing function declaraction within the `Module` and \
replacing `Piecewise` with just a normal `If` statement.\n\nIt makes our code \
looks less readable ~~and removes all magic of WL~~, but the result worth it"\
, "Display" -> "markdown", "Hash" -> "2ec7f136-52cf-4695-8b3d-6b9cb086a2f0", 
    "Invisible" -> False, "MetaOnly" -> False, "Props" -> <||>, 
    "State" -> "Idle", "Type" -> "Output", "UID" -> Null, 
    "Notebook" -> "73fe49db-9a23-480c-b68c-e4e3334021f7"|>, 
   <|"Data" -> "advect = Compile[{{v, _Real, 3}, {u, _Real, 3}, {\[Delta]t, \
_Real, 0}} , With[{max = Length[v]}, With[{\n \n},\n  Table[ \n  \n    \
With[{\n      (*BB[*)(* here we add a lot of manual check for boundary \
condition \
*)(*,*)(*\"1:eJxTTMoPSmNhYGAo5gcSAUX5ZZkpqSn+BSWZ+XnFaYwgCS4g4Zyfm5uaV+KUXxEM\
Uqxsbm6exgSSBPGCSnNSg9mAjOCSosy8dLBYSFFpKpoKkDkeqYkpEFXBILO1sCgJSczMQVYCAOFrJ\
EU=\"*)(*]BB*)\n      v1 = (*BB[*)( (*FB[*)((If[i-1 >= 1, v[[i-1, j]], \
{0.,0.}] + v[[i, \
j]])(*,*)/(*,*)(2.0))(*]FB*))(*,*)(*\"1:eJxTTMoPSmNkYGAoZgESHvk5KRAeB5AILqnMS\
XXKr0hjgskHleakFnMBGU6JydnpRfmleSlpzDDlQe5Ozvk5+UVFDGDwwR6dwcAAAAHdFiw=\"*)(*\
]BB*).{1,0},\n      v2 =  (*FB[*)((If[j+1 <= max, v[[i, j+1]], {0.,0.}] + \
v[[i, j]])(*,*)/(*,*)(2.0))(*]FB*).{0,-1},\n      v3 =  (*FB[*)((If[i+1 <= \
max, v[[i+1, j]], {0.,0.}] + v[[i, j]])(*,*)/(*,*)(2.0))(*]FB*).{-1,0},\n     \
 v4 =  (*FB[*)((If[j-1 >= 1, v[[i, j-1]], {0.,0.}] + v[[i, \
j]])(*,*)/(*,*)(2.0))(*]FB*).{0,1},\n      org = u[[i,j]]\n    },\n\n      \
org +  (\n        (*BB[*)(* here we add a lot of manual check for boundary \
condition \
*)(*,*)(*\"1:eJxTTMoPSmNhYGAo5gcSAUX5ZZkpqSn+BSWZ+XnFaYwgCS4g4Zyfm5uaV+KUXxEM\
Uqxsbm6exgSSBPGCSnNSg9mAjOCSosy8dLBYSFFpKpoKkDkeqYkpEFXBILO1sCgJSczMQVYCAOFrJ\
EU=\"*)(*]BB*)\n      \n        v1 (*BB[*)(If[v1 >0, If[i-1 >= 1, u[[i-1, \
j]], {0.,0.} ], \
org])(*,*)(*\"1:eJxTTMoPSmNkYGAoZgESHvk5KRAeB5AILqnMSXXKr0hjgskHleakFnMBGU6Jy\
dnpRfmleSlpzDDlQe5Ozvk5+UVFDGDwwR6dwcAAAAHdFiw=\"*)(*]BB*)  \n        \n      \
  + v3 (*BB[*)(If[v3>0,If[i+1 <= max, u[[i+1, j]], {0.,0.} ], \
org])(*,*)(*\"1:eJxTTMoPSmNkYGAoZgESHvk5KRAeB5AILqnMSXXKr0hjgskHleakFnMBGU6Jy\
dnpRfmleSlpzDDlQe5Ozvk5+UVFDGDwwR6dwcAAAAHdFiw=\"*)(*]BB*)+\n        \n       \
 v4 If[v4 >0, If[j-1 >= 1, u[[i, j-1]], {0.,0.} ], org] \n        \n        + \
v2 If[v2>0, If[j+1 <= max, u[[i, j+1]], {0.,0.} ], org]\n        \n      ) \
\[Delta]t \n    ]\n    \n  , {i, max}, {j, max}] // Chop\n \
]]];\n\nremoveDivergence = Compile[{{grid, _Real, 3}}, With[{\n  max = grid \
// Length\n},\n  MapIndexed[Function[{val, i}, \n    val + \
(*FB[*)((1)(*,*)/(*,*)(8.0))(*]FB*) (\n      (\n        (\n          \
(*BB[*)(* here we add a lot of manual check for boundary condition \
*)(*,*)(*\"1:eJxTTMoPSmNhYGAo5gcSAUX5ZZkpqSn+BSWZ+XnFaYwgCS4g4Zyfm5uaV+KUXxEM\
Uqxsbm6exgSSBPGCSnNSg9mAjOCSosy8dLBYSFFpKpoKkDkeqYkpEFXBILO1sCgJSczMQVYCAOFrJ\
EU=\"*)(*]BB*)\n          If[i[[1]] - 1 >= 1 && i[[1]] - 1 <= max && i[[2]] - \
1 >= 1 && i[[2]] - 1 <= max, grid[[i[[1]] - 1, i[[2]] - 1]], {0.,0.}] \n      \
    \n          + If[i[[1]] + 1 >=1 && i[[1]] + 1 <= max && i[[2]] + 1 >= 1 \
&& i[[2]] + 1 <= max, grid[[i[[1]] + 1, i[[2]] + 1]], {0.,0.}]\n        \n    \
    ).{1,1}\n        \n      ){1,1} +\n\n      (\n        (\n          \
(*BB[*)(* here we add a lot of manual check for boundary condition \
*)(*,*)(*\"1:eJxTTMoPSmNhYGAo5gcSAUX5ZZkpqSn+BSWZ+XnFaYwgCS4g4Zyfm5uaV+KUXxEM\
Uqxsbm6exgSSBPGCSnNSg9mAjOCSosy8dLBYSFFpKpoKkDkeqYkpEFXBILO1sCgJSczMQVYCAOFrJ\
EU=\"*)(*]BB*)\n          If[i[[1]] - 1 >= 1 && i[[1]] - 1 <= max && i[[2]] + \
1 >= 1 && i[[2]] + 1 <= max, grid[[i[[1]] - 1, i[[2]] + 1]], {0.,0.}]\n       \
   \n          + If[i[[1]] + 1 >= 1 && i[[1]] + 1 <= max && i[[2]] - 1 >= 1 \
&& i[[2]] - 1 <= max, grid[[i[[1]] + 1, i[[2]] - 1]], {0.,0.}]\n          \n  \
      ).{1,-1}\n        \n      ){1,-1} +\n\n      (\n        \
(*BB[*)(If[i[[1]]-1 >= 1 && i[[1]]-1 <= max, grid[[i[[1]]-1, i[[2]] ]], \
{0.,0.}])(*,*)(*\"1:eJxTTMoPSmNkYGAoZgESHvk5KRAeB5AILqnMSXXKr0hjgskHleakFnMBG\
U6JydnpRfmleSlpzDDlQe5Ozvk5+UVFDGDwwR6dwcAAAAHdFiw=\"*)(*]BB*)\n        \n    \
    + If[i[[1]]+1 >= 1 && i[[1]]+1 <= max, grid[[ i[[1]]+1, i[[2]] ]], \
{0.,0.}]\n        \n        - If[i[[2]]-1 >= 1 && i[[2]]-1 <= max, grid[[ \
i[[1]], i[[2]]-1 ]], {0.,0.}]\n        \n        - If[i[[2]]+1 >= 1 && \
i[[2]]+1 <= max, grid[[i[[1]], i[[2]]+1]], {0.,0.}]\n        \n      ){2,-2} \
\n        \n        + grid[[ i[[1]], i[[2]] ]] (-4)\n\n    )\n  ], grid, \
{2}]\n]];\n\nbilinearInterpolation = Compile[{{array, _Real, 3}, {v, _Real, \
1}}, \n(*BB[*)(* no big changes here \
*)(*,*)(*\"1:eJxTTMoPSmNhYGAo5gcSAUX5ZZkpqSn+BSWZ+XnFaYwgCS4g4Zyfm5uaV+KUXxEM\
Uqxsbm6exgSSBPGCSnNSg9mAjOCSosy8dLBYSFFpKpoKkDkeqYkpEFXBILO1sCgJSczMQVYCAOFrJ\
EU=\"*)(*]BB*)\nModule[\n  {rows, cols, x = v[[2]], y = v[[1]], x1, x2, y1, \
y2, fQ11, fQ12, fQ21, fQ22},\n  \n  (* Get the dimensions of the array *)\n  \
{rows, cols} = {Length[array], Length[array]};\n  \n  (* Clip points to the \
boundaries *)\n  x = Clip[x, {1, cols}];\n  y = Clip[y, {1, rows}];\n  \n  (* \
Find the bounding indices *)\n  x1 = Floor[x]; \n  x2 = Ceiling[x];\n  y1 = \
Floor[y]; \n  y2 = Ceiling[y];\n  \n  (* Get the values at the four corners \
*)\n  fQ11 = array[[y1, x1]];\n  fQ12 = array[[y2, x1]];\n  fQ21 = array[[y1, \
x2]];\n  fQ22 = array[[y2, x2]];\n  \n  (* Perform bilinear interpolation \
*)\n  If[x2 == x1,\n    If[y2 == y1,\n      fQ11,\n      1/(2 (y2 - y1)) * \
(\n        fQ11 (y2 - y) +\n        fQ21 (y2 - y) +\n        fQ12 (y - y1) \
+\n        fQ22 (y - y1)\n      )\n    ],\n    If[y2 == y1,\n      1/(2 (x2 - \
x1)) * (\n        fQ11 (x2 - x) +\n        fQ21 (x - x1) +\n        fQ12 (x2 \
- x) +\n        fQ22 (x - x1)\n      ),\n      1/((x2 - x1) (y2 - y1)) * (\n  \
      fQ11 (x2 - x) (y2 - y) +\n        fQ21 (x - x1) (y2 - y) +\n        \
fQ12 (x2 - x) (y - y1) +\n        fQ22 (x - x1) (y - y1)\n      )\n    ]\n  \
]\n]];    ", "Display" -> "codemirror", 
    "Hash" -> "5d76df8d-c1e8-4454-86a2-a735271062f8", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Fade" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "73fe49db-9a23-480c-b68c-e4e3334021f7"|>, 
   <|"Data" -> ".md\nLet us test it again!", "Display" -> "codemirror", 
    "Hash" -> "26fb6031-cae1-43e0-917d-e08093e74829", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "73fe49db-9a23-480c-b68c-e4e3334021f7"|>, 
   <|"Data" -> "Let us test it again!", "Display" -> "markdown", 
    "Hash" -> "9938cd8d-d7aa-46e6-a792-672e9c37133d", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "73fe49db-9a23-480c-b68c-e4e3334021f7"|>, 
   <|"Data" -> "runTest[\"Compiled\"]", "Display" -> "codemirror", 
    "Hash" -> "16b21fa2-abb0-4b08-915e-d00f25347ec6", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "73fe49db-9a23-480c-b68c-e4e3334021f7"|>, 
   <|"Data" -> "(*GB[*){{(*BB[*)(\"Compiled\")(*,*)(*\"1:eJxTTMoPSmNiYGAo5gcS\
AUX5ZZkpqSn+BSWZ+XnFaYwgCRYg4ZGfkwJRxgkkgkuKMvPSnfIritmAPM+SxJzM5EweIBOiBKQhq\
DQnNZgNrhYsFlJUmgoAykcZ4w==\"*)(*]BB*)}(*||*),(*||*){(*VB[*)(FrontEndRef[\"69\
5430be-0583-497f-8116-2c88bdb6b06d\"])(*,*)(*\"1:eJxTTMoPSmNkYGAoZgESHvk5KRCe\
EJBwK8rPK3HNS3GtSE0uLUlMykkNVgEKm1mamhgbJKXqGphaGOuaWJqn6VoYGprpGiVbWCSlJJklG\
ZilAAByCRUe\"*)(*]VB*)}}(*]GB*)", "Display" -> "codemirror", 
    "Hash" -> "ecbfb280-ec3c-4653-8c47-9f1b4fb63496", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "73fe49db-9a23-480c-b68c-e4e3334021f7"|>, 
   <|"Data" -> ".md\n\n<span style=\"color:red\"><b>x5</b> time \
faster</span>\n\nHowever, one should note, that this is still not a machine \
code, but rather byte-code of Wolfram Kernel internal command representation \
or something similar to that.", "Display" -> "codemirror", 
    "Hash" -> "5dd16685-85e1-4905-9d81-53fb97862520", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "73fe49db-9a23-480c-b68c-e4e3334021f7"|>, 
   <|"Data" -> "<span style=\"color:red\"><b >x5</b> time \
faster</span>\n\nHowever, one should note, that this is still not a machine \
code, but rather byte-code of Wolfram Kernel internal command representation \
or something similar to that.", "Display" -> "markdown", 
    "Hash" -> "d875fe73-ccb1-47dd-aa05-746e97bc25fb", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "73fe49db-9a23-480c-b68c-e4e3334021f7"|>, 
   <|"Data" -> ".md\nOne can go futher and force WL to compile it to C and \
then link automatically. __This will probably require to have `gcc` or \
`clang` installed on your system__", "Display" -> "codemirror", 
    "Hash" -> "e4a8ce12-8bbb-4ac8-a0f7-a2b586d9719c", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "73fe49db-9a23-480c-b68c-e4e3334021f7"|>, 
   <|"Data" -> "One can go futher and force WL to compile it to C and then \
link automatically. __This will probably require to have `gcc` or `clang` \
installed on your system__", "Display" -> "markdown", 
    "Hash" -> "5d3caba6-6dc5-48a0-8ea9-19a02dce22d8", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "73fe49db-9a23-480c-b68c-e4e3334021f7"|>, 
   <|"Data" -> "advect = Compile[{{v, _Real, 3}, {u, _Real, 3}, {\[Delta]t, \
_Real, 0}} , With[{max = Length[v]}, With[{\n \n},\n  Table[ \n  \n    \
With[{\n      v1 =  (*FB[*)((If[i-1 >= 1, v[[i-1, j]], {0.,0.}] + v[[i, \
j]])(*,*)/(*,*)(2.0))(*]FB*).{1,0},\n      v2 =  (*FB[*)((If[j+1 <= max, \
v[[i, j+1]], {0.,0.}] + v[[i, j]])(*,*)/(*,*)(2.0))(*]FB*).{0,-1},\n      v3 \
=  (*FB[*)((If[i+1 <= max, v[[i+1, j]], {0.,0.}] + v[[i, \
j]])(*,*)/(*,*)(2.0))(*]FB*).{-1,0},\n      v4 =  (*FB[*)((If[j-1 >= 1, v[[i, \
j-1]], {0.,0.}] + v[[i, j]])(*,*)/(*,*)(2.0))(*]FB*).{0,1},\n      org = \
u[[i,j]]\n    },\n\n      org +  (\n      \n        v1 If[v1 >0, If[i-1 >= 1, \
u[[i-1, j]], {0.,0.} ], org]  + v3 If[v3>0,If[i+1 <= max, u[[i+1, j]], \
{0.,0.} ], org]+\n        \n        v4 If[v4 >0, If[j-1 >= 1, u[[i, j-1]], \
{0.,0.} ], org] + v2 If[v2>0, If[j+1 <= max, u[[i, j+1]], {0.,0.} ], org]\n   \
     \n      ) \[Delta]t \n    ]\n    \n  , {i, max}, {j, max}] // Chop\n ]] \
, CompilationOptions -> {\"InlineExternalDefinitions\" -> True}, \n    \
\"CompilationTarget\" -> \"C\", \"RuntimeOptions\" -> \
\"Speed\"];\n\nremoveDivergence = Compile[{{grid, _Real, 3}}, With[{\n  max = \
grid // Length\n},\n  MapIndexed[Function[{val, i}, \n    val + \
(*FB[*)((1)(*,*)/(*,*)(8.0))(*]FB*) (\n      (\n        (\n          \
If[i[[1]] - 1 >= 1 && i[[1]] - 1 <= max && i[[2]] - 1 >= 1 && i[[2]] - 1 <= \
max, grid[[i[[1]] - 1, i[[2]] - 1]], {0.,0.}] \n          \n          + \
If[i[[1]] + 1 >=1 && i[[1]] + 1 <= max && i[[2]] + 1 >= 1 && i[[2]] + 1 <= \
max, grid[[i[[1]] + 1, i[[2]] + 1]], {0.,0.}]\n        \n        ).{1,1}\n    \
    \n      ){1,1} +\n\n      (\n        (\n          If[i[[1]] - 1 >= 1 && \
i[[1]] - 1 <= max && i[[2]] + 1 >= 1 && i[[2]] + 1 <= max, grid[[i[[1]] - 1, \
i[[2]] + 1]], {0.,0.}]\n          \n          + If[i[[1]] + 1 >= 1 && i[[1]] \
+ 1 <= max && i[[2]] - 1 >= 1 && i[[2]] - 1 <= max, grid[[i[[1]] + 1, i[[2]] \
- 1]], {0.,0.}]\n          \n        ).{1,-1}\n        \n      ){1,-1} +\n\n  \
    (\n        If[i[[1]]-1 >= 1 && i[[1]]-1 <= max, grid[[i[[1]]-1, i[[2]] \
]], {0.,0.}]\n        \n        + If[i[[1]]+1 >= 1 && i[[1]]+1 <= max, grid[[ \
i[[1]]+1, i[[2]] ]], {0.,0.}]\n        \n        - If[i[[2]]-1 >= 1 && \
i[[2]]-1 <= max, grid[[ i[[1]], i[[2]]-1 ]], {0.,0.}]\n        \n        - \
If[i[[2]]+1 >= 1 && i[[2]]+1 <= max, grid[[i[[1]], i[[2]]+1]], {0.,0.}]\n     \
   \n      ){2,-2} \n        \n        + grid[[ i[[1]], i[[2]] ]] (-4)\n\n    \
)\n  ], grid, {2}]\n], CompilationOptions -> {\"InlineExternalDefinitions\" \
-> True}, \n    \"CompilationTarget\" -> \"C\",   \"RuntimeOptions\" -> \
\"Speed\"];\n\n\nbilinearInterpolation = Compile[{{array, _Real, 3}, {v, \
_Real, 1}}, Module[\n  {rows, cols, x = v[[2]], y = v[[1]], x1, x2, y1, y2, \
fQ11, fQ12, fQ21, fQ22},\n  \n  (* Get the dimensions of the array *)\n  \
{rows, cols} = {Length[array], Length[array]};\n  \n  (* Clip points to the \
boundaries *)\n  x = Clip[x, {1, cols}];\n  y = Clip[y, {1, rows}];\n  \n  (* \
Find the bounding indices *)\n  x1 = Floor[x]; \n  x2 = Ceiling[x];\n  y1 = \
Floor[y]; \n  y2 = Ceiling[y];\n  \n  (* Get the values at the four corners \
*)\n  fQ11 = array[[y1, x1]];\n  fQ12 = array[[y2, x1]];\n  fQ21 = array[[y1, \
x2]];\n  fQ22 = array[[y2, x2]];\n  \n  (* Perform bilinear interpolation \
*)\n  If[x2 == x1,\n    If[y2 == y1,\n      fQ11,\n      1/(2 (y2 - y1)) * \
(\n        fQ11 (y2 - y) +\n        fQ21 (y2 - y) +\n        fQ12 (y - y1) \
+\n        fQ22 (y - y1)\n      )\n    ],\n    If[y2 == y1,\n      1/(2 (x2 - \
x1)) * (\n        fQ11 (x2 - x) +\n        fQ21 (x - x1) +\n        fQ12 (x2 \
- x) +\n        fQ22 (x - x1)\n      ),\n      1/((x2 - x1) (y2 - y1)) * (\n  \
      fQ11 (x2 - x) (y2 - y) +\n        fQ21 (x - x1) (y2 - y) +\n        \
fQ12 (x2 - x) (y - y1) +\n        fQ22 (x - x1) (y - y1)\n      )\n    ]\n  \
]\n] , CompilationOptions -> {\"InlineExternalDefinitions\" -> True}, \n    \
\"CompilationTarget\" -> \"C\",\"RuntimeOptions\" -> \"Speed\"];  ", 
    "Display" -> "codemirror", "Hash" -> 
     "9da84e82-862e-4190-9ad7-6d18bf5fc82b", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"InitGroup" -> True, "Fade" -> True|>, 
    "State" -> "Idle", "Type" -> "Input", "UID" -> Null, 
    "Notebook" -> "73fe49db-9a23-480c-b68c-e4e3334021f7"|>, 
   <|"Data" -> ".md\nNow we have new results", "Display" -> "codemirror", 
    "Hash" -> "7d1a3bda-44ff-43aa-944e-a9d3192ea308", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "73fe49db-9a23-480c-b68c-e4e3334021f7"|>, 
   <|"Data" -> "Now we have new results", "Display" -> "markdown", 
    "Hash" -> "38fcfb60-4946-4735-9f2e-75dc4083cdbf", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "73fe49db-9a23-480c-b68c-e4e3334021f7"|>, 
   <|"Data" -> "runTest[\"Compiled + C\"]", "Display" -> "codemirror", 
    "Hash" -> "4ae7a2ba-842d-4526-86a8-2961864ed5f1", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "73fe49db-9a23-480c-b68c-e4e3334021f7"|>, 
   <|"Data" -> "(*GB[*){{(*BB[*)(\"Compiled + \
C\")(*,*)(*\"1:eJxTTMoPSmNiYGAo5gcSAUX5ZZkpqSn+BSWZ+XnFaYwgCRYg4ZGfkwJRxgkkgk\
uKMvPSnfIritmAPM+SxJzM5EweIBOiBKQhqDQnNZgNrhYsFlJUmgoAykcZ4w==\"*)(*]BB*)}(*|\
|*),(*||*){(*VB[*)(FrontEndRef[\"09dd1aaf-1abc-48e4-8407-2d04783abf9c\"])(*,*\
)(*\"1:eJxTTMoPSmNkYGAoZgESHvk5KRCeEJBwK8rPK3HNS3GtSE0uLUlMykkNVgEKG1impBgmJq\
bpGiYmJeuaWKSa6FqYGJjrGqUYmJhbGCcmpVkmAwCN5RX9\"*)(*]VB*)}}(*]GB*)", 
    "Display" -> "codemirror", "Hash" -> 
     "7a260453-994b-4ba2-a652-a0b41ff83253", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "73fe49db-9a23-480c-b68c-e4e3334021f7"|>, 
   <|"Data" -> ".md\n\n<span style=\"color:red\"><b>x6</b> time \
faster</span>\n\nWe gained a bit of speed; we will see more difference once \
the grid is expanded and more iterations are needed.", 
    "Display" -> "codemirror", "Hash" -> 
     "43e44ef1-c7a5-48f0-a11c-67f2ec2f337f", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "73fe49db-9a23-480c-b68c-e4e3334021f7"|>, 
   <|"Data" -> "<span style=\"color:red\"><b >x6</b> time faster</span>\n\nWe \
gained a bit of speed; we will see more difference once the grid is expanded \
and more iterations are needed.", "Display" -> "markdown", 
    "Hash" -> "4b3aa8c7-abd2-4e08-8365-b06b2da80303", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "73fe49db-9a23-480c-b68c-e4e3334021f7"|>, 
   <|"Data" -> ".md\n## Immediate Graphics Mode\nThis only means, that we \
will do all rendering of our primitives by ourself. The graphics API will \
only display the rendered frame we crafted on Wolfram Kernel. The last also \
meant we migh have to transfer much more data over WebSockets to \
frontend.\n\nLet me show you a simple example", "Display" -> "codemirror", 
    "Hash" -> "d8d0a920-229f-4a73-9612-a181056108ac", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "73fe49db-9a23-480c-b68c-e4e3334021f7"|>, 
   <|"Data" -> "## Immediate Graphics Mode\nThis only means, that we will do \
all rendering of our primitives by ourself. The graphics API will only \
display the rendered frame we crafted on Wolfram Kernel. The last also meant \
we migh have to transfer much more data over WebSockets to frontend.\n\nLet \
me show you a simple example", "Display" -> "markdown", 
    "Hash" -> "928ff124-4a15-4a2a-8312-d9f759f0f651", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "73fe49db-9a23-480c-b68c-e4e3334021f7"|>, 
   <|"Data" -> "Table[Clip[((*SpB[*)Power[x(*|*),(*|*)2](*]SpB*) + \
(*SpB[*)Power[y(*|*),(*|*)2](*]SpB*)) - \
(*SpB[*)Power[10(*|*),(*|*)2](*]SpB*), {0, 1}], {x,-10,10, 0.5}, {y,-10,10, \
0.5}];\nImage[%, Magnification -> 5, Antialiasing->False]", 
    "Display" -> "codemirror", "Hash" -> 
     "6cf0317c-09c9-4e99-9515-ef4741b27d27", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "73fe49db-9a23-480c-b68c-e4e3334021f7"|>, 
   <|"Data" -> "(*VB[*)(FrontEndRef[\"a38a8802-948f-46d8-9f9a-33a0bf6828dd\"]\
)(*,*)(*\"1:eJxTTMoPSmNkYGAoZgESHvk5KRCeEJBwK8rPK3HNS3GtSE0uLUlMykkNVgEKJxpbJ\
FpYGBjpWppYpOmamKVY6FqmWSbqGhsnGiSlmVkYWaSkAAB9LBWL\"*)(*]VB*)", 
    "Display" -> "codemirror", "Hash" -> 
     "9e248deb-85e1-4a1a-8d61-65efe29b1d70", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "73fe49db-9a23-480c-b68c-e4e3334021f7"|>, 
   <|"Data" -> ".md\nHere we used so-called SDF method for drawing graphics. \
We iterate over all posiitons of pixels in reactangle, produce brightness \
values and then send them to `Image`, which copies them into a texture on \
GPU.", "Display" -> "codemirror", "Hash" -> 
     "8a9d8a2d-3bb3-4fcf-bd27-edd4e7c1fd59", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "73fe49db-9a23-480c-b68c-e4e3334021f7"|>, 
   <|"Data" -> "Here we used so-called SDF method for drawing graphics. We \
iterate over all posiitons of pixels in reactangle, produce brightness values \
and then send them to `Image`, which copies them into a texture on GPU.", 
    "Display" -> "markdown", "Hash" -> 
     "ec315b03-4240-45dc-b84f-40cbdde35320", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "73fe49db-9a23-480c-b68c-e4e3334021f7"|>, 
   <|"Data" -> 
     ".md\nWe can use all 4 (RGBA) color channels to draw our picture", 
    "Display" -> "codemirror", "Hash" -> 
     "781993a9-2825-421f-ba99-930c710fb690", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "73fe49db-9a23-480c-b68c-e4e3334021f7"|>, 
   <|"Data" -> "We can use all 4 (RGBA) color channels to draw our picture", 
    "Display" -> "markdown", "Hash" -> 
     "8c68541f-9d40-40f1-a2bf-06d072a3e6ad", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "73fe49db-9a23-480c-b68c-e4e3334021f7"|>, 
   <|"Data" -> "Table[{\n  Clip[((*SpB[*)Power[x(*|*),(*|*)2](*]SpB*) + \
(*SpB[*)Power[y(*|*),(*|*)2](*]SpB*)) - \
(*SpB[*)Power[10(*|*),(*|*)2](*]SpB*), {0, 1}],\n  \
Clip[((*SpB[*)Power[x(*|*),(*|*)2](*]SpB*) + \
(*SpB[*)Power[y(*|*),(*|*)2](*]SpB*)) - (*SpB[*)Power[5(*|*),(*|*)2](*]SpB*), \
{0, 1}],\n  Clip[((*SpB[*)Power[x(*|*),(*|*)2](*]SpB*) + \
(*SpB[*)Power[y(*|*),(*|*)2](*]SpB*)) - (*SpB[*)Power[3(*|*),(*|*)2](*]SpB*), \
{0, 1}],\n  Clip[((*SpB[*)Power[x(*|*),(*|*)2](*]SpB*) + \
(*SpB[*)Power[y(*|*),(*|*)2](*]SpB*)) - (*SpB[*)Power[1(*|*),(*|*)2](*]SpB*), \
{0, 1}]\n}, {x,-10,10, 0.5}, {y,-10,10, 0.5}];\nImage[%, Magnification -> 5, \
Antialiasing->False]", "Display" -> "codemirror", 
    "Hash" -> "68edadf2-03e7-47c6-9ddb-fd75ee0ff1f7", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "73fe49db-9a23-480c-b68c-e4e3334021f7"|>, 
   <|"Data" -> "(*VB[*)(FrontEndRef[\"37dbfc31-9a78-43de-bb3d-a7828a5639f6\"]\
)(*,*)(*\"1:eJxTTMoPSmNkYGAoZgESHvk5KRCeEJBwK8rPK3HNS3GtSE0uLUlMykkNVgEKG5unJ\
KUlGxvqWiaaW+iaGKek6iYlGafoAnlGFommZsaWaWYAjRsV4g==\"*)(*]VB*)", 
    "Display" -> "codemirror", "Hash" -> 
     "2a261f4b-bff3-4147-8281-d86eb9067f03", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "73fe49db-9a23-480c-b68c-e4e3334021f7"|>, 
   <|"Data" -> ".md\n__For the best performance__ use `NumericArray`, since \
it packs all numberic data to a more compact form", 
    "Display" -> "codemirror", "Hash" -> 
     "9967b723-46ad-4449-8f59-b1c574895c07", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "73fe49db-9a23-480c-b68c-e4e3334021f7"|>, 
   <|"Data" -> "__For the best performance__ use `NumericArray`, since it \
packs all numberic data to a more compact form", "Display" -> "markdown", 
    "Hash" -> "eb96ef04-9e47-4218-b410-43102d9b799e", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "73fe49db-9a23-480c-b68c-e4e3334021f7"|>, 
   <|"Data" -> "Table[{\n  Clip[((*SpB[*)Power[x(*|*),(*|*)2](*]SpB*) + \
(*SpB[*)Power[y(*|*),(*|*)2](*]SpB*)) - \
(*SpB[*)Power[10(*|*),(*|*)2](*]SpB*), {0, 1}],\n  \
Clip[((*SpB[*)Power[x(*|*),(*|*)2](*]SpB*) + \
(*SpB[*)Power[y(*|*),(*|*)2](*]SpB*)) - (*SpB[*)Power[5(*|*),(*|*)2](*]SpB*), \
{0, 1}],\n  Clip[((*SpB[*)Power[x(*|*),(*|*)2](*]SpB*) + \
(*SpB[*)Power[y(*|*),(*|*)2](*]SpB*)) - (*SpB[*)Power[3(*|*),(*|*)2](*]SpB*), \
{0, 1}],\n  Clip[((*SpB[*)Power[x(*|*),(*|*)2](*]SpB*) + \
(*SpB[*)Power[y(*|*),(*|*)2](*]SpB*)) - (*SpB[*)Power[1(*|*),(*|*)2](*]SpB*), \
{0, 1}]\n}, {x,-10,10, 0.5}, {y,-10,10, 0.5}];\nImage[NumericArray[%, \
\"Real32\"], Magnification -> 5, Antialiasing->False]", 
    "Display" -> "codemirror", "Hash" -> 
     "a6040353-179c-4fa6-aca7-9374b3a26514", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "73fe49db-9a23-480c-b68c-e4e3334021f7"|>, <|"Data" -> ".md\n---", 
    "Display" -> "codemirror", "Hash" -> 
     "f753e852-130c-405e-abd1-87c6651974d6", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "73fe49db-9a23-480c-b68c-e4e3334021f7"|>, 
   <|"Data" -> "---", "Display" -> "markdown", 
    "Hash" -> "8c68f845-7b27-435a-9d97-aac6531e8cd6", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "73fe49db-9a23-480c-b68c-e4e3334021f7"|>, 
   <|"Data" -> ".md\n### Dynamic image\nThere is a usual way on how to update \
our `Image` - using `Offload` technique as we did before\n\n> \
<b>TIP</b>\nReal values takes more time to deserialize on frontend, we will \
use `UnsignedInteger8`", "Display" -> "codemirror", 
    "Hash" -> "1e1aa886-e5ec-40e2-bd4e-d6bf20c52b66", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "73fe49db-9a23-480c-b68c-e4e3334021f7"|>, 
   <|"Data" -> "### Dynamic image\nThere is a usual way on how to update our \
`Image` - using `Offload` technique as we did before\n\n><b >TIP</b>\nReal \
values takes more time to deserialize on frontend, we will use \
`UnsignedInteger8`", "Display" -> "markdown", 
    "Hash" -> "9bc98158-ead3-44e5-b05e-71f269f52e7c", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "73fe49db-9a23-480c-b68c-e4e3334021f7"|>, 
   <|"Data" -> "serialize[arr_List] := NumericArray[arr, \
\"UnsignedInteger8\", \"ClipAndRound\"];\n\nbuffer = Table[255.0 {\n  \
Clip[((*SpB[*)Power[x(*|*),(*|*)2](*]SpB*) + \
(*SpB[*)Power[y(*|*),(*|*)2](*]SpB*)) - \
(*SpB[*)Power[10(*|*),(*|*)2](*]SpB*), {0, 1}],\n  \
Clip[((*SpB[*)Power[x(*|*),(*|*)2](*]SpB*) + \
(*SpB[*)Power[y(*|*),(*|*)2](*]SpB*)) - (*SpB[*)Power[5(*|*),(*|*)2](*]SpB*), \
{0, 1}],\n  Clip[((*SpB[*)Power[x(*|*),(*|*)2](*]SpB*) + \
(*SpB[*)Power[y(*|*),(*|*)2](*]SpB*)) - (*SpB[*)Power[3(*|*),(*|*)2](*]SpB*), \
{0, 1}],\n  Clip[((*SpB[*)Power[x(*|*),(*|*)2](*]SpB*) + \
(*SpB[*)Power[y(*|*),(*|*)2](*]SpB*)) - (*SpB[*)Power[1(*|*),(*|*)2](*]SpB*), \
{0, 1}]\n}, {x,-10,10, 0.5}, {y,-10,10, 0.5}] // serialize;\n\nImage[buffer \
// Offload, \"Byte\", Magnification -> 5, Antialiasing->False]", 
    "Display" -> "codemirror", "Hash" -> 
     "6f7e3a9c-fdea-4f80-b7af-9152dc302506", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "73fe49db-9a23-480c-b68c-e4e3334021f7"|>, 
   <|"Data" -> "(*VB[*)(FrontEndRef[\"e671691c-98b4-40b0-a900-3da0cd9b8b92\"]\
)(*,*)(*\"1:eJxTTMoPSmNkYGAoZgESHvk5KRCeEJBwK8rPK3HNS3GtSE0uLUlMykkNVgEKp5qZG\
5pZGibrWlokmeiaGCQZ6CZaGhjoGqckGiSnWCZZJFkaAQB7mxVv\"*)(*]VB*)", 
    "Display" -> "codemirror", "Hash" -> 
     "e977d9b7-92ea-4b36-b4ac-7e24c5df2096", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "73fe49db-9a23-480c-b68c-e4e3334021f7"|>, 
   <|"Data" -> ".md\nNow we can easily update our image by setting new values \
to `buffer`", "Display" -> "codemirror", 
    "Hash" -> "8ee9ab01-d5f6-498b-95d8-e0b76880ec6a", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "73fe49db-9a23-480c-b68c-e4e3334021f7"|>, 
   <|"Data" -> 
     "Now we can easily update our image by setting new values to `buffer`", 
    "Display" -> "markdown", "Hash" -> 
     "91fdfd2b-fa9e-4e69-a320-f732c8c93272", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "73fe49db-9a23-480c-b68c-e4e3334021f7"|>, 
   <|"Data" -> "t := AbsoluteTime[];\n\ntask = SetInterval[\n  buffer = \
Table[255.0 {\n    Clip[((*SpB[*)Power[(x + Cos[t])(*|*),(*|*)2](*]SpB*) + \
(*SpB[*)Power[(y - Sin[t])(*|*),(*|*)2](*]SpB*)) - \
(*SpB[*)Power[3(*|*),(*|*)2](*]SpB*), {0, 1}],\n    Clip[((*SpB[*)Power[(x - \
Cos[t])(*|*),(*|*)2](*]SpB*) + (*SpB[*)Power[(y - \
Sin[t])(*|*),(*|*)2](*]SpB*)) - (*SpB[*)Power[5(*|*),(*|*)2](*]SpB*), {0, \
1}],\n    Clip[((*SpB[*)Power[(x + Cos[t])(*|*),(*|*)2](*]SpB*) + \
(*SpB[*)Power[(y + Sin[t])(*|*),(*|*)2](*]SpB*)) - \
(*SpB[*)Power[10(*|*),(*|*)2](*]SpB*), {0, 1}],\n    Clip[((*SpB[*)Power[(x - \
Cos[t])(*|*),(*|*)2](*]SpB*) + (*SpB[*)Power[(y + \
Sin[t])(*|*),(*|*)2](*]SpB*)) - (*SpB[*)Power[1(*|*),(*|*)2](*]SpB*), {0, \
1}]\n  }, {x,-10,10, 0.5}, {y,-10,10, 0.5}] // serialize;\n, \
100];\n\nSetTimeout[TaskRemove[task], 10000];", "Display" -> "codemirror", 
    "Hash" -> "f8c2fc4f-f0a6-43e5-a137-c474d6a6a98d", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "73fe49db-9a23-480c-b68c-e4e3334021f7"|>, 
   <|"Data" -> ".md\nIf you made that far, **congratulations** \:2b50\:fe0f \
Now you have learned how to do the software rendering. \n\n> Please, never do \
*software rendering*. It is slow and basically is a waste of resources of \
your CPU, which was not designed for rendering graphics. Use it only for \
educational purposes, small images or complex calulations, which are not \
possible to do using GPU.", "Display" -> "codemirror", 
    "Hash" -> "f3a285ff-bdfd-4683-a00f-881b57fea541", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "73fe49db-9a23-480c-b68c-e4e3334021f7"|>, 
   <|"Data" -> "If you made that far, **congratulations** \:2b50\:fe0f Now \
you have learned how to do the software rendering. \n\n> Please, never do \
*software rendering*. It is slow and basically is a waste of resources of \
your CPU, which was not designed for rendering graphics. Use it only for \
educational purposes, small images or complex calulations, which are not \
possible to do using GPU.", "Display" -> "markdown", 
    "Hash" -> "22a9ec30-ff84-402c-8656-68ddbe448c2b", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "73fe49db-9a23-480c-b68c-e4e3334021f7"|>, 
   <|"Data" -> ".md\n## Virtual Ink\nTo visualize velocity field, one can \
actually use another scalar field instead of 1000 probing balls. This scalar \
field is easy to imagine: ink \:270d\|01f3fc or dye or goo, which fell into a \
water and now is carried by the steams of \
fluid\n\n$$\n\\\\frac{\\\\partial{u_{ink}}}{\\\\partial{t}} + \
(\\\\mathbf{v}\\\\cdot \\\\nabla) u_{ink} = 0\n$$\n\nWe already know how to \
solve advection equation. Our function `advect` is used for modelling the \
momentum of fluid, which is a 2D vector field... Why not then to use __two \
kinds of ink__?\n", "Display" -> "codemirror", 
    "Hash" -> "a77ecd52-117f-41a8-ae01-78535c78d66d", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "73fe49db-9a23-480c-b68c-e4e3334021f7"|>, 
   <|"Data" -> "## Virtual Ink\nTo visualize velocity field, one can actually \
use another scalar field instead of 1000 probing balls. This scalar field is \
easy to imagine: ink \:270d\|01f3fc or dye or goo, which fell into a water \
and now is carried by the steams of \
fluid\n\n$$\n\\\\frac{\\\\partial{u_{ink}}}{\\\\partial{t}} + \
(\\\\mathbf{v}\\\\cdot \\\\nabla) u_{ink} = 0\n$$\n\nWe already know how to \
solve advection equation. Our function `advect` is used for modelling the \
momentum of fluid, which is a 2D vector field... Why not then to use __two \
kinds of ink__?", "Display" -> "markdown", 
    "Hash" -> "23be1a82-702d-4410-957a-5c63e96a4a02", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "73fe49db-9a23-480c-b68c-e4e3334021f7"|>, 
   <|"Data" -> "ink = Table[{0.,0.}, {i,50}, {j,50}];\n\n(*BB[*)(* transform \
to \"byte\" format \
*)(*,*)(*\"1:eJxTTMoPSmNhYGAo5gcSAUX5ZZkpqSn+BSWZ+XnFaYwgCS4g4Zyfm5uaV+KUXxEM\
Uqxsbm6exgSSBPGCSnNSg9mAjOCSosy8dLBYSFFpKpoKkDkeqYkpEFXBILO1sCgJSczMQVYCAOFrJ\
EU=\"*)(*]BB*)\nnink = NumericArray[Map[255.0 {#[[1]], 0., #[[2]]} &, ink, \
{2}], \"UnsignedInteger8\", \"ClipAndRound\"];", "Display" -> "codemirror", 
    "Hash" -> "87b65963-4580-4c9f-a471-b67a3ac3ab47", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"InitGroup" -> True|>, 
    "State" -> "Idle", "Type" -> "Input", "UID" -> Null, 
    "Notebook" -> "73fe49db-9a23-480c-b68c-e4e3334021f7"|>, 
   <|"Data" -> ".md\nThen we can directly visualize `nink` scalar field \
instead of drawing many many arrows and dots. In this way we will utilize \
fully our expensive software rendering.", "Display" -> "codemirror", 
    "Hash" -> "c686574f-7bdf-4edd-9431-b20895a9d02e", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "73fe49db-9a23-480c-b68c-e4e3334021f7"|>, 
   <|"Data" -> "Then we can directly visualize `nink` scalar field instead of \
drawing many many arrows and dots. In this way we will utilize fully our \
expensive software rendering.", "Display" -> "markdown", 
    "Hash" -> "0387aa83-86e5-4447-b9dc-8780472d346b", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "73fe49db-9a23-480c-b68c-e4e3334021f7"|>, 
   <|"Data" -> ".md\n__TL;DR__ Final program", "Display" -> "codemirror", 
    "Hash" -> "3b597a64-62a6-486a-aa38-aa8ff19de256", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "73fe49db-9a23-480c-b68c-e4e3334021f7"|>, 
   <|"Data" -> "__TL;DR__ Final program", "Display" -> "markdown", 
    "Hash" -> "27c8b1f8-781e-4bcb-bb3b-bb80e8328431", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "73fe49db-9a23-480c-b68c-e4e3334021f7"|>, 
   <|"Data" -> "vgrid = Table[{0.,0.}, {i,50}, {j,50}];\n\nink = 0. \
ink;\nnink = NumericArray[Map[255.0 {#[[1]], 0., #[[2]]} &, ink, {2}], \
\"UnsignedInteger8\", \"ClipAndRound\"];\n\ndest = {0,0};\ncink = \
{1.0,0.2};\nvfps = 0;\n\nWith[{\n  win = CurrentWindow[], \n  currentCell = \
ResultCell[]\n},\n\n  EventHandler[win, {\"Closed\" -> Function[Null,\n    \
Delete[currentCell] (*BB[*)(* remove output cell if a notebook has been \
closed \
*)(*,*)(*\"1:eJxTTMoPSmNhYGAo5gcSAUX5ZZkpqSn+BSWZ+XnFaYwgCS4g4Zyfm5uaV+KUXxEM\
Uqxsbm6exgSSBPGCSnNSg9mAjOCSosy8dLBYSFFpKpoKkDkeqYkpEFXBILO1sCgJSczMQVYCAOFrJ\
EU=\"*)(*]BB*)\n    (*BB[*)(* this will prevent the animation running \
uncontrollably on the next start \
*)(*,*)(*\"1:eJxTTMoPSmNhYGAo5gcSAUX5ZZkpqSn+BSWZ+XnFaYwgCS4g4Zyfm5uaV+KUXxEM\
Uqxsbm6exgSSBPGCSnNSg9mAjOCSosy8dLBYSFFpKpoKkDkeqYkpEFXBILO1sCgJSczMQVYCAOFrJ\
EU=\"*)(*]BB*)\n  ]}];\n\n  Graphics[{\n\n    (*BB[*)(*attach listeners to a \
user's mouse to manipulate the \
grid*)(*,*)(*\"1:eJxTTMoPSmNhYGAo5gcSAUX5ZZkpqSn+BSWZ+XnFaYwgCS4g4Zyfm5uaV+KU\
XxEMUqxsbm6exgSSBPGCSnNSg9mAjOCSosy8dLBYSFFpKpoKkDkeqYkpEFXBILO1sCgJSczMQVYCA\
OFrJEU=\"*)(*]BB*)\n    EventHandler[Graphics`Canvas[], {\n      \"click\" -> \
Function[Null,\n        cink = cink // Reverse;\n      ],\n\n      \
\"mousemove\" -> Function[pos, With[{\n          xy = {50.0 - pos[[2]], \
pos[[1]]}\n        }, \n          With[{p = Round[xy]},\n            \
If[p[[1]] <= 50-1 && p[[1]] >=2 && p[[2]] <=50-1 && p[[2]] >=2,\n             \
   (*BB[*)(* accelerate the fluid \
*)(*,*)(*\"1:eJxTTMoPSmNhYGAo5gcSAUX5ZZkpqSn+BSWZ+XnFaYwgCS4g4Zyfm5uaV+KUXxEM\
Uqxsbm6exgSSBPGCSnNSg9mAjOCSosy8dLBYSFFpKpoKkDkeqYkpEFXBILO1sCgJSczMQVYCAOFrJ\
EU=\"*)(*]BB*)\n                vgrid[[p[[1]],p[[2]]]] = Normalize[(xy - \
dest)];\n\n                (*BB[*)(* add some ink \
*)(*,*)(*\"1:eJxTTMoPSmNhYGAo5gcSAUX5ZZkpqSn+BSWZ+XnFaYwgCS4g4Zyfm5uaV+KUXxEM\
Uqxsbm6exgSSBPGCSnNSg9mAjOCSosy8dLBYSFFpKpoKkDkeqYkpEFXBILO1sCgJSczMQVYCAOFrJ\
EU=\"*)(*]BB*)\n                ink[[p[[1]],p[[2]]]] = cink;\n                \
ink[[p[[1]]+1,p[[2]]]] = cink;\n                ink[[p[[1]]-1,p[[2]]]] = \
cink;\n                ink[[p[[1]],p[[2]]+1]] = cink;\n                \
ink[[p[[1]],p[[2]]+1]] = cink;\n            ];\n\n          ];\n        \n    \
      dest = xy;\n        ] ]\n    }], \n\n    (*BB[*)(*sync with browser's \
repaint cycle and update of fps \
label*)(*,*)(*\"1:eJxTTMoPSmNhYGAo5gcSAUX5ZZkpqSn+BSWZ+XnFaYwgCS4g4Zyfm5uaV+K\
UXxEMUqxsbm6exgSSBPGCSnNSg9mAjOCSosy8dLBYSFFpKpoKkDkeqYkpEFXBILO1sCgJSczMQVYC\
AOFrJEU=\"*)(*]BB*)\n    AnimationFrameListener[vfps // Offload, \
\"Event\"->\"vframe\"], \n\n    (*BB[*)(*insert our \
Image*)(*,*)(*\"1:eJxTTMoPSmNhYGAo5gcSAUX5ZZkpqSn+BSWZ+XnFaYwgCS4g4Zyfm5uaV+K\
UXxEMUqxsbm6exgSSBPGCSnNSg9mAjOCSosy8dLBYSFFpKpoKkDkeqYkpEFXBILO1sCgJSczMQVYC\
AOFrJEU=\"*)(*]BB*)\n    Inset[\n    \n      Image[nink // Offload, \"Byte\", \
Magnification->10]\n    \n    , {0,0}, {0,0}, {500,500}, \n    \n      \
(*BB[*)(* do not apply any transformation. keep the original size \
*)(*,*)(*\"1:eJxTTMoPSmNhYGAo5gcSAUX5ZZkpqSn+BSWZ+XnFaYwgCS4g4Zyfm5uaV+KUXxEM\
Uqxsbm6exgSSBPGCSnNSg9mAjOCSosy8dLBYSFFpKpoKkDkeqYkpEFXBILO1sCgJSczMQVYCAOFrJ\
EU=\"*)(*]BB*)\n      ViewMatrix->None\n    ],\n    \n    Text[vfps // \
Offload, {0,0}]\n\n    \n  }, \n    Controls->False, \n    ImageSize->500, \n \
   PlotRange->{{0,50}, {0,50}}, \n    ImagePadding->None\n  ]\n]\n\n(* \
subscribe to animation event *)\n\nvtime = \
AbsoluteTime[];\n\nEventHandler[\"vframe\", Function[Null,\n  \n  vgrid = \
advect[vgrid,vgrid, 1.0];\n  vgrid = removeDivergence[vgrid];\n  vgrid = \
removeDivergence[vgrid];\n\n  ink = With[{a = advect[vgrid, ink, 1.0]}, \
advect[vgrid, a, 1.0]];\n  nink = NumericArray[Map[255.0 {1.0 - #[[2]], 1.0- \
#[[1]], 1.0 - #[[1]], 1.0} &, ink, {2}], \"UnsignedInteger8\", \
\"ClipAndRound\"];\n  \n  vfps = (*FB[*)(((vfps + 1 / (AbsoluteTime[] - \
vtime)))(*,*)/(*,*)(2.0))(*]FB*) // Round;\n  vtime = AbsoluteTime[]; \n]];", 
    "Display" -> "codemirror", "Hash" -> 
     "63d3faa1-b130-427a-b958-7f416cf688f1", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "73fe49db-9a23-480c-b68c-e4e3334021f7"|>, 
   <|"Data" -> ".md\nWe do here pretty much the same as before; however, \
there are no longer arrows but a single `Inset` with a raster dynamic image \
inside. This places the `Image` on top of our `Graphics` canvas. This overlay \
is helpful since we can still listen to mouse positions and display FPS at a \
low cost. The fluid goes in the same direction as the mouse.\n\nI (Me - \
@JerryI) personally believe that we pushed the implementation to the limits \
of this toy model running on a CPU with an interpretive programming language. \
The next step definitely should be to utilize GPU compute shaders such as \
WebGPU, OpenCL, CUDA to calculate bigger fields and pipe the data directly to \
the canvas. However, this will be another story.\n\nThank you \:2764\:fe0f", 
    "Display" -> "codemirror", "Hash" -> 
     "c16d3d0c-69ac-429e-b234-689223b04a58", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "73fe49db-9a23-480c-b68c-e4e3334021f7"|>, 
   <|"Data" -> "We do here pretty much the same as before; however, there are \
no longer arrows but a single `Inset` with a raster dynamic image inside. \
This places the `Image` on top of our `Graphics` canvas. This overlay is \
helpful since we can still listen to mouse positions and display FPS at a low \
cost. The fluid goes in the same direction as the mouse.\n\nI (Me - @JerryI) \
personally believe that we pushed the implementation to the limits of this \
toy model running on a CPU with an interpretive programming language. The \
next step definitely should be to utilize GPU compute shaders such as WebGPU, \
OpenCL, CUDA to calculate bigger fields and pipe the data directly to the \
canvas. However, this will be another story.\n\nThank you \:2764\:fe0f", 
    "Display" -> "markdown", "Hash" -> 
     "85510c00-d061-49db-a0eb-045fd2ad16e4", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "73fe49db-9a23-480c-b68c-e4e3334021f7"|>}, "serializer" -> "jsfn4"|>
