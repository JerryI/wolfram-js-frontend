<|"Notebook" -> <|"Controller" -> "e16f110b-0a64-4925-bc38-fa89b9cead3c", 
   "FocusedCell" -> CellObj[JerryI`Notebook`CellObj`$470], 
   "HaveToSaveAs" -> False, "MessangerChannel" -> Messanger, 
   "ModalsChannel" -> "ea977301-cc30-4da5-9b58-e43f9729abaa", 
   "Objects" -> <|"1600" -> <|"Public" -> Hold[EditorView["22", 
          "ReadOnly" -> True]]|>, "48631" -> 
      <|"Public" -> Hold[EditorView["106", "ReadOnly" -> True]]|>, 
     "48718" -> <|"Public" -> Hold[EditorView["130", "ReadOnly" -> True]]|>, 
     "1475711" -> <|"Public" -> Hold[EditorView["0.01`", 
          "ReadOnly" -> True]]|>, "1475713" -> 
      <|"Public" -> Hold[EditorView["0.03`", "ReadOnly" -> True]]|>, 
     "45747059" -> <|"Public" -> Hold[EditorView["0.001`", 
          "ReadOnly" -> True]]|>, "45747060" -> 
      <|"Public" -> Hold[EditorView["0.002`", "ReadOnly" -> True]]|>, 
     "45747064" -> <|"Public" -> Hold[EditorView["0.006`", 
          "ReadOnly" -> True]]|>, "45747065" -> 
      <|"Public" -> Hold[EditorView["0.007`", "ReadOnly" -> True]]|>, 
     "bc61c228-82bc-43b5-a78b-b2829082984b" -> 
      <|"Public" -> Hold[Dataset[{{Style["time, s", Italic], 0.01, 0.01, 
            0.03}, {Style["Max FPS", Italic], 22}}, TypeSystem`Vector[
           TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 2], 
          Association[]]]|>, "695430be-0583-497f-8116-2c88bdb6b06d" -> 
      <|"Public" -> Hold[Dataset[{{Style["time, s", Italic], 0.001, 0.002, 
            0.007}, {Style["Max FPS", Italic], 106}}, TypeSystem`Vector[
           TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 2], 
          Association[]]]|>, "09dd1aaf-1abc-48e4-8407-2d04783abf9c" -> 
      <|"Public" -> Hold[Dataset[{{Style["time, s", Italic], 0.001, 0.001, 
            0.006}, {Style["Max FPS", Italic], 130}}, TypeSystem`Vector[
           TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 2], 
          Association[]]]|>, "a38a8802-948f-46d8-9f9a-33a0bf6828dd" -> 
      <|"Public" -> Hold[Image[{{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
            1, 1, 1, 1, 0.25, 0, 0.25, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
            1, 1, 1, 1, 1, 1}, {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
            1, 1, 1, 1}, {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
            1, 1}, {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
            1}, {1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1}, 
           {1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1}, 
           {1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1}, 
           {1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1}, 
           {1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1}, 
           {1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1}, 
           {1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1}, 
           {1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1}, 
           {1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1}, 
           {1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1}, 
           {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}, 
           {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}, 
           {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}, 
           {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}, 
           {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}, 
           {0.25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.25}, 
           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, 
           {0.25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.25}, 
           {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}, 
           {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}, 
           {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}, 
           {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}, 
           {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}, 
           {1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1}, 
           {1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1}, 
           {1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1}, 
           {1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1}, 
           {1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1}, 
           {1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1}, 
           {1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1}, 
           {1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1}, 
           {1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1}, 
           {1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1}, 
           {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, 
           {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, 
           {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, 
           {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.25, 0, 
            0.25, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}}, 
          Magnification -> 5, Antialiasing -> False]]|>, 
     "37dbfc31-9a78-43de-bb3d-a7828a5639f6" -> 
      <|"Public" -> Hold[Image[NumericArray[{{{1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {0.25, 1, 1, 1}, {0, 1, 1, 1}, {0.25, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}}, {{1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}}, 
            {{1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}}, {{1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}}, {{1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}}, {{1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}}, 
            {{1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}}, {{1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}}, {{1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}}, {{1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}}, 
            {{1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 0.25, 1, 1}, 
             {0, 0, 1, 1}, {0, 0.25, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}}, {{1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, 
             {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, 
             {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}}, {{1, 1, 1, 1}, {1, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, 
             {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, 
             {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, 
             {0, 0, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}}, {{1, 1, 1, 1}, 
             {1, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, 
             {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, 
             {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, 
             {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}}, 
            {{1, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, 
             {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 0.25, 1}, 
             {0, 0, 0, 1}, {0, 0, 0.25, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, 
             {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, 
             {0, 0, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {1, 1, 1, 1}}, {{1, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, 
             {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 0, 1}, {0, 0, 0, 1}, 
             {0, 0, 0, 1}, {0, 0, 0, 1}, {0, 0, 0, 1}, {0, 0, 0, 1}, 
             {0, 0, 0, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, 
             {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {1, 1, 1, 1}}, {{1, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, 
             {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 0, 1}, {0, 0, 0, 1}, 
             {0, 0, 0, 1}, {0, 0, 0, 1}, {0, 0, 0, 1}, {0, 0, 0, 1}, 
             {0, 0, 0, 1}, {0, 0, 0, 1}, {0, 0, 0, 1}, {0, 0, 1, 1}, 
             {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {1, 1, 1, 1}}, {{1, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, 
             {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 0, 1}, {0, 0, 0, 1}, 
             {0, 0, 0, 1}, {0, 0, 0, 1}, {0, 0, 0, 1}, {0, 0, 0, 1}, 
             {0, 0, 0, 1}, {0, 0, 0, 1}, {0, 0, 0, 1}, {0, 0, 0, 1}, 
             {0, 0, 0, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, 
             {0, 0, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {1, 1, 1, 1}}, 
            {{1, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 0, 1, 1}, 
             {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 0, 1}, 
             {0, 0, 0, 1}, {0, 0, 0, 1}, {0, 0, 0, 1}, {0, 0, 0, 0.25}, 
             {0, 0, 0, 0}, {0, 0, 0, 0.25}, {0, 0, 0, 1}, {0, 0, 0, 1}, 
             {0, 0, 0, 1}, {0, 0, 0, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, 
             {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {1, 1, 1, 1}}, {{0.25, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 0.25, 1, 1}, 
             {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 0.25, 1}, 
             {0, 0, 0, 1}, {0, 0, 0, 1}, {0, 0, 0, 1}, {0, 0, 0, 0.25}, 
             {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0.25}, 
             {0, 0, 0, 1}, {0, 0, 0, 1}, {0, 0, 0, 1}, {0, 0, 0.25, 1}, 
             {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0.25, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0.25, 1, 1, 1}}, {{0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, 
             {0, 0, 0, 1}, {0, 0, 0, 1}, {0, 0, 0, 1}, {0, 0, 0, 1}, 
             {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, 
             {0, 0, 0, 0}, {0, 0, 0, 1}, {0, 0, 0, 1}, {0, 0, 0, 1}, 
             {0, 0, 0, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, 
             {0, 0, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}}, {{0.25, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 0.25, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, 
             {0, 0, 1, 1}, {0, 0, 0.25, 1}, {0, 0, 0, 1}, {0, 0, 0, 1}, 
             {0, 0, 0, 1}, {0, 0, 0, 0.25}, {0, 0, 0, 0}, {0, 0, 0, 0}, 
             {0, 0, 0, 0}, {0, 0, 0, 0.25}, {0, 0, 0, 1}, {0, 0, 0, 1}, 
             {0, 0, 0, 1}, {0, 0, 0.25, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, 
             {0, 0, 1, 1}, {0, 0.25, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0.25, 1, 1, 1}}, 
            {{1, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 0, 1, 1}, 
             {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 0, 1}, 
             {0, 0, 0, 1}, {0, 0, 0, 1}, {0, 0, 0, 1}, {0, 0, 0, 0.25}, 
             {0, 0, 0, 0}, {0, 0, 0, 0.25}, {0, 0, 0, 1}, {0, 0, 0, 1}, 
             {0, 0, 0, 1}, {0, 0, 0, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, 
             {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {1, 1, 1, 1}}, {{1, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, 
             {0, 0, 0, 1}, {0, 0, 0, 1}, {0, 0, 0, 1}, {0, 0, 0, 1}, 
             {0, 0, 0, 1}, {0, 0, 0, 1}, {0, 0, 0, 1}, {0, 0, 0, 1}, 
             {0, 0, 0, 1}, {0, 0, 0, 1}, {0, 0, 0, 1}, {0, 0, 1, 1}, 
             {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {1, 1, 1, 1}}, {{1, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, 
             {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 0, 1}, {0, 0, 0, 1}, 
             {0, 0, 0, 1}, {0, 0, 0, 1}, {0, 0, 0, 1}, {0, 0, 0, 1}, 
             {0, 0, 0, 1}, {0, 0, 0, 1}, {0, 0, 0, 1}, {0, 0, 1, 1}, 
             {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {1, 1, 1, 1}}, {{1, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 0, 1, 1}, 
             {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, 
             {0, 0, 0, 1}, {0, 0, 0, 1}, {0, 0, 0, 1}, {0, 0, 0, 1}, 
             {0, 0, 0, 1}, {0, 0, 0, 1}, {0, 0, 0, 1}, {0, 0, 1, 1}, 
             {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {1, 1, 1, 1}}, 
            {{1, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, 
             {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 0.25, 1}, 
             {0, 0, 0, 1}, {0, 0, 0.25, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, 
             {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, 
             {0, 0, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {1, 1, 1, 1}}, {{1, 1, 1, 1}, {1, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, 
             {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, 
             {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, 
             {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, 
             {0, 0, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}}, {{1, 1, 1, 1}, {1, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, 
             {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, 
             {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, 
             {0, 0, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}}, {{1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 0, 1, 1}, 
             {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, 
             {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, {0, 0, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}}, 
            {{1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 0.25, 1, 1}, 
             {0, 0, 1, 1}, {0, 0.25, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}}, {{1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}}, {{1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}}, {{1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}}, 
            {{1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}}, {{1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}}, {{1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}}, {{1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}}, 
            {{1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}}, {{1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}}, {{1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {0.25, 1, 1, 1}, {0, 1, 1, 1}, {0.25, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, 
             {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}}}, "Real32"], 
          Magnification -> 5, Antialiasing -> False]]|>, 
     "e671691c-98b4-40b0-a900-3da0cd9b8b92" -> 
      <|"Public" -> Hold[Image[Offload[buffer], "Byte", Magnification -> 5, 
          Antialiasing -> False]]|>, "-3328664717" -> 
      <|"Public" -> Hold[EditorView["(*BB[*)(\"time, \
s\")(*,*)(*\"1:eJxTTMoPSmNiYGAo5gcSAUX5ZZkpqSn+BSWZ+XnFaYwgCRYg4ZGfkwLhcQKJ4J\
KizLx0p/yKYjYgz7MkMSczGWIISG1QaU5qMBtcGVgspKg0FQBd8Rlt\"*)(*]BB*)", 
          "ReadOnly" -> True]]|>, "-3802473522" -> 
      <|"Public" -> Hold[EditorView["(*BB[*)(\"Max \
FPS\")(*,*)(*\"1:eJxTTMoPSmNiYGAo5gcSAUX5ZZkpqSn+BSWZ+XnFaYwgCRYg4ZGfkwLhcQKJ\
4JKizLx0p/yKYjYgz7MkMSczGWIISG1QaU5qMBtcGVgspKg0FQBd8Rlt\"*)(*]BB*)", 
          "ReadOnly" -> True]]|>|>, "Path" -> "/Users/kirill/Github/wolfram-j\
s-frontend/Demos/01 - Tutorials/D4 - Fluid Simulation Part 3.wln", 
   "Quick" -> True, "Symbols" -> 
    <|"buffer" -> NumericArray[{{{255, 255, 255, 255}, {255, 255, 255, 255}, 
       {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 255}, 
       {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 255}, 
       {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 255}, 
       {255, 255, 255, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 
       255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 
       255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 212, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}}, {{255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 136, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       67, 255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}}, {{255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 255}, 
       {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 255}, 
       {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 255}, 
       {255, 255, 255, 255}, {255, 255, 255, 255}}, {{255, 255, 255, 255}, 
       {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 255}, 
       {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 113, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       35, 255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}}, {{255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 255, 255}, 
       {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 255}, 
       {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 255}, 
       {255, 255, 255, 255}}, {{255, 255, 255, 255}, {255, 255, 255, 255}, 
       {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 0, 255}, {255, 
       255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 
       255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 
       255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 
       255, 255}, {255, 255, 255, 255}}, {{255, 255, 255, 255}, {255, 255, 
       255, 255}, {255, 255, 255, 255}, {255, 255, 65, 255}, {255, 255, 0, 
       255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 255, 255}, 
       {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 255}, 
       {255, 255, 255, 255}, {255, 255, 255, 255}}, {{255, 255, 255, 255}, 
       {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 0, 255}, {255, 
       255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 
       255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       255, 255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}}, {{255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}}, {{255, 255, 255, 
       255}, {255, 255, 5, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}}, {{255, 255, 255, 
       255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}}, {{255, 255, 88, 
       255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 47, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}}, {{255, 255, 0, 
       255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 
       255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 255, 255}, {255, 
       255, 255, 255}, {255, 255, 255, 255}}, {{255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {152, 
       0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 
       255}, {155, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 255}}, 
       {{255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 
       255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 
       255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 
       0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 
       255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, 
       {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 255, 0, 
       255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 127, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}}, {{255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 
       0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 
       255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, 
       {0, 0, 0, 255}, {0, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, 
       {255, 0, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       255, 255}, {255, 255, 255, 255}}, {{255, 255, 0, 255}, {255, 255, 0, 
       255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 37, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 
       255}, {90, 0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, 
       {0, 0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {0, 0, 
       0, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {90, 0, 0, 255}, {255, 0, 0, 
       255}, {255, 0, 0, 255}, {255, 37, 0, 255}, {255, 255, 0, 255}, {255, 
       255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 
       255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 255, 255}, {255, 255, 255, 255}}, {{255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 
       0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 
       255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, 
       {0, 0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {255, 
       0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 255, 255}, {255, 255, 255, 255}}, {{255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 85, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 
       0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 
       255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, 
       {0, 0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {255, 
       0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 76, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 255, 255}, {255, 255, 255, 255}}, {{255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 
       0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 230}, {0, 0, 0, 103}, {0, 0, 0, 
       104}, {0, 0, 0, 232}, {0, 0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, 
       {0, 0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {255, 
       0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 255, 255}, {255, 255, 255, 255}}, {{255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 
       0, 0, 255}, {0, 0, 0, 252}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, 
       {0, 0, 0, 0}, {0, 0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {0, 0, 
       0, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {255, 0, 0, 
       255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       255, 255}, {255, 255, 255, 255}}, {{255, 255, 0, 255}, {255, 255, 0, 
       255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 
       255}, {0, 0, 0, 147}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 
       0, 0}, {0, 0, 0, 152}, {0, 0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, 
       {0, 0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {255, 0, 0, 255}, 
       {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 255, 0, 
       255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       255, 255}, {255, 255, 255, 255}}, {{255, 255, 0, 255}, {255, 255, 0, 
       255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 
       255}, {255, 0, 0, 171}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 
       0, 0, 0}, {0, 0, 0, 177}, {0, 0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 
       255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 
       255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       255, 255}, {255, 255, 255, 255}}, {{255, 255, 0, 255}, {255, 255, 0, 
       255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 
       255}, {255, 0, 0, 255}, {187, 0, 0, 68}, {0, 0, 0, 0}, {0, 0, 0, 0}, 
       {0, 0, 0, 73}, {0, 0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {0, 0, 
       0, 255}, {0, 0, 0, 255}, {173, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 
       0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 
       255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 
       255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 255, 255}, {255, 255, 255, 255}}, {{255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 
       0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 222}, {0, 
       0, 0, 224}, {0, 0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 255}, {0, 0, 0, 
       255}, {0, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 
       255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       255, 255}, {255, 255, 255, 255}, {255, 255, 255, 255}}, {{255, 255, 0, 
       255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 
       255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 
       0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 
       0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, 
       {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 
       255}, {255, 0, 0, 255}, {255, 230, 0, 255}, {255, 255, 0, 255}, {255, 
       255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 
       255}, {255, 255, 0, 255}, {255, 255, 255, 255}, {255, 255, 255, 255}, 
       {255, 255, 255, 255}}, {{255, 255, 0, 255}, {255, 255, 0, 255}, {255, 
       255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 
       255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 
       0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, 
       {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 
       255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 
       0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 
       255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 
       255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 255}}, 
       {{255, 255, 255, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 
       255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 
       255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 
       0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, 
       {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 
       255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 
       0, 255}, {255, 0, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}}, {{255, 255, 255, 
       255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 90, 
       0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 
       0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, 
       {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 
       255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 54, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}}, {{255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 117, 
       0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 
       0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, 
       {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 
       255}, {255, 0, 0, 255}, {255, 82, 0, 255}, {255, 255, 0, 255}, {255, 
       255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 
       255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 255, 255}, 
       {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 255}, 
       {255, 255, 255, 255}}, {{255, 255, 255, 255}, {255, 255, 255, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 
       255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 
       0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 
       255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 
       255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 39, 255}, {255, 255, 255, 255}, {255, 
       255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 
       255, 255}}, {{255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 
       255, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 35, 0, 255}, 
       {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 255}, {255, 0, 0, 
       255}, {255, 20, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 
       255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 
       255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 
       255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 
       255, 255}}, {{255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 
       255, 255}, {255, 255, 255, 255}, {255, 255, 0, 255}, {255, 255, 0, 
       255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}}, {{255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}}, {{255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}}, {{255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 
       255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 
       255, 255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}}, {{255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}}, {{255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 
       255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 
       255, 255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}}, {{255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 109, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 
       0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, {255, 255, 0, 255}, 
       {255, 255, 0, 255}, {255, 255, 156, 255}, {255, 255, 255, 255}, {255, 
       255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 
       255, 255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}}, {{255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}}, {{255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}, {255, 255, 255, 255}, {255, 255, 255, 255}, {255, 255, 255, 
       255}}}, "UnsignedInteger8"]|>, 
   "TOC" -> {Notebook`Editor`TOC`Private`heading[1, 
      "Real-time Fluid Simulation Part 3", 
      CellObj[JerryI`Notebook`CellObj`$389]], 
     Notebook`Editor`TOC`Private`heading[2, 
      "Measure and optimize \:23f1\:fe0f", 
      CellObj[JerryI`Notebook`CellObj`$391]], 
     Notebook`Editor`TOC`Private`heading[3, "Compile", 
      CellObj[JerryI`Notebook`CellObj`$398]], 
     Notebook`Editor`TOC`Private`heading[2, "Immediate Graphics Mode", 
      CellObj[JerryI`Notebook`CellObj`$417]], 
     Notebook`Editor`TOC`Private`heading[3, "Dynamic image", 
      CellObj[JerryI`Notebook`CellObj`$432]], 
     Notebook`Editor`TOC`Private`heading[2, "Virtual Ink", 
      CellObj[JerryI`Notebook`CellObj`$442]]}|>, 
 "Cells" -> {<|"Data" -> ".md\n# Real-time Fluid Simulation Part 3\n*Using \
Wolfram Language and WLJS*\n\nIn this notebook we will apply some \
optimizations to the code, expand the resolution and switch to immediate mode \
of graphics rendering. ", "Display" -> "codemirror", 
    "Hash" -> "a3679fea-afb4-46bd-8c99-7d8b4855df7e", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "fd627023-5ce5-4ada-b088-253f9ddb22f1"|>, 
   <|"Data" -> "# Real-time Fluid Simulation Part 3\n*Using Wolfram Language \
and WLJS*\n\nIn this notebook we will apply some optimizations to the code, \
expand the resolution and switch to immediate mode of graphics rendering. ", 
    "Display" -> "markdown", "Hash" -> 
     "0a0910fc-b7dd-4641-a459-3bcccf42f347", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "fd627023-5ce5-4ada-b088-253f9ddb22f1"|>, 
   <|"Data" -> ".md\n## Measure and optimize \:23f1\:fe0f\nLet us try to \
estimate the time we need to do our normal calculations on *devergence*, \
*advection* and *billinear interpolation*", "Display" -> "codemirror", 
    "Hash" -> "8a884349-1768-40ba-9023-d3a6b4bc8009", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "fd627023-5ce5-4ada-b088-253f9ddb22f1"|>, 
   <|"Data" -> "## Measure and optimize \:23f1\:fe0f\nLet us try to estimate \
the time we need to do our normal calculations on *devergence*, *advection* \
and *billinear interpolation*", "Display" -> "markdown", 
    "Hash" -> "00b8de52-20bd-4a9b-9e9f-594d4a8039f4", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "fd627023-5ce5-4ada-b088-253f9ddb22f1"|>, 
   <|"Data" -> "ClearAll[advect]; ClearAll[removeDivergence]; \
ClearAll[bilinearInterpolation];\n\nadvect[v_, u_, \[Delta]t_:0.1] := \
With[{max = Length[v]}, With[{\n  take = Function[{array, x,y}, If[x >= 1 && \
x <= max && y >= 1 && y <= max, array[[x,y]], array[[1,1]] 0.]]\n},\n  Table[ \
\n  \n    With[{\n      v1 =  (*FB[*)((take[v, i-1, j] + take[v, i, \
j])(*,*)/(*,*)(2.0))(*]FB*).{1,0},\n      v2 =  (*FB[*)((take[v, i, j+1] + \
take[v, i, j])(*,*)/(*,*)(2.0))(*]FB*).{0,-1},\n      v3 =  (*FB[*)((take[v, \
i+1, j] + take[v, i, j])(*,*)/(*,*)(2.0))(*]FB*).{-1,0},\n      v4 =  \
(*FB[*)((take[v, i, j-1] + take[v, i, j])(*,*)/(*,*)(2.0))(*]FB*).{0,1},\n    \
  org = u[[i,j]]\n    },\n\n      org + (\n      \n        v1 \
(*TB[*)Piecewise[{{(*|*)take[u, i-1, j](*|*),(*|*)v1 > \
0(*|*)},{(*|*)org(*|*),(*|*)True(*|*)}}](*|*)(*1:eJxTTMoPSmNkYGAo5gESAZmpyanl\
mcWpTvkVmUxAAQBzVQdd*)(*]TB*) + v3 (*TB[*)Piecewise[{{(*|*)take[u, i+1, \
j](*|*),(*|*)v3 > \
0(*|*)},{(*|*)org(*|*),(*|*)True(*|*)}}](*|*)(*1:eJxTTMoPSmNkYGAo5gESAZmpyanl\
mcWpTvkVmUxAAQBzVQdd*)(*]TB*)  +\n        \n        v4 \
(*TB[*)Piecewise[{{(*|*)take[u, i, j-1](*|*),(*|*)v4 > \
0(*|*)},{(*|*)org(*|*),(*|*)True(*|*)}}](*|*)(*1:eJxTTMoPSmNkYGAo5gESAZmpyanl\
mcWpTvkVmUxAAQBzVQdd*)(*]TB*) + v2 (*TB[*)Piecewise[{{(*|*)take[u, i, \
j+1](*|*),(*|*)v2 > \
0(*|*)},{(*|*)org(*|*),(*|*)True(*|*)}}](*|*)(*1:eJxTTMoPSmNkYGAo5gESAZmpyanl\
mcWpTvkVmUxAAQBzVQdd*)(*]TB*)\n        \n      ) \[Delta]t\n    ]\n    \n  , \
{i, max}, {j, max}] // Chop\n ]]\n\n removeDivergence[grid_] := With[{\n  \
(*BB[*)(*safety checks, which enforce closed \
boundaries*)(*,*)(*\"1:eJxTTMoPSmNhYGAo5gcSAUX5ZZkpqSn+BSWZ+XnFaYwgCS4g4Zyfm5\
uaV+KUXxEMUqxsbm6exgSSBPGCSnNSg9mAjOCSosy8dLBYSFFpKpoKkDkeqYkpEFXBILO1sCgJScz\
MQVYCAOFrJEU=\"*)(*]BB*)\n  take = Function[{array, x,y}, If[x >= 1 && x <= \
Length[grid] && y >= 1 && y <= Length[grid], array[[x,y]], {0,0}]]\n},\n  \
MapIndexed[Function[{val, i}, \n    val + (*FB[*)((1)(*,*)/(*,*)(8.0))(*]FB*) \
(\n      ((take[grid, i[[1]] - 1, i[[2]] - 1] + take[grid, i[[1]] + 1, i[[2]] \
+ 1]).{1,1}){1,1} +\n\n      ((take[grid, i[[1]] - 1, i[[2]] + 1] + \
take[grid, i[[1]] + 1, i[[2]] - 1]).{1,-1}){1,-1} +\n\n      (take[grid, \
i[[1]]-1, i[[2]]] + take[grid, i[[1]]+1, i[[2]]] - take[grid, i[[1]], \
i[[2]]-1] - take[grid, i[[1]], i[[2]]+1]){2,-2} + take[grid, i[[1]], i[[2]]] \
(-4)\n\n    )\n  ], grid, {2}]\n]\n\nbilinearInterpolation[array_, {x0_, \
y0_}] := Module[\n  {rows, cols, x = y0, y = x0, x1, x2, y1, y2, fQ11, fQ12, \
fQ21, fQ22},\n  \n  (* Get the dimensions of the array *)\n  {rows, cols} = \
Take[Dimensions[array], 2];\n  \n  (* Clip points to the boundaries *)\n  x = \
Clip[x, {1, cols}];\n  y = Clip[y, {1, rows}];\n  \n  (* Find the bounding \
indices *)\n  x1 = Floor[x]; \n  x2 = Ceiling[x];\n  y1 = Floor[y]; \n  y2 = \
Ceiling[y];\n  \n  (* Get the values at the four corners *)\n  fQ11 = \
array[[y1, x1]];\n  fQ12 = array[[y2, x1]];\n  fQ21 = array[[y1, x2]];\n  \
fQ22 = array[[y2, x2]];\n  \n  (* Perform bilinear interpolation *)\n  If[x2 \
== x1,\n    If[y2 == y1,\n      fQ11,\n      1/(2 (y2 - y1)) * (\n        \
fQ11 (y2 - y) +\n        fQ21 (y2 - y) +\n        fQ12 (y - y1) +\n        \
fQ22 (y - y1)\n      )\n    ],\n    If[y2 == y1,\n      1/(2 (x2 - x1)) * (\n \
       fQ11 (x2 - x) +\n        fQ21 (x - x1) +\n        fQ12 (x2 - x) +\n    \
    fQ22 (x - x1)\n      ),\n      1/((x2 - x1) (y2 - y1)) * (\n        fQ11 \
(x2 - x) (y2 - y) +\n        fQ21 (x - x1) (y2 - y) +\n        fQ12 (x2 - x) \
(y - y1) +\n        fQ22 (x - x1) (y - y1)\n      )\n    ]\n  \
]\n]\n\nadvectParticles[v_, pts_, \[Delta]t_:0.02] := Map[Function[p, p + \
\[Delta]t (bilinearInterpolation[v, p])], pts]", "Display" -> "codemirror", 
    "Hash" -> "e93cae0f-2285-46ed-bee2-110becda7286", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Fade" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "fd627023-5ce5-4ada-b088-253f9ddb22f1"|>, 
   <|"Data" -> ".md\nFor a single run we have", "Display" -> "codemirror", 
    "Hash" -> "74028bfb-60da-4bc1-b507-b8b050cdf17b", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "fd627023-5ce5-4ada-b088-253f9ddb22f1"|>, 
   <|"Data" -> "For a single run we have", "Display" -> "markdown", 
    "Hash" -> "0df1ffc9-24a6-43d5-80b1-02af8a000a43", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "fd627023-5ce5-4ada-b088-253f9ddb22f1"|>, 
   <|"Data" -> "runTest[title_] := With[{},\n  testGrid = Table[{0.,0.}, \
{i,15}, {j,15}];\n  testParticles = Table[RandomReal[{1,15}, 2], \
{i,1000}];\n\n  timing = {0., 0., 0.};\n\n  timing[[1]] = -AbsoluteTime[];\n  \
testGrid = advect[testGrid, testGrid, 0.2];\n  timing[[1]] += \
AbsoluteTime[];\n\n  timing[[2]] = -AbsoluteTime[];\n  testGrid = \
removeDivergence[testGrid];\n  timing[[2]] += AbsoluteTime[];\n\n  \
timing[[3]] = -AbsoluteTime[];\n  testParticles = advectParticles[testGrid, \
testParticles, 0.2];\n  timing[[3]] += AbsoluteTime[];\n\n  {\n    \
Style[title, Italic, 12],\n\n    Flatten /@ {\n      {Style[\"time, s\", \
Italic], Round[timing, 0.001]},\n      {Style[\"Max FPS\", Italic], Round[1 / \
(timing // Total), 1]}\n    } // TableView \n  } // \
Column\n];\n\nrunTest[\"Uncompiled\"]", "Display" -> "codemirror", 
    "Hash" -> "6ef8c874-362f-4dbb-8746-7b348e2df861", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Fade" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "fd627023-5ce5-4ada-b088-253f9ddb22f1"|>, 
   <|"Data" -> "(*GB[*){{(*BB[*)(\"Uncompiled\")(*,*)(*\"1:eJxTTMoPSmNiYGAo5g\
cSAUX5ZZkpqSn+BSWZ+XnFaYwgCRYg4ZGfkwJRxgkkgkuKMvPSnfIritmAPM+SxJzM5EweIBOiBKQ\
hqDQnNZgNrhYsFlJUmgoAykcZ4w==\"*)(*]BB*)}(*||*),(*||*){(*VB[*)(FrontEndRef[\"\
bc61c228-82bc-43b5-a78b-b2829082984b\"])(*,*)(*\"1:eJxTTMoPSmNkYGAoZgESHvk5KR\
CeEJBwK8rPK3HNS3GtSE0uLUlMykkNVgEKJyWbGSYbGVnoWhglJeuaGCeZ6iaaWyTpJhlZGFkaALG\
FSRIAgx0VRQ==\"*)(*]VB*)}}(*]GB*)", "Display" -> "codemirror", 
    "Hash" -> "9a6a519c-5433-47aa-8a33-77f4496aa0c6", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "fd627023-5ce5-4ada-b088-253f9ddb22f1"|>, 
   <|"Data" -> ".md\n### Compile\nMost probably for pure function JIT \
compiler should kick in, however, not all expressions are compilable in our \
case. We can make them by removing function declaraction within the `Module` \
and replacing `Piecewise` with just a normal `If` statement.\n\nIt makes our \
code looks less readable ~~and removes all magic of WL~~, but the result \
worth it", "Display" -> "codemirror", 
    "Hash" -> "2d576476-ad50-4dd4-9b1d-bded1234af31", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "fd627023-5ce5-4ada-b088-253f9ddb22f1"|>, 
   <|"Data" -> "### Compile\nMost probably for pure function JIT compiler \
should kick in, however, not all expressions are compilable in our case. We \
can make them by removing function declaraction within the `Module` and \
replacing `Piecewise` with just a normal `If` statement.\n\nIt makes our code \
looks less readable ~~and removes all magic of WL~~, but the result worth it"\
, "Display" -> "markdown", "Hash" -> "e289cfe0-b5e9-43bd-9cca-e9510e156bfa", 
    "Invisible" -> False, "MetaOnly" -> False, "Props" -> <||>, 
    "State" -> "Idle", "Type" -> "Output", "UID" -> Null, 
    "Notebook" -> "fd627023-5ce5-4ada-b088-253f9ddb22f1"|>, 
   <|"Data" -> "advect = Compile[{{v, _Real, 3}, {u, _Real, 3}, {\[Delta]t, \
_Real, 0}} , With[{max = Length[v]}, With[{\n \n},\n  Table[ \n  \n    \
With[{\n      (*BB[*)(* here we add a lot of manual check for boundary \
condition \
*)(*,*)(*\"1:eJxTTMoPSmNhYGAo5gcSAUX5ZZkpqSn+BSWZ+XnFaYwgCS4g4Zyfm5uaV+KUXxEM\
Uqxsbm6exgSSBPGCSnNSg9mAjOCSosy8dLBYSFFpKpoKkDkeqYkpEFXBILO1sCgJSczMQVYCAOFrJ\
EU=\"*)(*]BB*)\n      v1 = (*BB[*)( (*FB[*)((If[i-1 >= 1, v[[i-1, j]], \
{0.,0.}] + v[[i, \
j]])(*,*)/(*,*)(2.0))(*]FB*))(*,*)(*\"1:eJxTTMoPSmNkYGAoZgESHvk5KRAeB5AILqnMS\
XXKr0hjgskHleakFnMBGU6JydnpRfmleSlpzDDlQe5Ozvk5+UVFDGDwwR6dwcAAAAHdFiw=\"*)(*\
]BB*).{1,0},\n      v2 =  (*FB[*)((If[j+1 <= max, v[[i, j+1]], {0.,0.}] + \
v[[i, j]])(*,*)/(*,*)(2.0))(*]FB*).{0,-1},\n      v3 =  (*FB[*)((If[i+1 <= \
max, v[[i+1, j]], {0.,0.}] + v[[i, j]])(*,*)/(*,*)(2.0))(*]FB*).{-1,0},\n     \
 v4 =  (*FB[*)((If[j-1 >= 1, v[[i, j-1]], {0.,0.}] + v[[i, \
j]])(*,*)/(*,*)(2.0))(*]FB*).{0,1},\n      org = u[[i,j]]\n    },\n\n      \
org +  (\n        (*BB[*)(* here we add a lot of manual check for boundary \
condition \
*)(*,*)(*\"1:eJxTTMoPSmNhYGAo5gcSAUX5ZZkpqSn+BSWZ+XnFaYwgCS4g4Zyfm5uaV+KUXxEM\
Uqxsbm6exgSSBPGCSnNSg9mAjOCSosy8dLBYSFFpKpoKkDkeqYkpEFXBILO1sCgJSczMQVYCAOFrJ\
EU=\"*)(*]BB*)\n      \n        v1 (*BB[*)(If[v1 >0, If[i-1 >= 1, u[[i-1, \
j]], {0.,0.} ], \
org])(*,*)(*\"1:eJxTTMoPSmNkYGAoZgESHvk5KRAeB5AILqnMSXXKr0hjgskHleakFnMBGU6Jy\
dnpRfmleSlpzDDlQe5Ozvk5+UVFDGDwwR6dwcAAAAHdFiw=\"*)(*]BB*)  \n        \n      \
  + v3 (*BB[*)(If[v3>0,If[i+1 <= max, u[[i+1, j]], {0.,0.} ], \
org])(*,*)(*\"1:eJxTTMoPSmNkYGAoZgESHvk5KRAeB5AILqnMSXXKr0hjgskHleakFnMBGU6Jy\
dnpRfmleSlpzDDlQe5Ozvk5+UVFDGDwwR6dwcAAAAHdFiw=\"*)(*]BB*)+\n        \n       \
 v4 If[v4 >0, If[j-1 >= 1, u[[i, j-1]], {0.,0.} ], org] \n        \n        + \
v2 If[v2>0, If[j+1 <= max, u[[i, j+1]], {0.,0.} ], org]\n        \n      ) \
\[Delta]t \n    ]\n    \n  , {i, max}, {j, max}] // Chop\n \
]]];\n\nremoveDivergence = Compile[{{grid, _Real, 3}}, With[{\n  max = grid \
// Length\n},\n  MapIndexed[Function[{val, i}, \n    val + \
(*FB[*)((1)(*,*)/(*,*)(8.0))(*]FB*) (\n      (\n        (\n          \
(*BB[*)(* here we add a lot of manual check for boundary condition \
*)(*,*)(*\"1:eJxTTMoPSmNhYGAo5gcSAUX5ZZkpqSn+BSWZ+XnFaYwgCS4g4Zyfm5uaV+KUXxEM\
Uqxsbm6exgSSBPGCSnNSg9mAjOCSosy8dLBYSFFpKpoKkDkeqYkpEFXBILO1sCgJSczMQVYCAOFrJ\
EU=\"*)(*]BB*)\n          If[i[[1]] - 1 >= 1 && i[[1]] - 1 <= max && i[[2]] - \
1 >= 1 && i[[2]] - 1 <= max, grid[[i[[1]] - 1, i[[2]] - 1]], {0.,0.}] \n      \
    \n          + If[i[[1]] + 1 >=1 && i[[1]] + 1 <= max && i[[2]] + 1 >= 1 \
&& i[[2]] + 1 <= max, grid[[i[[1]] + 1, i[[2]] + 1]], {0.,0.}]\n        \n    \
    ).{1,1}\n        \n      ){1,1} +\n\n      (\n        (\n          \
(*BB[*)(* here we add a lot of manual check for boundary condition \
*)(*,*)(*\"1:eJxTTMoPSmNhYGAo5gcSAUX5ZZkpqSn+BSWZ+XnFaYwgCS4g4Zyfm5uaV+KUXxEM\
Uqxsbm6exgSSBPGCSnNSg9mAjOCSosy8dLBYSFFpKpoKkDkeqYkpEFXBILO1sCgJSczMQVYCAOFrJ\
EU=\"*)(*]BB*)\n          If[i[[1]] - 1 >= 1 && i[[1]] - 1 <= max && i[[2]] + \
1 >= 1 && i[[2]] + 1 <= max, grid[[i[[1]] - 1, i[[2]] + 1]], {0.,0.}]\n       \
   \n          + If[i[[1]] + 1 >= 1 && i[[1]] + 1 <= max && i[[2]] - 1 >= 1 \
&& i[[2]] - 1 <= max, grid[[i[[1]] + 1, i[[2]] - 1]], {0.,0.}]\n          \n  \
      ).{1,-1}\n        \n      ){1,-1} +\n\n      (\n        \
(*BB[*)(If[i[[1]]-1 >= 1 && i[[1]]-1 <= max, grid[[i[[1]]-1, i[[2]] ]], \
{0.,0.}])(*,*)(*\"1:eJxTTMoPSmNkYGAoZgESHvk5KRAeB5AILqnMSXXKr0hjgskHleakFnMBG\
U6JydnpRfmleSlpzDDlQe5Ozvk5+UVFDGDwwR6dwcAAAAHdFiw=\"*)(*]BB*)\n        \n    \
    + If[i[[1]]+1 >= 1 && i[[1]]+1 <= max, grid[[ i[[1]]+1, i[[2]] ]], \
{0.,0.}]\n        \n        - If[i[[2]]-1 >= 1 && i[[2]]-1 <= max, grid[[ \
i[[1]], i[[2]]-1 ]], {0.,0.}]\n        \n        - If[i[[2]]+1 >= 1 && \
i[[2]]+1 <= max, grid[[i[[1]], i[[2]]+1]], {0.,0.}]\n        \n      ){2,-2} \
\n        \n        + grid[[ i[[1]], i[[2]] ]] (-4)\n\n    )\n  ], grid, \
{2}]\n]];\n\nbilinearInterpolation = Compile[{{array, _Real, 3}, {v, _Real, \
1}}, \n(*BB[*)(* no big changes here \
*)(*,*)(*\"1:eJxTTMoPSmNhYGAo5gcSAUX5ZZkpqSn+BSWZ+XnFaYwgCS4g4Zyfm5uaV+KUXxEM\
Uqxsbm6exgSSBPGCSnNSg9mAjOCSosy8dLBYSFFpKpoKkDkeqYkpEFXBILO1sCgJSczMQVYCAOFrJ\
EU=\"*)(*]BB*)\nModule[\n  {rows, cols, x = v[[2]], y = v[[1]], x1, x2, y1, \
y2, fQ11, fQ12, fQ21, fQ22},\n  \n  (* Get the dimensions of the array *)\n  \
{rows, cols} = {Length[array], Length[array]};\n  \n  (* Clip points to the \
boundaries *)\n  x = Clip[x, {1, cols}];\n  y = Clip[y, {1, rows}];\n  \n  (* \
Find the bounding indices *)\n  x1 = Floor[x]; \n  x2 = Ceiling[x];\n  y1 = \
Floor[y]; \n  y2 = Ceiling[y];\n  \n  (* Get the values at the four corners \
*)\n  fQ11 = array[[y1, x1]];\n  fQ12 = array[[y2, x1]];\n  fQ21 = array[[y1, \
x2]];\n  fQ22 = array[[y2, x2]];\n  \n  (* Perform bilinear interpolation \
*)\n  If[x2 == x1,\n    If[y2 == y1,\n      fQ11,\n      1/(2 (y2 - y1)) * \
(\n        fQ11 (y2 - y) +\n        fQ21 (y2 - y) +\n        fQ12 (y - y1) \
+\n        fQ22 (y - y1)\n      )\n    ],\n    If[y2 == y1,\n      1/(2 (x2 - \
x1)) * (\n        fQ11 (x2 - x) +\n        fQ21 (x - x1) +\n        fQ12 (x2 \
- x) +\n        fQ22 (x - x1)\n      ),\n      1/((x2 - x1) (y2 - y1)) * (\n  \
      fQ11 (x2 - x) (y2 - y) +\n        fQ21 (x - x1) (y2 - y) +\n        \
fQ12 (x2 - x) (y - y1) +\n        fQ22 (x - x1) (y - y1)\n      )\n    ]\n  \
]\n]];    ", "Display" -> "codemirror", 
    "Hash" -> "2322a581-8394-4ca0-a0db-e93f2fa0ea14", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Fade" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "fd627023-5ce5-4ada-b088-253f9ddb22f1"|>, 
   <|"Data" -> ".md\nLet us test it again!", "Display" -> "codemirror", 
    "Hash" -> "91998192-6d53-4af8-8628-8827c064f999", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "fd627023-5ce5-4ada-b088-253f9ddb22f1"|>, 
   <|"Data" -> "Let us test it again!", "Display" -> "markdown", 
    "Hash" -> "6b9c4a2b-7d40-422f-9cdd-a8ddf55769d5", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "fd627023-5ce5-4ada-b088-253f9ddb22f1"|>, 
   <|"Data" -> "runTest[\"Compiled\"]", "Display" -> "codemirror", 
    "Hash" -> "b53dafe7-cbf7-49a8-adf7-69104ffb05ae", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "fd627023-5ce5-4ada-b088-253f9ddb22f1"|>, 
   <|"Data" -> "(*GB[*){{(*BB[*)(\"Compiled\")(*,*)(*\"1:eJxTTMoPSmNiYGAo5gcS\
AUX5ZZkpqSn+BSWZ+XnFaYwgCRYg4ZGfkwJRxgkkgkuKMvPSnfIritmAPM+SxJzM5EweIBOiBKQhq\
DQnNZgNrhYsFlJUmgoAykcZ4w==\"*)(*]BB*)}(*||*),(*||*){(*VB[*)(FrontEndRef[\"69\
5430be-0583-497f-8116-2c88bdb6b06d\"])(*,*)(*\"1:eJxTTMoPSmNkYGAoZgESHvk5KRCe\
EJBwK8rPK3HNS3GtSE0uLUlMykkNVgEKm1mamhgbJKXqGphaGOuaWJqn6VoYGprpGiVbWCSlJJklG\
ZilAAByCRUe\"*)(*]VB*)}}(*]GB*)", "Display" -> "codemirror", 
    "Hash" -> "6fbc402a-3ed7-4bb1-be7d-5fb283f41252", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "fd627023-5ce5-4ada-b088-253f9ddb22f1"|>, 
   <|"Data" -> ".md\n\n<span style=\"color:red\"><b>x5</b> time \
faster</span>\n\nHowever, one should note, that this is still not a machine \
code, but rather byte-code of Wolfram Kernel internal command representation \
or something similar to that.", "Display" -> "codemirror", 
    "Hash" -> "26f4b0e8-4d48-4c27-8b56-c5cabdf81bc5", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "fd627023-5ce5-4ada-b088-253f9ddb22f1"|>, 
   <|"Data" -> "<span style=\"color:red\"><b >x5</b> time \
faster</span>\n\nHowever, one should note, that this is still not a machine \
code, but rather byte-code of Wolfram Kernel internal command representation \
or something similar to that.", "Display" -> "markdown", 
    "Hash" -> "8e99356b-c8ba-4a33-a558-471515ffa4ae", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "fd627023-5ce5-4ada-b088-253f9ddb22f1"|>, 
   <|"Data" -> ".md\nOne can go futher and force WL to compile it to C and \
then link automatically. __This will probably require to have `gcc` or \
`clang` installed on your system__", "Display" -> "codemirror", 
    "Hash" -> "85316627-8fb2-4e1b-8c06-8a4e8b5c32f3", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "fd627023-5ce5-4ada-b088-253f9ddb22f1"|>, 
   <|"Data" -> "One can go futher and force WL to compile it to C and then \
link automatically. __This will probably require to have `gcc` or `clang` \
installed on your system__", "Display" -> "markdown", 
    "Hash" -> "4390b480-debb-45f3-8a53-fdc0340516d2", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "fd627023-5ce5-4ada-b088-253f9ddb22f1"|>, 
   <|"Data" -> "advect = Compile[{{v, _Real, 3}, {u, _Real, 3}, {\[Delta]t, \
_Real, 0}} , With[{max = Length[v]}, With[{\n \n},\n  Table[ \n  \n    \
With[{\n      v1 =  (*FB[*)((If[i-1 >= 1, v[[i-1, j]], {0.,0.}] + v[[i, \
j]])(*,*)/(*,*)(2.0))(*]FB*).{1,0},\n      v2 =  (*FB[*)((If[j+1 <= max, \
v[[i, j+1]], {0.,0.}] + v[[i, j]])(*,*)/(*,*)(2.0))(*]FB*).{0,-1},\n      v3 \
=  (*FB[*)((If[i+1 <= max, v[[i+1, j]], {0.,0.}] + v[[i, \
j]])(*,*)/(*,*)(2.0))(*]FB*).{-1,0},\n      v4 =  (*FB[*)((If[j-1 >= 1, v[[i, \
j-1]], {0.,0.}] + v[[i, j]])(*,*)/(*,*)(2.0))(*]FB*).{0,1},\n      org = \
u[[i,j]]\n    },\n\n      org +  (\n      \n        v1 If[v1 >0, If[i-1 >= 1, \
u[[i-1, j]], {0.,0.} ], org]  + v3 If[v3>0,If[i+1 <= max, u[[i+1, j]], \
{0.,0.} ], org]+\n        \n        v4 If[v4 >0, If[j-1 >= 1, u[[i, j-1]], \
{0.,0.} ], org] + v2 If[v2>0, If[j+1 <= max, u[[i, j+1]], {0.,0.} ], org]\n   \
     \n      ) \[Delta]t \n    ]\n    \n  , {i, max}, {j, max}] // Chop\n ]] \
, CompilationOptions -> {\"InlineExternalDefinitions\" -> True}, \n    \
\"CompilationTarget\" -> \"C\", \"RuntimeOptions\" -> \
\"Speed\"];\n\nremoveDivergence = Compile[{{grid, _Real, 3}}, With[{\n  max = \
grid // Length\n},\n  MapIndexed[Function[{val, i}, \n    val + \
(*FB[*)((1)(*,*)/(*,*)(8.0))(*]FB*) (\n      (\n        (\n          \
If[i[[1]] - 1 >= 1 && i[[1]] - 1 <= max && i[[2]] - 1 >= 1 && i[[2]] - 1 <= \
max, grid[[i[[1]] - 1, i[[2]] - 1]], {0.,0.}] \n          \n          + \
If[i[[1]] + 1 >=1 && i[[1]] + 1 <= max && i[[2]] + 1 >= 1 && i[[2]] + 1 <= \
max, grid[[i[[1]] + 1, i[[2]] + 1]], {0.,0.}]\n        \n        ).{1,1}\n    \
    \n      ){1,1} +\n\n      (\n        (\n          If[i[[1]] - 1 >= 1 && \
i[[1]] - 1 <= max && i[[2]] + 1 >= 1 && i[[2]] + 1 <= max, grid[[i[[1]] - 1, \
i[[2]] + 1]], {0.,0.}]\n          \n          + If[i[[1]] + 1 >= 1 && i[[1]] \
+ 1 <= max && i[[2]] - 1 >= 1 && i[[2]] - 1 <= max, grid[[i[[1]] + 1, i[[2]] \
- 1]], {0.,0.}]\n          \n        ).{1,-1}\n        \n      ){1,-1} +\n\n  \
    (\n        If[i[[1]]-1 >= 1 && i[[1]]-1 <= max, grid[[i[[1]]-1, i[[2]] \
]], {0.,0.}]\n        \n        + If[i[[1]]+1 >= 1 && i[[1]]+1 <= max, grid[[ \
i[[1]]+1, i[[2]] ]], {0.,0.}]\n        \n        - If[i[[2]]-1 >= 1 && \
i[[2]]-1 <= max, grid[[ i[[1]], i[[2]]-1 ]], {0.,0.}]\n        \n        - \
If[i[[2]]+1 >= 1 && i[[2]]+1 <= max, grid[[i[[1]], i[[2]]+1]], {0.,0.}]\n     \
   \n      ){2,-2} \n        \n        + grid[[ i[[1]], i[[2]] ]] (-4)\n\n    \
)\n  ], grid, {2}]\n], CompilationOptions -> {\"InlineExternalDefinitions\" \
-> True}, \n    \"CompilationTarget\" -> \"C\",   \"RuntimeOptions\" -> \
\"Speed\"];\n\n\nbilinearInterpolation = Compile[{{array, _Real, 3}, {v, \
_Real, 1}}, Module[\n  {rows, cols, x = v[[2]], y = v[[1]], x1, x2, y1, y2, \
fQ11, fQ12, fQ21, fQ22},\n  \n  (* Get the dimensions of the array *)\n  \
{rows, cols} = {Length[array], Length[array]};\n  \n  (* Clip points to the \
boundaries *)\n  x = Clip[x, {1, cols}];\n  y = Clip[y, {1, rows}];\n  \n  (* \
Find the bounding indices *)\n  x1 = Floor[x]; \n  x2 = Ceiling[x];\n  y1 = \
Floor[y]; \n  y2 = Ceiling[y];\n  \n  (* Get the values at the four corners \
*)\n  fQ11 = array[[y1, x1]];\n  fQ12 = array[[y2, x1]];\n  fQ21 = array[[y1, \
x2]];\n  fQ22 = array[[y2, x2]];\n  \n  (* Perform bilinear interpolation \
*)\n  If[x2 == x1,\n    If[y2 == y1,\n      fQ11,\n      1/(2 (y2 - y1)) * \
(\n        fQ11 (y2 - y) +\n        fQ21 (y2 - y) +\n        fQ12 (y - y1) \
+\n        fQ22 (y - y1)\n      )\n    ],\n    If[y2 == y1,\n      1/(2 (x2 - \
x1)) * (\n        fQ11 (x2 - x) +\n        fQ21 (x - x1) +\n        fQ12 (x2 \
- x) +\n        fQ22 (x - x1)\n      ),\n      1/((x2 - x1) (y2 - y1)) * (\n  \
      fQ11 (x2 - x) (y2 - y) +\n        fQ21 (x - x1) (y2 - y) +\n        \
fQ12 (x2 - x) (y - y1) +\n        fQ22 (x - x1) (y - y1)\n      )\n    ]\n  \
]\n] , CompilationOptions -> {\"InlineExternalDefinitions\" -> True}, \n    \
\"CompilationTarget\" -> \"C\",\"RuntimeOptions\" -> \"Speed\"];  ", 
    "Display" -> "codemirror", "Hash" -> 
     "7b9a7cf8-13d2-435f-ace5-ca54062c6f33", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"InitGroup" -> True, "Fade" -> True|>, 
    "State" -> "Idle", "Type" -> "Input", "UID" -> Null, 
    "Notebook" -> "fd627023-5ce5-4ada-b088-253f9ddb22f1"|>, 
   <|"Data" -> ".md\nNow we have new results", "Display" -> "codemirror", 
    "Hash" -> "1aabc4cc-ce58-484d-b88b-042c79e9ea6a", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "fd627023-5ce5-4ada-b088-253f9ddb22f1"|>, 
   <|"Data" -> "Now we have new results", "Display" -> "markdown", 
    "Hash" -> "7723f383-ab77-437b-8f1a-26166ddec480", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "fd627023-5ce5-4ada-b088-253f9ddb22f1"|>, 
   <|"Data" -> "runTest[\"Compiled + C\"]", "Display" -> "codemirror", 
    "Hash" -> "800fcf35-ce51-4659-af04-cb53b468589b", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "fd627023-5ce5-4ada-b088-253f9ddb22f1"|>, 
   <|"Data" -> "(*GB[*){{(*BB[*)(\"Compiled + \
C\")(*,*)(*\"1:eJxTTMoPSmNiYGAo5gcSAUX5ZZkpqSn+BSWZ+XnFaYwgCRYg4ZGfkwJRxgkkgk\
uKMvPSnfIritmAPM+SxJzM5EweIBOiBKQhqDQnNZgNrhYsFlJUmgoAykcZ4w==\"*)(*]BB*)}(*|\
|*),(*||*){(*VB[*)(FrontEndRef[\"09dd1aaf-1abc-48e4-8407-2d04783abf9c\"])(*,*\
)(*\"1:eJxTTMoPSmNkYGAoZgESHvk5KRCeEJBwK8rPK3HNS3GtSE0uLUlMykkNVgEKG1impBgmJq\
bpGiYmJeuaWKSa6FqYGJjrGqUYmJhbGCcmpVkmAwCN5RX9\"*)(*]VB*)}}(*]GB*)", 
    "Display" -> "codemirror", "Hash" -> 
     "4205d20b-a578-40eb-b849-52f776f818b2", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "fd627023-5ce5-4ada-b088-253f9ddb22f1"|>, 
   <|"Data" -> ".md\n\n<span style=\"color:red\"><b>x6</b> time \
faster</span>\n\nWe gained a bit of speed; we will see more difference once \
the grid is expanded and more iterations are needed.", 
    "Display" -> "codemirror", "Hash" -> 
     "e3355313-35c5-4ad6-bece-1e667c1cd464", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "fd627023-5ce5-4ada-b088-253f9ddb22f1"|>, 
   <|"Data" -> "<span style=\"color:red\"><b >x6</b> time faster</span>\n\nWe \
gained a bit of speed; we will see more difference once the grid is expanded \
and more iterations are needed.", "Display" -> "markdown", 
    "Hash" -> "b222efba-26a5-4f4d-b4be-02e15a48d9de", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "fd627023-5ce5-4ada-b088-253f9ddb22f1"|>, 
   <|"Data" -> ".md\n## Immediate Graphics Mode\nThis only means, that we \
will do all rendering of our primitives by ourself. The graphics API will \
only display the rendered frame we crafted on Wolfram Kernel. The last also \
meant we migh have to transfer much more data over WebSockets to \
frontend.\n\nLet me show you a simple example", "Display" -> "codemirror", 
    "Hash" -> "b87f9ef5-0d50-4e63-b851-f98bdc5f4fb1", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "fd627023-5ce5-4ada-b088-253f9ddb22f1"|>, 
   <|"Data" -> "## Immediate Graphics Mode\nThis only means, that we will do \
all rendering of our primitives by ourself. The graphics API will only \
display the rendered frame we crafted on Wolfram Kernel. The last also meant \
we migh have to transfer much more data over WebSockets to frontend.\n\nLet \
me show you a simple example", "Display" -> "markdown", 
    "Hash" -> "e4dfc6d9-8068-4716-ace6-8b1670a59ddc", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "fd627023-5ce5-4ada-b088-253f9ddb22f1"|>, 
   <|"Data" -> "Table[Clip[((*SpB[*)Power[x(*|*),(*|*)2](*]SpB*) + \
(*SpB[*)Power[y(*|*),(*|*)2](*]SpB*)) - \
(*SpB[*)Power[10(*|*),(*|*)2](*]SpB*), {0, 1}], {x,-10,10, 0.5}, {y,-10,10, \
0.5}];\nImage[%, Magnification -> 5, Antialiasing->False]", 
    "Display" -> "codemirror", "Hash" -> 
     "07f725bc-fc8c-4594-810b-4231cfa19ee3", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "fd627023-5ce5-4ada-b088-253f9ddb22f1"|>, 
   <|"Data" -> "(*VB[*)(FrontEndRef[\"a38a8802-948f-46d8-9f9a-33a0bf6828dd\"]\
)(*,*)(*\"1:eJxTTMoPSmNkYGAoZgESHvk5KRCeEJBwK8rPK3HNS3GtSE0uLUlMykkNVgEKJxpbJ\
FpYGBjpWppYpOmamKVY6FqmWSbqGhsnGiSlmVkYWaSkAAB9LBWL\"*)(*]VB*)", 
    "Display" -> "codemirror", "Hash" -> 
     "f6e0c01d-272f-4531-90e1-e097b8e99574", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "fd627023-5ce5-4ada-b088-253f9ddb22f1"|>, 
   <|"Data" -> ".md\nHere we used so-called SDF method for drawing graphics. \
We iterate over all posiitons of pixels in reactangle, produce brightness \
values and then send them to `Image`, which copies them into a texture on \
GPU.", "Display" -> "codemirror", "Hash" -> 
     "54bb25da-c743-4ba4-a6a7-86b1ea1104f2", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "fd627023-5ce5-4ada-b088-253f9ddb22f1"|>, 
   <|"Data" -> "Here we used so-called SDF method for drawing graphics. We \
iterate over all posiitons of pixels in reactangle, produce brightness values \
and then send them to `Image`, which copies them into a texture on GPU.", 
    "Display" -> "markdown", "Hash" -> 
     "8519b53b-00ae-4447-8419-c9ef4ebbed87", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "fd627023-5ce5-4ada-b088-253f9ddb22f1"|>, 
   <|"Data" -> 
     ".md\nWe can use all 4 (RGBA) color channels to draw our picture", 
    "Display" -> "codemirror", "Hash" -> 
     "12618e29-fed6-4c48-ab3e-109b1d226d0d", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "fd627023-5ce5-4ada-b088-253f9ddb22f1"|>, 
   <|"Data" -> "We can use all 4 (RGBA) color channels to draw our picture", 
    "Display" -> "markdown", "Hash" -> 
     "ec0ce248-28b2-4fb2-b73f-e364021cebe0", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "fd627023-5ce5-4ada-b088-253f9ddb22f1"|>, 
   <|"Data" -> "Table[{\n  Clip[((*SpB[*)Power[x(*|*),(*|*)2](*]SpB*) + \
(*SpB[*)Power[y(*|*),(*|*)2](*]SpB*)) - \
(*SpB[*)Power[10(*|*),(*|*)2](*]SpB*), {0, 1}],\n  \
Clip[((*SpB[*)Power[x(*|*),(*|*)2](*]SpB*) + \
(*SpB[*)Power[y(*|*),(*|*)2](*]SpB*)) - (*SpB[*)Power[5(*|*),(*|*)2](*]SpB*), \
{0, 1}],\n  Clip[((*SpB[*)Power[x(*|*),(*|*)2](*]SpB*) + \
(*SpB[*)Power[y(*|*),(*|*)2](*]SpB*)) - (*SpB[*)Power[3(*|*),(*|*)2](*]SpB*), \
{0, 1}],\n  Clip[((*SpB[*)Power[x(*|*),(*|*)2](*]SpB*) + \
(*SpB[*)Power[y(*|*),(*|*)2](*]SpB*)) - (*SpB[*)Power[1(*|*),(*|*)2](*]SpB*), \
{0, 1}]\n}, {x,-10,10, 0.5}, {y,-10,10, 0.5}];\nImage[%, Magnification -> 5, \
Antialiasing->False]", "Display" -> "codemirror", 
    "Hash" -> "7b0679c7-c9bf-46b0-800f-6b4165c73b71", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "fd627023-5ce5-4ada-b088-253f9ddb22f1"|>, 
   <|"Data" -> "(*VB[*)(FrontEndRef[\"37dbfc31-9a78-43de-bb3d-a7828a5639f6\"]\
)(*,*)(*\"1:eJxTTMoPSmNkYGAoZgESHvk5KRCeEJBwK8rPK3HNS3GtSE0uLUlMykkNVgEKG5unJ\
KUlGxvqWiaaW+iaGKek6iYlGafoAnlGFommZsaWaWYAjRsV4g==\"*)(*]VB*)", 
    "Display" -> "codemirror", "Hash" -> 
     "e2030c98-9330-4a8b-9fa1-3a460b9cc2c8", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "fd627023-5ce5-4ada-b088-253f9ddb22f1"|>, 
   <|"Data" -> ".md\n__For the best performance__ use `NumericArray`, since \
it packs all numberic data to a more compact form", 
    "Display" -> "codemirror", "Hash" -> 
     "303a1c60-2a98-4f57-bb21-6e7766ec5ada", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "fd627023-5ce5-4ada-b088-253f9ddb22f1"|>, 
   <|"Data" -> "__For the best performance__ use `NumericArray`, since it \
packs all numberic data to a more compact form", "Display" -> "markdown", 
    "Hash" -> "e9409d3d-fd50-486f-b427-c107e0072bbd", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "fd627023-5ce5-4ada-b088-253f9ddb22f1"|>, 
   <|"Data" -> "Table[{\n  Clip[((*SpB[*)Power[x(*|*),(*|*)2](*]SpB*) + \
(*SpB[*)Power[y(*|*),(*|*)2](*]SpB*)) - \
(*SpB[*)Power[10(*|*),(*|*)2](*]SpB*), {0, 1}],\n  \
Clip[((*SpB[*)Power[x(*|*),(*|*)2](*]SpB*) + \
(*SpB[*)Power[y(*|*),(*|*)2](*]SpB*)) - (*SpB[*)Power[5(*|*),(*|*)2](*]SpB*), \
{0, 1}],\n  Clip[((*SpB[*)Power[x(*|*),(*|*)2](*]SpB*) + \
(*SpB[*)Power[y(*|*),(*|*)2](*]SpB*)) - (*SpB[*)Power[3(*|*),(*|*)2](*]SpB*), \
{0, 1}],\n  Clip[((*SpB[*)Power[x(*|*),(*|*)2](*]SpB*) + \
(*SpB[*)Power[y(*|*),(*|*)2](*]SpB*)) - (*SpB[*)Power[1(*|*),(*|*)2](*]SpB*), \
{0, 1}]\n}, {x,-10,10, 0.5}, {y,-10,10, 0.5}];\nImage[NumericArray[%, \
\"Real32\"], Magnification -> 5, Antialiasing->False]", 
    "Display" -> "codemirror", "Hash" -> 
     "b8b15419-370e-4d41-9bce-993c9d8c97ac", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "fd627023-5ce5-4ada-b088-253f9ddb22f1"|>, <|"Data" -> ".md\n---", 
    "Display" -> "codemirror", "Hash" -> 
     "f585354f-219f-4426-901f-88edda42cc4a", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "fd627023-5ce5-4ada-b088-253f9ddb22f1"|>, 
   <|"Data" -> "---", "Display" -> "markdown", 
    "Hash" -> "353826c4-0147-4eab-b3a5-fe9a7a19790f", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "fd627023-5ce5-4ada-b088-253f9ddb22f1"|>, 
   <|"Data" -> ".md\n### Dynamic image\nThere is a usual way on how to update \
our `Image` - using `Offload` technique as we did before\n\n> \
<b>TIP</b>\nReal values takes more time to deserialize on frontend, we will \
use `UnsignedInteger8`", "Display" -> "codemirror", 
    "Hash" -> "df140566-baec-45f1-b449-2a6d7ee51150", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "fd627023-5ce5-4ada-b088-253f9ddb22f1"|>, 
   <|"Data" -> "### Dynamic image\nThere is a usual way on how to update our \
`Image` - using `Offload` technique as we did before\n\n><b >TIP</b>\nReal \
values takes more time to deserialize on frontend, we will use \
`UnsignedInteger8`", "Display" -> "markdown", 
    "Hash" -> "bc331790-f7c4-437c-9ded-06b78ae6a378", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "fd627023-5ce5-4ada-b088-253f9ddb22f1"|>, 
   <|"Data" -> "serialize[arr_List] := NumericArray[arr, \
\"UnsignedInteger8\", \"ClipAndRound\"];\n\nbuffer = Table[255.0 {\n  \
Clip[((*SpB[*)Power[x(*|*),(*|*)2](*]SpB*) + \
(*SpB[*)Power[y(*|*),(*|*)2](*]SpB*)) - \
(*SpB[*)Power[10(*|*),(*|*)2](*]SpB*), {0, 1}],\n  \
Clip[((*SpB[*)Power[x(*|*),(*|*)2](*]SpB*) + \
(*SpB[*)Power[y(*|*),(*|*)2](*]SpB*)) - (*SpB[*)Power[5(*|*),(*|*)2](*]SpB*), \
{0, 1}],\n  Clip[((*SpB[*)Power[x(*|*),(*|*)2](*]SpB*) + \
(*SpB[*)Power[y(*|*),(*|*)2](*]SpB*)) - (*SpB[*)Power[3(*|*),(*|*)2](*]SpB*), \
{0, 1}],\n  Clip[((*SpB[*)Power[x(*|*),(*|*)2](*]SpB*) + \
(*SpB[*)Power[y(*|*),(*|*)2](*]SpB*)) - (*SpB[*)Power[1(*|*),(*|*)2](*]SpB*), \
{0, 1}]\n}, {x,-10,10, 0.5}, {y,-10,10, 0.5}] // serialize;\n\nImage[buffer \
// Offload, \"Byte\", Magnification -> 5, Antialiasing->False]", 
    "Display" -> "codemirror", "Hash" -> 
     "1ca90f1f-da7d-4d4c-8fed-d60a0def13de", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "fd627023-5ce5-4ada-b088-253f9ddb22f1"|>, 
   <|"Data" -> "(*VB[*)(FrontEndRef[\"e671691c-98b4-40b0-a900-3da0cd9b8b92\"]\
)(*,*)(*\"1:eJxTTMoPSmNkYGAoZgESHvk5KRCeEJBwK8rPK3HNS3GtSE0uLUlMykkNVgEKp5qZG\
5pZGibrWlokmeiaGCQZ6CZaGhjoGqckGiSnWCZZJFkaAQB7mxVv\"*)(*]VB*)", 
    "Display" -> "codemirror", "Hash" -> 
     "b4bb2a46-a1a8-487c-8471-0f5e00f57220", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "fd627023-5ce5-4ada-b088-253f9ddb22f1"|>, 
   <|"Data" -> ".md\nNow we can easily update our image by setting new values \
to `buffer`", "Display" -> "codemirror", 
    "Hash" -> "fc114450-9a6c-4ecb-8037-77cd709f6869", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "fd627023-5ce5-4ada-b088-253f9ddb22f1"|>, 
   <|"Data" -> 
     "Now we can easily update our image by setting new values to `buffer`", 
    "Display" -> "markdown", "Hash" -> 
     "4e17a78a-3578-4ef9-83eb-5561b29407a2", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "fd627023-5ce5-4ada-b088-253f9ddb22f1"|>, 
   <|"Data" -> "t := AbsoluteTime[];\n\ntask = SetInterval[\n  buffer = \
Table[255.0 {\n    Clip[((*SpB[*)Power[(x + Cos[t])(*|*),(*|*)2](*]SpB*) + \
(*SpB[*)Power[(y - Sin[t])(*|*),(*|*)2](*]SpB*)) - \
(*SpB[*)Power[3(*|*),(*|*)2](*]SpB*), {0, 1}],\n    Clip[((*SpB[*)Power[(x - \
Cos[t])(*|*),(*|*)2](*]SpB*) + (*SpB[*)Power[(y - \
Sin[t])(*|*),(*|*)2](*]SpB*)) - (*SpB[*)Power[5(*|*),(*|*)2](*]SpB*), {0, \
1}],\n    Clip[((*SpB[*)Power[(x + Cos[t])(*|*),(*|*)2](*]SpB*) + \
(*SpB[*)Power[(y + Sin[t])(*|*),(*|*)2](*]SpB*)) - \
(*SpB[*)Power[10(*|*),(*|*)2](*]SpB*), {0, 1}],\n    Clip[((*SpB[*)Power[(x - \
Cos[t])(*|*),(*|*)2](*]SpB*) + (*SpB[*)Power[(y + \
Sin[t])(*|*),(*|*)2](*]SpB*)) - (*SpB[*)Power[1(*|*),(*|*)2](*]SpB*), {0, \
1}]\n  }, {x,-10,10, 0.5}, {y,-10,10, 0.5}] // serialize;\n, \
100];\n\nSetTimeout[TaskRemove[task], 10000];", "Display" -> "codemirror", 
    "Hash" -> "8023843e-766c-45e6-a2cf-3d729caa23d5", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "fd627023-5ce5-4ada-b088-253f9ddb22f1"|>, 
   <|"Data" -> ".md\nIf you made that far, **congratulations** \:2b50\:fe0f \
Now you have learned how to do the software rendering. \n\n> Please, never do \
*software rendering*. It is slow and basically is a waste of resources of \
your CPU, which was not designed for rendering graphics. Use it only for \
educational purposes, small images or complex calulations, which are not \
possible to do using GPU.", "Display" -> "codemirror", 
    "Hash" -> "5f1befb8-1885-4801-ac23-584e91def252", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "fd627023-5ce5-4ada-b088-253f9ddb22f1"|>, 
   <|"Data" -> "If you made that far, **congratulations** \:2b50\:fe0f Now \
you have learned how to do the software rendering. \n\n> Please, never do \
*software rendering*. It is slow and basically is a waste of resources of \
your CPU, which was not designed for rendering graphics. Use it only for \
educational purposes, small images or complex calulations, which are not \
possible to do using GPU.", "Display" -> "markdown", 
    "Hash" -> "e6c0a666-7cb2-4a9b-ae56-85cd0ced5e39", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "fd627023-5ce5-4ada-b088-253f9ddb22f1"|>, 
   <|"Data" -> ".md\n## Virtual Ink\nTo visualize velocity field, one can \
actually use another scalar field instead of 1000 probing balls. This scalar \
field is easy to imagine: ink \:270d\|01f3fc or dye or goo, which fell into a \
water and now is carried by the steams of \
fluid\n\n$$\n\\\\frac{\\\\partial{u_{ink}}}{\\\\partial{t}} + \
(\\\\mathbf{v}\\\\cdot \\\\nabla) u_{ink} = 0\n$$\n\nWe already know how to \
solve advection equation. Our function `advect` is used for modelling the \
momentum of fluid, which is a 2D vector field... Why not then to use __two \
kinds of ink__?\n", "Display" -> "codemirror", 
    "Hash" -> "2b5a45ca-f3b6-44cf-89c5-1f94f1912e5b", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "fd627023-5ce5-4ada-b088-253f9ddb22f1"|>, 
   <|"Data" -> "## Virtual Ink\nTo visualize velocity field, one can actually \
use another scalar field instead of 1000 probing balls. This scalar field is \
easy to imagine: ink \:270d\|01f3fc or dye or goo, which fell into a water \
and now is carried by the steams of \
fluid\n\n$$\n\\\\frac{\\\\partial{u_{ink}}}{\\\\partial{t}} + \
(\\\\mathbf{v}\\\\cdot \\\\nabla) u_{ink} = 0\n$$\n\nWe already know how to \
solve advection equation. Our function `advect` is used for modelling the \
momentum of fluid, which is a 2D vector field... Why not then to use __two \
kinds of ink__?", "Display" -> "markdown", 
    "Hash" -> "c4380cd5-8fe2-4ad6-99bf-11b0cae1e7e7", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "fd627023-5ce5-4ada-b088-253f9ddb22f1"|>, 
   <|"Data" -> "ink = Table[{0.,0.}, {i,50}, {j,50}];\n\n(*BB[*)(* transform \
to \"byte\" format \
*)(*,*)(*\"1:eJxTTMoPSmNhYGAo5gcSAUX5ZZkpqSn+BSWZ+XnFaYwgCS4g4Zyfm5uaV+KUXxEM\
Uqxsbm6exgSSBPGCSnNSg9mAjOCSosy8dLBYSFFpKpoKkDkeqYkpEFXBILO1sCgJSczMQVYCAOFrJ\
EU=\"*)(*]BB*)\nnink = NumericArray[Map[255.0 {#[[1]], 0., #[[2]]} &, ink, \
{2}], \"UnsignedInteger8\", \"ClipAndRound\"];", "Display" -> "codemirror", 
    "Hash" -> "e664272b-83de-4027-aff7-9cfaf00ad862", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"InitGroup" -> True|>, 
    "State" -> "Idle", "Type" -> "Input", "UID" -> Null, 
    "Notebook" -> "fd627023-5ce5-4ada-b088-253f9ddb22f1"|>, 
   <|"Data" -> ".md\nThen we can directly visualize `nink` scalar field \
instead of drawing many many arrows and dots. In this way we will utilize \
fully our expensive software rendering.", "Display" -> "codemirror", 
    "Hash" -> "197d658e-fc8f-4bc4-99d6-ce096e2faedf", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "fd627023-5ce5-4ada-b088-253f9ddb22f1"|>, 
   <|"Data" -> "Then we can directly visualize `nink` scalar field instead of \
drawing many many arrows and dots. In this way we will utilize fully our \
expensive software rendering.", "Display" -> "markdown", 
    "Hash" -> "1d55b368-24f6-4b3a-90c2-e01246f7db6a", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "fd627023-5ce5-4ada-b088-253f9ddb22f1"|>, 
   <|"Data" -> ".md\n__TL;DR__ Final program", "Display" -> "codemirror", 
    "Hash" -> "027d127d-90c9-461d-8e9b-4ba39995fbba", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "fd627023-5ce5-4ada-b088-253f9ddb22f1"|>, 
   <|"Data" -> "vgrid = Table[{0.,0.}, {i,50}, {j,50}];\n\ndpr   = \
FrontFetch[Graphics`DPR[]];\n\nink = 0. ink;\nnink = NumericArray[Map[255.0 \
{#[[1]], 0., #[[2]]} &, ink, {2}], \"UnsignedInteger8\", \
\"ClipAndRound\"];\n\ndest = {0,0};\ncink = {1.0,0.2};\nvfps = 0;\n\nWith[{\n \
 win = CurrentWindow[], \n  currentCell = ResultCell[]\n},\n\n  \
EventHandler[win, {\"Closed\" -> Function[Null,\n    Delete[currentCell] \
(*BB[*)(* remove output cell if a notebook has been closed \
*)(*,*)(*\"1:eJxTTMoPSmNhYGAo5gcSAUX5ZZkpqSn+BSWZ+XnFaYwgCS4g4Zyfm5uaV+KUXxEM\
Uqxsbm6exgSSBPGCSnNSg9mAjOCSosy8dLBYSFFpKpoKkDkeqYkpEFXBILO1sCgJSczMQVYCAOFrJ\
EU=\"*)(*]BB*)\n    (*BB[*)(* this will prevent the animation running \
uncontrollably on the next start \
*)(*,*)(*\"1:eJxTTMoPSmNhYGAo5gcSAUX5ZZkpqSn+BSWZ+XnFaYwgCS4g4Zyfm5uaV+KUXxEM\
Uqxsbm6exgSSBPGCSnNSg9mAjOCSosy8dLBYSFFpKpoKkDkeqYkpEFXBILO1sCgJSczMQVYCAOFrJ\
EU=\"*)(*]BB*)\n  ]}];\n\n  Graphics[{\n\n    (*BB[*)(*attach listeners to a \
user's mouse to manipulate the \
grid*)(*,*)(*\"1:eJxTTMoPSmNhYGAo5gcSAUX5ZZkpqSn+BSWZ+XnFaYwgCS4g4Zyfm5uaV+KU\
XxEMUqxsbm6exgSSBPGCSnNSg9mAjOCSosy8dLBYSFFpKpoKkDkeqYkpEFXBILO1sCgJSczMQVYCA\
OFrJEU=\"*)(*]BB*)\n    EventHandler[Graphics`Canvas[], {\n      \"click\" -> \
Function[Null,\n        cink = cink // Reverse;\n      ],\n\n      \
\"mousemove\" -> Function[pos, With[{\n          xy = {50.0 - pos[[2]], \
pos[[1]]}\n        }, \n          With[{p = Round[xy]},\n            \
If[p[[1]] <= 50-1 && p[[1]] >=2 && p[[2]] <=50-1 && p[[2]] >=2,\n             \
   (*BB[*)(* accelerate the fluid \
*)(*,*)(*\"1:eJxTTMoPSmNhYGAo5gcSAUX5ZZkpqSn+BSWZ+XnFaYwgCS4g4Zyfm5uaV+KUXxEM\
Uqxsbm6exgSSBPGCSnNSg9mAjOCSosy8dLBYSFFpKpoKkDkeqYkpEFXBILO1sCgJSczMQVYCAOFrJ\
EU=\"*)(*]BB*)\n                vgrid[[p[[1]],p[[2]]]] = Normalize[(xy - \
dest)];\n\n                (*BB[*)(* add some ink \
*)(*,*)(*\"1:eJxTTMoPSmNhYGAo5gcSAUX5ZZkpqSn+BSWZ+XnFaYwgCS4g4Zyfm5uaV+KUXxEM\
Uqxsbm6exgSSBPGCSnNSg9mAjOCSosy8dLBYSFFpKpoKkDkeqYkpEFXBILO1sCgJSczMQVYCAOFrJ\
EU=\"*)(*]BB*)\n                ink[[p[[1]],p[[2]]]] = cink;\n                \
ink[[p[[1]]+1,p[[2]]]] = cink;\n                ink[[p[[1]]-1,p[[2]]]] = \
cink;\n                ink[[p[[1]],p[[2]]+1]] = cink;\n                \
ink[[p[[1]],p[[2]]+1]] = cink;\n            ];\n\n          ];\n        \n    \
      dest = xy;\n        ] ]\n    }], \n\n    (*BB[*)(*sync with browser's \
repaint cycle and update of fps \
label*)(*,*)(*\"1:eJxTTMoPSmNhYGAo5gcSAUX5ZZkpqSn+BSWZ+XnFaYwgCS4g4Zyfm5uaV+K\
UXxEMUqxsbm6exgSSBPGCSnNSg9mAjOCSosy8dLBYSFFpKpoKkDkeqYkpEFXBILO1sCgJSczMQVYC\
AOFrJEU=\"*)(*]BB*)\n    AnimationFrameListener[vfps // Offload, \
\"Event\"->\"vframe\"], \n\n    (*BB[*)(*insert our \
Image*)(*,*)(*\"1:eJxTTMoPSmNhYGAo5gcSAUX5ZZkpqSn+BSWZ+XnFaYwgCS4g4Zyfm5uaV+K\
UXxEMUqxsbm6exgSSBPGCSnNSg9mAjOCSosy8dLBYSFFpKpoKkDkeqYkpEFXBILO1sCgJSczMQVYC\
AOFrJEU=\"*)(*]BB*)\n    Inset[\n    \n      Image[nink // Offload, \"Byte\", \
Magnification->10]\n    \n    , {0,00}, {0,0}, {50,50}\n    ],\n    \n    \
Text[vfps // Offload, {0,0}]\n\n    \n  }, \n    Controls->False, \n    \
ImageSize->(500 / dpr), \n    PlotRange->{{0,50}, {0,50}}, \n    \
ImagePadding->None\n  ]\n]\n\n(* subscribe to animation event *)\n\nvtime = \
AbsoluteTime[];\n\nEventHandler[\"vframe\", Function[Null,\n  \n  vgrid = \
advect[vgrid,vgrid, 1.0];\n  vgrid = removeDivergence[vgrid];\n  vgrid = \
removeDivergence[vgrid];\n\n  ink = With[{a = advect[vgrid, ink, 1.0]}, \
advect[vgrid, a, 1.0]];\n  nink = NumericArray[Map[255.0 {1.0 - #[[2]], 1.0- \
#[[1]], 1.0 - #[[1]], 1.0} &, ink, {2}], \"UnsignedInteger8\", \
\"ClipAndRound\"];\n  \n  vfps = (*FB[*)(((vfps + 1 / (AbsoluteTime[] - \
vtime)))(*,*)/(*,*)(2.0))(*]FB*) // Round;\n  vtime = AbsoluteTime[]; \n]];", 
    "Display" -> "codemirror", "Hash" -> 
     "71cb9143-a773-4950-b139-041dbb118bc4", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "fd627023-5ce5-4ada-b088-253f9ddb22f1"|>, 
   <|"Data" -> " ", "Display" -> "codemirror", 
    "Hash" -> "e5e755f3-11de-417a-b55f-0a60392067de", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "fd627023-5ce5-4ada-b088-253f9ddb22f1"|>, 
   <|"Data" -> ".md\nWe do here pretty much the same as before; however, \
there are no longer arrows but a single `Inset` with a raster dynamic image \
inside. This places the `Image` on top of our `Graphics` canvas. This overlay \
is helpful since we can still listen to mouse positions and display FPS at a \
low cost. The fluid goes in the same direction as the mouse.\n\nI (Me - \
@JerryI) personally believe that we pushed the implementation to the limits \
of this toy model running on a CPU with an interpretive programming language. \
The next step definitely should be to utilize GPU compute shaders such as \
WebGPU, OpenCL, CUDA to calculate bigger fields and pipe the data directly to \
the canvas. However, this will be another story.\n\nThank you \:2764\:fe0f", 
    "Display" -> "codemirror", "Hash" -> 
     "dd6998db-e7f4-4842-ad23-e5f7c54b446e", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "fd627023-5ce5-4ada-b088-253f9ddb22f1"|>, 
   <|"Data" -> "We do here pretty much the same as before; however, there are \
no longer arrows but a single `Inset` with a raster dynamic image inside. \
This places the `Image` on top of our `Graphics` canvas. This overlay is \
helpful since we can still listen to mouse positions and display FPS at a low \
cost. The fluid goes in the same direction as the mouse.\n\nI (Me - @JerryI) \
personally believe that we pushed the implementation to the limits of this \
toy model running on a CPU with an interpretive programming language. The \
next step definitely should be to utilize GPU compute shaders such as WebGPU, \
OpenCL, CUDA to calculate bigger fields and pipe the data directly to the \
canvas. However, this will be another story.\n\nThank you \:2764\:fe0f", 
    "Display" -> "markdown", "Hash" -> 
     "2b67447b-8f1f-4b64-a2b1-48f53549fdb5", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "fd627023-5ce5-4ada-b088-253f9ddb22f1"|>}, "serializer" -> "jsfn4"|>
