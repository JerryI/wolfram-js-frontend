<|"Notebook" -> <|"ReadOnly"->True, "FocusedCell" -> CellObj[JerryI`Notebook`CellObj`$310], 
   "Objects" -> <||>, "Path" -> "/users/kirill/Github/wolfram-js-frontend-dev\
/Examples/Mixing languages/Moving JS ball.wln"|>, 
 "Cells" -> {<|"Data" -> ".js\nconst canvas = \
document.createElement('canvas');\nvar ctx = \
canvas.getContext('2d');\n\ncanvas.width = 500;\ncanvas.height = \
500;\n\n\nconst ballRadius = 10;\nlet x = canvas.width / 2;\nlet y = \
canvas.height - 30;\nlet dx = 2;\nlet dy = -2;\n\nfunction drawBall() {\n  \
ctx.beginPath();\n  ctx.arc(x, y, ballRadius, 0, Math.PI * 2);\n  \
ctx.fillStyle = \"#0095DD\";\n  ctx.fill();\n  \
ctx.closePath();\n}\n\nfunction draw() {\n  ctx.clearRect(0, 0, canvas.width, \
canvas.height);\n  drawBall();\n\n  if (x + dx > canvas.width - ballRadius || \
x + dx < ballRadius) {\n    dx = -dx;\n  }\n  if (y + dy > canvas.height - \
ballRadius || y + dy < ballRadius) {\n    dy = -dy;\n  }\n\n  x += dx;\n  y \
+= dy;\n}\n\nconst interval = setInterval(draw, 10);\n\nthis.ondestroy = () \
=> {\n\tcancelInterval(interval);\n}\n\n\n\nreturn canvas;", 
    "Display" -> "codemirror", "Hash" -> 
     "5e63bb0d-6028-4553-8bef-550fced818fb", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "e6f25d92-5667-4d91-8bd5-6940141c8af3"|>, 
   <|"Data" -> "const canvas = document.createElement('canvas');\nvar ctx = \
canvas.getContext('2d');\n\ncanvas.width = 500;\ncanvas.height = \
500;\n\n\nconst ballRadius = 10;\nlet x = canvas.width / 2;\nlet y = \
canvas.height - 30;\nlet dx = 2;\nlet dy = -2;\n\nfunction drawBall() {\n  \
ctx.beginPath();\n  ctx.arc(x, y, ballRadius, 0, Math.PI * 2);\n  \
ctx.fillStyle = \"#0095DD\";\n  ctx.fill();\n  \
ctx.closePath();\n}\n\nfunction draw() {\n  ctx.clearRect(0, 0, canvas.width, \
canvas.height);\n  drawBall();\n\n  if (x + dx > canvas.width - ballRadius || \
x + dx < ballRadius) {\n    dx = -dx;\n  }\n  if (y + dy > canvas.height - \
ballRadius || y + dy < ballRadius) {\n    dy = -dy;\n  }\n\n  x += dx;\n  y \
+= dy;\n}\n\nconst interval = setInterval(draw, 10);\n\nthis.ondestroy = () \
=> {\n\tcancelInterval(interval);\n}\n\n\n\nreturn canvas;", 
    "Display" -> "js", "Hash" -> "2d83f0fe-5e0e-467a-b1c0-53c3b79f3ce7", 
    "Invisible" -> False, "MetaOnly" -> False, "Props" -> <||>, 
    "State" -> "Idle", "Type" -> "Output", "UID" -> Null, 
    "Notebook" -> "e6f25d92-5667-4d91-8bd5-6940141c8af3"|>}, 
 "serializer" -> "jsfn4"|>
