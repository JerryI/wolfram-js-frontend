<|"Notebook" -> <|"FocusedCell" -> CellObj[JerryI`Notebook`CellObj`$6905], 
   "HaveToSaveAs" -> False, "MessangerChannel" -> Messanger, 
   "ModalsChannel" -> "9f133bf0-3e61-40e8-804a-0c90f006362d", 
   "Objects" -> <|"a1130804-f7fa-4468-bb04-64c462c755ec" -> 
      <|"Public" -> Hold[Graphics3D[GraphicsComplex[
           {{5, 4, 3.7252253874734524}, {4.586954756556576, 4, 4}, 
            {5, 3.7252253874734524, 4}, {5, 3.7252253874734524, 4}, 
            {5.413045243443424, 4, 4}, {5, 4, 3.7252253874734524}, 
            {4, 5, 3.7252253874734524}, {3.7252253874734524, 5, 4}, 
            {4, 4.586954756556576, 4}, {4.586954756556576, 4, 4}, 
            {4, 5, 3.7252253874734524}, {4, 4.586954756556576, 4}, 
            {4.586954756556576, 4, 4}, {5, 4, 3.7252253874734524}, 
            {4, 5, 3.7252253874734524}, {5, 4, 3.7252253874734524}, 
            {5, 5, 3.233675113320812}, {4, 5, 3.7252253874734524}, 
            {6, 4.586954756556576, 4}, {5, 4, 3.7252253874734524}, 
            {5.413045243443424, 4, 4}, {6, 4.586954756556576, 4}, 
            {6, 5, 3.7252253874734524}, {5, 4, 3.7252253874734524}, 
            {6, 5, 3.7252253874734524}, {5, 5, 3.233675113320812}, 
            {5, 4, 3.7252253874734524}, {6, 4.586954756556576, 4}, 
            {6.274774612526548, 5, 4}, {6, 5, 3.7252253874734524}, 
            {4, 5, 3.7252253874734524}, {4, 5.413045243443424, 4}, 
            {3.7252253874734524, 5, 4}, {4, 5.413045243443424, 4}, 
            {5, 6, 3.7252253874734524}, {4.586954756556576, 6, 4}, 
            {4, 5.413045243443424, 4}, {4, 5, 3.7252253874734524}, 
            {5, 6, 3.7252253874734524}, {4, 5, 3.7252253874734524}, 
            {5, 5, 3.233675113320812}, {5, 6, 3.7252253874734524}, 
            {5.413045243443424, 6, 4}, {6, 5, 3.7252253874734524}, 
            {6, 5.413045243443424, 4}, {5.413045243443424, 6, 4}, 
            {5, 6, 3.7252253874734524}, {6, 5, 3.7252253874734524}, 
            {5, 6, 3.7252253874734524}, {5, 5, 3.233675113320812}, 
            {6, 5, 3.7252253874734524}, {6.274774612526548, 5, 4}, 
            {6, 5.413045243443424, 4}, {6, 5, 3.7252253874734524}, 
            {5, 6, 3.7252253874734524}, {5, 6.274774612526548, 4}, 
            {4.586954756556576, 6, 4}, {5.413045243443424, 6, 4}, 
            {5, 6.274774612526548, 4}, {5, 6, 3.7252253874734524}, 
            {4, 4, 4.586954756556576}, {3.7252253874734524, 4, 5}, 
            {4, 3.7252253874734524, 5}, {4, 4, 4.586954756556576}, 
            {5, 3.7252253874734524, 4}, {4.586954756556576, 4, 4}, 
            {4, 4, 4.586954756556576}, {4, 3.7252253874734524, 5}, 
            {5, 3.7252253874734524, 4}, {4, 3.7252253874734524, 5}, 
            {5, 3.233675113320812, 5}, {5, 3.7252253874734524, 4}, 
            {5.413045243443424, 4, 4}, {6, 3.7252253874734524, 5}, 
            {6, 4, 4.586954756556576}, {5.413045243443424, 4, 4}, 
            {5, 3.7252253874734524, 4}, {6, 3.7252253874734524, 5}, 
            {5, 3.7252253874734524, 4}, {5, 3.233675113320812, 5}, 
            {6, 3.7252253874734524, 5}, {6, 3.7252253874734524, 5}, 
            {6.274774612526548, 4, 5}, {6, 4, 4.586954756556576}, 
            {4, 4.586954756556576, 4}, {3.7252253874734524, 4, 5}, 
            {4, 4, 4.586954756556576}, {4, 4.586954756556576, 4}, 
            {3.7252253874734524, 5, 4}, {3.7252253874734524, 4, 5}, 
            {3.7252253874734524, 5, 4}, {3.233675113320812, 5, 5}, 
            {3.7252253874734524, 4, 5}, {4.586954756556576, 4, 4}, 
            {4, 4.586954756556576, 4}, {4, 4, 4.586954756556576}, 
            {5.413045243443424, 4, 4}, {6, 4, 4.586954756556576}, 
            {6, 4.586954756556576, 4}, {6, 4, 4.586954756556576}, 
            {6.274774612526548, 5, 4}, {6, 4.586954756556576, 4}, 
            {6, 4, 4.586954756556576}, {6.274774612526548, 4, 5}, 
            {6.274774612526548, 5, 4}, {6.274774612526548, 4, 5}, 
            {6.766324886679188, 5, 5}, {6.274774612526548, 5, 4}, 
            {4, 6, 4.586954756556576}, {3.7252253874734524, 5, 4}, 
            {4, 5.413045243443424, 4}, {4, 6, 4.586954756556576}, 
            {3.7252253874734524, 6, 5}, {3.7252253874734524, 5, 4}, 
            {3.7252253874734524, 6, 5}, {3.233675113320812, 5, 5}, 
            {3.7252253874734524, 5, 4}, {4, 5.413045243443424, 4}, 
            {4.586954756556576, 6, 4}, {4, 6, 4.586954756556576}, 
            {6, 5.413045243443424, 4}, {6, 6, 4.586954756556576}, 
            {5.413045243443424, 6, 4}, {6, 5.413045243443424, 4}, 
            {6.274774612526548, 6, 5}, {6, 6, 4.586954756556576}, 
            {6, 5.413045243443424, 4}, {6.274774612526548, 5, 4}, 
            {6.274774612526548, 6, 5}, {6.274774612526548, 5, 4}, 
            {6.766324886679188, 5, 5}, {6.274774612526548, 6, 5}, 
            {4, 6, 4.586954756556576}, {4, 6.274774612526548, 5}, 
            {3.7252253874734524, 6, 5}, {4.586954756556576, 6, 4}, 
            {4, 6.274774612526548, 5}, {4, 6, 4.586954756556576}, 
            {4.586954756556576, 6, 4}, {5, 6.274774612526548, 4}, 
            {4, 6.274774612526548, 5}, {5, 6.274774612526548, 4}, 
            {5, 6.766324886679188, 5}, {4, 6.274774612526548, 5}, 
            {6, 6, 4.586954756556576}, {5, 6.274774612526548, 4}, 
            {5.413045243443424, 6, 4}, {6, 6, 4.586954756556576}, 
            {6, 6.274774612526548, 5}, {5, 6.274774612526548, 4}, 
            {6, 6.274774612526548, 5}, {5, 6.766324886679188, 5}, 
            {5, 6.274774612526548, 4}, {6.274774612526548, 6, 5}, 
            {6, 6.274774612526548, 5}, {6, 6, 4.586954756556576}, 
            {4, 3.7252253874734524, 5}, {3.7252253874734524, 4, 5}, 
            {4, 4, 5.413045243443424}, {4.586954756556576, 4, 6}, 
            {4, 3.7252253874734524, 5}, {4, 4, 5.413045243443424}, 
            {4.586954756556576, 4, 6}, {5, 3.7252253874734524, 6}, 
            {4, 3.7252253874734524, 5}, {5, 3.7252253874734524, 6}, 
            {5, 3.233675113320812, 5}, {4, 3.7252253874734524, 5}, 
            {6, 4, 5.413045243443424}, {5, 3.7252253874734524, 6}, 
            {5.413045243443424, 4, 6}, {6, 4, 5.413045243443424}, 
            {6, 3.7252253874734524, 5}, {5, 3.7252253874734524, 6}, 
            {6, 3.7252253874734524, 5}, {5, 3.233675113320812, 5}, 
            {5, 3.7252253874734524, 6}, {6, 3.7252253874734524, 5}, 
            {6, 4, 5.413045243443424}, {6.274774612526548, 4, 5}, 
            {4, 4, 5.413045243443424}, {3.7252253874734524, 5, 6}, 
            {4, 4.586954756556576, 6}, {4, 4, 5.413045243443424}, 
            {3.7252253874734524, 4, 5}, {3.7252253874734524, 5, 6}, 
            {3.7252253874734524, 4, 5}, {3.233675113320812, 5, 5}, 
            {3.7252253874734524, 5, 6}, {4.586954756556576, 4, 6}, 
            {4, 4, 5.413045243443424}, {4, 4.586954756556576, 6}, 
            {6, 4, 5.413045243443424}, {5.413045243443424, 4, 6}, 
            {6, 4.586954756556576, 6}, {6, 4.586954756556576, 6}, 
            {6.274774612526548, 4, 5}, {6, 4, 5.413045243443424}, 
            {6, 4.586954756556576, 6}, {6.274774612526548, 5, 6}, 
            {6.274774612526548, 4, 5}, {6.274774612526548, 5, 6}, 
            {6.766324886679188, 5, 5}, {6.274774612526548, 4, 5}, 
            {4, 5.413045243443424, 6}, {3.7252253874734524, 6, 5}, 
            {4, 6, 5.413045243443424}, {4, 5.413045243443424, 6}, 
            {3.7252253874734524, 5, 6}, {3.7252253874734524, 6, 5}, 
            {3.7252253874734524, 5, 6}, {3.233675113320812, 5, 5}, 
            {3.7252253874734524, 6, 5}, {4, 5.413045243443424, 6}, 
            {4, 6, 5.413045243443424}, {4.586954756556576, 6, 6}, 
            {6, 6, 5.413045243443424}, {6, 5.413045243443424, 6}, 
            {5.413045243443424, 6, 6}, {6, 6, 5.413045243443424}, 
            {6.274774612526548, 5, 6}, {6, 5.413045243443424, 6}, 
            {6, 6, 5.413045243443424}, {6.274774612526548, 6, 5}, 
            {6.274774612526548, 5, 6}, {6.274774612526548, 6, 5}, 
            {6.766324886679188, 5, 5}, {6.274774612526548, 5, 6}, 
            {3.7252253874734524, 6, 5}, {4, 6.274774612526548, 5}, 
            {4, 6, 5.413045243443424}, {4, 6, 5.413045243443424}, 
            {5, 6.274774612526548, 6}, {4.586954756556576, 6, 6}, 
            {4, 6, 5.413045243443424}, {4, 6.274774612526548, 5}, 
            {5, 6.274774612526548, 6}, {4, 6.274774612526548, 5}, 
            {5, 6.766324886679188, 5}, {5, 6.274774612526548, 6}, 
            {5.413045243443424, 6, 6}, {6, 6.274774612526548, 5}, 
            {6, 6, 5.413045243443424}, {5.413045243443424, 6, 6}, 
            {5, 6.274774612526548, 6}, {6, 6.274774612526548, 5}, 
            {5, 6.274774612526548, 6}, {5, 6.766324886679188, 5}, 
            {6, 6.274774612526548, 5}, {6.274774612526548, 6, 5}, 
            {6, 6, 5.413045243443424}, {6, 6.274774612526548, 5}, 
            {5, 3.7252253874734524, 6}, {4.586954756556576, 4, 6}, 
            {5, 4, 6.274774612526548}, {5, 3.7252253874734524, 6}, 
            {5, 4, 6.274774612526548}, {5.413045243443424, 4, 6}, 
            {4, 4.586954756556576, 6}, {3.7252253874734524, 5, 6}, 
            {4, 5, 6.274774612526548}, {4, 4.586954756556576, 6}, 
            {5, 4, 6.274774612526548}, {4.586954756556576, 4, 6}, 
            {4, 4.586954756556576, 6}, {4, 5, 6.274774612526548}, 
            {5, 4, 6.274774612526548}, {4, 5, 6.274774612526548}, 
            {5, 5, 6.766324886679188}, {5, 4, 6.274774612526548}, 
            {5.413045243443424, 4, 6}, {6, 5, 6.274774612526548}, 
            {6, 4.586954756556576, 6}, {5.413045243443424, 4, 6}, 
            {5, 4, 6.274774612526548}, {6, 5, 6.274774612526548}, 
            {5, 4, 6.274774612526548}, {5, 5, 6.766324886679188}, 
            {6, 5, 6.274774612526548}, {6, 4.586954756556576, 6}, 
            {6, 5, 6.274774612526548}, {6.274774612526548, 5, 6}, 
            {3.7252253874734524, 5, 6}, {4, 5.413045243443424, 6}, 
            {4, 5, 6.274774612526548}, {4.586954756556576, 6, 6}, 
            {4, 5, 6.274774612526548}, {4, 5.413045243443424, 6}, 
            {4.586954756556576, 6, 6}, {5, 6, 6.274774612526548}, 
            {4, 5, 6.274774612526548}, {5, 6, 6.274774612526548}, 
            {5, 5, 6.766324886679188}, {4, 5, 6.274774612526548}, 
            {6, 5.413045243443424, 6}, {5, 6, 6.274774612526548}, 
            {5.413045243443424, 6, 6}, {6, 5.413045243443424, 6}, 
            {6, 5, 6.274774612526548}, {5, 6, 6.274774612526548}, 
            {6, 5, 6.274774612526548}, {5, 5, 6.766324886679188}, 
            {5, 6, 6.274774612526548}, {6.274774612526548, 5, 6}, 
            {6, 5, 6.274774612526548}, {6, 5.413045243443424, 6}, 
            {4.586954756556576, 6, 6}, {5, 6.274774612526548, 6}, 
            {5, 6, 6.274774612526548}, {5.413045243443424, 6, 6}, 
            {5, 6, 6.274774612526548}, {5, 6.274774612526548, 6}}, 
           {Polygon[1, 312]}]]]|>|>, "Path" -> "/Users/kirill/Github/wolfram-\
js-frontend/Demos/09 - Mixing languages/Marching Cubes.wln", "Quick" -> True, 
   "Symbols" -> <||>, "TOC" -> {Notebook`Editor`TOC`Private`heading[1, 
      "Marching Cubes", CellObj[JerryI`Notebook`CellObj`$1696]], 
     Notebook`Editor`TOC`Private`heading[2, "LibraryLink", 
      CellObj[JerryI`Notebook`CellObj`$1699]], 
     Notebook`Editor`TOC`Private`heading[2, "3D Paint", 
      CellObj[JerryI`Notebook`CellObj`$1721]], 
     Notebook`Editor`TOC`Private`heading[2, "Meta-balls", 
      CellObj[JerryI`Notebook`CellObj`$1769]], 
     Notebook`Editor`TOC`Private`heading[2, "Calculate normals", 
      CellObj[JerryI`Notebook`CellObj`$6902]]}|>, 
 "Cells" -> {<|"Data" -> ".md\n# Marching Cubes\n*using LibraryLink and fast \
non-indexed geometry*\n\nThe idea is to use plain `Graphics3D` for drawing \
shapes and possibly animating them up to 1 million polygons.", 
    "Display" -> "codemirror", "Hash" -> 
     "7ec27c9e-5c9b-4794-aec8-9d6d48c307d4", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "ce86f683-e9ab-4299-9bbc-893976763c70"|>, 
   <|"Data" -> "# Marching Cubes\n*using LibraryLink and fast non-indexed \
geometry*\n\nThe idea is to use plain `Graphics3D` for drawing shapes and \
possibly animating them up to 1 million polygons.", "Display" -> "markdown", 
    "Hash" -> "53fa1eb2-e163-4816-8650-438979ebee18", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "ce86f683-e9ab-4299-9bbc-893976763c70"|>, 
   <|"Data" -> ".md\n## LibraryLink\nWe use C-program to compute vertices \
based for isosurfaces of 3D array", "Display" -> "codemirror", 
    "Hash" -> "e929d65f-d760-4af5-a032-28afd3ec30fd", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "ce86f683-e9ab-4299-9bbc-893976763c70"|>, 
   <|"Data" -> "## LibraryLink\nWe use C-program to compute vertices based \
for isosurfaces of 3D array", "Display" -> "markdown", 
    "Hash" -> "92fd448d-d318-4b78-aedd-24984648f04f", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "ce86f683-e9ab-4299-9bbc-893976763c70"|>, 
   <|"Data" -> "Get[\"CCompilerDriver`\"]; \nGet[\"LibraryLink`\"];", 
    "Display" -> "codemirror", "Hash" -> 
     "710067b8-a3d7-4bc1-9ad6-c69e19975a20", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"InitGroup" -> True|>, 
    "State" -> "Idle", "Type" -> "Input", "UID" -> Null, 
    "Notebook" -> "ce86f683-e9ab-4299-9bbc-893976763c70"|>, 
   <|"Data" -> ".md\nNow define header files with all precomputed 254 cases \
for vertices of cubes", "Display" -> "codemirror", 
    "Hash" -> "8c16a87f-af45-4f87-af30-d41fc4bc6df4", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "ce86f683-e9ab-4299-9bbc-893976763c70"|>, 
   <|"Data" -> "Now define header files with all precomputed 254 cases for \
vertices of cubes", "Display" -> "markdown", 
    "Hash" -> "b0ef29ef-c5e1-466f-b840-f05732d3d5cb", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "ce86f683-e9ab-4299-9bbc-893976763c70"|>, 
   <|"Data" -> "tables.h\ndouble linearTable[12][3] = {\n    {0.5, 0.0, 0.0}, \
// Edge 0\n    {1.0, 0.0, 0.5}, // Edge 1\n    {0.5, 0.0, 1.0}, // Edge 2\n   \
 {0.0, 0.0, 0.5}, // Edge 3\n    {0.5, 1.0, 0.0}, // Edge 4\n    {1.0, 1.0, \
0.5}, // Edge 5\n    {0.5, 1.0, 1.0}, // Edge 6\n    {0.0, 1.0, 0.5}, // Edge \
7\n    {0.0, 0.5, 0.0}, // Edge 8\n    {1.0, 0.5, 0.0}, // Edge 9\n    {1.0, \
0.5, 1.0}, // Edge 10\n    {0.0, 0.5, 1.0}  // Edge 11\n};\n\nint \
triangulationTable[TRIANGULATION_TABLE_SIZE][16] = {\n    {-1, -1, -1, -1, \
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},\n    {0, 8, 3, -1, -1, -1, \
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1},\n    {0, 1, 9, -1, -1, -1, -1, -1, \
-1, -1, -1, -1, -1, -1, -1, -1},\n    {1, 8, 3, 9, 8, 1, -1, -1, -1, -1, -1, \
-1, -1, -1, -1, -1},\n    {1, 2, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, \
-1, -1, -1},\n    {0, 8, 3, 1, 2, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, \
-1},\n    {9, 2, 10, 0, 2, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},\n    \
{2, 8, 3, 2, 10, 8, 10, 9, 8, -1, -1, -1, -1, -1, -1, -1},\n    {3, 11, 2, \
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},\n    {0, 11, 2, 8, 11, \
0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},\n    {1, 9, 0, 2, 3, 11, -1, -1, \
-1, -1, -1, -1, -1, -1, -1, -1},\n    {1, 11, 2, 1, 9, 11, 9, 8, 11, -1, -1, \
-1, -1, -1, -1, -1},\n    {3, 10, 1, 11, 10, 3, -1, -1, -1, -1, -1, -1, -1, \
-1, -1, -1},\n    {0, 10, 1, 0, 8, 10, 8, 11, 10, -1, -1, -1, -1, -1, -1, \
-1},\n    {3, 9, 0, 3, 11, 9, 11, 10, 9, -1, -1, -1, -1, -1, -1, -1},\n    \
{9, 8, 10, 10, 8, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},\n    {4, 7, 8, \
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},\n    {4, 3, 0, 7, 3, 4, \
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1},\n    {0, 1, 9, 8, 4, 7, -1, -1, -1, \
-1, -1, -1, -1, -1, -1, -1},\n    {4, 1, 9, 4, 7, 1, 7, 3, 1, -1, -1, -1, -1, \
-1, -1, -1},\n    {1, 2, 10, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, \
-1},\n    {3, 4, 7, 3, 0, 4, 1, 2, 10, -1, -1, -1, -1, -1, -1, -1},\n    {9, \
2, 10, 9, 0, 2, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1},\n    {2, 10, 9, 2, 9, \
7, 2, 7, 3, 7, 9, 4, -1, -1, -1, -1},\n    {8, 4, 7, 3, 11, 2, -1, -1, -1, \
-1, -1, -1, -1, -1, -1, -1},\n    {11, 4, 7, 11, 2, 4, 2, 0, 4, -1, -1, -1, \
-1, -1, -1, -1},\n    {9, 0, 1, 8, 4, 7, 2, 3, 11, -1, -1, -1, -1, -1, -1, \
-1},\n    {4, 7, 11, 9, 4, 11, 9, 11, 2, 9, 2, 1, -1, -1, -1, -1},\n    {3, \
10, 1, 3, 11, 10, 7, 8, 4, -1, -1, -1, -1, -1, -1, -1},\n    {1, 11, 10, 1, \
4, 11, 1, 0, 4, 7, 11, 4, -1, -1, -1, -1},\n    {4, 7, 8, 9, 0, 11, 9, 11, \
10, 11, 0, 3, -1, -1, -1, -1},\n    {4, 7, 11, 4, 11, 9, 9, 11, 10, -1, -1, \
-1, -1, -1, -1, -1},\n    {9, 5, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, \
-1, -1, -1},\n    {9, 5, 4, 0, 8, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, \
-1},\n    {0, 5, 4, 1, 5, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},\n    \
{8, 5, 4, 8, 3, 5, 3, 1, 5, -1, -1, -1, -1, -1, -1, -1},\n    {1, 2, 10, 9, \
5, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},\n    {3, 0, 8, 1, 2, 10, 4, 9, \
5, -1, -1, -1, -1, -1, -1, -1},\n    {5, 2, 10, 5, 4, 2, 4, 0, 2, -1, -1, -1, \
-1, -1, -1, -1},\n    {2, 10, 5, 3, 2, 5, 3, 5, 4, 3, 4, 8, -1, -1, -1, \
-1},\n    {9, 5, 4, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},\n    \
{0, 11, 2, 0, 8, 11, 4, 9, 5, -1, -1, -1, -1, -1, -1, -1},\n    {0, 5, 4, 0, \
1, 5, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1},\n    {2, 1, 5, 2, 5, 8, 2, 8, \
11, 4, 8, 5, -1, -1, -1, -1},\n    {10, 3, 11, 10, 1, 3, 9, 5, 4, -1, -1, -1, \
-1, -1, -1, -1},\n    {4, 9, 5, 0, 8, 1, 8, 10, 1, 8, 11, 10, -1, -1, -1, \
-1},\n    {5, 4, 0, 5, 0, 11, 5, 11, 10, 11, 0, 3, -1, -1, -1, -1},\n    {5, \
4, 8, 5, 8, 10, 10, 8, 11, -1, -1, -1, -1, -1, -1, -1},\n    {9, 7, 8, 5, 7, \
9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},\n    {9, 3, 0, 9, 5, 3, 5, 7, 3, \
-1, -1, -1, -1, -1, -1, -1},\n    {0, 7, 8, 0, 1, 7, 1, 5, 7, -1, -1, -1, -1, \
-1, -1, -1},\n    {1, 5, 3, 3, 5, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, \
-1},\n    {9, 7, 8, 9, 5, 7, 10, 1, 2, -1, -1, -1, -1, -1, -1, -1},\n    {10, \
1, 2, 9, 5, 0, 5, 3, 0, 5, 7, 3, -1, -1, -1, -1},\n    {8, 0, 2, 8, 2, 5, 8, \
5, 7, 10, 5, 2, -1, -1, -1, -1},\n    {2, 10, 5, 2, 5, 3, 3, 5, 7, -1, -1, \
-1, -1, -1, -1, -1},\n    {7, 9, 5, 7, 8, 9, 3, 11, 2, -1, -1, -1, -1, -1, \
-1, -1},\n    {9, 5, 7, 9, 7, 2, 9, 2, 0, 2, 7, 11, -1, -1, -1, -1},\n    {2, \
3, 11, 0, 1, 8, 1, 7, 8, 1, 5, 7, -1, -1, -1, -1},\n    {11, 2, 1, 11, 1, 7, \
7, 1, 5, -1, -1, -1, -1, -1, -1, -1},\n    {9, 5, 8, 8, 5, 7, 10, 1, 3, 10, \
3, 11, -1, -1, -1, -1},\n    {5, 7, 0, 5, 0, 9, 7, 11, 0, 1, 0, 10, 11, 10, \
0, -1},\n    {11, 10, 0, 11, 0, 3, 10, 5, 0, 8, 0, 7, 5, 7, 0, -1},\n    {11, \
10, 5, 7, 11, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},\n    {10, 6, 5, -1, \
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},\n    {0, 8, 3, 5, 10, 6, -1, \
-1, -1, -1, -1, -1, -1, -1, -1, -1},\n    {9, 0, 1, 5, 10, 6, -1, -1, -1, -1, \
-1, -1, -1, -1, -1, -1},\n    {1, 8, 3, 1, 9, 8, 5, 10, 6, -1, -1, -1, -1, \
-1, -1, -1},\n    {1, 6, 5, 2, 6, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, \
-1},\n    {1, 6, 5, 1, 2, 6, 3, 0, 8, -1, -1, -1, -1, -1, -1, -1},\n    {9, \
6, 5, 9, 0, 6, 0, 2, 6, -1, -1, -1, -1, -1, -1, -1},\n    {5, 9, 8, 5, 8, 2, \
5, 2, 6, 3, 2, 8, -1, -1, -1, -1},\n    {2, 3, 11, 10, 6, 5, -1, -1, -1, -1, \
-1, -1, -1, -1, -1, -1},\n    {11, 0, 8, 11, 2, 0, 10, 6, 5, -1, -1, -1, -1, \
-1, -1, -1},\n    {0, 1, 9, 2, 3, 11, 5, 10, 6, -1, -1, -1, -1, -1, -1, \
-1},\n    {5, 10, 6, 1, 9, 2, 9, 11, 2, 9, 8, 11, -1, -1, -1, -1},\n    {6, \
3, 11, 6, 5, 3, 5, 1, 3, -1, -1, -1, -1, -1, -1, -1},\n    {0, 8, 11, 0, 11, \
5, 0, 5, 1, 5, 11, 6, -1, -1, -1, -1},\n    {3, 11, 6, 0, 3, 6, 0, 6, 5, 0, \
5, 9, -1, -1, -1, -1},\n    {6, 5, 9, 6, 9, 11, 11, 9, 8, -1, -1, -1, -1, -1, \
-1, -1},\n    {5, 10, 6, 4, 7, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},\n  \
  {4, 3, 0, 4, 7, 3, 6, 5, 10, -1, -1, -1, -1, -1, -1, -1},\n    {1, 9, 0, 5, \
10, 6, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1},\n    {10, 6, 5, 1, 9, 7, 1, 7, \
3, 7, 9, 4, -1, -1, -1, -1},\n    {6, 1, 2, 6, 5, 1, 4, 7, 8, -1, -1, -1, -1, \
-1, -1, -1},\n    {1, 2, 5, 5, 2, 6, 3, 0, 4, 3, 4, 7, -1, -1, -1, -1},\n    \
{8, 4, 7, 9, 0, 5, 0, 6, 5, 0, 2, 6, -1, -1, -1, -1},\n    {7, 3, 9, 7, 9, 4, \
3, 2, 9, 5, 9, 6, 2, 6, 9, -1},\n    {3, 11, 2, 7, 8, 4, 10, 6, 5, -1, -1, \
-1, -1, -1, -1, -1},\n    {5, 10, 6, 4, 7, 2, 4, 2, 0, 2, 7, 11, -1, -1, -1, \
-1},\n    {0, 1, 9, 4, 7, 8, 2, 3, 11, 5, 10, 6, -1, -1, -1, -1},\n    {9, 2, \
1, 9, 11, 2, 9, 4, 11, 7, 11, 4, 5, 10, 6, -1},\n    {8, 4, 7, 3, 11, 5, 3, \
5, 1, 5, 11, 6, -1, -1, -1, -1},\n    {5, 1, 11, 5, 11, 6, 1, 0, 11, 7, 11, \
4, 0, 4, 11, -1},\n    {0, 5, 9, 0, 6, 5, 0, 3, 6, 11, 6, 3, 8, 4, 7, -1},\n  \
  {6, 5, 9, 6, 9, 11, 4, 7, 9, 7, 11, 9, -1, -1, -1, -1},\n    {10, 4, 9, 6, \
4, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},\n    {4, 10, 6, 4, 9, 10, 0, \
8, 3, -1, -1, -1, -1, -1, -1, -1},\n    {10, 0, 1, 10, 6, 0, 6, 4, 0, -1, -1, \
-1, -1, -1, -1, -1},\n    {8, 3, 1, 8, 1, 6, 8, 6, 4, 6, 1, 10, -1, -1, -1, \
-1},\n    {1, 4, 9, 1, 2, 4, 2, 6, 4, -1, -1, -1, -1, -1, -1, -1},\n    {3, \
0, 8, 1, 2, 9, 2, 4, 9, 2, 6, 4, -1, -1, -1, -1},\n    {0, 2, 4, 4, 2, 6, -1, \
-1, -1, -1, -1, -1, -1, -1, -1, -1},\n    {8, 3, 2, 8, 2, 4, 4, 2, 6, -1, -1, \
-1, -1, -1, -1, -1},\n    {10, 4, 9, 10, 6, 4, 11, 2, 3, -1, -1, -1, -1, -1, \
-1, -1},\n    {0, 8, 2, 2, 8, 11, 4, 9, 10, 4, 10, 6, -1, -1, -1, -1},\n    \
{3, 11, 2, 0, 1, 6, 0, 6, 4, 6, 1, 10, -1, -1, -1, -1},\n    {6, 4, 1, 6, 1, \
10, 4, 8, 1, 2, 1, 11, 8, 11, 1, -1},\n    {9, 6, 4, 9, 3, 6, 9, 1, 3, 11, 6, \
3, -1, -1, -1, -1},\n    {8, 11, 1, 8, 1, 0, 11, 6, 1, 9, 1, 4, 6, 4, 1, \
-1},\n    {3, 11, 6, 3, 6, 0, 0, 6, 4, -1, -1, -1, -1, -1, -1, -1},\n    {6, \
4, 8, 11, 6, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},\n    {7, 10, 6, 7, \
8, 10, 8, 9, 10, -1, -1, -1, -1, -1, -1, -1},\n    {0, 7, 3, 0, 10, 7, 0, 9, \
10, 6, 7, 10, -1, -1, -1, -1},\n    {10, 6, 7, 1, 10, 7, 1, 7, 8, 1, 8, 0, \
-1, -1, -1, -1},\n    {10, 6, 7, 10, 7, 1, 1, 7, 3, -1, -1, -1, -1, -1, -1, \
-1},\n    {1, 2, 6, 1, 6, 8, 1, 8, 9, 8, 6, 7, -1, -1, -1, -1},\n    {2, 6, \
9, 2, 9, 1, 6, 7, 9, 0, 9, 3, 7, 3, 9, -1},\n    {7, 8, 0, 7, 0, 6, 6, 0, 2, \
-1, -1, -1, -1, -1, -1, -1},\n    {7, 3, 2, 6, 7, 2, -1, -1, -1, -1, -1, -1, \
-1, -1, -1, -1},\n    {2, 3, 11, 10, 6, 8, 10, 8, 9, 8, 6, 7, -1, -1, -1, \
-1},\n    {2, 0, 7, 2, 7, 11, 0, 9, 7, 6, 7, 10, 9, 10, 7, -1},\n    {1, 8, \
0, 1, 7, 8, 1, 10, 7, 6, 7, 10, 2, 3, 11, -1},\n    {11, 2, 1, 11, 1, 7, 10, \
6, 1, 6, 7, 1, -1, -1, -1, -1},\n    {8, 9, 6, 8, 6, 7, 9, 1, 6, 11, 6, 3, 1, \
3, 6, -1},\n    {0, 9, 1, 11, 6, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, \
-1},\n    {7, 8, 0, 7, 0, 6, 3, 11, 0, 11, 6, 0, -1, -1, -1, -1},\n    {7, \
11, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},\n    {7, 6, 11, \
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},\n    {3, 0, 8, 11, 7, 6, \
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1},\n    {0, 1, 9, 11, 7, 6, -1, -1, -1, \
-1, -1, -1, -1, -1, -1, -1},\n    {8, 1, 9, 8, 3, 1, 11, 7, 6, -1, -1, -1, \
-1, -1, -1, -1},\n    {10, 1, 2, 6, 11, 7, -1, -1, -1, -1, -1, -1, -1, -1, \
-1, -1},\n    {1, 2, 10, 3, 0, 8, 6, 11, 7, -1, -1, -1, -1, -1, -1, -1},\n    \
{2, 9, 0, 2, 10, 9, 6, 11, 7, -1, -1, -1, -1, -1, -1, -1},\n    {6, 11, 7, 2, \
10, 3, 10, 8, 3, 10, 9, 8, -1, -1, -1, -1},\n    {7, 2, 3, 6, 2, 7, -1, -1, \
-1, -1, -1, -1, -1, -1, -1, -1},\n    {7, 0, 8, 7, 6, 0, 6, 2, 0, -1, -1, -1, \
-1, -1, -1, -1},\n    {2, 7, 6, 2, 3, 7, 0, 1, 9, -1, -1, -1, -1, -1, -1, \
-1},\n    {1, 6, 2, 1, 8, 6, 1, 9, 8, 8, 7, 6, -1, -1, -1, -1},\n    {10, 7, \
6, 10, 1, 7, 1, 3, 7, -1, -1, -1, -1, -1, -1, -1},\n    {10, 7, 6, 1, 7, 10, \
1, 8, 7, 1, 0, 8, -1, -1, -1, -1},\n    {0, 3, 7, 0, 7, 10, 0, 10, 9, 6, 10, \
7, -1, -1, -1, -1},\n    {7, 6, 10, 7, 10, 8, 8, 10, 9, -1, -1, -1, -1, -1, \
-1, -1},\n    {6, 8, 4, 11, 8, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},\n  \
  {3, 6, 11, 3, 0, 6, 0, 4, 6, -1, -1, -1, -1, -1, -1, -1},\n    {8, 6, 11, \
8, 4, 6, 9, 0, 1, -1, -1, -1, -1, -1, -1, -1},\n    {9, 4, 6, 9, 6, 3, 9, 3, \
1, 11, 3, 6, -1, -1, -1, -1},\n    {6, 8, 4, 6, 11, 8, 2, 10, 1, -1, -1, -1, \
-1, -1, -1, -1},\n    {1, 2, 10, 3, 0, 11, 0, 6, 11, 0, 4, 6, -1, -1, -1, \
-1},\n    {4, 11, 8, 4, 6, 11, 0, 2, 9, 2, 10, 9, -1, -1, -1, -1},\n    {10, \
9, 3, 10, 3, 2, 9, 4, 3, 11, 3, 6, 4, 6, 3, -1},\n    {8, 2, 3, 8, 4, 2, 4, \
6, 2, -1, -1, -1, -1, -1, -1, -1},\n    {0, 4, 2, 4, 6, 2, -1, -1, -1, -1, \
-1, -1, -1, -1, -1, -1},\n    {1, 9, 0, 2, 3, 4, 2, 4, 6, 4, 3, 8, -1, -1, \
-1, -1},\n    {1, 9, 4, 1, 4, 2, 2, 4, 6, -1, -1, -1, -1, -1, -1, -1},\n    \
{8, 1, 3, 8, 6, 1, 8, 4, 6, 6, 10, 1, -1, -1, -1, -1},\n    {10, 1, 0, 10, 0, \
6, 6, 0, 4, -1, -1, -1, -1, -1, -1, -1},\n    {4, 6, 3, 4, 3, 8, 6, 10, 3, 0, \
3, 9, 10, 9, 3, -1},\n    {10, 9, 4, 6, 10, 4, -1, -1, -1, -1, -1, -1, -1, \
-1, -1, -1},\n    {4, 9, 5, 7, 6, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, \
-1},\n    {0, 8, 3, 4, 9, 5, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1},\n    {5, \
0, 1, 5, 4, 0, 7, 6, 11, -1, -1, -1, -1, -1, -1, -1},\n    {11, 7, 6, 8, 3, \
4, 3, 5, 4, 3, 1, 5, -1, -1, -1, -1},\n    {9, 5, 4, 10, 1, 2, 7, 6, 11, -1, \
-1, -1, -1, -1, -1, -1},\n    {6, 11, 7, 1, 2, 10, 0, 8, 3, 4, 9, 5, -1, -1, \
-1, -1},\n    {7, 6, 11, 5, 4, 10, 4, 2, 10, 4, 0, 2, -1, -1, -1, -1},\n    \
{3, 4, 8, 3, 5, 4, 3, 2, 5, 10, 5, 2, 11, 7, 6, -1},\n    {7, 2, 3, 7, 6, 2, \
5, 4, 9, -1, -1, -1, -1, -1, -1, -1},\n    {9, 5, 4, 0, 8, 6, 0, 6, 2, 6, 8, \
7, -1, -1, -1, -1},\n    {3, 6, 2, 3, 7, 6, 1, 5, 0, 5, 4, 0, -1, -1, -1, \
-1},\n    {6, 2, 8, 6, 8, 7, 2, 1, 8, 4, 8, 5, 1, 5, 8, -1},\n    {9, 5, 4, \
10, 1, 6, 1, 7, 6, 1, 3, 7, -1, -1, -1, -1},\n    {1, 6, 10, 1, 7, 6, 1, 0, \
7, 8, 7, 0, 9, 5, 4, -1},\n    {4, 0, 10, 4, 10, 5, 0, 3, 10, 6, 10, 7, 3, 7, \
10, -1},\n    {7, 6, 10, 7, 10, 8, 5, 4, 10, 4, 8, 10, -1, -1, -1, -1},\n    \
{6, 9, 5, 6, 11, 9, 11, 8, 9, -1, -1, -1, -1, -1, -1, -1},\n    {3, 6, 11, 0, \
6, 3, 0, 5, 6, 0, 9, 5, -1, -1, -1, -1},\n    {0, 11, 8, 0, 5, 11, 0, 1, 5, \
5, 6, 11, -1, -1, -1, -1},\n    {6, 11, 3, 6, 3, 5, 5, 3, 1, -1, -1, -1, -1, \
-1, -1, -1},\n    {1, 2, 10, 9, 5, 11, 9, 11, 8, 11, 5, 6, -1, -1, -1, -1},\n \
   {0, 11, 3, 0, 6, 11, 0, 9, 6, 5, 6, 9, 1, 2, 10, -1},\n    {11, 8, 5, 11, \
5, 6, 8, 0, 5, 10, 5, 2, 0, 2, 5, -1},\n    {6, 11, 3, 6, 3, 5, 2, 10, 3, 10, \
5, 3, -1, -1, -1, -1},\n    {5, 8, 9, 5, 2, 8, 5, 6, 2, 3, 8, 2, -1, -1, -1, \
-1},\n    {9, 5, 6, 9, 6, 0, 0, 6, 2, -1, -1, -1, -1, -1, -1, -1},\n    {1, \
5, 8, 1, 8, 0, 5, 6, 8, 3, 8, 2, 6, 2, 8, -1},\n    {1, 5, 6, 2, 1, 6, -1, \
-1, -1, -1, -1, -1, -1, -1, -1, -1},\n    {1, 3, 6, 1, 6, 10, 3, 8, 6, 5, 6, \
9, 8, 9, 6, -1},\n    {10, 1, 0, 10, 0, 6, 9, 5, 0, 5, 6, 0, -1, -1, -1, \
-1},\n    {0, 3, 8, 5, 6, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},\n    \
{10, 5, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},\n    {11, 5, \
10, 7, 5, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},\n    {11, 5, 10, 11, \
7, 5, 8, 3, 0, -1, -1, -1, -1, -1, -1, -1},\n    {5, 11, 7, 5, 10, 11, 1, 9, \
0, -1, -1, -1, -1, -1, -1, -1},\n    {10, 7, 5, 10, 11, 7, 9, 8, 1, 8, 3, 1, \
-1, -1, -1, -1},\n    {11, 1, 2, 11, 7, 1, 7, 5, 1, -1, -1, -1, -1, -1, -1, \
-1},\n    {0, 8, 3, 1, 2, 7, 1, 7, 5, 7, 2, 11, -1, -1, -1, -1},\n    {9, 7, \
5, 9, 2, 7, 9, 0, 2, 2, 11, 7, -1, -1, -1, -1},\n    {7, 5, 2, 7, 2, 11, 5, \
9, 2, 3, 2, 8, 9, 8, 2, -1},\n    {2, 5, 10, 2, 3, 5, 3, 7, 5, -1, -1, -1, \
-1, -1, -1, -1},\n    {8, 2, 0, 8, 5, 2, 8, 7, 5, 10, 2, 5, -1, -1, -1, \
-1},\n    {9, 0, 1, 5, 10, 3, 5, 3, 7, 3, 10, 2, -1, -1, -1, -1},\n    {9, 8, \
2, 9, 2, 1, 8, 7, 2, 10, 2, 5, 7, 5, 2, -1},\n    {1, 3, 5, 3, 7, 5, -1, -1, \
-1, -1, -1, -1, -1, -1, -1, -1},\n    {0, 8, 7, 0, 7, 1, 1, 7, 5, -1, -1, -1, \
-1, -1, -1, -1},\n    {9, 0, 3, 9, 3, 5, 5, 3, 7, -1, -1, -1, -1, -1, -1, \
-1},\n    {9, 8, 7, 5, 9, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},\n    \
{5, 8, 4, 5, 10, 8, 10, 11, 8, -1, -1, -1, -1, -1, -1, -1},\n    {5, 0, 4, 5, \
11, 0, 5, 10, 11, 11, 3, 0, -1, -1, -1, -1},\n    {0, 1, 9, 8, 4, 10, 8, 10, \
11, 10, 4, 5, -1, -1, -1, -1},\n    {10, 11, 4, 10, 4, 5, 11, 3, 4, 9, 4, 1, \
3, 1, 4, -1},\n    {2, 5, 1, 2, 8, 5, 2, 11, 8, 4, 5, 8, -1, -1, -1, -1},\n   \
 {0, 4, 11, 0, 11, 3, 4, 5, 11, 2, 11, 1, 5, 1, 11, -1},\n    {0, 2, 5, 0, 5, \
9, 2, 11, 5, 4, 5, 8, 11, 8, 5, -1},\n    {9, 4, 5, 2, 11, 3, -1, -1, -1, -1, \
-1, -1, -1, -1, -1, -1},\n    {2, 5, 10, 3, 5, 2, 3, 4, 5, 3, 8, 4, -1, -1, \
-1, -1},\n    {5, 10, 2, 5, 2, 4, 4, 2, 0, -1, -1, -1, -1, -1, -1, -1},\n    \
{3, 10, 2, 3, 5, 10, 3, 8, 5, 4, 5, 8, 0, 1, 9, -1},\n    {5, 10, 2, 5, 2, 4, \
1, 9, 2, 9, 4, 2, -1, -1, -1, -1},\n    {8, 4, 5, 8, 5, 3, 3, 5, 1, -1, -1, \
-1, -1, -1, -1, -1},\n    {0, 4, 5, 1, 0, 5, -1, -1, -1, -1, -1, -1, -1, -1, \
-1, -1},\n    {8, 4, 5, 8, 5, 3, 9, 0, 5, 0, 3, 5, -1, -1, -1, -1},\n    {9, \
4, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},\n    {4, 11, 7, 4, \
9, 11, 9, 10, 11, -1, -1, -1, -1, -1, -1, -1},\n    {0, 8, 3, 4, 9, 7, 9, 11, \
7, 9, 10, 11, -1, -1, -1, -1},\n    {1, 10, 11, 1, 11, 4, 1, 4, 0, 7, 4, 11, \
-1, -1, -1, -1},\n    {3, 1, 4, 3, 4, 8, 1, 10, 4, 7, 4, 11, 10, 11, 4, \
-1},\n    {4, 11, 7, 9, 11, 4, 9, 2, 11, 9, 1, 2, -1, -1, -1, -1},\n    {9, \
7, 4, 9, 11, 7, 9, 1, 11, 2, 11, 1, 0, 8, 3, -1},\n    {11, 7, 4, 11, 4, 2, \
2, 4, 0, -1, -1, -1, -1, -1, -1, -1},\n    {11, 7, 4, 11, 4, 2, 8, 3, 4, 3, \
2, 4, -1, -1, -1, -1},\n    {2, 9, 10, 2, 7, 9, 2, 3, 7, 7, 4, 9, -1, -1, -1, \
-1},\n    {9, 10, 7, 9, 7, 4, 10, 2, 7, 8, 7, 0, 2, 0, 7, -1},\n    {3, 7, \
10, 3, 10, 2, 7, 4, 10, 1, 10, 0, 4, 0, 10, -1},\n    {1, 10, 2, 8, 7, 4, -1, \
-1, -1, -1, -1, -1, -1, -1, -1, -1},\n    {4, 9, 1, 4, 1, 7, 7, 1, 3, -1, -1, \
-1, -1, -1, -1, -1},\n    {4, 9, 1, 4, 1, 7, 0, 8, 1, 8, 7, 1, -1, -1, -1, \
-1},\n    {4, 0, 3, 7, 4, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},\n    \
{4, 8, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},\n    {9, 10, \
8, 10, 11, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},\n    {3, 0, 9, 3, 9, \
11, 11, 9, 10, -1, -1, -1, -1, -1, -1, -1},\n    {0, 1, 10, 0, 10, 8, 8, 10, \
11, -1, -1, -1, -1, -1, -1, -1},\n    {3, 1, 10, 11, 3, 10, -1, -1, -1, -1, \
-1, -1, -1, -1, -1, -1},\n    {1, 2, 11, 1, 11, 9, 9, 11, 8, -1, -1, -1, -1, \
-1, -1, -1},\n    {3, 0, 9, 3, 9, 11, 1, 2, 9, 2, 11, 9, -1, -1, -1, -1},\n   \
 {0, 2, 11, 8, 0, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},\n    {3, 2, \
11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},\n    {2, 3, 8, 2, 8, \
10, 10, 8, 9, -1, -1, -1, -1, -1, -1, -1},\n    {9, 10, 2, 0, 9, 2, -1, -1, \
-1, -1, -1, -1, -1, -1, -1, -1},\n    {2, 3, 8, 2, 8, 10, 0, 1, 8, 1, 10, 8, \
-1, -1, -1, -1},\n    {1, 10, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, \
-1, -1},\n    {1, 3, 8, 9, 1, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},\n   \
 {0, 9, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},\n    {0, 3, \
8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},\n    {-1, -1, -1, -1, \
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}\n};\n", 
    "Display" -> "codemirror", "Hash" -> 
     "d6932e07-4fdf-4f45-82d2-b1dcc6899ce4", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Fade" -> True, "InitGroup" -> True|>, 
    "State" -> "Idle", "Type" -> "Input", "UID" -> Null, 
    "Notebook" -> "ce86f683-e9ab-4299-9bbc-893976763c70"|>, 
   <|"Data" -> "/Users/kirill/Github/wolfram-js-frontend/Demos/09 - Mixing \
languages/tables.h", "Display" -> "fileprint", 
    "Hash" -> "ba607891-b6b0-4de2-9219-fad2f36535b5", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "ce86f683-e9ab-4299-9bbc-893976763c70"|>, 
   <|"Data" -> 
     ".md\nNow the implementation of the algorythm (probably far from \
perfect)", "Display" -> "codemirror", 
    "Hash" -> "e84095b2-5a65-4087-a73e-ff0c70e882a7", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "ce86f683-e9ab-4299-9bbc-893976763c70"|>, 
   <|"Data" -> 
     "Now the implementation of the algorythm (probably far from perfect)", 
    "Display" -> "markdown", "Hash" -> 
     "e630bd3d-0a3c-4fda-a0fe-ea0c09334433", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "ce86f683-e9ab-4299-9bbc-893976763c70"|>, 
   <|"Data" -> "main.c\n#include <stdio.h>\n#include <stdlib.h>\n#include \
<string.h>\n\n#include \"WolframLibrary.h\"\n#include \
\"WolframNumericArrayLibrary.h\"\n\n\n#include <math.h>\n#include \
<stdlib.h>\n\n#define LINEAR_TABLE_SIZE 12\n#define TRIANGULATION_TABLE_SIZE \
256\n#define MAX_VERTICES 300000  \n\n#include \"tables.h\"\n\ndouble \
*vertices;\nmint vertexCount = 0;\n\n// Linear interpolation\ndouble \
Lerp(double start, double end, double amt) {\n    return (1 - amt) * start + \
amt * end;\n}\n\n// Determine state index\nint getState(double v0, double v1, \
double v2, double v3,\n             double v4, double v5, double v6, double \
v7,\n             double isovalue) {\n    int state = 0;\n    if (v0 >= \
isovalue) state |= 1;\n    if (v1 >= isovalue) state |= 2;\n    if (v2 >= \
isovalue) state |= 4;\n    if (v3 >= isovalue) state |= 8;\n    if (v4 >= \
isovalue) state |= 16;\n    if (v5 >= isovalue) state |= 32;\n    if (v6 >= \
isovalue) state |= 64;\n    if (v7 >= isovalue) state |= 128;\n    return \
state;\n}\n\nmint get3DIndex(int depth, int height, int width, mint* dims) \
{\n    return (depth * dims[1] * dims[2]) + (height * dims[2]) + \
width;\n}\n\n\ndouble interpolate(double isovalue, double val1, double val2, \
double p1, double p2) {\n    if (fabs(isovalue - val1) < 0.00001)\n        \
return p1;\n    if (fabs(isovalue - val2) < 0.00001)\n        return p2;\n    \
if (fabs(val1 - val2) < 0.00001)\n        return p1;\n    return p1 + \
(isovalue - val1) * (p2 - p1) / (val2 - val1);\n}\n\n\n// Define cubeVertices \
at the top of your code\ndouble cubeVertices[8][3] = {\n    {0.0, 0.0, 0.0}, \
// v0\n    {1.0, 0.0, 0.0}, // v1\n    {1.0, 1.0, 0.0}, // v2\n    {0.0, 1.0, \
0.0}, // v3\n    {0.0, 0.0, 1.0}, // v4\n    {1.0, 0.0, 1.0}, // v5\n    \
{1.0, 1.0, 1.0}, // v6\n    {0.0, 1.0, 1.0}  // v7\n};\n\n// Edge to vertex \
mapping\nint edgeVertices[12][2] = {\n    {0, 1}, // Edge 0\n    {1, 2}, // \
Edge 1\n    {2, 3}, // Edge 2\n    {3, 0}, // Edge 3\n    {4, 5}, // Edge 4\n \
   {5, 6}, // Edge 5\n    {6, 7}, // Edge 6\n    {7, 4}, // Edge 7\n    {0, \
4}, // Edge 8\n    {1, 5}, // Edge 9\n    {2, 6}, // Edge 10\n    {3, 7}  // \
Edge 11\n};\n\n\nvoid marchingCubes(double *img, mint* dims, double res, \
double isovalue) {\n    mint depth, height, width, ii;\n    mint cnt = 0;\n   \
 vertexCount = 0;\n\n    for (depth = 0; depth < dims[0] - 1; ++depth) {\n    \
    for (height = 0; height < dims[1] - 1; ++height) {\n            for \
(width = 0; width < dims[2] - 1; ++width) {\n                double x = width \
* res;\n                double y = height * res;\n                double z = \
depth * res;\n\n                // Get scalar values at cube corners\n        \
        double val[8];\n                val[0] = img[get3DIndex(depth,     \
height,     width,     dims)]; // v0\n                val[1] = \
img[get3DIndex(depth,     height,     width + 1, dims)]; // v1\n              \
  val[2] = img[get3DIndex(depth,     height + 1, width + 1, dims)]; // v2\n   \
             val[3] = img[get3DIndex(depth,     height + 1, width,     \
dims)]; // v3\n                val[4] = img[get3DIndex(depth + 1, height,     \
width,     dims)]; // v4\n                val[5] = img[get3DIndex(depth + 1, \
height,     width + 1, dims)]; // v5\n                val[6] = \
img[get3DIndex(depth + 1, height + 1, width + 1, dims)]; // v6\n              \
  val[7] = img[get3DIndex(depth + 1, height + 1, width,     dims)]; // v7\n\n \
               // Compute cube state\n                int state = \
getState(val[0], val[1], val[2], val[3], val[4], val[5], val[6], val[7], \
isovalue);\n\n                // Skip if cube is entirely inside or outside\n \
               if (state == 0 || state == 255)\n                    \
continue;\n\n                // Process triangles\n                for (ii = \
0; (triangulationTable[state][ii] != -1); ii += 3) {\n                    if \
(cnt + 3 > MAX_VERTICES)\n                        break;\n\n                  \
  int edgeIndices[3];\n                    edgeIndices[0] = \
triangulationTable[state][ii];\n                    edgeIndices[1] = \
triangulationTable[state][ii + 1];\n                    edgeIndices[2] = \
triangulationTable[state][ii + 2];\n\n                    for (int e = 0; e < \
3; ++e) {\n                        int edge = edgeIndices[e];\n               \
         int v1 = edgeVertices[edge][0];\n                        int v2 = \
edgeVertices[edge][1];\n\n                        // Positions of the two \
vertices\n                        double x1 = x + res * \
cubeVertices[v1][0];\n                        double y1 = y + res * \
cubeVertices[v1][1];\n                        double z1 = z + res * \
cubeVertices[v1][2];\n\n                        double x2 = x + res * \
cubeVertices[v2][0];\n                        double y2 = y + res * \
cubeVertices[v2][1];\n                        double z2 = z + res * \
cubeVertices[v2][2];\n\n                        // Interpolate the position \
along the edge\n                        double vertPos[3];\n                  \
      vertPos[0] = interpolate(isovalue, val[v1], val[v2], x1, x2);\n         \
               vertPos[1] = interpolate(isovalue, val[v1], val[v2], y1, \
y2);\n                        vertPos[2] = interpolate(isovalue, val[v1], \
val[v2], z1, z2);\n\n                        // Store vertex\n                \
        vertices[cnt * 3 + 0] = vertPos[0];\n                        \
vertices[cnt * 3 + 1] = vertPos[1];\n                        vertices[cnt * 3 \
+ 2] = vertPos[2];\n                        cnt++;\n                    }\n   \
                 vertexCount++;\n                }\n            }\n        \
}\n    }\n\n}\n\nDLLEXPORT mint WolframLibrary_getVersion() {\n    return \
WolframLibraryVersion;\n}\n\nDLLEXPORT int \
WolframLibrary_initialize(WolframLibraryData libData) {\n    vertices = \
(double *)malloc(MAX_VERTICES * 3 * sizeof(double));\n    for (mint i=0; \
i<MAX_VERTICES * 3; ++i) {\n      vertices[i] = 99.0f;\n    }\n\n    return \
LIBRARY_NO_ERROR;\n}\n\nDLLEXPORT void \
WolframLibrary_uninitialize(WolframLibraryData libData) {\n    \
return;\n}\n\n\n\nDLLEXPORT int process(WolframLibraryData libData, mint \
Argc, MArgument *Args, MArgument Res) {    \n\n int err = \
LIBRARY_NO_ERROR;\n\n MTensor in;\n mint in_type;\n mint in_rank;\n mint \
*in_dims;\n double *in_data;\n\n MTensor out;\n mint out_type;\n mint \
out_rank;\n mint out_dims[2];\n double *out_data;\n\n\n mint *tmp_dims;\n\n \
mint rows, row, cols, col;\n\n /* Code section */\n\n /* Get the input 3d \
array */\n in = MArgument_getMTensor(Args[0]);\n in_type = \
libData->MTensor_getType(in);\n in_rank = libData->MTensor_getRank(in);\n \
in_dims = libData->MTensor_getDimensions(in);\n in_data = \
libData->MTensor_getRealData(in);\n\n double res = \
MArgument_getReal(Args[2]);\n double th = MArgument_getReal(Args[1]);\n\n \
out_type = in_type;\n\n marchingCubes(in_data, in_dims, res, th);\n\n \
out_dims[0] = vertexCount*3;\n out_dims[1] = 3;\n\n /* Create the output \
array */\n err = libData->MTensor_new(out_type, 2, out_dims, &out);\n \
out_data = libData->MTensor_getRealData(out);\n\n memcpy(out_data, vertices, \
vertexCount*3*3*sizeof(double));\n\n MArgument_setMTensor(Res,out);\n return \
err;\n\n\n}", "Display" -> "codemirror", 
    "Hash" -> "ed1dbdbb-c0d1-4ea3-ade4-f621d90c5208", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Fade" -> True, "InitGroup" -> True|>, 
    "State" -> "Idle", "Type" -> "Input", "UID" -> Null, 
    "Notebook" -> "ce86f683-e9ab-4299-9bbc-893976763c70"|>, 
   <|"Data" -> "/Users/kirill/Github/wolfram-js-frontend/Demos/09 - Mixing \
languages/main.c", "Display" -> "fileprint", 
    "Hash" -> "abd1e80a-ba5c-4818-998c-8ff03269f03f", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "ce86f683-e9ab-4299-9bbc-893976763c70"|>, 
   <|"Data" -> ".md\nCompile and import function to Kernel", 
    "Display" -> "codemirror", "Hash" -> 
     "09e82294-26d5-43da-a29b-925e38df3ea1", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "ce86f683-e9ab-4299-9bbc-893976763c70"|>, 
   <|"Data" -> "Compile and import function to Kernel", 
    "Display" -> "markdown", "Hash" -> 
     "136169c9-e517-4ad2-8e6d-d55b337808d3", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "ce86f683-e9ab-4299-9bbc-893976763c70"|>, 
   <|"Data" -> "lib = CreateLibrary[File[\"main.c\"], \"internal\"]; \
\nClearAll[process]\ncompute = LibraryFunctionLoad[\n lib,  \"process\", \n { \
 \n   {Real, 3, \"Constant\"}, Real, Real \n }, {Real, 2, Automatic}]; ", 
    "Display" -> "codemirror", "Hash" -> 
     "87a4828d-93d3-47fa-86f6-d01ab768281c", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"InitGroup" -> True|>, 
    "State" -> "Idle", "Type" -> "Input", "UID" -> Null, 
    "Notebook" -> "ce86f683-e9ab-4299-9bbc-893976763c70"|>, 
   <|"Data" -> ".md\nBasic test on the simplest shape", 
    "Display" -> "codemirror", "Hash" -> 
     "0afef796-f838-4ed4-a408-aff420f76c9c", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "ce86f683-e9ab-4299-9bbc-893976763c70"|>, 
   <|"Data" -> "Basic test on the simplest shape", "Display" -> "markdown", 
    "Hash" -> "70db7d01-ea15-4cfe-9bc6-1fb7783e1836", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "ce86f683-e9ab-4299-9bbc-893976763c70"|>, 
   <|"Data" -> "img = Table[Exp[-(i^2 + j^2 + k^2)], {i,-5,5}, {j, -5,5}, \
{k,-5,5}];\nWith[{vertices = compute[img//N, 0.1, 1.0]},\n  \
GraphicsComplex[vertices, {\n    Polygon[1, vertices//Length]\n  }] // \
Graphics3D \n]", "Display" -> "codemirror", 
    "Hash" -> "e7cd5acb-73e6-4dc7-acc2-901f4ef0cf2c", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "ce86f683-e9ab-4299-9bbc-893976763c70"|>, 
   <|"Data" -> "(*VB[*)(FrontEndRef[\"a1130804-f7fa-4468-bb04-64c462c755ec\"]\
)(*,*)(*\"1:eJxTTMoPSmNkYGAoZgESHvk5KRCeEJBwK8rPK3HNS3GtSE0uLUlMykkNVgEKJxoaG\
htYGJjoppmnJeqamJhZ6CYlAblmJskmZkbJ5qamqckAeLkVPA==\"*)(*]VB*)", 
    "Display" -> "codemirror", "Hash" -> 
     "aa6b642f-b23f-4f11-b5da-958a55fe4918", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "ce86f683-e9ab-4299-9bbc-893976763c70"|>, 
   <|"Data" -> ".md\n## 3D Paint\nWe can do something a bit more interesting \
and try to draw shapes using mouse on 3D canvas.", "Display" -> "codemirror", 
    "Hash" -> "bfdb35bb-69a1-4950-96b6-17e3c9755959", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "ce86f683-e9ab-4299-9bbc-893976763c70"|>, 
   <|"Data" -> "## 3D Paint\nWe can do something a bit more interesting and \
try to draw shapes using mouse on 3D canvas.", "Display" -> "markdown", 
    "Hash" -> "ce51baf6-2e91-452f-802d-a14205caa49e", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "ce86f683-e9ab-4299-9bbc-893976763c70"|>, 
   <|"Data" -> "vertices = Table[{0.,0.,0.}, {300000}];\nrange = \
0;\n\nGraphics3D[{\n  GraphicsComplex[vertices//Offload, {\n    Polygon[1, \
range//Offload]\n  }], \n  {Opacity[0.2], Cuboid[{0,0,0}, {100,100,100}]}, \n \
 EventHandler[Sphere[{0,0,0}], {\"transform\"->handler}]\n}, \
ImageSize->1000]", "Display" -> "codemirror", 
    "Hash" -> "f739337c-fe3a-42a4-9700-6813b0bc313f", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "ce86f683-e9ab-4299-9bbc-893976763c70"|>, 
   <|"Data" -> ".md\nDefine a handler to recalculate", 
    "Display" -> "codemirror", "Hash" -> 
     "95edba17-e4a8-42c4-a9d2-0246c6827c5d", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "ce86f683-e9ab-4299-9bbc-893976763c70"|>, 
   <|"Data" -> "Define a handler to recalculate", "Display" -> "markdown", 
    "Hash" -> "3d9e7be8-6011-4922-bee5-81b0be84c802", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "ce86f683-e9ab-4299-9bbc-893976763c70"|>, 
   <|"Data" -> "img = Table[0., {i,100}, {j,100}, {k,100}];\nhandler = \
Function[assoc,\n  With[{coords = assoc[\"position\"]}, Do[\n    With[{i = \
Clip[Round[coords[[3]]+m], {1,100}], j = Clip[Round[ coords[[2]]+u], \
{1,100}], k = Clip[Round[coords[[1]]+v], {1,100}]},\n      img[[i,j,k]] = \
img[[i,j,k]] + Exp[- (m^2 + u^2 + v^2)/10.0] 0.5; \n    ]\n  , {m, -5,5,0.7}, \
{u, -5,5,0.7}, {v, -5,5,0.7}]];\n\n  With[{d = compute[img, 0.5, 1.0]},\n    \
range = Min[Length[d], 300000];     \n    vertices = Take[d, range];\n  \
];\n];", "Display" -> "codemirror", 
    "Hash" -> "f14014c3-35ab-47c3-8e51-755fbf3384b7", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "ce86f683-e9ab-4299-9bbc-893976763c70"|>, 
   <|"Data" -> " ", "Display" -> "codemirror", 
    "Hash" -> "66a13846-0a4c-41c8-839a-790822071e12", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "ce86f683-e9ab-4299-9bbc-893976763c70"|>, 
   <|"Data" -> ".md\n## Meta-balls\nA rather classical example", 
    "Display" -> "codemirror", "Hash" -> 
     "31bec154-5131-4b21-a362-659a81a1c648", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "ce86f683-e9ab-4299-9bbc-893976763c70"|>, 
   <|"Data" -> "## Meta-balls\nA rather classical example", 
    "Display" -> "markdown", "Hash" -> 
     "6df2571d-0eca-4a93-a99b-2283b6796fef", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "ce86f683-e9ab-4299-9bbc-893976763c70"|>, 
   <|"Data" -> "coords = RandomReal[{30-2,40+2}, {5,3}] // N;\nvelocities = \
RandomReal[{-0.001,0.001}, {5,3}];\n\nfar = {70,70,70};\ncenter = \
{35,35,35};\n\narr = Table[0., {far[[1]]}, {far[[2]]}, \
{far[[3]]}];\n\ncompiledSum = Compile[{{x, _Integer}, {y, _Integer}, {z, \
_Integer}, {X, _Integer}, {Y, _Integer}, {Z, _Integer}, {coords, _Real, \
2}},\n  Module[{sum = 0.0, i},\n    For[i = 1, i <= Length[coords], i++,\n    \
  sum += 1.0 / (Norm[coords[[i]] - {x + X, y + Y, z + Z}] + 0.02);\n    ];\n  \
  sum\n  ],\n  CompilationTarget -> \"C\",\n  RuntimeOptions -> \
\"Speed\"\n];\n\nEventHandler[\"frame\", Function[Null,\nDo[\n    If[Or @@ \
Table[Max[Abs[i - {X,Y,Z}]] < 6, {i, coords}],\n      \n      With[{positions \
= {-2, -1, 0, 1, 2}},\n      Do[\n        arr[[x + X, y + Y, z + Z]] = \
compiledSum[x, y, z, X, Y, Z, coords],\n        {x, positions}, {y, \
positions}, {z, positions}\n      ]\n      ]\n    ]\n  , {X, 6, far[[1]]-4, \
5}, {Y, 6, far[[2]]-4, 5}, {Z, 6, far[[3]]-4, 5}]\n  \n  With[{d = \
compute[arr, 1, 1.0]},\n    range2 = Min[Length[d], 100000];     \n    \
vertices2 = (# - center)&/@ Take[d, range2];\n  ];\n\n  velocities = \
Table[With[{diff = (coords[[i]] - center)},\n    If[Norm[diff] < 0.01, -1, 1] \
velocities[[i]] - 4.0 diff / Norm[diff]\n  ], {i, Length[coords]}];\n  \n  \
coords = Table[coords[[i]] + 0.01 velocities[[i]] + 0.15 Cross[{0,0,1}, \
(center-coords[[i]]) // Normalize], {i, Length[coords]}];\n  lightcoords = \
Map[With[{p = (center + 5 (# - center))},\n    If[Norm[p - center] < 2, \
center + Normalize[p - center] 2.0, p] - center\n  ]&, \
coords];\n]];\n\nEventFire[\"frame\", True];\n\nlightcoords = lightcoords \
0;\n\nvertices2 = Table[{0.,0.,0.}, {100000}];\nrange2 = \
0;\n\nGraphics3D[{{\n  Table[With[{i=i},\n    {\n      \
PointLight[RandomColor[],lightcoords[[i]] // Offload, 700]\n    }\n  ], {i, \
Length[velocities]}],\n  Yellow, PointLight[RandomColor[], {0,0,0}, 300],\n  \
GraphicsComplex[vertices2 // Offload, {\n    White, \
Graphics3D`Materials[\"Glass\"], Directive[\"Transmission\"->0.8, \
\"MaterialThickness\"->0], Polygon[1, range2 // Offload]\n  }], \n\n  \
SpotLight[Red, {10,10,10}],\n  AnimationFrameListener[vertices2 // Offload, \
\"Event\"->\"frame\"]\n  \n}, {Opacity[0], Sphere[{0,0,0},7]}}, \
ImageSize->1000, Background->Black, Lighting->None]\n", 
    "Display" -> "codemirror", "Hash" -> 
     "57b8efce-2923-4ddd-803d-73cff32e0302", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "ce86f683-e9ab-4299-9bbc-893976763c70"|>, 
   <|"Data" -> " ", "Display" -> "codemirror", 
    "Hash" -> "42bcab6c-1fa1-4feb-b6fc-e2b9f8a911ac", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "ce86f683-e9ab-4299-9bbc-893976763c70"|>, 
   <|"Data" -> ".md\n## Calculate normals\nTo achieve non-flat shading, we \
need to provide normals as well interpolated from the 3D data", 
    "Display" -> "codemirror", "Hash" -> 
     "c9cbd290-6241-4fec-813c-684c3f7506ef", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "ce86f683-e9ab-4299-9bbc-893976763c70"|>, 
   <|"Data" -> "## Calculate normals\nTo achieve non-flat shading, we need to \
provide normals as well interpolated from the 3D data", 
    "Display" -> "markdown", "Hash" -> 
     "c78de899-8c0c-48c2-95d3-fafc105bf869", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "ce86f683-e9ab-4299-9bbc-893976763c70"|>, 
   <|"Data" -> ".md\n<span style=\"color:red\">to be written</span>", 
    "Display" -> "codemirror", "Hash" -> 
     "6cd1f1e3-9755-4d8d-b088-2d840324a070", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "ce86f683-e9ab-4299-9bbc-893976763c70"|>, 
   <|"Data" -> "<span style=\"color:red\">to be written</span>", 
    "Display" -> "markdown", "Hash" -> 
     "cebe1711-0462-4a0c-8bbb-d4cd1899c5a1", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "ce86f683-e9ab-4299-9bbc-893976763c70"|>, 
   <|"Data" -> "", "Display" -> "codemirror", 
    "Hash" -> "62aace80-3f48-40b8-b4f8-6232f8579078", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "ce86f683-e9ab-4299-9bbc-893976763c70"|>}, "serializer" -> "jsfn4"|>
