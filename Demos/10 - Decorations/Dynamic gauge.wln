<|"Notebook" -> <|"FocusedCell" -> CellObj[JerryI`Notebook`CellObj`$457], 
   "Objects" -> <|"555838ee-9cd1-42a5-b3d2-0e5b2349ff0c" -> 
      <|"Public" -> Hold[gauge[0.3]]|>|>, "Path" -> "/users/kirill/Github/wol\
fram-js-frontend-dev/Demos/10 - Decorations/Dynamic gauge.wln"|>, 
 "Cells" -> {<|"Data" -> ".md\n# Dynamic gauge\nAn example of advanced \
decoration, which supports changing data", "Display" -> "codemirror", 
    "Hash" -> "c13a84f8-d3d0-4b06-851e-52742361e6c0", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "c474b9ab-d919-4f53-9dd7-0ec3b54ca96e"|>, 
   <|"Data" -> "# Dynamic gauge\nAn example of advanced decoration, which \
supports changing data", "Display" -> "markdown", 
    "Hash" -> "38887f4f-4a44-43ef-a048-37377fabf797", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "c474b9ab-d919-4f53-9dd7-0ec3b54ca96e"|>, <|"Data" -> ".md\nDefine", 
    "Display" -> "codemirror", "Hash" -> 
     "accdb6ed-456f-4533-95cc-adf061218835", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "c474b9ab-d919-4f53-9dd7-0ec3b54ca96e"|>, <|"Data" -> "Define", 
    "Display" -> "markdown", "Hash" -> 
     "17a50ea8-4ab7-4176-afea-4820bb6fe9e9", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "c474b9ab-d919-4f53-9dd7-0ec3b54ca96e"|>, 
   <|"Data" -> "gauge /: MakeBoxes[g_gauge, StandardForm] := With[{\n  o = \
CreateFrontEndObject[g]\n},\n  MakeBoxes[o, StandardForm]\n]", 
    "Display" -> "codemirror", "Hash" -> 
     "4c1e10b8-1473-4a78-82ce-d64bcc312e5f", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "c474b9ab-d919-4f53-9dd7-0ec3b54ca96e"|>, 
   <|"Data" -> ".md\nNow we need to implement the interpretation function on \
the frontend", "Display" -> "codemirror", 
    "Hash" -> "709e4095-ad81-40c0-bd65-806bcb15ea1d", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "c474b9ab-d919-4f53-9dd7-0ec3b54ca96e"|>, 
   <|"Data" -> 
     "Now we need to implement the interpretation function on the frontend", 
    "Display" -> "markdown", "Hash" -> 
     "986d7b22-9322-4234-b728-a7266f7bfb42", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "c474b9ab-d919-4f53-9dd7-0ec3b54ca96e"|>, 
   <|"Data" -> ".js\n\ncore.gauge = async (args, env) => {\n  \n  // Create a \
gauge meter element\n  const gauge = document.createElement('div');\n  \
gauge.style.width = '100px'; // half the original width\n  gauge.style.height \
= '50px'; // half the original height\n  gauge.style.border = '1px solid \
#000';\n  gauge.style.borderRadius = '50px 50px 0 0'; // adjusted for smaller \
size\n  gauge.style.position = 'relative';\n  gauge.style.background = \
'linear-gradient(to right, red 0%, yellow 50%, green 100%)';\n\n  // Create a \
needle for the gauge\n  const needle = document.createElement('div');\n  \
needle.style.width = '2px';\n  needle.style.height = '40px'; // made the \
needle longer for better visibility\n  needle.style.background = '#000';\n  \
needle.style.position = 'absolute';\n  needle.style.bottom = '0';\n  \
needle.style.left = '50%';\n  needle.style.transformOrigin = 'bottom';\n\n  \
// Function to set the needle position based on input value\n  function \
setNeedlePosition(value) {\n    // Ensure value is between 0 and 1\n    value \
= Math.max(0, Math.min(1, value));\n    // Convert value to angle\n    const \
angle = value * 180 - 90; // -90 to 90 degrees\n    needle.style.transform = \
`rotate(${angle}deg)`;\n  }\n\n  // Set initial needle position\n  const pos \
= await interpretate(args[0], env);\n  setNeedlePosition(pos); // Middle \
position\n  \n\n  gauge.appendChild(needle);\n\n  \
env.element.appendChild(gauge);\n  env.local.update = \
setNeedlePosition;\n}\n\ncore.gauge.update = async (args, env) => {\n  const \
val = await interpretate(args[0], env);\n  \
env.local.update(val);\n}\n\ncore.gauge.destroy = () => {\n  \
console.log('Nothing to do');\n}", "Display" -> "codemirror", 
    "Hash" -> "689cc7a1-e653-4154-98a1-34853a0da3f5", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "c474b9ab-d919-4f53-9dd7-0ec3b54ca96e"|>, 
   <|"Data" -> "\ncore.gauge = async (args, env) => {\n  \n  // Create a \
gauge meter element\n  const gauge = document.createElement('div');\n  \
gauge.style.width = '100px'; // half the original width\n  gauge.style.height \
= '50px'; // half the original height\n  gauge.style.border = '1px solid \
#000';\n  gauge.style.borderRadius = '50px 50px 0 0'; // adjusted for smaller \
size\n  gauge.style.position = 'relative';\n  gauge.style.background = \
'linear-gradient(to right, red 0%, yellow 50%, green 100%)';\n\n  // Create a \
needle for the gauge\n  const needle = document.createElement('div');\n  \
needle.style.width = '2px';\n  needle.style.height = '40px'; // made the \
needle longer for better visibility\n  needle.style.background = '#000';\n  \
needle.style.position = 'absolute';\n  needle.style.bottom = '0';\n  \
needle.style.left = '50%';\n  needle.style.transformOrigin = 'bottom';\n\n  \
// Function to set the needle position based on input value\n  function \
setNeedlePosition(value) {\n    // Ensure value is between 0 and 1\n    value \
= Math.max(0, Math.min(1, value));\n    // Convert value to angle\n    const \
angle = value * 180 - 90; // -90 to 90 degrees\n    needle.style.transform = \
`rotate(${angle}deg)`;\n  }\n\n  // Set initial needle position\n  const pos \
= await interpretate(args[0], env);\n  setNeedlePosition(pos); // Middle \
position\n  \n\n  gauge.appendChild(needle);\n\n  \
env.element.appendChild(gauge);\n  env.local.update = \
setNeedlePosition;\n}\n\ncore.gauge.update = async (args, env) => {\n  const \
val = await interpretate(args[0], env);\n  \
env.local.update(val);\n}\n\ncore.gauge.destroy = () => {\n  \
console.log('Nothing to do');\n}", "Display" -> "js", 
    "Hash" -> "e36d8c2f-13f0-419b-9bd2-91467a877086", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "c474b9ab-d919-4f53-9dd7-0ec3b54ca96e"|>, 
   <|"Data" -> ".md\nLet us test it!", "Display" -> "codemirror", 
    "Hash" -> "f0e84ad6-66b8-42b4-b2f9-0637ecb80eb9", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "c474b9ab-d919-4f53-9dd7-0ec3b54ca96e"|>, <|"Data" -> "Let us test it!", 
    "Display" -> "markdown", "Hash" -> 
     "645b5d54-bb4f-49d8-b309-d14c066356b0", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "c474b9ab-d919-4f53-9dd7-0ec3b54ca96e"|>, <|"Data" -> "gauge[0.3]", 
    "Display" -> "codemirror", "Hash" -> 
     "788dca35-30e9-4c20-bcfd-5af3a6aa1f64", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "c474b9ab-d919-4f53-9dd7-0ec3b54ca96e"|>, 
   <|"Data" -> "(*VB[*)(FrontEndRef[\"555838ee-9cd1-42a5-b3d2-0e5b2349ff0c\"]\
)(*,*)(*\"1:eJxTTMoPSmNkYGAoZgESHvk5KRCeEJBwK8rPK3HNS3GtSE0uLUlMykkNVgEKm5qaW\
hhbpKbqWianGOqaGCWa6iYZpxjpGqSaJhkZm1impRkkAwB/zhWk\"*)(*]VB*)", 
    "Display" -> "codemirror", "Hash" -> 
     "2ac9ae00-8efa-49d9-a7bc-4b425483678d", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "c474b9ab-d919-4f53-9dd7-0ec3b54ca96e"|>, 
   <|"Data" -> " ", "Display" -> "codemirror", 
    "Hash" -> "fcf6d77e-a38b-4a91-a90e-907d49a7bc42", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "c474b9ab-d919-4f53-9dd7-0ec3b54ca96e"|>, 
   <|"Data" -> "", "Display" -> "markdown", 
    "Hash" -> "8e15b506-e3b2-4a1a-983d-e7860f27b7df", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "c474b9ab-d919-4f53-9dd7-0ec3b54ca96e"|>, 
   <|"Data" -> ".md\n## Dynamics", "Display" -> "codemirror", 
    "Hash" -> "8cfb6455-f426-41f6-a537-ab5cfeae51c5", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "c474b9ab-d919-4f53-9dd7-0ec3b54ca96e"|>, <|"Data" -> "## Dynamics", 
    "Display" -> "markdown", "Hash" -> 
     "2617a7a4-223d-4453-8de1-ccd575d39b4a", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "c474b9ab-d919-4f53-9dd7-0ec3b54ca96e"|>, 
   <|"Data" -> "gvalue = 0.1;\nEventHandler[InputRange[0, 1, 0.1, 0.1], \
(gvalue = #) &]\n\ngauge[gvalue // Offload]", "Display" -> "codemirror", 
    "Hash" -> "ee90190c-b289-4dd0-82e7-184fed16eb97", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "c474b9ab-d919-4f53-9dd7-0ec3b54ca96e"|>, 
   <|"Data" -> ".md\n*In this way it make an expression not copyable to other \
notebooks* \n\nSee below how to make it better", "Display" -> "codemirror", 
    "Hash" -> "188ba970-168a-47b8-8d13-8fad83906d7f", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "c474b9ab-d919-4f53-9dd7-0ec3b54ca96e"|>, 
   <|"Data" -> "*In this way it make an expression not copyable to other \
notebooks* \n\nSee below how to make it better", "Display" -> "markdown", 
    "Hash" -> "13df5185-1033-4785-9374-89f7e9d42db1", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "c474b9ab-d919-4f53-9dd7-0ec3b54ca96e"|>, 
   <|"Data" -> " ", "Display" -> "codemirror", 
    "Hash" -> "1c3fa29d-515f-4303-bca9-b393308054ce", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "c474b9ab-d919-4f53-9dd7-0ec3b54ca96e"|>, 
   <|"Data" -> ".md\n## Make it as a regular decorated symbol\nWe can preseve \
the original `gauge` symbol by a few changes", "Display" -> "codemirror", 
    "Hash" -> "3e882920-96f0-4f69-9d05-05d0a4935e16", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "c474b9ab-d919-4f53-9dd7-0ec3b54ca96e"|>, 
   <|"Data" -> "## Make it as a regular decorated symbol\nWe can preseve the \
original `gauge` symbol by a few change", "Display" -> "markdown", 
    "Hash" -> "cccafd86-4b0d-4fcd-90de-3455702fa77c", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "c474b9ab-d919-4f53-9dd7-0ec3b54ca96e"|>, 
   <|"Data" -> "gauge /: MakeBoxes[g_gauge, StandardForm] := With[{\n  \n},\n \
 ViewBox[g, g // FrontEndVirtual]\n]", "Display" -> "codemirror", 
    "Hash" -> "80187a36-6fc9-49f7-a372-e6ed4fc196f8", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "c474b9ab-d919-4f53-9dd7-0ec3b54ca96e"|>, <|"Data" -> ".md\nTest it", 
    "Display" -> "codemirror", "Hash" -> 
     "2489b257-74aa-4380-99b2-de02043131c1", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "c474b9ab-d919-4f53-9dd7-0ec3b54ca96e"|>, <|"Data" -> "Test it", 
    "Display" -> "markdown", "Hash" -> 
     "b4b17999-4e1d-483e-81d5-298b474c72cb", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "c474b9ab-d919-4f53-9dd7-0ec3b54ca96e"|>, 
   <|"Data" -> "gvalue = 0.1;\nEventHandler[InputRange[0, 1, 0.1, 0.1], \
(gvalue = #) &]\n\ngauge[gvalue // Offload]", "Display" -> "codemirror", 
    "Hash" -> "d6a3e7cb-8833-4464-8819-06a4767ca2f7", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "c474b9ab-d919-4f53-9dd7-0ec3b54ca96e"|>}, "serializer" -> "jsfn4"|>
