<|"Notebook" -> <|"FocusedCell" -> CellObj[JerryI`Notebook`CellObj`$35], 
   "HaveToSaveAs" -> False, "MessangerChannel" -> Messanger, 
   "ModalsChannel" -> "a6a148ec-1a68-44a5-a87c-3cbcb855f1e3", 
   "Objects" -> <||>, "Path" -> "/Users/kirill/Github/wolfram-js-frontend/Dem\
os/03 - Plotting/BarTimeline Animated.wln", "Quick" -> True, 
   "Symbols" -> <||>, "TOC" -> {Notebook`Editor`TOC`Private`heading[1, 
      "BarTimeline Animated", CellObj[JerryI`Notebook`CellObj`$353]]}|>, 
 "Cells" -> {<|"Data" -> ".md\n# BarTimeline Animated\nYou've likely seen \
videos featuring animated bar charts with a timeline, where the bars \
dynamically shift and overtake each other. These kinds of visuals are \
eye-catching. \n\nBelow is an example of such a plot function, which takes a \
list of `TimeSeries`, interpolates them, and turns them into an interactive \
diagram. While this isn't a perfect implementation, it's good enough for \
demonstration purposes.", "Display" -> "codemirror", 
    "Hash" -> "32e26339-db5d-4c4c-bfc3-908005a9b61a", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "acbd4ada-82e7-49c5-afe1-49b26dfc42c4"|>, 
   <|"Data" -> "# BarTimeline Animated\nYou've likely seen videos featuring \
animated bar charts with a timeline, where the bars dynamically shift and \
overtake each other. These kinds of visuals are eye-catching. \n\nBelow is an \
example of such a plot function, which takes a list of `TimeSeries`, \
interpolates them, and turns them into an interactive diagram. While this \
isn't a perfect implementation, it's good enough for demonstration purposes."\
, "Display" -> "markdown", "Hash" -> "dd9d14c8-92d6-4b9b-aeb8-6206cf657a81", 
    "Invisible" -> False, "MetaOnly" -> False, "Props" -> <||>, 
    "State" -> "Idle", "Type" -> "Output", "UID" -> Null, 
    "Notebook" -> "acbd4ada-82e7-49c5-afe1-49b26dfc42c4"|>, 
   <|"Data" -> "Options[barTimelineAnimated] = {PlotLegends -> \
Automatic};\n\ngetMagnitude[e_Quantity] := \
QuantityMagnitude[e];\ngetMagnitude[e_] := e;\n\ngetLevels = Function[{list}, \
\n  SortBy[\n    MapIndexed[Function[{value, index}, {value, index // \
First}], Ordering[list]], \n    First\n  ][[All, \
2]]\n];\n\nbarTimelineAnimated[l_List, OptionsPattern[]] := With[{\n  \
timeline = MinimalBy[(#[\"Times\"] & /@ l), Length] // First,\n  labels = \
If[OptionValue[PlotLegends] === Automatic, Range[Length[l]], \
OptionValue[PlotLegends]],\n  interpolated = TimeSeries[#, MissingDataMethod \
-> Automatic] & /@ l\n},\n\n  With[{\n    first = getMagnitude[#[timeline // \
First]] & /@ interpolated\n  },\n\n    Module[{\n      levels = \
getLevels[first] / Length[first] // N,\n      order = getLevels[first],\n     \
 rects,\n      date = timeline // First // DateObject // TextString,\n      \
recalc\n    },\n\n      recalc[index_] := With[{values = \
getMagnitude[#[timeline[[index]]]] & /@ interpolated},\n\n        \
With[{newOrdering = getLevels[values]},\n          If[order != newOrdering,\n \
           order = newOrdering;\n            levels = newOrdering / \
Length[first] // N;\n          ];\n        ];\n\n        date = \
timeline[[index]] // DateObject // TextString;\n\n        With[{min = \
Min[values], max = Max[values]},\n          rects = ((values - min) / (max - \
min) + 0.02) / 1.02;\n        ];\n      ];\n\n      recalc[1];\n\n      \
Column[{\n        With[{spacing = 0.8 / Length[levels]}, \n          \
Graphics[{\n            Text[date // Offload, {0.5, 0.}, {0, 0}],\n           \
 Directive[TransitionType -> \"CubicInOut\", TransitionDuration -> 500],\n    \
        Table[\n              With[{i = i},\n                Translate[{\n    \
              ColorData[97][i] // Lighter,\n                  {\n             \
       Directive[TransitionType -> \"Linear\", TransitionDuration -> 20],\n   \
                 Rectangle[{0, 0}, {Offload[rects[[i]]], spacing}]\n          \
        },\n                  Black,\n                  \
Text[Style[labels[[i]], FontSize -> 14], {-0.02, spacing / 3.0}, {1, 0}]\n    \
            }, {0, Offload[levels[[i]]]}]\n              ], \n              \
{i, 1, Length[rects]}\n            ]\n          }, PlotRange -> {{-0.4, 1}, \
{-0.1, 1 + spacing}}, ImagePadding -> None]\n        ],\n        \n        \
EventHandler[InputRange[1, Length[timeline], 1, 1], recalc]\n      }]\n    \
]\n  ]\n];", "Display" -> "codemirror", 
    "Hash" -> "5698926d-db7d-4a46-983e-14599664c23a", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Fade" -> True, "InitGroup" -> True|>, 
    "State" -> "Idle", "Type" -> "Input", "UID" -> Null, 
    "Notebook" -> "acbd4ada-82e7-49c5-afe1-49b26dfc42c4"|>, 
   <|"Data" -> ".md\nTry on some sample date lists", 
    "Display" -> "codemirror", "Hash" -> 
     "2780e9f6-ea37-4370-9a85-da05db6f782f", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "acbd4ada-82e7-49c5-afe1-49b26dfc42c4"|>, 
   <|"Data" -> "Try on some sample date lists", "Display" -> "markdown", 
    "Hash" -> "55f7b311-4016-413b-b22f-7c2eba7a3114", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "acbd4ada-82e7-49c5-afe1-49b26dfc42c4"|>, 
   <|"Data" -> "country = {\"Germany\", \"UK\", \"Switzerland\", \"Russia\", \
\"China\"};\ngdp = CountryData[#, {\"GDP\", {1970, 2015}}] &/@ \
country;\nDateListPlot[gdp, PlotLegends->country]\n\nbarTimelineAnimated[gdp, \
PlotLegends->country] ", "Display" -> "codemirror", 
    "Hash" -> "614408ce-2df3-4705-a0e1-36b1fdd35e94", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "acbd4ada-82e7-49c5-afe1-49b26dfc42c4"|>}, "serializer" -> "jsfn4"|>
