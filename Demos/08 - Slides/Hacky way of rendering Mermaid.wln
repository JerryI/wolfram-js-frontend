<|"Notebook" -> <|"FocusedCell" -> CellObj[JerryI`Notebook`CellObj`$117], 
   "HaveToSaveAs" -> False, "Objects" -> 
    <|"b0b6633a-54f0-44a2-b686-d7da8294dbab" -> 
      <|"Public" -> Hold[HTMLView["<div></div>", Epilog -> 
           ProcessMermaid["\ngraph LR\n    A[Text Header 3200 byte]  --> \
B[Binary Header 400 byte]\n    B --> C1[240 byte 1-st trace header] --> \
T1[samples of 1-st trace]\n    B --> C2[240 byte 2-st trace header] --> \
T2[samples of 1-st trace]\n    B --> CN[240 byte n-st trace header] --> \
T3[samples of 1-st trace] \n", 900]]]|>|>, "Path" -> "/Users/kirill/Github/wo\
lfram-js-frontend/Demos/08 - Slides/Hacky way of rendering Mermaid.wln", 
   "Quick" -> True, "Symbols" -> <||>, "TOC" -> {}|>, 
 "Cells" -> {<|"Data" -> ".md\nMake Mermaid cells inside slides", 
    "Display" -> "codemirror", "Hash" -> 
     "7eb9cb9a-9a99-4794-8f5a-490a0bf49e43", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "0f3a60c6-cdea-4eb1-8fe4-90518b56c05e"|>, 
   <|"Data" -> "Make Mermaid cells inside slides", "Display" -> "markdown", 
    "Hash" -> "41655676-761c-4e35-9117-825534e8fe78", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "0f3a60c6-cdea-4eb1-8fe4-90518b56c05e"|>, 
   <|"Data" -> ".js\n\ncore.ProcessMermaid = async (args, env) => {\n  const \
data = await interpretate(args[0], env);\n  const width = await \
interpretate(args[1], env)\n  const container = {\n    element: \
env.element,\n    uid: uuidv4()\n  };\n\n  env.element.style.width = width + \
'px';\n\n  new window.SupportedCells.mermaid.view(container, data);\n}", 
    "Display" -> "codemirror", "Hash" -> 
     "09fda152-ace3-4bb0-b8a8-c4adf0e1ada4", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "0f3a60c6-cdea-4eb1-8fe4-90518b56c05e"|>, 
   <|"Data" -> "\ncore.ProcessMermaid = async (args, env) => {\n  const data \
= await interpretate(args[0], env);\n  const width = await \
interpretate(args[1], env)\n  const container = {\n    element: \
env.element,\n    uid: uuidv4()\n  };\n\n  env.element.style.width = width + \
'px';\n\n  new window.SupportedCells.mermaid.view(container, data);\n}", 
    "Display" -> "js", "Hash" -> "7f24ac14-f72d-474f-882d-604f29a65d21", 
    "Invisible" -> False, "MetaOnly" -> False, "Props" -> <||>, 
    "State" -> "Idle", "Type" -> "Output", "UID" -> Null, 
    "Notebook" -> "0f3a60c6-cdea-4eb1-8fe4-90518b56c05e"|>, 
   <|"Data" -> ".md\nDefine a helper function", "Display" -> "codemirror", 
    "Hash" -> "4269eff7-9b91-43c6-848f-c575f2e1b580", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "0f3a60c6-cdea-4eb1-8fe4-90518b56c05e"|>, 
   <|"Data" -> "Define a helper function", "Display" -> "markdown", 
    "Hash" -> "c10f8b05-3f87-4af9-aa14-701d2de2f260", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "0f3a60c6-cdea-4eb1-8fe4-90518b56c05e"|>, 
   <|"Data" -> "PlaceMermaid[str_String, width_Integer] := With[{\n  uid = \
CreateUUID[]\n},\n  HTMLView[\"<div></div>\", Epilog->ProcessMermaid[str, \
width]] // CreateFrontEndObject\n  (* the standard output form for slides is \
not defined, we have to use Fronend Object *)\n]", "Display" -> "codemirror", 
    "Hash" -> "79c68fda-682e-457e-8a90-b3003574ecbd", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "0f3a60c6-cdea-4eb1-8fe4-90518b56c05e"|>, <|"Data" -> ".md\nTest it", 
    "Display" -> "codemirror", "Hash" -> 
     "57c62ad6-3025-42a1-84d1-99d247c581ed", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "0f3a60c6-cdea-4eb1-8fe4-90518b56c05e"|>, <|"Data" -> "Test it", 
    "Display" -> "markdown", "Hash" -> 
     "17dd27a6-308b-47cb-83c1-d022e592ee61", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "0f3a60c6-cdea-4eb1-8fe4-90518b56c05e"|>, 
   <|"Data" -> "MyDiagram = PlaceMermaid[\"\ngraph LR\n    A[Text Header 3200 \
byte]  --> B[Binary Header 400 byte]\n    B --> C1[240 byte 1-st trace \
header] --> T1[samples of 1-st trace]\n    B --> C2[240 byte 2-st trace \
header] --> T2[samples of 1-st trace]\n    B --> CN[240 byte n-st trace \
header] --> T3[samples of 1-st trace] \n\", 900]", "Display" -> "codemirror", 
    "Hash" -> "94da2336-b1ca-4250-9759-e2ee67485a4f", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "0f3a60c6-cdea-4eb1-8fe4-90518b56c05e"|>, 
   <|"Data" -> "(*VB[*)(FrontEndRef[\"b0b6633a-54f0-44a2-b686-d7da8294dbab\"]\
)(*,*)(*\"1:eJxTTMoPSmNkYGAoZgESHvk5KRCeEJBwK8rPK3HNS3GtSE0uLUlMykkNVgEKJxkkm\
ZkZGyfqmpqkGeiamCQa6SaZWZjpppinJFoYWZqkJCUmAQCACxXK\"*)(*]VB*)", 
    "Display" -> "codemirror", "Hash" -> 
     "1367dc3d-7e01-493b-95ee-3d13d2a38915", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "0f3a60c6-cdea-4eb1-8fe4-90518b56c05e"|>, 
   <|"Data" -> ".md\nTest it on a slide", "Display" -> "codemirror", 
    "Hash" -> "54f4a88a-6658-4b6f-b740-9971d2e31a48", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "0f3a60c6-cdea-4eb1-8fe4-90518b56c05e"|>, 
   <|"Data" -> "Test it on a slide", "Display" -> "markdown", 
    "Hash" -> "0ea9bf91-be8d-4703-99a4-156e3f7a6aa0", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "0f3a60c6-cdea-4eb1-8fe4-90518b56c05e"|>, 
   <|"Data" -> ".slide\n\n# Title of my Slide\n\n<MyDiagram/>", 
    "Display" -> "codemirror", "Hash" -> 
     "8fba3f10-ef96-4a87-ac1a-9099aa820df5", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "0f3a60c6-cdea-4eb1-8fe4-90518b56c05e"|>, 
   <|"Data" -> "<dummy >\n# Title of my \
Slide\n\nFrontEndExecutable[b0b6633a-54f0-44a2-b686-d7da8294dbab]</dummy>", 
    "Display" -> "slide", "Hash" -> "1e2b15a0-bd47-4033-b905-80aebffd174b", 
    "Invisible" -> False, "MetaOnly" -> False, "Props" -> <||>, 
    "State" -> "Idle", "Type" -> "Output", "UID" -> Null, 
    "Notebook" -> "0f3a60c6-cdea-4eb1-8fe4-90518b56c05e"|>}, 
 "serializer" -> "jsfn4"|>
