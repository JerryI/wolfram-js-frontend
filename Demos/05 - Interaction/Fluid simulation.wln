<|"Notebook" -> <|"Controller" -> "9d963da7-64a3-49f8-8044-c4b139bd67a1", 
   "FocusedCell" -> CellObj[JerryI`Notebook`CellObj`$853], 
   "HaveToSaveAs" -> False, "MessangerChannel" -> Messanger, 
   "ModalsChannel" -> "56d600e6-2629-4ad0-b00d-5d75e2b68a12", 
   "Objects" -> <||>, "Path" -> "/Users/kirill/Github/wolfram-js-frontend/Dem\
os/05 - Interaction/Fluid simulation.wln", "Quick" -> True, 
   "Symbols" -> <||>, "TOC" -> {Notebook`Editor`TOC`Private`heading[1, 
      "Real-time Fluid Simulation (Short)", 
      CellObj[JerryI`Notebook`CellObj`$832]], 
     Notebook`Editor`TOC`Private`heading[2, "Equations", 
      CellObj[JerryI`Notebook`CellObj`$836]], 
     Notebook`Editor`TOC`Private`heading[3, "Advection function", 
      CellObj[JerryI`Notebook`CellObj`$838]], 
     Notebook`Editor`TOC`Private`heading[3, "Function to remove divergence", 
      CellObj[JerryI`Notebook`CellObj`$841]], 
     Notebook`Editor`TOC`Private`heading[3, "Bilinear interpolator", 
      CellObj[JerryI`Notebook`CellObj`$844]], 
     Notebook`Editor`TOC`Private`heading[3, "Advection for test particles", 
      CellObj[JerryI`Notebook`CellObj`$849]], 
     Notebook`Editor`TOC`Private`heading[2, "Demonstration", 
      CellObj[JerryI`Notebook`CellObj`$852]]}|>, 
 "Cells" -> {<|"Data" -> ".md\n# Real-time Fluid Simulation (Short)\n*Using \
Wolfram Language and WLJS libraries*\n\n__Please see the `Tutorials/D - *` \
section__ for a step-by-step solution. Here, only the final example will be \
presented.", "Display" -> "codemirror", 
    "Hash" -> "4a5c9350-4d07-4d76-b780-a77bc0e18a94", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "29bfa5d2-7bd5-43d6-ad03-e98e2b9d9752"|>, 
   <|"Data" -> "# Real-time Fluid Simulation (Short)\n*Using Wolfram Language \
and WLJS libraries*\n\n__Please see the `Tutorials/D - *` section__ for a \
step-by-step solution. Here, only the final example will be presented.", 
    "Display" -> "markdown", "Hash" -> 
     "198b8571-a89f-44b5-a80e-334aedacf708", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "29bfa5d2-7bd5-43d6-ad03-e98e2b9d9752"|>, 
   <|"Data" -> ".md\n<span style=\"color:red\">Warning: this version is \
optimized for the performance, please see the original tutorial for more \
readable version</span>", "Display" -> "codemirror", 
    "Hash" -> "50aa89f0-f8ea-4bcf-aeec-ad857daf4162", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "29bfa5d2-7bd5-43d6-ad03-e98e2b9d9752"|>, 
   <|"Data" -> "<span style=\"color:red\">Warning: this version is optimized \
for the performance, please see the original tutorial for more readable \
version</span>", "Display" -> "markdown", 
    "Hash" -> "f92f6271-1466-4295-80f7-9d264897f3d4", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "29bfa5d2-7bd5-43d6-ad03-e98e2b9d9752"|>, 
   <|"Data" -> ".md\n## Equations\nWe based our implementation on the \
Navier-Stokes equation for incompressible fluid with no \
viscosity\n\n$$\n\\\\frac{\\\\partial \\\\mathbf{v}}{\\\\partial t} + \
(\\\\mathbf{v} \\\\cdot \\\\nabla) \\\\mathbf{v} = f_{\\\\text{external}}, \
\\\\qquad div~\\\\mathbf{v} = 0\n$$\n\nwhere $f_{external}$ accounts for the \
pressure gradient and external forces.\n\nThen, we solve these two equations \
in a discretized form on a grid using a technique mentioned in Jos Stam's \
*Stable Fluids* work.", "Display" -> "codemirror", 
    "Hash" -> "c2e1d7c1-7ff5-4c73-b520-32918e405ae4", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "29bfa5d2-7bd5-43d6-ad03-e98e2b9d9752"|>, 
   <|"Data" -> "## Equations\nWe based our implementation on the \
Navier-Stokes equation for incompressible fluid with no \
viscosity\n\n$$\n\\\\frac{\\\\partial \\\\mathbf{v}}{\\\\partial t} + \
(\\\\mathbf{v} \\\\cdot \\\\nabla) \\\\mathbf{v} = f_{\\\\text{external}}, \
\\\\qquad div~\\\\mathbf{v} = 0\n$$\n\nwhere $f_{external}$ accounts for the \
pressure gradient and external forces.\n\nThen, we solve these two equations \
in a discretized form on a grid using a technique mentioned in Jos Stam's \
*Stable Fluids* work.", "Display" -> "markdown", 
    "Hash" -> "59a22a8a-cdea-437d-9a62-0bfdc44bdcb2", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "29bfa5d2-7bd5-43d6-ad03-e98e2b9d9752"|>, 
   <|"Data" -> ".md\n### Advection function", "Display" -> "codemirror", 
    "Hash" -> "964c3a8b-185c-4740-a550-31ffcb8e768b", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "29bfa5d2-7bd5-43d6-ad03-e98e2b9d9752"|>, 
   <|"Data" -> "### Advection function", "Display" -> "markdown", 
    "Hash" -> "832713f7-0e59-4830-9d9b-df7e880d63d3", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "29bfa5d2-7bd5-43d6-ad03-e98e2b9d9752"|>, 
   <|"Data" -> "advect = Compile[{{v, _Real, 3}, {u, _Real, 3}, {\[Delta]t, \
_Real, 0}} , With[{max = Length[v]}, With[{\n \n},\n  Table[ \n  \n    \
With[{\n      v1 =  (*FB[*)((If[i-1 >= 1, v[[i-1, j]], {0.,0.}] + v[[i, \
j]])(*,*)/(*,*)(2.0))(*]FB*).{1,0},\n      v2 =  (*FB[*)((If[j+1 <= max, \
v[[i, j+1]], {0.,0.}] + v[[i, j]])(*,*)/(*,*)(2.0))(*]FB*).{0,-1},\n      v3 \
=  (*FB[*)((If[i+1 <= max, v[[i+1, j]], {0.,0.}] + v[[i, \
j]])(*,*)/(*,*)(2.0))(*]FB*).{-1,0},\n      v4 =  (*FB[*)((If[j-1 >= 1, v[[i, \
j-1]], {0.,0.}] + v[[i, j]])(*,*)/(*,*)(2.0))(*]FB*).{0,1},\n      org = \
u[[i,j]]\n    },\n\n      org +  (\n      \n        v1 If[v1 >0, If[i-1 >= 1, \
u[[i-1, j]], {0.,0.} ], org]  + v3 If[v3>0,If[i+1 <= max, u[[i+1, j]], \
{0.,0.} ], org]+\n        \n        v4 If[v4 >0, If[j-1 >= 1, u[[i, j-1]], \
{0.,0.} ], org] + v2 If[v2>0, If[j+1 <= max, u[[i, j+1]], {0.,0.} ], org]\n   \
     \n      ) \[Delta]t \n    ]\n    \n  , {i, max}, {j, max}] // Chop\n ]] \
];", "Display" -> "codemirror", "Hash" -> 
     "d994af93-fa29-4f8e-882f-57ee8766f6c1", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"InitGroup" -> True, "Fade" -> True|>, 
    "State" -> "Idle", "Type" -> "Input", "UID" -> Null, 
    "Notebook" -> "29bfa5d2-7bd5-43d6-ad03-e98e2b9d9752"|>, 
   <|"Data" -> ".md\n### Function to remove divergence", 
    "Display" -> "codemirror", "Hash" -> 
     "127f99ef-5d36-40a9-aadc-2244e886849a", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "29bfa5d2-7bd5-43d6-ad03-e98e2b9d9752"|>, 
   <|"Data" -> "### Function to remove divergence", "Display" -> "markdown", 
    "Hash" -> "3ea76e19-2c3d-4538-a135-b74eb99d3d2e", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "29bfa5d2-7bd5-43d6-ad03-e98e2b9d9752"|>, 
   <|"Data" -> "removeDivergence = Compile[{{grid, _Real, 3}}, With[{\n  max \
= grid // Length\n},\n  MapIndexed[Function[{val, i}, \n    val + \
(*FB[*)((1)(*,*)/(*,*)(8.0))(*]FB*) (\n      (\n        (\n          \
If[i[[1]] - 1 >= 1 && i[[1]] - 1 <= max && i[[2]] - 1 >= 1 && i[[2]] - 1 <= \
max, grid[[i[[1]] - 1, i[[2]] - 1]], {0.,0.}] \n          \n          + \
If[i[[1]] + 1 >=1 && i[[1]] + 1 <= max && i[[2]] + 1 >= 1 && i[[2]] + 1 <= \
max, grid[[i[[1]] + 1, i[[2]] + 1]], {0.,0.}]\n        \n        ).{1,1}\n    \
    \n      ){1,1} +\n\n      (\n        (\n          If[i[[1]] - 1 >= 1 && \
i[[1]] - 1 <= max && i[[2]] + 1 >= 1 && i[[2]] + 1 <= max, grid[[i[[1]] - 1, \
i[[2]] + 1]], {0.,0.}]\n          \n          + If[i[[1]] + 1 >= 1 && i[[1]] \
+ 1 <= max && i[[2]] - 1 >= 1 && i[[2]] - 1 <= max, grid[[i[[1]] + 1, i[[2]] \
- 1]], {0.,0.}]\n          \n        ).{1,-1}\n        \n      ){1,-1} +\n\n  \
    (\n        If[i[[1]]-1 >= 1 && i[[1]]-1 <= max, grid[[i[[1]]-1, i[[2]] \
]], {0.,0.}]\n        \n        + If[i[[1]]+1 >= 1 && i[[1]]+1 <= max, grid[[ \
i[[1]]+1, i[[2]] ]], {0.,0.}]\n        \n        - If[i[[2]]-1 >= 1 && \
i[[2]]-1 <= max, grid[[ i[[1]], i[[2]]-1 ]], {0.,0.}]\n        \n        - \
If[i[[2]]+1 >= 1 && i[[2]]+1 <= max, grid[[i[[1]], i[[2]]+1]], {0.,0.}]\n     \
   \n      ){2,-2} \n        \n        + grid[[ i[[1]], i[[2]] ]] (-4)\n\n    \
)\n  ], grid, {2}]\n] ];", "Display" -> "codemirror", 
    "Hash" -> "6245685f-9ea8-4c79-b176-6f879669e899", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"InitGroup" -> True, "Fade" -> True|>, 
    "State" -> "Idle", "Type" -> "Input", "UID" -> Null, 
    "Notebook" -> "29bfa5d2-7bd5-43d6-ad03-e98e2b9d9752"|>, 
   <|"Data" -> ".md\n### Bilinear interpolator", "Display" -> "codemirror", 
    "Hash" -> "3ff97672-fd83-4fa2-ad0e-6e5aea3aa16d", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "29bfa5d2-7bd5-43d6-ad03-e98e2b9d9752"|>, 
   <|"Data" -> "### Bilinear interpolator", "Display" -> "markdown", 
    "Hash" -> "eb8a4761-2577-4e28-bbb1-b712922af826", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "29bfa5d2-7bd5-43d6-ad03-e98e2b9d9752"|>, 
   <|"Data" -> "bilinearInterpolation = Compile[{{array, _Real, 3}, {v, \
_Real, 1}}, Module[\n  {rows, cols, x = v[[2]], y = v[[1]], x1, x2, y1, y2, \
fQ11, fQ12, fQ21, fQ22},\n  \n  (* Get the dimensions of the array *)\n  \
{rows, cols} = {Length[array], Length[array]};\n  \n  (* Clip points to the \
boundaries *)\n  x = Clip[x, {1, cols}];\n  y = Clip[y, {1, rows}];\n  \n  (* \
Find the bounding indices *)\n  x1 = Floor[x]; \n  x2 = Ceiling[x];\n  y1 = \
Floor[y]; \n  y2 = Ceiling[y];\n  \n  (* Get the values at the four corners \
*)\n  fQ11 = array[[y1, x1]];\n  fQ12 = array[[y2, x1]];\n  fQ21 = array[[y1, \
x2]];\n  fQ22 = array[[y2, x2]];\n  \n  (* Perform bilinear interpolation \
*)\n  If[x2 == x1,\n    If[y2 == y1,\n      fQ11,\n      1/(2 (y2 - y1)) * \
(\n        fQ11 (y2 - y) +\n        fQ21 (y2 - y) +\n        fQ12 (y - y1) \
+\n        fQ22 (y - y1)\n      )\n    ],\n    If[y2 == y1,\n      1/(2 (x2 - \
x1)) * (\n        fQ11 (x2 - x) +\n        fQ21 (x - x1) +\n        fQ12 (x2 \
- x) +\n        fQ22 (x - x1)\n      ),\n      1/((x2 - x1) (y2 - y1)) * (\n  \
      fQ11 (x2 - x) (y2 - y) +\n        fQ21 (x - x1) (y2 - y) +\n        \
fQ12 (x2 - x) (y - y1) +\n        fQ22 (x - x1) (y - y1)\n      )\n    ]\n  \
]\n] ];", "Display" -> "codemirror", 
    "Hash" -> "52ebe280-1f82-4438-ba0c-943b02f0b827", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"InitGroup" -> True, "Fade" -> True|>, 
    "State" -> "Idle", "Type" -> "Input", "UID" -> Null, 
    "Notebook" -> "29bfa5d2-7bd5-43d6-ad03-e98e2b9d9752"|>, 
   <|"Data" -> ".md\n### Advection for test particles", 
    "Display" -> "codemirror", "Hash" -> 
     "a71b2bf3-ff52-4dfc-a2fc-5dbad580a6f5", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "29bfa5d2-7bd5-43d6-ad03-e98e2b9d9752"|>, 
   <|"Data" -> "### Advection for test particles", "Display" -> "markdown", 
    "Hash" -> "64cd9d8e-d90d-4cc6-913a-1d956ca29835", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "29bfa5d2-7bd5-43d6-ad03-e98e2b9d9752"|>, 
   <|"Data" -> "advectParticles[v_, pts_, \[Delta]t_:0.02] := Map[Function[p, \
p + \[Delta]t (bilinearInterpolation[v, p])], pts]", 
    "Display" -> "codemirror", "Hash" -> 
     "0ac1a8dd-4bcc-4496-a663-03b6a6682e30", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"InitGroup" -> True|>, 
    "State" -> "Idle", "Type" -> "Input", "UID" -> Null, 
    "Notebook" -> "29bfa5d2-7bd5-43d6-ad03-e98e2b9d9752"|>, 
   <|"Data" -> ".md\n---\n## Demonstration\n\n<span id=\"tldr\" \
style=\"color: blue\"><b>Evaluate the cell below</b> in the notebook. Use \
your mouse to draw velocity vectors.</span>", "Display" -> "codemirror", 
    "Hash" -> "a056614c-00d9-4189-8c65-0a10ec77040f", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "29bfa5d2-7bd5-43d6-ad03-e98e2b9d9752"|>, 
   <|"Data" -> "---\n## Demonstration\n\n<span id=\"tldr\" style=\"color: \
blue\"><b >Evaluate the cell below</b> in the notebook. Use your mouse to \
draw velocity vectors.</span>", "Display" -> "markdown", 
    "Hash" -> "37390bbf-6450-4d32-a295-546b422cbc8d", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Output", "UID" -> Null, "Notebook" -> 
     "29bfa5d2-7bd5-43d6-ad03-e98e2b9d9752"|>, 
   <|"Data" -> "fgrid = Table[{0.,0.}, {i,15}, {j,15}];\nfcolors = Table[1.0, \
{Length[fgrid]}, {Length[fgrid]}];\n\nstart = {1,1};\ndrawing = False;\ndest \
= {0,0};\nffps = 0;\n\nparticles = RandomPointConfiguration[\n      \
HardcorePointProcess[10000\n      , 0.4, 2],\n      Rectangle[{1+4,1+4}, \
{15-4,15-4}], Method -> {\"LengthOfRun\" -> \
10000000}][\"Points\"];\n\nWith[{\n  scene = FrontInstanceReference[]\n},\n\n \
 Graphics[{Arrowheads[Medium/2],\n    Table[With[{i=i, j=j}, \n      \
(*BB[*)(* now we have dynamic Hue and dynamic Arrow \
*)(*,*)(*\"1:eJxTTMoPSmNhYGAo5gcSAUX5ZZkpqSn+BSWZ+XnFaYwgCS4g4Zyfm5uaV+KUXxEM\
Uqxsbm6exgSSBPGCSnNSg9mAjOCSosy8dLBYSFFpKpoKkDkeqYkpEFXBILO1sCgJSczMQVYCAOFrJ\
EU=\"*)(*]BB*)\n      Offload[{ \n        Hue[fcolors[[i]][[j]]],\n        \
Arrow[{{i,j}, {i,j} +  fgrid[[i]][[j]]}]\n      }] \n    \n    ], {i,15}, \
{j,15}],\n\n    (*BB[*)(*attach listeners to a user's mouse to manipulate the \
grid*)(*,*)(*\"1:eJxTTMoPSmNhYGAo5gcSAUX5ZZkpqSn+BSWZ+XnFaYwgCS4g4Zyfm5uaV+KU\
XxEMUqxsbm6exgSSBPGCSnNSg9mAjOCSosy8dLBYSFFpKpoKkDkeqYkpEFXBILO1sCgJSczMQVYCA\
OFrJEU=\"*)(*]BB*)\n    EventHandler[Graphics`Canvas[], {\n      \"mouseup\" \
-> Function[xy,\n        With[{v = -Normalize[start - xy]},\n          Do[ \
(*BB[*)(* draw a line of velocities \
*)(*,*)(*\"1:eJxTTMoPSmNhYGAo5gcSAUX5ZZkpqSn+BSWZ+XnFaYwgCS4g4Zyfm5uaV+KUXxEM\
Uqxsbm6exgSSBPGCSnNSg9mAjOCSosy8dLBYSFFpKpoKkDkeqYkpEFXBILO1sCgJSczMQVYCAOFrJ\
EU=\"*)(*]BB*)\n            With[{p = Round /@ ((xy - start) a + start)},\n   \
       \n              If[p[[1]] <= 15 && p[[1]] >=1 && p[[2]] <=15 && p[[2]] \
>=1,\n                fgrid[[p[[1]],p[[2]]]] = {v[[1]], v[[2]]};\n            \
  ];\n\n            ];\n          , {a, 0, 1,0.1}];\n          \n        \
];\n\n        Delete[drawing]; (*BB[*)(* delete temporal arrow \
*)(*,*)(*\"1:eJxTTMoPSmNhYGAo5gcSAUX5ZZkpqSn+BSWZ+XnFaYwgCS4g4Zyfm5uaV+KUXxEM\
Uqxsbm6exgSSBPGCSnNSg9mAjOCSosy8dLBYSFFpKpoKkDkeqYkpEFXBILO1sCgJSczMQVYCAOFrJ\
EU=\"*)(*]BB*)\n        drawing = False;\n      \n      ],\n\n      \
\"mousemove\" -> Function[xy,\n        dest = xy;\n      ],\n    \n      \
\"mousedown\" -> Function[xy,\n        start = xy;\n        dest = xy;\n      \
\n        If[drawing =!= False, Delete[drawing]];\n        (*BB[*)(*append \
GUI's arrow to existing \
canvas*)(*,*)(*\"1:eJxTTMoPSmNhYGAo5gcSAUX5ZZkpqSn+BSWZ+XnFaYwgCS4g4Zyfm5uaV+\
KUXxEMUqxsbm6exgSSBPGCSnNSg9mAjOCSosy8dLBYSFFpKpoKkDkeqYkpEFXBILO1sCgJSczMQVY\
CAOFrJEU=\"*)(*]BB*)\n        drawing = FrontInstanceGroup[];\n        \n     \
   FrontSubmit[{\n          AbsoluteThickness[3], Gray, \n          \
Arrow[{xy, dest // Offload}]\n        } // drawing, \n          scene\n       \
 ];\n      \n      ]\n    }], \n\n    (*BB[*)(*sync with browser's repaint \
cycle and update of fps \
label*)(*,*)(*\"1:eJxTTMoPSmNhYGAo5gcSAUX5ZZkpqSn+BSWZ+XnFaYwgCS4g4Zyfm5uaV+K\
UXxEMUqxsbm6exgSSBPGCSnNSg9mAjOCSosy8dLBYSFFpKpoKkDkeqYkpEFXBILO1sCgJSczMQVYC\
AOFrJEU=\"*)(*]BB*)\n    AnimationFrameListener[ffps // Offload, \
\"Event\"->\"fframe\"], \n    (*BB[*)(*mark this instance of Graphics with \
uid to append new \
elements*)(*,*)(*\"1:eJxTTMoPSmNhYGAo5gcSAUX5ZZkpqSn+BSWZ+XnFaYwgCS4g4Zyfm5ua\
V+KUXxEMUqxsbm6exgSSBPGCSnNSg9mAjOCSosy8dLBYSFFpKpoKkDkeqYkpEFXBILO1sCgJSczMQ\
VYCAOFrJEU=\"*)(*]BB*)\n    scene,\n    PointSize[0.02], \
Point[particles//Offload],\n    Text[ffps // Offload, {0,0}]\n  }, \n    \
Controls->False, \n    ImageSize->500, \n    PlotRange->{{-0.5,15.5}, \
{-0.5,15.5}}, \n    ImagePadding->None, \n    TransitionDuration->35 \
(*BB[*)(*since the simulation is slow, we have to \
interpolate*)(*,*)(*\"1:eJxTTMoPSmNhYGAo5gcSAUX5ZZkpqSn+BSWZ+XnFaYwgCS4g4Zyfm\
5uaV+KUXxEMUqxsbm6exgSSBPGCSnNSg9mAjOCSosy8dLBYSFFpKpoKkDkeqYkpEFXBILO1sCgJSc\
zMQVYCAOFrJEU=\"*)(*]BB*)\n  ]\n]\n\n(* subscribe to animation event \
*)\n\nftime = AbsoluteTime[];\n\n(*BB[*)(* 1 advection per 2 removeDivergence \
*)(*,*)(*\"1:eJxTTMoPSmNhYGAo5gcSAUX5ZZkpqSn+BSWZ+XnFaYwgCS4g4Zyfm5uaV+KUXxEM\
Uqxsbm6exgSSBPGCSnNSg9mAjOCSosy8dLBYSFFpKpoKkDkeqYkpEFXBILO1sCgJSczMQVYCAOFrJ\
EU=\"*)(*]BB*)\nfpipeline = Composition[removeDivergence, removeDivergence, \
advect[#,#, 0.2]&];\n\nEventHandler[\"fframe\", Function[Null,\n\n  \
(*BB[*)(*apply the whole pipline as a single \
function*)(*,*)(*\"1:eJxTTMoPSmNhYGAo5gcSAUX5ZZkpqSn+BSWZ+XnFaYwgCS4g4Zyfm5ua\
V+KUXxEMUqxsbm6exgSSBPGCSnNSg9mAjOCSosy8dLBYSFFpKpoKkDkeqYkpEFXBILO1sCgJSczMQ\
VYCAOFrJEU=\"*)(*]BB*)\n  fgrid = fpipeline[fgrid];\n  \n  fcolors = \
Map[Function[val, (*FB[*)((\[Pi] + 2.0 ToPolarCoordinates[val]// \
Last)(*,*)/(*,*)(3.0 \[Pi]))(*]FB*) ], fgrid, {2}];\n  \n  (*BB[*)(*2 times \
advection*)(*,*)(*\"1:eJxTTMoPSmNhYGAo5gcSAUX5ZZkpqSn+BSWZ+XnFaYwgCS4g4Zyfm5u\
aV+KUXxEMUqxsbm6exgSSBPGCSnNSg9mAjOCSosy8dLBYSFFpKpoKkDkeqYkpEFXBILO1sCgJSczM\
QVYCAOFrJEU=\"*)(*]BB*)\n  particles = With[{p = advectParticles[fgrid, \
particles, 0.3]},\n    advectParticles[fgrid, p, 0.3]\n  ];\n\n  ffps = \
(*FB[*)(((ffps + 1 / (AbsoluteTime[] - ftime)))(*,*)/(*,*)(2.0))(*]FB*) // \
Round;\n  ftime = AbsoluteTime[]; \n]];", "Display" -> "codemirror", 
    "Hash" -> "62509787-c891-4b36-b21a-3ad5d49b50d8", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "State" -> "Idle", 
    "Type" -> "Input", "UID" -> Null, "Notebook" -> 
     "29bfa5d2-7bd5-43d6-ad03-e98e2b9d9752"|>}, "serializer" -> "jsfn4"|>
