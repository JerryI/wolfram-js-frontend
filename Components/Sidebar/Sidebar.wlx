Sidebar := ImportComponent["Body.wlx"];

Controller["Delete", sidebarId_, ___] := Function[name,
  DeleteFile[URLDecode[name]];
  EventFire[sidebarId, "Refresh", <|"Client"->$Client|>];
];

Controller["Duplicate", sidebarId_, ___] := Function[name,
  With[{decoded = URLDecode[name]},
    CopyFile[decoded, FileNameJoin[{DirectoryName[decoded], StringJoin[FileBaseName[decoded], "-dup", ".", FileExtension[decoded]]}]];
  ];
  EventFire[sidebarId, "Refresh", <|"Client"->$Client|>];
];

Controller["Reveal", __] := Function[name,
  WebUISubmit[Global`UIOpenExplorer[FileNameSplit[URLDecode[name]]] (*`*), $Client];
];

Controller["Download", __] := Function[name,
  WebUISubmit[Global`UIOpenDownloadWindow[name, FileNameTake[name // URLDecode]] (*`*), $Client];
];

Controller["Rename", sidebarId_, modals_, path_, Controls_] := Function[name,
  With[{decoded = URLDecode[name], request = CreateUUID[]},
    With[{splitted = FileNameSplit[decoded]},
      EventHandler[request, {
        "Success" -> Function[name,
          EventRemove[request];
          If[Length[splitted] == 1,
            If[DirectoryQ[decoded],
              RenameDirectory[decoded, name];
            ,
              RenameFile[decoded, name];
              Then[EventFire[Controls, "RenameFile", {decoded, name}], Function[Null,
                If[decoded == path,
                
                  WebUISubmit[UILocation[URLEncode[name] ], $Client];
                ];
              ]];
            ];
            EventFire[sidebarId, "Refresh", <|"Client"->$Client|>];
          ,
            If[DirectoryQ[decoded],
              RenameDirectory[decoded, FileNameJoin[Flatten @ {Drop[splitted,-1], name} ]];
            ,
              RenameFile[decoded, FileNameJoin[Flatten @ {Drop[splitted,-1], name} ]];

              Then[EventFire[Controls, "RenameFile", {decoded, FileNameJoin[Flatten @ {Drop[splitted,-1], name} ]}], Function[Null,
                If[decoded == path,
                  WebUISubmit[UILocation[URLEncode[ FileNameJoin[Flatten @ {Drop[splitted,-1], name} ] ]], $Client];
                ];
              ]];
            ];
            EventFire[sidebarId, "Refresh", <|"Client"->$Client|>];        
          ];
        ],

        _ -> Function[Null,
          Echo["Cancelled or did not managed to perform"];
          EventRemove[request];
        ]
      }];

      EventFire[modals, "TextField", <|"Client"->$Client, "Callback"->request, "Title"->"Enter new name", "String"-> Last[splitted]|>];
    ];
  ];
];

Controller["Window", __] := Function[name,
  WebUISubmit[Global`UIOpenWindow[name] (*`*), $Client];
];

orderlessSameQ[a_List, b_List] := (Length@a == Length@b) && (Sort@Tally@a === Sort@Tally@b);


Component[OptionsPattern[]] :=  Module[{timer, cached},
With[{
    SidebarId = CreateUUID[], 
    Secret = OptionValue["Secret"], 
    Path = OptionValue["Path"], 
    Controls = OptionValue["Controls"],
    Icons     = OptionValue["Icons"],
    modals = OptionValue["Modals"],
    Parameters = OptionValue["Parameters"],
    Button1Id = CreateUUID[],
    Button2Id = CreateUUID[],
    dir = If[DirectoryQ[OptionValue["Path"]], OptionValue["Path"], DirectoryName[OptionValue["Path"]]]
  },

  timer = AbsoluteTime[];
  cached = FileNames["*", dir, 2];

  EventHandler[EventClone @ SidebarId, {
    any_ -> Function[Null, (timer = AbsoluteTime[])]
  }];

  EventHandler[Secret, {
    "CheckFiles" -> Function[Null,

      If[AbsoluteTime[] - timer > 2.5,
 
        With[{files = FileNames["*", dir, 2]},
          If[!orderlessSameQ[files, cached],
            cached = files;
            Echo["Refresh sidebar!"];
            EventFire[SidebarId, "Refresh", <|"Client"->$Client|>]; 
          ]
        ]
      ];
    ],
    FileOperate[any_] :> Controller[any, SidebarId, modals, Path, Controls]
  }];

  EventHandler[Button1Id, Function[Null,
    EventFire[Controls, "NewNotebook", <|"BaseDirectory" -> If[DirectoryQ[Path], Path, DirectoryName[Path]]|>];
  ]];

  EventHandler[Button2Id, Function[Null,
    With[{request = CreateUUID[]},
      With[{},
        EventHandler[request, {
          "Success" -> Function[name,
            EventRemove[request];
            If[StringLength[StringTrim[name]] =!= 0,
              With[{path = If[DirectoryQ[Path], Path, DirectoryName[Path]]},
                CreateDirectory[FileNameJoin[{path, StringTrim[name]}]];
              ];
              EventFire[SidebarId, "Refresh", <|"Client"->$Client|>]; 
            ];
          ],

          _ -> Function[Null,
            Echo["Cancelled or did not managed to perform"];
            EventRemove[request];
          ]
        }];

        EventFire[modals, "TextField", <|"Client"->$Client, "Callback"->request, "Title"->"Enter new name", "String"-> ""|>];
      ];
    ];
  ]];

  {
    <div class="text-xs group items-center osx:font-semibold px-4 leading-8 text-gray-454 win:text-gray-500 owin:text-gray-500 linux:text-gray-500 flex">
      File browser
      <div class="ml-auto gap-x-1 flex group-hover:opacity-100 opacity-0">
        <button id="{Button1Id}">
          <svg  fill="currentColor" class="h-4 w-4" viewBox="0 0 512 512" enable-background="new 0 0 512 512">
            <g>
              <g>
                <path d="M256,11C120.9,11,11,120.9,11,256s109.9,245,245,245s245-109.9,245-245S391.1,11,256,11z M256,460.2    c-112.6,0-204.2-91.6-204.2-204.2S143.4,51.8,256,51.8S460.2,143.4,460.2,256S368.6,460.2,256,460.2z"/>
                <path d="m357.6,235.6h-81.2v-81.2c0-11.3-9.1-20.4-20.4-20.4-11.3,0-20.4,9.1-20.4,20.4v81.2h-81.2c-11.3,0-20.4,9.1-20.4,20.4s9.1,20.4 20.4,20.4h81.2v81.2c0,11.3 9.1,20.4 20.4,20.4 11.3,0 20.4-9.1 20.4-20.4v-81.2h81.2c11.3,0 20.4-9.1 20.4-20.4s-9.1-20.4-20.4-20.4z"/>
              </g>
            </g>
          </svg>
        </button>
        <button id="{Button2Id}">
        <svg stroke="currentColor" class="h-5 w-5" fill="none" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 19H6.931A1.922 1.922 0 015 17.087V8h12.069C18.135 8 19 8.857 19 9.913V11"></path>
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14 7.64L13.042 6c-.36-.616-1.053-1-1.806-1H7.057C5.921 5 5 5.86 5 6.92V11M17 15v4M19 17h-4"></path>
        </svg>
        </button>
      </div>
    </div>
  ,
    <WebUIEventListener Type={"click"} Id={Button1Id} Event={Button1Id} />
  ,
    <WebUIEventListener Type={"click"} Id={Button2Id} Event={Button2Id} />
  ,
    <WebUIRefresh Event={SidebarId} Class={"flex grow flex-col gap-y-5 overflow-y-auto px-4 sc-b"}>
      <Sidebar Port={Secret} Icons={Icons} Parameters={Parameters} Secret={"blackhole"} Path={Path} />
    </WebUIRefresh>
  ,
    <script type="module">
      core.UIOpenExplorer = async (args, env) => {
        const filename = await interpretate(args[0], env);
        console.warn(filename);
        
        if (window.electronAPI) {
          window.electronAPI.openFinder(JSON.stringify(filename));
        }   
      }

      core.UIOpenDownloadWindow = async (args, env) => {
        const url = await interpretate(args[0], env);
        const name = await interpretate(args[1], env);
        const  link = document.createElement("a")
        link.href = 'downloadFile/?path=' + url;
        link.download = name;
        link.click();        
      }

      core.UIOpenWindow = async (args, env) => {
        const url = await interpretate(args[0], env);
        const  link = document.createElement("a")
        link.href = url;
        link.target = "_blank"
        link.click();
      }

      setInterval(() => {
        server.emitt('<Secret/>', 'True', 'CheckFiles');
      }, 3000);
    </script>
  }
] ]

Options[Component] = {"Icons"->"", "Secret"->"", "Path"->"", "Controls"->"", "Parameters"->"", "Modals"->""}

Component