Window[OptionsPattern[]] := With[{request = OptionValue["Data"]["Callback"], Title=OptionValue["Data"]["Title"], DefaultValue =OptionValue["Data"]["String"],  loader = OptionValue["Data"]["LazyLoad"], client = OptionValue["Data"]["Client"]},
    With[{
        Uid = CreateUUID[]
      },

      EventHandler[Uid, {
        "Success" -> Function[encoded,
            EventFire[loader, "Remove", <|"Client" -> client|>];
            EventFire[request, "Success", URLDecode[encoded]];
        ],
        
        "Cancelled" -> Function[Null,
            EventFire[loader, "Remove", <|"Client" -> client|>];
            EventFire[request, "Cancelled", <|"Client" -> client|>];
        ]
      }];
    
      <div class="relative z-inf" role="dialog" aria-modal="true">
        <div class="fixed inset-0 bg-gray-500 dark:bg-gray-800 dark:bg-opacity-75 bg-opacity-25 transition-opacity"></div>
         <div class="fixed flex inset-0 z-10 w-screen overflow-y-auto p-4 sm:p-6 md:p-20">
            <div class="mx-auto w-3/6 my-auto transform divide-y divide-gray-500 divide-opacity-10 overflow-hidden rounded-xl bg-white dark:bg-gray-700 bg-opacity-60 shadow-2xl ring-1 ring-black ring-opacity-5 backdrop-blur backdrop-filter transition-all">
               <ul class="max-h-80 scroll-py-2 divide-y divide-gray-500 divide-opacity-10 overflow-y-auto p-0">
                  <li class="p-4 pt-2 list-none">
                     <h2 class="mb-2 mt-2 text-xs font-semibold text-gray-900 dark:text-gray-400"><Title/></h2>
                     <ul class="text-sm text-gray-700 flex flex-col gap-y-1 p-0">
                        <div id="{Uid}" type="button" contenteditable="true" class="relative w-full cursor-default rounded-md 0 pl-3  pr-2 text-left text-gray-600 dark:text-gray-300  ring-1 ring-inset ring-gray-400 sm:text-xs sm:leading-6 items-center bg-d9 dark:bg-gray-700" aria-haspopup="listbox" aria-expanded="true" aria-labelledby="listbox-label">
                            <DefaultValue/>
                        </div>
                     </ul>
                     <script type="module">
                        const text = document.getElementById('<Uid/>');

                        const keyListener = (e) => {
                                switch(e.keyCode) {                                    
                                    case 27:
                                        console.log('escape');
                                        close();
                                    break;
                                    
                                    case 13:
                                        console.log('enter');
                                        submit();
                                    break;                            
                                    
                                    default:
                                    
                                }
                        };


                        document.addEventListener('keydown', keyListener);
                        const submit = (el) => {
                            document.removeEventListener('keydown', keyListener);
                            server.emitt('<Uid/>', '"'+encodeURIComponent(text.innerText)+'"', 'Success');
                        };

                        const close = () => {
                            document.removeEventListener('keydown', keyListener);
                            server.emitt('<Uid/>', 'True', 'Cancelled');
                        };

                    
                       </script>
                  </li>
               </ul>
            </div>
         </div>
      </div>
    ]
];

Options[Window] = {"Channel" -> "", "Data" -> <| |>};

Component[OptionsPattern[]] := With[{Event = OptionValue["Events"], Channel = CreateUUID[], LazyLoad = CreateUUID[]}, Module[{loaded = False},
    EventHandler[Event, {
        "TextField" -> Function[data,
            EventFire[LazyLoad, "Load", Join[data, <|"Client" -> data["Client"], "LazyLoad" -> LazyLoad|>]];
        ]
    }];

    <WebUILazyLoad Event={LazyLoad}>
        <Window Channel={Channel} Data={WebUILazyLoadDataProvided}/>
    </WebUILazyLoad>
]];

Options[Component] = {"Events" -> ""}

Component