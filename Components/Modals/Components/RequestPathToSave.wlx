Component[OptionsPattern[]] := With[{Event = OptionValue["Events"], Channel = CreateUUID[], LazyLoad = CreateUUID[]}, Module[{loaded = False},
    EventHandler[Event, {
        "RequestPathToSave" -> Function[data,
            With[{p = Promise[]},
                EventFire[Channel, "Ask", Join[data, <|"Client" -> data["Client"], "Promise" -> First[p]|>]];
                Then[p, 
                    Function[result,
                        Echo["RequestFileToSave >> Resolved!"];
                        EventFire[data["Promise"], Resolve, URLDecode @ result];
                    ],

                    Function[reject,
                        Echo["RequestFileToSave >> Rejected!"];
                        If[reject === "NoElectron",
                            (*/* spawn another modal to cover needs... if there is no electron wrapper */*)

                            With[{temp = CreateUUID[]},
                                EventHandler[temp, {
                                    "Cancelled" -> Function[Null,
                                        EventRemove[temp];
                                        EventFire[data["Promise"], Reject, "Cancelled"];
                                    ],

                                    "Success" -> Function[result,
                                        EventRemove[temp];
                                        EventFire[data["Promise"], Resolve, result];
                                    ]
                                }];
                                EventFire[Event, "TextField", <|"Client"->data["Client"], "Title"->data["Title"], "String" -> StringJoin["untitled.", data["Ext"]], "Callback"->temp|>];
                            ];             
                        ,
                            EventFire[data["Promise"], Reject, reject];
                        ];            
                    ]
                ];
            ]
        ]
    }];

    <WebUIJSBind Event={Channel}>

        this.on('Ask', async (data) => {
          const assoc = await interpretate(data, {hold:true});
          const promise = await interpretate(assoc.Promise, {});
          const title = await interpretate(assoc.Title, {});
          const ext   = await interpretate(assoc.Ext, {});

          if (!window.electronAPI) {
            server._emitt(promise, '"NoElectron"', 'Reject');
            console.warn('No ElectronJS found');
            return;
          } 

          window.electronAPI.requestFileWindow({title:title, extension:[ext]}, (result) => {
            if (!result) {
                console.log('Cancelled');
                server._emitt(promise, '"Cancel"', 'Reject');
                return;
            }

            console.log(result);
            server._emitt(promise, '"'+result+'"', 'Resolve');

          });

        });     
    </WebUIJSBind>
]];

Options[Component] = {"Events" -> ""}

Component