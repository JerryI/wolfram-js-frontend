Window[OptionsPattern[]] := With[{request = OptionValue["Data"]["Callback"],   loader = OptionValue["Data"]["LazyLoad"], client = OptionValue["Data"]["Client"]},
    With[{
        Uid = CreateUUID[]
      },

      EventHandler[Uid, {
        "Success" -> Function[encoded,
            EventFire[loader, "Remove", <|"Client" -> client|>];
            EventFire[request, "Success", <|"Client" -> client|>];
        ],
        "Cancelled" -> Function[Null,
            EventFire[loader, "Remove", <|"Client" -> client|>];
            EventFire[request, "Cancelled", <|"Client" -> client|>];
        ]
      }];
    
      <div class="relative z-inf" role="dialog" aria-modal="true">
        <div class="fixed inset-0 bg-gray-500 dark:bg-gray-800 dark:bg-opacity-75 bg-opacity-75 transition-opacity"></div>
         <div class="fixed flex inset-0 z-10 w-screen overflow-y-auto p-4 sm:p-6 md:p-20">
            <div class="mx-auto w-3/6 my-auto transform divide-y divide-gray-500 divide-opacity-10 overflow-hidden rounded-xl bg-white bg-opacity-60 shadow-2xl ring-1 ring-black ring-opacity-5 backdrop-blur backdrop-filter transition-all dark:bg-gray-700">
               <ul class="max-h-80 scroll-py-2 divide-y divide-gray-500 divide-opacity-10 overflow-y-auto p-0">
                  <li class="p-4 pt-2 list-none">
                     <h2 class="mb-2 mt-2 text-xs font-semibold text-gray-900 dark:text-gray-400">Some cells require evaluation before you start</h2>
                     <ul class="text-sm text-gray-700 flex flex-col gap-y-1 p-0">
                        <li class="group w-full flex flex-start cursor-default select-none rounded-md list-none">
                            <button id="ok-{Uid}" type="button" class="relative w-full cursor-default rounded-md 0 h-7 pl-3  pr-2 text-left text-gray-500  ring-1 ring-inset ring-gray-400 focus:outline-none focus:ring-2 focus:ring-indigo-600 sm:text-xs sm:leading-6 bg-d9 dark:bg-gray-700" aria-haspopup="listbox" aria-expanded="true" aria-labelledby="listbox-label">
                                <span class="flex items-center gap-x-2">
                                    <svg class="h-4 w-4 text-gray-500" viewBox="0 0 24 24" fill="none"><path d="M14.5 16.5H16.1152C16.9825 16.5 17.7946 16.0745 18.2883 15.3614L21.6315 10.5323C21.8588 10.204 21.889 9.77803 21.7105 9.42094C21.3678 8.73545 20.4444 8.60613 19.9265 9.17109L17.2727 12.0661C16.2059 13.23 14.5301 13.612 13.0643 13.0257L9.44043 11.5762C8.53873 11.2155 7.51727 11.3218 6.70922 11.8605L2.87237 14.4184C2.37401 14.7507 2.20104 15.402 2.4689 15.9377C2.76223 16.5244 3.47562 16.7622 4.06229 16.4689L7.24772 14.8762C7.86821 14.5659 8.54577 15.1811 8.29674 15.8286L6.50003 20.5M7.00003 4H4.00003M6.00003 7H4.00003M18 6.5C18 8.70914 16.2092 10.5 14 10.5C11.7909 10.5 10 8.70914 10 6.5C10 4.29086 11.7909 2.5 14 2.5C16.2092 2.5 18 4.29086 18 6.5Z" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.4"/></svg>                              
                                    Evaluate initialization cells?
                                </span>
                            </button>                        
                        </li>                      
                     </ul>
                     <script type="module">
                        const element = document.getElementById('ok-<Uid/>');
                        let close;

                        const keyListener = (e) => {
                                switch(e.keyCode) {                                    
                                    case 27:
                                        console.log('escape');
                                        close();
                                    break;
                                    
                                    case 13:
                                        console.log('enter');
                                        submit();
                                    break;                            
                                    
                                    default:
                                    
                                }
                        };

                        element.addEventListener('click', (ev) => {
                            submit();
                            ev.stopPropagation();
                        });

                        

                        document.addEventListener('keydown', keyListener);
                        const submit = (el) => {
                            document.removeEventListener('keydown', keyListener);
                            element.removeEventListener('click', submit);
                            window.removeEventListener('click', close);  
                            server.emitt('<Uid/>', 'True', 'Success');
                        };

                        close = () => {
                            document.removeEventListener('keydown', keyListener);
                            element.removeEventListener('click', submit);
                            window.removeEventListener('click', close);  
                            server.emitt('<Uid/>', 'True', 'Cancelled');
                        };

                        window.addEventListener('click', close);   

                    
                       </script>
                  </li>
               </ul>
            </div>
         </div>
      </div>
    ]
];

Options[Window] = {"Channel" -> "", "Data" -> <| |>};

Component[OptionsPattern[]] := With[{Event = OptionValue["Events"], Channel = CreateUUID[], LazyLoad = CreateUUID[]}, Module[{loaded = False},
    EventHandler[Event, {
        "InitCellsQ" -> Function[data,
            EventFire[LazyLoad, "Load", Join[data, <|"Client" -> data["Client"], "LazyLoad" -> LazyLoad|>]];
        ]
    }];

    <WebUILazyLoad Event={LazyLoad}>
        <Window Channel={Channel} Data={WebUILazyLoadDataProvided}/>
    </WebUILazyLoad>
]];

Options[Component] = {"Events" -> ""}

Component