Window[OptionsPattern[]] := With[{promise = OptionValue["Data"]["Promise"], Opts = OptionValue["Data"]["Options"],  Title = OptionValue["Data"]["Title"], loader = OptionValue["Data"]["LazyLoad"], client = OptionValue["Data"]["Client"]},
    With[{
        Uid = CreateUUID[]
      },

      EventHandler[Uid, {
        "Ok" -> Function[choice,
            Echo["Choice:"];Echo[choice];
            EventFire[loader, "Remove", <|"Client" -> client|>];
            EventFire[promise, Resolve, <|"Client" -> client, "Result"->choice|>];
        ],
        _ -> Function[Null,
            EventFire[loader, "Remove", <|"Client" -> client|>];
            EventFire[promise, Reject, <|"Client" -> client|>];
        ]
      }];

      With[{
        OptsList = Table[ 
            <li class="group w-full flex flex-start cursor-default select-none rounded-md list-none">
                            <button type="button" class="relative w-full cursor-default rounded-md 0 h-7 pl-3  pr-2 text-left text-gray-500  ring-1 ring-inset ring-gray-400 focus:outline-none focus:ring-2 focus:ring-indigo-600 sm:text-xs sm:leading-6 bg-d9 dark:bg-gray-700" aria-haspopup="listbox" aria-expanded="true" aria-labelledby="listbox-label">
                                <span class="flex items-center gap-x-2">                               
                                    <Item/>
                                </span>
                            </button>                        
                        </li>
            , {Item, Opts}
        ]
      },
    
      <div class="relative z-inf" role="dialog" aria-modal="true">
        <div class="fixed inset-0 bg-gray-500 dark:bg-gray-800 dark:bg-opacity-75 bg-opacity-75 transition-opacity"></div>
         <div class="fixed flex inset-0 z-10 w-screen overflow-y-auto p-4 sm:p-6 md:p-20">
            <div class="mx-auto w-3/6 my-auto transform divide-y divide-gray-500 divide-opacity-10 overflow-hidden rounded-xl bg-white bg-opacity-60 shadow-2xl ring-1 ring-black ring-opacity-5 backdrop-blur backdrop-filter transition-all dark:bg-gray-700">
               <ul class="max-h-80 scroll-py-2 divide-y divide-gray-500 divide-opacity-10 overflow-y-auto p-0">
                  <li class="p-4 pt-2 list-none">
                     <h2 class="mb-2 mt-2 text-xs font-semibold text-gray-900 dark:text-gray-400"><Title/></h2>
                     <ul id="{Uid}" class="text-sm text-gray-700 flex flex-col gap-y-1 p-0">
                        <OptsList/>
                     </ul>
                     <script type="module">
                        const body = document.getElementById('<Uid/>');
                        const elements = body.getElementsByTagName('button');
                        let close;

                        let cursor = 0;

                        const keyListener = (e) => {
                                switch(e.keyCode) {                                    
                                    case 27:
                                        console.log('escape');
                                        close();
                                    break;
                                    
                                    case 13:
                                        console.log('enter');
                                        submit(cursor);
                                    break; 
                                    
                                    case  40:
                                        if (cursor === elements.length - 1) return;
                                        cursor++;
                                        elements[cursor].focus();
                                    break;

                                    case 38:
                                        if (cursor === 0) return;
                                        cursor--;
                                        elements[cursor].focus();
                                    break;

                                    default:
                                    
                                }
                        };

                        elements[0].focus();

                        for (let index=0; index<elements.length; ++index) {
                            //elements.forEach((el, index) => {
                            
                            elements[index].addEventListener('click', (ev) => {
                                submit(index);
                                ev.stopPropagation();
                            });
                        };


                        

                        document.addEventListener('keydown', keyListener);
                        let submit = (index) => {
                            document.removeEventListener('keydown', keyListener);
                            //element.removeEventListener('click', submit);
                            window.removeEventListener('click', close);  
                            server.emitt('<Uid/>', index + 1, 'Ok');
                            submit = () => {};
                        };

                        close = () => {
                            document.removeEventListener('keydown', keyListener);
                            //element.removeEventListener('click', submit);
                            window.removeEventListener('click', close);  
                            server.emitt('<Uid/>', 'Null', 'Cancel');
                        };

                        window.addEventListener('click', close);   

                    
                       </script>
                  </li>
               </ul>
            </div>
         </div>
      </div>
     ]
    ]
];

Options[Window] = {"Channel" -> "", "Data" -> <| |>};

Component[OptionsPattern[]] := With[{Event = OptionValue["Events"], Channel = CreateUUID[], LazyLoad = CreateUUID[]}, Module[{loaded = False},
    EventHandler[Event, {
        "Select" -> Function[data,
            EventFire[LazyLoad, "Load", Join[data, <|"Client" -> data["Client"], "LazyLoad" -> LazyLoad|>]];
        ]
    }];

    <WebUILazyLoad Event={LazyLoad}>
        <Window Channel={Channel} Data={WebUILazyLoadDataProvided}/>
    </WebUILazyLoad>
]];

Options[Component] = {"Events" -> ""}

Component