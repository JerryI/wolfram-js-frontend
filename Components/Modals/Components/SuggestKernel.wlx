Status2Color[s_] := Switch[
    s,
 
    "Initialized",
       "rgb(74 222 128)",
    "Starting",
       "rgb(250 204 21)",
    "Link Failed!",
       "rgb(248 113 113)",
    _,
       "rgb(156 163 175)"
];

KernelLabel[kernel_] := With[{Uid = kernel["Hash"], Name = kernel["Name"], Status = Status2Color[kernel["State"]]},
        <button id="modalButton-{Uid}" type="button" class="relative w-full cursor-default rounded-md 0 h-7 pl-3 pr-2 text-left text-gray-500  ring-1 ring-inset ring-gray-400 focus:outline-none focus:ring-2 focus:ring-indigo-600 sm:text-xs sm:leading-6 bg-d9 dark:bg-gray-700" aria-haspopup="listbox" aria-expanded="true" aria-labelledby="listbox-label">
          <span class="flex items-center">
            <span class="inline-block h-2 w-2 flex-shrink-0 rounded-full" style="background: {Status}">
            </span>
            <span class="ml-3 block truncate"><Name/></span>
          </span>
        </button>
]

Window[OptionsPattern[]] := With[{request = OptionValue["Data"]["Callback"], loader = OptionValue["Data"]["LazyLoad"], client = OptionValue["Data"]["Client"]},
    With[{
        KernelList := Block[{},
            Table[
                With[{Template = KernelLabel[K]},
                    <li class="group w-full flex flex-start cursor-default select-none rounded-md">
                        <Template/>
                    </li>
                ]
            , {K, ReleaseHold[OptionValue["Data"]["Kernels"]]} ] // Flatten // ToStringRiffle
        ],

        Uid = CreateUUID[]
      },

      EventHandler[Uid, {
        "Success" -> Function[uid,
            EventFire[loader, "Remove", <|"Client" -> client|>];
            With[{kernel = Kernel`HashMap[uid](*`*)},
                If[TrueQ[kernel["ContainerReadyQ"]] && TrueQ[kernel["ReadyQ"]],
                    EventFire[request, "Success", kernel];
                ,
                    EventFire[request, "Error", "Kernel container is not ready!"];
                ];
            ];
        ],
        "Cancelled" -> Function[uid,
            EventFire[loader, "Remove", <|"Client" -> client|>];
        ]
      }];
    
      <div class="relative z-inf" role="dialog" aria-modal="true">
        <div class="fixed inset-0 bg-gray-500 dark:bg-gray-800 dark:bg-opacity-75 bg-opacity-75 transition-opacity"></div>
         <div class="fixed flex inset-0 z-10 w-screen overflow-y-auto p-4 sm:p-6 md:p-20">
            <div class="mx-auto w-3/6 my-auto transform divide-y divide-gray-500 divide-opacity-10 overflow-hidden rounded-xl bg-white dark:bg-gray-700 bg-opacity-60 shadow-2xl ring-1 ring-black ring-opacity-5 backdrop-blur backdrop-filter transition-all">
               <ul class="max-h-80 scroll-py-2 divide-y divide-gray-500 divide-opacity-10 overflow-y-auto p-0">
                  <li class="p-4 pt-2 list-none">
                     <h2 class="mb-2 mt-2 text-xs font-semibold text-gray-900 dark:text-gray-400">Select Kernel</h2>
                     <ul id="{Uid}" class="text-sm text-gray-700 flex flex-col gap-y-1 p-0">
                        <KernelList/>
                     </ul>
                  </li>
               </ul>
               <script type="module">
                const list = document.getElementById('<Uid/>');
                const buttons = list.getElementsByTagName('button');
                console.log(buttons);
                buttons[0].focus();
                let choise = 0;

                const keyListener = (e) => {
                        switch(e.keyCode) {
                            case 38:
                                if (choise + 1 < buttons.length) {
                                    choise++;
                                } else {
                                    choise = 0;
                                }
                                buttons[choise].focus();
                            break;
                            
                            case 40:
                                if (choise - 1 > -1) {
                                    choise--;
                                } else {
                                    choise = buttons.length - 1;
                                }
                                buttons[choise].focus();                                
                            break;

                            case 27:
                                console.log('escape');
                                close();
                            break;

                            case 13:
                                console.log('enter');
                                submit(buttons[choise]);
                            break;                            
                            
                            default:

                        }
                };

                for (let i=0; i<buttons.length; i++) {
                    const el = buttons[i];
                    el.addEventListener('click',
                        () => {
                            submit(el);
                        }
                    );
                }

                document.addEventListener('keydown', keyListener);
                const submit = (el) => {
                    const uid = el.id.substring(12);
                    console.warn('Selected: '+ uid);
                    document.removeEventListener('keydown', keyListener);
                    server.emitt('<Uid/>', '"'+uid+'"', 'Success');
                };

                const close = () => {
                    document.removeEventListener('keydown', keyListener);
                    server.emitt('<Uid/>', 'True', 'Cancelled');
                };


               </script>
            </div>
         </div>
      </div>
    ]
];

Options[Window] = {"Channel" -> "", "Data" -> <| |>};

Component[OptionsPattern[]] := With[{Event = OptionValue["Events"], Channel = CreateUUID[], LazyLoad = CreateUUID[]}, Module[{loaded = False},
    EventHandler[Event, {
        "SuggestKernel" -> Function[data,
            EventFire[LazyLoad, "Load", Join[data, <|"Client" -> data["Client"], "LazyLoad" -> LazyLoad|>]];
        ]
    }];

    <WebUILazyLoad Event={LazyLoad}>
        <Window Channel={Channel} Data={WebUILazyLoadDataProvided}/>
    </WebUILazyLoad>
]];

Options[Component] = {"Events" -> ""}

Component