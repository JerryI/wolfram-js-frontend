<|"notebook" -> <|"name" -> "Depraved", "id" -> "stain-ecaa1", 
   "kernel" -> LocalKernel, "objects" :> 
    Association["499687b3-67f1-481f-8f99-4f0bee597d8f" -> 
      Association["json" -> "[\"BarPlotly\",[\"List\",0.5539032784303481,0.64\
37702134245418,0.7272561480499757,0.7831197685534619,0.5828819247435564,0.498\
28777857550155,9.565643449696681e-3,0.5539510907473331,0.154884739743262,4.59\
5221160196239e-2]]", "date" -> DateObject[{2023, 10, 4, 11, 13, 
          45.36115`8.409259033183687}, "Instant", "Gregorian", 2.]], 
     "4201107f-6746-44f0-bf6a-dd9e1b5c63ec" -> 
      Association["json" -> "[\"BarPlotly\",[\"Offload\",\"dt$38849\"]]", 
       "date" -> DateObject[{2023, 10, 4, 11, 17, 
          30.430233`8.235880258679826}, "Instant", "Gregorian", 2.]]], 
   "path" -> "/Users/kirill/Downloads/Dev.wln", "cell" :> Exit[], 
   "date" -> DateObject[{2023, 10, 8, 11, 24, 4.825809`7.436145117103049}, 
     "Instant", "Gregorian", 2.], "symbols" -> <||>, 
   "channel" -> WebSocketChannel[
     KirillBelov`WebSocketHandler`WebSocketChannel`$17], 
   "SelectedCell" -> "2925c079-972a-4d33-91a2-f0aeeb7ab80bb48"|>, 
 "cells" -> {<|"id" -> "908cb3bb-0844-4689-8f38-3e451b16d779b48", 
    "type" -> "input", "data" -> ".md\n## Having fun with plotly\nFirstly \
import the library from CDN for testing", "display" -> "codemirror", 
    "sign" -> "stain-ecaa1", "props" -> <|"hidden" -> True|>|>, 
   <|"id" -> "2af6ac80-caf6-47cf-910c-2acbd7b2bfb5b48", "type" -> "output", 
    "data" -> "\n## Having fun with plotly\nFirstly import the library from \
CDN for testing", "display" -> "markdown", "sign" -> "stain-ecaa1", 
    "props" -> <|"hidden" -> False|>|>, 
   <|"id" -> "c1f13d03-c01c-4bb6-8ee4-f44a67c74b37b48", "type" -> "input", 
    "data" -> ".html\n<script \
src=\"https://cdn.plot.ly/plotly-2.26.0.min.js\" charset=\"utf-8\"></script>"\
, "display" -> "codemirror", "sign" -> "stain-ecaa1", 
    "props" -> <|"hidden" -> False|>|>, 
   <|"id" -> "539da405-d209-4196-a4a3-e3bac8e53d71b48", "type" -> "output", 
    "data" -> "\n<script src=\"https://cdn.plot.ly/plotly-2.26.0.min.js\" \
charset=\"utf-8\"></script>", "display" -> "html", "sign" -> "stain-ecaa1", 
    "props" -> <|"hidden" -> False|>|>, 
   <|"id" -> "24d5b90f-f649-4cf3-b2bc-8e47b86fcd4fb48", "type" -> "input", 
    "data" -> ".md\nNow we will try to plot something. Link to the \
[example](https://plotly.com/javascript/box-plots/)", 
    "display" -> "codemirror", "sign" -> "stain-ecaa1", 
    "props" -> <|"hidden" -> True|>|>, 
   <|"id" -> "10ea9f8b-ef55-4064-94d6-d851176b020fb48", "type" -> "output", 
    "data" -> "\nNow we will try to plot something. Link to the \
[example](https://plotly.com/javascript/box-plots/)", 
    "display" -> "markdown", "sign" -> "stain-ecaa1", 
    "props" -> <|"hidden" -> False|>|>, 
   <|"id" -> "5d9e3856-dab0-4bb9-84b3-39859964b2e8b48", "type" -> "input", 
    "data" -> ".js\n\nconst canvas = document.createElement('div');\nvar y0 = \
[];\nvar y1 = [];\nfor (var i = 0; i < 50; i ++) {\n\ty0[i] = \
Math.random();\n\ty1[i] = Math.random() + 1;\n}\n\nvar trace1 = {\n  y: y0,\n \
 type: 'box'\n};\n\nvar trace2 = {\n  y: y1,\n  type: 'box'\n};\n\nvar data = \
[trace1, trace2];\n\nPlotly.newPlot(canvas, data);\n\nreturn canvas;", 
    "display" -> "codemirror", "sign" -> "stain-ecaa1", 
    "props" -> <|"hidden" -> False|>|>, 
   <|"id" -> "36567f92-5131-4dbf-a61d-a9ee0c873cd2b48", "type" -> "input", 
    "data" -> ".md\nOk, now we can write a proper function for it", 
    "display" -> "codemirror", "sign" -> "stain-ecaa1", 
    "props" -> <|"hidden" -> True|>|>, 
   <|"id" -> "e309e5cb-c3b6-410a-879e-21408f7bee05b48", "type" -> "output", 
    "data" -> "\nOk, now we can write a proper function for it", 
    "display" -> "markdown", "sign" -> "stain-ecaa1", 
    "props" -> <|"hidden" -> False|>|>, 
   <|"id" -> "c59b4b31-918a-4b63-a14e-243b9712408ab48", "type" -> "input", 
    "data" -> ".js\n\ncore.BarPlotly = async (args, env) => {\n  const data = \
await interpretate(args[0], env);\n  var trace = {\n    y: data,\n    type: \
'box'\n  };\n\n  Plotly.newPlot(env.element, [trace], {autosize: true, width: \
350, height: 250, margin: {\n          l: 30,\n          r: 30,\n          b: \
30,\n          t: 30,\n          pad: 4\n        }});\n}", 
    "display" -> "codemirror", "sign" -> "stain-ecaa1", 
    "props" -> <|"hidden" -> False|>|>, 
   <|"id" -> "d5382a66-f29b-4db2-b10b-2716ef3d1ea8b48", "type" -> "input", 
    "data" -> ".md\nNow let us test it", "display" -> "codemirror", 
    "sign" -> "stain-ecaa1", "props" -> <|"hidden" -> True|>|>, 
   <|"id" -> "e7e78fe2-1ee4-4d49-b5e4-4d82fff50976b48", "type" -> "output", 
    "data" -> "\nNow let us test it", "display" -> "markdown", 
    "sign" -> "stain-ecaa1", "props" -> <|"hidden" -> False|>|>, 
   <|"id" -> "b6109338-e2ff-4900-bc36-80510e744ba4b48", "type" -> "input", 
    "data" -> "BarPlotly[RandomReal[{0,1}, 10]] // CreateFrontEndObject", 
    "display" -> "codemirror", "sign" -> "stain-ecaa1", 
    "props" -> <|"hidden" -> False|>|>, 
   <|"id" -> "69bc4e50-6355-4679-afee-616290972354b48", "type" -> "input", 
    "data" -> ".md\nBut this is interesting. We need dynamics!", 
    "display" -> "codemirror", "sign" -> "stain-ecaa1", 
    "props" -> <|"hidden" -> True|>|>, 
   <|"id" -> "7b8183d6-0143-4dfa-acbd-4a11cf0d8c52b48", "type" -> "output", 
    "data" -> "\nBut this is interesting. We need dynamics!", 
    "display" -> "markdown", "sign" -> "stain-ecaa1", 
    "props" -> <|"hidden" -> False|>|>, 
   <|"id" -> "8e6c048d-e91a-4cdb-93e4-6a58384f0957b48", "type" -> "input", 
    "data" -> ".js\ncore.BarPlotly = async (args, env) => {\n  const data = \
await interpretate(args[0], env);\n  const trace = {\n    y: data,\n    type: \
'box'\n  };\n\n  env.local.element = env.element;\n\n  \
Plotly.newPlot(env.element, [trace], {autosize: true, width: 350, height: \
250, margin: {\n          l: 30,\n          r: 30,\n          b: 30,\n        \
  t: 30,\n          pad: 4\n        }});\n}\n\ncore.BarPlotly.update = async \
(args, env) => {\n  const data = await interpretate(args[0], env);\n  const \
trace = {\n    y: data\n  };\n\n  console.log(env.local.element);\n\n  \
Plotly.animate(env.local.element, {\n        data: [trace],\n      }, {\n     \
   transition: {\n          duration: 100,\n          easing: \
'cubic-in-out'\n        },\n        frame: {\n          duration: 100\n       \
 }\n      });     \n}\n\ncore.BarPlotly.destroy = async (args, env) => {\n  \
await interpretate(args[0], env);\n}", "display" -> "codemirror", 
    "sign" -> "stain-ecaa1", "props" -> <|"hidden" -> False|>|>, 
   <|"id" -> "99fa38ff-7237-4a00-99b3-604e3373b1d7b48", "type" -> "input", 
    "data" -> ".md\nLet us test it using tasks for automation", 
    "display" -> "codemirror", "sign" -> "stain-ecaa1", 
    "props" -> <|"hidden" -> True|>|>, 
   <|"id" -> "0600ba82-faa9-4358-a166-bb75bb1c6dceb48", "type" -> "output", 
    "data" -> "\nLet us test it using tasks for automation", 
    "display" -> "markdown", "sign" -> "stain-ecaa1", 
    "props" -> <|"hidden" -> False|>|>, 
   <|"id" -> "2925c079-972a-4d33-91a2-f0aeeb7ab80bb48", "type" -> "input", 
    "data" -> "LeakyModule[{dt},\n  dt = RandomReal[{0,1}, 10];\n  task = \
SetInterval[dt = RandomReal[{0,1}, 10], 500];\n  SetTimeout[TaskRemove[task], \
5000];\n  \n  BarPlotly[dt // Offload] // CreateFrontEndObject\n]", 
    "display" -> "codemirror", "sign" -> "stain-ecaa1", 
    "props" -> <|"hidden" -> False|>|>}, "serializer" -> "jsfn3"|>
