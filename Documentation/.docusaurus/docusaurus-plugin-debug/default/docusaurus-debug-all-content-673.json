{
  "docusaurus-plugin-content-docs": {
    "default": {
      "loadedVersions": [
        {
          "versionName": "current",
          "label": "Next",
          "banner": null,
          "badge": false,
          "noIndex": false,
          "className": "docs-version-current",
          "path": "/wljs-docs/",
          "tagsPath": "/wljs-docs/tags",
          "isLast": true,
          "routePriority": -1,
          "sidebarFilePath": "/Users/kirill/Github/wolfram-js-frontend-dev/Documentation/sidebars.js",
          "contentPath": "/Users/kirill/Github/wolfram-js-frontend-dev/Documentation/docs",
          "contentPathLocalized": "/Users/kirill/Github/wolfram-js-frontend-dev/Documentation/i18n/en/docusaurus-plugin-content-docs/current",
          "docs": [
            {
              "id": "frontend/Advanced/Boxes and Decorations/dynamic-decorations",
              "title": "dynamic-decorations",
              "description": "",
              "source": "@site/docs/frontend/Advanced/Boxes and Decorations/dynamic-decorations.md",
              "sourceDirName": "frontend/Advanced/Boxes and Decorations",
              "slug": "/frontend/Advanced/Boxes and Decorations/dynamic-decorations",
              "permalink": "/wljs-docs/frontend/Advanced/Boxes and Decorations/dynamic-decorations",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "frontMatter": {
                "draft": true
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "Advanced",
                "permalink": "/wljs-docs/category/advanced"
              },
              "next": {
                "title": "Simple manipulate",
                "permalink": "/wljs-docs/frontend/Advanced/Dynamics/Simple manipulate"
              }
            },
            {
              "id": "frontend/Advanced/Dynamics/Indicators and monitoring",
              "title": "Indicators and monitoring",
              "description": "Dynamic text field",
              "source": "@site/docs/frontend/Advanced/Dynamics/Indicators and monitoring.md",
              "sourceDirName": "frontend/Advanced/Dynamics",
              "slug": "/frontend/Advanced/Dynamics/Indicators and monitoring",
              "permalink": "/wljs-docs/frontend/Advanced/Dynamics/Indicators and monitoring",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "frontMatter": {
                "draft": true
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "Simple manipulate",
                "permalink": "/wljs-docs/frontend/Advanced/Dynamics/Simple manipulate"
              },
              "next": {
                "title": "Performance tips",
                "permalink": "/wljs-docs/frontend/Advanced/Dynamics/Performance tips"
              }
            },
            {
              "id": "frontend/Advanced/Dynamics/Performance tips",
              "title": "Performance tips",
              "description": "Performance tips",
              "source": "@site/docs/frontend/Advanced/Dynamics/Performance tips.md",
              "sourceDirName": "frontend/Advanced/Dynamics",
              "slug": "/frontend/Advanced/Dynamics/Performance tips",
              "permalink": "/wljs-docs/frontend/Advanced/Dynamics/Performance tips",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "frontMatter": {
                "draft": true
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "Indicators and monitoring",
                "permalink": "/wljs-docs/frontend/Advanced/Dynamics/Indicators and monitoring"
              },
              "next": {
                "title": "Scoping",
                "permalink": "/wljs-docs/frontend/Advanced/Dynamics/Scoping"
              }
            },
            {
              "id": "frontend/Advanced/Dynamics/Scoping",
              "title": "Scoping",
              "description": "",
              "source": "@site/docs/frontend/Advanced/Dynamics/Scoping.md",
              "sourceDirName": "frontend/Advanced/Dynamics",
              "slug": "/frontend/Advanced/Dynamics/Scoping",
              "permalink": "/wljs-docs/frontend/Advanced/Dynamics/Scoping",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "frontMatter": {
                "draft": true
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "Performance tips",
                "permalink": "/wljs-docs/frontend/Advanced/Dynamics/Performance tips"
              },
              "next": {
                "title": "Editor manipulation",
                "permalink": "/wljs-docs/frontend/Advanced/Editor manipulation"
              }
            },
            {
              "id": "frontend/Advanced/Dynamics/Simple manipulate",
              "title": "Simple manipulate",
              "description": "It is always better to scope all dynamic variables using LeakyModule or just Module and perform all communications using events (plain EventObject objects). See Scoping",
              "source": "@site/docs/frontend/Advanced/Dynamics/Simple manipulate.md",
              "sourceDirName": "frontend/Advanced/Dynamics",
              "slug": "/frontend/Advanced/Dynamics/Simple manipulate",
              "permalink": "/wljs-docs/frontend/Advanced/Dynamics/Simple manipulate",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "sidebarPosition": 8,
              "frontMatter": {
                "sidebar_position": 8,
                "draft": true
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "dynamic-decorations",
                "permalink": "/wljs-docs/frontend/Advanced/Boxes and Decorations/dynamic-decorations"
              },
              "next": {
                "title": "Indicators and monitoring",
                "permalink": "/wljs-docs/frontend/Advanced/Dynamics/Indicators and monitoring"
              }
            },
            {
              "id": "frontend/Advanced/Editor manipulation",
              "title": "Editor manipulation",
              "description": "",
              "source": "@site/docs/frontend/Advanced/Editor manipulation.md",
              "sourceDirName": "frontend/Advanced",
              "slug": "/frontend/Advanced/Editor manipulation",
              "permalink": "/wljs-docs/frontend/Advanced/Editor manipulation",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "frontMatter": {
                "draft": true
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "Scoping",
                "permalink": "/wljs-docs/frontend/Advanced/Dynamics/Scoping"
              },
              "next": {
                "title": "event-generators",
                "permalink": "/wljs-docs/frontend/Advanced/Events system/event-generators"
              }
            },
            {
              "id": "frontend/Advanced/Events system/event-generators",
              "title": "event-generators",
              "description": "As a short summary - where you can use event-handlers",
              "source": "@site/docs/frontend/Advanced/Events system/event-generators.md",
              "sourceDirName": "frontend/Advanced/Events system",
              "slug": "/frontend/Advanced/Events system/event-generators",
              "permalink": "/wljs-docs/frontend/Advanced/Events system/event-generators",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "frontMatter": {
                "draft": false
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "Editor manipulation",
                "permalink": "/wljs-docs/frontend/Advanced/Editor manipulation"
              },
              "next": {
                "title": "Promises",
                "permalink": "/wljs-docs/frontend/Advanced/Events system/promises"
              }
            },
            {
              "id": "frontend/Advanced/Events system/promises",
              "title": "Promises",
              "description": "This chapter is in development. Please see References Promise",
              "source": "@site/docs/frontend/Advanced/Events system/promises.md",
              "sourceDirName": "frontend/Advanced/Events system",
              "slug": "/frontend/Advanced/Events system/promises",
              "permalink": "/wljs-docs/frontend/Advanced/Events system/promises",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "frontMatter": {},
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "event-generators",
                "permalink": "/wljs-docs/frontend/Advanced/Events system/event-generators"
              },
              "next": {
                "title": "Routing",
                "permalink": "/wljs-docs/frontend/Advanced/Events system/routing"
              }
            },
            {
              "id": "frontend/Advanced/Events system/routing",
              "title": "Routing",
              "description": "Remember the number 1 rule: 1 event object = 1 handler",
              "source": "@site/docs/frontend/Advanced/Events system/routing.md",
              "sourceDirName": "frontend/Advanced/Events system",
              "slug": "/frontend/Advanced/Events system/routing",
              "permalink": "/wljs-docs/frontend/Advanced/Events system/routing",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "frontMatter": {},
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "Promises",
                "permalink": "/wljs-docs/frontend/Advanced/Events system/promises"
              },
              "next": {
                "title": "Working with containers",
                "permalink": "/wljs-docs/frontend/Advanced/Frontend interpretation/executables"
              }
            },
            {
              "id": "frontend/Advanced/Frontend interpretation/executables",
              "title": "Working with containers",
              "description": "This is a hardcore stuff, don't go here with a clear purpose",
              "source": "@site/docs/frontend/Advanced/Frontend interpretation/executables.md",
              "sourceDirName": "frontend/Advanced/Frontend interpretation",
              "slug": "/frontend/Advanced/Frontend interpretation/executables",
              "permalink": "/wljs-docs/frontend/Advanced/Frontend interpretation/executables",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "sidebarPosition": 3,
              "frontMatter": {
                "sidebar_position": 3,
                "draft": true
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "Routing",
                "permalink": "/wljs-docs/frontend/Advanced/Events system/routing"
              },
              "next": {
                "title": "Frontend functions",
                "permalink": "/wljs-docs/frontend/Advanced/Frontend interpretation/Frontend functions"
              }
            },
            {
              "id": "frontend/Advanced/Frontend interpretation/Frontend functions",
              "title": "Frontend functions",
              "description": "This is a hardcore stuff, don't go here with a clear purpose",
              "source": "@site/docs/frontend/Advanced/Frontend interpretation/Frontend functions.md",
              "sourceDirName": "frontend/Advanced/Frontend interpretation",
              "slug": "/frontend/Advanced/Frontend interpretation/Frontend functions",
              "permalink": "/wljs-docs/frontend/Advanced/Frontend interpretation/Frontend functions",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "frontMatter": {
                "draft": true
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "Working with containers",
                "permalink": "/wljs-docs/frontend/Advanced/Frontend interpretation/executables"
              },
              "next": {
                "title": "Canvas",
                "permalink": "/wljs-docs/frontend/Advanced/JS Tools/Canvas"
              }
            },
            {
              "id": "frontend/Advanced/JS Tools/Canvas",
              "title": "Canvas",
              "description": "A very powerful component for visualization we have is  canvas. It supports WebGL renderer, i.e. one can run graphics shaders and use GPU to accelerate the rendering.",
              "source": "@site/docs/frontend/Advanced/JS Tools/Canvas.md",
              "sourceDirName": "frontend/Advanced/JS Tools",
              "slug": "/frontend/Advanced/JS Tools/Canvas",
              "permalink": "/wljs-docs/frontend/Advanced/JS Tools/Canvas",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "sidebarPosition": 1,
              "frontMatter": {
                "sidebar_position": 1,
                "draft": true
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "Frontend functions",
                "permalink": "/wljs-docs/frontend/Advanced/Frontend interpretation/Frontend functions"
              },
              "next": {
                "title": "Basics",
                "permalink": "/wljs-docs/frontend/Advanced/Slides/intro"
              }
            },
            {
              "id": "frontend/Advanced/Slides/animations",
              "title": "Graphics animation & interaction",
              "description": "Interactive plots",
              "source": "@site/docs/frontend/Advanced/Slides/animations.md",
              "sourceDirName": "frontend/Advanced/Slides",
              "slug": "/frontend/Advanced/Slides/animations",
              "permalink": "/wljs-docs/frontend/Advanced/Slides/animations",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "frontMatter": {},
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "Code highlighting",
                "permalink": "/wljs-docs/frontend/Advanced/Slides/embed-wl"
              },
              "next": {
                "title": "Components",
                "permalink": "/wljs-docs/frontend/Advanced/Slides/components"
              }
            },
            {
              "id": "frontend/Advanced/Slides/components",
              "title": "Components",
              "description": "Making presentation is quite repetitive process. It is quite common to have some common element shared between different slides.",
              "source": "@site/docs/frontend/Advanced/Slides/components.md",
              "sourceDirName": "frontend/Advanced/Slides",
              "slug": "/frontend/Advanced/Slides/components",
              "permalink": "/wljs-docs/frontend/Advanced/Slides/components",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "frontMatter": {
                "draft": false
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "Graphics animation & interaction",
                "permalink": "/wljs-docs/frontend/Advanced/Slides/animations"
              },
              "next": {
                "title": "styling",
                "permalink": "/wljs-docs/frontend/Advanced/Slides/styling"
              }
            },
            {
              "id": "frontend/Advanced/Slides/embed-wl",
              "title": "Code highlighting",
              "description": "Since it support WLX syntax as well, one can combine the copied text from the normal Wolfram Language cell into a EditorView component",
              "source": "@site/docs/frontend/Advanced/Slides/embed-wl.md",
              "sourceDirName": "frontend/Advanced/Slides",
              "slug": "/frontend/Advanced/Slides/embed-wl",
              "permalink": "/wljs-docs/frontend/Advanced/Slides/embed-wl",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "sidebarPosition": 3,
              "frontMatter": {
                "sidebar_position": 3
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "Basics",
                "permalink": "/wljs-docs/frontend/Advanced/Slides/intro"
              },
              "next": {
                "title": "Graphics animation & interaction",
                "permalink": "/wljs-docs/frontend/Advanced/Slides/animations"
              }
            },
            {
              "id": "frontend/Advanced/Slides/intro",
              "title": "Basics",
              "description": "You can use pure Markdown, HTML, CSS or WLX languages while making slides",
              "source": "@site/docs/frontend/Advanced/Slides/intro.md",
              "sourceDirName": "frontend/Advanced/Slides",
              "slug": "/frontend/Advanced/Slides/intro",
              "permalink": "/wljs-docs/frontend/Advanced/Slides/intro",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "sidebarPosition": 1,
              "frontMatter": {
                "sidebar_position": 1,
                "draft": false
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "Canvas",
                "permalink": "/wljs-docs/frontend/Advanced/JS Tools/Canvas"
              },
              "next": {
                "title": "Code highlighting",
                "permalink": "/wljs-docs/frontend/Advanced/Slides/embed-wl"
              }
            },
            {
              "id": "frontend/Advanced/Slides/styling",
              "title": "styling",
              "description": "",
              "source": "@site/docs/frontend/Advanced/Slides/styling.md",
              "sourceDirName": "frontend/Advanced/Slides",
              "slug": "/frontend/Advanced/Slides/styling",
              "permalink": "/wljs-docs/frontend/Advanced/Slides/styling",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "frontMatter": {
                "draft": true
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "Components",
                "permalink": "/wljs-docs/frontend/Advanced/Slides/components"
              },
              "next": {
                "title": "Large tables of data",
                "permalink": "/wljs-docs/frontend/Advanced/Slides/tables"
              }
            },
            {
              "id": "frontend/Advanced/Slides/tables",
              "title": "Large tables of data",
              "description": "One can utilize component InputTable, that originally stands for editing table, but can be used just to view them as well. The good thing about it that it supports infinitely large tables since the actual content is loaded by parts (and unloads if no longer needed)",
              "source": "@site/docs/frontend/Advanced/Slides/tables.md",
              "sourceDirName": "frontend/Advanced/Slides",
              "slug": "/frontend/Advanced/Slides/tables",
              "permalink": "/wljs-docs/frontend/Advanced/Slides/tables",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "frontMatter": {},
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "styling",
                "permalink": "/wljs-docs/frontend/Advanced/Slides/styling"
              },
              "next": {
                "title": "Exporting formats",
                "permalink": "/wljs-docs/category/exporting-formats"
              }
            },
            {
              "id": "frontend/Cell types/Files",
              "title": "Files",
              "description": "Image viewer",
              "source": "@site/docs/frontend/Cell types/Files.md",
              "sourceDirName": "frontend/Cell types",
              "slug": "/frontend/Cell types/Files",
              "permalink": "/wljs-docs/frontend/Cell types/Files",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "sidebarPosition": 12,
              "frontMatter": {
                "sidebar_position": 12
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "Javascript",
                "permalink": "/wljs-docs/frontend/Cell types/Javascript"
              },
              "next": {
                "title": "Many more...",
                "permalink": "/wljs-docs/frontend/Cell types/Many more..."
              }
            },
            {
              "id": "frontend/Cell types/HTML",
              "title": "HTML",
              "description": "Github repo",
              "source": "@site/docs/frontend/Cell types/HTML.md",
              "sourceDirName": "frontend/Cell types",
              "slug": "/frontend/Cell types/HTML",
              "permalink": "/wljs-docs/frontend/Cell types/HTML",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "sidebarPosition": 3,
              "frontMatter": {
                "sidebar_position": 3
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "Markdown",
                "permalink": "/wljs-docs/frontend/Cell types/Markdown"
              },
              "next": {
                "title": "Javascript",
                "permalink": "/wljs-docs/frontend/Cell types/Javascript"
              }
            },
            {
              "id": "frontend/Cell types/Javascript",
              "title": "Javascript",
              "description": "WebGL demo",
              "source": "@site/docs/frontend/Cell types/Javascript.md",
              "sourceDirName": "frontend/Cell types",
              "slug": "/frontend/Cell types/Javascript",
              "permalink": "/wljs-docs/frontend/Cell types/Javascript",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "sidebarPosition": 4,
              "frontMatter": {
                "sidebar_position": 4
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "HTML",
                "permalink": "/wljs-docs/frontend/Cell types/HTML"
              },
              "next": {
                "title": "Files",
                "permalink": "/wljs-docs/frontend/Cell types/Files"
              }
            },
            {
              "id": "frontend/Cell types/Many more...",
              "title": "Many more...",
              "description": "You can extend output cell types via a few lines of code and you favorite framework / package",
              "source": "@site/docs/frontend/Cell types/Many more....md",
              "sourceDirName": "frontend/Cell types",
              "slug": "/frontend/Cell types/Many more...",
              "permalink": "/wljs-docs/frontend/Cell types/Many more...",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "sidebarPosition": 22,
              "frontMatter": {
                "sidebar_position": 22
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "Files",
                "permalink": "/wljs-docs/frontend/Cell types/Files"
              },
              "next": {
                "title": "Slides",
                "permalink": "/wljs-docs/frontend/Cell types/Slides"
              }
            },
            {
              "id": "frontend/Cell types/Markdown",
              "title": "Markdown",
              "description": "Github repo",
              "source": "@site/docs/frontend/Cell types/Markdown.md",
              "sourceDirName": "frontend/Cell types",
              "slug": "/frontend/Cell types/Markdown",
              "permalink": "/wljs-docs/frontend/Cell types/Markdown",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "sidebarPosition": 2,
              "frontMatter": {
                "sidebar_position": 2
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "Wolfram Language",
                "permalink": "/wljs-docs/frontend/Cell types/Wolfram Language"
              },
              "next": {
                "title": "HTML",
                "permalink": "/wljs-docs/frontend/Cell types/HTML"
              }
            },
            {
              "id": "frontend/Cell types/Slides",
              "title": "Slides",
              "description": "One can also make presentations using WLJS Frontend. This is provided by wljs-revealjs, that integrates RevealJS and WLX language to provide components approach on making presentations as well as add interactivity and all features of frontend's cells like this",
              "source": "@site/docs/frontend/Cell types/Slides.md",
              "sourceDirName": "frontend/Cell types",
              "slug": "/frontend/Cell types/Slides",
              "permalink": "/wljs-docs/frontend/Cell types/Slides",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "frontMatter": {},
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "Many more...",
                "permalink": "/wljs-docs/frontend/Cell types/Many more..."
              },
              "next": {
                "title": "WLX",
                "permalink": "/wljs-docs/frontend/Cell types/WLX"
              }
            },
            {
              "id": "frontend/Cell types/WLX",
              "title": "WLX",
              "description": "It allows to use Wolfram Language XML in your cell. It comes handy when making a a complex cell structure or stylizing it using the power of HTML/CSS/JS.",
              "source": "@site/docs/frontend/Cell types/WLX.md",
              "sourceDirName": "frontend/Cell types",
              "slug": "/frontend/Cell types/WLX",
              "permalink": "/wljs-docs/frontend/Cell types/WLX",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "frontMatter": {},
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "Slides",
                "permalink": "/wljs-docs/frontend/Cell types/Slides"
              },
              "next": {
                "title": "Expressions representation",
                "permalink": "/wljs-docs/frontend/Expressions representation"
              }
            },
            {
              "id": "frontend/Cell types/Wolfram Language",
              "title": "Wolfram Language",
              "description": "Github repo",
              "source": "@site/docs/frontend/Cell types/Wolfram Language.md",
              "sourceDirName": "frontend/Cell types",
              "slug": "/frontend/Cell types/Wolfram Language",
              "permalink": "/wljs-docs/frontend/Cell types/Wolfram Language",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "sidebarPosition": 1,
              "frontMatter": {
                "sidebar_position": 1
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "Cell types",
                "permalink": "/wljs-docs/category/cell-types"
              },
              "next": {
                "title": "Markdown",
                "permalink": "/wljs-docs/frontend/Cell types/Markdown"
              }
            },
            {
              "id": "frontend/Export/HTML file",
              "title": "HTML file",
              "description": "Is in development",
              "source": "@site/docs/frontend/Export/HTML file.md",
              "sourceDirName": "frontend/Export",
              "slug": "/frontend/Export/HTML file",
              "permalink": "/wljs-docs/frontend/Export/HTML file",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "frontMatter": {},
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "Exporting formats",
                "permalink": "/wljs-docs/category/exporting-formats"
              },
              "next": {
                "title": "PDF",
                "permalink": "/wljs-docs/frontend/Export/PDF"
              }
            },
            {
              "id": "frontend/Export/PDF",
              "title": "PDF",
              "description": "Is in development",
              "source": "@site/docs/frontend/Export/PDF.md",
              "sourceDirName": "frontend/Export",
              "slug": "/frontend/Export/PDF",
              "permalink": "/wljs-docs/frontend/Export/PDF",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "frontMatter": {},
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "HTML file",
                "permalink": "/wljs-docs/frontend/Export/HTML file"
              },
              "next": {
                "title": "Troubleshooting",
                "permalink": "/wljs-docs/frontend/Troubleshooting"
              }
            },
            {
              "id": "frontend/Expressions representation",
              "title": "Expressions representation",
              "description": "The aim is to make a compromise between DisplayForm and InputForm representations Wolfram Expressions on the frontend's side.",
              "source": "@site/docs/frontend/Expressions representation.md",
              "sourceDirName": "frontend",
              "slug": "/frontend/Expressions representation",
              "permalink": "/wljs-docs/frontend/Expressions representation",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "sidebarPosition": 8,
              "frontMatter": {
                "sidebar_position": 8
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "WLX",
                "permalink": "/wljs-docs/frontend/Cell types/WLX"
              },
              "next": {
                "title": "Advanced",
                "permalink": "/wljs-docs/category/advanced"
              }
            },
            {
              "id": "frontend/instruction",
              "title": "Quick start",
              "description": "Wolfram Language Notebook requires  wolframscript (see Freeware Wolfram Engine or Wolfram Kernel) installed on your PC/Mac. This application will check all paths and ask to locate a Wolfram executable if nothing is found.",
              "source": "@site/docs/frontend/instruction.md",
              "sourceDirName": "frontend",
              "slug": "/",
              "permalink": "/wljs-docs/",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "sidebarPosition": 1,
              "frontMatter": {
                "sidebar_position": 1,
                "enableComments": true,
                "sidebar_class_name": "green",
                "slug": "/"
              },
              "sidebar": "tutorialSidebar",
              "next": {
                "title": "Tutorials",
                "permalink": "/wljs-docs/category/tutorials"
              }
            },
            {
              "id": "frontend/Reference/Decorations/Column",
              "title": "Column",
              "description": "shows the list of any Wolfram Expressions in a single column acting as a decoration",
              "source": "@site/docs/frontend/Reference/Decorations/Column.md",
              "sourceDirName": "frontend/Reference/Decorations",
              "slug": "/frontend/Reference/Decorations/Column",
              "permalink": "/wljs-docs/frontend/Reference/Decorations/Column",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "frontMatter": {
                "env": [
                  "Wolfram Kernel"
                ]
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "Troubleshooting",
                "permalink": "/wljs-docs/frontend/Troubleshooting"
              },
              "next": {
                "title": "Framed",
                "permalink": "/wljs-docs/frontend/Reference/Decorations/Framed"
              }
            },
            {
              "id": "frontend/Reference/Decorations/Framed",
              "title": "Framed",
              "description": "Acts like a Style box, but wrapped into a frame",
              "source": "@site/docs/frontend/Reference/Decorations/Framed.md",
              "sourceDirName": "frontend/Reference/Decorations",
              "slug": "/frontend/Reference/Decorations/Framed",
              "permalink": "/wljs-docs/frontend/Reference/Decorations/Framed",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "frontMatter": {
                "env": [
                  "Wolfram Kernel"
                ],
                "update": null,
                "origin": "https://github.com/JerryI/wljs-editor/tree/main",
                "needsContainer": null
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "Column",
                "permalink": "/wljs-docs/frontend/Reference/Decorations/Column"
              },
              "next": {
                "title": "Grid",
                "permalink": "/wljs-docs/frontend/Reference/Decorations/Grid"
              }
            },
            {
              "id": "frontend/Reference/Decorations/Grid",
              "title": "Grid",
              "description": "Spawns a grid of WL editors with an arbitrary objects inside",
              "source": "@site/docs/frontend/Reference/Decorations/Grid.md",
              "sourceDirName": "frontend/Reference/Decorations",
              "slug": "/frontend/Reference/Decorations/Grid",
              "permalink": "/wljs-docs/frontend/Reference/Decorations/Grid",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "frontMatter": {
                "env": [
                  "Wolfram Kernel"
                ],
                "update": null,
                "needsContainer": null,
                "origin": "https://github.com/JerryI/wljs-editor/tree/main"
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "Framed",
                "permalink": "/wljs-docs/frontend/Reference/Decorations/Framed"
              },
              "next": {
                "title": "HTMLForm",
                "permalink": "/wljs-docs/frontend/Reference/Decorations/HTMLForm"
              }
            },
            {
              "id": "frontend/Reference/Decorations/HTMLForm",
              "title": "HTMLForm",
              "description": "renders HTML tags to the output cell",
              "source": "@site/docs/frontend/Reference/Decorations/HTMLForm.md",
              "sourceDirName": "frontend/Reference/Decorations",
              "slug": "/frontend/Reference/Decorations/HTMLForm",
              "permalink": "/wljs-docs/frontend/Reference/Decorations/HTMLForm",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "frontMatter": {
                "env": [
                  "WLJS"
                ],
                "origin": "https://github.com/JerryI/wljs-html-support",
                "update": false,
                "needsContainer": true,
                "registered": true
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "Grid",
                "permalink": "/wljs-docs/frontend/Reference/Decorations/Grid"
              },
              "next": {
                "title": "InputForm",
                "permalink": "/wljs-docs/frontend/Reference/Decorations/InputForm"
              }
            },
            {
              "id": "frontend/Reference/Decorations/InputForm",
              "title": "InputForm",
              "description": "Prevents decorations to be set",
              "source": "@site/docs/frontend/Reference/Decorations/InputForm.md",
              "sourceDirName": "frontend/Reference/Decorations",
              "slug": "/frontend/Reference/Decorations/InputForm",
              "permalink": "/wljs-docs/frontend/Reference/Decorations/InputForm",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "frontMatter": {
                "env": [
                  "Wolfram Kernel"
                ]
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "HTMLForm",
                "permalink": "/wljs-docs/frontend/Reference/Decorations/HTMLForm"
              },
              "next": {
                "title": "Interpretation",
                "permalink": "/wljs-docs/frontend/Reference/Decorations/Interpretation"
              }
            },
            {
              "id": "frontend/Reference/Decorations/Interpretation",
              "title": "Interpretation",
              "description": "allows to alter the displayed expression",
              "source": "@site/docs/frontend/Reference/Decorations/Interpretation.md",
              "sourceDirName": "frontend/Reference/Decorations",
              "slug": "/frontend/Reference/Decorations/Interpretation",
              "permalink": "/wljs-docs/frontend/Reference/Decorations/Interpretation",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "frontMatter": {
                "env": [
                  "Wolfram Kernel"
                ]
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "InputForm",
                "permalink": "/wljs-docs/frontend/Reference/Decorations/InputForm"
              },
              "next": {
                "title": "InterpretationBox",
                "permalink": "/wljs-docs/frontend/Reference/Decorations/InterpretationBox"
              }
            },
            {
              "id": "frontend/Reference/Decorations/InterpretationBox",
              "title": "InterpretationBox",
              "description": "Make a formatting structure whose interpretation is not based on its appearance",
              "source": "@site/docs/frontend/Reference/Decorations/InterpretationBox.md",
              "sourceDirName": "frontend/Reference/Decorations",
              "slug": "/frontend/Reference/Decorations/InterpretationBox",
              "permalink": "/wljs-docs/frontend/Reference/Decorations/InterpretationBox",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "frontMatter": {
                "env": [
                  "Wolfram Kernel"
                ],
                "update": false
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "Interpretation",
                "permalink": "/wljs-docs/frontend/Reference/Decorations/Interpretation"
              },
              "next": {
                "title": "BoxBox",
                "permalink": "/wljs-docs/frontend/Reference/Decorations/Low level/BoxBox"
              }
            },
            {
              "id": "frontend/Reference/Decorations/Low level/BoxBox",
              "title": "BoxBox",
              "description": "Used to decorate Wolfram Expression with custom HTML elements",
              "source": "@site/docs/frontend/Reference/Decorations/Low level/BoxBox.md",
              "sourceDirName": "frontend/Reference/Decorations/Low level",
              "slug": "/frontend/Reference/Decorations/Low level/BoxBox",
              "permalink": "/wljs-docs/frontend/Reference/Decorations/Low level/BoxBox",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "frontMatter": {
                "internal": true,
                "origin": "https://github.com/JerryI/wljs-editor/tree/main"
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "InterpretationBox",
                "permalink": "/wljs-docs/frontend/Reference/Decorations/InterpretationBox"
              },
              "next": {
                "title": "ViewBox",
                "permalink": "/wljs-docs/frontend/Reference/Decorations/Low level/ViewBox"
              }
            },
            {
              "id": "frontend/Reference/Decorations/Low level/ViewBox",
              "title": "ViewBox",
              "description": "Used to replace wrapped Wolfram Expression with custom HTML elements",
              "source": "@site/docs/frontend/Reference/Decorations/Low level/ViewBox.md",
              "sourceDirName": "frontend/Reference/Decorations/Low level",
              "slug": "/frontend/Reference/Decorations/Low level/ViewBox",
              "permalink": "/wljs-docs/frontend/Reference/Decorations/Low level/ViewBox",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "frontMatter": {
                "internal": true,
                "origin": "https://github.com/JerryI/wljs-editor/tree/main"
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "BoxBox",
                "permalink": "/wljs-docs/frontend/Reference/Decorations/Low level/BoxBox"
              },
              "next": {
                "title": "MakeBoxes",
                "permalink": "/wljs-docs/frontend/Reference/Decorations/MakeBoxes"
              }
            },
            {
              "id": "frontend/Reference/Decorations/MakeBoxes",
              "title": "MakeBoxes",
              "description": "is a general expression used in UpValues of other expressions to change the visual representation (see Decorations) in the notebook.",
              "source": "@site/docs/frontend/Reference/Decorations/MakeBoxes.md",
              "sourceDirName": "frontend/Reference/Decorations",
              "slug": "/frontend/Reference/Decorations/MakeBoxes",
              "permalink": "/wljs-docs/frontend/Reference/Decorations/MakeBoxes",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "frontMatter": {
                "env": [
                  "Wolfram Kernel"
                ]
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "ViewBox",
                "permalink": "/wljs-docs/frontend/Reference/Decorations/Low level/ViewBox"
              },
              "next": {
                "title": "MatrixForm",
                "permalink": "/wljs-docs/frontend/Reference/Decorations/MatrixForm"
              }
            },
            {
              "id": "frontend/Reference/Decorations/MatrixForm",
              "title": "MatrixForm",
              "description": "shows the given matrix (list of lists) in a traditional form using Grid decoration",
              "source": "@site/docs/frontend/Reference/Decorations/MatrixForm.md",
              "sourceDirName": "frontend/Reference/Decorations",
              "slug": "/frontend/Reference/Decorations/MatrixForm",
              "permalink": "/wljs-docs/frontend/Reference/Decorations/MatrixForm",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "frontMatter": {
                "env": [
                  "Wolfram Kernel"
                ],
                "update": false
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "MakeBoxes",
                "permalink": "/wljs-docs/frontend/Reference/Decorations/MakeBoxes"
              },
              "next": {
                "title": "Row",
                "permalink": "/wljs-docs/frontend/Reference/Decorations/Row"
              }
            },
            {
              "id": "frontend/Reference/Decorations/Row",
              "title": "Row",
              "description": "shows the list of any Wolfram Expressions in a row acting as a decoration",
              "source": "@site/docs/frontend/Reference/Decorations/Row.md",
              "sourceDirName": "frontend/Reference/Decorations",
              "slug": "/frontend/Reference/Decorations/Row",
              "permalink": "/wljs-docs/frontend/Reference/Decorations/Row",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "frontMatter": {
                "env": [
                  "Wolfram Kernel"
                ]
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "MatrixForm",
                "permalink": "/wljs-docs/frontend/Reference/Decorations/MatrixForm"
              },
              "next": {
                "title": "SVGForm",
                "permalink": "/wljs-docs/frontend/Reference/Decorations/SVGForm"
              }
            },
            {
              "id": "frontend/Reference/Decorations/Style",
              "title": "Style",
              "description": "Styling box used as a decoration for an arbitrary Wolfram Expressions",
              "source": "@site/docs/frontend/Reference/Decorations/Style.md",
              "sourceDirName": "frontend/Reference/Decorations",
              "slug": "/frontend/Reference/Decorations/Style",
              "permalink": "/wljs-docs/frontend/Reference/Decorations/Style",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "frontMatter": {
                "env": [
                  "Wolfram Kernel"
                ],
                "update": null,
                "origin": "https://github.com/JerryI/wljs-editor/tree/main",
                "needsContainer": null
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "SVGForm",
                "permalink": "/wljs-docs/frontend/Reference/Decorations/SVGForm"
              },
              "next": {
                "title": "TableForm",
                "permalink": "/wljs-docs/frontend/Reference/Decorations/TableForm"
              }
            },
            {
              "id": "frontend/Reference/Decorations/SVGForm",
              "title": "SVGForm",
              "description": "exports as SVG any Wolfram Expressions and plots it inside a cell.",
              "source": "@site/docs/frontend/Reference/Decorations/SVGForm.md",
              "sourceDirName": "frontend/Reference/Decorations",
              "slug": "/frontend/Reference/Decorations/SVGForm",
              "permalink": "/wljs-docs/frontend/Reference/Decorations/SVGForm",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "frontMatter": {
                "env": [
                  "WLJS"
                ],
                "needsContainer": true,
                "registered": true,
                "origin": "https://github.com/JerryI/wljs-html-support"
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "Row",
                "permalink": "/wljs-docs/frontend/Reference/Decorations/Row"
              },
              "next": {
                "title": "Style",
                "permalink": "/wljs-docs/frontend/Reference/Decorations/Style"
              }
            },
            {
              "id": "frontend/Reference/Decorations/TableForm",
              "title": "TableForm",
              "description": "shows the given table (list) in a traditional form using Grid decoration",
              "source": "@site/docs/frontend/Reference/Decorations/TableForm.md",
              "sourceDirName": "frontend/Reference/Decorations",
              "slug": "/frontend/Reference/Decorations/TableForm",
              "permalink": "/wljs-docs/frontend/Reference/Decorations/TableForm",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "frontMatter": {
                "env": [
                  "Wolfram Kernel"
                ]
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "Style",
                "permalink": "/wljs-docs/frontend/Reference/Decorations/Style"
              },
              "next": {
                "title": "CreateFrontEndObject",
                "permalink": "/wljs-docs/frontend/Reference/Dynamics/CreateFrontEndObject"
              }
            },
            {
              "id": "frontend/Reference/Dynamics/CreateFrontEndObject",
              "title": "CreateFrontEndObject",
              "description": "Creates a container for the inner expression and stores it into frontend objects storage shared with Kernel and Notebook",
              "source": "@site/docs/frontend/Reference/Dynamics/CreateFrontEndObject.md",
              "sourceDirName": "frontend/Reference/Dynamics",
              "slug": "/frontend/Reference/Dynamics/CreateFrontEndObject",
              "permalink": "/wljs-docs/frontend/Reference/Dynamics/CreateFrontEndObject",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "frontMatter": {
                "env": [
                  "Wolfram Kernel"
                ]
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "TableForm",
                "permalink": "/wljs-docs/frontend/Reference/Decorations/TableForm"
              },
              "next": {
                "title": "Dynamic",
                "permalink": "/wljs-docs/frontend/Reference/Dynamics/Dynamic"
              }
            },
            {
              "id": "frontend/Reference/Dynamics/Dynamic",
              "title": "Dynamic",
              "description": "This concept is different from Mathematica. Please, use event-based approach instead - Dynamics",
              "source": "@site/docs/frontend/Reference/Dynamics/Dynamic.md",
              "sourceDirName": "frontend/Reference/Dynamics",
              "slug": "/frontend/Reference/Dynamics/Dynamic",
              "permalink": "/wljs-docs/frontend/Reference/Dynamics/Dynamic",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "frontMatter": {},
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "CreateFrontEndObject",
                "permalink": "/wljs-docs/frontend/Reference/Dynamics/CreateFrontEndObject"
              },
              "next": {
                "title": "DynamicModule",
                "permalink": "/wljs-docs/frontend/Reference/Dynamics/DynamicModule"
              }
            },
            {
              "id": "frontend/Reference/Dynamics/DynamicModule",
              "title": "DynamicModule",
              "description": "This concept is different from Mathematica. Please, use event-based approach instead - Dynamics",
              "source": "@site/docs/frontend/Reference/Dynamics/DynamicModule.md",
              "sourceDirName": "frontend/Reference/Dynamics",
              "slug": "/frontend/Reference/Dynamics/DynamicModule",
              "permalink": "/wljs-docs/frontend/Reference/Dynamics/DynamicModule",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "frontMatter": {},
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "Dynamic",
                "permalink": "/wljs-docs/frontend/Reference/Dynamics/Dynamic"
              },
              "next": {
                "title": "FrontEndVirtual",
                "permalink": "/wljs-docs/frontend/Reference/Dynamics/FrontEndVirtual"
              }
            },
            {
              "id": "frontend/Reference/Dynamics/FrontEndVirtual",
              "title": "FrontEndVirtual",
              "description": "It is a virtual container wrapper for any expressions evaluated on WLJS",
              "source": "@site/docs/frontend/Reference/Dynamics/FrontEndVirtual.md",
              "sourceDirName": "frontend/Reference/Dynamics",
              "slug": "/frontend/Reference/Dynamics/FrontEndVirtual",
              "permalink": "/wljs-docs/frontend/Reference/Dynamics/FrontEndVirtual",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "frontMatter": {
                "env": [
                  "WLJS"
                ],
                "virtual": true
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "DynamicModule",
                "permalink": "/wljs-docs/frontend/Reference/Dynamics/DynamicModule"
              },
              "next": {
                "title": "FrontEndExecutable",
                "permalink": "/wljs-docs/frontend/Reference/Dynamics/Internals/FrontEndExecutable"
              }
            },
            {
              "id": "frontend/Reference/Dynamics/Internals/FrontEndExecutable",
              "title": "FrontEndExecutable",
              "description": "An replacement decoration and a reference to the frontend object aka  container in the shared objects storage with a corresponding id",
              "source": "@site/docs/frontend/Reference/Dynamics/Internals/FrontEndExecutable.md",
              "sourceDirName": "frontend/Reference/Dynamics/Internals",
              "slug": "/frontend/Reference/Dynamics/Internals/FrontEndExecutable",
              "permalink": "/wljs-docs/frontend/Reference/Dynamics/Internals/FrontEndExecutable",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "frontMatter": {
                "env": [
                  "WLJS",
                  "Wolfram Kernel"
                ],
                "update": true,
                "internal": true
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "FrontEndVirtual",
                "permalink": "/wljs-docs/frontend/Reference/Dynamics/FrontEndVirtual"
              },
              "next": {
                "title": "FrontEndExecutableInline",
                "permalink": "/wljs-docs/frontend/Reference/Dynamics/Internals/FrontEndExecutableInline"
              }
            },
            {
              "id": "frontend/Reference/Dynamics/Internals/FrontEndExecutableInline",
              "title": "FrontEndExecutableInline",
              "description": "The same as FrontEndExecutable, but does not require a dedicated storage, the data is stored as a compressed string",
              "source": "@site/docs/frontend/Reference/Dynamics/Internals/FrontEndExecutableInline.md",
              "sourceDirName": "frontend/Reference/Dynamics/Internals",
              "slug": "/frontend/Reference/Dynamics/Internals/FrontEndExecutableInline",
              "permalink": "/wljs-docs/frontend/Reference/Dynamics/Internals/FrontEndExecutableInline",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "frontMatter": {
                "internal": true
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "FrontEndExecutable",
                "permalink": "/wljs-docs/frontend/Reference/Dynamics/Internals/FrontEndExecutable"
              },
              "next": {
                "title": "FrontEndOnly",
                "permalink": "/wljs-docs/frontend/Reference/Dynamics/Internals/FrontEndOnly"
              }
            },
            {
              "id": "frontend/Reference/Dynamics/Internals/FrontEndOnly",
              "title": "FrontEndOnly",
              "description": "An synonym for Offload",
              "source": "@site/docs/frontend/Reference/Dynamics/Internals/FrontEndOnly.md",
              "sourceDirName": "frontend/Reference/Dynamics/Internals",
              "slug": "/frontend/Reference/Dynamics/Internals/FrontEndOnly",
              "permalink": "/wljs-docs/frontend/Reference/Dynamics/Internals/FrontEndOnly",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "frontMatter": {
                "internal": true
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "FrontEndExecutableInline",
                "permalink": "/wljs-docs/frontend/Reference/Dynamics/Internals/FrontEndExecutableInline"
              },
              "next": {
                "title": "FrontEndRef",
                "permalink": "/wljs-docs/frontend/Reference/Dynamics/Internals/FrontEndRef"
              }
            },
            {
              "id": "frontend/Reference/Dynamics/Internals/FrontEndRef",
              "title": "FrontEndRef",
              "description": "An invisible replacement for FrontEndExecutable, which is not replaced by a widget in the editor and Wolfram Kernel.",
              "source": "@site/docs/frontend/Reference/Dynamics/Internals/FrontEndRef.md",
              "sourceDirName": "frontend/Reference/Dynamics/Internals",
              "slug": "/frontend/Reference/Dynamics/Internals/FrontEndRef",
              "permalink": "/wljs-docs/frontend/Reference/Dynamics/Internals/FrontEndRef",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "frontMatter": {
                "internal": true
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "FrontEndOnly",
                "permalink": "/wljs-docs/frontend/Reference/Dynamics/Internals/FrontEndOnly"
              },
              "next": {
                "title": "Manipulate",
                "permalink": "/wljs-docs/frontend/Reference/Dynamics/Manipulate"
              }
            },
            {
              "id": "frontend/Reference/Dynamics/Manipulate",
              "title": "Manipulate",
              "description": "This is not supported. Please, use Dynamics instead",
              "source": "@site/docs/frontend/Reference/Dynamics/Manipulate.md",
              "sourceDirName": "frontend/Reference/Dynamics",
              "slug": "/frontend/Reference/Dynamics/Manipulate",
              "permalink": "/wljs-docs/frontend/Reference/Dynamics/Manipulate",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "frontMatter": {},
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "FrontEndRef",
                "permalink": "/wljs-docs/frontend/Reference/Dynamics/Internals/FrontEndRef"
              },
              "next": {
                "title": "Offload",
                "permalink": "/wljs-docs/frontend/Reference/Dynamics/Offload"
              }
            },
            {
              "id": "frontend/Reference/Dynamics/Offload",
              "title": "Offload",
              "description": "Holds (or offloads) an expression to be evaluated on frontend (WLJS)",
              "source": "@site/docs/frontend/Reference/Dynamics/Offload.md",
              "sourceDirName": "frontend/Reference/Dynamics",
              "slug": "/frontend/Reference/Dynamics/Offload",
              "permalink": "/wljs-docs/frontend/Reference/Dynamics/Offload",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "frontMatter": {
                "env": [
                  "Wolfram Kernel"
                ]
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "Manipulate",
                "permalink": "/wljs-docs/frontend/Reference/Dynamics/Manipulate"
              },
              "next": {
                "title": "Graphics",
                "permalink": "/wljs-docs/frontend/Reference/Graphics/"
              }
            },
            {
              "id": "frontend/Reference/Graphics/AbsoluteThickness",
              "title": "AbsoluteThickness",
              "description": "is used to control the visible thickness of lines used in Graphics. The displayed is not affected by scaling or zooming the plot.",
              "source": "@site/docs/frontend/Reference/Graphics/AbsoluteThickness.md",
              "sourceDirName": "frontend/Reference/Graphics",
              "slug": "/frontend/Reference/Graphics/AbsoluteThickness",
              "permalink": "/wljs-docs/frontend/Reference/Graphics/AbsoluteThickness",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "frontMatter": {
                "env": [
                  "WLJS"
                ],
                "update": false
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "Graphics",
                "permalink": "/wljs-docs/frontend/Reference/Graphics/"
              },
              "next": {
                "title": "Arrow",
                "permalink": "/wljs-docs/frontend/Reference/Graphics/Arrow"
              }
            },
            {
              "id": "frontend/Reference/Graphics/Arrow",
              "title": "Arrow",
              "description": "Plots an arrow with a fixed head-size from point 1 to point 2",
              "source": "@site/docs/frontend/Reference/Graphics/Arrow.md",
              "sourceDirName": "frontend/Reference/Graphics",
              "slug": "/frontend/Reference/Graphics/Arrow",
              "permalink": "/wljs-docs/frontend/Reference/Graphics/Arrow",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "frontMatter": {
                "env": [
                  "WLJS"
                ],
                "update": false,
                "needsContainer": false,
                "virtual": true,
                "origin": "https://github.com/JerryI/wljs-graphics-d3/",
                "draft": false
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "AbsoluteThickness",
                "permalink": "/wljs-docs/frontend/Reference/Graphics/AbsoluteThickness"
              },
              "next": {
                "title": "Circle",
                "permalink": "/wljs-docs/frontend/Reference/Graphics/Circle"
              }
            },
            {
              "id": "frontend/Reference/Graphics/Circle",
              "title": "Circle",
              "description": "",
              "source": "@site/docs/frontend/Reference/Graphics/Circle.md",
              "sourceDirName": "frontend/Reference/Graphics",
              "slug": "/frontend/Reference/Graphics/Circle",
              "permalink": "/wljs-docs/frontend/Reference/Graphics/Circle",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "frontMatter": {
                "env": [
                  "WLJS"
                ],
                "draft": true
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "Arrow",
                "permalink": "/wljs-docs/frontend/Reference/Graphics/Arrow"
              },
              "next": {
                "title": "Directive",
                "permalink": "/wljs-docs/frontend/Reference/Graphics/Directive"
              }
            },
            {
              "id": "frontend/Reference/Graphics/Directive",
              "title": "Directive",
              "description": "Used for styling plots or 2D graphics",
              "source": "@site/docs/frontend/Reference/Graphics/Directive.md",
              "sourceDirName": "frontend/Reference/Graphics",
              "slug": "/frontend/Reference/Graphics/Directive",
              "permalink": "/wljs-docs/frontend/Reference/Graphics/Directive",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "frontMatter": {
                "draft": false,
                "update": false,
                "env": [
                  "WLJS"
                ]
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "Circle",
                "permalink": "/wljs-docs/frontend/Reference/Graphics/Circle"
              },
              "next": {
                "title": "Disk",
                "permalink": "/wljs-docs/frontend/Reference/Graphics/Disk"
              }
            },
            {
              "id": "frontend/Reference/Graphics/Disk",
              "title": "Disk",
              "description": "",
              "source": "@site/docs/frontend/Reference/Graphics/Disk.md",
              "sourceDirName": "frontend/Reference/Graphics",
              "slug": "/frontend/Reference/Graphics/Disk",
              "permalink": "/wljs-docs/frontend/Reference/Graphics/Disk",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "frontMatter": {
                "env": [
                  "WLJS"
                ],
                "update": true,
                "origin": "https://github.com/JerryI/wljs-graphics-d3/",
                "draft": true
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "Directive",
                "permalink": "/wljs-docs/frontend/Reference/Graphics/Directive"
              },
              "next": {
                "title": "GraphicsComplex",
                "permalink": "/wljs-docs/frontend/Reference/Graphics/GraphicsComplex"
              }
            },
            {
              "id": "frontend/Reference/Graphics/Graphics",
              "title": "Graphics",
              "description": "represents a two-dimensional graphical image. This is a fundamental expression, which is produced by all 2D plotting functions",
              "source": "@site/docs/frontend/Reference/Graphics/Graphics.md",
              "sourceDirName": "frontend/Reference/Graphics",
              "slug": "/frontend/Reference/Graphics/",
              "permalink": "/wljs-docs/frontend/Reference/Graphics/",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "frontMatter": {
                "env": [
                  "WLJS"
                ],
                "registered": true,
                "needsContainer": true,
                "update": false,
                "draft": false
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "Offload",
                "permalink": "/wljs-docs/frontend/Reference/Dynamics/Offload"
              },
              "next": {
                "title": "AbsoluteThickness",
                "permalink": "/wljs-docs/frontend/Reference/Graphics/AbsoluteThickness"
              }
            },
            {
              "id": "frontend/Reference/Graphics/GraphicsComplex",
              "title": "GraphicsComplex",
              "description": "",
              "source": "@site/docs/frontend/Reference/Graphics/GraphicsComplex.md",
              "sourceDirName": "frontend/Reference/Graphics",
              "slug": "/frontend/Reference/Graphics/GraphicsComplex",
              "permalink": "/wljs-docs/frontend/Reference/Graphics/GraphicsComplex",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "frontMatter": {},
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "Disk",
                "permalink": "/wljs-docs/frontend/Reference/Graphics/Disk"
              },
              "next": {
                "title": "Image",
                "permalink": "/wljs-docs/frontend/Reference/Graphics/Image"
              }
            },
            {
              "id": "frontend/Reference/Graphics/Image",
              "title": "Image",
              "description": "Represents a raster image and plots the list of pixel's colors to a canvas used in notebooks",
              "source": "@site/docs/frontend/Reference/Graphics/Image.md",
              "sourceDirName": "frontend/Reference/Graphics",
              "slug": "/frontend/Reference/Graphics/Image",
              "permalink": "/wljs-docs/frontend/Reference/Graphics/Image",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "frontMatter": {
                "env": [
                  "WLJS"
                ],
                "update": true,
                "needsContainer": true,
                "registered": true,
                "draft": false
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "GraphicsComplex",
                "permalink": "/wljs-docs/frontend/Reference/Graphics/GraphicsComplex"
              },
              "next": {
                "title": "Inset",
                "permalink": "/wljs-docs/frontend/Reference/Graphics/Inset"
              }
            },
            {
              "id": "frontend/Reference/Graphics/Inset",
              "title": "Inset",
              "description": "a graphics object, that allows to put another Graphics into the canvas. pos has to be a 2D vector, that specifies the position of the inset.",
              "source": "@site/docs/frontend/Reference/Graphics/Inset.md",
              "sourceDirName": "frontend/Reference/Graphics",
              "slug": "/frontend/Reference/Graphics/Inset",
              "permalink": "/wljs-docs/frontend/Reference/Graphics/Inset",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "frontMatter": {
                "env": [
                  "WLJS"
                ],
                "update": true,
                "needsContainer": false,
                "origin": "https://github.com/JerryI/wljs-graphics-d3/"
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "Image",
                "permalink": "/wljs-docs/frontend/Reference/Graphics/Image"
              },
              "next": {
                "title": "EventListener",
                "permalink": "/wljs-docs/frontend/Reference/Graphics/Internal/EventListener"
              }
            },
            {
              "id": "frontend/Reference/Graphics/Internal/EventListener",
              "title": "EventListener",
              "description": "",
              "source": "@site/docs/frontend/Reference/Graphics/Internal/EventListener.md",
              "sourceDirName": "frontend/Reference/Graphics/Internal",
              "slug": "/frontend/Reference/Graphics/Internal/EventListener",
              "permalink": "/wljs-docs/frontend/Reference/Graphics/Internal/EventListener",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "frontMatter": {
                "draft": true
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "Inset",
                "permalink": "/wljs-docs/frontend/Reference/Graphics/Inset"
              },
              "next": {
                "title": "Line",
                "permalink": "/wljs-docs/frontend/Reference/Graphics/Line"
              }
            },
            {
              "id": "frontend/Reference/Graphics/Line",
              "title": "Line",
              "description": "the representation of a line going though the points {x1,y1}, {x2,y2}",
              "source": "@site/docs/frontend/Reference/Graphics/Line.md",
              "sourceDirName": "frontend/Reference/Graphics",
              "slug": "/frontend/Reference/Graphics/Line",
              "permalink": "/wljs-docs/frontend/Reference/Graphics/Line",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "frontMatter": {
                "env": [
                  "WLJS"
                ],
                "virtual": true,
                "update": true,
                "draft": false
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "EventListener",
                "permalink": "/wljs-docs/frontend/Reference/Graphics/Internal/EventListener"
              },
              "next": {
                "title": "Offset",
                "permalink": "/wljs-docs/frontend/Reference/Graphics/Offset"
              }
            },
            {
              "id": "frontend/Reference/Graphics/Offset",
              "title": "Offset",
              "description": "",
              "source": "@site/docs/frontend/Reference/Graphics/Offset.md",
              "sourceDirName": "frontend/Reference/Graphics",
              "slug": "/frontend/Reference/Graphics/Offset",
              "permalink": "/wljs-docs/frontend/Reference/Graphics/Offset",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "frontMatter": {
                "draft": true
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "Line",
                "permalink": "/wljs-docs/frontend/Reference/Graphics/Line"
              },
              "next": {
                "title": "Point",
                "permalink": "/wljs-docs/frontend/Reference/Graphics/Point"
              }
            },
            {
              "id": "frontend/Reference/Graphics/Point",
              "title": "Point",
              "description": "",
              "source": "@site/docs/frontend/Reference/Graphics/Point.md",
              "sourceDirName": "frontend/Reference/Graphics",
              "slug": "/frontend/Reference/Graphics/Point",
              "permalink": "/wljs-docs/frontend/Reference/Graphics/Point",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "frontMatter": {
                "draft": true
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "Offset",
                "permalink": "/wljs-docs/frontend/Reference/Graphics/Offset"
              },
              "next": {
                "title": "Polygon",
                "permalink": "/wljs-docs/frontend/Reference/Graphics/Polygon"
              }
            },
            {
              "id": "frontend/Reference/Graphics/Polygon",
              "title": "Polygon",
              "description": "",
              "source": "@site/docs/frontend/Reference/Graphics/Polygon.md",
              "sourceDirName": "frontend/Reference/Graphics",
              "slug": "/frontend/Reference/Graphics/Polygon",
              "permalink": "/wljs-docs/frontend/Reference/Graphics/Polygon",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "frontMatter": {
                "draft": true
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "Point",
                "permalink": "/wljs-docs/frontend/Reference/Graphics/Point"
              },
              "next": {
                "title": "Raster",
                "permalink": "/wljs-docs/frontend/Reference/Graphics/Raster"
              }
            },
            {
              "id": "frontend/Reference/Graphics/Raster",
              "title": "Raster",
              "description": "",
              "source": "@site/docs/frontend/Reference/Graphics/Raster.md",
              "sourceDirName": "frontend/Reference/Graphics",
              "slug": "/frontend/Reference/Graphics/Raster",
              "permalink": "/wljs-docs/frontend/Reference/Graphics/Raster",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "frontMatter": {
                "draft": true
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "Polygon",
                "permalink": "/wljs-docs/frontend/Reference/Graphics/Polygon"
              },
              "next": {
                "title": "Rectangle",
                "permalink": "/wljs-docs/frontend/Reference/Graphics/Rectangle"
              }
            },
            {
              "id": "frontend/Reference/Graphics/Rectangle",
              "title": "Rectangle",
              "description": "",
              "source": "@site/docs/frontend/Reference/Graphics/Rectangle.md",
              "sourceDirName": "frontend/Reference/Graphics",
              "slug": "/frontend/Reference/Graphics/Rectangle",
              "permalink": "/wljs-docs/frontend/Reference/Graphics/Rectangle",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "frontMatter": {
                "env": [
                  "WLJS"
                ],
                "draft": true
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "Raster",
                "permalink": "/wljs-docs/frontend/Reference/Graphics/Raster"
              },
              "next": {
                "title": "Rotate",
                "permalink": "/wljs-docs/frontend/Reference/Graphics/Rotate"
              }
            },
            {
              "id": "frontend/Reference/Graphics/Rotate",
              "title": "Rotate",
              "description": "",
              "source": "@site/docs/frontend/Reference/Graphics/Rotate.md",
              "sourceDirName": "frontend/Reference/Graphics",
              "slug": "/frontend/Reference/Graphics/Rotate",
              "permalink": "/wljs-docs/frontend/Reference/Graphics/Rotate",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "frontMatter": {
                "draft": true
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "Rectangle",
                "permalink": "/wljs-docs/frontend/Reference/Graphics/Rectangle"
              },
              "next": {
                "title": "SVGAttribute",
                "permalink": "/wljs-docs/frontend/Reference/Graphics/SVGAttribute"
              }
            },
            {
              "id": "frontend/Reference/Graphics/Show",
              "title": "Show",
              "description": "Is not supported in wljs-graphics-d3 for now",
              "source": "@site/docs/frontend/Reference/Graphics/Show.md",
              "sourceDirName": "frontend/Reference/Graphics",
              "slug": "/frontend/Reference/Graphics/Show",
              "permalink": "/wljs-docs/frontend/Reference/Graphics/Show",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "frontMatter": {
                "env": [
                  "WLJS"
                ]
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "SVGAttribute",
                "permalink": "/wljs-docs/frontend/Reference/Graphics/SVGAttribute"
              },
              "next": {
                "title": "Style",
                "permalink": "/wljs-docs/frontend/Reference/Graphics/Style"
              }
            },
            {
              "id": "frontend/Reference/Graphics/Style",
              "title": "Style",
              "description": "A wrapper that can be used for Text . The following options can be provided",
              "source": "@site/docs/frontend/Reference/Graphics/Style.md",
              "sourceDirName": "frontend/Reference/Graphics",
              "slug": "/frontend/Reference/Graphics/Style",
              "permalink": "/wljs-docs/frontend/Reference/Graphics/Style",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "frontMatter": {
                "env": [
                  "WLJS"
                ],
                "needsContainer": null,
                "virtual": null,
                "update": true
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "Show",
                "permalink": "/wljs-docs/frontend/Reference/Graphics/Show"
              },
              "next": {
                "title": "Text",
                "permalink": "/wljs-docs/frontend/Reference/Graphics/Text"
              }
            },
            {
              "id": "frontend/Reference/Graphics/SVGAttribute",
              "title": "SVGAttribute",
              "description": "Allows to directly set SVG attribute to a 2D graphics object",
              "source": "@site/docs/frontend/Reference/Graphics/SVGAttribute.md",
              "sourceDirName": "frontend/Reference/Graphics",
              "slug": "/frontend/Reference/Graphics/SVGAttribute",
              "permalink": "/wljs-docs/frontend/Reference/Graphics/SVGAttribute",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "frontMatter": {
                "env": [
                  "WLJS"
                ],
                "update": null,
                "source": "https://github.com/JerryI/wljs-graphics-d3/"
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "Rotate",
                "permalink": "/wljs-docs/frontend/Reference/Graphics/Rotate"
              },
              "next": {
                "title": "Show",
                "permalink": "/wljs-docs/frontend/Reference/Graphics/Show"
              }
            },
            {
              "id": "frontend/Reference/Graphics/Text",
              "title": "Text",
              "description": "Represents an arbitrary text label placed as a Graphics object",
              "source": "@site/docs/frontend/Reference/Graphics/Text.md",
              "sourceDirName": "frontend/Reference/Graphics",
              "slug": "/frontend/Reference/Graphics/Text",
              "permalink": "/wljs-docs/frontend/Reference/Graphics/Text",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "frontMatter": {
                "env": [
                  "WLJS"
                ],
                "virtual": true,
                "needsContainer": true,
                "update": true,
                "source": "https://github.com/JerryI/wljs-graphics-d3/"
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "Style",
                "permalink": "/wljs-docs/frontend/Reference/Graphics/Style"
              },
              "next": {
                "title": "Translate",
                "permalink": "/wljs-docs/frontend/Reference/Graphics/Translate"
              }
            },
            {
              "id": "frontend/Reference/Graphics/Translate",
              "title": "Translate",
              "description": "",
              "source": "@site/docs/frontend/Reference/Graphics/Translate.md",
              "sourceDirName": "frontend/Reference/Graphics",
              "slug": "/frontend/Reference/Graphics/Translate",
              "permalink": "/wljs-docs/frontend/Reference/Graphics/Translate",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "frontMatter": {
                "env": [
                  "WLJS"
                ]
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "Text",
                "permalink": "/wljs-docs/frontend/Reference/Graphics/Text"
              },
              "next": {
                "title": "Graphics3D",
                "permalink": "/wljs-docs/frontend/Reference/Graphics3D/"
              }
            },
            {
              "id": "frontend/Reference/Graphics3D/Cuboid",
              "title": "Cuboid",
              "description": "",
              "source": "@site/docs/frontend/Reference/Graphics3D/Cuboid.md",
              "sourceDirName": "frontend/Reference/Graphics3D",
              "slug": "/frontend/Reference/Graphics3D/Cuboid",
              "permalink": "/wljs-docs/frontend/Reference/Graphics3D/Cuboid",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "frontMatter": {
                "draft": true
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "Graphics3D",
                "permalink": "/wljs-docs/frontend/Reference/Graphics3D/"
              },
              "next": {
                "title": "EventListener",
                "permalink": "/wljs-docs/frontend/Reference/Graphics3D/EventListener"
              }
            },
            {
              "id": "frontend/Reference/Graphics3D/EventListener",
              "title": "EventListener",
              "description": "",
              "source": "@site/docs/frontend/Reference/Graphics3D/EventListener.md",
              "sourceDirName": "frontend/Reference/Graphics3D",
              "slug": "/frontend/Reference/Graphics3D/EventListener",
              "permalink": "/wljs-docs/frontend/Reference/Graphics3D/EventListener",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "frontMatter": {
                "draft": true
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "Cuboid",
                "permalink": "/wljs-docs/frontend/Reference/Graphics3D/Cuboid"
              },
              "next": {
                "title": "Sphere",
                "permalink": "/wljs-docs/frontend/Reference/Graphics3D/Sphere"
              }
            },
            {
              "id": "frontend/Reference/Graphics3D/Graphics3D",
              "title": "Graphics3D",
              "description": "",
              "source": "@site/docs/frontend/Reference/Graphics3D/Graphics3D.md",
              "sourceDirName": "frontend/Reference/Graphics3D",
              "slug": "/frontend/Reference/Graphics3D/",
              "permalink": "/wljs-docs/frontend/Reference/Graphics3D/",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "frontMatter": {
                "draft": true
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "Translate",
                "permalink": "/wljs-docs/frontend/Reference/Graphics/Translate"
              },
              "next": {
                "title": "Cuboid",
                "permalink": "/wljs-docs/frontend/Reference/Graphics3D/Cuboid"
              }
            },
            {
              "id": "frontend/Reference/Graphics3D/Sphere",
              "title": "Sphere",
              "description": "",
              "source": "@site/docs/frontend/Reference/Graphics3D/Sphere.md",
              "sourceDirName": "frontend/Reference/Graphics3D",
              "slug": "/frontend/Reference/Graphics3D/Sphere",
              "permalink": "/wljs-docs/frontend/Reference/Graphics3D/Sphere",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "frontMatter": {
                "env": [
                  "WLJS"
                ],
                "virtual": true,
                "needsContainer": null,
                "update": true,
                "draft": true
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "EventListener",
                "permalink": "/wljs-docs/frontend/Reference/Graphics3D/EventListener"
              },
              "next": {
                "title": "SpotLight",
                "permalink": "/wljs-docs/frontend/Reference/Graphics3D/SpotLight"
              }
            },
            {
              "id": "frontend/Reference/Graphics3D/SpotLight",
              "title": "SpotLight",
              "description": "places a fake source of light in a 3D scene (see Graphics3D)",
              "source": "@site/docs/frontend/Reference/Graphics3D/SpotLight.md",
              "sourceDirName": "frontend/Reference/Graphics3D",
              "slug": "/frontend/Reference/Graphics3D/SpotLight",
              "permalink": "/wljs-docs/frontend/Reference/Graphics3D/SpotLight",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "frontMatter": {
                "env": [
                  "WLJS"
                ],
                "virtual": true,
                "update": true,
                "origin": "https://github.com/JerryI/wljs-graphics-d3/"
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "Sphere",
                "permalink": "/wljs-docs/frontend/Reference/Graphics3D/Sphere"
              },
              "next": {
                "title": "EditorView",
                "permalink": "/wljs-docs/frontend/Reference/Inputs/EditorView"
              }
            },
            {
              "id": "frontend/Reference/Inputs/EditorView",
              "title": "EditorView",
              "description": "A view component to spawn an code-editor (fully functional)",
              "source": "@site/docs/frontend/Reference/Inputs/EditorView.md",
              "sourceDirName": "frontend/Reference/Inputs",
              "slug": "/frontend/Reference/Inputs/EditorView",
              "permalink": "/wljs-docs/frontend/Reference/Inputs/EditorView",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "frontMatter": {
                "env": [
                  "WLJS"
                ],
                "origin": "https://github.com/JerryI/wljs-editor/tree/main",
                "update": true,
                "needsContainer": true
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "SpotLight",
                "permalink": "/wljs-docs/frontend/Reference/Graphics3D/SpotLight"
              },
              "next": {
                "title": "InputButton",
                "permalink": "/wljs-docs/frontend/Reference/Inputs/InputButton"
              }
            },
            {
              "id": "frontend/Reference/Inputs/InputButton",
              "title": "InputButton",
              "description": "creates a button component and returns EventObject.",
              "source": "@site/docs/frontend/Reference/Inputs/InputButton.md",
              "sourceDirName": "frontend/Reference/Inputs",
              "slug": "/frontend/Reference/Inputs/InputButton",
              "permalink": "/wljs-docs/frontend/Reference/Inputs/InputButton",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "frontMatter": {
                "env": [
                  "Wolfram Kernel"
                ],
                "origin": "https://github.com/JerryI/wljs-inputs"
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "EditorView",
                "permalink": "/wljs-docs/frontend/Reference/Inputs/EditorView"
              },
              "next": {
                "title": "InputFile",
                "permalink": "/wljs-docs/frontend/Reference/Inputs/InputFile"
              }
            },
            {
              "id": "frontend/Reference/Inputs/InputFile",
              "title": "InputFile",
              "description": "outputs as a drag & drop file-form used to handle file input",
              "source": "@site/docs/frontend/Reference/Inputs/InputFile.md",
              "sourceDirName": "frontend/Reference/Inputs",
              "slug": "/frontend/Reference/Inputs/InputFile",
              "permalink": "/wljs-docs/frontend/Reference/Inputs/InputFile",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "frontMatter": {
                "env": [
                  "Wolfram Kernel"
                ],
                "origin": "https://github.com/JerryI/wljs-inputs",
                "update": false
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "InputButton",
                "permalink": "/wljs-docs/frontend/Reference/Inputs/InputButton"
              },
              "next": {
                "title": "InputGroup",
                "permalink": "/wljs-docs/frontend/Reference/Inputs/InputGroup"
              }
            },
            {
              "id": "frontend/Reference/Inputs/InputGroup",
              "title": "InputGroup",
              "description": "groups different event-generators such as InputRange, InputButton or in general EventObject into a new EventObject",
              "source": "@site/docs/frontend/Reference/Inputs/InputGroup.md",
              "sourceDirName": "frontend/Reference/Inputs",
              "slug": "/frontend/Reference/Inputs/InputGroup",
              "permalink": "/wljs-docs/frontend/Reference/Inputs/InputGroup",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "frontMatter": {
                "env": [
                  "Wolfram Kernel"
                ],
                "origin": "https://github.com/JerryI/wljs-inputs",
                "update": false
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "InputFile",
                "permalink": "/wljs-docs/frontend/Reference/Inputs/InputFile"
              },
              "next": {
                "title": "InputRange",
                "permalink": "/wljs-docs/frontend/Reference/Inputs/InputRange"
              }
            },
            {
              "id": "frontend/Reference/Inputs/InputRange",
              "title": "InputRange",
              "description": "creates a basic combo of a slider and numerical input field and returns EventObject.",
              "source": "@site/docs/frontend/Reference/Inputs/InputRange.md",
              "sourceDirName": "frontend/Reference/Inputs",
              "slug": "/frontend/Reference/Inputs/InputRange",
              "permalink": "/wljs-docs/frontend/Reference/Inputs/InputRange",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "frontMatter": {
                "env": [
                  "Wolfram Kernel"
                ],
                "origin": "https://github.com/JerryI/wljs-inputs"
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "InputGroup",
                "permalink": "/wljs-docs/frontend/Reference/Inputs/InputGroup"
              },
              "next": {
                "title": "InputTable",
                "permalink": "/wljs-docs/frontend/Reference/Inputs/InputTable"
              }
            },
            {
              "id": "frontend/Reference/Inputs/InputTable",
              "title": "InputTable",
              "description": "it places a sort of small Excel-like table editor for list provided. This is a great solution for a large tables, since it does support lazy loading from a server",
              "source": "@site/docs/frontend/Reference/Inputs/InputTable.md",
              "sourceDirName": "frontend/Reference/Inputs",
              "slug": "/frontend/Reference/Inputs/InputTable",
              "permalink": "/wljs-docs/frontend/Reference/Inputs/InputTable",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "frontMatter": {
                "env": [
                  "Wolfram Kernel"
                ],
                "origin": "https://github.com/JerryI/wljs-inputs"
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "InputRange",
                "permalink": "/wljs-docs/frontend/Reference/Inputs/InputRange"
              },
              "next": {
                "title": "InputText",
                "permalink": "/wljs-docs/frontend/Reference/Inputs/InputText"
              }
            },
            {
              "id": "frontend/Reference/Inputs/InputText",
              "title": "InputText",
              "description": "creates an event-generator for an input-text field and returns EventObject",
              "source": "@site/docs/frontend/Reference/Inputs/InputText.md",
              "sourceDirName": "frontend/Reference/Inputs",
              "slug": "/frontend/Reference/Inputs/InputText",
              "permalink": "/wljs-docs/frontend/Reference/Inputs/InputText",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "frontMatter": {
                "env": [
                  "Wolfram Kernel"
                ],
                "origin": "https://github.com/JerryI/wljs-inputs"
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "InputTable",
                "permalink": "/wljs-docs/frontend/Reference/Inputs/InputTable"
              },
              "next": {
                "title": "Slider",
                "permalink": "/wljs-docs/frontend/Reference/Inputs/Slider"
              }
            },
            {
              "id": "frontend/Reference/Inputs/Slider",
              "title": "Slider",
              "description": "This is not supported. Please, use alternative way InputRange",
              "source": "@site/docs/frontend/Reference/Inputs/Slider.md",
              "sourceDirName": "frontend/Reference/Inputs",
              "slug": "/frontend/Reference/Inputs/Slider",
              "permalink": "/wljs-docs/frontend/Reference/Inputs/Slider",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "frontMatter": {},
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "InputText",
                "permalink": "/wljs-docs/frontend/Reference/Inputs/InputText"
              },
              "next": {
                "title": "TextView",
                "permalink": "/wljs-docs/frontend/Reference/Inputs/TextView"
              }
            },
            {
              "id": "frontend/Reference/Inputs/TextView",
              "title": "TextView",
              "description": "This is an internal part of InputText",
              "source": "@site/docs/frontend/Reference/Inputs/TextView.md",
              "sourceDirName": "frontend/Reference/Inputs",
              "slug": "/frontend/Reference/Inputs/TextView",
              "permalink": "/wljs-docs/frontend/Reference/Inputs/TextView",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "frontMatter": {
                "env": [
                  "WLJS"
                ],
                "update": true,
                "needsContainer": true,
                "source": "https://github.com/JerryI/wljs-inputs/",
                "registered": false
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "Slider",
                "permalink": "/wljs-docs/frontend/Reference/Inputs/Slider"
              },
              "next": {
                "title": "Async",
                "permalink": "/wljs-docs/frontend/Reference/Misc/Async"
              }
            },
            {
              "id": "frontend/Reference/Misc/Async",
              "title": "Async",
              "description": "SetTimeout",
              "source": "@site/docs/frontend/Reference/Misc/Async.md",
              "sourceDirName": "frontend/Reference/Misc",
              "slug": "/frontend/Reference/Misc/Async",
              "permalink": "/wljs-docs/frontend/Reference/Misc/Async",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "frontMatter": {},
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "TextView",
                "permalink": "/wljs-docs/frontend/Reference/Inputs/TextView"
              },
              "next": {
                "title": "Events",
                "permalink": "/wljs-docs/frontend/Reference/Misc/Events"
              }
            },
            {
              "id": "frontend/Reference/Misc/Events",
              "title": "Events",
              "description": "EventObject",
              "source": "@site/docs/frontend/Reference/Misc/Events.md",
              "sourceDirName": "frontend/Reference/Misc",
              "slug": "/frontend/Reference/Misc/Events",
              "permalink": "/wljs-docs/frontend/Reference/Misc/Events",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "frontMatter": {},
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "Async",
                "permalink": "/wljs-docs/frontend/Reference/Misc/Async"
              },
              "next": {
                "title": "Language",
                "permalink": "/wljs-docs/frontend/Reference/Misc/Language"
              }
            },
            {
              "id": "frontend/Reference/Misc/Language",
              "title": "Language",
              "description": "LeakyModule",
              "source": "@site/docs/frontend/Reference/Misc/Language.md",
              "sourceDirName": "frontend/Reference/Misc",
              "slug": "/frontend/Reference/Misc/Language",
              "permalink": "/wljs-docs/frontend/Reference/Misc/Language",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "frontMatter": {},
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "Events",
                "permalink": "/wljs-docs/frontend/Reference/Misc/Events"
              },
              "next": {
                "title": "Promise",
                "permalink": "/wljs-docs/frontend/Reference/Misc/Promise"
              }
            },
            {
              "id": "frontend/Reference/Misc/Promise",
              "title": "Promise",
              "description": "Promise",
              "source": "@site/docs/frontend/Reference/Misc/Promise.md",
              "sourceDirName": "frontend/Reference/Misc",
              "slug": "/frontend/Reference/Misc/Promise",
              "permalink": "/wljs-docs/frontend/Reference/Misc/Promise",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "frontMatter": {},
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "Language",
                "permalink": "/wljs-docs/frontend/Reference/Misc/Language"
              },
              "next": {
                "title": "ArrayPlot",
                "permalink": "/wljs-docs/frontend/Reference/Plotting/ArrayPlot"
              }
            },
            {
              "id": "frontend/Reference/Plotting/ArrayPlot",
              "title": "ArrayPlot",
              "description": "Generates a plot, where values are shown in a discrete array of blocks",
              "source": "@site/docs/frontend/Reference/Plotting/ArrayPlot.md",
              "sourceDirName": "frontend/Reference/Plotting",
              "slug": "/frontend/Reference/Plotting/ArrayPlot",
              "permalink": "/wljs-docs/frontend/Reference/Plotting/ArrayPlot",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "frontMatter": {
                "env": [
                  "Wolfram Kernel"
                ],
                "update": null,
                "needsContainer": null,
                "origin": "https://reference.wolfram.com/language/ref/ArrayPlot.html"
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "Promise",
                "permalink": "/wljs-docs/frontend/Reference/Misc/Promise"
              },
              "next": {
                "title": "BarChart",
                "permalink": "/wljs-docs/frontend/Reference/Plotting/BarChart"
              }
            },
            {
              "id": "frontend/Reference/Plotting/BarChart",
              "title": "BarChart",
              "description": "generates a bar chart for a list of heights",
              "source": "@site/docs/frontend/Reference/Plotting/BarChart.md",
              "sourceDirName": "frontend/Reference/Plotting",
              "slug": "/frontend/Reference/Plotting/BarChart",
              "permalink": "/wljs-docs/frontend/Reference/Plotting/BarChart",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "frontMatter": {
                "env": [
                  "Wolfram Kernel"
                ],
                "origin": "https://reference.wolfram.com/language/ref/BarChart.html",
                "update": false,
                "needsContainer": false
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "ArrayPlot",
                "permalink": "/wljs-docs/frontend/Reference/Plotting/ArrayPlot"
              },
              "next": {
                "title": "BubbleChart",
                "permalink": "/wljs-docs/frontend/Reference/Plotting/BubbleChart"
              }
            },
            {
              "id": "frontend/Reference/Plotting/BubbleChart",
              "title": "BubbleChart",
              "description": "creates a bubble chart for a list of triples",
              "source": "@site/docs/frontend/Reference/Plotting/BubbleChart.md",
              "sourceDirName": "frontend/Reference/Plotting",
              "slug": "/frontend/Reference/Plotting/BubbleChart",
              "permalink": "/wljs-docs/frontend/Reference/Plotting/BubbleChart",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "frontMatter": {
                "env": [
                  "Wolfram Kernel"
                ],
                "update": false,
                "origin": "https://reference.wolfram.com/language/ref/BubbleChart.html"
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "BarChart",
                "permalink": "/wljs-docs/frontend/Reference/Plotting/BarChart"
              },
              "next": {
                "title": "ContourPlot",
                "permalink": "/wljs-docs/frontend/Reference/Plotting/ContourPlot"
              }
            },
            {
              "id": "frontend/Reference/Plotting/ContourPlot",
              "title": "ContourPlot",
              "description": "Generates a contour plot of $f$ as a function of $x$ and $y$",
              "source": "@site/docs/frontend/Reference/Plotting/ContourPlot.md",
              "sourceDirName": "frontend/Reference/Plotting",
              "slug": "/frontend/Reference/Plotting/ContourPlot",
              "permalink": "/wljs-docs/frontend/Reference/Plotting/ContourPlot",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "frontMatter": {
                "env": [
                  "Wolfram Kernel"
                ],
                "update": null,
                "needsContainer": null,
                "origin": "https://reference.wolfram.com/language/ref/ContourPlot.html?q=ContourPlot"
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "BubbleChart",
                "permalink": "/wljs-docs/frontend/Reference/Plotting/BubbleChart"
              },
              "next": {
                "title": "DensityPlot",
                "permalink": "/wljs-docs/frontend/Reference/Plotting/DensityPlot"
              }
            },
            {
              "id": "frontend/Reference/Plotting/DensityPlot",
              "title": "DensityPlot",
              "description": "makes a density plot of f as a function of x and y",
              "source": "@site/docs/frontend/Reference/Plotting/DensityPlot.md",
              "sourceDirName": "frontend/Reference/Plotting",
              "slug": "/frontend/Reference/Plotting/DensityPlot",
              "permalink": "/wljs-docs/frontend/Reference/Plotting/DensityPlot",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "frontMatter": {
                "env": [
                  "Wolfram Kernel"
                ],
                "needsContainer": false,
                "update": false,
                "origin": "https://reference.wolfram.com/language/ref/DensityPlot.html"
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "ContourPlot",
                "permalink": "/wljs-docs/frontend/Reference/Plotting/ContourPlot"
              },
              "next": {
                "title": "ListContourPlot",
                "permalink": "/wljs-docs/frontend/Reference/Plotting/ListContourPlot"
              }
            },
            {
              "id": "frontend/Reference/Plotting/ListContourPlot",
              "title": "ListContourPlot",
              "description": "A list version of ContourPlot",
              "source": "@site/docs/frontend/Reference/Plotting/ListContourPlot.md",
              "sourceDirName": "frontend/Reference/Plotting",
              "slug": "/frontend/Reference/Plotting/ListContourPlot",
              "permalink": "/wljs-docs/frontend/Reference/Plotting/ListContourPlot",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "frontMatter": {
                "env": [
                  "Wolfram Kernel"
                ],
                "update": null,
                "needsContainer": null,
                "origin": "https://reference.wolfram.com/language/ref/ListContourPlot.html"
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "DensityPlot",
                "permalink": "/wljs-docs/frontend/Reference/Plotting/DensityPlot"
              },
              "next": {
                "title": "ListCurvePathPlot",
                "permalink": "/wljs-docs/frontend/Reference/Plotting/ListCurvePathPlot"
              }
            },
            {
              "id": "frontend/Reference/Plotting/ListCurvePathPlot",
              "title": "ListCurvePathPlot",
              "description": "Plots a curve that corresponds to a smooth path through the specified points",
              "source": "@site/docs/frontend/Reference/Plotting/ListCurvePathPlot.md",
              "sourceDirName": "frontend/Reference/Plotting",
              "slug": "/frontend/Reference/Plotting/ListCurvePathPlot",
              "permalink": "/wljs-docs/frontend/Reference/Plotting/ListCurvePathPlot",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "frontMatter": {
                "env": [
                  "Wolfram Kernel"
                ],
                "update": null,
                "needsContainer": null,
                "origin": "https://reference.wolfram.com/language/ref/ListCurvePathPlot.html"
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "ListContourPlot",
                "permalink": "/wljs-docs/frontend/Reference/Plotting/ListContourPlot"
              },
              "next": {
                "title": "ListLinePlot",
                "permalink": "/wljs-docs/frontend/Reference/Plotting/ListLinePlot"
              }
            },
            {
              "id": "frontend/Reference/Plotting/ListLinePlot",
              "title": "ListLinePlot",
              "description": "Plots a line like Plot through the list of points provided",
              "source": "@site/docs/frontend/Reference/Plotting/ListLinePlot.md",
              "sourceDirName": "frontend/Reference/Plotting",
              "slug": "/frontend/Reference/Plotting/ListLinePlot",
              "permalink": "/wljs-docs/frontend/Reference/Plotting/ListLinePlot",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "frontMatter": {
                "env": [
                  "Wolfram Kernel"
                ],
                "update": null,
                "needsContainer": null,
                "registered": true
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "ListCurvePathPlot",
                "permalink": "/wljs-docs/frontend/Reference/Plotting/ListCurvePathPlot"
              },
              "next": {
                "title": "ListLinePlotly",
                "permalink": "/wljs-docs/frontend/Reference/Plotting/ListLinePlotly"
              }
            },
            {
              "id": "frontend/Reference/Plotting/ListLinePlotly",
              "title": "ListLinePlotly",
              "description": "An alternative plotting function to ListLinePlot, that supports dynamic updates, panning, zoom out of the box",
              "source": "@site/docs/frontend/Reference/Plotting/ListLinePlotly.md",
              "sourceDirName": "frontend/Reference/Plotting",
              "slug": "/frontend/Reference/Plotting/ListLinePlotly",
              "permalink": "/wljs-docs/frontend/Reference/Plotting/ListLinePlotly",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "frontMatter": {
                "env": [
                  "WLJS"
                ],
                "registered": true,
                "needsContainer": true,
                "update": true,
                "origin": "https://github.com/JerryI/wljs-plotly"
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "ListLinePlot",
                "permalink": "/wljs-docs/frontend/Reference/Plotting/ListLinePlot"
              },
              "next": {
                "title": "ListStepPlot",
                "permalink": "/wljs-docs/frontend/Reference/Plotting/ListStepPlot"
              }
            },
            {
              "id": "frontend/Reference/Plotting/ListStepPlot",
              "title": "ListStepPlot",
              "description": "plots the values $y1$, $y2$ ... in steps",
              "source": "@site/docs/frontend/Reference/Plotting/ListStepPlot.md",
              "sourceDirName": "frontend/Reference/Plotting",
              "slug": "/frontend/Reference/Plotting/ListStepPlot",
              "permalink": "/wljs-docs/frontend/Reference/Plotting/ListStepPlot",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "frontMatter": {
                "env": [
                  "Wolfram Kernel"
                ],
                "update": null,
                "needsContainer": null,
                "registered": true,
                "origin": "https://reference.wolfram.com/language/ref/ListStepPlot.html"
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "ListLinePlotly",
                "permalink": "/wljs-docs/frontend/Reference/Plotting/ListLinePlotly"
              },
              "next": {
                "title": "ListVectorPlot",
                "permalink": "/wljs-docs/frontend/Reference/Plotting/ListVectorPlot"
              }
            },
            {
              "id": "frontend/Reference/Plotting/ListVectorPlot",
              "title": "ListVectorPlot",
              "description": "Plot the vector field interpolated from a specified set of vectors",
              "source": "@site/docs/frontend/Reference/Plotting/ListVectorPlot.md",
              "sourceDirName": "frontend/Reference/Plotting",
              "slug": "/frontend/Reference/Plotting/ListVectorPlot",
              "permalink": "/wljs-docs/frontend/Reference/Plotting/ListVectorPlot",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "frontMatter": {
                "env": [
                  "Wolfram Kernel"
                ],
                "update": null,
                "origin": "https://reference.wolfram.com/language/ref/ListVectorPlot.html"
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "ListStepPlot",
                "permalink": "/wljs-docs/frontend/Reference/Plotting/ListStepPlot"
              },
              "next": {
                "title": "MatrixPlot",
                "permalink": "/wljs-docs/frontend/Reference/Plotting/MatrixPlot"
              }
            },
            {
              "id": "frontend/Reference/Plotting/MatrixPlot",
              "title": "MatrixPlot",
              "description": "Plots a 2D array with an arbitrary data inside with axes",
              "source": "@site/docs/frontend/Reference/Plotting/MatrixPlot.md",
              "sourceDirName": "frontend/Reference/Plotting",
              "slug": "/frontend/Reference/Plotting/MatrixPlot",
              "permalink": "/wljs-docs/frontend/Reference/Plotting/MatrixPlot",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "frontMatter": {
                "env": [
                  "Wolfram Kernel"
                ],
                "update": null
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "ListVectorPlot",
                "permalink": "/wljs-docs/frontend/Reference/Plotting/ListVectorPlot"
              },
              "next": {
                "title": "Plot",
                "permalink": "/wljs-docs/frontend/Reference/Plotting/Plot"
              }
            },
            {
              "id": "frontend/Reference/Plotting/Plot",
              "title": "Plot",
              "description": "A Swiss knife for displaying 2D data",
              "source": "@site/docs/frontend/Reference/Plotting/Plot.md",
              "sourceDirName": "frontend/Reference/Plotting",
              "slug": "/frontend/Reference/Plotting/Plot",
              "permalink": "/wljs-docs/frontend/Reference/Plotting/Plot",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "frontMatter": {
                "env": [
                  "Wolfram Kernel"
                ],
                "update": false,
                "virtual": null,
                "registered": true
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "MatrixPlot",
                "permalink": "/wljs-docs/frontend/Reference/Plotting/MatrixPlot"
              },
              "next": {
                "title": "Plotly",
                "permalink": "/wljs-docs/frontend/Reference/Plotting/Plotly"
              }
            },
            {
              "id": "frontend/Reference/Plotting/Plotly",
              "title": "Plotly",
              "description": "An alternative plotting function to Plot that uses Plotly.js",
              "source": "@site/docs/frontend/Reference/Plotting/Plotly.md",
              "sourceDirName": "frontend/Reference/Plotting",
              "slug": "/frontend/Reference/Plotting/Plotly",
              "permalink": "/wljs-docs/frontend/Reference/Plotting/Plotly",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "frontMatter": {
                "env": [
                  "Wolfram Kernel"
                ],
                "registered": true,
                "update": null,
                "origin": "https://github.com/JerryI/wljs-plotly"
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "Plot",
                "permalink": "/wljs-docs/frontend/Reference/Plotting/Plot"
              },
              "next": {
                "title": "RandomImage",
                "permalink": "/wljs-docs/frontend/Reference/Plotting/RandomImage"
              }
            },
            {
              "id": "frontend/Reference/Plotting/RandomImage",
              "title": "RandomImage",
              "description": "Generates a raster Image with a given size and distribution. Only RGB space is supported. The maximum value is limited to 255 for each channel",
              "source": "@site/docs/frontend/Reference/Plotting/RandomImage.md",
              "sourceDirName": "frontend/Reference/Plotting",
              "slug": "/frontend/Reference/Plotting/RandomImage",
              "permalink": "/wljs-docs/frontend/Reference/Plotting/RandomImage",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "frontMatter": {
                "env": [
                  "Wolfram Kernel"
                ],
                "origin": "Wolfram Language",
                "source": null
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "Plotly",
                "permalink": "/wljs-docs/frontend/Reference/Plotting/Plotly"
              },
              "next": {
                "title": "StackedListPlot",
                "permalink": "/wljs-docs/frontend/Reference/Plotting/StackedListPlot"
              }
            },
            {
              "id": "frontend/Reference/Plotting/StackedListPlot",
              "title": "StackedListPlot",
              "description": "plots lines for each of the $datai$, with the $i^$ curve being the accumulation of values in $data1$ through $data_i$",
              "source": "@site/docs/frontend/Reference/Plotting/StackedListPlot.md",
              "sourceDirName": "frontend/Reference/Plotting",
              "slug": "/frontend/Reference/Plotting/StackedListPlot",
              "permalink": "/wljs-docs/frontend/Reference/Plotting/StackedListPlot",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "frontMatter": {
                "env": [
                  "Wolfram Kernel"
                ],
                "update": null,
                "needsContainer": null,
                "registered": true,
                "origin": "https://reference.wolfram.com/language/ref/StackedListPlot.html"
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "RandomImage",
                "permalink": "/wljs-docs/frontend/Reference/Plotting/RandomImage"
              },
              "next": {
                "title": "StreamPlot",
                "permalink": "/wljs-docs/frontend/Reference/Plotting/StreamPlot"
              }
            },
            {
              "id": "frontend/Reference/Plotting/StreamPlot",
              "title": "StreamPlot",
              "description": "Generates a stream plot of the vector field ${vx,vy}$ as a function of $x$ and $y$",
              "source": "@site/docs/frontend/Reference/Plotting/StreamPlot.md",
              "sourceDirName": "frontend/Reference/Plotting",
              "slug": "/frontend/Reference/Plotting/StreamPlot",
              "permalink": "/wljs-docs/frontend/Reference/Plotting/StreamPlot",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "frontMatter": {
                "env": [
                  "Wolfram Kernel"
                ],
                "update": null,
                "needsContainer": null,
                "origin": "https://reference.wolfram.com/language/ref/StreamPlot.html"
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "StackedListPlot",
                "permalink": "/wljs-docs/frontend/Reference/Plotting/StackedListPlot"
              },
              "next": {
                "title": "VectorPlot",
                "permalink": "/wljs-docs/frontend/Reference/Plotting/VectorPlot"
              }
            },
            {
              "id": "frontend/Reference/Plotting/VectorPlot",
              "title": "VectorPlot",
              "description": "Generates a vector plot of the vector field ${vx,vy}$ as a function of $x$ and $y$",
              "source": "@site/docs/frontend/Reference/Plotting/VectorPlot.md",
              "sourceDirName": "frontend/Reference/Plotting",
              "slug": "/frontend/Reference/Plotting/VectorPlot",
              "permalink": "/wljs-docs/frontend/Reference/Plotting/VectorPlot",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "frontMatter": {
                "env": [
                  "Wolfram Kernel"
                ],
                "update": null,
                "needsContainer": null,
                "origin": "https://reference.wolfram.com/language/ref/VectorPlot.html"
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "StreamPlot",
                "permalink": "/wljs-docs/frontend/Reference/Plotting/StreamPlot"
              },
              "next": {
                "title": "VectorPlot3D",
                "permalink": "/wljs-docs/frontend/Reference/Plotting/VectorPlot3D"
              }
            },
            {
              "id": "frontend/Reference/Plotting/VectorPlot3D",
              "title": "VectorPlot3D",
              "description": "Generates a 3D vector plot of the vector field {vx,vy,vz} as a function of $x$, $y$, and $z$",
              "source": "@site/docs/frontend/Reference/Plotting/VectorPlot3D.md",
              "sourceDirName": "frontend/Reference/Plotting",
              "slug": "/frontend/Reference/Plotting/VectorPlot3D",
              "permalink": "/wljs-docs/frontend/Reference/Plotting/VectorPlot3D",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "frontMatter": {
                "env": [
                  "Wolfram Kernel"
                ],
                "update": null,
                "needsContainer": null,
                "origin": "https://reference.wolfram.com/language/ref/VectorPlot3D.html"
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "VectorPlot",
                "permalink": "/wljs-docs/frontend/Reference/Plotting/VectorPlot"
              }
            },
            {
              "id": "frontend/Troubleshooting",
              "title": "Troubleshooting",
              "description": "If something is not working as intended, please, post an issue on a Github with the data evaluated on your Wolfram Kernel, such as",
              "source": "@site/docs/frontend/Troubleshooting.md",
              "sourceDirName": "frontend",
              "slug": "/frontend/Troubleshooting",
              "permalink": "/wljs-docs/frontend/Troubleshooting",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "sidebarPosition": 12,
              "frontMatter": {
                "sidebar_position": 12
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "PDF",
                "permalink": "/wljs-docs/frontend/Export/PDF"
              },
              "next": {
                "title": "Column",
                "permalink": "/wljs-docs/frontend/Reference/Decorations/Column"
              }
            },
            {
              "id": "frontend/Tutorial/Dynamics",
              "title": "Dynamics",
              "description": "The way how dynamics work is quite different compared to Wolfram Mathematica. The key changes were made for the sake of performance and control (or imagination of  @JerryI - maintainer)",
              "source": "@site/docs/frontend/Tutorial/Dynamics.md",
              "sourceDirName": "frontend/Tutorial",
              "slug": "/frontend/Tutorial/Dynamics",
              "permalink": "/wljs-docs/frontend/Tutorial/Dynamics",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "sidebarPosition": 3,
              "frontMatter": {
                "sidebar_position": 3
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "Overview",
                "permalink": "/wljs-docs/frontend/Tutorial/Overview"
              },
              "next": {
                "title": "Input elements",
                "permalink": "/wljs-docs/frontend/Tutorial/Input elements"
              }
            },
            {
              "id": "frontend/Tutorial/Export notebook",
              "title": "Export notebook",
              "description": "Since all magic happens inside the browser using plain Javascript, it is extremely easy to export notebook to a standalone HTML file or even React component to embed it on website (blog).",
              "source": "@site/docs/frontend/Tutorial/Export notebook.md",
              "sourceDirName": "frontend/Tutorial",
              "slug": "/frontend/Tutorial/Export notebook",
              "permalink": "/wljs-docs/frontend/Tutorial/Export notebook",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "sidebarPosition": 9,
              "frontMatter": {
                "sidebar_position": 9
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "Input elements",
                "permalink": "/wljs-docs/frontend/Tutorial/Input elements"
              },
              "next": {
                "title": "Cell types",
                "permalink": "/wljs-docs/category/cell-types"
              }
            },
            {
              "id": "frontend/Tutorial/Input elements",
              "title": "Input elements",
              "description": "Elements are provided by the independent plugin/library wljs-inputs.",
              "source": "@site/docs/frontend/Tutorial/Input elements.md",
              "sourceDirName": "frontend/Tutorial",
              "slug": "/frontend/Tutorial/Input elements",
              "permalink": "/wljs-docs/frontend/Tutorial/Input elements",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "sidebarPosition": 7,
              "frontMatter": {
                "sidebar_position": 7
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "Dynamics",
                "permalink": "/wljs-docs/frontend/Tutorial/Dynamics"
              },
              "next": {
                "title": "Export notebook",
                "permalink": "/wljs-docs/frontend/Tutorial/Export notebook"
              }
            },
            {
              "id": "frontend/Tutorial/Overview",
              "title": "Overview",
              "description": "The whole notebook interface is made using plain Javascript, HTML powered by a Wolfram WebServer  and WLX running locally on a Wolfram Kernel. It means you can work remotely by running a server anywhere you want.",
              "source": "@site/docs/frontend/Tutorial/Overview.md",
              "sourceDirName": "frontend/Tutorial",
              "slug": "/frontend/Tutorial/Overview",
              "permalink": "/wljs-docs/frontend/Tutorial/Overview",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "sidebarPosition": 2,
              "frontMatter": {
                "sidebar_position": 2
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "Tutorials",
                "permalink": "/wljs-docs/category/tutorials"
              },
              "next": {
                "title": "Dynamics",
                "permalink": "/wljs-docs/frontend/Tutorial/Dynamics"
              }
            },
            {
              "id": "imgs/FE data binding.excalidraw 1",
              "title": "FE data binding.excalidraw 1",
              "description": "==⚠  Switch to EXCALIDRAW VIEW in the MORE OPTIONS menu of this document. ⚠==",
              "source": "@site/docs/imgs/FE data binding.excalidraw 1.md",
              "sourceDirName": "imgs",
              "slug": "/imgs/FE data binding.excalidraw 1",
              "permalink": "/wljs-docs/imgs/FE data binding.excalidraw 1",
              "draft": false,
              "unlisted": false,
              "tags": [
                {
                  "label": "excalidraw",
                  "permalink": "/wljs-docs/tags/excalidraw"
                }
              ],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "frontMatter": {
                "excalidraw-plugin": "parsed",
                "tags": [
                  "excalidraw"
                ]
              }
            },
            {
              "id": "imgs/feinput.gif",
              "title": "feinput.gif",
              "description": "",
              "source": "@site/docs/imgs/feinput.gif.md",
              "sourceDirName": "imgs",
              "slug": "/imgs/feinput.gif",
              "permalink": "/wljs-docs/imgs/feinput.gif",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "frontMatter": {}
            },
            {
              "id": "imgs/manipulate-frontend-example.excalidraw",
              "title": "manipulate-frontend-example.excalidraw",
              "description": "==⚠  Switch to EXCALIDRAW VIEW in the MORE OPTIONS menu of this document. ⚠==",
              "source": "@site/docs/imgs/manipulate-frontend-example.excalidraw.md",
              "sourceDirName": "imgs",
              "slug": "/imgs/manipulate-frontend-example.excalidraw",
              "permalink": "/wljs-docs/imgs/manipulate-frontend-example.excalidraw",
              "draft": false,
              "unlisted": false,
              "tags": [
                {
                  "label": "excalidraw",
                  "permalink": "/wljs-docs/tags/excalidraw"
                }
              ],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "frontMatter": {
                "excalidraw-plugin": "parsed",
                "tags": [
                  "excalidraw"
                ]
              }
            },
            {
              "id": "interpreter/Advanced/architecture",
              "title": "Architecture of symbols",
              "description": "Features",
              "source": "@site/docs/interpreter/Advanced/architecture.md",
              "sourceDirName": "interpreter/Advanced",
              "slug": "/interpreter/Advanced/architecture",
              "permalink": "/wljs-docs/interpreter/Advanced/architecture",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "sidebarPosition": 1,
              "frontMatter": {
                "sidebar_position": 1
              }
            },
            {
              "id": "interpreter/Advanced/containers",
              "title": "Containers",
              "description": "The general definition will be",
              "source": "@site/docs/interpreter/Advanced/containers.md",
              "sourceDirName": "interpreter/Advanced",
              "slug": "/interpreter/Advanced/containers",
              "permalink": "/wljs-docs/interpreter/Advanced/containers",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "sidebarPosition": 2,
              "frontMatter": {
                "sidebar_position": 2
              }
            },
            {
              "id": "interpreter/Advanced/meta-markers",
              "title": "Meta markers",
              "description": "You can think about them as a unique property assigned to the expression in order to use selectors on them. Sometimes it comes handy to attach or evaluate new object inside the existing instance",
              "source": "@site/docs/interpreter/Advanced/meta-markers.md",
              "sourceDirName": "interpreter/Advanced",
              "slug": "/interpreter/Advanced/meta-markers",
              "permalink": "/wljs-docs/interpreter/Advanced/meta-markers",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "sidebarPosition": 4,
              "frontMatter": {
                "sidebar_position": 4
              }
            },
            {
              "id": "interpreter/Advanced/symbols",
              "title": "Definitions",
              "description": "Let's make the things clear.",
              "source": "@site/docs/interpreter/Advanced/symbols.md",
              "sourceDirName": "interpreter/Advanced",
              "slug": "/interpreter/Advanced/symbols",
              "permalink": "/wljs-docs/interpreter/Advanced/symbols",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "sidebarPosition": 3,
              "frontMatter": {
                "sidebar_position": 3
              }
            },
            {
              "id": "interpreter/Basics/graphics",
              "title": "Working with graphics",
              "description": "Easy animations",
              "source": "@site/docs/interpreter/Basics/graphics.md",
              "sourceDirName": "interpreter/Basics",
              "slug": "/interpreter/Basics/graphics",
              "permalink": "/wljs-docs/interpreter/Basics/graphics",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "sidebarPosition": 4,
              "frontMatter": {
                "sidebar_position": 4
              }
            },
            {
              "id": "interpreter/Basics/js-access",
              "title": "Javascript integration",
              "description": "For deep overview of functions, containers and advanced control of evaluation process, please, see pages symbols and containers",
              "source": "@site/docs/interpreter/Basics/js-access.md",
              "sourceDirName": "interpreter/Basics",
              "slug": "/interpreter/Basics/js-access",
              "permalink": "/wljs-docs/interpreter/Basics/js-access",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "sidebarPosition": 3,
              "frontMatter": {
                "sidebar_position": 3
              }
            },
            {
              "id": "interpreter/Basics/scripts",
              "title": "Symbols and expressions",
              "description": "It is assumed, you have wljs-graphics-d3 (see Libraries @ syntax) library included in your page. Most examples depend on it.",
              "source": "@site/docs/interpreter/Basics/scripts.md",
              "sourceDirName": "interpreter/Basics",
              "slug": "/interpreter/Basics/scripts",
              "permalink": "/wljs-docs/interpreter/Basics/scripts",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "sidebarPosition": 2,
              "frontMatter": {
                "sidebar_position": 2
              }
            },
            {
              "id": "interpreter/Basics/syntax",
              "title": "Syntax",
              "description": "For the simplicity it is better to use wolframscript or Mathematica to transpile the source code to JSONExpression format using ExportString command.",
              "source": "@site/docs/interpreter/Basics/syntax.md",
              "sourceDirName": "interpreter/Basics",
              "slug": "/interpreter/Basics/syntax",
              "permalink": "/wljs-docs/interpreter/Basics/syntax",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "sidebarPosition": 1,
              "frontMatter": {
                "sidebar_position": 1
              }
            },
            {
              "id": "interpreter/Extras/implementation",
              "title": "How it works",
              "description": "The idea",
              "source": "@site/docs/interpreter/Extras/implementation.md",
              "sourceDirName": "interpreter/Extras",
              "slug": "/interpreter/Extras/implementation",
              "permalink": "/wljs-docs/interpreter/Extras/implementation",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "sidebarPosition": 1,
              "frontMatter": {
                "sidebar_position": 1
              }
            },
            {
              "id": "interpreter/Extras/reference",
              "title": "Reference",
              "description": "Please see interpretate and other pages there",
              "source": "@site/docs/interpreter/Extras/reference.md",
              "sourceDirName": "interpreter/Extras",
              "slug": "/interpreter/Extras/reference",
              "permalink": "/wljs-docs/interpreter/Extras/reference",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "sidebarPosition": 2,
              "frontMatter": {
                "sidebar_position": 2
              }
            },
            {
              "id": "interpreter/intro",
              "title": "",
              "description": "Minimal Wolfram Language Interpreter",
              "source": "@site/docs/interpreter/intro.md",
              "sourceDirName": "interpreter",
              "slug": "/interpreter/intro",
              "permalink": "/wljs-docs/interpreter/intro",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "sidebarPosition": 1,
              "frontMatter": {
                "sidebar_position": 1,
                "title": ""
              }
            },
            {
              "id": "Reference/Misc/Promise",
              "title": "Promise",
              "description": "",
              "source": "@site/docs/Reference/Misc/Promise.md",
              "sourceDirName": "Reference/Misc",
              "slug": "/Reference/Misc/Promise",
              "permalink": "/wljs-docs/Reference/Misc/Promise",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "lastUpdatedAt": 1539502055,
              "formattedLastUpdatedAt": "Oct 14, 2018",
              "frontMatter": {}
            }
          ],
          "drafts": [],
          "sidebars": {
            "tutorialSidebar": [
              {
                "type": "doc",
                "id": "frontend/instruction",
                "className": "green"
              },
              {
                "type": "category",
                "label": "Tutorials",
                "collapsible": true,
                "collapsed": true,
                "items": [
                  {
                    "type": "doc",
                    "id": "frontend/Tutorial/Overview"
                  },
                  {
                    "type": "doc",
                    "id": "frontend/Tutorial/Dynamics"
                  },
                  {
                    "type": "doc",
                    "id": "frontend/Tutorial/Input elements"
                  },
                  {
                    "type": "doc",
                    "id": "frontend/Tutorial/Export notebook"
                  }
                ],
                "link": {
                  "type": "generated-index",
                  "slug": "/category/tutorials",
                  "permalink": "/wljs-docs/category/tutorials"
                }
              },
              {
                "type": "category",
                "label": "Cell types",
                "collapsible": true,
                "collapsed": true,
                "items": [
                  {
                    "type": "doc",
                    "id": "frontend/Cell types/Wolfram Language"
                  },
                  {
                    "type": "doc",
                    "id": "frontend/Cell types/Markdown"
                  },
                  {
                    "type": "doc",
                    "id": "frontend/Cell types/HTML"
                  },
                  {
                    "type": "doc",
                    "id": "frontend/Cell types/Javascript"
                  },
                  {
                    "type": "doc",
                    "id": "frontend/Cell types/Files"
                  },
                  {
                    "type": "doc",
                    "id": "frontend/Cell types/Many more..."
                  },
                  {
                    "type": "doc",
                    "id": "frontend/Cell types/Slides"
                  },
                  {
                    "type": "doc",
                    "id": "frontend/Cell types/WLX"
                  }
                ],
                "link": {
                  "type": "generated-index",
                  "slug": "/category/cell-types",
                  "permalink": "/wljs-docs/category/cell-types"
                }
              },
              {
                "type": "doc",
                "id": "frontend/Expressions representation"
              },
              {
                "type": "category",
                "label": "Advanced",
                "collapsible": true,
                "collapsed": true,
                "items": [
                  {
                    "type": "category",
                    "label": "Boxes and Decorations",
                    "collapsible": true,
                    "collapsed": true,
                    "items": [
                      {
                        "type": "doc",
                        "id": "frontend/Advanced/Boxes and Decorations/dynamic-decorations"
                      }
                    ]
                  },
                  {
                    "type": "category",
                    "label": "Dynamics",
                    "collapsible": true,
                    "collapsed": true,
                    "items": [
                      {
                        "type": "doc",
                        "id": "frontend/Advanced/Dynamics/Simple manipulate"
                      },
                      {
                        "type": "doc",
                        "id": "frontend/Advanced/Dynamics/Indicators and monitoring"
                      },
                      {
                        "type": "doc",
                        "id": "frontend/Advanced/Dynamics/Performance tips"
                      },
                      {
                        "type": "doc",
                        "id": "frontend/Advanced/Dynamics/Scoping"
                      }
                    ]
                  },
                  {
                    "type": "doc",
                    "id": "frontend/Advanced/Editor manipulation"
                  },
                  {
                    "type": "category",
                    "label": "Events system",
                    "collapsible": true,
                    "collapsed": true,
                    "items": [
                      {
                        "type": "doc",
                        "id": "frontend/Advanced/Events system/event-generators"
                      },
                      {
                        "type": "doc",
                        "id": "frontend/Advanced/Events system/promises"
                      },
                      {
                        "type": "doc",
                        "id": "frontend/Advanced/Events system/routing"
                      }
                    ]
                  },
                  {
                    "type": "category",
                    "label": "Frontend interpretation",
                    "collapsible": true,
                    "collapsed": true,
                    "items": [
                      {
                        "type": "doc",
                        "id": "frontend/Advanced/Frontend interpretation/executables"
                      },
                      {
                        "type": "doc",
                        "id": "frontend/Advanced/Frontend interpretation/Frontend functions"
                      }
                    ]
                  },
                  {
                    "type": "category",
                    "label": "JS Tools",
                    "collapsible": true,
                    "collapsed": true,
                    "items": [
                      {
                        "type": "doc",
                        "id": "frontend/Advanced/JS Tools/Canvas"
                      }
                    ]
                  },
                  {
                    "type": "category",
                    "label": "Slides",
                    "collapsible": true,
                    "collapsed": true,
                    "items": [
                      {
                        "type": "doc",
                        "id": "frontend/Advanced/Slides/intro"
                      },
                      {
                        "type": "doc",
                        "id": "frontend/Advanced/Slides/embed-wl"
                      },
                      {
                        "type": "doc",
                        "id": "frontend/Advanced/Slides/animations"
                      },
                      {
                        "type": "doc",
                        "id": "frontend/Advanced/Slides/components"
                      },
                      {
                        "type": "doc",
                        "id": "frontend/Advanced/Slides/styling"
                      },
                      {
                        "type": "doc",
                        "id": "frontend/Advanced/Slides/tables"
                      }
                    ]
                  }
                ],
                "link": {
                  "type": "generated-index",
                  "description": "Deep dive into how to extend frontend features and gain maximum flexibility and performance.",
                  "slug": "/category/advanced",
                  "permalink": "/wljs-docs/category/advanced"
                }
              },
              {
                "type": "category",
                "label": "Exporting formats",
                "collapsible": true,
                "collapsed": true,
                "items": [
                  {
                    "type": "doc",
                    "id": "frontend/Export/HTML file"
                  },
                  {
                    "type": "doc",
                    "id": "frontend/Export/PDF"
                  }
                ],
                "link": {
                  "type": "generated-index",
                  "slug": "/category/exporting-formats",
                  "permalink": "/wljs-docs/category/exporting-formats"
                }
              },
              {
                "type": "doc",
                "id": "frontend/Troubleshooting"
              },
              {
                "type": "category",
                "label": "Reference",
                "collapsible": true,
                "collapsed": true,
                "items": [
                  {
                    "type": "category",
                    "label": "Decorations",
                    "collapsible": true,
                    "collapsed": true,
                    "items": [
                      {
                        "type": "doc",
                        "id": "frontend/Reference/Decorations/Column"
                      },
                      {
                        "type": "doc",
                        "id": "frontend/Reference/Decorations/Framed"
                      },
                      {
                        "type": "doc",
                        "id": "frontend/Reference/Decorations/Grid"
                      },
                      {
                        "type": "doc",
                        "id": "frontend/Reference/Decorations/HTMLForm"
                      },
                      {
                        "type": "doc",
                        "id": "frontend/Reference/Decorations/InputForm"
                      },
                      {
                        "type": "doc",
                        "id": "frontend/Reference/Decorations/Interpretation"
                      },
                      {
                        "type": "doc",
                        "id": "frontend/Reference/Decorations/InterpretationBox"
                      },
                      {
                        "type": "category",
                        "label": "Low level",
                        "collapsible": true,
                        "collapsed": true,
                        "items": [
                          {
                            "type": "doc",
                            "id": "frontend/Reference/Decorations/Low level/BoxBox"
                          },
                          {
                            "type": "doc",
                            "id": "frontend/Reference/Decorations/Low level/ViewBox"
                          }
                        ]
                      },
                      {
                        "type": "doc",
                        "id": "frontend/Reference/Decorations/MakeBoxes"
                      },
                      {
                        "type": "doc",
                        "id": "frontend/Reference/Decorations/MatrixForm"
                      },
                      {
                        "type": "doc",
                        "id": "frontend/Reference/Decorations/Row"
                      },
                      {
                        "type": "doc",
                        "id": "frontend/Reference/Decorations/SVGForm"
                      },
                      {
                        "type": "doc",
                        "id": "frontend/Reference/Decorations/Style"
                      },
                      {
                        "type": "doc",
                        "id": "frontend/Reference/Decorations/TableForm"
                      }
                    ]
                  },
                  {
                    "type": "category",
                    "label": "Dynamics",
                    "collapsible": true,
                    "collapsed": true,
                    "items": [
                      {
                        "type": "doc",
                        "id": "frontend/Reference/Dynamics/CreateFrontEndObject"
                      },
                      {
                        "type": "doc",
                        "id": "frontend/Reference/Dynamics/Dynamic"
                      },
                      {
                        "type": "doc",
                        "id": "frontend/Reference/Dynamics/DynamicModule"
                      },
                      {
                        "type": "doc",
                        "id": "frontend/Reference/Dynamics/FrontEndVirtual"
                      },
                      {
                        "type": "category",
                        "label": "Internals",
                        "collapsible": true,
                        "collapsed": true,
                        "items": [
                          {
                            "type": "doc",
                            "id": "frontend/Reference/Dynamics/Internals/FrontEndExecutable"
                          },
                          {
                            "type": "doc",
                            "id": "frontend/Reference/Dynamics/Internals/FrontEndExecutableInline"
                          },
                          {
                            "type": "doc",
                            "id": "frontend/Reference/Dynamics/Internals/FrontEndOnly"
                          },
                          {
                            "type": "doc",
                            "id": "frontend/Reference/Dynamics/Internals/FrontEndRef"
                          }
                        ]
                      },
                      {
                        "type": "doc",
                        "id": "frontend/Reference/Dynamics/Manipulate"
                      },
                      {
                        "type": "doc",
                        "id": "frontend/Reference/Dynamics/Offload"
                      }
                    ]
                  },
                  {
                    "type": "category",
                    "label": "Graphics",
                    "collapsible": true,
                    "collapsed": true,
                    "items": [
                      {
                        "type": "doc",
                        "id": "frontend/Reference/Graphics/AbsoluteThickness"
                      },
                      {
                        "type": "doc",
                        "id": "frontend/Reference/Graphics/Arrow"
                      },
                      {
                        "type": "doc",
                        "id": "frontend/Reference/Graphics/Circle"
                      },
                      {
                        "type": "doc",
                        "id": "frontend/Reference/Graphics/Directive"
                      },
                      {
                        "type": "doc",
                        "id": "frontend/Reference/Graphics/Disk"
                      },
                      {
                        "type": "doc",
                        "id": "frontend/Reference/Graphics/GraphicsComplex"
                      },
                      {
                        "type": "doc",
                        "id": "frontend/Reference/Graphics/Image"
                      },
                      {
                        "type": "doc",
                        "id": "frontend/Reference/Graphics/Inset"
                      },
                      {
                        "type": "category",
                        "label": "Internal",
                        "collapsible": true,
                        "collapsed": true,
                        "items": [
                          {
                            "type": "doc",
                            "id": "frontend/Reference/Graphics/Internal/EventListener"
                          }
                        ]
                      },
                      {
                        "type": "doc",
                        "id": "frontend/Reference/Graphics/Line"
                      },
                      {
                        "type": "doc",
                        "id": "frontend/Reference/Graphics/Offset"
                      },
                      {
                        "type": "doc",
                        "id": "frontend/Reference/Graphics/Point"
                      },
                      {
                        "type": "doc",
                        "id": "frontend/Reference/Graphics/Polygon"
                      },
                      {
                        "type": "doc",
                        "id": "frontend/Reference/Graphics/Raster"
                      },
                      {
                        "type": "doc",
                        "id": "frontend/Reference/Graphics/Rectangle"
                      },
                      {
                        "type": "doc",
                        "id": "frontend/Reference/Graphics/Rotate"
                      },
                      {
                        "type": "doc",
                        "id": "frontend/Reference/Graphics/SVGAttribute"
                      },
                      {
                        "type": "doc",
                        "id": "frontend/Reference/Graphics/Show"
                      },
                      {
                        "type": "doc",
                        "id": "frontend/Reference/Graphics/Style"
                      },
                      {
                        "type": "doc",
                        "id": "frontend/Reference/Graphics/Text"
                      },
                      {
                        "type": "doc",
                        "id": "frontend/Reference/Graphics/Translate"
                      }
                    ],
                    "link": {
                      "type": "doc",
                      "id": "frontend/Reference/Graphics/Graphics"
                    }
                  },
                  {
                    "type": "category",
                    "label": "Graphics3D",
                    "collapsible": true,
                    "collapsed": true,
                    "items": [
                      {
                        "type": "doc",
                        "id": "frontend/Reference/Graphics3D/Cuboid"
                      },
                      {
                        "type": "doc",
                        "id": "frontend/Reference/Graphics3D/EventListener"
                      },
                      {
                        "type": "doc",
                        "id": "frontend/Reference/Graphics3D/Sphere"
                      },
                      {
                        "type": "doc",
                        "id": "frontend/Reference/Graphics3D/SpotLight"
                      }
                    ],
                    "link": {
                      "type": "doc",
                      "id": "frontend/Reference/Graphics3D/Graphics3D"
                    }
                  },
                  {
                    "type": "category",
                    "label": "Inputs",
                    "collapsible": true,
                    "collapsed": true,
                    "items": [
                      {
                        "type": "doc",
                        "id": "frontend/Reference/Inputs/EditorView"
                      },
                      {
                        "type": "doc",
                        "id": "frontend/Reference/Inputs/InputButton"
                      },
                      {
                        "type": "doc",
                        "id": "frontend/Reference/Inputs/InputFile"
                      },
                      {
                        "type": "doc",
                        "id": "frontend/Reference/Inputs/InputGroup"
                      },
                      {
                        "type": "doc",
                        "id": "frontend/Reference/Inputs/InputRange"
                      },
                      {
                        "type": "doc",
                        "id": "frontend/Reference/Inputs/InputTable"
                      },
                      {
                        "type": "doc",
                        "id": "frontend/Reference/Inputs/InputText"
                      },
                      {
                        "type": "doc",
                        "id": "frontend/Reference/Inputs/Slider"
                      },
                      {
                        "type": "doc",
                        "id": "frontend/Reference/Inputs/TextView"
                      }
                    ]
                  },
                  {
                    "type": "category",
                    "label": "Misc",
                    "collapsible": true,
                    "collapsed": true,
                    "items": [
                      {
                        "type": "doc",
                        "id": "frontend/Reference/Misc/Async"
                      },
                      {
                        "type": "doc",
                        "id": "frontend/Reference/Misc/Events"
                      },
                      {
                        "type": "doc",
                        "id": "frontend/Reference/Misc/Language"
                      },
                      {
                        "type": "doc",
                        "id": "frontend/Reference/Misc/Promise"
                      }
                    ]
                  },
                  {
                    "type": "category",
                    "label": "Plotting",
                    "collapsible": true,
                    "collapsed": true,
                    "items": [
                      {
                        "type": "doc",
                        "id": "frontend/Reference/Plotting/ArrayPlot"
                      },
                      {
                        "type": "doc",
                        "id": "frontend/Reference/Plotting/BarChart"
                      },
                      {
                        "type": "doc",
                        "id": "frontend/Reference/Plotting/BubbleChart"
                      },
                      {
                        "type": "doc",
                        "id": "frontend/Reference/Plotting/ContourPlot"
                      },
                      {
                        "type": "doc",
                        "id": "frontend/Reference/Plotting/DensityPlot"
                      },
                      {
                        "type": "doc",
                        "id": "frontend/Reference/Plotting/ListContourPlot"
                      },
                      {
                        "type": "doc",
                        "id": "frontend/Reference/Plotting/ListCurvePathPlot"
                      },
                      {
                        "type": "doc",
                        "id": "frontend/Reference/Plotting/ListLinePlot"
                      },
                      {
                        "type": "doc",
                        "id": "frontend/Reference/Plotting/ListLinePlotly"
                      },
                      {
                        "type": "doc",
                        "id": "frontend/Reference/Plotting/ListStepPlot"
                      },
                      {
                        "type": "doc",
                        "id": "frontend/Reference/Plotting/ListVectorPlot"
                      },
                      {
                        "type": "doc",
                        "id": "frontend/Reference/Plotting/MatrixPlot"
                      },
                      {
                        "type": "doc",
                        "id": "frontend/Reference/Plotting/Plot"
                      },
                      {
                        "type": "doc",
                        "id": "frontend/Reference/Plotting/Plotly"
                      },
                      {
                        "type": "doc",
                        "id": "frontend/Reference/Plotting/RandomImage"
                      },
                      {
                        "type": "doc",
                        "id": "frontend/Reference/Plotting/StackedListPlot"
                      },
                      {
                        "type": "doc",
                        "id": "frontend/Reference/Plotting/StreamPlot"
                      },
                      {
                        "type": "doc",
                        "id": "frontend/Reference/Plotting/VectorPlot"
                      },
                      {
                        "type": "doc",
                        "id": "frontend/Reference/Plotting/VectorPlot3D"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        }
      ]
    }
  },
  "docusaurus-plugin-content-blog": {
    "default": {
      "blogSidebarTitle": "Recent posts",
      "blogPosts": [
        {
          "id": "esm-into",
          "metadata": {
            "permalink": "/wljs-docs/blog/esm-into",
            "source": "@site/blog/2023-10-10-esm/index.md",
            "title": "Introducing ESM Javascript cells | Poking Nintendo Pro",
            "description": "Have only plain JS cell types is still not enough, when it comes to import anything from NPM repository or your local files. Many sandboxes, such as Codepen, RunJS, ReplIT has this option to use NodeJS in the browser. Why don't we have this feature as well?",
            "date": "2023-10-10T00:00:00.000Z",
            "formattedDate": "October 10, 2023",
            "tags": [],
            "readingTime": 2.77,
            "hasTruncateMarker": true,
            "authors": [
              {
                "name": "Kirill Vasin",
                "title": "Maintainer",
                "url": "https://github.com/JerryI",
                "imageURL": "https://avatars.githubusercontent.com/u/4111822?s=48&v=4",
                "key": "jerryi"
              }
            ],
            "frontMatter": {
              "slug": "esm-into",
              "title": "Introducing ESM Javascript cells | Poking Nintendo Pro",
              "authors": "jerryi",
              "enableComments": true
            },
            "unlisted": false,
            "nextItem": {
              "title": "Introducing snippets",
              "permalink": "/wljs-docs/blog/int-snippets"
            }
          },
          "content": "Have only plain JS cell types is still not enough, when it comes to `import` anything from NPM repository or your local files. Many sandboxes, such as Codepen, RunJS, ReplIT has this option to use NodeJS in the browser. Why don't we have this feature as well?\n\n[__wljs-esm-support__](https://github.com/JerryI/wljs-esm-support) plugin\n\n<!--truncate-->\n## Bundling on-fly\nThe idea is, you have `node` installed on your system and Wolfram Kernel runs an external process\n\n```mathematica\nRunProcess[{\"node\", ...}, Stdin]\n```\n\nusing some bundler, that support `stdin` method to process the file data instead of actual file. The only one I found is ESBuild. In principle, then, one can feed the content of any cell to it and get the data back to the output cell as a bundled JS file.\n\n## Helper functions\nIt would be nice to have a simple interface to interact with Node, therefore, I created a special object for that\n\n```mathematica\nNPM[\"name-of-a-package\"] // Install \n```\nwhich will install locally to the vault folder a module from npm repository. \n\n## Example\nLet us try the simples possible example. For instance you found a nice package for making fireworks inside your notebook [js-confetti](https://www.npmjs.com/package/js-confetti)\n\nThen you type\n```mathematica\nNPM[\"js-confetti\"] // Install\n```\n\nAnd finally our `.esm` cell\n```js\n.esm\n\nimport JSConfetti from 'js-confetti'\nconst jsConfetti = new JSConfetti()\njsConfetti.addConfetti();\n\nconst re = document.createElement('span');\nre.innerText = \"everything is fine!\";\n\nthis.onreturn = () => {\n  return re;\n}\n```\n\nWhen you evaluate it, it compiles JS file and embeds the result to the output cell.\n\n## Nintendo Pro controller & Wolfram Engine\nThis is rather much funnier example. It is known fact, any JS app can interact with gamepads, controllers connected via USB or Bluetooth channel. \n\nWhy not use it to communicate to Wolfram Kernel? 😵‍💫\nThe overhead from translating the signals OS $\\rightarrow$ V8 engine seems to be minimal.\n\n### Reading signals\n\n```mathematica\nNPM[\"switch-pro\"] // Install \n```\n\n```js\n.esm\nimport SwitchPro from 'switch-pro'\n\nconst switchPro = new SwitchPro(window)\n\nswitchPro.addListener((pressed) => {\n  server.emitt('joy', `\"${JSON.stringify(pressed).replaceAll(/\"/g, \"'\")}\"`);\n});\n\ncore.Rumble = async () => {\n  switchPro.vibrate();\n}\n\n```\n\nThis is super easy, we just redirect all events to WL kernel as JSON string with some minor changes in order to escape double quotes.\n\n:::note\nA library `switch-pro` automatically discovers Pro controller and connects to it. No actions are needed.\n:::\n\nThe last line `Rumble` is to \"vibrate\" our controller just for fun. We will use it later.\n\n### Handling signals\n\n```mathematica\nEventHandler[\"joy\", handler];\n```\n\nNow we attached an event-handler to the events from Nintendo controller. Let us decrypt JSON and send it to some plot\n\n```mathematica\npoint =  {0,0};\nhandler = Function[cmd,\n  Module[{assoc = ImportString[StringReplace[cmd, \"'\"->\"\\\"\"], \"JSON\"] // Association, p = point},\n    If[KeyExistsQ[assoc, \"RS-DOWN\"], p = {p[[1]], -assoc[\"RS-DOWN\"]}];\n    If[KeyExistsQ[assoc, \"RS-UP\"], p = {p[[1]], assoc[\"RS-UP\"]}];\n    If[KeyExistsQ[assoc, \"RS-LEFT\"], p = {-assoc[\"RS-LEFT\"], p[[2]]}];\n    If[KeyExistsQ[assoc, \"RS-RIGHT\"], p = {assoc[\"RS-RIGHT\"], p[[2]]}]; \n\n    If[Length[Keys[assoc]] == 0, p = {0,0}];\n\n    point = p;\n  ]\n];\n\nGraphics[{Red, PointSize[0.1], Point[point // Offload]}, TransitionDuration->50, TransitionType->\"Linear\"]\n```\n\nThis code looks a bit sketchy, the decoding could be done in a much more efficient manner.\nDo not forget about rumbling! But this is no-brainer\n\n```mathematica\nEventHandler[InputButton[\"Rumble\"], Function[Null, FrontSubmit[Rumble[]]]] \n```\n\nThe result you can see in the video\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/qhG6PV4NZeA?si=a4wuC7KGR25FZo6I\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen></iframe>\n\nYou can download the notebook using the link in the bottom\n- [__NintendoPro__](NintendoPro.wln)"
        },
        {
          "id": "int-snippets",
          "metadata": {
            "permalink": "/wljs-docs/blog/int-snippets",
            "source": "@site/blog/2023-09-10-snippets/index.md",
            "title": "Introducing snippets",
            "description": "",
            "date": "2023-09-10T00:00:00.000Z",
            "formattedDate": "September 10, 2023",
            "tags": [],
            "readingTime": 0,
            "hasTruncateMarker": false,
            "authors": [
              {
                "name": "Kirill Vasin",
                "title": "Maintainer",
                "url": "https://github.com/JerryI",
                "imageURL": "https://avatars.githubusercontent.com/u/4111822?s=48&v=4",
                "key": "jerryi"
              }
            ],
            "frontMatter": {
              "slug": "int-snippets",
              "authors": "jerryi",
              "title": "Introducing snippets",
              "draft": true
            },
            "unlisted": false,
            "prevItem": {
              "title": "Introducing ESM Javascript cells | Poking Nintendo Pro",
              "permalink": "/wljs-docs/blog/esm-into"
            },
            "nextItem": {
              "title": "Mixing visual tools and code | Magic of Frontend Objects",
              "permalink": "/wljs-docs/blog/feobjects-example"
            }
          },
          "content": ""
        },
        {
          "id": "feobjects-example",
          "metadata": {
            "permalink": "/wljs-docs/blog/feobjects-example",
            "source": "@site/blog/2023-08-31-helpers-createfrontendobject/index.md",
            "title": "Mixing visual tools and code | Magic of Frontend Objects",
            "description": "Have you ever have spent minutes or even hours trying to find a proper position of an element by changing the value in a code iteration by iteration?",
            "date": "2023-08-31T00:00:00.000Z",
            "formattedDate": "August 31, 2023",
            "tags": [
              {
                "label": "frontend",
                "permalink": "/wljs-docs/blog/tags/frontend"
              },
              {
                "label": "dynamics",
                "permalink": "/wljs-docs/blog/tags/dynamics"
              }
            ],
            "readingTime": 4.63,
            "hasTruncateMarker": true,
            "authors": [
              {
                "name": "Kirill Vasin",
                "title": "Maintainer",
                "url": "https://github.com/JerryI",
                "imageURL": "https://avatars.githubusercontent.com/u/4111822?s=48&v=4",
                "key": "jerryi"
              }
            ],
            "frontMatter": {
              "slug": "feobjects-example",
              "title": "Mixing visual tools and code | Magic of Frontend Objects",
              "authors": "jerryi",
              "tags": [
                "frontend",
                "dynamics"
              ],
              "enableComments": true,
              "draft": true
            },
            "unlisted": false,
            "prevItem": {
              "title": "Introducing snippets",
              "permalink": "/wljs-docs/blog/int-snippets"
            },
            "nextItem": {
              "title": "Introducing Projector! Output to a separate window",
              "permalink": "/wljs-docs/blog/projector-intro"
            }
          },
          "content": "Have you ever have spent minutes or even hours trying to find a proper position of an element by changing the value in a code iteration by iteration?\n\nThere is a way of making a compromise between visual and code editing by injecting the first one into the last. Let's call it __in-code visual editing__ \n\n![](ezgif.com-optimize-14.gif)\n\n<!--truncate-->\n\nOr in a bit simpler cases\n\n![](ezgif.com-optimize.gif)\n\n\nHere above is two examples of such thing created using Dynamics and tricks with `FrontEndObjects`. The idea is\n1. Evaluate in-place a special function with initial coordinates placed at the position of an argument needed to be adjusted visually (`Text[.., pos]`, `Rectangle[pos1, ...]` ane etc)\n2. Place a dynamic field into an input cell, that shown the current position.\n3. On-evaluate the dynamic field must be replaced with `Offload` expression, that contains a sort of a gizmo for user's mouse and a dynamically generated variable linked to the dynamic field shown in the input cell\n\nSounds complicated. Let's tear it down\n\n### Dynamic field\nThis is easy to do it as a separate thing\n\n```mathematica\nvar = {0,0} // ToString;\nTextView[var // Offload] // CreateFrontEndObject\n```\n\nthen, if one change a variable `var` it will be updated dynamically\n```mathematica\nvar = {1.0, 0} // ToString;\n```\n\nHere, as a maintainer (@JerryI) I would suggest a component apparoach and scope our dynamic variables using `Module` or more controllable version that leaks on purpose `LeakyModule`\n\n```mathematica\nhandler[var_] := With[{},\n\tvar = RandomReal[{-1,1}, 2] // ToString;\n\tcontroller /: Set[controller[], data_] := var = data // ToString; \n]\nSetAttribute[handler, HoldFirst];\n\nLeakyModule[{var},\n\thandler[var];\n\tTextView[var // Offload] // CreateFrontEndObject \n]\n```\n\nand then, one can *control* it via\n\n```mathematica\ncontroller[] = RandomReal[{-1,1}, 2];\n```\n\n___Just an idea___...\n\n### A Gizmo\nHow to add a gizmo to a `Graphics` object and allow user to control it? We need only two expressions `EventHandler` and graphics object itself that will represent a gizmo graphically, i.e.\n\n```mathematica\ngizmo[var_, text_] := With[{v = var // Evaluate},\n\t{\n\t\tPointSize[0.05], Red, \n\t\tEventHandler[\n\t\t\tPoint[v], \n\t\t\t{\n\t\t\t\t\"drag\"->Function[xy, var = xy; text = xy // ToString]\n\t\t\t}\n\t\t]\n\t}\n]\n\nSetAttributes[gizmo, HoldAll]\n```\n\n### Combining together\nNow let us combine a dynamic variable together with a gizmo\n#### OBJECT component\nIn general for the original expression, to which we provide an interactive input, one need to do something like this\n\n```mathematica\ngizmo[variable, text]; Offload[variable]\n```\nRight? Ok, now in the context\n\n```mathematica\nText[\n\t\"Hello World!\",\n\t(* our placeholder *)\n\tgizmo[variable, text]; Offload[variable]\n\t(* end of our placeholder *)\n]\n```\n\nKinda...\n\nOne need to make sure, that the result of `gizmo` will be evaluated somewhere inside our `Graphics` canvas on frontend's side (aka WLJS) and at the same time only `variable` must appear to be a returned result\n\n```mathematica\nText[\n\t\"Hello World!\",\n\t(* our placeholder *)\n\tWith[{g = gizmo[variable, text]},\n\t\tOffload[g; variable]\n\t]\n\t(* end of our placeholder *)\n]\n```\n\nAnd then, to prevent unwanted dynamic updates on `gizmo`, use\n\n```mathematica\nText[\n\t\"Hello World!\",\n\t(* our placeholder *)\n\tWith[{g = gizmo[variable, text]},\n\t\tOffload[Static[g]; variable]\n\t]\n\t(* end of our placeholder *)\n]\n```\n\n:::tip\nTo prevent `update` method to be called on some expressions on the frontend (WLJS), use `Static` wrapper on them.\n:::\n\nThe last step is to scope the dynamic variable\n\n```mathematica\nText[\n\t\"Hello World!\",\n\tLeakyModule[{variable = {0,0}, text = \"\"},\n\t\t(* our placeholder *)\n\t\tWith[{g = gizmo[variable, text]},\n\t\t\tOffload[Static[g]; variable]\n\t\t]\n\t\t(* end of our placeholder *)\n\t]\n]\n```\n\n#### View component with OBJECT component\nNow we need to combine it with [Dynamic field](#Dynamic%20field) somehow, i.e.\n\n```mathematica\nText[\n\t\"Hello World!\",\n\tLeakyModule[{variable = {0,0}, text = \"\"},\n\t\t(* VIEW: our placeholder *)\n\t\tTextView[text // Offload] // CreateFrontEndObject\n\t\t(* VIEW: end of our placeholder *)\n\n\t\t---\n\n\t\t(* OBJECT: our placeholder *)\n\t\tWith[{g = gizmo[variable, text]},\n\t\t\tOffload[Static[g]; variable]\n\t\t]\n\t\t(* OBJECT: end of our placeholder *)\n\t]\n]\n```\n\nThis mean, we would have to sublimate the *view* part with an *object* part, when the expression was under evaluation. This is possible, and see how\n\n> This must be included into DOCS for sure\n\n### Different copies of `FrontEndExecutable`\nEach time you evaluate `Graphics` or whatever frontend object, it creates two copies of its representation: one is stored on frontend kernel (master Wolfram Kernel), which is shared with a browser (WLJS), while there is other *private* copy of it on the secondary Wolfram Kernel.\n\nWhen Wolfram Kernel encounters a `FrontEndExecutable` during the evaluation, it uses (if available) its private copy, and if not it downloads the shared one into the private storage. The trick we going to do is __to provide different copies of the same object__, which are populated via the content of *view* and *object* respectively\n\n```mathematica\nMagic := With[{uid = CreateUUID[]},\n\tWith[{o = CreateFrontEndObject[TextView[\"Hello World\"], uid]},\n\t\t(* a trick to sublimate a private copy *)\n\t\tCreateFrontEndObject[\"Cucumbers\", uid, \"Type\"->\"Private\"];\n\t\to\n\t]\n]\n```\n\nTry this example\n```mathematica\nMagic\n```\nevaluate in place and, then, evaluate the result as a cell.\n\n\n### Final combo\nTaking everything into account, one can finally make it work\n\n```mathematica\ngizmo[var_, text_] := With[{v = var // Evaluate},\n\t{\n\t\tPointSize[0.05], Red, \n\t\tEventHandler[\n\t\t\tPoint[v], \n\t\t\t{\n\t\t\t\t\"drag\"->Function[xy, var = xy; text = xy // ToString]\n\t\t\t}\n\t\t]\n\t}\n]\n\nSetAttributes[gizmo, HoldAll]\n\nPointerAssist[init_:{0,0}] := With[{uid = CreateUUID[]},\n\tLeakyModule[{variable = {0,0}, text = \"{0,0}\"},\n\t\tWith[{fe = CreateFrontEndObject[TextView[text // Offload], uid]},\n\n    \t\t(* private *)\n    \t\tCreateFrontEndObject[With[{g = gizmo[variable, text]},\n    \t\t\tOffload[Static[g]; variable]\n    \t\t], uid, \"Type\"->\"Private\"];\n\n            (* public *)\n            fe\n        ]\n\t]\n]\n```\n\nThen let us apply it on our earlier example\n\n```mathematica\nGraphics[{Text[\"Hello World!\", PointerAssist[{0,0}] ]  }]\n```\n\n![](ezgif.com-video-to-gif.gif)\n\nThanks for reading. See you next time!"
        },
        {
          "id": "projector-intro",
          "metadata": {
            "permalink": "/wljs-docs/blog/projector-intro",
            "source": "@site/blog/2023-08-22-projector/index.md",
            "title": "Introducing Projector! Output to a separate window",
            "description": "I was always wondering on how to replicate the experience from the massive software like Origin Lab, Igor64, which has more traditional way of working with data - using windows.  Being limited to a cell in the notebooks is a big limitation, well...",
            "date": "2023-08-22T00:00:00.000Z",
            "formattedDate": "August 22, 2023",
            "tags": [
              {
                "label": "frontend",
                "permalink": "/wljs-docs/blog/tags/frontend"
              }
            ],
            "readingTime": 0.99,
            "hasTruncateMarker": true,
            "authors": [
              {
                "name": "Kirill Vasin",
                "title": "Maintainer",
                "url": "https://github.com/JerryI",
                "imageURL": "https://avatars.githubusercontent.com/u/4111822?s=48&v=4",
                "key": "jerryi"
              }
            ],
            "frontMatter": {
              "slug": "projector-intro",
              "title": "Introducing Projector! Output to a separate window",
              "authors": "jerryi",
              "tags": [
                "frontend"
              ],
              "enableComments": true,
              "draft": false
            },
            "unlisted": false,
            "prevItem": {
              "title": "Mixing visual tools and code | Magic of Frontend Objects",
              "permalink": "/wljs-docs/blog/feobjects-example"
            },
            "nextItem": {
              "title": "Image and Raster were implemented!",
              "permalink": "/wljs-docs/blog/imageraster"
            }
          },
          "content": "I was always wondering on how to replicate the experience from the massive software like *Origin Lab*, *Igor64*, which has more traditional way of working with data - using windows.  Being limited to a cell in the notebooks is a big limitation, well...\n\n![](Screenshot%202023-08-29%20at%2012.58.20.png)\n\n<!--truncate-->\n\nOn the above figure is my typical workspace. Looks messy, however being a theoretician I need to monitor multiple parameters of a model. Sliders are not really well sorted and in overall it looks messy, but it can be improved by a bit of a magic of CSS, which is available in `.html` cells. \n\nThe trick is\n![](Screenshot%202023-09-11%20at%2018.40.52.png)\n\nwhen you click on the icon of windows it evaluates the input cell and outputs its content to a new window, which is associated with the current notebook. It uses all features of the frontend engine, therefore you can use dynamics as if nothing was changed.\n\n:::warning\nBefore reevaluating a cell, you need to close a window. Hot reload is not supported for now\n:::\n\nOr if you are demonstrating a presentation using [wljs-revealjs](https://github.com/JerryI/wljs-revealjs/) plugin, this is the only use-case scenario for the projector feature.\n\nBut on this topic I will make a separate post."
        },
        {
          "id": "imageraster",
          "metadata": {
            "permalink": "/wljs-docs/blog/imageraster",
            "source": "@site/blog/2023-09-14-image-raster/2023-08-20-image-raster.md",
            "title": "Image and Raster were implemented!",
            "description": "It means, MatrixPlot as well as Rasterize can work properly finally",
            "date": "2023-08-20T00:00:00.000Z",
            "formattedDate": "August 20, 2023",
            "tags": [
              {
                "label": "graphics",
                "permalink": "/wljs-docs/blog/tags/graphics"
              }
            ],
            "readingTime": 0.73,
            "hasTruncateMarker": true,
            "authors": [
              {
                "name": "Kirill Vasin",
                "title": "Maintainer",
                "url": "https://github.com/JerryI",
                "imageURL": "https://avatars.githubusercontent.com/u/4111822?s=48&v=4",
                "key": "jerryi"
              }
            ],
            "frontMatter": {
              "slug": "imageraster",
              "title": "Image and Raster were implemented!",
              "authors": "jerryi",
              "tags": [
                "graphics"
              ],
              "enableComments": true,
              "draft": false
            },
            "unlisted": false,
            "prevItem": {
              "title": "Introducing Projector! Output to a separate window",
              "permalink": "/wljs-docs/blog/projector-intro"
            },
            "nextItem": {
              "title": "Advanced guide on Events",
              "permalink": "/wljs-docs/blog/event-advanced"
            }
          },
          "content": "![](plot.svg)\n\n```mathematica\nMatrixPlot[\n Fourier[Table[\n   UnitStep[i, 4 - i] UnitStep[j, 7 - j], {i, -25, 25}, {j, -25, \n    25}]]]\n```\nIt means, `MatrixPlot` as well as `Rasterize` can work properly finally\n\n<!--truncate-->\n\n\n\n## Raster\n\n`MatrixPlot` produces `Graphics` with `Raster` inside. However, similar function `ArrayPlot` __won't work properly__ since it doesn't provide the `PlotRange` option.\n\nIn my implementation of `Graphics` it cannot guess what the plot range would be. Therefore you have to manually provide it. For example\n\n```mathematica\nGraphics[{\n\tRaster[Table[{x, y, x, y}, {x, .1, 1, .1}, {y, .1, 1, .1}]]}\n\t, PlotRange->{{0.1,10}, {0.1,10}\n}]\n```\n\n\n\nHere `PlotRange` is necessary, otherwise it will be set to `{-1,1}`.\n\n## Image\nThis is actually a separate entity, that uses HTML5 canvas\n> despite this fact, you can still easily embed it into `Graphics` using `Inset` wrapper\n\n\n\nPlease see __Reference__ section in the frontend docs for more information. See Ya!"
        },
        {
          "id": "event-advanced",
          "metadata": {
            "permalink": "/wljs-docs/blog/event-advanced",
            "source": "@site/blog/2023-08-19-advanced-events/index.md",
            "title": "Advanced guide on Events",
            "description": "As a short summary - where you can use event-handlers / listeners",
            "date": "2023-08-19T00:00:00.000Z",
            "formattedDate": "August 19, 2023",
            "tags": [
              {
                "label": "frontend",
                "permalink": "/wljs-docs/blog/tags/frontend"
              },
              {
                "label": "events",
                "permalink": "/wljs-docs/blog/tags/events"
              }
            ],
            "readingTime": 5.86,
            "hasTruncateMarker": true,
            "authors": [
              {
                "name": "Kirill Vasin",
                "title": "Maintainer",
                "url": "https://github.com/JerryI",
                "imageURL": "https://avatars.githubusercontent.com/u/4111822?s=48&v=4",
                "key": "jerryi"
              }
            ],
            "frontMatter": {
              "slug": "event-advanced",
              "title": "Advanced guide on Events",
              "authors": "jerryi",
              "tags": [
                "frontend",
                "events"
              ],
              "enableComments": true
            },
            "unlisted": false,
            "prevItem": {
              "title": "Image and Raster were implemented!",
              "permalink": "/wljs-docs/blog/imageraster"
            },
            "nextItem": {
              "title": "Introducing NotebookStore",
              "permalink": "/wljs-docs/blog/notestore"
            }
          },
          "content": "As a short summary - where you can use event-handlers / listeners \n\n- on `Graphics2D` elements to listen users interactions \n\t- drag, click, zoom, mousemove\n- on `Graphics3D` elements\n\t- transform\n- on any `EventObject` \n- on the output cell using `EvaluationCell[]` to attach to cell's events\n\t- evaluation, destroy\n\nAn event-driven approach was inspired by Javascript language, where one can subscribe to any changes of any objects. Here it is way more simplified compared to JS, but covers all practical cases.\n\n<!--truncate-->\n\n\n\n\n\n\n## Thumb rule\n\nOne event-object - one handler function\n\n```mathematica\nev = EventObject[<|\"id\"->\"evid\", ...|>]\nEventHandler[ev, Print]\n```\n\ni.e.\n\n```mermaid\nflowchart LR\n\nsubgraph EventObject\n\tid=evid\n\t...\nend\n\nsubgraph EventHandler\n\tPrint\nend\n\nEventObject --\"By id\"-->EventHandler\n```\n\nto remove our handler\n```mathematica\nDelete[ev]\n```\nwhere it deletes a handler function, but not an `EventObject`.\n\n:::tip\nTo assign more event handlers, you need to __clone an event object__ \n:::\n### Cloning events\nConsidering the previous example we had\n\n```mathematica\nev = EventObject[<|\"id\"->\"evid\", ...|>]\n(* first handler *)\nEventHandler[ev, Print]; \n\n(* second handler *)\nclone = EventClone[ev];\nEventHandler[clone, Print];\n```\n\nWhat it does, it converts a simple `EventObject` into something like an event router, which is populated by two new event-objects\n\n```mermaid\nflowchart LR\n\nsubgraph EventObject\n\tid=evid\n\tprop1[\"props\"]\nend\n\nsubgraph EventRouter\n\tsubgraph List\n\t\tid=new1\n\t\tid=new2\n\tend\n\tprop2[\"props\"]\nend\n\nsubgraph EventHandler1[EventHandler]\n\tPrint1[Print]\nend\n\nsubgraph EventHandler2[EventHandler]\n\tPrint2[Print]\nend\n\nEventObject --\"By id\"--> EventRouter\n\nid=new1 --\"By id\"-->EventHandler1\nid=new2 --\"By id\"-->EventHandler2\n```\n\nAnything you do with `clone` will not affect the `ev`\n\n```mathematica\nDelete[clone]\n```\n\n:::info\nCloned object inherits all properties (i.e. initial data), that the original object has.\n:::\n\n## Merging\nFor example you want to update the state of something based on two events, that may happen independently, then\n\n```mathematica\nev1 = EventObject[<|\"id\"->\"evid1\"|>]\nev2 = EventObject[<|\"id\"->\"evid2\"|>]\n\njoined = Join[ev1, ev2]\n```\n\n:::tip\nYou do not have to clone your events before joining them, since it does it automatically keeping all other connections intact\n:::\n\n```mermaid\nflowchart LR\n\nsubgraph EventObject1[EventObject]\n\tid=evid1\n\tprop1[\"props1\"]\nend\n\nsubgraph EventObject2[EventObject]\n\tid=evid2\n\tprop2[\"props2\"]\nend\n\nsubgraph EventRouter\nend\n\nsubgraph EventObject3[EventObject]\n\tid=new\n\tprop3[\"merged props\"]\nend\n\nEventObject1 --> EventRouter\nEventObject2 --> EventRouter\n\nEventRouter --Fire--> EventObject3\n```\n## Properties\nThere is a simple association wrapped inside `EventObject`. By its nature this is not a classical object in the sense of OOP, since the handler function has no access to the their properties and only `id`  field is stored in global a memory. \n### Inheritable\nThere is a property `\"initial\"`, that specifies the initial value of the data shipped when the event is fired, when you apply `Join` or `EventClone` the final initial conditions will be merged from the different event objects or just copied\n\n```mathematica\nev1 = EventObject[<|\"id\"->\"ev1\", \"initial\"-><|\"x\"->1|>|>]\nev2 = EventObject[<|\"id\"->\"ev1\", \"initial\"-><|\"y\"->2|>|>]\n\nJoin[ev1, ev2]\n```\n\nthe result will be\n\n```mathematica\nEventObject[<|\"id\"->\"random\", \"initial\"-><|\"x\"->1, \"y\"->2|>|>]\n```\n### Non-inheritable\nA very useful property, that comes handy when making GUI elements `\"view\"`\n\n```mathematica\nEventObject[<|\"id\"->\"evid\", \"view\"->Graphics3D[Sphere[]]|>]\n```\n\nit acts only when the object is printed to the output cell, then, we will see\n\n\n\nThis is where the *body* of all input elements is located.\n## Applications\nThe most interesting part is coming below\n### Event listener for Graphics\nAn `EventHandler` expression always returns the original object, therefore it comes very handy to use it as a wrapper for buttons, sliders and most `Graphics` objects\n\n```mathematica\np = {0,0};\nGraphics[{\n\tWhite,\n\tEventHandler[\n\t\tRectangle[{-2,2}, {2,-2}],\n\t\t{\"mousemove\"->Function[xy, p = xy]}\n\t],\n\tPointSize[0.05], Cyan,\n\tPoint[p // Offload]\n}]\n```\n\nHere we are listening for `mousemove` event attached to a wide white rectangle and translate the coordinates to a cyan point.\n\n:::info\nAn event-handling functions must be in __a list of rules__ with corresponding names of the events for `EventHandler` being attached to a standard graphical object\n\n```mathematica\nEventHandler[GraphicsPrimitive_, {\"\"->...}]\n```\nI.e. the following\n```mathematica\nEventHandler[GraphicsPrimitive_, Print]\n```\n__will not work__, because `Point` does produce only named events\n:::\n\nThere are following event available for 2D primitives\n- drag\n- mousemove\n- click\n- zoom\n\nand for 3D primitives\n- transform - similar to drag, but with gizmos \n\n### Cells events\nIt comes handy, when you for instance clone events and need to purge the handlers before each reevaluation. There is an access to any output cell via\n\n```mathematica\nEvaluationCell[]\n```\n\nThen, one can assign any expression to it\n```mathematica\nEventHandler[EvaluationCell[], {\"destroy\"->Print, \"evaluation\"->Print}]\n```\n\nOne should not that those event are assigned to __the output cell__ generated after the evaluation. Therefore mostly useful will be to use `\"destroy\"`, while `\"evaluation\"` is called only if one tries to evaluate the output cell as an input cell.\n\n### GUI elements\nThe most common place to deal with `EventObject`s is\n\n```mathematica\nInputButton[\"Click me\"]\n```\n\nthat evaluates into \n```mathematica\nEventObject[<|\"id\"->\"generated...\", \"view\"->ButtonView[...], \"initial\"->False|>]\n```\n\nbut __you will never see it__, because on output it shows only `view` field, that contains actual representation of a button as an interactive object, that fires an event with `id`. \n### Javascript binding\nThink about it as a superset of the previous one. Let us try with an example of a...\n\nButton\n```javascript\n.js\nconst button = document.createElement('input');\nbutton.type = \"button\";\nbutton.value = \"Click me\";\nbutton.addEventListener('click', ()=>{\n  server.emitt('evid', '\"Clicked!\"');\n});\n\nreturn button;\n```\n\n```mathematica\nEventHandler[\"evid\", Print];\n```\n\nBy clicking on the appeared button you will see the message from the Kernel. This is how all GUI elements are made, apart from wrapping them into a functions, that generate uid's by its own. \n\n#### Making things fancier | View & Generator\nTaking the previous example, we can improve it a bit starting from the __view component__\n\n```js\n.js\ncore.CustomButtonView = async (args, env) => {\n  const options = await core._getRules(args, env);\n  const button = document.createElement('input');\n  button.type = \"button\";\n  button.value = options.Label;\n  button.addEventListener('click', ()=>{\n    server.emitt(options.Event, '\"Clicked!\"');\n  });\n\n  env.element.appendChild(button);\n}\n\nreturn null;\n```\n\nNow this is a proper frontend function. Now it comes to __event-generator__\n\n```mathematica\nCustomButton[label_] := With[{uid = CreateUUID[]},\n  EventObject[<|\"id\"->uid, \"initial\"->False, \"view\"->CustomButtonView[\"Label\"->label, \"Event\"->uid]|>]\n]\n```\n\nThen we can use `CustomButton` as a real GUI component for user's input\n\n```mathematica\nEventHandler[CustomButton[\"Woo\"], Print]\n```\n\n## Cutting corners\nFor lazy people there are many shortcuts implemented\n\n___Aliases___\nThere are many ways to tell the same\n\n```mathematica\nEventBind[ev, Print]\nEventHandlet[ev, Print]\nPrint // ev\n```\n\n```mathematica\nDelete[ev]\nDeleteObject[ev]\n```\n\n___Fast event binding___\nThere is an another, sorter way of writing `EventHandler`\n```mathematica\nPrint // ev\n```\nwhich is basically \n```mathematica\nEventHandler[ev, Print]\n```\n\n___Assignment handler function___ \nSometimes it is too repetitive to write every-time `var = # &`, instead\n```mathematica\nev // Assign[x]\n```\nis basically an equivalent of \n```mathematica\nEventHandler[ev, (x = # &)]\n```\n\n___Fire an event manually___\nsometimes comes handy, when you want to initialize the data\n```mathematica\nev = EventObject[<|\"id\"->\"evid\", ...|>]\nEventFire[ev, 1+1]\n```\nor with no-data provided\n```mathematica\nEventFire[ev]\n```\nor just by using text-string\n```mathematica\nEventFire[\"event-id\"]\n```\n\n___Reference by id___\nif you know an `uid` of the event, but don't have a real `EventObject`\n```mathematica\nEventHandler[\"evid\", Print]\nEventRemove[\"evid\"]\nEventFire[\"evid\"]\nEventFire[\"evid\", 1+1]\n```\n\n---\n\n__[Download Notebook](Greyness.wln)__ \n\nAs well as the most part of WLJS Frontend, an event system was not carefully designed in-advance, but rather it was shaped and expanded iteratively via solving hundreds of practical cases."
        },
        {
          "id": "notestore",
          "metadata": {
            "permalink": "/wljs-docs/blog/notestore",
            "source": "@site/blog/2023-08-17-notestore.md",
            "title": "Introducing NotebookStore",
            "description": "Sometimes it is easier to ship notebook together with the data it depends on. However, not as a text encoded using BASE64 pasted into a notebook cell - it would just kill the performance, but as a dedicated inner structure, that can be exposed using NotebookStore",
            "date": "2023-08-17T00:00:00.000Z",
            "formattedDate": "August 17, 2023",
            "tags": [
              {
                "label": "frontend",
                "permalink": "/wljs-docs/blog/tags/frontend"
              }
            ],
            "readingTime": 0.58,
            "hasTruncateMarker": false,
            "authors": [
              {
                "name": "Kirill Vasin",
                "title": "Maintainer",
                "url": "https://github.com/JerryI",
                "imageURL": "https://avatars.githubusercontent.com/u/4111822?s=48&v=4",
                "key": "jerryi"
              }
            ],
            "frontMatter": {
              "slug": "notestore",
              "title": "Introducing NotebookStore",
              "authors": "jerryi",
              "tags": [
                "frontend"
              ],
              "enableComments": true
            },
            "unlisted": false,
            "prevItem": {
              "title": "Advanced guide on Events",
              "permalink": "/wljs-docs/blog/event-advanced"
            },
            "nextItem": {
              "title": "Axes label and partial LaTeX support",
              "permalink": "/wljs-docs/blog/axes-label"
            }
          },
          "content": "Sometimes it is easier to ship notebook together with the data it depends on. However, not as a text encoded using BASE64 pasted into a notebook cell - it would just kill the performance, but as a dedicated inner structure, that can be exposed using `NotebookStore`\n\n```mathematica\nNotebookStore[\"key\"] = 1+1\nNotebookStore[\"key\"] === 1+1\n```\n\nAs simple as that. This is not real association, but mimics its behavior. To get all keys, use \n```mathematica\nKeys[NotebookStore]\n```\n\nIn the worst case scenario one can use `Iconize`, but that will make the data to be stored inside a notebook cell, which is recommended.\n\n:::tip\nFor the arrays of data apply `Compress` / `Uncompress` to save up the space\n:::"
        },
        {
          "id": "axes-label",
          "metadata": {
            "permalink": "/wljs-docs/blog/axes-label",
            "source": "@site/blog/2023-08-16-axes-label.md",
            "title": "Axes label and partial LaTeX support",
            "description": "Finally Text was implemented in wljs-graphics-d3 package!",
            "date": "2023-08-16T00:00:00.000Z",
            "formattedDate": "August 16, 2023",
            "tags": [
              {
                "label": "frontend",
                "permalink": "/wljs-docs/blog/tags/frontend"
              },
              {
                "label": "graphics",
                "permalink": "/wljs-docs/blog/tags/graphics"
              }
            ],
            "readingTime": 0.495,
            "hasTruncateMarker": true,
            "authors": [
              {
                "name": "Kirill Vasin",
                "title": "Maintainer",
                "url": "https://github.com/JerryI",
                "imageURL": "https://avatars.githubusercontent.com/u/4111822?s=48&v=4",
                "key": "jerryi"
              }
            ],
            "frontMatter": {
              "slug": "axes-label",
              "title": "Axes label and partial LaTeX support",
              "authors": "jerryi",
              "tags": [
                "frontend",
                "graphics"
              ],
              "enableComments": true
            },
            "unlisted": false,
            "prevItem": {
              "title": "Introducing NotebookStore",
              "permalink": "/wljs-docs/blog/notestore"
            },
            "nextItem": {
              "title": "A minor update of Graphics2D",
              "permalink": "/wljs-docs/blog/intro-controls-2d-graphics"
            }
          },
          "content": "Finally `Text` was implemented in [wljs-graphics-d3](https://github.com/JerryI/wljs-graphics-d3) package!\n\n\n\n<!--truncate-->\n\n`Text[text, pos]`, where both of them `text` and `pos` __support dynamic updates__. One can stylize it using traditional `Style` wrapper and specify `FrontSize`, `FontFamily` as well.\n\nSupported options for graphics \n\n- `Axes`\n- `AxesLabel`\n- `FrameLabel`\n- `Frame`\n- `Ticks`\n- `FrameTicks`\n- `TicksLength`\n- `TicksDirection`\n\nNone of them supports dynamic update for now ;)\n\nAlso now one can use LaTeX form for greek symbols and for sub- superscripts in the text labels or inside `Text` element like this\n\n```mathematica\nAxesLabel -> {\"wavenumber (cm^{-1})\", \"\\\\alpha (cm^{-1}) \"}\n```\n\nThanks for reading!"
        },
        {
          "id": "intro-controls-2d-graphics",
          "metadata": {
            "permalink": "/wljs-docs/blog/intro-controls-2d-graphics",
            "source": "@site/blog/2023-08-08-graphics-2d-update/index.md",
            "title": "A minor update of Graphics2D",
            "description": "Now regular Graphics expressions has panning/zooming features. Use Controls->True as an option",
            "date": "2023-08-08T00:00:00.000Z",
            "formattedDate": "August 8, 2023",
            "tags": [
              {
                "label": "graphics",
                "permalink": "/wljs-docs/blog/tags/graphics"
              }
            ],
            "readingTime": 0.18,
            "hasTruncateMarker": false,
            "authors": [
              {
                "name": "Kirill Vasin",
                "title": "Maintainer",
                "url": "https://github.com/JerryI",
                "imageURL": "https://avatars.githubusercontent.com/u/4111822?s=48&v=4",
                "key": "jerryi"
              }
            ],
            "frontMatter": {
              "slug": "intro-controls-2d-graphics",
              "title": "A minor update of Graphics2D",
              "authors": "jerryi",
              "tags": [
                "graphics"
              ],
              "enableComments": true
            },
            "unlisted": false,
            "prevItem": {
              "title": "Axes label and partial LaTeX support",
              "permalink": "/wljs-docs/blog/axes-label"
            },
            "nextItem": {
              "title": "A major update of Graphics3D",
              "permalink": "/wljs-docs/blog/intro-transform-3d"
            }
          },
          "content": "![](ezgif.com-optimize-12.gif)\n\nNow regular `Graphics` expressions has panning/zooming features. Use `Controls->True` as an option \n\n```mathematica\nPlot[x, {x,0,10}];\nInsert[%, Controls->True, {2,-1}]\n```\n\nUnfortunately, it is not possible to extend option values for the regular functions `Plot` and etc."
        },
        {
          "id": "intro-transform-3d",
          "metadata": {
            "permalink": "/wljs-docs/blog/intro-transform-3d",
            "source": "@site/blog/2023-07-25-transform-3d/index.md",
            "title": "A major update of Graphics3D",
            "description": "Every feature I introduce comes from the practicing on real-life cases. Recently I had an urge to make a nice figure for the Physical Review B paper.",
            "date": "2023-07-25T00:00:00.000Z",
            "formattedDate": "July 25, 2023",
            "tags": [
              {
                "label": "graphics3d",
                "permalink": "/wljs-docs/blog/tags/graphics-3-d"
              }
            ],
            "readingTime": 2.93,
            "hasTruncateMarker": true,
            "authors": [
              {
                "name": "Kirill Vasin",
                "title": "Maintainer",
                "url": "https://github.com/JerryI",
                "imageURL": "https://avatars.githubusercontent.com/u/4111822?s=48&v=4",
                "key": "jerryi"
              }
            ],
            "frontMatter": {
              "slug": "intro-transform-3d",
              "title": "A major update of Graphics3D",
              "authors": "jerryi",
              "tags": [
                "graphics3d"
              ],
              "enableComments": true
            },
            "unlisted": false,
            "prevItem": {
              "title": "A minor update of Graphics2D",
              "permalink": "/wljs-docs/blog/intro-controls-2d-graphics"
            },
            "nextItem": {
              "title": "WLJS in practice. Integrating absorption spectra",
              "permalink": "/wljs-docs/blog/practice-integration"
            }
          },
          "content": "![](ezgif.com-optimize.gif)\n\nEvery feature I introduce comes from the practicing on real-life cases. Recently I had an urge to make a nice figure for the Physical Review B paper.\n\nIn this post: __shadows__, __light-sources__, __toon-shading__, __transformation control__...\n\n<!--truncate-->\n\n\n\n\n<Component>\nhttps://cdn.statically.io/gh/JerryI/Mathematica-ThreeJS-graphics-engine/master/dist/kernel.js\n</Component>\n\n## Shadows\nFirstly, to depict a crystallographic structure is not a big deal. Using materials.project one can obtain `.cif` file and easily parse it using Wolfram Language. With a bit of a crystallography knowledge one can show ions as sphere with arbitrary colors and sizer for your taste \n\n\n\nOk, definitely, we __do not need spheres to cast shadows__...\nAh, by the way, some new features comes\n\n:::info\n```mathematica\nShadows[True]\n```\nAllows group of objects to cast shadows or receive them from the `PointLight`, `SpotLight`, `HemisphereLight` sources of light in the scene\n:::\n\n## Light sources\nTo define some custom light-source\n\n:::info\n```mathematica\nPointLight[RGBColor[], intensity_:1, ..., \"Position\"->{x,y,z}]\n```\nAdds point light source ([see THREE.js](https://threejs.org/docs/#api/en/lights/PointLight))\n:::\n\n:::info\n```mathematica\nSpotLight[RGBColor[], intensity_:1, ..., \"Position\"->{x,y,z}, \"Target\"->{0,0,0}]\n```\nAdds spot light source ([see THREE.js](https://threejs.org/docs/#api/en/lights/SpotLight))\n:::\n\n:::info\n```mathematica\nHemisphereLight[SkyColor_RGBColor, GroundColor_RGBColor, intensity_:1]\n```\nAdds hemisphere light source ([see THREE.js](https://threejs.org/docs/#api/en/lights/HemisphereLight))\n:::\n\nThe position and target object support dynamic updates, i.e. one can do\n```mathematica\nPointLight[\"Position\"->(pos // Offload)]\n```\n\n:::tip\nTo have more control over the lighting, disable the default one in the scene\n```mathematica\nGraphics3D[..., Lighting->None]\n```\n:::\n\nLet me continue with a figure. __No shadows__ and __only point-light source__\n\n\n\nNow it's much better, however this old-school 3D look for me feels a bit off being printed next to sets of 2D plots.  \n\n## MeshMaterials\nVector graphics has a minimal set of colors, I am looking for something like this one\n\n<div style={{textAlign: 'center'}}>\n\n![](screenshot-158_111793.jpg)\n\n*image from [CAHSEE - Properties of Shapes: Help and Review](https://study.com/academy/topic/cahsee-properties-of-shapes-help-and-review.html)*\n\n</div>\n\nWell, how one can archive that? It reminds me something\n\n<div style={{textAlign: 'center'}}>\n\n![](Toon-shader.jpg)\n\n*image from [Cell shading](https://en.wikipedia.org/wiki/Cel_shading)*\n\n</div>\n\nBrowsing through the materials on THREE.js docs, [I found one](https://threejs.org/docs/#api/en/materials/MeshToonMaterial) I was looking for and quickly applied that one\n\n\n\nHere we go! Let me introduce you `MeshMaterials`\n\n:::info\nUse `MeshMaterial[]` for a group of object to specify the material for the geometry. By the default, all objects have `MeshPhysicalMaterial[]`. \n\n```mathematica\nMeshMaterial[MeshPhysicalMaterial[]]\nMeshMaterial[MeshToonMaterial[]]\nMeshMaterial[MeshPhongMaterial[]]\nMeshMaterial[MeshLambertMaterial[]]\n```\n:::\n\nWell, I am not satisfied yet. \n\n## Transformation controls\nPositioning the light is pain. At least there is a dynamic binding, i.e. no need in re-evaluating a cell every-time. I wish, one could drag a light source like in Blender or any other 3D software.\n\nAs usual, everything [was invented before](https://threejs.org/examples/#misc_controls_transform), one only needs to adapt and integrate the given technology\n\n![](cTJTG9o.png)\n\nThe next logical step will be - implement it as a `EventHandler`, like `drag` or `click` listeners attached to an SVG element in `Graphics`\n\n:::info\nTo assign a draggable event handler used in 3D, apply handler for `transform` property\n```mathematica\nEventHandler[Sphere[], {\"transform\"->handler}]\n```\n`handler` function accepts an association with a current position of a dragged object\n```mathematica\n<|\"position\"->{x,y,z}|>\n```\n:::\n\nTo help with dragging an in-built gizmos will appear on-top of the attached object. Now it looks like this\n\n![](ezgif.com-optimize-11.gif)\n\n\nNow one can finally feel the freedom of positioning the light sources in the scene to achieve the best look\n\n\n\nProbably it won't work in the preview here in the post. To see it in action have a look at the thumbnail of this blog post or evaluate those three rows of a single cell in your notebook.\n\nNow I could finally overlay it with some notes and finished the look of a printed version\n\n![](Fig-1-01%201.svg)\n\nThanks for reading! See you soon"
        },
        {
          "id": "practice-integration",
          "metadata": {
            "permalink": "/wljs-docs/blog/practice-integration",
            "source": "@site/blog/2023-07-22-pratical-integration/index.md",
            "title": "WLJS in practice. Integrating absorption spectra",
            "description": "I would like to start this series of application cases, where I am going to solve real-life problems I face using WLJS Frontend. Since my main area is quantum physics, it will be more focused on the scientific research field.",
            "date": "2023-07-22T00:00:00.000Z",
            "formattedDate": "July 22, 2023",
            "tags": [
              {
                "label": "frontend",
                "permalink": "/wljs-docs/blog/tags/frontend"
              },
              {
                "label": "practice",
                "permalink": "/wljs-docs/blog/tags/practice"
              },
              {
                "label": "dynamics",
                "permalink": "/wljs-docs/blog/tags/dynamics"
              }
            ],
            "readingTime": 0.715,
            "hasTruncateMarker": true,
            "authors": [
              {
                "name": "Kirill Vasin",
                "title": "Maintainer",
                "url": "https://github.com/JerryI",
                "imageURL": "https://avatars.githubusercontent.com/u/4111822?s=48&v=4",
                "key": "jerryi"
              }
            ],
            "frontMatter": {
              "slug": "practice-integration",
              "title": "WLJS in practice. Integrating absorption spectra",
              "authors": "jerryi",
              "tags": [
                "frontend",
                "practice",
                "dynamics"
              ],
              "enableComments": true
            },
            "unlisted": false,
            "prevItem": {
              "title": "A major update of Graphics3D",
              "permalink": "/wljs-docs/blog/intro-transform-3d"
            },
            "nextItem": {
              "title": "Developing library function in a notebook",
              "permalink": "/wljs-docs/blog/practical-working-withlibs"
            }
          },
          "content": "![](ezgif.com-video-to-gif-26.gif)\n\n\n\n\n\n\nI would like to start this series of application cases, where I am going to solve real-life problems I face using WLJS Frontend. Since my main area is quantum physics, it will be more focused on the scientific research field.\n\nYou may think about notebooks as a sort of small apps. Useful, minimalistic and reactive with respect to the input data. I have been using Origin Pro for processing data for quite a long, however among of all scientific tools, most of them suffer from poor GUI. Looking at GUI of modern VST EQ plugins makes me envy, since there is nothing more clear and than dragging a pointer and seeing the result in the real-time.\n\nToday I will try to bring those ideas to live in a one short example\n\n<!--truncate-->\n\n\n\n\nThe original data is accessible by the link\n- [Archive.zip](Archive.zip)"
        },
        {
          "id": "practical-working-withlibs",
          "metadata": {
            "permalink": "/wljs-docs/blog/practical-working-withlibs",
            "source": "@site/blog/2023-07-21-polygon/index.md",
            "title": "Developing library function in a notebook",
            "description": "In general, libraries shipped with WLJS Frontend are not reproducing even 20% of Mathematica's dynamic or graphics functions. Therefore, it is not a big deal to come back quite frequently to the source code of wljs-graphics-d3 or wljs-graphics3d-threejs to write a polyfill or design a completely new feature to support backward compatibility.",
            "date": "2023-07-21T00:00:00.000Z",
            "formattedDate": "July 21, 2023",
            "tags": [
              {
                "label": "frontend",
                "permalink": "/wljs-docs/blog/tags/frontend"
              },
              {
                "label": "devnotes",
                "permalink": "/wljs-docs/blog/tags/devnotes"
              }
            ],
            "readingTime": 0.76,
            "hasTruncateMarker": true,
            "authors": [
              {
                "name": "Kirill Vasin",
                "title": "Maintainer",
                "url": "https://github.com/JerryI",
                "imageURL": "https://avatars.githubusercontent.com/u/4111822?s=48&v=4",
                "key": "jerryi"
              }
            ],
            "frontMatter": {
              "slug": "practical-working-withlibs",
              "title": "Developing library function in a notebook",
              "authors": "jerryi",
              "tags": [
                "frontend",
                "devnotes"
              ],
              "enableComments": true,
              "draft": true
            },
            "unlisted": false,
            "prevItem": {
              "title": "WLJS in practice. Integrating absorption spectra",
              "permalink": "/wljs-docs/blog/practice-integration"
            },
            "nextItem": {
              "title": "Realtime path-tracing",
              "permalink": "/wljs-docs/blog/rtx-intro"
            }
          },
          "content": "In general, libraries shipped with WLJS Frontend are not reproducing even 20% of Mathematica's dynamic or graphics functions. Therefore, it is not a big deal to come back quite frequently to the source code of [wljs-graphics-d3](https://github.com/JerryI/wljs-graphics-d3) or [wljs-graphics3d-threejs](https://github.com/JerryI/Mathematica-ThreeJS-graphics-engine) to write a polyfill or design a completely new feature to support backward compatibility.  \n\nLuckily, since it is all running in a browser, we can take an advantage of using Javascript cells directly to build the missing functions. \n\n:::tip\nThere is no need in rebuilding libraries or compiling the source code of the library or plugin (or refreshing the browser's window) to make a prototype of a feature. \n\nUse `.js` cells in the notebook for that.\n:::\n\n<!--truncate-->\n\nHere we will have a look at `Polygon` in the context of 2D graphics. Here is my (@JerryI, maintainer) dev-notes on that\n\n\n\n\n\nHere is the original notebook\n- [Cinematographer.wln](Cinematographer.wln)\n\nThanks for reading! Hope it helps ;)"
        },
        {
          "id": "rtx-intro",
          "metadata": {
            "permalink": "/wljs-docs/blog/rtx-intro",
            "source": "@site/blog/2023-07-20-rtx/index.md",
            "title": "Realtime path-tracing",
            "description": "There is nothing more exciting in programming than designing a graphics application. Thankfully, there is one person on Github Garrett Johnson, who implemented a path-tracing algorithm on top of the well-known THREE.js graphics engine. Moreover, it fully supports features from the original library and can be anytime flipped as a main renderer.",
            "date": "2023-07-20T00:00:00.000Z",
            "formattedDate": "July 20, 2023",
            "tags": [
              {
                "label": "frontend",
                "permalink": "/wljs-docs/blog/tags/frontend"
              },
              {
                "label": "graphics",
                "permalink": "/wljs-docs/blog/tags/graphics"
              }
            ],
            "readingTime": 2.05,
            "hasTruncateMarker": true,
            "authors": [
              {
                "name": "Kirill Vasin",
                "title": "Maintainer",
                "url": "https://github.com/JerryI",
                "imageURL": "https://avatars.githubusercontent.com/u/4111822?s=48&v=4",
                "key": "jerryi"
              }
            ],
            "frontMatter": {
              "slug": "rtx-intro",
              "title": "Realtime path-tracing",
              "authors": "jerryi",
              "tags": [
                "frontend",
                "graphics"
              ],
              "enableComments": true
            },
            "unlisted": false,
            "prevItem": {
              "title": "Developing library function in a notebook",
              "permalink": "/wljs-docs/blog/practical-working-withlibs"
            },
            "nextItem": {
              "title": "Hydrator experimantal feature",
              "permalink": "/wljs-docs/blog/hydrator-xp"
            }
          },
          "content": "![](Screenshot%20from%202023-07-20%2020-04-08.png)\n\nThere is nothing more exciting in programming than designing a graphics application. Thankfully, there is one person on Github [Garrett Johnson](https://github.com/gkjohnson), who implemented a path-tracing algorithm on top of the well-known [THREE.js](https://threejs.org) graphics engine. Moreover, it fully supports features from the original library and can be anytime flipped as a main renderer.\n\n<!--truncate-->\n\nI hooked up his [library](https://github.com/gkjohnson/three-gpu-pathtracer) to works as a secondary engine for `Graphics3D` function presented in [wljs-graphics3d-threejs](https://github.com/JerryI/Mathematica-ThreeJS-graphics-engine) library. Just pass an option\n\n```mathematica\nGraphics3D[%, \"RTX\"->True]\n```\n\nAnd it will bake a realtime photorealistic image. It also supports all properties used in traditional rendering, i.e. `Emissive[]`, `Metallness[]`, HDRI map and many more!\n\nSome classical examples from Wolfram Mathematica\n\n![](IMG_0556.png)\n\n\n![](screenshot(8)%201.png)\n\nYou might recognize those examples from `Graphics3D` official documentation page. Here is some other neat pictures produced using the following code\n\n### Metallic maze\nThis was taken from the discussion [here](https://mathematica.stackexchange.com/questions/191047/making-holes-from-maze-generated-graphics3d). The maze is made from many polygons, where for the surface `Metallness[1], Roughness[0]` were applied. Since it provides perfect reflection, the overall time for rendering (when the noise has gone) is relatively low.\n\n```mathematica\nshowmaze = Uncompress[FromCharacterCode @@ ImageData[Import[\"https://i.stack.imgur.com/XVJcP.png\"], \"Byte\"]];\nprims = CapsuleShape @@@ Cases[showmaze, _Cylinder, Infinity];\nprims = prims /. {{5., 5., 5.} -> {5.5, 5., 5.}, {1., 1., 1.} -> {1., 0.5, 1.}};\nims = RegionImage[#, {{0.3`, 5.7`}, {0.3`, 5.7`}, {0.3`, 5.7`}}, RasterSize -> 100] & /@ prims;\nim = ImageApply[Max, ims];\n```\n\nThen, the generated mesh is lit by `lighting` arrays, which contain randomly distributed glowing spheres\n\n```mathematica\nlighting = Table[{Emissive[RGBColor@@(RandomReal[{0,1}, 3]), 2], Sphere[RandomReal[{1,92}, 3], RandomReal[{1,7}]]}, {i, 1, 30}];\nShow[bmr = ImageMesh[im, Method -> \"DualMarchingCubes\"], PlotRange -> {{0, 91}, {1, 92}, {0, 91}}][[1]];\nGraphics3D[{lighting, Metalness[0], Roughness[0], %},  \"Lighting\"->None, ViewProjection->\"Perspective\", \"RTX\"->True]\n```\n\n\n![](screenshot(12).png)\n\nDespite the complicity of the scene, __it renders in real time__ with an acceptable amount of noise.\n\n### Torus Knot\nThis is rather classical example, but uses a glossy surface using `Roughness[0]` lit by two glowing spheres\n\n```mathematica\nKnotData[{\"TorusKnot\", {3, 5}}][[1]];\nGraphics3D[{{Emissive[Red, 5], Sphere[{0,0,-0.1}, 0.14]}, {Roughness[0],Cyan, %}, {Emissive[RGBColor[{1,1,1}], 5], Sphere[{0,0,0.4}, 0.1]}}, Lighting->None, \"RTX\"->True]\n```\n\nHere is the result\n\n![](screenshot(13).png)\n\nLooks like a dream...\n\n## Limitations\n- The dynamic scenes now are not supported, but can be added in theory according to the documentation of the path-rendering library. \n- Requires a dedicated GPU (actually with my Intel UHD integrated graphics it works, but demands an extremely long time to compile shaders to start rendering). However, iPhones, Androids can still handle not very complicated scenes.\n- Safari crashes (Firefox, Chrome, Vivaldi work well)"
        },
        {
          "id": "hydrator-xp",
          "metadata": {
            "permalink": "/wljs-docs/blog/hydrator-xp",
            "source": "@site/blog/2023-07-15-hydrator.md",
            "title": "Hydrator experimantal feature",
            "description": "Here is an experimental feature provided by wljs-hydrator engine, that simply renders frontend object into a given div element",
            "date": "2023-07-15T00:00:00.000Z",
            "formattedDate": "July 15, 2023",
            "tags": [
              {
                "label": "frontend",
                "permalink": "/wljs-docs/blog/tags/frontend"
              },
              {
                "label": "html",
                "permalink": "/wljs-docs/blog/tags/html"
              }
            ],
            "readingTime": 0.1,
            "hasTruncateMarker": true,
            "authors": [
              {
                "name": "Kirill Vasin",
                "title": "Maintainer",
                "url": "https://github.com/JerryI",
                "imageURL": "https://avatars.githubusercontent.com/u/4111822?s=48&v=4",
                "key": "jerryi"
              }
            ],
            "frontMatter": {
              "slug": "hydrator-xp",
              "title": "Hydrator experimantal feature",
              "authors": "jerryi",
              "tags": [
                "frontend",
                "html"
              ],
              "enableComments": true
            },
            "unlisted": false,
            "prevItem": {
              "title": "Realtime path-tracing",
              "permalink": "/wljs-docs/blog/rtx-intro"
            },
            "nextItem": {
              "title": "Interactive curves fitting example",
              "permalink": "/wljs-docs/blog/curvesfit-example"
            }
          },
          "content": "Here is an experimental feature provided by [wljs-hydrator](https://github.com/JerryI/wljs-hydrator) engine, that simply renders frontend object into a given `div` element\n\n<!--truncate-->"
        },
        {
          "id": "curvesfit-example",
          "metadata": {
            "permalink": "/wljs-docs/blog/curvesfit-example",
            "source": "@site/blog/2023-07-14-curves/index.md",
            "title": "Interactive curves fitting example",
            "description": "Here we will try to recreate a simple example of the interactive curves fitting based on Fit function provided by Wolfram Mathematica.",
            "date": "2023-07-14T00:00:00.000Z",
            "formattedDate": "July 14, 2023",
            "tags": [
              {
                "label": "frontend",
                "permalink": "/wljs-docs/blog/tags/frontend"
              },
              {
                "label": "dynamics",
                "permalink": "/wljs-docs/blog/tags/dynamics"
              },
              {
                "label": "fitting",
                "permalink": "/wljs-docs/blog/tags/fitting"
              }
            ],
            "readingTime": 1.24,
            "hasTruncateMarker": true,
            "authors": [
              {
                "name": "Kirill Vasin",
                "title": "Maintainer",
                "url": "https://github.com/JerryI",
                "imageURL": "https://avatars.githubusercontent.com/u/4111822?s=48&v=4",
                "key": "jerryi"
              }
            ],
            "frontMatter": {
              "slug": "curvesfit-example",
              "title": "Interactive curves fitting example",
              "authors": "jerryi",
              "tags": [
                "frontend",
                "dynamics",
                "fitting"
              ],
              "enableComments": true
            },
            "unlisted": false,
            "prevItem": {
              "title": "Hydrator experimantal feature",
              "permalink": "/wljs-docs/blog/hydrator-xp"
            },
            "nextItem": {
              "title": "Interactive graphics example",
              "permalink": "/wljs-docs/blog/balls-example"
            }
          },
          "content": "![](ezgif.com-video-to-gif-18.gif)\n\n\nHere we will try to recreate a simple example of the interactive curves fitting based on `Fit` function provided by Wolfram Mathematica.\n<!--truncate-->\n\n## WLJS Frontend version\n\nFor the demonstration one can input the data points by clicking on an empty canvas\n\n```mathematica\nRGBColor[1,1,1],\n  EventHandler[Rectangle[{-10,10}, {10,-10}], {\"click\"->Function[xy, \n    points = Append[points, xy]; \n    fit = lineFit[points]\n]}],\n...\n```\n\nAn event listener is attached to the rectangle at the background. Each time user clicks on it, it will append a new point to the array and recalculate fitter curve using defined `lineFit` function.\n\nTo draw our points and fitted curve, we need one line of a code\n\n```mathematica\nPointSize[0.1],\n  Red, Point[points//Offload], Cyan, Line[fit//Offload]\n```\n\nThen, let us define the fitting function\n\n```mathematica\nfit = {};\npoints = {};\norder = 1;\n\nlineFit[points_] := With[{o = Table[CM6Superscript[x, i], {i, 0, order}]},\n  With[{f = Fit[points, o, x]}, \n    Table[{x, f}, {x, -1,1, 0.025}]\n  ]\n]\n```\n\nBasically,  it is done. However one can make it more interesting if we consider a control slider for changing the order of a curve as well as a clear button\n\n*in a new cell*\n```mathematica\nFunction[data, points = {}; fit = {};] // InputButton[\"Clear\"]\nFunction[data, order = data; fit = lineFit[points]] // InputRange[1, 5, 1]\n```\n\n:::info\nA shortcut to assign a `handler` function to an event-object \n```mathematica\nhandler // EventObject[...]\n```\nis an equivalent of\n```mathematica\nEventHandler[EventObject[...], handler]\n```\n:::\n\nHere the full code\n\n\n\nLinks\n- [Download Notebook](CurvesFit.wln)\n\nThanks for reading! See you next time"
        },
        {
          "id": "balls-example",
          "metadata": {
            "permalink": "/wljs-docs/blog/balls-example",
            "source": "@site/blog/2023-07-13-balls/index.md",
            "title": "Interactive graphics example",
            "description": "Here we will try to recreate a simple example of the interactive plot, where bouncing dots are created using mouse clicks on an empty canvas.",
            "date": "2023-07-13T00:00:00.000Z",
            "formattedDate": "July 13, 2023",
            "tags": [
              {
                "label": "frontend",
                "permalink": "/wljs-docs/blog/tags/frontend"
              },
              {
                "label": "dynamics",
                "permalink": "/wljs-docs/blog/tags/dynamics"
              }
            ],
            "readingTime": 2.195,
            "hasTruncateMarker": true,
            "authors": [
              {
                "name": "Kirill Vasin",
                "title": "Maintainer",
                "url": "https://github.com/JerryI",
                "imageURL": "https://avatars.githubusercontent.com/u/4111822?s=48&v=4",
                "key": "jerryi"
              }
            ],
            "frontMatter": {
              "slug": "balls-example",
              "title": "Interactive graphics example",
              "authors": "jerryi",
              "tags": [
                "frontend",
                "dynamics"
              ],
              "enableComments": true
            },
            "unlisted": false,
            "prevItem": {
              "title": "Interactive curves fitting example",
              "permalink": "/wljs-docs/blog/curvesfit-example"
            },
            "nextItem": {
              "title": "Introducing Events shortcuts",
              "permalink": "/wljs-docs/blog/event-shortcuts"
            }
          },
          "content": "![](ezgif.com-video-to-gif-16.gif)\n\n\nHere we will try to recreate a simple example of the interactive plot, where bouncing dots are created using mouse clicks on an empty canvas.\n<!--truncate-->\n\n## Mathematica's version\n\nOriginally it was designed for Wolfram Mathematica by Wolfram Research group. Let us have a look at the original core first\n\n```mathematica\nFramed@DynamicModule[{points = {}, vel = {}}, \n  EventHandler[\n  \n   Graphics[{PointSize[0.1], \n\t   Point[Dynamic[{vel, points} = animate[vel, points]; points]]}\n\t, PlotRange -> {{-1, 1}, {-1, 1}}], \n   \n   \"MouseDown\" :> ({points, vel} = \n      addPoint[MousePosition[\"Graphics\"], points, vel])\n  ]\n]\n```\n\nIt uses `DynamicModule` to localize dynamic variables and a set of two functions `animate` to recalculate new positions and `addPoint`.\n\n[Download Notebook](Balls.nb)\n\n## WLJS Frontend version\n\nTo recreate this using WLJS Frontend we need to change the way how dynamics is processed. Firstly, we need an event-listener object to get the place where a user clicked\n\n```mathematica\nGraphics[{\n\tRGBColor[1,1,1],\n\tEventHandler[Rectangle[{-10,10},{10,-10}], {\"click\"->addPoint}],\n\tRGBColor[0,0,0], PointSize[0.1],\n\tPoint[points // Offload]\n}]\n```\n\nHere it creates a white rectangle in the background to add event-listener for clicks. And a global variable `points` is bounded to `Point` expression using `Offload`.\n\n:::danger\n`EventHandler` expression does not fully correspond to the one used in Wolfram Mathematica\n:::\n\n:::info\nDynamic binding is possible only using global variables.\n:::\n\nThen, we need an function, that adds dots to an array\n\n```mathematica\npoints = {{0,0}};\nvel = {RandomReal[{-1,1}]};\n\naddPoint[xy_] := (points = Append[points, xy]; vel = Append[vel, RandomReal[{-1,1},2]]);\n```\n\nNow it should add new dots, when we click on a canvas\n\n![](ezgif.com-video-to-gif-17.gif)\n\n\nOne thing is missing - animation. One need to update `points` symbol with a new positions and etc. The corresponding function will be\n\n```mathematica\npoints = {{0,0}};\nvel = {RandomReal[{-1,1}]};\n\naddPoint[xy_] := (points = Append[points, xy]; vel = Append[vel, RandomReal[{-1,1},2]]);\n\nanimate[i_] := points = MapIndexed[(If[Max[#1//Abs] > 1.2, vel[[#2//First]] = - vel[[#2//First]]]; #1 + 0.1 vel[[#2//First]])&, points];\n```\n\nInstead of using timers, one can assign the an event handler to the transition animation, which is provided by [wljs-graphics-d3](https://github.com/JerryI/wljs-graphics-d3) library. \n:::info\nIO operations between the frontend and a server cannot run at full speed giving 60FPS, therefore the data is interpolated using the time-constant provided by the option to the `Graphics` expression called `\"TransitionDuration\"`.\n:::\n\nTo capture the transitions we need a `MiddlewareHandler`\n\n```mathematica\nPoint[MiddlewareHandler[points//Offload, \"end\"->animate, \"Threshold\"->0.2]]\n```\n\nIt stands in between the drawing function and an updatable symbol. Threshold value specifies when the event `animate` will be fired, i.e. `1` means after the transition and anything less means, that it will be fired a bit early. It is used to compensate the latency of the network making the animation smoother. \n\nHere the full code\n\n\n\nLinks\n- [Download Notebook](Balls.wln)\n\nThanks for reading! See you next time"
        },
        {
          "id": "event-shortcuts",
          "metadata": {
            "permalink": "/wljs-docs/blog/event-shortcuts",
            "source": "@site/blog/2023-06-10-events.md",
            "title": "Introducing Events shortcuts",
            "description": "One of the paradigm of WLJS Frontend is an event-based approach. Any sliders, buttons are event generators, that produce EventObject[]. In order to simplify or mimic Mathematica's way of binding symbols to input elements Assign keyword was introduced.",
            "date": "2023-06-10T00:00:00.000Z",
            "formattedDate": "June 10, 2023",
            "tags": [
              {
                "label": "frontend",
                "permalink": "/wljs-docs/blog/tags/frontend"
              },
              {
                "label": "dynamics",
                "permalink": "/wljs-docs/blog/tags/dynamics"
              },
              {
                "label": "events",
                "permalink": "/wljs-docs/blog/tags/events"
              }
            ],
            "readingTime": 0.51,
            "hasTruncateMarker": true,
            "authors": [
              {
                "name": "Kirill Vasin",
                "title": "Maintainer",
                "url": "https://github.com/JerryI",
                "imageURL": "https://avatars.githubusercontent.com/u/4111822?s=48&v=4",
                "key": "jerryi"
              }
            ],
            "frontMatter": {
              "slug": "event-shortcuts",
              "title": "Introducing Events shortcuts",
              "authors": "jerryi",
              "tags": [
                "frontend",
                "dynamics",
                "events"
              ],
              "enableComments": true
            },
            "unlisted": false,
            "prevItem": {
              "title": "Interactive graphics example",
              "permalink": "/wljs-docs/blog/balls-example"
            },
            "nextItem": {
              "title": "Introducing middleware event handlers",
              "permalink": "/wljs-docs/blog/middleware-example"
            }
          },
          "content": "One of the paradigm of WLJS Frontend is an event-based approach. Any sliders, buttons are event generators, that produce `EventObject[<|...|>]`. In order to simplify or mimic Mathematica's way of binding symbols to input elements `Assign` keyword was introduced.\n\nInstead of \n\n```mathematica\nInputRange[0,1, 0.1]\nEventHandler[%, Function[data, x = data]]\n```\n\none can write\n\n```mathematica\nInputRange[0,1, 0.1] // Assign[x]\n```\n\nThe result will be the same\n<!--truncate-->\nGoing further, one should note, that \n\n:::info\n`EventHandler` or `Assign` returns the same object `EventObject[<||>]` as it has on input. On cell's output `EventObject[<|\"view\"->...|>]` a field `view` will be displayed by automatic converting it into `FrontEndExecutable`.\n:::"
        },
        {
          "id": "middleware-example",
          "metadata": {
            "permalink": "/wljs-docs/blog/middleware-example",
            "source": "@site/blog/2023-05-11-middleware/index.md",
            "title": "Introducing middleware event handlers",
            "description": "To describe the idea of a new tool better, it is good to start from the initial problem.",
            "date": "2023-05-11T00:00:00.000Z",
            "formattedDate": "May 11, 2023",
            "tags": [
              {
                "label": "frontend",
                "permalink": "/wljs-docs/blog/tags/frontend"
              },
              {
                "label": "dynamics",
                "permalink": "/wljs-docs/blog/tags/dynamics"
              }
            ],
            "readingTime": 3.71,
            "hasTruncateMarker": true,
            "authors": [
              {
                "name": "Kirill Vasin",
                "title": "Maintainer",
                "url": "https://github.com/JerryI",
                "imageURL": "https://avatars.githubusercontent.com/u/4111822?s=48&v=4",
                "key": "jerryi"
              }
            ],
            "frontMatter": {
              "slug": "middleware-example",
              "title": "Introducing middleware event handlers",
              "authors": "jerryi",
              "tags": [
                "frontend",
                "dynamics"
              ],
              "enableComments": true
            },
            "unlisted": false,
            "prevItem": {
              "title": "Introducing Events shortcuts",
              "permalink": "/wljs-docs/blog/event-shortcuts"
            },
            "nextItem": {
              "title": "Introducing metamarkers",
              "permalink": "/wljs-docs/blog/meta-example"
            }
          },
          "content": "![](ezgif.com-video-to-gif-25.gif)\n\n\nTo describe the idea of a new tool better, it is good to start from the initial problem. \n\n\n\n\n\n\nThe data transfer via `ExpressionJSON` representation over the WebSocket protocol adds a significant latency. What if we want to implement __real-time visualization with a least  $\\sim 30FPS$ ?__\n\n<!--truncate-->\n\n## Interpolation\nA standard library [wljs-graphics-d3](https://github.com/JerryI/wljs-graphics-d3) based on D3.js provides a decent transition mechanism, that makes a nice animated transitions from the old dataset to a new one perfectly in-sync with browser's refresh rate.\n\nLet us have a look at the example __with no interpolation involved__\n\n```mathematica\np = {-1,0};\nGraphics[{PointSize[0.1], Point[{p} // Offload]}, \"TransitionDuration\"->0.1]\n```\n\nBy updating the position \n\n```mathematica\nDo[\n  p = {x, Cos[10 x]}; \n  \n  (* simulate load *)\n  Pause[0.2];\n, {x,-1,1,0.1}]\n```\n\nwe will see the following\n\n![](ezgif.com-video-to-gif-19.gif)\n\nTo __enable the interpolation__ specify `TransitionDuration`\n\n```mathematica\nGraphics[{Cyan, PointSize[0.1],Point[{p} // Offload]}, ImageSize->{600,100}, \"TransitionDuration\"->300, \"TransitionType\"->\"Linear\"]\n```\n\nNow the transition time overlaps with our `Pause[0.2]` time period, that results in a kinda smooth behaviour. \n\n![](ezgif.com-video-to-gif-20.gif)\n\nThis approach might work well in a case, __when there is only one object to animate__.\n\n## Event-based approach\n\nHaving a fixed time delay and a loop in general __is a waste of resources__, especially when it comes to many independent animations. \n\nOne can assign all animations to the framerate of the browser, however doing that in a one directional way will introduce some issues, if the calculation time temporary exceeds the given time-window for render.\n\nSince we anyway are using [Interpolation](#Interpolation), one can use its local time-scale to call the next animation frame to be calculated (or data points will be updated).\n\nAssuming *$t_{calc} \\approx t_{transition}$ then we introduce a threshold value (0-1) that specifies, when the event of recalculating the position fires with respect to the duration of transition animation\n\n*threshold = 0.9*\n![](ezgif.com-video-to-gif-22.gif)\n*threshold = 0.5*\n![](ezgif.com-video-to-gif-23.gif)\n*threshold = 0.1*\n![](ezgif.com-video-to-gif-24.gif)\n\nThe good thing about it is that \n:::info\nA new transition will not occur if the calculation has not finished. \n:::\n\nA threshold and transition duration values can be adjusted to get the maximum smoothness and performance based on the network conditions and CPU load.\n\n### Implementation\nOne need to have an access to the transition process happening at the particular graphics element? Why not just\n\n```mathematica\nEventHandler[Point[p // Offload], \"transition\"->calc] ???\n```\n\nHere is why.\n\nFor the perspective of Javascript D3.js library used in frontend, when one calls\n\n*regular evaluation*\n```mathematica\nPoint[p // Offload]\n```\n```javascript\n> d3.Selection<SVGElement, unknown, HTMLElement, any>\n```\n\n*update method*\n```mathematica\nPoint[p // Offload]\n```\n```javascript\n> d3.Transition<GElement extends BaseType, Datum, PElement extends BaseType, PDatum>\n```\n\nHere one could attach to the returned object via\n\n```javascript\n(object) => {\n\tlet state = false;\n\tobject.tween(uid, function (d) {\n\t\treturn function (t) {\n\t\t\tif (t >= threshold && !state) {\n\t\t\t\tserver.emitt(uid, `True`);\n\t\t\t\tstate = true;\n\t\t\t}\n\t\t}\n\t}))\n}\n```\n\nYou have to attach it every-time when a transition occur, since each time this is a new object.\n\nHowever, there is a problem\n\n:::info\nDynamic binding happens only between containers (virtual or real), i.e. `p` and `Point` expressions\n\n```mathematica\nOurHandler[Point[p // Offload]] // Graphics\n```\n\nThe upper expression `Point` scopes all variables. When `p` updates, `OurHandler` or `Graphics` expression __will not be evaluated__!\n:::\n\nIt means, that in general `EventHandler` method, where the event-binding is executed from outside to inside works well for the static evaluation, but events generated during dynamic updates will not be captured!\n\n__We need to bind from inside__\n\n```mathematica\nPoint[MiddlewareHandler[p // Offload, \"end\"->calc]] // Graphics\n```\n\nNow the whole expression `Point` including all its guts will be evaluated during the dynamic updates of any inner expressions.\n\nWith some tweaked added to the WLJS Interpreter, I (@JerryI) managed to make it work properly as intended. \n\n### How to use\nThere is only one event type has been implemented by now.\n\n```mathematica\nPoint[MiddlewareHandler[data // Offload, \"end\"->calc, \"Threshold\"->0.5]] // Graphics\n```\n\nor\n\n```mathematica\nLine[MiddlewareHandler[data // Offload, \"end\"->calc, \"Threshold\"->0.5]]\n```\n\nor even for the transformations\n\n```mathematica\nTranslate[MiddlewareHandler[Point[{0,0}], \"end\"->calc], data // Offload]\n```\n\nwhere\n\n```mathematica\ncalc[garbage_] := data = recalculate[data];\n```\n\n:::tip\nPlace `MiddlewareHandler` inside any expression, of which you want to track the transition process. It acts as `Identity` operator, i.e. allows safely wrapping around any other expression. \n:::\n\n:::info\n`MiddlewareHandler` fires the first (zero) event just when it has been created\n:::\n\n## Making 2D Game\nNow we can use this trick for any projectiles in game animations! Each created object will be handled by its own `MiddlewareHandler`\n\n\n\nDownload notebook\n- [Baster.wln](Baster.wln)"
        },
        {
          "id": "meta-example",
          "metadata": {
            "permalink": "/wljs-docs/blog/meta-example",
            "source": "@site/blog/2023-04-20-placed/index.md",
            "title": "Introducing metamarkers",
            "description": ".png)",
            "date": "2023-04-20T00:00:00.000Z",
            "formattedDate": "April 20, 2023",
            "tags": [
              {
                "label": "evaluation",
                "permalink": "/wljs-docs/blog/tags/evaluation"
              },
              {
                "label": "metamarkers",
                "permalink": "/wljs-docs/blog/tags/metamarkers"
              }
            ],
            "readingTime": 1.735,
            "hasTruncateMarker": true,
            "authors": [
              {
                "name": "Kirill Vasin",
                "title": "Maintainer",
                "url": "https://github.com/JerryI",
                "imageURL": "https://avatars.githubusercontent.com/u/4111822?s=48&v=4",
                "key": "jerryi"
              }
            ],
            "frontMatter": {
              "slug": "meta-example",
              "title": "Introducing metamarkers",
              "authors": "jerryi",
              "tags": [
                "evaluation",
                "metamarkers"
              ],
              "enableComments": true
            },
            "unlisted": false,
            "prevItem": {
              "title": "Introducing middleware event handlers",
              "permalink": "/wljs-docs/blog/middleware-example"
            }
          },
          "content": "![](screenshot(5).png)\n\n\nTo add new elements to a plot / graph there is no need in full reevaluation of a cell or using dynamic binding. Since the context of executing is stored together with an object, one can simply evaluate (in-place) the needed expression.\n<!--truncate-->\n\n\n\n\n\n\nLet's have a look at the following example\n\n```mathematica\nPlot[Sin[x], {x,0,Pi}, Epilog->{MetaMarker[\"myplot\"]}]\n```\n\nHere it results in `Graphics` expressions with a bunch of `Line` lying inside, while `Epilog` option just puts the given expression into the end of the same `Graphics` object.\n\n![](Screenshot%202023-07-14%20at%2015.36.32.png)\n\nYou can think about `MetaMarker` as if it was `<div id=\"\">` or class, that allows you to identify that particular object in the given context.\n\nAfter than one can simply execute an expression by using the following expression\n\n```mathematica\nFrontSubmit[{\n\tRGBColor[1,0,1], \n\tLine[{{0,0},{0.4,1}}]\n}, MetaMarker[\"myplot\"]] \n```\n\n:::info\nUsing `FrontSubmit` together with the second argument given as `MetaMarker` will result in evaluation of the expression on frontend in the context and local memory of the marked excutable object.\n:::\n\nAs a result, the graph will show a new feature\n\n![](Screenshot%202023-07-14%20at%2015.37.00.png)\n\nThis does not depend on `Graphics` object, it can be anything in principle.\n\n## Voxel cellular automaton\nFor example, let us create an empty 3D canvas\n\n```mathematica\nGraphics3D[{Cuboid[{1,1,0}], MetaMarker[\"marker\"]},  \"Lighting\"->None, \"Lightmap\"->\"https://raw.githubusercontent.com/JerryI/Mathematica-ThreeJS-graphics-engine/master/assets/PureSky.hdr\", \"ViewProjection\"->\"Perspective\"]\n```\n\nThen using build-in cellular automaton, we can visualize it lively in 3D using simple `Cuboid` shapes with different colors\n\n```mathematica\nsize = {10,10};\nboard = CellularAutomaton[{6, {2, 1}, {1, 1}}, {{{1}}, 0}, 50]//First;\nsize = board//Dimensions\n\nz = 20;\n\niterate := (\n board = CellularAutomaton[{6, {2, 1}, {1, 1}}, board];\n\n Table[\n  If[board[[i+size[[1]]/2 // Floor,j+size[[2]]/2 // Floor]] > 0, \n    With[{cube = Cuboid[{i,j,z}, {i+1,j+1,z+0.8}], color = {1+i/100,1+i/100,(z+10)/10}},\n    \n      FrontSubmit[{ RGBColor@color, cube}, MetaMarker[\"marker\"]];\n      Pause[0.02];\n      \n    ]\n  ];\n , {i, -size[[1]]/2//Floor, size[[1]]/2//Floor}, {j, -size[[2]]/2//Floor, size[[2]]/2//Floor}];\n z = z - 0.8;\n);\n```\n\nIf a cell is 1, then it will be a cube on that place. By calling\n\n```mathematica\nDo[iterate //Quiet;, {i,1,10}];\n```\n\nOne can observe in real time the following\n\n![](ezgif.com-optimize-10.gif)\n\nThe full code is presented below\n\n\n\nYou can also download this notebook via a link\n- [VoxelAutomata.wln](VoxelAutomata.wln)\n\nThank you for reading! See you"
        }
      ],
      "blogListPaginated": [
        {
          "items": [
            "esm-into",
            "int-snippets",
            "feobjects-example",
            "projector-intro",
            "imageraster",
            "event-advanced",
            "notestore",
            "axes-label",
            "intro-controls-2d-graphics",
            "intro-transform-3d"
          ],
          "metadata": {
            "permalink": "/wljs-docs/blog",
            "page": 1,
            "postsPerPage": 10,
            "totalPages": 2,
            "totalCount": 19,
            "nextPage": "/wljs-docs/blog/page/2",
            "blogDescription": "Blog",
            "blogTitle": "Blog"
          }
        },
        {
          "items": [
            "practice-integration",
            "practical-working-withlibs",
            "rtx-intro",
            "hydrator-xp",
            "curvesfit-example",
            "balls-example",
            "event-shortcuts",
            "middleware-example",
            "meta-example"
          ],
          "metadata": {
            "permalink": "/wljs-docs/blog/page/2",
            "page": 2,
            "postsPerPage": 10,
            "totalPages": 2,
            "totalCount": 19,
            "previousPage": "/wljs-docs/blog",
            "blogDescription": "Blog",
            "blogTitle": "Blog"
          }
        }
      ],
      "blogTags": {
        "/wljs-docs/blog/tags/frontend": {
          "label": "frontend",
          "items": [
            "feobjects-example",
            "projector-intro",
            "event-advanced",
            "notestore",
            "axes-label",
            "practice-integration",
            "practical-working-withlibs",
            "rtx-intro",
            "hydrator-xp",
            "curvesfit-example",
            "balls-example",
            "event-shortcuts",
            "middleware-example"
          ],
          "permalink": "/wljs-docs/blog/tags/frontend",
          "pages": [
            {
              "items": [
                "feobjects-example",
                "projector-intro",
                "event-advanced",
                "notestore",
                "axes-label",
                "practice-integration",
                "practical-working-withlibs",
                "rtx-intro",
                "hydrator-xp",
                "curvesfit-example"
              ],
              "metadata": {
                "permalink": "/wljs-docs/blog/tags/frontend",
                "page": 1,
                "postsPerPage": 10,
                "totalPages": 2,
                "totalCount": 13,
                "nextPage": "/wljs-docs/blog/tags/frontend/page/2",
                "blogDescription": "Blog",
                "blogTitle": "Blog"
              }
            },
            {
              "items": [
                "balls-example",
                "event-shortcuts",
                "middleware-example"
              ],
              "metadata": {
                "permalink": "/wljs-docs/blog/tags/frontend/page/2",
                "page": 2,
                "postsPerPage": 10,
                "totalPages": 2,
                "totalCount": 13,
                "previousPage": "/wljs-docs/blog/tags/frontend",
                "blogDescription": "Blog",
                "blogTitle": "Blog"
              }
            }
          ],
          "unlisted": false
        },
        "/wljs-docs/blog/tags/dynamics": {
          "label": "dynamics",
          "items": [
            "feobjects-example",
            "practice-integration",
            "curvesfit-example",
            "balls-example",
            "event-shortcuts",
            "middleware-example"
          ],
          "permalink": "/wljs-docs/blog/tags/dynamics",
          "pages": [
            {
              "items": [
                "feobjects-example",
                "practice-integration",
                "curvesfit-example",
                "balls-example",
                "event-shortcuts",
                "middleware-example"
              ],
              "metadata": {
                "permalink": "/wljs-docs/blog/tags/dynamics",
                "page": 1,
                "postsPerPage": 10,
                "totalPages": 1,
                "totalCount": 6,
                "blogDescription": "Blog",
                "blogTitle": "Blog"
              }
            }
          ],
          "unlisted": false
        },
        "/wljs-docs/blog/tags/graphics": {
          "label": "graphics",
          "items": [
            "imageraster",
            "axes-label",
            "intro-controls-2d-graphics",
            "rtx-intro"
          ],
          "permalink": "/wljs-docs/blog/tags/graphics",
          "pages": [
            {
              "items": [
                "imageraster",
                "axes-label",
                "intro-controls-2d-graphics",
                "rtx-intro"
              ],
              "metadata": {
                "permalink": "/wljs-docs/blog/tags/graphics",
                "page": 1,
                "postsPerPage": 10,
                "totalPages": 1,
                "totalCount": 4,
                "blogDescription": "Blog",
                "blogTitle": "Blog"
              }
            }
          ],
          "unlisted": false
        },
        "/wljs-docs/blog/tags/events": {
          "label": "events",
          "items": [
            "event-advanced",
            "event-shortcuts"
          ],
          "permalink": "/wljs-docs/blog/tags/events",
          "pages": [
            {
              "items": [
                "event-advanced",
                "event-shortcuts"
              ],
              "metadata": {
                "permalink": "/wljs-docs/blog/tags/events",
                "page": 1,
                "postsPerPage": 10,
                "totalPages": 1,
                "totalCount": 2,
                "blogDescription": "Blog",
                "blogTitle": "Blog"
              }
            }
          ],
          "unlisted": false
        },
        "/wljs-docs/blog/tags/graphics-3-d": {
          "label": "graphics3d",
          "items": [
            "intro-transform-3d"
          ],
          "permalink": "/wljs-docs/blog/tags/graphics-3-d",
          "pages": [
            {
              "items": [
                "intro-transform-3d"
              ],
              "metadata": {
                "permalink": "/wljs-docs/blog/tags/graphics-3-d",
                "page": 1,
                "postsPerPage": 10,
                "totalPages": 1,
                "totalCount": 1,
                "blogDescription": "Blog",
                "blogTitle": "Blog"
              }
            }
          ],
          "unlisted": false
        },
        "/wljs-docs/blog/tags/practice": {
          "label": "practice",
          "items": [
            "practice-integration"
          ],
          "permalink": "/wljs-docs/blog/tags/practice",
          "pages": [
            {
              "items": [
                "practice-integration"
              ],
              "metadata": {
                "permalink": "/wljs-docs/blog/tags/practice",
                "page": 1,
                "postsPerPage": 10,
                "totalPages": 1,
                "totalCount": 1,
                "blogDescription": "Blog",
                "blogTitle": "Blog"
              }
            }
          ],
          "unlisted": false
        },
        "/wljs-docs/blog/tags/devnotes": {
          "label": "devnotes",
          "items": [
            "practical-working-withlibs"
          ],
          "permalink": "/wljs-docs/blog/tags/devnotes",
          "pages": [
            {
              "items": [
                "practical-working-withlibs"
              ],
              "metadata": {
                "permalink": "/wljs-docs/blog/tags/devnotes",
                "page": 1,
                "postsPerPage": 10,
                "totalPages": 1,
                "totalCount": 1,
                "blogDescription": "Blog",
                "blogTitle": "Blog"
              }
            }
          ],
          "unlisted": false
        },
        "/wljs-docs/blog/tags/html": {
          "label": "html",
          "items": [
            "hydrator-xp"
          ],
          "permalink": "/wljs-docs/blog/tags/html",
          "pages": [
            {
              "items": [
                "hydrator-xp"
              ],
              "metadata": {
                "permalink": "/wljs-docs/blog/tags/html",
                "page": 1,
                "postsPerPage": 10,
                "totalPages": 1,
                "totalCount": 1,
                "blogDescription": "Blog",
                "blogTitle": "Blog"
              }
            }
          ],
          "unlisted": false
        },
        "/wljs-docs/blog/tags/fitting": {
          "label": "fitting",
          "items": [
            "curvesfit-example"
          ],
          "permalink": "/wljs-docs/blog/tags/fitting",
          "pages": [
            {
              "items": [
                "curvesfit-example"
              ],
              "metadata": {
                "permalink": "/wljs-docs/blog/tags/fitting",
                "page": 1,
                "postsPerPage": 10,
                "totalPages": 1,
                "totalCount": 1,
                "blogDescription": "Blog",
                "blogTitle": "Blog"
              }
            }
          ],
          "unlisted": false
        },
        "/wljs-docs/blog/tags/evaluation": {
          "label": "evaluation",
          "items": [
            "meta-example"
          ],
          "permalink": "/wljs-docs/blog/tags/evaluation",
          "pages": [
            {
              "items": [
                "meta-example"
              ],
              "metadata": {
                "permalink": "/wljs-docs/blog/tags/evaluation",
                "page": 1,
                "postsPerPage": 10,
                "totalPages": 1,
                "totalCount": 1,
                "blogDescription": "Blog",
                "blogTitle": "Blog"
              }
            }
          ],
          "unlisted": false
        },
        "/wljs-docs/blog/tags/metamarkers": {
          "label": "metamarkers",
          "items": [
            "meta-example"
          ],
          "permalink": "/wljs-docs/blog/tags/metamarkers",
          "pages": [
            {
              "items": [
                "meta-example"
              ],
              "metadata": {
                "permalink": "/wljs-docs/blog/tags/metamarkers",
                "page": 1,
                "postsPerPage": 10,
                "totalPages": 1,
                "totalCount": 1,
                "blogDescription": "Blog",
                "blogTitle": "Blog"
              }
            }
          ],
          "unlisted": false
        }
      },
      "blogTagsListPath": "/wljs-docs/blog/tags"
    }
  },
  "docusaurus-plugin-content-pages": {
    "default": null
  },
  "docusaurus-plugin-debug": {},
  "docusaurus-theme-classic": {},
  "docusaurus-lunr-search": {},
  "docusaurus-theme-mermaid": {},
  "docusaurus-bootstrap-plugin": {},
  "docusaurus-mdx-fallback-plugin": {}
}