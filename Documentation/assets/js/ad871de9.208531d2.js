"use strict";(self.webpackChunkwlx_docs=self.webpackChunkwlx_docs||[]).push([[112],{23476:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>t,contentTitle:()=>c,default:()=>h,frontMatter:()=>a,metadata:()=>o,toc:()=>d});var r=i(17624),s=i(4552);const a={env:["WLJS"],package:"wljs-graphics-d3",update:!0,source:"https://github.com/JerryI/wljs-graphics-d3/blob/dev/src/kernel.js"},c=void 0,o={id:"frontend/Reference/Graphics/Image",title:"Image",description:"Represents a raster image and plots the list of pixel's colors to a canvas used in notebooks",source:"@site/docs/frontend/Reference/Graphics/Image.md",sourceDirName:"frontend/Reference/Graphics",slug:"/frontend/Reference/Graphics/Image",permalink:"/frontend/Reference/Graphics/Image",draft:!1,unlisted:!1,tags:[],version:"current",lastUpdatedAt:1727447848e3,frontMatter:{env:["WLJS"],package:"wljs-graphics-d3",update:!0,source:"https://github.com/JerryI/wljs-graphics-d3/blob/dev/src/kernel.js"},sidebar:"tutorialSidebar",previous:{title:"Hue",permalink:"/frontend/Reference/Graphics/Hue"},next:{title:"Inset",permalink:"/frontend/Reference/Graphics/Inset"}},t={},d=[{value:"Options",id:"options",level:2},{value:"<code>Magnification</code>",id:"magnification",level:3},{value:"<code>ImageSize</code>",id:"imagesize",level:3},{value:"<code>Antialiasing</code>",id:"antialiasing",level:3},{value:"Examples",id:"examples",level:2},{value:"Direct",id:"direct",level:3},{value:"Indirect",id:"indirect",level:3},{value:"Dynamics",id:"dynamics",level:2},{value:"Supported output forms",id:"supported-output-forms",level:2}];function l(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.M)(),...e.components},{Wl:i}=n;return i||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Wl",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"Represents a raster image and plots the list of pixel's colors to a canvas used in notebooks"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-mathematica",children:'Image[{row1_List, row2_List...} | n_NumericArray, encoding_:"Real32"]\n'})}),"\n",(0,r.jsxs)(n.p,{children:["where each ",(0,r.jsx)(n.code,{children:"row"})," is a list of pixel colors. It it better to pass ",(0,r.jsx)(n.code,{children:"NumericArray"})," for the best performance."]}),"\n",(0,r.jsxs)(n.p,{children:["The following ",(0,r.jsx)(n.code,{children:"encoding"})," is supported"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:'"Real32"'})," each pixel is encoded using a real value from 0 up-to 1. Corresponding ",(0,r.jsx)(n.code,{children:"NumericArray"})," format is ",(0,r.jsx)(n.code,{children:'"Real32"'})," (if applicable)."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:'"Byte"'})," each pixel is encoded using integer value from 0 up-to 255. Corresponding ",(0,r.jsx)(n.code,{children:"NumericArray"})," format is ",(0,r.jsx)(n.code,{children:'"UnsignedInteger8"'}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:'"Bit"'})," each pixel is either ",(0,r.jsx)(n.code,{children:"1"})," or ",(0,r.jsx)(n.code,{children:"0"})," (integer). Corresponding ",(0,r.jsx)(n.code,{children:"NumericArray"})," is ",(0,r.jsx)(n.code,{children:'"UnsignedInteger8"'})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"The first two"})," can be divided into groups by pixel format"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"{R,G,B}"})," - each pixel is a list of numbers"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"{R,G,B,A}"})," - each pixel is a list of numbers"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"I"})," grayscale - each pixel is a single number"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"options",children:"Options"}),"\n",(0,r.jsx)(n.h3,{id:"magnification",children:(0,r.jsx)(n.code,{children:"Magnification"})}),"\n",(0,r.jsx)(n.p,{children:"Magnifies by an integer factor original pixels provided by an array"}),"\n",(0,r.jsx)(n.h3,{id:"imagesize",children:(0,r.jsx)(n.code,{children:"ImageSize"})}),"\n",(0,r.jsxs)(n.p,{children:["Acts similar to ",(0,r.jsx)(n.code,{children:"Magnification"})," and scales an image to match the width of provided size"]}),"\n",(0,r.jsx)(n.h3,{id:"antialiasing",children:(0,r.jsx)(n.code,{children:"Antialiasing"})}),"\n",(0,r.jsxs)(n.p,{children:["By the default is ",(0,r.jsx)(n.code,{children:"True"}),", which forces to use bilinear approximation when an image is shown scaled."]}),"\n",(0,r.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,r.jsx)(n.h3,{id:"direct",children:"Direct"}),"\n",(0,r.jsx)(n.p,{children:"Show multiple iterations of a cellular automaton as a binary image"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-mathematica",children:"Image[CellularAutomaton[30, {{1}, 0}, 40], Magnification->4]\n"})}),"\n",(0,r.jsx)(i,{children:"Image[CellularAutomaton[30, {{1}, 0}, 40]]"}),"\n",(0,r.jsx)(n.p,{children:"A random noise"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-mathematica",children:"Image[Table[RandomInteger[{0,1}], {i, 200}, {j, 350}]]\n"})}),"\n",(0,r.jsx)(n.p,{children:"adding a color"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-mathematica",children:'Image[Table[RandomInteger[{0,255}, 3], {i, 200}, {j, 350}], "Byte"]\n'})}),"\n",(0,r.jsx)(i,{children:"Image[Table[RandomInteger[{0,255}, 3], {i, 200}, {j, 350}]]"}),"\n",(0,r.jsxs)(n.admonition,{type:"tip",children:[(0,r.jsxs)(n.p,{children:["Use ",(0,r.jsx)(n.code,{children:"NumericArray"})," to provide and handle pixel data. It has to be a nested list of lists as usual. There is a following correspondence.  ",(0,r.jsx)(n.code,{children:"Byte"})," and ",(0,r.jsx)(n.code,{children:"UnsignedInteger8"})," combo is the most efficient.\n::"]}),(0,r.jsx)(n.h3,{id:"indirect",children:"Indirect"}),(0,r.jsxs)(n.p,{children:["One can also use ",(0,r.jsx)(n.code,{children:"Rasterize"})," function to show any expressions as an image"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-mathematica",children:"x + y // Rasterize\n"})}),(0,r.jsx)(i,{children:"x + y // Rasterize"}),(0,r.jsx)(n.h2,{id:"dynamics",children:"Dynamics"}),(0,r.jsx)(n.p,{children:"It does support dynamic variables. For example"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-mathematica",children:'Puffer = {{1, 4}, {2, 5}, {3, 1}, {3, 5}, {4, 2}, {4, 3}, {4, 4}, {4,\n     5}, {8, 1}, {9, 2}, {9, 3}, {10, 3}, {11, 3}, {12, 2}, {15, 1}, {15,\n     4}, {16, 5}, {17, 1}, {17, 5}, {18, 2}, {18, 3}, {18, 4}, {18, 5}};\n\nboard = NumericArray[\n  CellularAutomaton["GameOfLife", {SparseArray[Puffer\n     -> 1], 0}, {{500}}] // First\n, "UnsignedInteger8"];\n\nImage[board // Offload, "Bit", Magnification -> 3, Antialiasing->False]\n'})}),(0,r.jsx)(n.p,{children:"and now we can run the simulation with a desired speed"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-mathematica",children:'task = SetInterval[board = NumericArray[CellularAutomaton["GameOfLife",\n     board // Normal, {{1}}] // First, "UnsignedInteger8"], 50];\n\nSetTimeout[TaskRemove[task], 5000];\n'})}),(0,r.jsxs)(n.p,{children:["See more examples in ",(0,r.jsx)(n.a,{href:"/frontend/Advanced/Dynamics/Raster%20animation",children:"Raster animation"})]}),(0,r.jsx)(n.h2,{id:"supported-output-forms",children:"Supported output forms"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/frontend/Reference/Decorations/StandardForm",children:"StandardForm"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/frontend/Reference/Decorations/WLXForm",children:"WLXForm"})}),"\n"]})]})]})}function h(e={}){const{wrapper:n}={...(0,s.M)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},4552:(e,n,i)=>{i.d(n,{I:()=>o,M:()=>c});var r=i(11504);const s={},a=r.createContext(s);function c(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);