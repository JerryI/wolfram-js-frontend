"use strict";(self.webpackChunkwlx_docs=self.webpackChunkwlx_docs||[]).push([[8808],{57760:e=>{e.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"/2024/05/13/json-llm","metadata":{"permalink":"/blog/2024/05/13/json-llm","source":"@site/blog/2024-05-13-json-llm.md","title":"Converting JSON crystal data to Graphics using AI Assistant","description":"Working in condensed matter physics, I (JerryI) often need to represent crystal structures based on their CIF, JSON, or other formats. Sometimes, it is quite tricky to parse these data files since you also need to determine the given symmetry operation when constructing a unit cell. Here, we will do it using AI Copilot \ud83e\udd16","date":"2024-05-13T00:00:00.000Z","tags":[{"label":"AI","permalink":"/blog/tags/ai"}],"readingTime":3.23,"hasTruncateMarker":true,"authors":[{"name":"Kirill Vasin","title":"Maintainer","url":"https://github.com/JerryI","imageURL":"https://avatars.githubusercontent.com/u/4111822?s=48&v=4","key":"jerryi"}],"frontMatter":{"authors":"jerryi","tags":["AI"],"enableComments":true},"unlisted":false,"nextItem":{"title":"Bad Apple, but it\u2019s Wolfram Language Plot","permalink":"/blog/2024/05/01/badapple"}},"content":"Working in condensed matter physics, I (JerryI) often need to represent crystal structures based on their CIF, JSON, or other formats. Sometimes, it is quite tricky to parse these data files since you also need to determine the given symmetry operation when constructing a unit cell. Here, we will do it using AI Copilot \ud83e\udd16\\n\\n\x3c!--truncate--\x3e\\n\\n## Uranium\\nWhen I was measuring the spectrum of $U O_2$ at the Nijmegen High-Magnetic-Field Lab during the morning shift, I had to make a short summary report and needed a nice plot of a unit cell.\\n\\nGPT models can actually work with JSON data or Associations quite well. The first step is to get a CIF or JSON file on the crystal structure. This can be done using the [Materials Project database](https://next-gen.materialsproject.org/materials/mp-1597). In the summary section, one can export a single JSON file and then import it into our notebook.\\n\\n---\\n\\n```mathematica\\nImport[\\"UO2.json\\", \\"RawJSON\\"]\\n```\\n\\n```mathematica\\n<|\\"@module\\"->\\"pymatgen.core.structure\\",\\"@class\\"->\\"Structure\\",\\"charge\\"->0,\\"lattice\\"-><|\\"matrix\\"->{{5.45401004`,0.`,3.339617969001764`*^-16},{8.770717076887777`*^-16,5.45401004`,3.339617969001764`*^-16},{0.`,0.`,5.45401004`}},\\"pbc\\"->{True,True,True},\\"a\\"->5.45401004`,\\"b\\"->5.45401004`,\\"c\\"->5.45401004`,\\"alpha\\"->90.`,\\"beta\\"->90.`,\\"gamma\\"->90.`,\\"volume\\"->162.23621261866322`|>,\\"properties\\"-><||>,\\"sites\\"->{<|\\"species\\"->{<|\\"element\\"->\\"U\\",\\"oxidation_state\\"->4,\\"spin\\"->Null,\\"occu\\"->1|>},\\"abc\\"->{0.5`,0.`,0.`},\\"xyz\\"->{2.72700502`,0.`,1.669808984500882`*^-16},\\"properties\\"-><||>,\\"label\\"->\\"U4+\\"|>,<|\\"species\\"->{<|\\"element\\"->\\"U\\",\\"oxidation_state\\"->4,\\"spin\\"->Null,\\"occu\\"->1|>},\\"abc\\"->{0.5`,0.5`,0.5`},\\"xyz\\"->{2.7270050200000004`,2.72700502`,2.7270050200000004`},\\"properties\\"-><||>,\\"label\\"->\\"U4+\\"|>,<|\\"species\\"->{<|\\"element\\"->\\"U\\",\\"oxidation_state\\"->4,\\"spin\\"->Null,\\"occu\\"->1|>},\\"abc\\"->{0.`,0.`,0.5`},\\"xyz\\"->{0.`,0.`,2.72700502`},\\"properties\\"-><||>,\\"label\\"->\\"U4+\\"|>,<|\\"species\\"->{<|\\"element\\"->\\"U\\",\\"oxidation_state\\"->4,\\"spin\\"->Null,\\"occu\\"->1|>},\\"abc\\"->{0.`,0.5`,0.`},\\"xyz\\"->{4.3853585384438886`*^-16,2.72700502`,1.669808984500882`*^-16},\\"properties\\"-><||>,\\"label\\"->\\"U4+\\"|>,<|\\"species\\"->{<|\\"element\\"->\\"O\\",\\"oxidation_state\\"->-2,\\"spin\\"->Null,\\"occu\\"->1|>},\\"abc\\"->{0.25`,0.75`,0.75`},\\"xyz\\"->{1.3635025100000007`,4.09050753`,4.09050753`},\\"properties\\"-><||>,\\"label\\"->\\"O2-\\"|>,<|\\"species\\"->{<|\\"element\\"->\\"O\\",\\"oxidation_state\\"->-2,\\"spin\\"->Null,\\"occu\\"->1|>},\\"abc\\"->{0.25`,0.25`,0.75`},\\"xyz\\"->{1.3635025100000002`,1.36350251`,4.09050753`},\\"properties\\"-><||>,\\"label\\"->\\"O2-\\"|>,<|\\"species\\"->{<|\\"element\\"->\\"O\\",\\"oxidation_state\\"->-2,\\"spin\\"->Null,\\"occu\\"->1|>},\\"abc\\"->{0.25`,0.25`,0.25`},\\"xyz\\"->{1.3635025100000002`,1.36350251`,1.3635025100000002`},\\"properties\\"-><||>,\\"label\\"->\\"O2-\\"|>,<|\\"species\\"->{<|\\"element\\"->\\"O\\",\\"oxidation_state\\"->-2,\\"spin\\"->Null,\\"occu\\"->1|>},\\"abc\\"->{0.25`,0.75`,0.25`},\\"xyz\\"->{1.3635025100000007`,4.09050753`,1.3635025100000004`},\\"properties\\"-><||>,\\"label\\"->\\"O2-\\"|>,<|\\"species\\"->{<|\\"element\\"->\\"O\\",\\"oxidation_state\\"->-2,\\"spin\\"->Null,\\"occu\\"->1|>},\\"abc\\"->{0.75`,0.75`,0.25`},\\"xyz\\"->{4.090507530000001`,4.09050753`,1.3635025100000004`},\\"properties\\"-><||>,\\"label\\"->\\"O2-\\"|>,<|\\"species\\"->{<|\\"element\\"->\\"O\\",\\"oxidation_state\\"->-2,\\"spin\\"->Null,\\"occu\\"->1|>},\\"abc\\"->{0.75`,0.25`,0.25`},\\"xyz\\"->{4.09050753`,1.36350251`,1.3635025100000004`},\\"properties\\"-><||>,\\"label\\"->\\"O2-\\"|>,<|\\"species\\"->{<|\\"element\\"->\\"O\\",\\"oxidation_state\\"->-2,\\"spin\\"->Null,\\"occu\\"->1|>},\\"abc\\"->{0.75`,0.25`,0.75`},\\"xyz\\"->{4.09050753`,1.36350251`,4.09050753`},\\"properties\\"-><||>,\\"label\\"->\\"O2-\\"|>,<|\\"species\\"->{<|\\"element\\"->\\"O\\",\\"oxidation_state\\"->-2,\\"spin\\"->Null,\\"occu\\"->1|>},\\"abc\\"->{0.75`,0.75`,0.75`},\\"xyz\\"->{4.090507530000001`,4.09050753`,4.090507530000001`},\\"properties\\"-><||>,\\"label\\"->\\"O2-\\"|>}|>\\n```\\n\\nIt looks quite ugly. Let\'s ask our AI assistant to convert it to a 3D plot using following prompt\\n\\n> Ctrl/Cmd + P\\n\\nand type\\n\\n> read crystal data in focused cell and draw a unit cell using 3D graphics and representing ions as spheres with different colors\\n\\nThe generated cell is following (using `GPT-4o` model Jun 2024)\\n\\n```mathematica\\nModule[{a = 5.45401004, unitCell, filledUnitCell},\\n  unitCell = {\\n    {Yellow, Sphere[{2.72700502, 0., 0.}, 0.5]},\\n    {Yellow, Sphere[{2.72700502, 2.72700502, 2.72700502}, 0.5]},\\n    {Yellow, Sphere[{0., 0., 2.72700502}, 0.5]},\\n    {Yellow, Sphere[{0., 2.72700502, 0.}, 0.5]},\\n    {Red, Sphere[{1.36350251, 4.09050753, 4.09050753}, 0.3]},\\n    {Red, Sphere[{1.36350251, 1.36350251, 4.09050753}, 0.3]},\\n    {Red, Sphere[{1.36350251, 1.36350251, 1.36350251}, 0.3]},\\n    {Red, Sphere[{4.09050753, 1.36350251, 4.09050753}, 0.3]},\\n    {Red, Sphere[{4.09050753, 4.09050753, 4.09050753}, 0.3]}\\n  };\\n\\n  filledUnitCell = Flatten[Table[\\n    Translate[unitCell, {i, j, k} a],\\n    {i, 0, 1}, {j, 0, 1}, {k, 0, 1}\\n  ], 3];\\n\\n  Graphics3D[{filledUnitCell}]\\n]\\n```\\n\\nOne can also ask it to add borders\\n\\n> edit your cell and add borders of the unit cell using black lines\\n\\n```mathematica\\nModule[{a = 5.45401004, unitCell, filledUnitCell, borders},\\n  unitCell = {\\n    {Yellow, Sphere[{2.72700502, 0., 0.}, 0.5]},\\n    {Yellow, Sphere[{2.72700502, 2.72700502, 2.72700502}, 0.5]},\\n    {Yellow, Sphere[{0., 0., 2.72700502}, 0.5]},\\n    {Yellow, Sphere[{0., 2.72700502, 0.}, 0.5]},\\n    {Red, Sphere[{1.36350251, 4.09050753, 4.09050753}, 0.3]},\\n    {Red, Sphere[{1.36350251, 1.36350251, 4.09050753}, 0.3]},\\n    {Red, Sphere[{1.36350251, 1.36350251, 1.36350251}, 0.3]},\\n    {Red, Sphere[{4.09050753, 1.36350251, 4.09050753}, 0.3]},\\n    {Red, Sphere[{4.09050753, 4.09050753, 4.09050753}, 0.3]}\\n  };\\n\\n  filledUnitCell = Flatten[Table[\\n    Translate[unitCell, {i, j, k} a],\\n    {i, 0, 1}, {j, 0, 1}, {k, 0, 1}\\n  ], 3];\\n\\n  borders = {\\n    Line[{{0, 0, 0}, {a, 0, 0}}],\\n    Line[{{0, 0, 0}, {0, a, 0}}],\\n    Line[{{0, 0, 0}, {0, 0, a}}],\\n    Line[{{a, a, 0}, {0, a, 0}}],\\n    Line[{{a, a, 0}, {a, 0, 0}}],\\n    Line[{{a, 0, a}, {a, 0, 0}}],\\n    Line[{{a, 0, a}, {0, 0, a}}],\\n    Line[{{0, a, a}, {0, 0, a}}],\\n    Line[{{0, a, a}, {0, a, 0}}],\\n    Line[{{a, a, a}, {0, a, a}}],\\n    Line[{{a, a, a}, {a, 0, a}}],\\n    Line[{{a, a, a}, {a, a, 0}}]\\n  };\\n\\n  Graphics3D[{filledUnitCell, Black, borders}]\\n]\\n```\\n\\n<Wl>{`\\nModule[{a = 5.45401004, unitCell, filledUnitCell, borders},\\n  unitCell = {\\n    {Yellow, Sphere[{2.72700502, 0., 0.}, 0.5]},\\n    {Yellow, Sphere[{2.72700502, 2.72700502, 2.72700502}, 0.5]},\\n    {Yellow, Sphere[{0., 0., 2.72700502}, 0.5]},\\n    {Yellow, Sphere[{0., 2.72700502, 0.}, 0.5]},\\n    {Red, Sphere[{1.36350251, 4.09050753, 4.09050753}, 0.3]},\\n    {Red, Sphere[{1.36350251, 1.36350251, 4.09050753}, 0.3]},\\n    {Red, Sphere[{1.36350251, 1.36350251, 1.36350251}, 0.3]},\\n    {Red, Sphere[{4.09050753, 1.36350251, 4.09050753}, 0.3]},\\n    {Red, Sphere[{4.09050753, 4.09050753, 4.09050753}, 0.3]}\\n  };\\n\\n  filledUnitCell = Flatten[Table[\\n    Translate[unitCell, {i, j, k} a],\\n    {i, 0, 1}, {j, 0, 1}, {k, 0, 1}\\n  ], 3];\\n\\n  borders = {\\n    Line[{{0, 0, 0}, {a, 0, 0}}],\\n    Line[{{0, 0, 0}, {0, a, 0}}],\\n    Line[{{0, 0, 0}, {0, 0, a}}],\\n    Line[{{a, a, 0}, {0, a, 0}}],\\n    Line[{{a, a, 0}, {a, 0, 0}}],\\n    Line[{{a, 0, a}, {a, 0, 0}}],\\n    Line[{{a, 0, a}, {0, 0, a}}],\\n    Line[{{0, a, a}, {0, 0, a}}],\\n    Line[{{0, a, a}, {0, a, 0}}],\\n    Line[{{a, a, a}, {0, a, a}}],\\n    Line[{{a, a, a}, {a, 0, a}}],\\n    Line[{{a, a, a}, {a, a, 0}}]\\n  };\\n\\n  Graphics3D[{filledUnitCell, Black, borders}]\\n]\\n`}</Wl>\\n\\nThis is amazing how modern LLM can read and parse any kind of data and convert them to the desired formats \ud83e\udd84"},{"id":"/2024/05/01/badapple","metadata":{"permalink":"/blog/2024/05/01/badapple","source":"@site/blog/2024-05-01-badapple/index.md","title":"Bad Apple, but it\u2019s Wolfram Language Plot","description":"Bad \ud83c\udf4e animation by Anira group originally based on ZUN)\'s work for bullet shoot \'em up game Touhou Project_ is remarkable cultural internet phenomenon often used for testing and demonstrating the features of some old hardware, algorithms, graphics systems  or other esoteric medium. And in general as an of art object -  Bad Apple shadow animation is just eye-catching and amazingly crafted piece \u2728. Not even mentioning hot pumping 16-bit flavoured tune and a beautiful voice of Nomico (\u306e\u307f\u3053).","date":"2024-05-01T00:00:00.000Z","tags":[],"readingTime":9.66,"hasTruncateMarker":true,"authors":[],"frontMatter":{},"unlisted":false,"prevItem":{"title":"Converting JSON crystal data to Graphics using AI Assistant","permalink":"/blog/2024/05/13/json-llm"},"nextItem":{"title":"Dynamic color and opacity implementation","permalink":"/blog/2024/04/24/dynamic-env"}},"content":"[Bad \ud83c\udf4e](https://www.youtube.com/watch?v=FtutLA63Cp8) animation by Anira group originally based on [ZUN](https://en.wikipedia.org/wiki/ZUN_(video_game_developer))\'s work for bullet shoot \'em up game _Touhou Project_ is remarkable cultural internet phenomenon often used for testing and demonstrating the features of some old hardware, algorithms, graphics systems  or other esoteric medium. And in general as an of art object -  Bad Apple *shadow animation* is just eye-catching and amazingly crafted piece \u2728. Not even mentioning hot pumping 16-bit flavoured tune and a beautiful voice of Nomico (\u306e\u307f\u3053).\\n\\nI (me @JerryI) have seen it many times popping up still in 2024, even as a [Fluid Simulation](https://www.youtube.com/watch?v=2Ni13dnAbSA) and have been questioning myself why not anyone to try to implement it lively using some scientific software like Jupyter or Matlab or Wolfram Language and a standard plot function? It could fun\\n\x3c!--truncate--\x3e\\n<details>\\n<summary>Spoiler</summary>\\n\\n<iframe width=\\"100%\\" height=\\"315\\" src=\\"https://www.youtube.com/embed/QOuVV9nTras?si=vKT4GGCdY94ZHDOm\\" title=\\"YouTube video player\\" frameborder=\\"0\\" allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\\" referrerpolicy=\\"strict-origin-when-cross-origin\\" allowfullscreen></iframe>\\n\\n\\n</details>\\n\\nToday we will learn how to render this animation in real-time using WLJS Notebook and a single `Line` function.\\n\\n> Open WLJS Notebook and create a new notebook \ud83d\udcd2\\n## One line to tell a story\\nWhat is the most basic thing people try to do, when open Mathematica or WLJS Notebook for the first time? I believe it must be `Plot`\\n\\n```mathematica\\nPlot[BesselJ[0, z], {z,0,10}]\\n```\\n\\n<Wl>{`Plot[BesselJ[0, z], {z,0,10}]`}</Wl>\\n\\nThe idea would be to transform each frame of a video to a single line path. Similar to a *one line art*. The approach is not new and [was published](https://www.wolfram.com/mathematica/new-in-10/enhanced-graphs-and-networks/continuous-line-drawing.html) by Wolfram Research as a fun example in Mathematica 10. \\n\\n### Handling video frames\\nFirstly, obtain a video file of Bad Apple animation somehow and __directly drop it to any input cell.__ It will upload a file and will provide a reference to it. Modify the tail of expression to explicitly tell Wolfram Kernel to extract video frames\\n\\n```mathematica @\\nvideo = Import[FileNameJoin[{\\"attachments\\", \\"Touhou - Bad Apple.mp4\\"}], (*BB[*)({\\"ImageList\\", All})(*,*)(*\\"1:eJxTTMoPSmNkYGAoZgESHvk5KRAeB5AILqnMSXXKr0hjgskHleakFnMBGU6JydnpRfmleSlpzDDlQe5Ozvk5+UVFDGDwwR6dwcAAAAHdFiw=\\"*)(*]BB*)];\\n```\\n\\nLet us try our methods on 500th frame\\n\\n```mathematica\\nvideo[[500]] // Thumbnail\\n```\\n\\n![](./../Screenshot%202024-06-01%20at%2020.55.29.png)\\nYou can __directly copy and paste this image from the output cell__ to a new input cell and wrap some function over it (like on a video at the end of the post). Since in this story I am limited to my markdown editor, for the demonstration purposes I will use a dedicated variable\\n\\n```mathematica\\nimg = video[[500]] // Thumbnail;\\n```\\n\\nIt comes handy here that Bad Apple relies on *shadow* animation style, so we can easily convert any image to a grid of `1` and `0`\\n\\n```mathematica\\nimg = img // ImageAdjust // Binarize\\n```\\n\\n![](./../Screenshot%202024-06-01%20at%2021.00.13.png)\\nImagine if all dark parts will be filled with one long line path zig-zagging over it. This is somewhat easy to do if we know the positions of all dark pixels\\n\\n```mathematica\\npos = PixelValuePositions[img, 0]\\n```\\n\\n![](./../Screenshot%202024-06-01%20at%2021.03.19.png)\\n\\nGreat. Thanks to a giant standard library of Wolfram Language, there is a complete solution for optimizing the path to cover all dark pixels\\n\\n```mathematica\\n{length, path} = FindShortestTour[pos];\\n```\\n\\nHere we do not need `length`, but only actual `path` which contains indexes of points from `pos` connected in order to form the shortest route though all dark pixels. Let\'s see how it looks\\n\\n```mathematica\\nListLinePlot[pos[[path]]]\\n```\\n\\n![](./../path-test-1.svg)\\n\\nIt feels a bit too dense for my taste, let\'s average it a bit\\n\\n```mathematica\\nListLinePlot[MovingAverage[pos[[path]], 5]]\\n```\\n\\n![](./../test-path-4.svg)\\n\\nThis already feels more interesting and has a vibe of *one line art*. \\n\\n### Batch processing\\nNow we need to apply this set of steps to every frame. One can organize it like this\\n\\n```mathematica\\ntrace[frame_] :=\\n    Module[{img, pos, path},\\n        img = ImageAdjust[frame // Thumbnail // Binarize];\\n        pos = PixelValuePositions[img, 0]//N; (* get numerical *)\\n        path = FindShortestTour[pos][[2]];\\n        MovingAverage[pos[[path]], 5]\\n    ]\\n```\\n\\nAnd to track progress, we can also add a bar\\n\\n```mathematica title=\\"optional\\"\\nprogressBar[max_Real | max_Integer] := LeakyModule[{\\n\\tprogress = 0.,\\n\\tbar,\\n\\tincrement,\\n\\ttimer = AbsoluteTime[]\\n},\\n\\tbar = CellPrint[ToString[\\n\\t\\tGraphics[{\\n\\t\\t\\tLightBlue, Rectangle[{-1,-1}, {1,1}],\\n\\t\\t\\tGreen, Rectangle[{-1,-1}, {Offload[2 progress - 1], 1}]\\n\\t\\t}, ImagePadding->None, Controls->False, ImageSize->{400, 30}]\\n\\t, StandardForm], \\"After\\"->EvaluationCell[]];\\n\\n\\t(* throttling *)\\n\\tincrement[value_Real | value_Integer] := If[AbsoluteTime[] - timer > 0.1,\\n\\t\\ttimer = AbsoluteTime[];\\n\\t\\tprogress = value / max // N;\\n\\t\\tIf[progress >= 0.99, \\n\\t\\t\\tClearAll[increment];\\n\\t\\t\\tDelete[bar];\\n\\t\\t];\\n\\t];\\n\\n\\tincrement\\n]\\n```\\n\\nI would not recommend to apply it right on all frames from the video, since an algorithm is extremely easy to implement, but it comes with performance costs. \\n\\nWe can test it on the 100 frames (skipping black frames from the beginning)\\n\\n```mathematica\\nbar = progressBar[100];\\nframes = MapIndexed[Function[{frame, index},\\n  bar[index // First];\\n  trace[frame]\\n], Take[Drop[video,200], 100]];\\n```\\n*It will take a while... Try lower resolution resizing each frame with `ImageResize` function*\\n\\nOn my Mac Air M1 a single frame took `~3` seconds to complete. In the end I left my laptop for next 5 hours and went for a walk in the forest to process an entire Bad Apple video, but you don\'t have to \ud83d\ude09 the final result is at the end of this post.\\n\\nAn algorithm can definitely be improved in many ways, but for demonstration purposes I will leave it as it is for now. This is __the most naive approach__ to one line stylised images.\\n\\n## Animation\\nHow to animate this sequence of lines __right in the notebook__? We do not want to cheat and use rasterized images. In Wolfram Mathematica, one can apply a simple `animate` function, however, dynamics in WLJS Notebook built differently: only low-level graphics primitives support dynamic evaluation, i.e.\\n\\n```mathematica title=\\"cell 1\\"\\ncurrentFrame = frames // First;\\nGraphics[Line[currentFrame // Offload], TransitionType->None]\\n```\\n*it is important to disable any tween-ing function by `TransitionType->None`, otherwise it will try to interpolate between frames, which is not good for our style *\\n\\nNow if we change `currentFrame` symbol, __a line will be redrawn using new data automatically__. For example one can assign it to a slider\\n\\n```mathematica title=\\"cell 2\\"\\nEventHandler[InputRange[1, Length[frames], 1, 1], Function[index,\\n\\tcurrentFrame = frames[[index]];\\n]]\\n```\\n\\n![](./../test-gif-demo-ezgif.com-optimize.gif)\\n\\nHow to make it animated automatically? There are several ways\\n\\n### Using timers\\nThe first thing coming to head is just to set a timer instead of a slider\\n\\n```mathematica\\nindex = 1;\\ntask = SetInterval[\\n\\tcurrentFrame = frames[[index]];\\n\\tindex++;\\n\\tIf[index > Length[frames], TaskRemove[task]];\\n, 1000/30.0];\\n```\\n\\nIt is suitable for most tasks, however for faster rates it might not keep up with the rest of the system. It also is not synchronized with a window refresh rate defined by a video engine.\\n\\n### Using browser\'s repaint cycle\\nThis is almost 1:1 copy of Javascript\'s `requestAnimationFrame` method. We need to assign an event handler and a special function, that will fire an event to update the frame\\n\\n```mathematica title=\\"cell 1\\"\\ncurrentFrame = frames // First;\\n\\nindex = 1;\\nEventHandler[\\"frame\\", Function[Null,\\n\\tcurrentFrame = frames[[index]];\\n\\tindex++;\\n\\tIf[index > Length[frames], index = 1];\\t\\n]];\\n\\nGraphics[{\\n\\tLine[currentFrame // Offload],\\n\\tAnimationFrameListener[currentFrame // Offload, \\"Event\\"->\\"frame\\"]\\n}, TransitionType->None]\\n```\\n\\nHere `AnimationFrameListener` checks if `currentFrame` is changing, and then requests an animation from a browser. On the next repaint cycle it will fire `frame` event, which updates `currentFrame` and the cycle repeats.\\n\\nAs a drawback, we cannot really control the speed, since it goes as fast as our system can go peaking at the refresh rate of a browser (60 - 120 FPS depending on the system).\\n\\n#### How to slow down the animation\\nWe can skip frames to roughly match the frame-rate of a video. For this we need to check the passed time between `frame` event calls and skip the call if needed\\n\\n```mathematica\\ncurrentFrame = frames // First;\\ntime = AbsoluteTime[];\\n\\nindex = 1;\\ndummy = 1;\\nEventHandler[\\"frame\\", Function[Null,\\n\\tIf[AbsoluteTime[] - time > 1/40.0, (* 40FPS lol *)\\n\\t\\tcurrentFrame = frames[[index]];\\n\\t\\tindex++;\\n\\t\\tIf[index > Length[frames], index = 1];\\n\\t\\ttime = \\tAbsoluteTime[];\\n\\t,\\n\\t\\tdummy = 1; (* just to kick a listener *)\\n\\t]\\n]];\\n\\nGraphics[{\\n\\tLine[currentFrame // Offload],\\n\\tAnimationFrameListener[currentFrame // Offload, \\"Event\\"->\\"frame\\"],\\n\\tAnimationFrameListener[dummy // Offload, \\"Event\\"->\\"frame\\"]\\n}, TransitionType->None]\\n```\\n\\n### Optimizations\\nTo improve the performance, we can apply several tricks\\n#### NumericArray\\nWolfram is a symbolic programming language, therefore even an array of numbers can become a higher-order specie. To explicitly tell a interpreter that there is no other things inside expect real or integer numbers (and will not be) we can wrap each frame into \\n\\n```mathematica\\nframes = NumericArray /@ frames;\\n```\\n\\nIt will also speed up the frontend.\\n\\n#### Skip points\\nSince there is anyway a moving average filter applied, we do not need all points\\n\\n```mathematica\\nframes = frames[[All, ;; ;; 2]]; (* take every 2nd *)\\n```\\n\\n## Final video\\nHere is the final result recorded in real-time (except the intro part)\\n\\n<iframe width=\\"100%\\" height=\\"315\\" src=\\"https://www.youtube.com/embed/QOuVV9nTras?si=vKT4GGCdY94ZHDOm\\" title=\\"YouTube video player\\" frameborder=\\"0\\" allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\\" referrerpolicy=\\"strict-origin-when-cross-origin\\" allowfullscreen></iframe>\\n\\n## Bonus\\n### Iconic Mathematica\'s colors and axes\\nThis is 97\'s set in `ColorData`, which gives this typical blue-ish color of any Wolfram Language plot. We can add it to our `Graphics` symbol as well as typical x- and y-axis\\n\\n```mathematica\\nGraphics[{\\n\\tColorData[97][1],\\n\\tLine[currentFrame // Offload],\\n\\t...\\n}, Axes->True, TransitionType->None]\\n```\\n\\n![](./../true-plot.svg)\\n\\n### Audio\\nAn audio can be extracted from a video file directly and played in the notebook\\n\\n```mathematica\\naudio = VideoExtractTracks[\\n\\tImport[FileNameJoin[{\\"attachments\\", \\"Touhou - Bad Apple.mp4\\"}]]\\n, {\\"Audio\\", 1}]\\n```\\n\\n![](./../Screenshot%202024-06-01%20at%2022.22.27.png)\\n\\nA completely different story is how to synchronize it with our animation. We need a stream player and manually feed audio chunks to it.\\n\\nThere is a low-level primitive `PCMPlayer`, which can be used for this purpose. So let us create an audio buffer first and assign it to a player\\n\\n```mathematica title=\\"cell\\"\\naudioBuffer = {};\\nPCMPlayer[audioBuffer // Offload, \\"SignedInteger16\\", SampleRate->44100]\\n```\\n\\nNow we need to provide PCM encoded data to it by chunks. Then we have to figure out how it is distributed over our frames\\n\\n```mathematica\\naudioData = AudioData[audio, \\"SignedInteger16\\"] // First;\\nchunks = NumericArray /@ Partition[audioData, Round[Length[audioData]/Length[video]] + 1000];\\n```\\n\\nHere we added extra `1000` samples to slightly overlap the portions to account the time needed for sending them and processing (just in case). You may increase it you hear some crackling noise. \\n\\nThen we drop first 100, since we skipped them in frames\\n\\n```mathematica\\nchunks = Drop[chunks, 100];\\n```\\n\\nand modify our animation function accordingly. For the simplicity we will go with [Using timer](#Using%20timer)\\n\\n```mathematica\\nindex = 1;\\ntask = SetInterval[\\n\\tcurrentFrame = frames[[index]];\\n\\taudioBuffer = chunks[[index]];\\n\\tindex++;\\n\\tIf[index > Length[frames], TaskRemove[task]];\\n, 1000/30.0];\\n```\\n\\n__Full code__ for the animation with sound is available below\\n\\n```mathematica title=\\"processing\\"\\nvideo = Import[FileNameJoin[{\\"attachments\\", \\"Touhou - Bad Apple.mp4\\"}], {\\"ImageList\\", All}]; \\n\\naudio = VideoExtractTracks[Import[FileNameJoin[{\\"attachments\\", \\"Touhou - Bad Apple.mp4\\"}]], {\\"Audio\\", 1}];\\n\\ntrace[frame_] :=\\n    Module[{img, pos, path},\\n        img = ImageAdjust[frame // Thumbnail // Binarize];\\n        pos = PixelValuePositions[img, 0]//N;\\n        path = FindShortestTour[pos][[2]];\\n        MovingAverage[pos[[path]], 5]\\n    ];\\n\\n(* optional *)\\nprogressBar[max_Real | max_Integer] := LeakyModule[{\\n\\tprogress = 0.,\\n\\tbar,\\n\\tincrement,\\n\\ttimer = AbsoluteTime[]\\n},\\n\\tbar = CellPrint[ToString[\\n\\t\\tGraphics[{\\n\\t\\t\\tLightBlue, Rectangle[{-1,-1}, {1,1}],\\n\\t\\t\\tGreen, Rectangle[{-1,-1}, {Offload[2 progress - 1], 1}]\\n\\t\\t}, ImagePadding->None, Controls->False, ImageSize->{400, 30}]\\n\\t, StandardForm], \\"After\\"->EvaluationCell[]];\\n\\n\\t(* throttling *)\\n\\tincrement[value_Real | value_Integer] := If[AbsoluteTime[] - timer > 0.1,\\n\\t\\ttimer = AbsoluteTime[];\\n\\t\\tprogress = value / max // N;\\n\\t\\tIf[progress >= 0.99, \\n\\t\\t\\tClearAll[increment];\\n\\t\\t\\tDelete[bar];\\n\\t\\t];\\n\\t];\\n\\n\\tincrement\\n];\\n\\nbar = progressBar[100];\\nframes = MapIndexed[Function[{frame, index},\\n  bar[index // First];\\n  trace[frame]\\n], Take[Drop[video,100], 100]];\\n\\nframes = NumericArray /@ frames;\\n\\naudioData = AudioData[audio, \\"SignedInteger16\\"] // First;\\nchunks = NumericArray /@ Partition[audioData, Round[Length[audioData]/Length[video]] + 1000];\\nchunks = Drop[chunks, 100];\\n```\\n\\n```mathematica title=\\"animating\\"\\naudioBuffer = {};\\ncurrentFrame = frames // First;\\nPCMPlayer[audioBuffer // Offload, \\"SignedInteger16\\", SampleRate->44100]\\n\\nGraphics[{\\n\\tRGBColor[0.368417, 0.506779, 0.709798],\\n\\tLine[currentFrame // Offload]\\n}, TransitionType->None, Axes->True]\\n```\\n\\n```mathematica title=\\"animating\\"\\nindex = 1;\\ntask = SetInterval[\\n\\tcurrentFrame = frames[[index]];\\n\\taudioBuffer = chunks[[index]];\\n\\tindex++;\\n\\tIf[index > Length[frames], TaskRemove[task]];\\n, 1000/30.0];\\n```\\n\\nSee you next time \ud83e\ude84\\n\\nCheers,\\nKirill"},{"id":"/2024/04/24/dynamic-env","metadata":{"permalink":"/blog/2024/04/24/dynamic-env","source":"@site/blog/2024-04-24-dynamic-env/index.md","title":"Dynamic color and opacity implementation","description":"This is going to be our first dev-log post here \ud83e\udd84","date":"2024-04-24T00:00:00.000Z","tags":[{"label":"dev","permalink":"/blog/tags/dev"},{"label":"graphics","permalink":"/blog/tags/graphics"}],"readingTime":5.405,"hasTruncateMarker":true,"authors":[{"name":"Kirill Vasin","title":"Maintainer","url":"https://github.com/JerryI","imageURL":"https://avatars.githubusercontent.com/u/4111822?s=48&v=4","key":"jerryi"}],"frontMatter":{"title":"Dynamic color and opacity implementation","tags":["dev","graphics"],"authors":"jerryi"},"unlisted":false,"prevItem":{"title":"Bad Apple, but it\u2019s Wolfram Language Plot","permalink":"/blog/2024/05/01/badapple"},"nextItem":{"title":"Dynamic gauge","permalink":"/blog/2024/04/22/gauge"}},"content":"![](./../2024-04-24-dynamic-env/opacitydouble-ezgif.com-optimize.gif)\\n\\nThis is going to be our first dev-log post here \ud83e\udd84\\n\\n\x3c!--truncate--\x3e\\n## State and stateless\\nLet me give you an example\\n\\n```mathematica\\n{RGBColor[1,0,0], Disk[{0,0}, 1]}\\n```\\n\\nWhat you do see here? \\n\\n<Wl>{`Graphics[{RGBColor[1,0,0], Disk[{0,0}, 1]}]`}</Wl>\\n\\nA __stateless__ `RGBColor` symbol modifies the local scope of a `List` substituting a new color value read later by `Disk`. Is the last one is also stateless? No\\n\\nThe beauty and simplicity of dynamics implemented in WLJS Interpreter \\n\\n```mathematica\\n{RGBColor[1,0,0], Disk[{0,0}, Offload[radius]]}\\n```\\n\\nis that each instance of a `Disk` has its own state - DOM element, a couple of properties such as position, radius, color, opacity and etc. It is important to note, that `radius` here is also an instance with its own state, determined by a symbol `radius` defined on Wolfram Kernel. Two nested instances can see each other form a couple. When a child changes, a parent is reevaluated with a new data\\n\\n```mathematica\\nradius = 1.0;\\nGraphics[{RGBColor[1,0,0], Disk[{0,0}, Offload[radius]]}]\\n\\nEventHandler[InputRange[0,1,0.1], Function[value, radius = value]]\\n```\\n\\n__What about color?..__\\n\\n### Virtual containers\\nThe name is a bit weird, however, the idea is that if an interpreter sees an attribute of a symbol\\n\\n```js\\ng2d.Disk = async (args, env) => {\\n//... normal evaluation\\n}\\n\\ng2d.Disk.update = async () => {\\n//... when child mutates\\n}\\n\\n// highlight-next-line\\ng2d.Disk.virtual = true \\n```\\n\\nIt alters the interpretation and creates a sort of container for this symbol to be evaluated inside it. This container has a local memory, identity and can see other such containers.\\n\\nWe can do in the same way and add this attribute to `RGBColor`\\n\\n```js\\ng2d.RGBColor.virtual = true\\n```\\n\\nThen the construction \\n\\n```mathematica\\n{RGBColor[color // Offload], Disk[{0,0}, 1]}\\n```\\n\\nWill work for sure. However, now we coupled the following symbols\\n\\n1. `RGBColor`\\n\\t1. `color`\\n\\nHow to bind `Disk` to `RGBColor` instance, which cannot be directly seen?\\n\\n### New update methods and coupling schemes\\nWhat we can do is to provide sort of a reference to `env` variable to a list of potentially coupled objects, i.e.\\n\\n```js\\ng2d.RGBColor = async () => {\\n\\t//... create references list\\n\\tconst refs = [];\\n\\tenv.exposed.colorRefs = refs;\\n}\\n\\ng2d.RGBColor.update = async () => {\\n\\t//... execute one by one using new data\\n\\tenv.exposed.colorRefs.forEach((instance) => {\\n\\t\\tinstance.execute({method: \'updateColor\', color: newColor});\\n\\t})\\n}\\n\\ng2d.RGBColor.virtual = true;\\n```\\n\\nThis scheme will update all connected instances. To connect we need to add a couple of line to `Disk` and other primitives\\n\\n```js\\ng2d.Disk = async () => {\\n\\t//...\\n\\t// highlight-start\\n\\tif (env.colorRefs) {\\n\\t\\t//append this instance to a list of references\\n\\t\\tenv.colorRefs.push(env.root);\\n\\t}\\n\\t// highlight-end\\n}\\n\\ng2d.Disk.update = async () => {}\\n\\t//... regular update method\\n\\t//for nested expressions\\n}\\n\\n// highlight-start\\ng2d.Disk.updateColor = (args, env) => {\\n\\t//new method just for updating color!\\n\\tenv.local.object.attr(\'fill\', env.color);\\n}\\n// highlight-end\\n```\\n\\nHere we also defined a additional method for updating just a color of a primitive. The same can be done for `Opacity` as well.\\n\\nOf course by turning `RGBColor` from stateless function into a sort of object comes with a additional overhead for an interpreter and memory. However later on we will check it on our performance tests.\\n\\n## Examples\\nThis opens up more possibilities for dynamics. In principle, this was the last thing, which was missing for a long time for a complete dynamic evaluating in WLJS Notebook.\\n\\nLet us see it on a simple example\\n\\n```mathematica\\ncolor = {1,0,0};\\nGraphics[{RGBColor[color // Offload], Disk[{0,0}, 1]}]\\n\\nEventHandler[InputJoystick[], Function[xy,\\n\\tcolor = Normalize[{xy[[1]], xy[[2]], 0.5}] // Abs;\\n]]\\n```\\n\\n![](./../2024-04-24-dynamic-env/color-ezgif.com-optimize.gif)\\n\\nOr using `Opacity` and blending between two `Disk`s\\n\\n```mathematica\\nopacity = 0.5;\\nGraphics[{Opacity[Offload[opacity]], Red, Disk[{0,0}, 1], Blue, Opacity[Offload[1.0 - opacity]], Disk[{0,0}, 1]}]\\n\\nEventHandler[InputRange[0,1,0.1], Function[value,\\n\\topacity = value;\\n]]\\n```\\n\\n![](./../2024-04-24-dynamic-env/opacity-ezgif.com-video-to-gif-converter.gif)\\n\\nOr even cooler - combining it with a traditional dynamics as well\\n\\n```mathematica\\nopacity = 0.5;\\nGraphics[{Opacity[Offload[opacity]], Red, Disk[{0,0}, Offload[1-opacity]], Blue, Opacity[Offload[1.0 - opacity]], Disk[{0,0}, Offload[opacity]]}, ImagePadding->None]\\n\\nEventHandler[InputRange[0,1,0.1], Function[value,\\n\\topacity = value;\\n]]\\n```\\n\\n![](./../2024-04-24-dynamic-env/opacitydouble-ezgif.com-optimize.gif)\\n\\n## Benchmarking\\nI have created a complete suite of tests to check the performance of the system as a whole and by certain sections, i.e.\\n\\n- Wolfram Kernel\\n- WLJS Interpreter\\n- HTTP and WebSockets\\n- 2D/3D dynamic graphics\\n- Stress test with many dynamic objects\\n\\nIt provides stats in the end as well as comparison to others results (if you shared)\\n\\n![](./../2024-04-24-dynamic-env/Statsj.svg)\\n*more is better, all bars a normalized*\\n\\nYou can download this notebook by the link down below\\n[__Benchmark__](./Archive.zip)\\n\\nAccording to multiple tests __this new feature does not actually impacts the performance that much__\\n\\n<Wl>{`Graphics[{{{Text[\\"Mac OS X ARM (64-bit)\\",{-15.5,-155.}],Text[\\"2.3.7mod-again\\",{41.1213619850795429039,-155}],Null,(*VB[*)(RGBColor[0.368417, 0.506779, 0.709798])(*,*)(*\\"1:eJxTTMoPSmNkYGAoZgESHvk5KRCeGJAIcndyzs/JLwouTyxJzghJzS3ISSxJTWMGyXMgyRcVTJv0VGXKdfsiw2kvp3eYP7AvOt4yw3vVtmf2AKMBH1E=\\"*)(*]VB*),Text[\\"Balls3D\\",{0,-153.5}],Rectangle[{0,-155.},{40.1213619850795429039,-154.}]},{Text[\\"Mac OS X ARM (64-bit)\\",{-15.5,-291.}],Text[\\"2.3.7mod-again\\",{28.5596828143449073232,-291}],Null,(*VB[*)(RGBColor[0.880722, 0.611041, 0.142051])(*,*)(*\\"1:eJxTTMoPSmNkYGAoZgESHvk5KRCeGJAIcndyzs/JLwouTyxJzghJzS3ISSxJTWMGyXMgyRf5HIl+fl/vjX3Rv+oPt5b2PrYv2jxrnfouvUP2ALwBIFo=\\"*)(*]VB*),Text[\\"Boids\\",{0,-289.5}],Rectangle[{0,-291.},{27.5596828143449073232,-290}]},{Text[\\"Mac OS X ARM (64-bit)\\",{-15.5,-427}],Text[\\"2.3.7mod-again\\",{31.8636091611720548194,-427}],Null,(*VB[*)(RGBColor[0.560181, 0.691569, 0.194885])(*,*)(*\\"1:eJxTTMoPSmNkYGAoZgESHvk5KRCeGJAIcndyzs/JLwouTyxJzghJzS3ISSxJTWMGyXMgyRcxPIvawvD2oX1R6dq9/qGKz+yLJCfsvff34wl7AJc8HzE=\\"*)(*]VB*),Text[\\"Bubbles\\",{0,-425.5}],Rectangle[{0,-427.},{30.8636091611720548194,-426.}]},{Text[\\"Mac OS X ARM (64-bit)\\",{-15.5,-563.}],Text[\\"2.3.7mod-again\\",{34.44481608018015,-563.}],Null,(*VB[*)(RGBColor[0.922526, 0.385626, 0.209179])(*,*)(*\\"1:eJxTTMoPSmNkYGAoZgESHvk5KRCeGJAIcndyzs/JLwouTyxJzghJzS3ISSxJTWMGyXMgyRdd2frNLrT1rX3RHf35ayTW3bAv0nBnXJRw7JQ9AKbfHmU=\\"*)(*]VB*),Text[\\"Javascript\\",{0,-561.5}],Rectangle[{0,-563.},{33.44481608018015,-562.}]},{Text[\\"Mac OS X ARM (64-bit)\\",{-15.5,-699.}],Text[\\"2.3.7mod-again\\",{29.08988764044944,-699.}],Null,(*VB[*)(RGBColor[0.528488, 0.470624, 0.701351])(*,*)(*\\"1:eJxTTMoPSmNkYGAoZgESHvk5KRCeGJAIcndyzs/JLwouTyxJzghJzS3ISSxJTWMGyXMgyRctbepaFf/ygX3Rxzm6Clvk7tkXZXYxLC8vfGYPAKOQHmA=\\"*)(*]VB*),Text[\\"Kernel\\",{0,-697.5}],Rectangle[{0,-699.},{28.08988764044944,-698.}]},{Text[\\"Mac OS X ARM (64-bit)\\",{-15.5,-835.}],Text[\\"2.3.7mod-again\\",{18.78573148316312,-835.}],Null,(*VB[*)(RGBColor[0.772079, 0.431554, 0.102387])(*,*)(*\\"1:eJxTTMoPSmNkYGAoZgESHvk5KRCeGJAIcndyzs/JLwouTyxJzghJzS3ISSxJTWMGyXMgyRcFbb3Lcn/LC/uiOf6yq6fMu21f9EGy8wKH2S57AKMVHmg=\\"*)(*]VB*),Text[\\"Sockets\\",{0,-833.5}],Rectangle[{0,-835.},{17.78573148316312,-834.}]},{Text[\\"Mac OS X ARM (64-bit)\\",{-15.5,-971.}],Text[\\"2.3.7mod-again\\",{28.4780824131753398995,-971.}],Null,(*VB[*)(RGBColor[0.363898, 0.618501, 0.782349])(*,*)(*\\"1:eJxTTMoPSmNkYGAoZgESHvk5KRCeGJAIcndyzs/JLwouTyxJzghJzS3ISSxJTWMGyXMgyRdNlna9JuV13b5oXdLH2YdOPbYvWnBX8SgD50t7AJbnHk8=\\"*)(*]VB*),Text[\\"Wave3D\\",{0,-969.5}],Rectangle[{0,-971.},{27.4780824131753398995,-970.}]},{Text[\\"Mac OS X ARM (64-bit)\\",{-15.5,-1107.}],Text[\\"2.3.7mod-again\\",{25.281667388014572,-1107.}],Null,(*VB[*)(RGBColor[1, 0.75, 0])(*,*)(*\\"1:eJxTTMoPSmNkYGAoZgESHvk5KRCeGJAIcndyzs/JLwouTyxJzghJzS3ISSxJTWMGyXMgyRcxgMEHeyjjBYzBwAAAGBIUhA==\\"*)(*]VB*),Text[\\"WLJS Interpreter\\",{0,-1105.5}],Rectangle[{0,-1107.},{24.281667388014572,-1106.}]}},{{Text[\\"Mac OS X ARM (64-bit)\\",{-15.5,-173.5}],Text[\\"2.3.7mod-again\\",{39.0516683701718147991,-173.5}],Null,(*VB[*)(RGBColor[0.368417, 0.506779, 0.709798])(*,*)(*\\"1:eJxTTMoPSmNkYGAoZgESHvk5KRCeGJAIcndyzs/JLwouTyxJzghJzS3ISSxJTWMGyXMgyRcVTJv0VGXKdfsiw2kvp3eYP7AvOt4yw3vVtmf2AKMBH1E=\\"*)(*]VB*),Null,Rectangle[{0,-173.5},{38.0516683701718147991,-172.5}]},{Text[\\"Mac OS X ARM (64-bit)\\",{-15.5,-309.5}],Text[\\"2.3.7mod-again\\",{20.2016399027377077984,-309.5}],Null,(*VB[*)(RGBColor[0.880722, 0.611041, 0.142051])(*,*)(*\\"1:eJxTTMoPSmNkYGAoZgESHvk5KRCeGJAIcndyzs/JLwouTyxJzghJzS3ISSxJTWMGyXMgyRf5HIl+fl/vjX3Rv+oPt5b2PrYv2jxrnfouvUP2ALwBIFo=\\"*)(*]VB*),Null,Rectangle[{0,-309.5},{19.2016399027377077984,-308.5}]},{Text[\\"Mac OS X ARM (64-bit)\\",{-15.5,-445.5}],Text[\\"2.3.7mod-again\\",{32.5379750106166660923,-445.5}],Null,(*VB[*)(RGBColor[0.560181, 0.691569, 0.194885])(*,*)(*\\"1:eJxTTMoPSmNkYGAoZgESHvk5KRCeGJAIcndyzs/JLwouTyxJzghJzS3ISSxJTWMGyXMgyRcxPIvawvD2oX1R6dq9/qGKz+yLJCfsvff34wl7AJc8HzE=\\"*)(*]VB*),Null,Rectangle[{0,-445.5},{31.5379750106166660923,-444.5}]},{Text[\\"Mac OS X ARM (64-bit)\\",{-15.5,-581.5}],Text[\\"2.3.7mod-again\\",{34.55704703356123,-581.5}],Null,(*VB[*)(RGBColor[0.922526, 0.385626, 0.209179])(*,*)(*\\"1:eJxTTMoPSmNkYGAoZgESHvk5KRCeGJAIcndyzs/JLwouTyxJzghJzS3ISSxJTWMGyXMgyRdd2frNLrT1rX3RHf35ayTW3bAv0nBnXJRw7JQ9AKbfHmU=\\"*)(*]VB*),Null,Rectangle[{0,-581.5},{33.55704703356123,-580.5}]},{Text[\\"Mac OS X ARM (64-bit)\\",{-15.5,-717.5}],Text[\\"2.3.7mod-again\\",{29.296547821165817,-717.5}],Null,(*VB[*)(RGBColor[0.528488, 0.470624, 0.701351])(*,*)(*\\"1:eJxTTMoPSmNkYGAoZgESHvk5KRCeGJAIcndyzs/JLwouTyxJzghJzS3ISSxJTWMGyXMgyRctbepaFf/ygX3Rxzm6Clvk7tkXZXYxLC8vfGYPAKOQHmA=\\"*)(*]VB*),Null,Rectangle[{0,-717.5},{28.296547821165817,-716.5}]},{Text[\\"Mac OS X ARM (64-bit)\\",{-15.5,-853.5}],Text[\\"2.3.7mod-again\\",{27.909625299046187,-853.5}],Null,(*VB[*)(RGBColor[0.772079, 0.431554, 0.102387])(*,*)(*\\"1:eJxTTMoPSmNkYGAoZgESHvk5KRCeGJAIcndyzs/JLwouTyxJzghJzS3ISSxJTWMGyXMgyRcFbb3Lcn/LC/uiOf6yq6fMu21f9EGy8wKH2S57AKMVHmg=\\"*)(*]VB*),Null,Rectangle[{0,-853.5},{26.909625299046187,-852.5}]},{Text[\\"Mac OS X ARM (64-bit)\\",{-15.5,-989.5}],Text[\\"2.3.7mod-again\\",{29.33503251720164082,-989.5}],Null,(*VB[*)(RGBColor[0.363898, 0.618501, 0.782349])(*,*)(*\\"1:eJxTTMoPSmNkYGAoZgESHvk5KRCeGJAIcndyzs/JLwouTyxJzghJzS3ISSxJTWMGyXMgyRdNlna9JuV13b5oXdLH2YdOPbYvWnBX8SgD50t7AJbnHk8=\\"*)(*]VB*),Null,Rectangle[{0,-989.5},{28.33503251720164082,-988.5}]},{Text[\\"Mac OS X ARM (64-bit)\\",{-15.5,-1125.5}],Text[\\"2.3.7mod-again\\",{25.281667388014572,-1125.5}],Null,(*VB[*)(RGBColor[1, 0.75, 0])(*,*)(*\\"1:eJxTTMoPSmNkYGAoZgESHvk5KRCeGJAIcndyzs/JLwouTyxJzghJzS3ISSxJTWMGyXMgyRcxgMEHeyjjBYzBwAAAGBIUhA==\\"*)(*]VB*),Null,Rectangle[{0,-1125.5},{24.281667388014572,-1124.5}]}},{{Text[\\"Mac OS X ARM (64-bit)\\",{-15.5,-192.}],Text[\\"2.3.7mod-again\\",{40.8303240615595453281,-192.}],Null,(*VB[*)(RGBColor[0.368417, 0.506779, 0.709798])(*,*)(*\\"1:eJxTTMoPSmNkYGAoZgESHvk5KRCeGJAIcndyzs/JLwouTyxJzghJzS3ISSxJTWMGyXMgyRcVTJv0VGXKdfsiw2kvp3eYP7AvOt4yw3vVtmf2AKMBH1E=\\"*)(*]VB*),Null,Rectangle[{0,-192.},{39.8303240615595453281,-191.}]},{Text[\\"Mac OS X ARM (64-bit)\\",{-15.5,-328.}],Text[\\"2.3.7mod-again\\",{22.6915543344424267071,-328.}],Null,(*VB[*)(RGBColor[0.880722, 0.611041, 0.142051])(*,*)(*\\"1:eJxTTMoPSmNkYGAoZgESHvk5KRCeGJAIcndyzs/JLwouTyxJzghJzS3ISSxJTWMGyXMgyRf5HIl+fl/vjX3Rv+oPt5b2PrYv2jxrnfouvUP2ALwBIFo=\\"*)(*]VB*),Null,Rectangle[{0,-328.},{21.6915543344424267071,-327.}]},{Text[\\"Mac OS X ARM (64-bit)\\",{-15.5,-464.}],Text[\\"2.3.7mod-again\\",{36.6945921190032067295,-464.}],Null,(*VB[*)(RGBColor[0.560181, 0.691569, 0.194885])(*,*)(*\\"1:eJxTTMoPSmNkYGAoZgESHvk5KRCeGJAIcndyzs/JLwouTyxJzghJzS3ISSxJTWMGyXMgyRcxPIvawvD2oX1R6dq9/qGKz+yLJCfsvff34wl7AJc8HzE=\\"*)(*]VB*),Null,Rectangle[{0,-464.},{35.6945921190032067295,-463.}]},{Text[\\"Mac OS X ARM (64-bit)\\",{-15.5,-600.}],Text[\\"2.3.7mod-again\\",{31.487804922371094,-600.}],Null,(*VB[*)(RGBColor[0.922526, 0.385626, 0.209179])(*,*)(*\\"1:eJxTTMoPSmNkYGAoZgESHvk5KRCeGJAIcndyzs/JLwouTyxJzghJzS3ISSxJTWMGyXMgyRdd2frNLrT1rX3RHf35ayTW3bAv0nBnXJRw7JQ9AKbfHmU=\\"*)(*]VB*),Null,Rectangle[{0,-600.},{30.487804922371094,-599.}]},{Text[\\"Mac OS X ARM (64-bit)\\",{-15.5,-736.}],Text[\\"2.3.7mod-again\\",{29.176951253874332,-736.}],Null,(*VB[*)(RGBColor[0.528488, 0.470624, 0.701351])(*,*)(*\\"1:eJxTTMoPSmNkYGAoZgESHvk5KRCeGJAIcndyzs/JLwouTyxJzghJzS3ISSxJTWMGyXMgyRctbepaFf/ygX3Rxzm6Clvk7tkXZXYxLC8vfGYPAKOQHmA=\\"*)(*]VB*),Null,Rectangle[{0,-736.},{28.176951253874332,-735.}]},{Text[\\"Mac OS X ARM (64-bit)\\",{-15.5,-872.}],Text[\\"2.3.7mod-again\\",{27.461659958660547,-872.}],Null,(*VB[*)(RGBColor[0.772079, 0.431554, 0.102387])(*,*)(*\\"1:eJxTTMoPSmNkYGAoZgESHvk5KRCeGJAIcndyzs/JLwouTyxJzghJzS3ISSxJTWMGyXMgyRcFbb3Lcn/LC/uiOf6yq6fMu21f9EGy8wKH2S57AKMVHmg=\\"*)(*]VB*),Null,Rectangle[{0,-872.},{26.461659958660547,-871.}]},{Text[\\"Mac OS X ARM (64-bit)\\",{-15.5,-1008.}],Text[\\"2.3.7mod-again\\",{29.9574995752287149394,-1008.}],Null,(*VB[*)(RGBColor[0.363898, 0.618501, 0.782349])(*,*)(*\\"1:eJxTTMoPSmNkYGAoZgESHvk5KRCeGJAIcndyzs/JLwouTyxJzghJzS3ISSxJTWMGyXMgyRdNlna9JuV13b5oXdLH2YdOPbYvWnBX8SgD50t7AJbnHk8=\\"*)(*]VB*),Null,Rectangle[{0,-1008.},{28.9574995752287149394,-1007.}]},{Text[\\"Mac OS X ARM (64-bit)\\",{-15.5,-1144.}],Text[\\"2.3.7mod-again\\",{29.901734170430736,-1144.}],Null,(*VB[*)(RGBColor[1, 0.75, 0])(*,*)(*\\"1:eJxTTMoPSmNkYGAoZgESHvk5KRCeGJAIcndyzs/JLwouTyxJzghJzS3ISSxJTWMGyXMgyRcxgMEHeyjjBYzBwAAAGBIUhA==\\"*)(*]VB*),Null,Rectangle[{0,-1144.},{28.901734170430736,-1143.}]}},{{Text[\\"Mac OS X ARM (64-bit)\\",{-15.5,-210.5}],Text[\\"2.3.7dynamic-env-mod\\",{43.1351729166549604647,-210.5}],Null,(*VB[*)(RGBColor[0.368417, 0.506779, 0.709798])(*,*)(*\\"1:eJxTTMoPSmNkYGAoZgESHvk5KRCeGJAIcndyzs/JLwouTyxJzghJzS3ISSxJTWMGyXMgyRcVTJv0VGXKdfsiw2kvp3eYP7AvOt4yw3vVtmf2AKMBH1E=\\"*)(*]VB*),Null,Rectangle[{0,-210.5},{42.1351729166549604647,-209.5}]},{Text[\\"Mac OS X ARM (64-bit)\\",{-15.5,-346.5}],Text[\\"2.3.7dynamic-env-mod\\",{22.1917276116719819325,-346.5}],Null,(*VB[*)(RGBColor[0.880722, 0.611041, 0.142051])(*,*)(*\\"1:eJxTTMoPSmNkYGAoZgESHvk5KRCeGJAIcndyzs/JLwouTyxJzghJzS3ISSxJTWMGyXMgyRf5HIl+fl/vjX3Rv+oPt5b2PrYv2jxrnfouvUP2ALwBIFo=\\"*)(*]VB*),Null,Rectangle[{0,-346.5},{21.1917276116719819325,-345.5}]},{Text[\\"Mac OS X ARM (64-bit)\\",{-15.5,-482.5}],Text[\\"2.3.7dynamic-env-mod\\",{27.7761126705069847621,-482.5}],Null,(*VB[*)(RGBColor[0.560181, 0.691569, 0.194885])(*,*)(*\\"1:eJxTTMoPSmNkYGAoZgESHvk5KRCeGJAIcndyzs/JLwouTyxJzghJzS3ISSxJTWMGyXMgyRcxPIvawvD2oX1R6dq9/qGKz+yLJCfsvff34wl7AJc8HzE=\\"*)(*]VB*),Null,Rectangle[{0,-482.5},{26.7761126705069847621,-481.5}]},{Text[\\"Mac OS X ARM (64-bit)\\",{-15.5,-618.5}],Text[\\"2.3.7dynamic-env-mod\\",{33.467532517797814,-618.5}],Null,(*VB[*)(RGBColor[0.922526, 0.385626, 0.209179])(*,*)(*\\"1:eJxTTMoPSmNkYGAoZgESHvk5KRCeGJAIcndyzs/JLwouTyxJzghJzS3ISSxJTWMGyXMgyRdd2frNLrT1rX3RHf35ayTW3bAv0nBnXJRw7JQ9AKbfHmU=\\"*)(*]VB*),Null,Rectangle[{0,-618.5},{32.467532517797814,-617.5}]},{Text[\\"Mac OS X ARM (64-bit)\\",{-15.5,-754.5}],Text[\\"2.3.7dynamic-env-mod\\",{29.050490883590463,-754.5}],Null,(*VB[*)(RGBColor[0.528488, 0.470624, 0.701351])(*,*)(*\\"1:eJxTTMoPSmNkYGAoZgESHvk5KRCeGJAIcndyzs/JLwouTyxJzghJzS3ISSxJTWMGyXMgyRctbepaFf/ygX3Rxzm6Clvk7tkXZXYxLC8vfGYPAKOQHmA=\\"*)(*]VB*),Null,Rectangle[{0,-754.5},{28.050490883590463,-753.5}]},{Text[\\"Mac OS X ARM (64-bit)\\",{-15.5,-890.5}],Text[\\"2.3.7dynamic-env-mod\\",{28.25081921680832,-890.5}],Null,(*VB[*)(RGBColor[0.772079, 0.431554, 0.102387])(*,*)(*\\"1:eJxTTMoPSmNkYGAoZgESHvk5KRCeGJAIcndyzs/JLwouTyxJzghJzS3ISSxJTWMGyXMgyRcFbb3Lcn/LC/uiOf6yq6fMu21f9EGy8wKH2S57AKMVHmg=\\"*)(*]VB*),Null,Rectangle[{0,-890.5},{27.25081921680832,-889.5}]},{Text[\\"Mac OS X ARM (64-bit)\\",{-15.5,-1026.5}],Text[\\"2.3.7dynamic-env-mod\\",{29.7583125861421421656,-1026.5}],Null,(*VB[*)(RGBColor[0.363898, 0.618501, 0.782349])(*,*)(*\\"1:eJxTTMoPSmNkYGAoZgESHvk5KRCeGJAIcndyzs/JLwouTyxJzghJzS3ISSxJTWMGyXMgyRdNlna9JuV13b5oXdLH2YdOPbYvWnBX8SgD50t7AJbnHk8=\\"*)(*]VB*),Null,Rectangle[{0,-1026.5},{28.7583125861421421656,-1025.5}]},{Text[\\"Mac OS X ARM (64-bit)\\",{-15.5,-1162.5}],Text[\\"2.3.7dynamic-env-mod\\",{23.409800394327608,-1162.5}],Null,(*VB[*)(RGBColor[1, 0.75, 0])(*,*)(*\\"1:eJxTTMoPSmNkYGAoZgESHvk5KRCeGJAIcndyzs/JLwouTyxJzghJzS3ISSxJTWMGyXMgyRcxgMEHeyjjBYzBwAAAGBIUhA==\\"*)(*]VB*),Null,Rectangle[{0,-1162.5},{22.409800394327608,-1161.5}]}},{{Text[\\"Mac OS X ARM (64-bit)\\",{-15.5,-229.}],Text[\\"2.3.7dynamic-env-mod\\",{40.3746446292874211543,-229.}],Null,(*VB[*)(RGBColor[0.368417, 0.506779, 0.709798])(*,*)(*\\"1:eJxTTMoPSmNkYGAoZgESHvk5KRCeGJAIcndyzs/JLwouTyxJzghJzS3ISSxJTWMGyXMgyRcVTJv0VGXKdfsiw2kvp3eYP7AvOt4yw3vVtmf2AKMBH1E=\\"*)(*]VB*),Null,Rectangle[{0,-229.},{39.3746446292874211543,-228.}]},{Text[\\"Mac OS X ARM (64-bit)\\",{-15.5,-365.}],Text[\\"2.3.7dynamic-env-mod\\",{18.9850479820475683134,-365.}],Null,(*VB[*)(RGBColor[0.880722, 0.611041, 0.142051])(*,*)(*\\"1:eJxTTMoPSmNkYGAoZgESHvk5KRCeGJAIcndyzs/JLwouTyxJzghJzS3ISSxJTWMGyXMgyRf5HIl+fl/vjX3Rv+oPt5b2PrYv2jxrnfouvUP2ALwBIFo=\\"*)(*]VB*),Null,Rectangle[{0,-365.},{17.9850479820475683134,-364.}]},{Text[\\"Mac OS X ARM (64-bit)\\",{-15.5,-501.}],Text[\\"2.3.7dynamic-env-mod\\",{33.2238266423878200206,-501.}],Null,(*VB[*)(RGBColor[0.560181, 0.691569, 0.194885])(*,*)(*\\"1:eJxTTMoPSmNkYGAoZgESHvk5KRCeGJAIcndyzs/JLwouTyxJzghJzS3ISSxJTWMGyXMgyRcxPIvawvD2oX1R6dq9/qGKz+yLJCfsvff34wl7AJc8HzE=\\"*)(*]VB*),Null,Rectangle[{0,-501.},{32.2238266423878200206,-500.}]},{Text[\\"Mac OS X ARM (64-bit)\\",{-15.5,-637.}],Text[\\"2.3.7dynamic-env-mod\\",{29.409090870606505,-637.}],Null,(*VB[*)(RGBColor[0.922526, 0.385626, 0.209179])(*,*)(*\\"1:eJxTTMoPSmNkYGAoZgESHvk5KRCeGJAIcndyzs/JLwouTyxJzghJzS3ISSxJTWMGyXMgyRdd2frNLrT1rX3RHf35ayTW3bAv0nBnXJRw7JQ9AKbfHmU=\\"*)(*]VB*),Null,Rectangle[{0,-637.},{28.409090870606505,-636.}]},{Text[\\"Mac OS X ARM (64-bit)\\",{-15.5,-773.}],Text[\\"2.3.7dynamic-env-mod\\",{29.473804100227788,-773.}],Null,(*VB[*)(RGBColor[0.528488, 0.470624, 0.701351])(*,*)(*\\"1:eJxTTMoPSmNkYGAoZgESHvk5KRCeGJAIcndyzs/JLwouTyxJzghJzS3ISSxJTWMGyXMgyRctbepaFf/ygX3Rxzm6Clvk7tkXZXYxLC8vfGYPAKOQHmA=\\"*)(*]VB*),Null,Rectangle[{0,-773.},{28.473804100227788,-772.}]},{Text[\\"Mac OS X ARM (64-bit)\\",{-15.5,-909.}],Text[\\"2.3.7dynamic-env-mod\\",{18.839009449807445,-909.}],Null,(*VB[*)(RGBColor[0.772079, 0.431554, 0.102387])(*,*)(*\\"1:eJxTTMoPSmNkYGAoZgESHvk5KRCeGJAIcndyzs/JLwouTyxJzghJzS3ISSxJTWMGyXMgyRcFbb3Lcn/LC/uiOf6yq6fMu21f9EGy8wKH2S57AKMVHmg=\\"*)(*]VB*),Null,Rectangle[{0,-909.},{17.839009449807445,-908.}]},{Text[\\"Mac OS X ARM (64-bit)\\",{-15.5,-1045.}],Text[\\"2.3.7dynamic-env-mod\\",{29.5135816411600968948,-1045.}],Null,(*VB[*)(RGBColor[0.363898, 0.618501, 0.782349])(*,*)(*\\"1:eJxTTMoPSmNkYGAoZgESHvk5KRCeGJAIcndyzs/JLwouTyxJzghJzS3ISSxJTWMGyXMgyRdNlna9JuV13b5oXdLH2YdOPbYvWnBX8SgD50t7AJbnHk8=\\"*)(*]VB*),Null,Rectangle[{0,-1045.},{28.5135816411600968948,-1044.}]},{Text[\\"Mac OS X ARM (64-bit)\\",{-15.5,-1181.}],Text[\\"2.3.7dynamic-env-mod\\",{24.174971031286216,-1181.}],Null,(*VB[*)(RGBColor[1, 0.75, 0])(*,*)(*\\"1:eJxTTMoPSmNkYGAoZgESHvk5KRCeGJAIcndyzs/JLwouTyxJzghJzS3ISSxJTWMGyXMgyRcxgMEHeyjjBYzBwAAAGBIUhA==\\"*)(*]VB*),Null,Rectangle[{0,-1181.},{23.174971031286216,-1180.}]}},{{Text[\\"Mac OS X ARM (64-bit)\\",{-15.5,-247.5}],Text[\\"2.3.7dynamic-env-mod\\",{40.6475793794916107524,-247.5}],{(*VB[*)(RGBColor[1, 0, 0])(*,*)(*\\"1:eJxTTMoPSmNkYGAoZgESHvk5KRCeGJAIcndyzs/JLwouTyxJzghJzS3ISSxJTWMGyXMgyRcxgMEHeyiDgQHOAAALpBNd\\"*)(*]VB*),Arrow[{{60.6475793794916107524,-247.5},{54.6475793794916107524,-247.5}}]},(*VB[*)(RGBColor[0.368417, 0.506779, 0.709798])(*,*)(*\\"1:eJxTTMoPSmNkYGAoZgESHvk5KRCeGJAIcndyzs/JLwouTyxJzghJzS3ISSxJTWMGyXMgyRcVTJv0VGXKdfsiw2kvp3eYP7AvOt4yw3vVtmf2AKMBH1E=\\"*)(*]VB*),Null,Rectangle[{0,-247.5},{39.6475793794916107524,-246.5}]},{Text[\\"Mac OS X ARM (64-bit)\\",{-15.5,-383.5}],Text[\\"2.3.7dynamic-env-mod\\",{22.3797035026747845987,-383.5}],{(*VB[*)(RGBColor[1, 0, 0])(*,*)(*\\"1:eJxTTMoPSmNkYGAoZgESHvk5KRCeGJAIcndyzs/JLwouTyxJzghJzS3ISSxJTWMGyXMgyRcxgMEHeyiDgQHOAAALpBNd\\"*)(*]VB*),Arrow[{{42.3797035026747845987,-383.5},{36.3797035026747845987,-383.5}}]},(*VB[*)(RGBColor[0.880722, 0.611041, 0.142051])(*,*)(*\\"1:eJxTTMoPSmNkYGAoZgESHvk5KRCeGJAIcndyzs/JLwouTyxJzghJzS3ISSxJTWMGyXMgyRf5HIl+fl/vjX3Rv+oPt5b2PrYv2jxrnfouvUP2ALwBIFo=\\"*)(*]VB*),Null,Rectangle[{0,-383.5},{21.3797035026747845987,-382.5}]},{Text[\\"Mac OS X ARM (64-bit)\\",{-15.5,-519.5}],Text[\\"2.3.7dynamic-env-mod\\",{35.2746198401460182772,-519.5}],{(*VB[*)(RGBColor[1, 0, 0])(*,*)(*\\"1:eJxTTMoPSmNkYGAoZgESHvk5KRCeGJAIcndyzs/JLwouTyxJzghJzS3ISSxJTWMGyXMgyRcxgMEHeyiDgQHOAAALpBNd\\"*)(*]VB*),Arrow[{{55.2746198401460182772,-519.5},{49.2746198401460182772,-519.5}}]},(*VB[*)(RGBColor[0.560181, 0.691569, 0.194885])(*,*)(*\\"1:eJxTTMoPSmNkYGAoZgESHvk5KRCeGJAIcndyzs/JLwouTyxJzghJzS3ISSxJTWMGyXMgyRcxPIvawvD2oX1R6dq9/qGKz+yLJCfsvff34wl7AJc8HzE=\\"*)(*]VB*),Null,Rectangle[{0,-519.5},{34.2746198401460182772,-518.5}]},{Text[\\"Mac OS X ARM (64-bit)\\",{-15.5,-655.5}],Text[\\"2.3.7dynamic-env-mod\\",{29.735632223282234,-655.5}],{(*VB[*)(RGBColor[1, 0, 0])(*,*)(*\\"1:eJxTTMoPSmNkYGAoZgESHvk5KRCeGJAIcndyzs/JLwouTyxJzghJzS3ISSxJTWMGyXMgyRcxgMEHeyiDgQHOAAALpBNd\\"*)(*]VB*),Arrow[{{49.73563222328224,-655.5},{43.73563222328224,-655.5}}]},(*VB[*)(RGBColor[0.922526, 0.385626, 0.209179])(*,*)(*\\"1:eJxTTMoPSmNkYGAoZgESHvk5KRCeGJAIcndyzs/JLwouTyxJzghJzS3ISSxJTWMGyXMgyRdd2frNLrT1rX3RHf35ayTW3bAv0nBnXJRw7JQ9AKbfHmU=\\"*)(*]VB*),Null,Rectangle[{0,-655.5},{28.735632223282234,-654.5}]},{Text[\\"Mac OS X ARM (64-bit)\\",{-15.5,-791.5}],Text[\\"2.3.7dynamic-env-mod\\",{29.425241614553727,-791.5}],{(*VB[*)(RGBColor[1, 0, 0])(*,*)(*\\"1:eJxTTMoPSmNkYGAoZgESHvk5KRCeGJAIcndyzs/JLwouTyxJzghJzS3ISSxJTWMGyXMgyRcxgMEHeyiDgQHOAAALpBNd\\"*)(*]VB*),Arrow[{{49.42524161455373,-791.5},{43.42524161455373,-791.5}}]},(*VB[*)(RGBColor[0.528488, 0.470624, 0.701351])(*,*)(*\\"1:eJxTTMoPSmNkYGAoZgESHvk5KRCeGJAIcndyzs/JLwouTyxJzghJzS3ISSxJTWMGyXMgyRctbepaFf/ygX3Rxzm6Clvk7tkXZXYxLC8vfGYPAKOQHmA=\\"*)(*]VB*),Null,Rectangle[{0,-791.5},{28.425241614553727,-790.5}]},{Text[\\"Mac OS X ARM (64-bit)\\",{-15.5,-927.5}],Text[\\"2.3.7dynamic-env-mod\\",{18.90666034611764,-927.5}],{(*VB[*)(RGBColor[1, 0, 0])(*,*)(*\\"1:eJxTTMoPSmNkYGAoZgESHvk5KRCeGJAIcndyzs/JLwouTyxJzghJzS3ISSxJTWMGyXMgyRcxgMEHeyiDgQHOAAALpBNd\\"*)(*]VB*),Arrow[{{38.90666034611764,-927.5},{32.90666034611764,-927.5}}]},(*VB[*)(RGBColor[0.772079, 0.431554, 0.102387])(*,*)(*\\"1:eJxTTMoPSmNkYGAoZgESHvk5KRCeGJAIcndyzs/JLwouTyxJzghJzS3ISSxJTWMGyXMgyRcFbb3Lcn/LC/uiOf6yq6fMu21f9EGy8wKH2S57AKMVHmg=\\"*)(*]VB*),Null,Rectangle[{0,-927.5},{17.90666034611764,-926.5}]},{Text[\\"Mac OS X ARM (64-bit)\\",{-15.5,-1063.5}],Text[\\"2.3.7dynamic-env-mod\\",{29.8111487223813499838,-1063.5}],{(*VB[*)(RGBColor[1, 0, 0])(*,*)(*\\"1:eJxTTMoPSmNkYGAoZgESHvk5KRCeGJAIcndyzs/JLwouTyxJzghJzS3ISSxJTWMGyXMgyRcxgMEHeyiDgQHOAAALpBNd\\"*)(*]VB*),Arrow[{{49.8111487223813499838,-1063.5},{43.8111487223813499838,-1063.5}}]},(*VB[*)(RGBColor[0.363898, 0.618501, 0.782349])(*,*)(*\\"1:eJxTTMoPSmNkYGAoZgESHvk5KRCeGJAIcndyzs/JLwouTyxJzghJzS3ISSxJTWMGyXMgyRdNlna9JuV13b5oXdLH2YdOPbYvWnBX8SgD50t7AJbnHk8=\\"*)(*]VB*),Null,Rectangle[{0,-1063.5},{28.8111487223813499838,-1062.5}]},{Text[\\"Mac OS X ARM (64-bit)\\",{-15.5,-1199.5}],Text[\\"2.3.7dynamic-env-mod\\",{23.609088732252804,-1199.5}],{(*VB[*)(RGBColor[1, 0, 0])(*,*)(*\\"1:eJxTTMoPSmNkYGAoZgESHvk5KRCeGJAIcndyzs/JLwouTyxJzghJzS3ISSxJTWMGyXMgyRcxgMEHeyiDgQHOAAALpBNd\\"*)(*]VB*),Arrow[{{43.6090887322528,-1199.5},{37.6090887322528,-1199.5}}]},(*VB[*)(RGBColor[1, 0.75, 0])(*,*)(*\\"1:eJxTTMoPSmNkYGAoZgESHvk5KRCeGJAIcndyzs/JLwouTyxJzghJzS3ISSxJTWMGyXMgyRcxgMEHeyjjBYzBwAAAGBIUhA==\\"*)(*]VB*),Null,Rectangle[{0,-1199.5},{22.609088732252804,-1198.5}]}}},ImagePadding->20,Controls->False,ImageSize->{600,600}]`}</Wl>\\n\\nThe most impact I expected from a test called *Bubbles*, which involves a lot of creation and destruction of many graphics objects. However, it seems very weak.\\n\\nSee you next time \u2728\\n*Kirill*"},{"id":"/2024/04/22/gauge","metadata":{"permalink":"/blog/2024/04/22/gauge","source":"@site/blog/2024-04-22-gauge.md","title":"Dynamic gauge","description":"Today we will implement a simple gauge using Javascript and HTML and then integrate it to Wolfram Language.","date":"2024-04-22T00:00:00.000Z","tags":[{"label":"javascript","permalink":"/blog/tags/javascript"}],"readingTime":2.71,"hasTruncateMarker":true,"authors":[{"name":"Kirill Vasin","title":"Maintainer","url":"https://github.com/JerryI","imageURL":"https://avatars.githubusercontent.com/u/4111822?s=48&v=4","key":"jerryi"}],"frontMatter":{"authors":"jerryi","tags":["javascript"],"enableComments":true},"unlisted":false,"prevItem":{"title":"Dynamic color and opacity implementation","permalink":"/blog/2024/04/24/dynamic-env"},"nextItem":{"title":"Procedural spider animation","permalink":"/blog/spider"}},"content":"Today we will implement a simple gauge using Javascript and HTML and then integrate it to Wolfram Language.\\n\\n![](./Screenshot%202024-05-25%20at%2009.26.26.png)\\n\\n\x3c!--truncate--\x3e\\n\\n## Javascript\\nUsing AI assistant, one can directly ask\\n\\n> write a gauge in Javascript\\n\\nWith some minor modifications we end up with the following code\\n\\n```js\\n.js\\n\\ncore.gauge = async (args, env) => {\\n  \\n  // Create a gauge meter element\\n  const gauge = document.createElement(\'div\');\\n  gauge.style.width = \'100px\'; // half the original width\\n  gauge.style.height = \'50px\'; // half the original height\\n  gauge.style.border = \'1px solid #000\';\\n  gauge.style.borderRadius = \'50px 50px 0 0\'; // adjusted for smaller size\\n  gauge.style.position = \'relative\';\\n  gauge.style.background = \'linear-gradient(to right, red 0%, yellow 50%, green 100%)\';\\n\\n  // Create a needle for the gauge\\n  const needle = document.createElement(\'div\');\\n  needle.style.width = \'2px\';\\n  needle.style.height = \'40px\'; // made the needle longer for better visibility\\n  needle.style.background = \'#000\';\\n  needle.style.position = \'absolute\';\\n  needle.style.bottom = \'0\';\\n  needle.style.left = \'50%\';\\n  needle.style.transformOrigin = \'bottom\';\\n\\n  // Function to set the needle position based on input value\\n  function setNeedlePosition(value) {\\n    // Ensure value is between 0 and 1\\n    value = Math.max(0, Math.min(1, value));\\n    // Convert value to angle\\n    const angle = value * 180 - 90; // -90 to 90 degrees\\n    needle.style.transform = `rotate(${angle}deg)`;\\n  }\\n\\n  // Set initial needle position\\n  const pos = await interpretate(args[0], env);\\n  setNeedlePosition(pos); // Middle position\\n  \\n\\n  gauge.appendChild(needle);\\n\\n  env.element.appendChild(gauge);\\n  env.local.update = setNeedlePosition;\\n}\\n\\ncore.gauge.update = async (args, env) => {\\n  const val = await interpretate(args[0], env);\\n  env.local.update(val);\\n}\\n\\ncore.gauge.destroy = () => {\\n  console.log(\'Nothing to do\');\\n}\\n```\\n\\nIt already includes all dynamic methods such as `update` and `destroy` used to update the meter, once the data has been changed.\\n\\nTo test is we can write\\n\\n```mathematica\\ngauge[0.3] // CreateFrontEndObject\\n```\\n\\n## Dynamics\\nWe have already implemented `update` method, then we can directly hook it up to a slider\\n\\n```mathematica\\ngvalue = 0.1;\\nEventHandler[InputRange[0, 1, 0.1, 0.1], (gvalue = #) &]\\n\\ngauge[gvalue // Offload] // CreateFrontEndObject\\n```\\n\\n![](./gauge4-ezgif.com-video-to-gif-converter.gif)\\n\\n## Cleaning up\\nWe don\'t have to create FrontEndObject manually each time, it is can be done using `StandardForm` and `MakeBoxes`. There is a few way on how to implement it.\\n\\n### The simplest way\\nOne can force Wolfram Kernel to execute output expression on WLJS Interpreter via\\n\\n```mathematica title=\\"change 1\\"\\ngauge /: MakeBoxes[g_gauge, StandardForm] := With[{\\n  o = CreateFrontEndObject[g]\\n},\\n  MakeBoxes[o, StandardForm]\\n]\\n```\\n\\nthen we can freely do now\\n\\n```mathematica title=\\"change 2\\"\\ngvalue = 0.1;\\nEventHandler[InputRange[0, 1, 0.1, 0.1], (gvalue = #) &]\\n\\ngauge[gvalue // Offload]\\n```\\n\\n:::warning\\nThis makes expression not copyable from notebook to notebook, what you will see under the symbol is something like this\\n\\n```mathematica\\n(*VB[*)(FrontEndRef[\\"35fa850e-5bfd-48ab-84b2-dc815f5f2666\\"])(*,*)(*\\"1:eJxTTMoPSmNkYGAoZgESHvk5KRCeEJBwK8rPK3HNS3GtSE0uLUlMykkNVgEKG5umJVqYGqTqmialpeiaWCQm6VqYJBnppiRbGJqmmaYZmZmZAQCMcRXe\\"*)(*]VB*)\\n```\\n\\nSee [Treating as a decoration](#Treating%20as%20a%20decoration) on how to fix this\\n:::\\n\\n### Treating as a decoration\\nWe can preserve the original symbol by just decorating it using `ViewBox`\\n\\n```mathematica title=\\"change 1\\"\\ngauge /: MakeBoxes[g_gauge, StandardForm] := With[{\\n\\n},\\n  ViewBox[g, g // FrontEndVirtual]\\n]\\n```\\n\\nhere `FrontEndVirtual` accounts for creation a container for our instance similar to `CreateFrontEndObject`, but it does not allocate a storage and keeps the original expression.\\n\\nNow it is the same as it was before\\n\\n```mathematica title=\\"change 2\\"\\ngvalue = 0.1;\\nEventHandler[InputRange[0, 1, 0.1, 0.1], (gvalue = #) &]\\n\\ngauge[gvalue // Offload]\\n```\\n\\nBut if you try to copy it, you will see\\n\\n```mathematica\\n(*VB[*)(gauge[Offload[gvalue]])(*,*)(*\\"1:eJxTTMoPSmNkYGAoZgESHvk5KRAeP5BwK8rPK3HNSwnLLCopTcyBSLACifTE0vRUCJcdSPinpeXkJ6YUs4GkyhJzSlMBOCoUGw==\\"*)(*]VB*)\\n```\\n\\n*The original expression is preserved!*"},{"id":"spider","metadata":{"permalink":"/blog/spider","source":"@site/blog/2024-04-19-spider/index.md","title":"Procedural spider animation","description":"I have been always amazed by a fascinating procedural animation using in some games like Rain World. The key feature there is that you define sort of a target points for a model and a clever algorithm figures out the way how each bone or \\"leg\\" will move to achieve the goal. This is a common problem of kinematics. Let\'s start with the simplest approach","date":"2024-04-19T00:00:00.000Z","tags":[{"label":"animation","permalink":"/blog/tags/animation"}],"readingTime":4.55,"hasTruncateMarker":true,"authors":[{"name":"Kirill Vasin","title":"Maintainer","url":"https://github.com/JerryI","imageURL":"https://avatars.githubusercontent.com/u/4111822?s=48&v=4","key":"jerryi"}],"frontMatter":{"authors":"jerryi","tags":["animation"],"enableComments":true,"slug":"spider"},"unlisted":false,"prevItem":{"title":"Dynamic gauge","permalink":"/blog/2024/04/22/gauge"},"nextItem":{"title":"Image tracing and animation","permalink":"/blog/image-trace"}},"content":"![](./../spider-ezgif.com-crop.gif)\\n\\nI have been always amazed by a fascinating procedural animation using in some games like *Rain World*. The key feature there is that you define sort of a target points for a model and a clever algorithm figures out the way how each bone or \\"leg\\" will move to achieve the goal. This is a common problem of kinematics. Let\'s start with the simplest approach\\n\\n\x3c!--truncate--\x3e\\n## Cycloid\\nIf we roll a ball over a plane surface with attached marker at the side it will produce a well-known curve\\n\\n```mathematica\\nParametricPlot[{x - Sin[x], 1 - Cos[x]}, {x,0,6Pi}]\\n```\\n\\n<Wl>{`ParametricPlot[{x - Sin[x], 1 - Cos[x]}, {x,0,6Pi}]`}</Wl>\\n\\nImagine it it were legs, which would follow multiple cycloids with a little offset. But firstly, we should get rid of a plane ground and turn it into something more interesting\\n\\n```mathematica @\\nland[x_] := 5.0 + (*FB[*)((Sin[x])(*,*)/(*,*)(10.0))(*]FB*) + Cos[(*FB[*)((x)(*,*)/(*,*)(10.0))(*]FB*)] x + (*FB[*)(((*SpB[*)Power[x(*|*),(*|*)2](*]SpB*))(*,*)/(*,*)(100.0))(*]FB*)\\n\\nParametricPlot[{x, land[x]}, {x,-20,80}]\\n```\\n\\n<Wl>{`ParametricPlot[{x, 5.0 + (*FB[*)((Sin[x])(*,*)/(*,*)(10.0))(*]FB*) + Cos[(*FB[*)((x)(*,*)/(*,*)(10.0))(*]FB*)] x + (*FB[*)(((*SpB[*)Power[x(*|*),(*|*)2](*]SpB*))(*,*)/(*,*)(100.0))(*]FB*)}, {x,-20,80}]`}</Wl>\\n\\nTo project cycloid onto `land` curve, we could not find anything better, that to offset `y` axis\\n\\n```mathematica @\\nParametricPlot[\\n  With[{b = land[x]}, {\\n    {x, b},\\n    {(*FB[*)(((4x - Sin[4x]))(*,*)/(*,*)(4))(*]FB*), b + 1 - Cos[4x]}\\n  }\\n] // Evaluate, {x,-20,80}]\\n```\\n\\n<Wl>{`ListLinePlot[Table[With[{b = 5.0 + ((Sin[x])/(10.0)) + Cos[((x)/(10.0))] x + ((Power[x,2])/(100.0))}, {{x, b},{(((4x - Sin[4x]))/(4)), b + 1 - Cos[4x]}}] , {x,-20,80, 0.2}]//Transpose]`}</Wl>\\n\\n*try to zoom in with a mouse*\\n\\n## FABRIK Inverse\xa0Kinematics\\nLegs of a spider are not straight lines, and consists of small segments needed to be animated separately. For this case there is a nice heuristic algorithm [FABRIK](http://www.andreasaristidou.com/FABRIK.html).\\n\\nI do not claim that my implementation is most optimized, but it does solve a problem\\n\\n```mathematica\\nClearAll[cached];\\ncached[expr_] := cached[expr] = expr;\\nSetAttributes[cached, HoldAll]\\n\\nSetAttributes[fabrik, HoldFirst]\\n\\nfabrik[chain_, target_, origin_] := Module[{\\n\\tbuffer, prev, \\n\\tlengths = cached[Norm /@ (chain // Reverse // Differences) // Reverse]\\n},\\n  buffer = Table[With[{p = chain[[-i]]},\\n    If[i === 1,\\n      prev = target;\\n      target\\n    ,\\n    \\n      prev = prev - Normalize[(prev - p)] lengths[[1-i]];\\n      prev \\n    ]\\n  ], {i, chain // Length}] // Reverse;\\n\\n  chain = Table[With[{p = buffer[[i]]},\\n    If[i === 1,\\n      prev = origin;\\n      origin\\n    ,\\n    \\n      prev = prev - Normalize[(prev - p)] lengths[[i-1]];\\n      prev \\n    ]\\n  ], {i, chain // Length}];\\n]\\n```\\n\\nLet us see how it works in the following example\\n\\n```mathematica\\nchain = {{0,0}, {0.5,1}, {1,1}, {1,0.5}};\\n\\nGraphics[{\\n  Line[chain // Offload],\\n  EventHandler[Graphics`Canvas[], {\\"mousemove\\" -> Function[xy,\\n    fabrik[chain, xy, {0,0}]\\n  ]}]\\n}]\\n```\\n\\n![](./../tricks-ezgif.com-optimize.gif)\\n\\nThe next idea will be to assign the target position of each leg to a cycloid.\\n\\n## Modelling legs\\nWe can isolate our a leg into a independent component, hence it would be easier to combine them together\\n\\n```mathematica @\\nleg[event_String, target_, origin_] := Module[{\\n  (*BB[*)(* initial leg segments *)(*,*)(*\\"1:eJxTTMoPSmNhYGAo5gcSAUX5ZZkpqSn+BSWZ+XnFaYwgCS4g4Zyfm5uaV+KUXxEMUqxsbm6exgSSBPGCSnNSg9mAjOCSosy8dLBYSFFpKpoKkDkeqYkpEFXBILO1sCgJSczMQVYCAOFrJEU=\\"*)(*]BB*)\\n  chain = Table[k(target - origin) + origin, {k, -0.6, 1.6, 0.4}]\\n},\\n  (*BB[*)(* subscribe to an update *)(*,*)(*\\"1:eJxTTMoPSmNhYGAo5gcSAUX5ZZkpqSn+BSWZ+XnFaYwgCS4g4Zyfm5uaV+KUXxEMUqxsbm6exgSSBPGCSnNSg9mAjOCSosy8dLBYSFFpKpoKkDkeqYkpEFXBILO1sCgJSczMQVYCAOFrJEU=\\"*)(*]BB*)\\n  With[{cloned = EventClone[event]},    \\n    EventHandler[cloned, Function[Null,\\n      fabrik[chain, target, origin]\\n    ]];\\n  ];\\n\\n  Offload[chain]\\n]\\n\\nSetAttributes[leg, HoldRest];\\n```\\n\\nhere the first argument specifies an `EventObject` identifier, that will be called later on to update all legs segments in the animation loop.\\n\\nNow we can combine multiple legs, which target\'s variables will follows cycloids with small offsets as follows\\n\\n```mathematica @\\ngetTarget[xoffset_, x_] := With[{b = land[x + xoffset]}, \\n  {\\n    (*FB[*)(((4(x + xoffset) - Sin[4(x + xoffset)]))(*,*)/(*,*)(4))(*]FB*), \\n    b + 1 - Cos[4(x + xoffset)]\\n  }\\n]\\n```\\n\\n```mathematica @\\nModule[{t = 4.0 (*BB[*)(*x-position of a spider*)(*,*)(*\\"1:eJxTTMoPSmNhYGAo5gcSAUX5ZZkpqSn+BSWZ+XnFaYwgCS4g4Zyfm5uaV+KUXxEMUqxsbm6exgSSBPGCSnNSg9mAjOCSosy8dLBYSFFpKpoKkDkeqYkpEFXBILO1sCgJSczMQVYCAOFrJEU=\\"*)(*]BB*), ev = CreateUUID[]},\\n {\\n  Graphics[{\\n    Line[leg[ev, {t,1 + land[t]}, getTarget[-0.5, t]]], \\n    Line[leg[ev, {t,1 + land[t]}, getTarget[+0.25, t]]],\\n    Line[leg[ev, {t,1 + land[t]}, getTarget[0, t]]],    \\n    Line[leg[ev, {t,1 + land[t]}, getTarget[-0.25, t]]], \\n    Line[leg[ev, {t,1 + land[t]}, getTarget[+0.5, t]]],    \\n    \\n    (*BB[*)(* ground curve *)(*,*)(*\\"1:eJxTTMoPSmNhYGAo5gcSAUX5ZZkpqSn+BSWZ+XnFaYwgCS4g4Zyfm5uaV+KUXxEMUqxsbm6exgSSBPGCSnNSg9mAjOCSosy8dLBYSFFpKpoKkDkeqYkpEFXBILO1sCgJSczMQVYCAOFrJEU=\\"*)(*]BB*)\\n    Plot[land[x], {x,0,20}]//First \\n  }],\\n\\n  EventHandler[InputRange[0,10, 0.1], Function[value, t = value; EventFire[ev, Null]]]\\n } // Row \\n]\\n```\\n\\n![](./../Screenshot%202024-05-19%20at%2016.10.26.png)\\n\\n## Adding controls\\nSlides are boring. Using ``Graphics`Canvas[]`` with `EventHandler` we can capture arrow keys and animate accordingly. However, to animate continuously we can set a timer and remove it once the target position of a spider has been reached\\n\\n```mathematica @\\nModule[{\\n  t = 4.0, \\n  ev = CreateUUID[], \\n  target = 4.0, task = Null, \\n  wake, sleep, view = {0,0}, \\n  win = CurrentWindow[]\\n},\\n\\n  (*BB[*)(* using linear interpolation animate to the target*)(*,*)(*\\"1:eJxTTMoPSmNhYGAo5gcSAUX5ZZkpqSn+BSWZ+XnFaYwgCS4g4Zyfm5uaV+KUXxEMUqxsbm6exgSSBPGCSnNSg9mAjOCSosy8dLBYSFFpKpoKkDkeqYkpEFXBILO1sCgJSczMQVYCAOFrJEU=\\"*)(*]BB*)\\n  wake := If[task === Null, task = SetInterval[\\n    t = t + 0.1 (target - t);\\n    EventFire[ev, Null];\\n    \\n    If[Abs[t - target] < 0.01, sleep];\\n  , 30]];\\n\\n  sleep := With[{},\\n    TaskRemove[task];\\n    task = Null;\\n  ];\\n\\n  (*BB[*)(* animate the camera by view of the canvas *)(*,*)(*\\"1:eJxTTMoPSmNhYGAo5gcSAUX5ZZkpqSn+BSWZ+XnFaYwgCS4g4Zyfm5uaV+KUXxEMUqxsbm6exgSSBPGCSnNSg9mAjOCSosy8dLBYSFFpKpoKkDkeqYkpEFXBILO1sCgJSczMQVYCAOFrJEU=\\"*)(*]BB*)\\n  camera := With[{center = (*FB[*)(({30,20})(*,*)/(*,*)(2))(*]FB*) + view, spider = {t, land[t]}},\\n    If[Norm[center - spider] > 10, \\n      view = (center - spider)/2;\\n      FrontSubmit[ZoomAt[1, -view], MetaMarker[\\"marked\\"], \\"Window\\"->win];\\n    ];\\n  ];\\n\\n \\n  Graphics[{\\n    Line[leg[ev, {t,1.5 + land[t]}, getTarget[-2 0.5, t]]], \\n    Line[leg[ev, {t,1.5 + land[t]}, getTarget[+2 0.25, t]]],\\n    Line[leg[ev, {t,1.5 + land[t]}, getTarget[0, t]]],    \\n    Line[leg[ev, {t,1.5 + land[t]}, getTarget[-2 0.25, t]]], \\n    Line[leg[ev, {t,1.5 + land[t]}, getTarget[+2 0.5, t]]],    \\n\\n    Plot[land[x], {x,-20,80}]//First,\\n\\n    MetaMarker[\\"marked\\"],\\n\\n    EventHandler[Graphics`Canvas[], {\\n      \\"capturekeydown\\" -> Function[value, \\n        Switch[value,\\n          \\"ArrowRight\\",\\n            target = target + 1;\\n            camera;\\n            wake;\\n          ,  \\n          \\"ArrowLeft\\",\\n            target = target - 1;\\n            camera;\\n            wake;\\n          ,\\n          _,\\n            Null\\n        ];\\n        EventFire[ev, Null]\\n      ]\\n    }]\\n  }, PlotRange->{{0, 30}, {0, 20}}, ImagePadding->None]\\n]\\n```\\n\\nHere we also animate the view of the canvas and pan it to keep our spider in the center of the screen. To achieve that we mark the graphics with `MetaMarker` and then execute in its context `ZoomAt` function, which affects the state of an existing `Graphics` container.\\n\\n*The result*\\n\\n![](./../spider-ezgif.com-crop.gif)\\n\\n*focus on a canvas with your mouse and control the spider using arrow keys*\\n\\nNotebook is available by the link below\\n\\n [__Spider.wln__](./Spider.wln)"},{"id":"image-trace","metadata":{"permalink":"/blog/image-trace","source":"@site/blog/2024-04-13-imagetrace/index.md","title":"Image tracing and animation","description":"The notebook focuses on tracing and animating the contours of GIF images using WLJS Notebook.","date":"2024-04-13T00:00:00.000Z","tags":[{"label":"animation","permalink":"/blog/tags/animation"}],"readingTime":2.58,"hasTruncateMarker":true,"authors":[{"name":"Kirill Vasin","title":"Maintainer","url":"https://github.com/JerryI","imageURL":"https://avatars.githubusercontent.com/u/4111822?s=48&v=4","key":"jerryi"}],"frontMatter":{"authors":"jerryi","enableComments":true,"slug":"image-trace","tags":["animation"]},"unlisted":false,"prevItem":{"title":"Procedural spider animation","permalink":"/blog/spider"},"nextItem":{"title":"Image and Raster were implemented!","permalink":"/blog/imageraster"}},"content":"The notebook focuses on tracing and animating the contours of GIF images using WLJS Notebook.\\n\\nFirstly, import as a usual file\\n\\n```mathematica @\\nimgs = (*BB[*)(* Drag and drop your gif here *)(*,*)(*\\"1:eJxTTMoPSmNhYGAo5gcSAUX5ZZkpqSn+BSWZ+XnFaYwgCS4g4Zyfm5uaV+KUXxEMUqxsbm6exgSSBPGCSnNSg9mAjOCSosy8dLBYSFFpKpoKkDkeqYkpEFXBILO1sCgJSczMQVYCAOFrJEU=\\"*)(*]BB*);\\n```\\n\\nNow in `imgs` we have a sequence of images. In our case this is a dinosaur \\n\\n![giphy](./../giphy.gif)\\n\\n*the source is unknown, sorry*\\n\\n\x3c!--truncate--\x3e\\n\\nTo trace all contours we adapt a method from @anderstood on StackExchange\\n\\nA custom function `trace[ii_]` is defined to process each image frame. \\n\\n```mathematica\\ntrace[ii_] :=\\nModule[{img, pts, z, m, n, cn, f, g}, \\n  img = ii;\\n  img = Binarize[img~ColorConvert~\\"Grayscale\\"~ImageResize~500~Blur~3];\\n  pts = DeleteDuplicates@Cases[Normal@ListContourPlot[Reverse@ImageData[img], \\n       Contours -> {0.5}], _Line, -1][[1, 1]];\\n\\n  z = pts[[All, 1]] + I*pts[[All, 2]];\\n  m = 50;\\n  n = Length@z;\\n  cn = 1/n*Table[Sum[z[[k]]*Exp[-I*i*k*2 Pi/n], {k, 1, n}], {i, -m, m}];\\n{f[t_], g[t_]} = {Re@#, Im@#} &@\\n    Sum[cn[[i + m + 1]]*Exp[I*i*t], {i, -m, m}] // ComplexExpand;\\n  Function[t, {f[t], g[t]}]\\n]\\n```\\n\\nIn a nutshell it does:\\n\\n- Binarizes and processes the image.\\n- Extracts contour points using the data from `ListContourPlot` (kinda a hack \ud83d\ude03).\\n- Performs Fourier analysis to create a smooth curve representation.\\n- Returns a parameterized function of the contour.\\n\\n## Frame processing\\n\\nThen we need to process each frame like that\\n\\n```mathematica\\nframes = Map[With[{f = trace[#]}, \\n  Table[f[p], {p,0,2Pi,0.01}]\\n]&, imgs];\\n```\\n*it might take a while*\\n\\nThe processed frames are animated with a slider as follows\\n\\n```mathematica\\ncurrentFrame = frames // First;\\n\\nEventHandler[InputRange[1,Length[imgs], 1, 1], Function[v, \\n\\tcurrentFrame = frames[[v]]\\n]]\\n\\nGraphics[Line[currentFrame // Offload]]\\n```\\n\\n![](./../dino66-ezgif.com-optimize.gif)\\n\\nHowever we can go further and analyze each color plotting a separate curve for it.\\n\\n## Color separation\\nTo find dominant colors use can follows this approach\\n\\n```mathematica\\nimg = imgs // First;\\n\\n(* Convert Image Data to a List of Colors *)\\ncolors = ImageData[ImageResize[img, 200], \\"Byte\\"];\\ncolorsList = Flatten[colors, 1];\\n\\n(* Cluster Colors Using KMeans *)\\nclusters = FindClusters[colorsList, 4, Method -> \\"KMeans\\"];\\n\\n(* Extract and Visualize Dominant Colors *)\\ndominantColors = Map[Mean, clusters];\\ndominantColors = Select[dominantColors, Norm[#[[;;3]]]>10 &];\\ndominantColorsRGB = RGBColor /@ (dominantColors / 255)\\n```\\n\\nas a result we have\\n\\n```mathematica @\\n{(*VB[*)(RGBColor[{116204/126735, 124/1207, 72346/126735, 42004/42245}])(*,*)(*\\"1:eJxTTMoPSmNkYGAoZgESHvk5KRCeGJAIcndyzs/JLwouTyxJzghJzS3ISSxJhchzIMmnscD0+2QWlxTZKJU89Qx/a1/0ZMq5uOM+u+yLOvoO8ca4PLIv6jo5T9Hl4nt7AA1hJUk=\\"*)(*]VB*),(*VB[*)(RGBColor[{1339/159154, 277964/397885, 35905/477462, 2365267/2387310}])(*,*)(*\\"1:eJxTTMoPSmNkYGAoZgESHvk5KRCeGJAIcndyzs/JLwouTyxJzghJzS3ISSxJhchzIMmnscD0+2QWlxT5pez1+GrVaF9kfnJb/beoZ/ZFE7K2LfZ02GxftJy9VDVmy3t7AA3lJL8=\\"*)(*]VB*),(*VB[*)(RGBColor[{19736/26295, 128738/149005, 163801/447015, 443111/447015}])(*,*)(*\\"1:eJxTTMoPSmNkYGAoZgESHvk5KRCeGJAIcndyzs/JLwouTyxJzghJzS3ISSxJhchzIMmnscD0+2QWlxSFXeRLmsHywr6Is/vVmkNLX9sX/V+y9fOi4uv2RYeX1veU7HhvDwAkIidz\\"*)(*]VB*)}\\n```\\n\\nOn the next step we will convolve those colors with an image\\n\\n```mathematica\\nClamp[val_List, max_] := Clamp[val//First, max]\\nClamp[val_, max_] := If[val > 0.5, 1, 0] max \\n\\ncolorSeparate[img_, colors_] := Table[Map[\\n  Map[\\n    Function[pixel, \\n      Clamp[i[[;;3]] . pixel[[;;3]] / 255.0, 1]\\n    ]\\n  , #]&\\n, img // ImageData] // Image, {i, colors}]\\n```\\n\\n```mathematica\\nImageResize[#, 100] &/@ colorSeparate[img, dominantColors] \\n```\\n\\n![](./../Screenshot%202024-05-19%20at%2013.55.02.png)\\n\\n### Animating each color channel separately\\nFirstly we will apply curve extracting on each channel of the frame\\n\\n```mathematica\\nframesColored = Table[Map[With[{f = trace[#]}, \\n  Table[f[p], {p,0,2Pi,0.01}]\\n]&, colorSeparate[frame, dominantColors] ], {frame, imgs}];\\n```\\n\\n```mathematica\\ncurrentFrameColored = framesColored // First;\\n\\nEventHandler[InputRange[1,Length[imgs], 1, 1], Function[v, currentFrameColored = framesColored[[v]]]]\\n\\nGraphics[\\n  Table[\\n    With[{i=i},\\n      {dominantColorsRGB[[i]], Polygon[currentFrameColored[[i]] // Offload]}\\n    ]\\n  , {i, Length[dominantColorsRGB]}] // Reverse\\n]\\n```\\n\\nHere we use `Polygon` instead of `Line` to get filling for each closed curve. An algorithm did not work well for all colors and we effectively have only two instead of 3\\n\\n![](./../dinooo.svg)\\n\\nTry it on your images!\\n\\n[__Image tracing.wln__](./Image%20tracing.wln)"},{"id":"imageraster","metadata":{"permalink":"/blog/imageraster","source":"@site/blog/2023-09-14-image-raster/2023-08-20-image-raster.md","title":"Image and Raster were implemented!","description":"It means, MatrixPlot as well as Rasterize can work properly finally","date":"2023-08-20T00:00:00.000Z","tags":[{"label":"graphics","permalink":"/blog/tags/graphics"}],"readingTime":0.73,"hasTruncateMarker":true,"authors":[{"name":"Kirill Vasin","title":"Maintainer","url":"https://github.com/JerryI","imageURL":"https://avatars.githubusercontent.com/u/4111822?s=48&v=4","key":"jerryi"}],"frontMatter":{"slug":"imageraster","title":"Image and Raster were implemented!","authors":"jerryi","tags":["graphics"],"enableComments":true,"draft":false},"unlisted":false,"prevItem":{"title":"Image tracing and animation","permalink":"/blog/image-trace"},"nextItem":{"title":"Realtime path-tracing","permalink":"/blog/rtx-intro"}},"content":"![](plot.svg)\\n\\n```mathematica\\nMatrixPlot[\\n Fourier[Table[\\n   UnitStep[i, 4 - i] UnitStep[j, 7 - j], {i, -25, 25}, {j, -25, \\n    25}]]]\\n```\\nIt means, `MatrixPlot` as well as `Rasterize` can work properly finally\\n\\n\x3c!--truncate--\x3e\\n\\n\\n\\n## Raster\\n\\n`MatrixPlot` produces `Graphics` with `Raster` inside. However, similar function `ArrayPlot` __won\'t work properly__ since it doesn\'t provide the `PlotRange` option.\\n\\nIn my implementation of `Graphics` it cannot guess what the plot range would be. Therefore you have to manually provide it. For example\\n\\n```mathematica\\nGraphics[{\\n\\tRaster[Table[{x, y, x, y}, {x, .1, 1, .1}, {y, .1, 1, .1}]]}\\n\\t, PlotRange->{{0.1,10}, {0.1,10}\\n}]\\n```\\n\\n\\n\\nHere `PlotRange` is necessary, otherwise it will be set to `{-1,1}`.\\n\\n## Image\\nThis is actually a separate entity, that uses HTML5 canvas\\n> despite this fact, you can still easily embed it into `Graphics` using `Inset` wrapper\\n\\n\\n\\nPlease see __Reference__ section in the frontend docs for more information. See Ya!"},{"id":"rtx-intro","metadata":{"permalink":"/blog/rtx-intro","source":"@site/blog/2023-07-20-rtx/index.md","title":"Realtime path-tracing","description":"There is nothing more exciting in programming than designing a graphics application. Thankfully, there is one person on Github Garrett Johnson, who implemented a path-tracing algorithm on top of the well-known THREE.js graphics engine. Moreover, it fully supports features from the original library and can be anytime flipped as a main renderer.","date":"2023-07-20T00:00:00.000Z","tags":[{"label":"frontend","permalink":"/blog/tags/frontend"},{"label":"graphics","permalink":"/blog/tags/graphics"}],"readingTime":2.05,"hasTruncateMarker":true,"authors":[{"name":"Kirill Vasin","title":"Maintainer","url":"https://github.com/JerryI","imageURL":"https://avatars.githubusercontent.com/u/4111822?s=48&v=4","key":"jerryi"}],"frontMatter":{"slug":"rtx-intro","title":"Realtime path-tracing","authors":"jerryi","tags":["frontend","graphics"],"enableComments":true},"unlisted":false,"prevItem":{"title":"Image and Raster were implemented!","permalink":"/blog/imageraster"}},"content":"![](Screenshot%20from%202023-07-20%2020-04-08.png)\\n\\nThere is nothing more exciting in programming than designing a graphics application. Thankfully, there is one person on Github [Garrett Johnson](https://github.com/gkjohnson), who implemented a path-tracing algorithm on top of the well-known [THREE.js](https://threejs.org) graphics engine. Moreover, it fully supports features from the original library and can be anytime flipped as a main renderer.\\n\\n\x3c!--truncate--\x3e\\n\\nI hooked up his [library](https://github.com/gkjohnson/three-gpu-pathtracer) to works as a secondary engine for `Graphics3D` function presented in [wljs-graphics3d-threejs](https://github.com/JerryI/Mathematica-ThreeJS-graphics-engine) library. Just pass an option\\n\\n```mathematica\\nGraphics3D[%, \\"RTX\\"->True]\\n```\\n\\nAnd it will bake a realtime photorealistic image. It also supports all properties used in traditional rendering, i.e. `Emissive[]`, `Metallness[]`, HDRI map and many more!\\n\\nSome classical examples from Wolfram Mathematica\\n\\n![](IMG_0556.png)\\n\\n\\n![](screenshot(8)%201.png)\\n\\nYou might recognize those examples from `Graphics3D` official documentation page. Here is some other neat pictures produced using the following code\\n\\n### Metallic maze\\nThis was taken from the discussion [here](https://mathematica.stackexchange.com/questions/191047/making-holes-from-maze-generated-graphics3d). The maze is made from many polygons, where for the surface `Metallness[1], Roughness[0]` were applied. Since it provides perfect reflection, the overall time for rendering (when the noise has gone) is relatively low.\\n\\n```mathematica\\nshowmaze = Uncompress[FromCharacterCode @@ ImageData[Import[\\"https://i.stack.imgur.com/XVJcP.png\\"], \\"Byte\\"]];\\nprims = CapsuleShape @@@ Cases[showmaze, _Cylinder, Infinity];\\nprims = prims /. {{5., 5., 5.} -> {5.5, 5., 5.}, {1., 1., 1.} -> {1., 0.5, 1.}};\\nims = RegionImage[#, {{0.3`, 5.7`}, {0.3`, 5.7`}, {0.3`, 5.7`}}, RasterSize -> 100] & /@ prims;\\nim = ImageApply[Max, ims];\\n```\\n\\nThen, the generated mesh is lit by `lighting` arrays, which contain randomly distributed glowing spheres\\n\\n```mathematica\\nlighting = Table[{Emissive[RGBColor@@(RandomReal[{0,1}, 3]), 2], Sphere[RandomReal[{1,92}, 3], RandomReal[{1,7}]]}, {i, 1, 30}];\\nShow[bmr = ImageMesh[im, Method -> \\"DualMarchingCubes\\"], PlotRange -> {{0, 91}, {1, 92}, {0, 91}}][[1]];\\nGraphics3D[{lighting, Metalness[0], Roughness[0], %},  \\"Lighting\\"->None, ViewProjection->\\"Perspective\\", \\"RTX\\"->True]\\n```\\n\\n\\n![](screenshot(12).png)\\n\\nDespite the complicity of the scene, __it renders in real time__ with an acceptable amount of noise.\\n\\n### Torus Knot\\nThis is rather classical example, but uses a glossy surface using `Roughness[0]` lit by two glowing spheres\\n\\n```mathematica\\nKnotData[{\\"TorusKnot\\", {3, 5}}][[1]];\\nGraphics3D[{{Emissive[Red, 5], Sphere[{0,0,-0.1}, 0.14]}, {Roughness[0],Cyan, %}, {Emissive[RGBColor[{1,1,1}], 5], Sphere[{0,0,0.4}, 0.1]}}, Lighting->None, \\"RTX\\"->True]\\n```\\n\\nHere is the result\\n\\n![](screenshot(13).png)\\n\\nLooks like a dream...\\n\\n## Limitations\\n- The dynamic scenes now are not supported, but can be added in theory according to the documentation of the path-rendering library. \\n- Requires a dedicated GPU (actually with my Intel UHD integrated graphics it works, but demands an extremely long time to compile shaders to start rendering). However, iPhones, Androids can still handle not very complicated scenes.\\n- Safari crashes (Firefox, Chrome, Vivaldi work well)"}]}}')}}]);