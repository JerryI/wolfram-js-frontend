{"searchDocs":[{"title":"Promises","type":0,"sectionRef":"#","url":"/wljs-docs/frontend/Advanced/Events system/promises","content":"Promises warning This chapter is in development. Please see References Promise","keywords":"","version":null},{"title":"Routing","type":0,"sectionRef":"#","url":"/wljs-docs/frontend/Advanced/Events system/routing","content":"Routing warning Remember the number 1 rule: 1 event object = 1 handlerTo assign more, you need to clone (EventClone) the original object and it will be rewired into a sort of splitter. Since the notebook is usually a playground, you need to have an opportunity to undo actions, when you reevaluate the cell. Therefore there is concept of explicit routing of one event to some other handlers. For example you have a generator of events (does not necessary has to be a button) generator[uid_String] := With[{btn = InputButton[&quot;Click&quot;]}, (* we use input button only for demonstration purposes *) (* one can fire any EventObject manually using EventFire[] *) EventHandler[btn, Function[Null, EventFire[uid, &quot;some data&quot;]; ]]; btn ] here we used the representation of events object as a string uid (it is also valid) and fire it using a button (which also returns EventObject). Now we need an arbitrary handler handler[uid_String, func_:Print] := With[{ev = EventClone[uid]}, (* clean up, if the cell has been destroyed *) EventHandler[EvaluationCell[], {&quot;destroy&quot; -&gt; Function[Null, Delete[ev]]}]; (* assign Print for instance *) EventHandler[ev, func]; ] info You do not need to clone EvaluationCell to assign many handlers to it. it is cloned automatically once appeared in EventHandler. The cool thing, that we can have many of those handlers attached to the same event, since it clones it every-time and removes handler function, when you reevaluate the cell. Let us see it on the following example generator[&quot;random-word-you-like&quot;] handler[&quot;random-word-you-like&quot;] and in some other cell, if you like you can add other handler to the same event handler[&quot;random-word-you-like&quot;, FrontSubmit[Alert[#]]&amp;] By pressing the button, it will call the whole list of attached handlers.","keywords":"","version":null},{"title":"HTML","type":0,"sectionRef":"#","url":"/wljs-docs/frontend/Cell types/HTML","content":"HTML Github repoYou can also write plain HTML together with embedded Wolfram Language expressions WSP template engine allows to use Wolfram Language to process the text like PHP (see more here).","keywords":"","version":null},{"title":"Large tables of data","type":0,"sectionRef":"#","url":"/wljs-docs/frontend/Advanced/Slides/tables","content":"Large tables of data One can utilize component InputTable, that originally stands for editing table, but can be used just to view them as well. The good thing about it that it supports infinitely large tables since the actual content is loaded by parts (and unloads if no longer needed) statistics on CPU TB = ExampleData[{&quot;Statistics&quot;, &quot;CPUPerformance&quot;}] // TableView // CreateFrontEndObject; slide .slide ## CPU Performance An example list &lt;br/&gt;&lt;br/&gt; &lt;TB/&gt; The expected result","keywords":"","version":null},{"title":"Code highlighting","type":0,"sectionRef":"#","url":"/wljs-docs/frontend/Advanced/Slides/embed-wl","content":"Code highlighting Since it support WLX syntax as well, one can combine the copied text from the normal Wolfram Language cell into a EditorView component prototype .wlx CodeInset[str_String] := With[{Fe = EditorView[str] // CreateFrontEndObject}, &lt;div style=&quot;text-align: left;&quot;&gt;&lt;Fe/&gt;&lt;/div&gt; ] Then somewhere on your slide .slide # Input cell inside a slide &lt;CodeInset&gt; (*SbB[*)Subscript[B(*|*),(*|*)k_, q_](*]SbB*)[coords_] := Sum[ With[{\\\\[Theta] = ToSphericalCoordinates[c][[2]], \\\\[Phi] = ToSphericalCoordinates[c][[3]]}, (*SpB[*)Power[(-1)(*|*),(*|*)q](*]SpB*) (*SbB[*)Subscript[a(*|*),(*|*)k](*]SbB*)[Norm[c]] (*SqB[*)Sqrt[(*FB[*)((4Pi)(*,*)/(*,*)(2k + 1))(*]FB*)](*]SqB*) SphericalHarmonicY[k,-q, \\\\[Theta], \\\\[Phi]] ] , {c, coords}] &lt;/CodeInset&gt; info There is no need in writing (*funny comments*) and etc. manually, this is a representation of cell's elements (Boxes) from a normal WL editor. Just copy the text from it (input/output cell) The result will look like this","keywords":"","version":null},{"title":"Graphics animation & interaction","type":0,"sectionRef":"#","url":"/wljs-docs/frontend/Advanced/Slides/animations","content":"","keywords":"","version":null},{"title":"Interactive plots​","type":1,"pageTitle":"Graphics animation & interaction","url":"/wljs-docs/frontend/Advanced/Slides/animations#interactive-plots","content":" By the default, everything you plot using Plot or Graphics or Graphics3D can be dragged or panned or rotated. This behavior is controlled by the options and can be switched off if necessary. For example  Figure = Plot[{x, Sin[x], Sin[x]^2}, {x,0,2Pi}];   .slide # Simple plot &lt;Figure/&gt; Try to drag it using you mouse   The result will look like following    ","version":null,"tagName":"h2"},{"title":"Animation​","type":1,"pageTitle":"Graphics animation & interaction","url":"/wljs-docs/frontend/Advanced/Slides/animations#animation","content":" In general all visuals can be done in the same way as in regular cells, since it uses the same components.  When a slide becomes visible or a fragment got revealed (see Transitions and fragments) it fires an event, where all information is encoded. To enable this - use SlideEventListener.  info Put SlideEventListener anywhere on the slide to hook up WL Kernel to all events associated with it  tip Keep the dynamic variables scoped using LeakyModule and allow use explicit event routing like in Scoping and routing. Later it will allow you to reuse your components for other slides much easier.  Let us see the simples example  .slide # Animation example &lt;Figure id={&quot;routed-event-fragment-1&quot;}/&gt; The figure will be changed, when the fragment below is revealed &lt;span style=&quot;color:red&quot;&gt;Magic&lt;/span&gt; &lt;!-- .element: class=&quot;fragment&quot; data-fragment-index=&quot;1&quot; --&gt; &lt;SlideEventListener Id={&quot;routed-event&quot;}/&gt;   The additional -fragment-[index] is added implicitly by SlideEventListener function to all fragments on a slide. While SlideEventListener is attached only to the slide, where it has been placed.  Now let us make a simple figure  Figure[OptionsPattern[]] := With[{event = EventClone[OptionValue[&quot;id&quot;]]}, EventHandler[EvaluationCell[], {&quot;destroy&quot; -&gt; Function[Null, Delete[event]]}]; ... ] Options[Figure] = {&quot;id&quot;-&gt;&quot;&quot;}   Here we clone a slide event (this is a safe way, if more than 1 handlers will be involved). Afterwards we need to make sure that if one reevaluate the cell, the handler will be removed automatically. That's how you can clean-up handlers after the evaluation.  Now the content  Figure[OptionsPatten[]] := With[{event = EventClone[OptionValue[&quot;id&quot;]]}, EventHandler[EvaluationCell[], {&quot;destroy&quot; -&gt; Function[Null, Delete[event]]}]; LeakyModule[{points}, (* initial state *) points = RandomReal[{-1,1}, {40,2}]; EventHandler[event, Function[Null, (* act when the event happend *) points = {Sin[#], Cos[#]} &amp;/@ Range[40] ]]; Graphics[{Red, Line[points // Offload]}] ] ] Options[Figure] = {&quot;id&quot;-&gt;&quot;&quot;}   This little script will plot randomly distributed points as lines for its initial state. When the event is fired, it changes the distribution of points to a circle. The animation is done by Graphics (i.e. it is a native feature of it and has nothing to do with slides).  note Consider options TransitionType and TransitionDuration of Graphics to control the transition animation.  The expected result will be    Sure the state is not reservable in this case. You need to manage it by your own considering more events generated by SlideEventListener.  However, in practice reports are usually linear and do not require to repeat all animations again.  ","version":null,"tagName":"h2"},{"title":"Append graphics on slide​","type":1,"pageTitle":"Graphics animation & interaction","url":"/wljs-docs/frontend/Advanced/Slides/animations#append-graphics-on-slide","content":" Meta-markers can work well in a case if one wants to append some data on the existing graphics canvas.  ","version":null,"tagName":"h3"},{"title":"Buttons, sliders etc​","type":1,"pageTitle":"Graphics animation & interaction","url":"/wljs-docs/frontend/Advanced/Slides/animations#buttons-sliders-etc","content":" caution To be written. Check shipped examples (File→\\rightarrow→ Open Examples) for that. In principle just follow Dynamics tutorial ","version":null,"tagName":"h2"},{"title":"Files","type":0,"sectionRef":"#","url":"/wljs-docs/frontend/Cell types/Files","content":"","keywords":"","version":null},{"title":"Image viewer​","type":1,"pageTitle":"Files","url":"/wljs-docs/frontend/Cell types/Files#image-viewer","content":" You can drop any image available in the folder of your notebook and type in a new cell its filename  randompic.png     ","version":null,"tagName":"h2"},{"title":"Reading and writing files​","type":1,"pageTitle":"Files","url":"/wljs-docs/frontend/Cell types/Files#reading-and-writing-files","content":" In principle you can print the content of any file located in the notebook's folder by typing its name without line breaks  filename.txt   For writing this is the same, but the actual content goes from the next line  filename.txt Hello World     Or, if you are writing a package, it will come handy  cell 1 IR.wl BeginPackage[&quot;JerryI`Mirage`IR`&quot;] (* utils *) MapHeld[f_, list_] := Table[Extract[Unevaluated[list], i, f], {i, 1, Length[Unevaluated[list]]}] SetAttributes[MapHeld, HoldAll] ClearAll[Lexer] SetAttributes[Lexer, HoldAll] ...     And then, it can be imported easily  cell 2 Get[&quot;IR.wl&quot;];   info Frontend detects the file extension and tries to find a proper syntax highlighting scheme. ","version":null,"tagName":"h2"},{"title":"Markdown","type":0,"sectionRef":"#","url":"/wljs-docs/frontend/Cell types/Markdown","content":"Markdown Github repoTo switch to Markdown language with LaTeX support use .md prefix on the first line","keywords":"","version":null},{"title":"Many more...","type":0,"sectionRef":"#","url":"/wljs-docs/frontend/Cell types/Many more...","content":"Many more... You can extend output cell types via a few lines of code and you favorite framework / package info Please, see Known packages page for more information Mermaid​ Github repoDraw beautiful diagrams by code .mermaid pie title NETFLIX &quot;Time spent looking for movie&quot; : 90 &quot;Time spent watching it&quot; : 10 ","keywords":"","version":null},{"title":"Slides","type":0,"sectionRef":"#","url":"/wljs-docs/frontend/Cell types/Slides","content":"","keywords":"","version":null},{"title":"Merge slides from different cells​","type":1,"pageTitle":"Slides","url":"/wljs-docs/frontend/Cell types/Slides#merge-slides-from-different-cells","content":" To merge the all slides into a single fat presentation use  .slides   It will merge and print slides from all cells in the notebook into a single one.  tip Use projector feature to show slides in a separate window  ","version":null,"tagName":"h2"},{"title":"Plugins​","type":1,"pageTitle":"Slides","url":"/wljs-docs/frontend/Cell types/Slides#plugins","content":" The package uses also some external plugins  pointer (press Q to toggle) ","version":null,"tagName":"h2"},{"title":"Javascript","type":0,"sectionRef":"#","url":"/wljs-docs/frontend/Cell types/Javascript","content":"","keywords":"","version":null},{"title":"Output cell​","type":1,"pageTitle":"Javascript","url":"/wljs-docs/frontend/Cell types/Javascript#output-cell","content":" The returned value from the function can be a Javascript object or DOM element. The last one will be displayed in the output cell  ","version":null,"tagName":"h2"},{"title":"Handlers​","type":1,"pageTitle":"Javascript","url":"/wljs-docs/frontend/Cell types/Javascript#handlers","content":" There is a few quite useful built-in objects accesable from the cell.  ","version":null,"tagName":"h2"},{"title":"this.ondestroy​","type":1,"pageTitle":"Javascript","url":"/wljs-docs/frontend/Cell types/Javascript#thisondestroy","content":" This object is called when a cell has been destroyed. Assign any clean-up function to the given object  this.ondestroy = () =&gt; { //clean up the stuff }   danger Always clean up any timers using this.ondestroy variable. Otherwise those timers and animation loops will continue to work even after reevaluating the cell.  ","version":null,"tagName":"h3"},{"title":"requestAnimationFrame​","type":1,"pageTitle":"Javascript","url":"/wljs-docs/frontend/Cell types/Javascript#requestanimationframe","content":" It is well-common method used in Javascript to synchronize with a framerate of the browser and render some graphics  danger Do not forget to cancelAnimationFrame using this.ondestroy method  ","version":null,"tagName":"h3"},{"title":"Communication with Wolfram Kernel​","type":1,"pageTitle":"Javascript","url":"/wljs-docs/frontend/Cell types/Javascript#communication-with-wolfram-kernel","content":" In general one can define any function for WLJS Interpreter using Javascript cells, please see guide here FrontSubmit and Integration with server / client via WebSockets  For the most applications event-based system is used, see Dynamic ","version":null,"tagName":"h2"},{"title":"Wolfram Language","type":0,"sectionRef":"#","url":"/wljs-docs/frontend/Cell types/Wolfram Language","content":"","keywords":"","version":null},{"title":"Syntax highlighting​","type":1,"pageTitle":"Wolfram Language","url":"/wljs-docs/frontend/Cell types/Wolfram Language#syntax-highlighting","content":" Depending on the language you specify at the first line, it will highlight HTML, Markdown or Javascript. Wolfram Language autocomplete and highlighting can be extended using external packages.  Once you define something in Wolfram Kernel session, the corresponding symbol will appear in the autocomplete window.  ","version":null,"tagName":"h2"},{"title":"Syntax sugar​","type":1,"pageTitle":"Wolfram Language","url":"/wljs-docs/frontend/Cell types/Wolfram Language#syntax-sugar","content":" All equations typed in the editor are compatible with any WL parser, i.e. can be used in wolframscript, since the syntax sugar and the structure is localized inside comments  For example  2π\\sqrt{2\\pi}2π​becomes  (*SqB[*)Sqrt[2\\[Pi]](*]SqB*)   which is safe for copying to anywhere outside the WLJS ecosystem  The following shortcuts are used for equations typing  Ctrl-2 - place a square root on the selected textCtrl-/ - make a fractionCtrl-- - make a subscriptCtrl-6 - make a superscript (power)  You can also make your own custom representation of your symbol like in Mathematica using MakeBoxes. Please see InterpretationBox, Interpretation and MakeBoxes ","version":null,"tagName":"h2"},{"title":"Components","type":0,"sectionRef":"#","url":"/wljs-docs/frontend/Advanced/Slides/components","content":"","keywords":"","version":null},{"title":"Layout helpers​","type":1,"pageTitle":"Components","url":"/wljs-docs/frontend/Advanced/Slides/components#layout-helpers","content":" This is a common case, when components comes handy. Imagine a typical situation, when we need to organize columns in the presentation  .wlx Columns[cols__] := With[{width = 99 / (List[cols]//Length) // Floor}, With[{Layout = Table[ &lt;div style=&quot;width: {width}%&quot;&gt; &lt;Col/&gt; &lt;/div&gt; , {Col, List[cols]}] }, &lt;div style=&quot;display:flex&quot;&gt; &lt;Layout/&gt; &lt;/div&gt; ] ]   here we firstly calculated the width of each column based of their number, and then used a normal HTML with CSS to style them.  Since the input argument is not typed, one can use nested tags, or WL expressions as a content for each columns. Here is one of the slides of @JerryI's presentation on a recent talk in 2023  .slide # Different ways of calculating properties for magnetic materials &lt;br/&gt;&lt;br/&gt; &lt;Columns&gt; &lt;p style=&quot;text-align:left&quot;&gt; ## DFT+U DFT with Columb repulsion between sites allowing to model the localized magnetic moments - lack of $\\sim 1~cm^{-1}$ accuracy - slow and time-consuming - hard to control the intermediate steps - feeling of working with &quot;black box&quot; &lt;/p&gt; &lt;p style=&quot;text-align:left&quot;&gt; ## Effective Hamiltonians Spin Hamiltonian, Heisenberg, etc... randomly picked - non consistent (completely different from compound to compund) - overparametrized &lt;/p&gt; &lt;p style=&quot;text-align:left&quot;&gt; ## Microscopic theory &lt;!-- .element: class=&quot;fragment highlight-red&quot; data-fragment-index=&quot;1&quot; --&gt; Building the energy levels step by step from the isolated ion considering crystal structure and interactions &lt;!-- .element: class=&quot;fragment highlight-red&quot; data-fragment-index=&quot;1&quot; --&gt; - considered to be outdated - ~~requires a lot of calculations~~ - hard to threat collective excitations &lt;span style=&quot;color:red&quot;&gt;Use Computer Algebra!&lt;/span&gt; &lt;!-- .element: class=&quot;fragment&quot; data-fragment-index=&quot;1&quot; --&gt; &lt;/p&gt; &lt;/Columns&gt;   One can see, that this is again a mixture of HTML/XML and Markdown. Each tag entering into &lt;Columns&gt; is treated as a separate argument.  But nothing can stop you from using a plain text  .slide &lt;Columns&gt; # Title First column &lt;Identity&gt; # Other title Second one &lt;/Identity&gt; &lt;/Columns&gt;   info Identity or dummy or p or div helps WLX to differentiate between the first and second argument. It is similar to li tag used in ul HTML tag used for lists.  You can use the full power of modern CSS to style it in a way you like. ","version":null,"tagName":"h2"},{"title":"PDF","type":0,"sectionRef":"#","url":"/wljs-docs/frontend/Export/PDF","content":"PDF danger Is in development Use native browser's PDF printer on exported file using HTML file","keywords":"","version":null},{"title":"HTML file","type":0,"sectionRef":"#","url":"/wljs-docs/frontend/Export/HTML file","content":"","keywords":"","version":null},{"title":"Portability​","type":1,"pageTitle":"HTML file","url":"/wljs-docs/frontend/Export/HTML file#portability","content":" Once exported, it can be unpacked back to a normal notebook once opened using WLJS Notebook app.  ","version":null,"tagName":"h2"},{"title":"Offline computations​","type":1,"pageTitle":"HTML file","url":"/wljs-docs/frontend/Export/HTML file#offline-computations","content":" danger To be implemented...  It is possible to move the code from Wolfram Kernel onto frontend with some limitations, thus it allows to perform calculations purely on the frontends WLJS Interpreter with no running Wolfram Engine in the background. ","version":null,"tagName":"h3"},{"title":"HTMLForm","type":0,"sectionRef":"#","url":"/wljs-docs/frontend/Reference/Decorations/HTMLForm","content":"HTMLForm WLJS Execution environment Needs container Registered HTMLForm[&quot;&lt;h2&gt;Hello World&lt;/h2&gt;&quot;] renders HTML tags to the output cell It can be used as alternative to an HTML-cells type.","keywords":"","version":null},{"title":"Column","type":0,"sectionRef":"#","url":"/wljs-docs/frontend/Reference/Decorations/Column","content":"Column Wolfram Kernel Execution environment Column[{object1, object2, ...}] shows the list of any Wolfram Expressions in a single column acting as a decoration","keywords":"","version":null},{"title":"WLX","type":0,"sectionRef":"#","url":"/wljs-docs/frontend/Cell types/WLX","content":"","keywords":"","version":null},{"title":"Embed figures into a custom layout​","type":1,"pageTitle":"WLX","url":"/wljs-docs/frontend/Cell types/WLX#embed-figures-into-a-custom-layout","content":" Plot a figure into a symbol starting from the capital letter  Figure = Plot[Sinc[5x], {x,-5,5}]   then type in a new cell  .wlx &lt;div&gt; &lt;style&gt; @keyframes tilt-shaking { 0% { transform: rotate(0deg); } 25% { transform: rotate(5deg); } 50% { transform: rotate(0eg); } 75% { transform: rotate(-5deg); } 100% { transform: rotate(0deg); } } &lt;/style&gt; &lt;div style=&quot;animation: tilt-shaking 0.35s infinite&quot;&gt; &lt;Figure/&gt; &lt;/div&gt; &lt;/div&gt;   Then you plot will shake infinitely ;)  ","version":null,"tagName":"h2"},{"title":"Making components​","type":1,"pageTitle":"WLX","url":"/wljs-docs/frontend/Cell types/WLX#making-components","content":" Let us define some hybrid WL function  .wlx Heading[Text_, OptionPattern[]] := With[{color = OptionValue[&quot;Color&quot;]}, &lt;h2 style=&quot;color: {color}&quot;&gt;&lt;Text/&gt;&lt;/h2&gt;; ] Options[Heading] = {&quot;Color&quot;-&gt;&quot;black&quot;}   then we can use it in our layout  .wlx &lt;Heading Color={&quot;blue&quot;}&gt; Hello World! &lt;/Heading&gt;   tip Utilize the power of WLX while making Slides  All WL expressions are accessible from there as well  .wlx &lt;TextString&gt; &lt;Now/&gt; &lt;/TextString&gt;   ","version":null,"tagName":"h2"},{"title":"Two-columns layout using Flexbox​","type":1,"pageTitle":"WLX","url":"/wljs-docs/frontend/Cell types/WLX#two-columns-layout-using-flexbox","content":" You can fine-tune the layout, since you are dealing with pure HTML and CSS. For example, here we have a slider and a plot aligned to a row  .wlx Module[{Slider = InputRange[0.1,1,0.1,0.5], Figure, lines}, EventHandler[Slider, Function[data, lines = {#, Sinc[#/data]}&amp; /@ Range[-5,5,0.1]]]; Slider // EventFire; Figure = Graphics[Line[lines // Offload], ImageSize-&gt;350]; &lt;div style=&quot;display: flex&quot;&gt; &lt;div&gt;&lt;Slider/&gt;&lt;/div&gt; &lt;div&gt;&lt;Figure/&gt;&lt;/div&gt; &lt;/div&gt; ]  ","version":null,"tagName":"h2"},{"title":"Grid","type":0,"sectionRef":"#","url":"/wljs-docs/frontend/Reference/Decorations/Grid","content":"","keywords":"","version":null},{"title":"Options​","type":1,"pageTitle":"Grid","url":"/wljs-docs/frontend/Reference/Decorations/Grid#options","content":" Temporary not supported ","version":null,"tagName":"h2"},{"title":"event-generators","type":0,"sectionRef":"#","url":"/wljs-docs/frontend/Advanced/Events system/event-generators","content":"","keywords":"","version":null},{"title":"Thumb rule​","type":1,"pageTitle":"event-generators","url":"/wljs-docs/frontend/Advanced/Events system/event-generators#thumb-rule","content":" One event-object - one handler function  ev = EventObject[&lt;|&quot;Id&quot;-&gt;&quot;evid&quot;|&gt;] EventHandler[ev, Print]   i.e.    And then to fire  EventFire[ev, &quot;Hello World!&quot;];   In order to remove handler from event object use  Delete[ev]   or more universal  EventRemove[ev]   where it deletes a handler function, but not an EventObject.  tip To assign more event handlers, you need to clone an event object or use different pattern on the same event object (see Pattern matching).  ","version":null,"tagName":"h2"},{"title":"String equivalent​","type":1,"pageTitle":"event-generators","url":"/wljs-docs/frontend/Advanced/Events system/event-generators#string-equivalent","content":" The actual binding is done only by &quot;Id&quot; field, therefore, one can omit EventObject head  ev = &quot;evid&quot;; EventHandler[ev, Print]   is the same as  ev = EventObject[&lt;|&quot;Id&quot;-&gt;&quot;evid&quot;|&gt;] EventHandler[ev, Print]   ","version":null,"tagName":"h3"},{"title":"Pattern matching​","type":1,"pageTitle":"event-generators","url":"/wljs-docs/frontend/Advanced/Events system/event-generators#pattern-matching","content":" In general an event entity can carry an additional information using Wolfram Language Patterns. It can distribute messages across different handler functions based on type of event fired (or its topic lets say). Using regular syntax for replacing patterns with Rule and RuleDelayed one can write a much more detailed handler function  EventHandler[&quot;evid&quot;, { &quot;Topic&quot; -&gt; Function[data, Echo[&quot;Topic::&quot;]; Echo[data]; ], any_String :&gt; Function[data, Echo[StringJoin[any, &quot;::&quot;]]; Echo[data]; ] }];   And to fire an event on a specific pattern - add extra argument to the middle of a sequence  EventFire[&quot;evid&quot;, &quot;Topic&quot;, &quot;Hi!&quot;]; EventFire[&quot;evid&quot;, &quot;Whatever&quot;, &quot;Hi!&quot;];   However, it is not limited to String  EventHandler[&quot;evid&quot;, { _Abrakadabra -&gt; Function[Null, Echo[&quot;Got it!&quot;]; ], _ -&gt; Function[Null, Echo[&quot;Wrong one&quot;]; ] }]; EventFire[&quot;evid&quot;, Abrakadabra[], Null]   One should note, that effectively those are the same records  EventHandler[ev, Print] EventHandler[ev, {_ -&gt; Print}]   while  EventFire[ev, data] EventFire[ev, &quot;Default&quot;, data]   are also the same.  ","version":null,"tagName":"h2"},{"title":"Cloning events​","type":1,"pageTitle":"event-generators","url":"/wljs-docs/frontend/Advanced/Events system/event-generators#cloning-events","content":" In the previous examples we had only one handler function per pattern. If you want more, there is a way to clone an EventObject or its string equivalent  ev = EventObject[&lt;|&quot;Id&quot;-&gt;&quot;evid&quot;|&gt;] (* first handler *) EventHandler[ev, Print]; (* second handler *) cloned = EventClone[ev]; EventHandler[cloned, Print];   What it does, it creates something like an event router subscribed to the original event-object, a router, then, is populated by the two new event-objects    Anything you do with cloned event will not affect the original entitiy  Delete[cloned] or EventRemove[cloned]   info Cloned object inherits all properties (i.e. initial data), that the original object has.  tip If you are sure, that two EventHandler function does not intersect with their patterns attached to the same event-object, there is no need in cloning, i.e. EventHandler[ev, { &quot;Pattern 1&quot; -&gt; func1 }]; EventHandler[ev, { &quot;Pattern 2&quot; -&gt; func2 }]; EventFire[ev, ..., data]; is valid. Patterns will be merged.  ","version":null,"tagName":"h2"},{"title":"Return value​","type":1,"pageTitle":"event-generators","url":"/wljs-docs/frontend/Advanced/Events system/event-generators#return-value","content":" Each handling function can return some value back, that again carries extra information  EventHandler[ev, Function[Null, Now ]]; EventFire[ev, Null] // Echo   an Echo from the last line will print current date. The same can be done with a chain of cloned events, i.e.  EventHandler[ev, Function[Null, Now ]]; EventHandler[ev // EventClone, Function[Null, Now ]]; EventHandler[ev // EventClone, Function[Null, Now ]]; EventFire[ev, Null] // Echo   The returned value will be a list of three semi-identical dates.  tip Use return values to provide Promise objects, when one or more of your chained handlers asks the side, which fired a chain, to wait for some deferred event be happen (see Then).  ","version":null,"tagName":"h2"},{"title":"Merging​","type":1,"pageTitle":"event-generators","url":"/wljs-docs/frontend/Advanced/Events system/event-generators#merging","content":" For example you want to update the state of something based on two events, that may happen independently, then use  ev1 = EventObject[&lt;|&quot;Id&quot;-&gt;&quot;evid1&quot;|&gt;] ev2 = EventObject[&lt;|&quot;Id&quot;-&gt;&quot;evid2&quot;|&gt;] joined = Join[ev1, ev2]   tip You do not have to clone your events before joining them, since it does it automatically keeping all other connections intact    ","version":null,"tagName":"h2"},{"title":"Properties​","type":1,"pageTitle":"event-generators","url":"/wljs-docs/frontend/Advanced/Events system/event-generators#properties","content":" There is a possibility to carry an additional keys wrapped inside EventObject. By its nature this is not a classical object in the sense of OOP, since the handler function has no access to the their properties and only Id field is stored in global a memory.  ","version":null,"tagName":"h2"},{"title":"Inheritable​","type":1,"pageTitle":"event-generators","url":"/wljs-docs/frontend/Advanced/Events system/event-generators#inheritable","content":" There is a property &quot;Initial&quot;, that specifies the initial value of the data shipped when the event is fired, when you apply Join or EventClone the final initial conditions will be merged from the different event objects or just copied  ev1 = EventObject[&lt;|&quot;Id&quot;-&gt;&quot;ev1&quot;, &quot;Initial&quot;-&gt;&lt;|&quot;x&quot;-&gt;1|&gt;|&gt;] ev2 = EventObject[&lt;|&quot;Id&quot;-&gt;&quot;ev1&quot;, &quot;Initial&quot;-&gt;&lt;|&quot;y&quot;-&gt;2|&gt;|&gt;] Join[ev1, ev2]   the result will be  EventObject[&lt;|&quot;Id&quot;-&gt;&quot;generatedId&quot;, &quot;Initial&quot;-&gt;&lt;|&quot;x&quot;-&gt;1, &quot;y&quot;-&gt;2|&gt;|&gt;]   What also makes field &quot;Initial&quot; so special is that it can be automatically substituted to EventFire method, when no other data is provided  EventFire[ev]   is effectively  EventFire[ev, ev[[1]][&quot;Initial&quot;]]   ","version":null,"tagName":"h3"},{"title":"Non-inheritable​","type":1,"pageTitle":"event-generators","url":"/wljs-docs/frontend/Advanced/Events system/event-generators#non-inheritable","content":" A very useful property, that comes handy when making GUI elements &quot;View&quot;  EventObject[&lt;|&quot;Id&quot;-&gt;&quot;evid&quot;, &quot;View&quot;-&gt;Graphics3D[Sphere[]]|&gt;]   it acts only when the object is printed to the output cell or displayed on a page (see WLJS), then, we will see Graphics3D output instead of EventObject.  ","version":null,"tagName":"h3"},{"title":"Integration with server / client via WebSockets​","type":1,"pageTitle":"event-generators","url":"/wljs-docs/frontend/Advanced/Events system/event-generators#integration-with-server--client-via-websockets","content":" A framework of WLJSTransport redirects calls from Javascript code to event system as well. A global server object provides a corresponding method  server.kernel.emitt('evid', 'message') //or server.kernel.emitt('evid', 'message', 'pattern')   and on server's side one can do as usual  EventHandler[&quot;evid&quot;, Print]  ","version":null,"tagName":"h3"},{"title":"Expressions representation","type":0,"sectionRef":"#","url":"/wljs-docs/frontend/Expressions representation","content":"","keywords":"","version":null},{"title":"Balancing between InputForm and DisplayFrom​","type":1,"pageTitle":"Expressions representation","url":"/wljs-docs/frontend/Expressions representation#balancing-between-inputform-and-displayfrom","content":" In principle, we do not need to make the whole WL expression to be mutable and interactive. There are only a few cases, where we really need this  Graphics, sliders, buttons and etc - separate objectsSyntax sugar for fractions, square roots, matrixes and etc. - mixed  The first one (separate objects) can be even separated from the actual code-area, since it originally works as inline block (a symbol or an atom).  In the simples case one could just replace graphic objects with images (svgs) and substitute it to some advanced HTML-like editor, like a lot people did before  JupyterWolfram Notebook VS Code extension  Anyway, since Plot and Plot3D is a superset of Graphics and Graphics3D symbols with a recipe inside made from other symbols, one need to cook it and display to the user, i.e. we need a frontend WL interpreter for sure. Since the portability is great - we should use web-stack, where Javascript rules all computations. See WLJS Interpreter  The second one (mixed) is rather tricky to implement fully, since it involves mutable WL expressions.  However, here also we have a solution. Nowadays developers are using sort-of syntax sugar for the live previews of Markdown, where the code you typing is replaced by the corresponding styled object. A good example is Obsidian - notes making app based on CodeMirror 6 Decorations. Which will require to write a WL tokenizer inside the editor. TL-DR see Decorations  ","version":null,"tagName":"h2"},{"title":"For the sake of performance​","type":1,"pageTitle":"Expressions representation","url":"/wljs-docs/frontend/Expressions representation#for-the-sake-of-performance","content":" For the most cases there is no point in interpreting the whole output expression. Lets have a look at the DisplayForm output from Mathematica or Wolfram Engine fora×b2\\frac{a\\times b}{\\sqrt{2}}2​a×b​  FractionBox[RowBox[{&quot;a&quot;, &quot; &quot;, &quot;b&quot;}], SqrtBox[&quot;2&quot;]]   what we would like to simplify here - keep the actual code  (*FractionBox[*)a b(*|*)/(*|*)(*SqrtBox[*)Sqrt[2](*]SqrtBox*)(*]FractionBox*)   It does look a bit more complicated, but if you just remove all comments  a b / Sqrt[2]   you can copy your cell's text to any WL parsers, use it with wolframscript with no changes made!it does not affect the code structureit has all markers for the editor (no need to parse WL on client's side), that makes all process of writing equations much safer  It has a big impact on the performance (in a good way), especially while working with matrixes. InterpretationBox and other sweet tools are supported in a similar way using comments. ","version":null,"tagName":"h3"},{"title":"Interpretation","type":0,"sectionRef":"#","url":"/wljs-docs/frontend/Reference/Decorations/Interpretation","content":"","keywords":"","version":null},{"title":"Example​","type":1,"pageTitle":"Interpretation","url":"/wljs-docs/frontend/Reference/Decorations/Interpretation#example","content":" Have a look at the following example ","version":null,"tagName":"h2"},{"title":"Framed","type":0,"sectionRef":"#","url":"/wljs-docs/frontend/Reference/Decorations/Framed","content":"","keywords":"","version":null},{"title":"Example​","type":1,"pageTitle":"Framed","url":"/wljs-docs/frontend/Reference/Decorations/Framed#example","content":" Highlight prime numbers in the list  Table[If[PrimeQ[i], Framed[i, Background-&gt;Yellow], i], {i, 1, 100}]   Or this neat example from Wolfram Research  NestList[Framed, x, 6]  ","version":null,"tagName":"h2"},{"title":"InterpretationBox","type":0,"sectionRef":"#","url":"/wljs-docs/frontend/Reference/Decorations/InterpretationBox","content":"","keywords":"","version":null},{"title":"Applications​","type":1,"pageTitle":"InterpretationBox","url":"/wljs-docs/frontend/Reference/Decorations/InterpretationBox#applications","content":" One of the examples is to make some definitions shorter by setting UpValues to MakeBoxes, since the last one is recursively applied to everything in the output cell  AVeryLongFunction /: MakeBoxes[AVeryLongFunction, StandardForm] := InterpretationBox[MakeBoxes[Ashort, StandardForm], AVeryLongFunction]   Now we can check the result by  AVeryLongFunction   if one define also this  AVeryLongFunction[expr__] := SpecialList[expr]   You can use it with the created alias Ashort  ","version":null,"tagName":"h2"},{"title":"Display graphics​","type":1,"pageTitle":"InterpretationBox","url":"/wljs-docs/frontend/Reference/Decorations/InterpretationBox#display-graphics","content":" Or one could use it as a data-preview  danger There is a bug with Graphics, Graphics3D and Image. You should apply CreateFrontEndObject before, i.e. formula /: MakeBoxes[formula[exp_], StandardForm] := With[{p = Plot[exp, {x,-1,1}, ImageSize-&gt;200] // CreateFrontEndObject}, InterpretationBox[MakeBoxes[p, StandardForm], formula[exp]] ] for Plotly and some other user's defined function it works without CreateFrontEndObject  tip Use explicit uid, when creating a front-end objects (CreateFrontEndObject) based on a hash-value of the decorated expression. It will reduce the load to frontend and will keep all instances with the same uid to be up to date with the changing data. See more in dynamic-decorations guide  ","version":null,"tagName":"h3"},{"title":"Dev notes​","type":1,"pageTitle":"InterpretationBox","url":"/wljs-docs/frontend/Reference/Decorations/InterpretationBox#dev-notes","content":" This is a wrapper for ViewBox with a read-only EditorView inside. ","version":null,"tagName":"h2"},{"title":"InputForm","type":0,"sectionRef":"#","url":"/wljs-docs/frontend/Reference/Decorations/InputForm","content":"InputForm Wolfram Kernel Execution environment Prevents decorations to be set InputForm[expr_] Typical example to reveal the InputForm Red Red // InputForm ","keywords":"","version":null},{"title":"BoxBox","type":0,"sectionRef":"#","url":"/wljs-docs/frontend/Reference/Decorations/Low level/BoxBox","content":"","keywords":"","version":null},{"title":"Options​","type":1,"pageTitle":"BoxBox","url":"/wljs-docs/frontend/Reference/Decorations/Low level/BoxBox#options","content":" ","version":null,"tagName":"h2"},{"title":"Head​","type":1,"pageTitle":"BoxBox","url":"/wljs-docs/frontend/Reference/Decorations/Low level/BoxBox#head","content":" Provides a head symbol of the wrapper expression, that will be hidden from the inner editor. It comes handy when you need to preserve the original from of the expression during the editing  tip Use Head option to keep the wrapping expression  ","version":null,"tagName":"h3"},{"title":"Examples​","type":1,"pageTitle":"BoxBox","url":"/wljs-docs/frontend/Reference/Decorations/Low level/BoxBox#examples","content":" ","version":null,"tagName":"h2"},{"title":"Change the display value and call arbitrary WLJS function​","type":1,"pageTitle":"BoxBox","url":"/wljs-docs/frontend/Reference/Decorations/Low level/BoxBox#change-the-display-value-and-call-arbitrary-wljs-function","content":" This is a dummy example  special /: MakeBoxes[special, StandardForm] := BoxBox[&quot;1+1&quot;, Alert[&quot;Hi&quot;]] special   ","version":null,"tagName":"h3"},{"title":"Styling expression using JS​","type":1,"pageTitle":"BoxBox","url":"/wljs-docs/frontend/Reference/Decorations/Low level/BoxBox#styling-expression-using-js","content":" One can define its own style of cells boxes  .js core.Styler = async (args, env) =&gt; { env.element.style.boxShadow = &quot;1px 1px 5px black&quot;; }   wrapper /: MakeBoxes[wrapper[expr_], StandardForm] := BoxBox[MakeBoxes[expr, StandardForm], Styler, Head-&gt;wrapper]   and then try  wrapper[1/2]   Result    The neat thing is you can edit the inner expression  note This is how Ket, Bra are implemented for instance ","version":null,"tagName":"h3"},{"title":"Row","type":0,"sectionRef":"#","url":"/wljs-docs/frontend/Reference/Decorations/Row","content":"Row Wolfram Kernel Execution environment Row[{object1, object2, ...}] shows the list of any Wolfram Expressions in a row acting as a decoration","keywords":"","version":null},{"title":"Basics","type":0,"sectionRef":"#","url":"/wljs-docs/frontend/Advanced/Slides/intro","content":"","keywords":"","version":null},{"title":"Layout​","type":1,"pageTitle":"Basics","url":"/wljs-docs/frontend/Advanced/Slides/intro#layout","content":" It is not opinionated on how you organize the content on the slide. By the default all titles marked as #, ## etc are centered and obtain standard h1, h2 ... HTML tags. All paragraphs are wrapped with p behind the scenes.  If you need two columns, use HTML and any available method to make columns. For instance using flex  .slide # Title &lt;div style=&quot;display: flex&quot;&gt; &lt;div style=&quot;width: 50%&quot;&gt; ## Subtitle 1 And some content &lt;/div&gt; &lt;div style=&quot;width: 50%&quot;&gt; ## Subtitle 2 And some content &lt;/div&gt; &lt;/div&gt;   tip To use Markdown in HTML, please, add line breaks before and after  The result looks like this    ","version":null,"tagName":"h2"},{"title":"Using WLX​","type":1,"pageTitle":"Basics","url":"/wljs-docs/frontend/Advanced/Slides/intro#using-wlx","content":" Of course one can make a helper function for it  .wlx Columns[Col1_, Col2_] := With[{}, &lt;div style=&quot;display: flex&quot;&gt; &lt;div style=&quot;width: 50%&quot;&gt;&lt;Col1/&gt;&lt;/div&gt; &lt;div style=&quot;width: 50%&quot;&gt;&lt;Col2/&gt;&lt;/div&gt; &lt;/div&gt; ]   and then  .slide # Title &lt;Columns&gt; &lt;div&gt; ## Subtitle 1 And some content &lt;/div&gt; &lt;div&gt; ## Subtitle 2 And some content &lt;/div&gt; &lt;/Columns&gt;   The result will be the same. Additional tags we used div are necessary to help WLX to differentiate between the first and the second arguments of Columns similar to how li and ul tags are used to make lists.  note See advanced guide on components by the link components  ","version":null,"tagName":"h3"},{"title":"Images​","type":1,"pageTitle":"Basics","url":"/wljs-docs/frontend/Advanced/Slides/intro#images","content":" RevealJS uses standard Markdown notations for images  .slide # Title ![desc](https://upload.wikimedia.org/wikipedia/en/a/a9/Example.jpg)     You can drag and drop them from anywhere    Local files are also supported  .slide ![local](example.png)   info A web server will try to locate example.png in the directory where the notebook is located. If there is no file, it tries to use it as global path starting from the root folder of a system disk.  Regular HTML img tag is supported as well. It comes handy if you need to set the size  .slide &lt;img width=&quot;700&quot; src=&quot;https://upload.wikimedia.org/wikipedia/en/a/a9/Example.jpg&quot;/&gt;   ","version":null,"tagName":"h2"},{"title":"Equations​","type":1,"pageTitle":"Basics","url":"/wljs-docs/frontend/Advanced/Slides/intro#equations","content":" This is provided by well-known KaTeX library. Use it as a normal LaTeX  .slide $m \\\\mathbf{a} = \\\\mathbf{F}$   warning A single slash notation is reserved originally by WL Kernel, therefore you have to stick to double slashes \\\\  or a multiline  .slide $$ \\\\begin{bmatrix} m \\\\mathbf{a} = \\\\mathbf{F} \\\\end{bmatrix} $$   If you need to highlight WL code, or JS, or HTML - see embed-wl.  ","version":null,"tagName":"h2"},{"title":"Embedding PDF or websites​","type":1,"pageTitle":"Basics","url":"/wljs-docs/frontend/Advanced/Slides/intro#embedding-pdf-or-websites","content":" We have a full power of HTML. To embed a local PDF document from the folder of your notebook  .slide &lt;embed width=&quot;800&quot; height=&quot;500&quot; src=&quot;antisymmetry.pdf&quot;/&gt;     or the whole website  .slide &lt;iframe width=&quot;800&quot; height=&quot;500&quot; src=&quot;https://chat.openai.com&quot;/&gt;     and to make a nicer corners  .slide &lt;iframe style=&quot;border: none; border-radius: 4px&quot; width=&quot;800&quot; height=&quot;500&quot; src=&quot;https://chat.openai.com&quot;/&gt;   ","version":null,"tagName":"h2"},{"title":"Transitions and fragments​","type":1,"pageTitle":"Basics","url":"/wljs-docs/frontend/Advanced/Slides/intro#transitions-and-fragments","content":" Revealing the content is an art. You can specify some fragments to appear later, or disappear or change the color. RevealJS uses HTML comments in the form  &lt;!-- .element: class=&quot;fragment ACTION&quot; data-fragment-index=&quot;INDEX&quot; --&gt;   For example to reveal 1 by 1 in order  .slide # Slide Fragment disapear &lt;!-- .element: class=&quot;fragment fade-out&quot; data-fragment-index=&quot;1&quot; --&gt; Fragment appear &lt;!-- .element: class=&quot;fragment&quot; data-fragment-index=&quot;2&quot; --&gt; Fragment changes the color &lt;!-- .element: class=&quot;fragment highlight-red&quot; data-fragment-index=&quot;3&quot; --&gt;     See more available transitions at RevealJS.  note Custom transitions are not supported, unless it is made using Graphics using animations approach  ","version":null,"tagName":"h2"},{"title":"Events​","type":1,"pageTitle":"Basics","url":"/wljs-docs/frontend/Advanced/Slides/intro#events","content":" To capture the events from a slide (revealing the slide or revealing individual fragments) - use SlideEventListener  It attaches itself to the slide, where it has been placed  .slide # 1st Slide Nothing --- # 2nd Slide A message pops up Another message &lt;!-- .element: class=&quot;fragment&quot; data-fragment-index=&quot;1&quot; --&gt; &lt;SlideEventListener Id={&quot;myEvent&quot;}/&gt;   Before evaluation, you should attach an event handler (EventHandler) to it  EventHandler[&quot;myEvent&quot;, Print[&quot;Hey there!&quot;]&amp;] EventHandler[&quot;myEvent-fragment-1&quot;, Print[&quot;Hey there from fragment!&quot;]&amp;]   The identifier of SlideEventListener acts as an event object. There are two patterns on how you can capture certain event  uid - is fired when a slide has been revealeduid-fragment-INDEX - is fired when a fragment number INDEX has been revealed  info To learn more about on how to utilize it for animations and etc, please, read animations section.  ","version":null,"tagName":"h3"},{"title":"WL expressions and data-driven slides​","type":1,"pageTitle":"Basics","url":"/wljs-docs/frontend/Advanced/Slides/intro#wl-expressions-and-data-driven-slides","content":" This is just a simple demonstration. Using WLX one can directly write and execute any WL expressions on a slide  .slide # Using WLX Allow you to do some cool stuff Your local time is __&lt;TextString&gt;&lt;Now/&gt;&lt;/TextString&gt;__     Or embed any graphics object  Figure = SphericalPlot3D[SphericalHarmonicY[2,0, t,p], {t, 0, Pi}, {p, 0, 2Pi}];   .slide # Embed some figures Even 3D &lt;div style=&quot;text-align: center; display: inline-flex;&quot;&gt; &lt;Figure/&gt; &lt;/div&gt; Try to move it using your mouse     as well as some figures plotted from a local CSV file. In the example below we use random list of points to do some simple computations  pts = RandomReal[10, {100, 2}]; Figure = ListLinePlot[pts[[Last@FindShortestTour[pts]]], Epilog-&gt;{Point[pts]}]   .slide Compute and plot the shortest tour through 100 random points: &lt;Figure/&gt;     For more advanced stuff see animations  ","version":null,"tagName":"h2"},{"title":"Drawing board and pointer​","type":1,"pageTitle":"Basics","url":"/wljs-docs/frontend/Advanced/Slides/intro#drawing-board-and-pointer","content":" Pointer is provided by a separate plugin used by RevealJS. To toggle it press q when the focus is on a slide    For a drawing board there is another plugin for the same author. The board is toggled by pressing t on a slide    To toggle a pen use d key. There is no cleaning method implemented, but you can help the author and contribute to the repo. ","version":null,"tagName":"h2"},{"title":"SVGForm","type":0,"sectionRef":"#","url":"/wljs-docs/frontend/Reference/Decorations/SVGForm","content":"SVGForm WLJS Execution environment Needs container Registered SVGForm[expr_] exports as SVG any Wolfram Expressions and plots it inside a cell.","keywords":"","version":null},{"title":"MakeBoxes","type":0,"sectionRef":"#","url":"/wljs-docs/frontend/Reference/Decorations/MakeBoxes","content":"","keywords":"","version":null},{"title":"Applications​","type":1,"pageTitle":"MakeBoxes","url":"/wljs-docs/frontend/Reference/Decorations/MakeBoxes#applications","content":" ","version":null,"tagName":"h2"},{"title":"Styling symbols | Custom representation​","type":1,"pageTitle":"MakeBoxes","url":"/wljs-docs/frontend/Reference/Decorations/MakeBoxes#styling-symbols--custom-representation","content":" Please consider to use StandardForm for form argument to achieve those effects. The best example is InterpretationBox. However one can do also your own  warning For the case of RowBox you have to be careful, that it does not keep the original expression  Or one can better, by keeping the original expression inside  ","version":null,"tagName":"h3"},{"title":"Data preview​","type":1,"pageTitle":"MakeBoxes","url":"/wljs-docs/frontend/Reference/Decorations/MakeBoxes#data-preview","content":" One can make a preview of the data content length for example  tip Please check the official Wolfram Language documentation on MakeBoxes  ","version":null,"tagName":"h3"},{"title":"Force expressions to be executed on WLJS Interpreter​","type":1,"pageTitle":"MakeBoxes","url":"/wljs-docs/frontend/Reference/Decorations/MakeBoxes#force-expressions-to-be-executed-on-wljs-interpreter","content":" This is basically the way on how to automatically apply CreateFrontEndObject on some common objects like Graphics, ListLinePlotly meant for executing on WLJS Interpreter  This is how it is done for ListLinePlotly  sym /: MakeBoxes[sym[agrs__], StandardForm] := With[{o = CreateFrontEndObject[sym[agrs]]}, MakeBoxes[o, StandardForm] ];   For example, Alert is a WLJS Interpreter function and if one evaluate  Alert[&quot;Hi Dude!&quot;]   nothing will happen. However  Alert /: MakeBoxes[Alert[agrs__], StandardForm] := With[{o = CreateFrontEndObject[Alert[agrs]]}, MakeBoxes[o, StandardForm] ]; Alert[&quot;Hi Dude&quot;]   info Please consider to read an API docs for custom function if you are making an extension - see Basics ","version":null,"tagName":"h3"},{"title":"MatrixForm","type":0,"sectionRef":"#","url":"/wljs-docs/frontend/Reference/Decorations/MatrixForm","content":"MatrixForm Wolfram Kernel Execution environment MatrixForm[matrix_List] shows the given matrix (list of lists) in a traditional form using Grid decoration","keywords":"","version":null},{"title":"DynamicModule","type":0,"sectionRef":"#","url":"/wljs-docs/frontend/Reference/Dynamics/DynamicModule","content":"DynamicModule warning This concept is different from Mathematica. Please, use event-based approach instead - Dynamics","keywords":"","version":null},{"title":"TableForm","type":0,"sectionRef":"#","url":"/wljs-docs/frontend/Reference/Decorations/TableForm","content":"TableForm Wolfram Kernel Execution environment TableForm[table_List] shows the given table (list) in a traditional form using Grid decoration info For an editable formatted table, please see InputTable. It fits especially for a large datasets","keywords":"","version":null},{"title":"FrontEndExecutable","type":0,"sectionRef":"#","url":"/wljs-docs/frontend/Reference/Dynamics/Internals/FrontEndExecutable","content":"FrontEndExecutable WLJSWolfram Kernel Execution environment Supports updates An replacement decoration and a reference to the frontend object aka container in the shared objects storage with a corresponding id FrontEndExecutable[&quot;uid&quot;] danger It will not be seen in this form in the cell's editor, since this is a decoration created by CreateFrontEndObject expression. It is used as a compact representation for the most graphics and other interactive objects. See more about it in Decorations and Executables","keywords":"","version":null},{"title":"Style","type":0,"sectionRef":"#","url":"/wljs-docs/frontend/Reference/Decorations/Style","content":"","keywords":"","version":null},{"title":"Example​","type":1,"pageTitle":"Style","url":"/wljs-docs/frontend/Reference/Decorations/Style#example","content":"","version":null,"tagName":"h2"},{"title":"FrontEndExecutableInline","type":0,"sectionRef":"#","url":"/wljs-docs/frontend/Reference/Dynamics/Internals/FrontEndExecutableInline","content":"FrontEndExecutableInline The same as FrontEndExecutable, but does not require a dedicated storage, the data is stored as a compressed string FrontEndExecutable[&quot;1:compressed string&quot;] ","keywords":"","version":null},{"title":"Manipulate","type":0,"sectionRef":"#","url":"/wljs-docs/frontend/Reference/Dynamics/Manipulate","content":"Manipulate warning This is not supported. Please, use Dynamics instead","keywords":"","version":null},{"title":"FrontEndOnly","type":0,"sectionRef":"#","url":"/wljs-docs/frontend/Reference/Dynamics/Internals/FrontEndOnly","content":"FrontEndOnly An synonym for Offload","keywords":"","version":null},{"title":"FrontEndRef","type":0,"sectionRef":"#","url":"/wljs-docs/frontend/Reference/Dynamics/Internals/FrontEndRef","content":"","keywords":"","version":null},{"title":"Application​","type":1,"pageTitle":"FrontEndRef","url":"/wljs-docs/frontend/Reference/Dynamics/Internals/FrontEndRef#application","content":" Since FrontEndExecutable will be replaced by the underlying expression during the first evaluation, one can use a reference to it to manipulate the data behind  FrontEndRef[&quot;uid&quot;] = newData   will update all objects with a storage ID &quot;uid&quot; on the frontend. ","version":null,"tagName":"h2"},{"title":"Dynamic","type":0,"sectionRef":"#","url":"/wljs-docs/frontend/Reference/Dynamics/Dynamic","content":"Dynamic warning This concept is different from Mathematica. Please, use event-based approach instead - Dynamics","keywords":"","version":null},{"title":"CreateFrontEndObject","type":0,"sectionRef":"#","url":"/wljs-docs/frontend/Reference/Dynamics/CreateFrontEndObject","content":"","keywords":"","version":null},{"title":"Applications​","type":1,"pageTitle":"CreateFrontEndObject","url":"/wljs-docs/frontend/Reference/Dynamics/CreateFrontEndObject#applications","content":" ","version":null,"tagName":"h2"},{"title":"To execute WLJS functions, which are not registered​","type":1,"pageTitle":"CreateFrontEndObject","url":"/wljs-docs/frontend/Reference/Dynamics/CreateFrontEndObject#to-execute-wljs-functions-which-are-not-registered","content":" Some of build-in expressions that represent some low-level UI elements, such as TextView require a container before being executed on frontend's side (WLJS).  For instance, normally TextView is an element that shows editable text on frontend, and is not registered in Wolfram Kernel to have a container being in the output cell. Therefore we can make one manually for the purpose to show some dynamic text  cell 1  dynText = RandomWord[]; TextView[dynText // Offload] // CreateFrontEndObject     then, one can update the symbol dynText and see that the field above will also be updated  cell 2  dynText = RandomWord[];   ","version":null,"tagName":"h3"},{"title":"As a container generator for WLJS functions​","type":1,"pageTitle":"CreateFrontEndObject","url":"/wljs-docs/frontend/Reference/Dynamics/CreateFrontEndObject#as-a-container-generator-for-wljs-functions","content":" Use for custom defined WLJS functions i.e.  .js core.MyCustomStuff = async (args, env) =&gt; { env.element.innerText = &quot;Hi dude!&quot;; }   and then in the next cell  CreateFrontEndObject[MyCustomStuff[]]     If you apply it to a regular function, which is already registered in the system to have an automatic container generation, it it will not have any effect  Graphics[Text[&quot;Hi&quot;, {0,0}]] // CreateFrontEndObject   ","version":null,"tagName":"h3"},{"title":"For low-level dynamic​","type":1,"pageTitle":"CreateFrontEndObject","url":"/wljs-docs/frontend/Reference/Dynamics/CreateFrontEndObject#for-low-level-dynamic","content":" tip If you are looking for dynamic expressions and etc, please, better see modern way of doing that using Offload in the tutorial section Dynamics.  It can also acts as a reference to any expression  cell 1  CreateFrontEndObject[RandomReal[{-1,1}, 2], &quot;data&quot;]   Then one can create a graph and use it with a reference (using FrontEndRef) to it  cell 2  Graphics[{Red, PointSize[0.1], Point[FrontEndRef[&quot;data&quot;]]}]     If one change the object data in other cell, the position of a point will be changed as well dynamically with no reevaluation involved, i.e.  cell 3  CreateFrontEndObject[RandomReal[{-1,1}, 2], &quot;data&quot;];   or in a shorter form  cell 3  FrontEndRef[&quot;data&quot;] = RandomReal[{-1,1}, 2];   Basically, there are three containers involved  Graphics - normal container (automatically created)Point - virtual container (automatically implicitly created, see containers)data - normal container (manually created)  Only 3 and 2 are effectively connected to each other, 1 and 2 are connected as well, but it does not make sense, since 1 does not support updates.  Back at the times it was the only way of making dynamics possible. Nowadays virtual containers did overtake normal ones and made the process much easier.  ","version":null,"tagName":"h3"},{"title":"Options​","type":1,"pageTitle":"CreateFrontEndObject","url":"/wljs-docs/frontend/Reference/Dynamics/CreateFrontEndObject#options","content":" ","version":null,"tagName":"h2"},{"title":"Private and shared storage​","type":1,"pageTitle":"CreateFrontEndObject","url":"/wljs-docs/frontend/Reference/Dynamics/CreateFrontEndObject#private-and-shared-storage","content":" Taken from Evaluation / Static  Each time you evaluate Graphics or whatever frontend object, it creates two copies of its representation: one is stored on frontend kernel (master Wolfram Kernel), which is shared with a browser (WLJS), while there is other private copy of it on the secondary Wolfram Kernel. When Wolfram Kernel encounters a FrontEndExecutable during the evaluation, it uses (if available) its private copy, and if not it downloads the shared one into the private storage. See how it can be used HERE  CreateFrontEndObject[expr, &quot;uid&quot;, &quot;Type&quot;-&gt;&quot;Private&quot;];   It will override the private copy. Consider an example  Magic := With[{uid = CreateUUID[]}, With[{o = CreateFrontEndObject[TextView[&quot;Hello World&quot;], uid]}, (* a trick to sublimate a private copy *) CreateFrontEndObject[&quot;Cucumbers&quot;, uid, &quot;Type&quot;-&gt;&quot;Private&quot;]; o ] ]   Try this example  Magic   evaluate in place and, then, evaluate the result as a cell.  ","version":null,"tagName":"h3"},{"title":"Notes​","type":1,"pageTitle":"CreateFrontEndObject","url":"/wljs-docs/frontend/Reference/Dynamics/CreateFrontEndObject#notes","content":" There is another way of making containers on WLJS's side. For example  { dpt = {0,0}, cnt = 0; FrontEndVirtual[{ AttachDOM[&quot;dom-id&quot;], Graphics[{Red, Point[dpt]}] }], While[cnt &lt; 10, dpt = RandomReal[{-1,1}, 2]; cnt = cnt + 1; Pause[1]; ] } // Offload // FrontSubmit;   This will send a direct message to evaluate the inner expression on the frontend (WLJS) entirely (no Wolfram Kernel is involved). However, you should not forget to create a DOM element for graphics with dom-id, i.e. create a new cell beforehand  .html &lt;div id=&quot;dom-id&quot;&gt;&lt;/div&gt;     Then, your graphics will pop up the the output of this HTML cell ","version":null,"tagName":"h2"},{"title":"Arrow","type":0,"sectionRef":"#","url":"/wljs-docs/frontend/Reference/Graphics/Arrow","content":"","keywords":"","version":null},{"title":"Options​","type":1,"pageTitle":"Arrow","url":"/wljs-docs/frontend/Reference/Graphics/Arrow#options","content":" Not available at the moment ","version":null,"tagName":"h2"},{"title":"GraphicsComplex","type":0,"sectionRef":"#","url":"/wljs-docs/frontend/Reference/Graphics/GraphicsComplex","content":"GraphicsComplex","keywords":"","version":null},{"title":"FrontEndVirtual","type":0,"sectionRef":"#","url":"/wljs-docs/frontend/Reference/Dynamics/FrontEndVirtual","content":"","keywords":"","version":null},{"title":"Examples​","type":1,"pageTitle":"FrontEndVirtual","url":"/wljs-docs/frontend/Reference/Dynamics/FrontEndVirtual#examples","content":" Most use cases comes, when WLJS is used as a standalone interpreter, but you can simulate it from WLJS Frontend as well using FrontSubmit  cell 1  .html &lt;div id=&quot;container&quot;&gt;&lt;/div&gt;   cell 2  FrontSubmit[With[{}, a = Table[{{0,0}, RandomReal[{-1,1}, 2]}, {i, 100}]; FrontEndVirtual[{ AttachDOM[&quot;container&quot;]; Graphics[{RGBColor[0.0,1.0,1.0], Table[Line[a[[i]]], {i, Length[a]}] }]; }]; (* mix them up *) i = 0; While[i &lt; 30, Pause[0.1]; a = RandomSample[a]; i = i + 1; ]; ] // Offload]   Without a container Graphics just will not work properly.    Adapted from symbols  ","version":null,"tagName":"h2"},{"title":"Dev notes​","type":1,"pageTitle":"FrontEndVirtual","url":"/wljs-docs/frontend/Reference/Dynamics/FrontEndVirtual#dev-notes","content":" Now you are reading this documentation pages and see examples with graphics and etc. Most of them are made using just  FrontEndVirtual[With[{}, AttachDOM[&quot;id&quot;]; Graphics[...] ]]   embedded as a script into the HTML tree. ","version":null,"tagName":"h2"},{"title":"AbsoluteThickness","type":0,"sectionRef":"#","url":"/wljs-docs/frontend/Reference/Graphics/AbsoluteThickness","content":"","keywords":"","version":null},{"title":"Example​","type":1,"pageTitle":"AbsoluteThickness","url":"/wljs-docs/frontend/Reference/Graphics/AbsoluteThickness#example","content":" A styled Line object  Graphics[{ AbsoluteThickness[3], Cyan, Line[{{0,0}, {1,1}}] }]    ","version":null,"tagName":"h2"},{"title":"Offload","type":0,"sectionRef":"#","url":"/wljs-docs/frontend/Reference/Dynamics/Offload","content":"","keywords":"","version":null},{"title":"Examples​","type":1,"pageTitle":"Offload","url":"/wljs-docs/frontend/Reference/Dynamics/Offload#examples","content":" ","version":null,"tagName":"h2"},{"title":"Dynamics​","type":1,"pageTitle":"Offload","url":"/wljs-docs/frontend/Reference/Dynamics/Offload#dynamics","content":" Typical example for the dynamic evaluation  pts = RandomReal[{-1,1}, {64, 2}]; Graphics[{PointSize[0.02], Point[pts // Offload]}, ImageSize-&gt;500]     And then, change the variable from the separate task  task = SetInterval[With[{}, pts = (# + 0.001 Sum[ (i - #)/(Norm[i - #]^3 + 0.1) - (i - #)/(Norm[i - #]^5 + 0.1) , {i, pts}]) &amp;/@ pts; ], 100]   Don't forget to remove it afterwards  TaskRemove[task]   ","version":null,"tagName":"h3"},{"title":"Force WL Kernel to offload an expression​","type":1,"pageTitle":"Offload","url":"/wljs-docs/frontend/Reference/Dynamics/Offload#force-wl-kernel-to-offload-an-expression","content":" Looking back to the previous example, the function RandomReal implemented on both sides. If you offload it to the Point expression  Graphics[{PointSize[0.02], Point[RandomReal[{-1,1}, {64, 2}] // Offload]}]   Each time you load a notebook the distribution of the point will be different, since it reevaluate it on frontend's side each time.  ","version":null,"tagName":"h3"},{"title":"Dev notes​","type":1,"pageTitle":"Offload","url":"/wljs-docs/frontend/Reference/Dynamics/Offload#dev-notes","content":" The actual implementation of the expression is extremely simple  SetAttributes[Offload, HoldFirst]   core.Offload = async (args, env) =&gt; { return await intepretate(args[0], env) } core.Offload.update = core.Offload core.Offload.destroy = core.Offload   The difference from Hold is that it will not be affected by ReleaseHold. ","version":null,"tagName":"h2"},{"title":"Directive","type":0,"sectionRef":"#","url":"/wljs-docs/frontend/Reference/Graphics/Directive","content":"","keywords":"","version":null},{"title":"Examples​","type":1,"pageTitle":"Directive","url":"/wljs-docs/frontend/Reference/Graphics/Directive#examples","content":" ","version":null,"tagName":"h2"},{"title":"Ticks of a plot​","type":1,"pageTitle":"Directive","url":"/wljs-docs/frontend/Reference/Graphics/Directive#ticks-of-a-plot","content":" One can provide a font-size parameters  Plot[Sin[x], {x,0,2Pi}, FrameTicksStyle-&gt;Directive[FontSize-&gt;16], Frame-&gt;True]     ","version":null,"tagName":"h3"},{"title":"FrameLabel style​","type":1,"pageTitle":"Directive","url":"/wljs-docs/frontend/Reference/Graphics/Directive#framelabel-style","content":" The same is valid for the labels  Plot[Sin[x], {x,0,10 Pi}, FrameStyle-&gt;Directive[FontSize-&gt;16], Frame-&gt;True, FrameLabel-&gt;{&quot;x-axis&quot;, &quot;y-axis&quot;}]     ","version":null,"tagName":"h3"},{"title":"Transitions​","type":1,"pageTitle":"Directive","url":"/wljs-docs/frontend/Reference/Graphics/Directive#transitions","content":" One can specify the local transitions parameters. For example  p1 = {0,0}; p2 = {0,0}; Graphics[{ Directive[TransitionDuration-&gt;500], Red, Disk[p1 // Offload, 0.2], {Directive[TransitionDuration-&gt;100], Blue, Disk[p2 // Offload, 0.2]}} , PlotRange-&gt;{{-1,1}, {-1,1}}]   then try  p1 = {1,1}; p2 = {-1,-1};   You will find that they are animated with a different duration. The same applies to TransitionType as well ","version":null,"tagName":"h3"},{"title":"Show","type":0,"sectionRef":"#","url":"/wljs-docs/frontend/Reference/Graphics/Show","content":"Show WLJS Execution environment caution Is not supported in wljs-graphics-d3 for now","keywords":"","version":null},{"title":"Style","type":0,"sectionRef":"#","url":"/wljs-docs/frontend/Reference/Graphics/Style","content":"Style WLJS Execution environment Supports updates A wrapper that can be used for Text . The following options can be provided FontSize-&gt;Number - 10, 12, 14...FontFamily-&gt;String - this is basically an SVG attribute, please see here. If you have imported any font using CSS, you can also use it. See more examples @ Text note See also Style as decoration","keywords":"","version":null},{"title":"Image","type":0,"sectionRef":"#","url":"/wljs-docs/frontend/Reference/Graphics/Image","content":"","keywords":"","version":null},{"title":"Examples​","type":1,"pageTitle":"Image","url":"/wljs-docs/frontend/Reference/Graphics/Image#examples","content":" ","version":null,"tagName":"h2"},{"title":"Direct​","type":1,"pageTitle":"Image","url":"/wljs-docs/frontend/Reference/Graphics/Image#direct","content":" Show multiple iterations of a cellular automaton as a binary image  Image[CellularAutomaton[30, {{1}, 0}, 40]]     A random noise  Image[Table[RandomInteger[{0,1}], {i, 200}, {j, 350}]]   adding a color  Image[Table[RandomInteger[{0,255}, 3], {i, 200}, {j, 350}]]     ","version":null,"tagName":"h3"},{"title":"Indirect​","type":1,"pageTitle":"Image","url":"/wljs-docs/frontend/Reference/Graphics/Image#indirect","content":" One can also use Rasterize function to show any expressions as an image  x + y // Rasterize     ","version":null,"tagName":"h3"},{"title":"Dynamics​","type":1,"pageTitle":"Image","url":"/wljs-docs/frontend/Reference/Graphics/Image#dynamics","content":" It does support dynamic variables. For example  Puffer = {{1, 4}, {2, 5}, {3, 1}, {3, 5}, {4, 2}, {4, 3}, {4, 4}, {4, 5}, {8, 1}, {9, 2}, {9, 3}, {10, 3}, {11, 3}, {12, 2}, {15, 1}, {15, 4}, {16, 5}, {17, 1}, {17, 5}, {18, 2}, {18, 3}, {18, 4}, {18, 5}}; board = CellularAutomaton[&quot;GameOfLife&quot;, {SparseArray[Puffer -&gt; 1], 0}, {{500}}] // First; Image[board // Offload]   and now we can run the simulation with a desired speed  task = SetInterval[board = CellularAutomaton[&quot;GameOfLife&quot;, board, {{1}}] // First, 50 ]; SetTimeout[TaskRemove[task], 5000];  ","version":null,"tagName":"h2"},{"title":"Inset","type":0,"sectionRef":"#","url":"/wljs-docs/frontend/Reference/Graphics/Inset","content":"","keywords":"","version":null},{"title":"Dynamics​","type":1,"pageTitle":"Inset","url":"/wljs-docs/frontend/Reference/Graphics/Inset#dynamics","content":" The second arguments pos that specifies the position of an inset does support dynamic updates, i.e. try  inset = Graphics[{ LightRed, Disk[{-1-0.13,0.9},0.1], Black, Directive[FontSize-&gt;16], Text[&quot;Test&quot;, {-1/16 - 1 - 0.13,-1/30 + 0.9}] }, PlotRange-&gt;{{-1,1}, {-1,1}}]; pts = {0,0}; Plot[x, {x,0,10}, Epilog-&gt;{Inset[inset, pts // Offload]}]   and then  Do[pts = {i,i}; Pause[0.1];, {i, 0, 10, 0.5}]  ","version":null,"tagName":"h2"},{"title":"SVGAttribute","type":0,"sectionRef":"#","url":"/wljs-docs/frontend/Reference/Graphics/SVGAttribute","content":"","keywords":"","version":null},{"title":"Example​","type":1,"pageTitle":"SVGAttribute","url":"/wljs-docs/frontend/Reference/Graphics/SVGAttribute#example","content":" If we want a dashed line  Graphics[ SVGAttribute[ Line[{{-1,-1}, {1,1}}] , &quot;stroke-dasharray&quot;-&gt;&quot;3&quot;] ]    ","version":null,"tagName":"h2"},{"title":"Translate","type":0,"sectionRef":"#","url":"/wljs-docs/frontend/Reference/Graphics/Translate","content":"Translate WLJS Execution environment","keywords":"","version":null},{"title":"EditorView","type":0,"sectionRef":"#","url":"/wljs-docs/frontend/Reference/Inputs/EditorView","content":"","keywords":"","version":null},{"title":"Event generation​","type":1,"pageTitle":"EditorView","url":"/wljs-docs/frontend/Reference/Inputs/EditorView#event-generation","content":" When &quot;Event&quot; option is provided, it will send a new data in a form of a string.  ","version":null,"tagName":"h2"},{"title":"Options​","type":1,"pageTitle":"EditorView","url":"/wljs-docs/frontend/Reference/Inputs/EditorView#options","content":" ","version":null,"tagName":"h2"},{"title":"\"Event\"​","type":1,"pageTitle":"EditorView","url":"/wljs-docs/frontend/Reference/Inputs/EditorView#event","content":" Specifies an uid of an event-object, that will be fired on-change.  ","version":null,"tagName":"h3"},{"title":"\"ReadOnly\"​","type":1,"pageTitle":"EditorView","url":"/wljs-docs/frontend/Reference/Inputs/EditorView#readonly","content":" Blocks the editing mode. The default value is False  ","version":null,"tagName":"h3"},{"title":"Application​","type":1,"pageTitle":"EditorView","url":"/wljs-docs/frontend/Reference/Inputs/EditorView#application","content":" If you want to show the dynamic symbols content, use it together with ToString[expr, StandardForm]  EventHandler[InputRange[1,10,1,1], Function[n, series = ToString[Series[Sin[x], {x,0,n}] // Normal, StandardForm]; ]] EventFire[%, 1]; EditorView[series // Offload] // CreateFrontEndObject   ","version":null,"tagName":"h2"},{"title":"Dev notes​","type":1,"pageTitle":"EditorView","url":"/wljs-docs/frontend/Reference/Inputs/EditorView#dev-notes","content":" This is used in InterpretationBox implementation to replace a WL expression using a user-provided WL expression in a code editor. ","version":null,"tagName":"h2"},{"title":"Text","type":0,"sectionRef":"#","url":"/wljs-docs/frontend/Reference/Graphics/Text","content":"","keywords":"","version":null},{"title":"Styling options​","type":1,"pageTitle":"Text","url":"/wljs-docs/frontend/Reference/Graphics/Text#styling-options","content":" The following options can be provided to Style wrapper  FontSize-&gt;Number - 10, 12, 14...FontFamily-&gt;String - this is basically an SVG attribute, please see here. If you have imported any font using CSS, you can also use it.  To change the color, just put in somewhere to the list  Graphics[{ Red, Text[&quot;Hello World&quot;, {0,0}] }]     ","version":null,"tagName":"h3"},{"title":"Dynamic updates​","type":1,"pageTitle":"Text","url":"/wljs-docs/frontend/Reference/Graphics/Text#dynamic-updates","content":" For both the position and text content dynamic updates are supported  txt = RandomWord[]; pos = {0,0}; Graphics[{ Red, Text[txt // Offload, pos // Offload] }]   task = SetInterval[With[{}, txt = RandomWord[]; pos = RandomReal[{-1,1}, 2]; ], 500]; SetTimeout[TaskRemove[task], 5000];   use TaskRemove[task]; to stop an animation  ","version":null,"tagName":"h3"},{"title":"Math support​","type":1,"pageTitle":"Text","url":"/wljs-docs/frontend/Reference/Graphics/Text#math-support","content":" You can use a limited Latex-math kinda mode, that I implemented instead of full Boxes support as it was done in Mathematica, since it might slow down the system a lot  Text[&quot;wavenumber (cm^{-1})&quot;, {0,0}] Text[&quot;\\\\alpha (cm^{-1})&quot;, {0,0}]     A list of features  most used Greek symbols like alpha and etc are supportedsubscript a_1 or a_{hi}superscript a^2 or a^{23}    In principle, it will anyway ends up in HTML, therefore one can use any special symbol  &quot;I will display &amp;#10060;&quot;    ","version":null,"tagName":"h3"},{"title":"InputButton","type":0,"sectionRef":"#","url":"/wljs-docs/frontend/Reference/Inputs/InputButton","content":"","keywords":"","version":null},{"title":"Event generation​","type":1,"pageTitle":"InputButton","url":"/wljs-docs/frontend/Reference/Inputs/InputButton#event-generation","content":" On-click emits True to a handler function assigned  ","version":null,"tagName":"h2"},{"title":"Application​","type":1,"pageTitle":"InputButton","url":"/wljs-docs/frontend/Reference/Inputs/InputButton#application","content":" A basic GUI element  button = InputButton[&quot;Click me!&quot;]; EventHandler[button, Print]   ","version":null,"tagName":"h2"},{"title":"Dev note​","type":1,"pageTitle":"InputButton","url":"/wljs-docs/frontend/Reference/Inputs/InputButton#dev-note","content":" This is a wrapper over ButtonView ","version":null,"tagName":"h2"},{"title":"ViewBox","type":0,"sectionRef":"#","url":"/wljs-docs/frontend/Reference/Decorations/Low level/ViewBox","content":"","keywords":"","version":null},{"title":"Differed view​","type":1,"pageTitle":"ViewBox","url":"/wljs-docs/frontend/Reference/Decorations/Low level/ViewBox#differed-view","content":" Allows to call WL Kernel while constructing the body of a widget  caution This mode is still is development  ","version":null,"tagName":"h2"},{"title":"Mutability​","type":1,"pageTitle":"ViewBox","url":"/wljs-docs/frontend/Reference/Decorations/Low level/ViewBox#mutability","content":" In general it is possible to update the expression underneath indirectly. For this reason, there are multiple way of accessing this feature  From Javascript function​  An expression displayView is evaluated on WLJS Interpreter in the browser with special property provided (see core and tutorial Frontend functions)  core.displayView = async (args, env) =&gt; { env.global.EditorWidget }   this object contains property to update the content  EditorWidget.applyChanges('&quot;new content&quot;')   Example​  Let us create a special object, that will act like a checkbox  CheckObject /: MakeBoxes[CheckObject[state_:(True | False)], StandardForm] := With[{}, ViewBox[CheckObject[state], CheckBoxDecorator[]] ]   now JS part  .js core.CheckBoxDecorator = async (args, env) =&gt; { let state = false; //check the raw data from the viewbox to determine the state if (env.global.EditorWidget.getDoc() == 'CheckObject[True]') state = true; //make a rectangle env.element.style.width = &quot;1em&quot;; env.element.style.height = &quot;1em&quot;; const update = (s) =&gt; env.element.style.background = s ? 'red' : 'blue'; //color it depending on state update(state); //logic for updates when a user click on it env.element.addEventListener(&quot;click&quot;, () =&gt; { state = !state; update(state); const stringState = state ? 'True' : 'False'; env.global.EditorWidget.applyChanges('CheckObject['+stringState+']'); }); }   Let's test it!  CheckObject[True]   then try to click on it, copy and paste it    whatever you do, it will keep its state synced. No communication with WL Kernel happens, everything is running within the code-editor in the browser.  Or even cooler  Table[CheckObject[True], {i, 3}, {j, 3}] // MatrixForm     From Wolfram Kernel #1​  caution This mode is still is development  If you do not like to code in Javascript, there is a simpler solution using Differed view mode  ...   ","version":null,"tagName":"h2"},{"title":"Examples​","type":1,"pageTitle":"ViewBox","url":"/wljs-docs/frontend/Reference/Decorations/Low level/ViewBox#examples","content":" tip This method is much faster than InterpretationBox or Interpretation, since it does not spawn EditorView inside for displaying regular boxes.  ","version":null,"tagName":"h2"},{"title":"Replacing expression with custom JS​","type":1,"pageTitle":"ViewBox","url":"/wljs-docs/frontend/Reference/Decorations/Low level/ViewBox#replacing-expression-with-custom-js","content":" One can define its own style of cells boxes  .js core.Replacer = async (args, env) =&gt; { env.element.style.background = &quot;red&quot;; env.element.style.width = &quot;2em&quot;; env.element.style.height = &quot;1em&quot;; }   wrapper /: MakeBoxes[wrapper[expr_], StandardForm] := ViewBox[wrapper[expr], Replacer]   and then try  wrapper[1/2]   Result  note This is basically how RGBColor, DateObject are implemented  ","version":null,"tagName":"h3"},{"title":"Dev notes​","type":1,"pageTitle":"ViewBox","url":"/wljs-docs/frontend/Reference/Decorations/Low level/ViewBox#dev-notes","content":" Not all required features are implemented. TODO list:  provide Head or Template options to specify the position of a head and etcDiffered viewFrom Wolfram Kernel 1  warning This is just a concept, not a real code  In principle Differed view can be implemented using  CheckObject /: MakeBoxes[CheckObject[state_:(True | False)], StandardForm] := With[{}, ViewBox[CheckObject[state], AskKernel[getWidgetData[This[]], CheckObject`Create] // Offload] ] CheckObject`Create[widgetData_String] := Module[{state = If[ToExpression[widgetData], Red, Blue]}, {Graphics[{state // Offload, EventHandler[Disk[], {&quot;click&quot;-&gt;Function[Null, state = If[state == Red, Blue, Red]; FrontSubmit[ViewBoxUpdate[ToString[state == Red, InputForm], MetaMarker[uid]]; ]}]}], MetaMarker[uid]} ]  ","version":null,"tagName":"h2"},{"title":"InputFile","type":0,"sectionRef":"#","url":"/wljs-docs/frontend/Reference/Inputs/InputFile","content":"","keywords":"","version":null},{"title":"Event generation​","type":1,"pageTitle":"InputFile","url":"/wljs-docs/frontend/Reference/Inputs/InputFile#event-generation","content":" For each file dropped it generates an event with filename and its content encoded as Base64 string  &lt;|&quot;data&quot;-&gt;&quot;base64 encoded byte array&quot;, &quot;name&quot;-&gt;&quot;filename&quot;|&gt;   ","version":null,"tagName":"h2"},{"title":"Example​","type":1,"pageTitle":"InputFile","url":"/wljs-docs/frontend/Reference/Inputs/InputFile#example","content":" A simple file-form to plot the data from the uploaded file  datap = {{0,0}, {0,0}}; EventHandler[InputFile[&quot;Drag and Drop&quot;], Function[file, datap = Drop[ImportString[file[&quot;data&quot;]//BaseDecode//ByteArrayToString, &quot;TSV&quot;], 1] ]] ListLinePlotly[datap // Offload]   works with data, where each column is separated by a spacebar or tab aka TSV. Click autoscale to see the full range  ","version":null,"tagName":"h2"},{"title":"Dev notes​","type":1,"pageTitle":"InputFile","url":"/wljs-docs/frontend/Reference/Inputs/InputFile#dev-notes","content":" This is a wrapper over FileUploadView ","version":null,"tagName":"h2"},{"title":"InputGroup","type":0,"sectionRef":"#","url":"/wljs-docs/frontend/Reference/Inputs/InputGroup","content":"","keywords":"","version":null},{"title":"Event generation​","type":1,"pageTitle":"InputGroup","url":"/wljs-docs/frontend/Reference/Inputs/InputGroup#event-generation","content":" Every-time user acts on an inner event-view from a group events, it will fire an event and send the data from all event objects keeping the original structure  ","version":null,"tagName":"h2"},{"title":"Association​","type":1,"pageTitle":"InputGroup","url":"/wljs-docs/frontend/Reference/Inputs/InputGroup#association","content":" group = InputGroup[&lt;| &quot;left&quot;-&gt;InputRange[0, 10, 1, &quot;Label&quot;-&gt;&quot;Range 1&quot;], &quot;right&quot;-&gt;InputRange[0, 10, 1, &quot;Label&quot;-&gt;&quot;Range 2&quot;] |&gt;] EventHandler[group, Print];   On each update it generates the data for the handler function in a form  &lt;|&quot;left&quot;-&gt;5, &quot;right&quot;-&gt;7|&gt;   ","version":null,"tagName":"h3"},{"title":"Arrays​","type":1,"pageTitle":"InputGroup","url":"/wljs-docs/frontend/Reference/Inputs/InputGroup#arrays","content":" group = InputGroup[{ InputRange[0, 10, 1, &quot;Label&quot;-&gt;&quot;Range 1&quot;], InputRange[0, 10, 1, &quot;Label&quot;-&gt;&quot;Range 2&quot;], InputText[&quot;Hi&quot;] }] EventHandler[group, Print];   the data provided to a handler function Print will look like  {5, 7, &quot;Hi&quot;}  ","version":null,"tagName":"h3"},{"title":"InputRange","type":0,"sectionRef":"#","url":"/wljs-docs/frontend/Reference/Inputs/InputRange","content":"","keywords":"","version":null},{"title":"Event generation​","type":1,"pageTitle":"InputRange","url":"/wljs-docs/frontend/Reference/Inputs/InputRange#event-generation","content":" Every-time user drags a slider, an event in a form of number will be generated  slider = InputRange[0,1,0.1]; EventHandler[slider, Function[data, Print[StringTemplate[&quot;`` is a number&quot;][data]] ]]; slider   ","version":null,"tagName":"h2"},{"title":"Options​","type":1,"pageTitle":"InputRange","url":"/wljs-docs/frontend/Reference/Inputs/InputRange#options","content":" ","version":null,"tagName":"h2"},{"title":"\"Label\"​","type":1,"pageTitle":"InputRange","url":"/wljs-docs/frontend/Reference/Inputs/InputRange#label","content":" Adds a label to a slider  slider = InputRange[0, 1, 0.1, &quot;Label&quot;-&gt;&quot;Slider&quot;]   ","version":null,"tagName":"h3"},{"title":"Applications​","type":1,"pageTitle":"InputRange","url":"/wljs-docs/frontend/Reference/Inputs/InputRange#applications","content":" Control properties using knob  EventHandler[InputRange[0,1,0.1], Function[data, pos = data]]; % % // EventFire; Graphics[Rectangle[{-1,0}, {1, Offload[pos]}]]   ","version":null,"tagName":"h2"},{"title":"Dev notes​","type":1,"pageTitle":"InputRange","url":"/wljs-docs/frontend/Reference/Inputs/InputRange#dev-notes","content":" This is a wrapper over a more fundamental view-component RangeView ","version":null,"tagName":"h2"},{"title":"Slider","type":0,"sectionRef":"#","url":"/wljs-docs/frontend/Reference/Inputs/Slider","content":"Slider warning This is not supported. Please, use alternative way InputRange","keywords":"","version":null},{"title":"Graphics","type":0,"sectionRef":"#","url":"/wljs-docs/frontend/Reference/Graphics/","content":"","keywords":"","version":null},{"title":"Graphics objects​","type":1,"pageTitle":"Graphics","url":"/wljs-docs/frontend/Reference/Graphics/#graphics-objects","content":" Please see the corresponding section in Reference section for expression to be used with Graphics.  Mostly all primitives are generated by a high-order functions like Plot, ListLinePlot, ListVectorPlot, BubbleChart and etc    ","version":null,"tagName":"h2"},{"title":"Options​","type":1,"pageTitle":"Graphics","url":"/wljs-docs/frontend/Reference/Graphics/#options","content":" ","version":null,"tagName":"h2"},{"title":"PlotRange​","type":1,"pageTitle":"Graphics","url":"/wljs-docs/frontend/Reference/Graphics/#plotrange","content":" manually specifies, where the borders of the visible area (viewport) are  PlotRange-&gt;{{-1,1}, {-1,1}}   note If PlotRange is missing, WLJS Graphics will try to guess the dimensions in order to fit all objects to the screen  ","version":null,"tagName":"h3"},{"title":"ImageSize​","type":1,"pageTitle":"Graphics","url":"/wljs-docs/frontend/Reference/Graphics/#imagesize","content":" specifies the actual size in pixels of a canvas  ImageSize-&gt;300 or ImageSize-&gt;{300,200}   ","version":null,"tagName":"h3"},{"title":"ImagePadding​","type":1,"pageTitle":"Graphics","url":"/wljs-docs/frontend/Reference/Graphics/#imagepadding","content":" removes or adds the spacing between the plotted range and the canvas border  remove any padding ImagePadding-&gt;None     add to all sides ImagePadding-&gt;10     ","version":null,"tagName":"h3"},{"title":"Axes​","type":1,"pageTitle":"Graphics","url":"/wljs-docs/frontend/Reference/Graphics/#axes","content":" Show or hide axes  Axes-&gt;True   Example​  Graphics[{EdgeForm[Black], Green, Rectangle[{0, -1}, {2, 1}], Red, Disk[], Blue, Circle[{2, 0}], Yellow, Polygon[{{2, 0}, {4, 1}, {4, -1}}], Purple, Arrow[{{4, 3/2}, {0, 3/2}, {0, 0}}], Black, SVGAttribute[Line[{{-1, 0}, {4, 0}}], &quot;stroke-dasharray&quot;-&gt;&quot;3&quot;]}, Axes-&gt;True ]     ","version":null,"tagName":"h3"},{"title":"AxesLabel​","type":1,"pageTitle":"Graphics","url":"/wljs-docs/frontend/Reference/Graphics/#axeslabel","content":" Place labels on your axes  AxesLabel -&gt; {&quot;xxx&quot;, &quot;yyy&quot;}   note Activate Axes option first  for example    Labels accepts only strings or numbers unlike Mathematica, where you can put everything.  Since it is translated into Text, one can use sort of TeX math input  Graphics[Circle[], Axes-&gt;True, AxesLabel -&gt; {&quot;x-axis (cm^{-1})&quot;, &quot;y-axis \\\\alpha&quot;}]     It also supports Offset attribute  Graphics[Circle[], Axes-&gt;True, AxesLabel -&gt; {Offset[&quot;x-axis (cm^{-1})&quot;, {0,0.5}], &quot;y-axis \\\\alpha&quot;}]     ","version":null,"tagName":"h3"},{"title":"Ticks​","type":1,"pageTitle":"Graphics","url":"/wljs-docs/frontend/Reference/Graphics/#ticks","content":" Customize ticks by providing an array of numbers for both axes  Graphics[Circle[], Axes-&gt;True, Ticks-&gt;{{0, 0.5, 1}, {}}]     Or by providing as pairs {Number, String} one can specify the displayed text  Graphics[Circle[], Axes-&gt;True, Ticks-&gt;{{{0, &quot;Zero&quot;}, {0.5, &quot;Half&quot;}, {1,&quot;One&quot;}}, {}}]     ","version":null,"tagName":"h3"},{"title":"Controls​","type":1,"pageTitle":"Graphics","url":"/wljs-docs/frontend/Reference/Graphics/#controls","content":" The features allows to pan and zoom your plots, that was never possible in Mathematica  Controls-&gt;True     Try to use your mouse here  note from the latest update, this is True by the default  ","version":null,"tagName":"h3"},{"title":"Frame​","type":1,"pageTitle":"Graphics","url":"/wljs-docs/frontend/Reference/Graphics/#frame","content":" Turns plot into the journals-like styled graph. In general it has much more options to customize the look  Graphics[Circle[], Axes-&gt;True, Frame-&gt;True]     FrameTicks​  The same as Ticks, but for this regime.  FrameLabels​  The same as AxesLabel  FrameLabel-&gt;{{&quot;yy&quot;, None}, {&quot;xx&quot;, None}}     FrameStyle​  Affects the style of FrameLabels. Use Directive for changing the style  FrameStyle-&gt;Directive[FontSize-&gt;16]     FrameTicksStyle​  Affects the style of FrameTicks  FrameTicksStyle-&gt;Directive[FontSize-&gt;16]     TickLabels​  To remove unnecessary ticks, use  TickLabels-&gt;{{True, False}, {True, False}}     ","version":null,"tagName":"h3"},{"title":"Epilog​","type":1,"pageTitle":"Graphics","url":"/wljs-docs/frontend/Reference/Graphics/#epilog","content":" Puts any graphics object on top  Epilog-&gt;{Red, Line[{{-1,-1}, {1,1}}]}     It opens up many possibilities, since it provides low-level access to the Graphics canvas.  Example​  One can use it on a high-level function like Plot to add low-level primitives  Plot[Sin[x], {x,0,Pi}, Epilog-&gt;{Red, Line[{{-1,-1}, {1,1}}]}]     or together with MetaMarker.  ","version":null,"tagName":"h3"},{"title":"Prolog​","type":1,"pageTitle":"Graphics","url":"/wljs-docs/frontend/Reference/Graphics/#prolog","content":" The same as Epilog, but acts before plotting the data.  ","version":null,"tagName":"h3"},{"title":"TransitionType​","type":1,"pageTitle":"Graphics","url":"/wljs-docs/frontend/Reference/Graphics/#transitiontype","content":" See Dynamics. The possible values  &quot;Linear&quot;​  For example  cell 1 pt = {-1,0}; Graphics[{PointSize[0.3], Point[pt // Offload]}, ImageSize-&gt;350, PlotRange-&gt;{{-1,1}, {-1,1}}, TransitionType-&gt;&quot;Linear&quot;]   cell 2 pt = RandomReal[{-1,1}, 2];     &quot;CubicInOut&quot;​  This one is used by the default  cell 1 pt = {-1,0}; Graphics[{PointSize[0.3], Point[pt // Offload]}, ImageSize-&gt;350, PlotRange-&gt;{{-1,1}, {-1,1}}, TransitionType-&gt;&quot;CubicInOut&quot;]     ","version":null,"tagName":"h3"},{"title":"TransitionDuration​","type":1,"pageTitle":"Graphics","url":"/wljs-docs/frontend/Reference/Graphics/#transitionduration","content":" Sets the duration of any transitions of graphics objects on canvas in milliseconds. The default value is 300.  ","version":null,"tagName":"h3"},{"title":"Combining two graphics plots​","type":1,"pageTitle":"Graphics","url":"/wljs-docs/frontend/Reference/Graphics/#combining-two-graphics-plots","content":" One can put Graphics into another Graphics canvas using [[Inset]]  ","version":null,"tagName":"h2"},{"title":"Dynamics​","type":1,"pageTitle":"Graphics","url":"/wljs-docs/frontend/Reference/Graphics/#dynamics","content":" The time-dependent symbols (Dynamics) are supported on the level of graphics primitives such as Line, Point, Rectangle, Text and etc... Not all primitives do support dynamic updates, please, check individually.  The full reevaluation of Graphics does not happen, that allows to gain much more performance. However, since the dynamic binding is established between individual primitives and symbols, one can make nested constructions like this one  radius = 1.; angle = 0.; tpos = 0. group = { LightBlue, Disk[{0,0}, radius // Offload], LightBlue, AbsoluteThickness[25], Line[{{-1,1}, {1,-1}}], Red, Directive[FontSize-&gt;24], Text[&quot;Hello World&quot;, {Offload[-0.23 + tpos],0}] }; Graphics[Rotate[group, angle // Offload], TransitionType-&gt;&quot;Linear&quot;, TransitionDuration-&gt;100]   Here  an update of angle will not cause reevaluation of groupand update of radius will only update the radius of Diskand update of tpos will reevaluate an expression -0.23 + tpos and change the text position  Let us animate this example  evaluate in a separate cell Do[ radius = 1+0.5 Sin[x]; tpos = 0.5 Cos[4x]; angle = x; Pause[0.1]; , {x, 0. , 2Pi, 0.1}];   The result will look like   ","version":null,"tagName":"h2"},{"title":"InputTable","type":0,"sectionRef":"#","url":"/wljs-docs/frontend/Reference/Inputs/InputTable","content":"","keywords":"","version":null},{"title":"InputText","type":0,"sectionRef":"#","url":"/wljs-docs/frontend/Reference/Inputs/InputText","content":"","keywords":"","version":null},{"title":"Event generation​","type":1,"pageTitle":"InputText","url":"/wljs-docs/frontend/Reference/Inputs/InputText#event-generation","content":" Every-time user changes the content, an event in a form of string will be generated  &quot;&lt;current string&gt;&quot;   ","version":null,"tagName":"h2"},{"title":"Options​","type":1,"pageTitle":"InputText","url":"/wljs-docs/frontend/Reference/Inputs/InputText#options","content":" ","version":null,"tagName":"h2"},{"title":"\"Label\"​","type":1,"pageTitle":"InputText","url":"/wljs-docs/frontend/Reference/Inputs/InputText#label","content":" adds a label at the left side to the input text field  ","version":null,"tagName":"h3"},{"title":"Example​","type":1,"pageTitle":"InputText","url":"/wljs-docs/frontend/Reference/Inputs/InputText#example","content":" A simple text input  text = InputText[&quot;Hi&quot;] EventHandler[text, Print];   ","version":null,"tagName":"h2"},{"title":"Dev notes​","type":1,"pageTitle":"InputText","url":"/wljs-docs/frontend/Reference/Inputs/InputText#dev-notes","content":" This is a wrapper for TextView view-component ","version":null,"tagName":"h2"},{"title":"Line","type":0,"sectionRef":"#","url":"/wljs-docs/frontend/Reference/Graphics/Line","content":"","keywords":"","version":null},{"title":"General properties​","type":1,"pageTitle":"Line","url":"/wljs-docs/frontend/Reference/Graphics/Line#general-properties","content":" Line itself does not depend on its interpretation, you can also think about it if it was an abstract object like  ArcLength[Line[{{0, 0}, {1, 1}}]]   gives  Sqrt[2]   without Graphics used here.  ","version":null,"tagName":"h2"},{"title":"Scope parameters for displaying​","type":1,"pageTitle":"Line","url":"/wljs-docs/frontend/Reference/Graphics/Line#scope-parameters-for-displaying","content":" There are certain parameters, that can affect the style of a line  ","version":null,"tagName":"h2"},{"title":"AbsoluteThickness​","type":1,"pageTitle":"Line","url":"/wljs-docs/frontend/Reference/Graphics/Line#absolutethickness","content":" The default is 1  {AbsoluteThickness[3], Line[{{0,0}, {1,1}}]} // Graphics   Absolute thickness is indifferent to scaling or zooming of a graphics object.  ","version":null,"tagName":"h3"},{"title":"RGBColor​","type":1,"pageTitle":"Line","url":"/wljs-docs/frontend/Reference/Graphics/Line#rgbcolor","content":" Specifies the color of a stroke  {Red, Line[{{0,0}, {1,1}}]} // Graphics   ","version":null,"tagName":"h3"},{"title":"Examples​","type":1,"pageTitle":"Line","url":"/wljs-docs/frontend/Reference/Graphics/Line#examples","content":" ","version":null,"tagName":"h2"},{"title":"Simple primitive​","type":1,"pageTitle":"Line","url":"/wljs-docs/frontend/Reference/Graphics/Line#simple-primitive","content":" A line, that goes though list of points in 2D  Graphics[Line[{{1, 0}, {2, 4}, {3, 0}, {4, 4}}]]     or styled line  Graphics[{ AbsoluteThickness[3], Red, Line[{{1, 0}, {2, 1}, {3, 0}, {4, 1}}] }]     Tangent vectors along an elliptic curve  With[{f = {Cos[x] + Sin[x], Sin[x]}}, Graphics[ Table[{LABColor[t/(2 Pi), 1, .8], Line[{f, Normalize[D[f, x]] + f}]} /. x -&gt; t, {t, 0, 2 Pi, .1}]]]     ","version":null,"tagName":"h3"},{"title":"Dynamics​","type":1,"pageTitle":"Line","url":"/wljs-docs/frontend/Reference/Graphics/Line#dynamics","content":" This is a main ingredient for displaying any dynamic plots, since Plot function works only for the static data.  Manipulation​  For example a live plot of traveling wave-packet  cell 1 packet[x_, t_] := Sum[Sin[- w t + w x], {w, 0,3,0.05}] / 10; line = Table[{x, packet[x, 0]}, {x, 0, 10, 0.1}]; Graphics[Line[line // Offload], Frame-&gt;True, FrameLabel-&gt;{{&quot;amplitude&quot;}, {&quot;distance&quot;}}]   and a InputRange to control a time variable  cell 2 EventHandler[InputRange[0,5,0.5, 0], Function[t, line = Table[{x, packet[x, t]}, {x, 0, 10, 0.1}]; ]]   The desired result should look like    Inverse kinematics (FABRIK)​  This is an example of implementation FABRIK algorithm  Define a bunch of points connect them into a segmented line with fixed length  chain = {Cos[#[[1]]], Sin[#[[2]]]}&amp;/@ RandomReal[{-1,1}, {65, 2}] // Sort; lengths = Norm /@ (chain // Reverse // Differences) // Reverse;   the actual implementation of FABRIK  fabrik[lengths_, target_, origin_] := Module[{buffer, prev}, buffer = Table[With[{p = chain[[-i]]}, If[i === 1, prev = target; target , prev = prev - Normalize[(prev - p)] lengths[[1-i]]; prev ] ], {i, chain // Length}] // Reverse; Table[With[{p = buffer[[i]]}, If[i === 1, prev = origin; origin , prev = prev - Normalize[(prev - p)] lengths[[i-1]]; prev ] ], {i, chain // Length}] ]   Dynamic visualization using lines and points  Graphics[{ Line[chain // Offload], Red, PointSize[0.06], EventHandler[Point[{-1,-1}], {&quot;drag&quot;-&gt;Function[xy, chain = fabrik[lengths, xy, chain // First]]}], Blue, Point[origin // Offload] }, PlotRange-&gt;{{-2,2}, {-2,2}}, ImageSize-&gt;500, TransitionType-&gt;&quot;Linear&quot;, TransitionDuration-&gt;30]   Try to drag a red dot using mouseThe result will look like    note Line interpolates missing segments of a line, if the dataset has been updated. No actions needed form the user ","version":null,"tagName":"h3"},{"title":"Event generation​","type":1,"pageTitle":"InputTable","url":"/wljs-docs/frontend/Reference/Inputs/InputTable#event-generation","content":" Every-time user changes the cell's data, the events comes as transactions in a form of  {&quot;Typeof&quot;, row, col, oldData, newData}   try this example  list = Table[i j, {i,5}, {j,5}]; EventHandler[InputTable[list], Print]   ","version":null,"tagName":"h2"},{"title":"Transaction helper​","type":1,"pageTitle":"InputTable","url":"/wljs-docs/frontend/Reference/Inputs/InputTable#transaction-helper","content":" if you don't want to mess with them, there is a helper function InputTable~EventHelper, that updates the list using those transitions  InputTable`EventHelper[list_List] _Function   It will mutate the given symbol list according to the transactions. One has to initialize it on the corresponding list and use the resulting generated symbol in your EventHandler function like in the example below  list = Table[i j, {i,5}, {j,5}]; handler = InputTable`EventHelper[list]; textstr = &quot;&quot;; EventHandler[InputTable[list, &quot;Height&quot;-&gt;150], Function[data, handler[data]; textstr = ToString[list // MatrixForm, StandardForm]; ]] EditorView[textstr // Offload] // CreateFrontEndObject   the result should look like this    tip If you want to just view your data, do not apply EventHandler list = Table[i j, {i,5}, {j,5}]; InputTable[list] your symbol list will not be affected.  ","version":null,"tagName":"h3"},{"title":"Options​","type":1,"pageTitle":"InputTable","url":"/wljs-docs/frontend/Reference/Inputs/InputTable#options","content":" ","version":null,"tagName":"h2"},{"title":"\"Height\"​","type":1,"pageTitle":"InputTable","url":"/wljs-docs/frontend/Reference/Inputs/InputTable#height","content":" specifies the max-height of the table widget. The default value is 400 px.  tip If you have a large list of rows, project the cell to a new window with a bigger &quot;Height&quot;value. It will bring similar experience to Excel-like programs.  ","version":null,"tagName":"h3"},{"title":"Dev notes​","type":1,"pageTitle":"InputTable","url":"/wljs-docs/frontend/Reference/Inputs/InputTable#dev-notes","content":" A handsontable engine is used as the cells manager. ","version":null,"tagName":"h2"},{"title":"Async","type":0,"sectionRef":"#","url":"/wljs-docs/frontend/Reference/Misc/Async","content":"","keywords":"","version":null},{"title":"SetTimeout​","type":1,"pageTitle":"Async","url":"/wljs-docs/frontend/Reference/Misc/Async#settimeout","content":" Spawns an asynchronous task (a wrapper over SchelduleTask), that evaluates an expression once  SetTimeout[expr_, interval_Real] _TaskObject   A symbol has HoldFirst attribute. An interval is in milliseconds. To cancel it, use  CancelTimeout[_TaskObject]   ","version":null,"tagName":"h2"},{"title":"SetInterval​","type":1,"pageTitle":"Async","url":"/wljs-docs/frontend/Reference/Misc/Async#setinterval","content":" Spawns an asynchronous task (a wrapper over SchelduleTask), that evaluates an expression every interval milliseconds  SetInterval[expr_, interval_Real] _TaskObject   A symbol has HoldFirst attribute. To cancel this task use  TaskRemove[_TaskObject]   or  CancelInterval[_TaskObject]  ","version":null,"tagName":"h2"},{"title":"SpotLight","type":0,"sectionRef":"#","url":"/wljs-docs/frontend/Reference/Graphics3D/SpotLight","content":"","keywords":"","version":null},{"title":"Options​","type":1,"pageTitle":"SpotLight","url":"/wljs-docs/frontend/Reference/Graphics3D/SpotLight#options","content":" Those options are usually required for the correct rendering  ","version":null,"tagName":"h2"},{"title":"\"Position\"​","type":1,"pageTitle":"SpotLight","url":"/wljs-docs/frontend/Reference/Graphics3D/SpotLight#position","content":" A vector, that specifies the origin of the spot light source. id does support dynamic updates, i.e. can be used together with Offload  ","version":null,"tagName":"h3"},{"title":"\"Target\"​","type":1,"pageTitle":"SpotLight","url":"/wljs-docs/frontend/Reference/Graphics3D/SpotLight#target","content":" A vector that stands for the direction of the light source with respect to the &quot;Position&quot;. It also supports updates  ","version":null,"tagName":"h3"},{"title":"Neat example​","type":1,"pageTitle":"SpotLight","url":"/wljs-docs/frontend/Reference/Graphics3D/SpotLight#neat-example","content":" A controllable by a user spot light  target = {0,0,0}; handler = Function[data, target = data[&quot;position&quot;]];   KnotData[{&quot;TorusKnot&quot;, {3, 5}}][[1]]; Graphics3D[{ Shadows[True], %, EventHandler[Sphere[target, 0.1], {&quot;transform&quot; -&gt; handler}], SpotLight[White, &quot;Position&quot;-&gt;{0,0,2}, &quot;Target&quot;-&gt;Offload[target]], Polygon[5{{-1,1,-1}, {1,1,-1}, {1,-1,-1}, {-1,-1,-1}}] }, &quot;Lighting&quot;-&gt;None]  ","version":null,"tagName":"h2"},{"title":"Language","type":0,"sectionRef":"#","url":"/wljs-docs/frontend/Reference/Misc/Language","content":"","keywords":"","version":null},{"title":"LeakyModule​","type":1,"pageTitle":"Language","url":"/wljs-docs/frontend/Reference/Misc/Language#leakymodule","content":" a Module that cause memory leaks on purpose  A variation of Module, which comes with its own garbage collector, that prevents symbols from being purged by WL  LeakyModule[symbols_List, expr_, opts___] _   The only difference compared to traditional module-function is an optional argument  &quot;Garbage&quot; :&gt; _List a held symbol, that points to a list.  Then a user can manually purge them. ","version":null,"tagName":"h2"},{"title":"BubbleChart","type":0,"sectionRef":"#","url":"/wljs-docs/frontend/Reference/Plotting/BubbleChart","content":"","keywords":"","version":null},{"title":"Examples​","type":1,"pageTitle":"BubbleChart","url":"/wljs-docs/frontend/Reference/Plotting/BubbleChart#examples","content":" Simple bubble plot of random triplets  BubbleChart[RandomReal[1, {10, 3}]]     multiple datasets  BubbleChart[RandomReal[1, {5, 7, 3}]]    ","version":null,"tagName":"h2"},{"title":"ContourPlot","type":0,"sectionRef":"#","url":"/wljs-docs/frontend/Reference/Plotting/ContourPlot","content":"","keywords":"","version":null},{"title":"Options​","type":1,"pageTitle":"ContourPlot","url":"/wljs-docs/frontend/Reference/Plotting/ContourPlot#options","content":" Styling is limited to the current implementation of Graphics ","version":null,"tagName":"h2"},{"title":"BarChart","type":0,"sectionRef":"#","url":"/wljs-docs/frontend/Reference/Plotting/BarChart","content":"","keywords":"","version":null},{"title":"Examples​","type":1,"pageTitle":"BarChart","url":"/wljs-docs/frontend/Reference/Plotting/BarChart#examples","content":" Set the style for bars  BarChart[Range[8], ChartStyle -&gt; &quot;DarkRainbow&quot;]     chartwork with stacked bars  BarChart[RandomReal[1, {50, 50}], ChartLayout -&gt; &quot;Stacked&quot;, Axes -&gt; None, BarSpacing -&gt; {0, 0}, PerformanceGoal -&gt; &quot;Speed&quot;, ChartStyle -&gt; &quot;FallColors&quot;]    ","version":null,"tagName":"h2"},{"title":"TextView","type":0,"sectionRef":"#","url":"/wljs-docs/frontend/Reference/Inputs/TextView","content":"","keywords":"","version":null},{"title":"Event generation​","type":1,"pageTitle":"TextView","url":"/wljs-docs/frontend/Reference/Inputs/TextView#event-generation","content":" Every-time user changes the content, an event in a form of string will be generated  &quot;&lt;current string&gt;&quot;   ","version":null,"tagName":"h2"},{"title":"Options​","type":1,"pageTitle":"TextView","url":"/wljs-docs/frontend/Reference/Inputs/TextView#options","content":" ","version":null,"tagName":"h2"},{"title":"\"Event\"​","type":1,"pageTitle":"TextView","url":"/wljs-docs/frontend/Reference/Inputs/TextView#event","content":" Specifies an uid of an event-object, that will be fired on-change.  ","version":null,"tagName":"h3"},{"title":"\"Label\"​","type":1,"pageTitle":"TextView","url":"/wljs-docs/frontend/Reference/Inputs/TextView#label","content":" adds a label at the left side to the input text field  ","version":null,"tagName":"h3"},{"title":"Application​","type":1,"pageTitle":"TextView","url":"/wljs-docs/frontend/Reference/Inputs/TextView#application","content":" ","version":null,"tagName":"h2"},{"title":"User's input & output​","type":1,"pageTitle":"TextView","url":"/wljs-docs/frontend/Reference/Inputs/TextView#users-input--output","content":" It can be used without WLJS frontend on a web page to act as a slider. For instance using WLX  var = &quot;Hello World!&quot;; uid = CreateUUID[]; EventHandler[uid, Function[d, var = StringReverse[d]]]; InputElement = TextView[var, &quot;Event&quot;-&gt;uid] // WLJS; Output = TextView[Offload[var]] // WLJS; &lt;div&gt; &lt;InputElement/&gt; &lt;Output/&gt; &lt;/div&gt;  ","version":null,"tagName":"h3"},{"title":"ListCurvePathPlot","type":0,"sectionRef":"#","url":"/wljs-docs/frontend/Reference/Plotting/ListCurvePathPlot","content":"","keywords":"","version":null},{"title":"Example​","type":1,"pageTitle":"ListCurvePathPlot","url":"/wljs-docs/frontend/Reference/Plotting/ListCurvePathPlot#example","content":" Randomly sampled points on a circle  data = Table[{t Cos[t], t Sin[t]}, {t, RandomReal[{0, 2 Pi}, 50]}]; ListCurvePathPlot[data, Epilog-&gt;{Opacity[0.5], Line[data]}]     where the gray lines represent what would a simple line plot show.  ","version":null,"tagName":"h2"},{"title":"Neat example​","type":1,"pageTitle":"ListCurvePathPlot","url":"/wljs-docs/frontend/Reference/Plotting/ListCurvePathPlot#neat-example","content":" ListCurvePathPlot[RandomReal[{0, 10}, {2000, 2}]]    ","version":null,"tagName":"h3"},{"title":"ListContourPlot","type":0,"sectionRef":"#","url":"/wljs-docs/frontend/Reference/Plotting/ListContourPlot","content":"","keywords":"","version":null},{"title":"Example​","type":1,"pageTitle":"ListContourPlot","url":"/wljs-docs/frontend/Reference/Plotting/ListContourPlot#example","content":" Generate contours from an array of heights  ListContourPlot[Table[Sin[i + j^2], {i, 0, 3, 0.1}, {j, 0, 3, 0.1}]]     Or give explicit x,y,zx,y,zx,y,z coordinates for the data  data = Table[{x = RandomReal[{-2, 2}], y = RandomReal[{-2, 2}], Sin[x y]}, {1000}]; ListContourPlot[data]    ","version":null,"tagName":"h2"},{"title":"DensityPlot","type":0,"sectionRef":"#","url":"/wljs-docs/frontend/Reference/Plotting/DensityPlot","content":"DensityPlot Wolfram Kernel Execution environment DensityPlot[f, {x, xmin, xmax}, {y, ymin, ymax}] makes a density plot of f as a function of x and y warning Only a flat-shading is supported for now DensityPlot[x y, {x,0,1}, {y,0,1}] ","keywords":"","version":null},{"title":"Promise","type":0,"sectionRef":"#","url":"/wljs-docs/frontend/Reference/Misc/Promise","content":"","keywords":"","version":null},{"title":"Promise​","type":1,"pageTitle":"Promise","url":"/wljs-docs/frontend/Reference/Misc/Promise#promise","content":" A constructor and also representation of EventObject which can be fired only once (aka resolved) and even before a corresponding handler is attached  Promise[] _Promise (* constructor *)   To resolve or reject a promise - use EventFire  EventFire[p_Promise, Resolve | Reject, data_]   ","version":null,"tagName":"h2"},{"title":"Then​","type":1,"pageTitle":"Promise","url":"/wljs-docs/frontend/Reference/Misc/Promise#then","content":" An expression for asynchronous subscribing to promise resolution or rejection  Then[p_Promise | _List | _, resolve_] Then[p_Promise | _List | _, resolve_, reject_]   where resolve and reject are any arbitrary functions. This is non-blocking function.  info The key difference between EventHandler and Then is that Then can even be applied to already resolved Promise object (after it was fired), which will cause an immediate evaluation of resolve or reject functions.  Being applied to a List of _Promise objects it will wait until all of them are resolved before evaluating resolve function.  Any Wolfram Expressions, which is not a List or Promise counts as resolved.  ","version":null,"tagName":"h2"},{"title":"Example​","type":1,"pageTitle":"Promise","url":"/wljs-docs/frontend/Reference/Misc/Promise#example","content":" Let's try with a multiple promise events  p1 = Promise[]; p2 = Promise[]; SetTimeout[EventFire[p1, Resolve, Null], 1000]; SetTimeout[EventFire[p2, Resolve, Null], 1500]; Then[{p1,p2,Null}, Function[Null, Echo[&quot;Resolved!&quot;]; ]];   Here Null as a last element of a list was used just for demonstration purposes. It can also be any non _Promise | _List expression.  ","version":null,"tagName":"h3"},{"title":"WaitAll​","type":1,"pageTitle":"Promise","url":"/wljs-docs/frontend/Reference/Misc/Promise#waitall","content":" A synchronous blocking function to wait until a promise has resolved and returns the result  WaitAll[p_Promise] _   There is a timeout of 5 seconds, then $Failed is returned.  caution Be careful while using this. Avoid to use in SessionSubmit, BackgroundTask and other interrupting the main loop subroutines. If your promise resolution does depend on TCP socket message, it will never be resolved properly, since all subroutines blocks TCP sockets and other external services. ","version":null,"tagName":"h2"},{"title":"ListLinePlot","type":0,"sectionRef":"#","url":"/wljs-docs/frontend/Reference/Plotting/ListLinePlot","content":"","keywords":"","version":null},{"title":"Options​","type":1,"pageTitle":"ListLinePlot","url":"/wljs-docs/frontend/Reference/Plotting/ListLinePlot#options","content":" The same as for Plot  ","version":null,"tagName":"h2"},{"title":"Examples​","type":1,"pageTitle":"ListLinePlot","url":"/wljs-docs/frontend/Reference/Plotting/ListLinePlot#examples","content":" Plot a list of yyy values  ListLinePlot[{1, 1, 2, 3, 5, 8}]     Add a filling under the line  ListLinePlot[Prime[Range[25]], Filling -&gt; Axis]     Random walk  ListLinePlot[Accumulate[RandomReal[{-1, 1}, {250, 2}]]]     ","version":null,"tagName":"h2"},{"title":"Dev notes​","type":1,"pageTitle":"ListLinePlot","url":"/wljs-docs/frontend/Reference/Plotting/ListLinePlot#dev-notes","content":" This function does not support dynamic updates, please use raw Graphics or alternative way - ListLinePlotly to animate your data. ","version":null,"tagName":"h2"},{"title":"MatrixPlot","type":0,"sectionRef":"#","url":"/wljs-docs/frontend/Reference/Plotting/MatrixPlot","content":"","keywords":"","version":null},{"title":"Options​","type":1,"pageTitle":"MatrixPlot","url":"/wljs-docs/frontend/Reference/Plotting/MatrixPlot#options","content":" warning ColorFunction is not supported option for now  ","version":null,"tagName":"h2"},{"title":"Dev notes​","type":1,"pageTitle":"MatrixPlot","url":"/wljs-docs/frontend/Reference/Plotting/MatrixPlot#dev-notes","content":" It produces Raster graphics object placed into Graphics ","version":null,"tagName":"h2"},{"title":"ArrayPlot","type":0,"sectionRef":"#","url":"/wljs-docs/frontend/Reference/Plotting/ArrayPlot","content":"ArrayPlot Wolfram Kernel Execution environment Generates a plot, where values are shown in a discrete array of blocks danger Since Graphics in this implementation cannot guess the plot range, you need to provide this explicitly. Use MatrixPlot if you want it to happen automatically. ArrayPlot[{{1, 0, 0, Pink}, {1, 1, 0, Pink}, {1, 0, 1, Red}}]; Insert[%, PlotRange-&gt;{{0,4}, {0,3}}, 2] Combining it with Controls option for Graphics, you can zoom and pan the plot using your mouse ArrayPlot[Table[Sin[x y], {x, -40, 40}, {y, -40, 40}]]; Insert[%, PlotRange-&gt;{{0,80}, {0,80}}, 2]; Insert[%, Controls-&gt;True, 2] ","keywords":"","version":null},{"title":"Events","type":0,"sectionRef":"#","url":"/wljs-docs/frontend/Reference/Misc/Events","content":"","keywords":"","version":null},{"title":"EventObject​","type":1,"pageTitle":"Events","url":"/wljs-docs/frontend/Reference/Misc/Events#eventobject","content":" A complete representation of event-object with its initial data and possible decorative representation  EventObject[&lt;|&quot;Id&quot;-&gt;_String, &quot;Initial&quot;-&gt;_, &quot;View&quot;-&gt;_|&gt;]   Actual binding happens with only &quot;Id&quot; field, therefore a string equivalent is also valid to use  _String   ","version":null,"tagName":"h2"},{"title":"\"Initial\"​","type":1,"pageTitle":"Events","url":"/wljs-docs/frontend/Reference/Misc/Events#initial","content":" Stores initial data, which makes sense if an event object was produced by some sliders, toggle switches or other UI elements.  If an event was joined with other event, &quot;Initial&quot; data will be merged as well depending on its original structure.  If an event object is used in EventFire with no data provided, &quot;Initial&quot; field will be used instead as a payload.  ","version":null,"tagName":"h3"},{"title":"\"View\"​","type":1,"pageTitle":"Events","url":"/wljs-docs/frontend/Reference/Misc/Events#view","content":" An implementation depends on the executing environment. On WLX pages, or inside notebook this field will represent how an event object will be displayed. Usually if it has been generated by some UI component, a button or a slider is displayed on output, that fires this event remotely using a provided &quot;Id&quot;.  ","version":null,"tagName":"h3"},{"title":"Inheritable properties​","type":1,"pageTitle":"Events","url":"/wljs-docs/frontend/Reference/Misc/Events#inheritable-properties","content":" There is only a single field &quot;Initial&quot; that can be merged or copied under EventClone and Join or EventJoin operations.  ","version":null,"tagName":"h3"},{"title":"Non-inheritable properties​","type":1,"pageTitle":"Events","url":"/wljs-docs/frontend/Reference/Misc/Events#non-inheritable-properties","content":" &quot;Id&quot;, &quot;View&quot; cannot be copied under EventJoin, EventClone and Join operations.  ","version":null,"tagName":"h3"},{"title":"EventHandler​","type":1,"pageTitle":"Events","url":"/wljs-docs/frontend/Reference/Misc/Events#eventhandler","content":" Binds an event object represented as a string or EventObject or anything compatible with this type to a single or multiple handling functions (multiple - only if patterns do not intersect)  EventHandler[ev_String | _EventObject, {handlers___Rule | handlers___RuleDelayed}]   where handlers is a sequence of rules (straight or delayed), which are applied to any incoming message. Each rule represents a normal WL pattern to mach a message generated by EventFire.  There is a simpler version as well, which is indifferent to patterns  EventHandler[ev_String | _EventObject, handler_]   which is effectively  EventHandler[ev_String | _EventObject, {_ -&gt; handler_}]   warning Only a single handler function can be assign to an event object per pattern. If you need multiple handlers (chain) to be assigned to the same event and pattern - clone your event firstly using EventClone  Return value​  It is optional, but any handler can return any non-Null expression, which will be presented as a return value of EventFire expression.  ","version":null,"tagName":"h2"},{"title":"Example​","type":1,"pageTitle":"Events","url":"/wljs-docs/frontend/Reference/Misc/Events#example","content":" The simples case scenario  EventHandler[&quot;ev&quot;, Print]; EventFire[&quot;ev&quot;, &quot;Hello World!&quot;];   or using different patterns  EventHandler[&quot;ev&quot;, { &quot;Case 1&quot; -&gt; Print, &quot;Case 2&quot; -&gt; Echo, any_String :&gt; Function[data, Echo[StringJoin[&quot;Undefined case: &quot;, any]]] }]; EventFire[&quot;ev&quot;, &quot;Case 1&quot;, &quot;Hello World!&quot;]; EventFire[&quot;ev&quot;, &quot;Case 2&quot;, &quot;Hello World!&quot;]; EventFire[&quot;ev&quot;, &quot;Case 3&quot;, &quot;Hello World!&quot;];   note Patterns do not have to be strings only. Any Wolfram Expression is valid  ","version":null,"tagName":"h3"},{"title":"EventClone​","type":1,"pageTitle":"Events","url":"/wljs-docs/frontend/Reference/Misc/Events#eventclone","content":" Clones event object and returns a new one, keeping all previous assigned handlers on another copy of it  EventClone[ev_String | _EventObject] _EventObject   Multiple calls on the same ev makes a chain of new event objects connected to it. Once EventFire is called on ev, it will sequentially fire all cloned events in a chain.  ","version":null,"tagName":"h2"},{"title":"EventRemove​","type":1,"pageTitle":"Events","url":"/wljs-docs/frontend/Reference/Misc/Events#eventremove","content":" Removes all handlers from a given event object  EventRemove[ev_String | _EventObject]   or  Delete[ev_EventObject]   is also valid. Removing a cloned event only removes handlers from the cloned event object  ","version":null,"tagName":"h2"},{"title":"EventJoin​","type":1,"pageTitle":"Events","url":"/wljs-docs/frontend/Reference/Misc/Events#eventjoin","content":" Joins two independent events into a new one merging their &quot;Initial&quot; values as well  EventJoin[ev__String | __EventObject] _EventObject   however  Join[ev__EventObject] _EventObject   is also valid.  ","version":null,"tagName":"h2"},{"title":"EventFire​","type":1,"pageTitle":"Events","url":"/wljs-docs/frontend/Reference/Misc/Events#eventfire","content":" Fires an event with provided data and pattern  EventFire[ev_String | _EventObject, data_] _ EventFire[ev_String | _EventObject, pattern_, data_] _   or for a complete event object representation  EventFire[ev_EventObject] _   it takes &quot;Initial&quot; field as data. Effectively if pattern is not provided &quot;Default&quot; pattern is used instead. ","version":null,"tagName":"h2"},{"title":"RandomImage","type":0,"sectionRef":"#","url":"/wljs-docs/frontend/Reference/Plotting/RandomImage","content":"RandomImage Wolfram Kernel Execution environment Generates a raster Image with a given size and distribution. Only RGB space is supported. The maximum value is limited to 255 for each channel RandomImage[255, {100, 100}, ColorSpace -&gt; &quot;RGB&quot;] warning 3D features are not supported","keywords":"","version":null},{"title":"ListStepPlot","type":0,"sectionRef":"#","url":"/wljs-docs/frontend/Reference/Plotting/ListStepPlot","content":"","keywords":"","version":null},{"title":"Examples​","type":1,"pageTitle":"ListStepPlot","url":"/wljs-docs/frontend/Reference/Plotting/ListStepPlot#examples","content":" Using xxx and yyy coordinates  ListStepPlot[Table[{Prime[n], EulerPhi[n]}, {n, 50}]]    ","version":null,"tagName":"h2"},{"title":"ListLinePlotly","type":0,"sectionRef":"#","url":"/wljs-docs/frontend/Reference/Plotting/ListLinePlotly","content":"","keywords":"","version":null},{"title":"Examples with dynamics​","type":1,"pageTitle":"ListLinePlotly","url":"/wljs-docs/frontend/Reference/Plotting/ListLinePlotly#examples-with-dynamics","content":" As an advantage of it, you can directly feed it with offloaded variables  dirs = {{0,0}, {0,0}}; ListLinePlotly[dirs // Offload]   task = SetInterval[dirs = Append[dirs, Last[dirs] + RandomChoice[{{1,0}, {-1,0}, {0,1}, {0,-1}}]], 300]; SetTimeout[TaskRemove[task], 6000];  ","version":null,"tagName":"h2"},{"title":"VectorPlot3D","type":0,"sectionRef":"#","url":"/wljs-docs/frontend/Reference/Plotting/VectorPlot3D","content":"VectorPlot3D Wolfram Kernel Execution environment Generates a 3D vector plot of the vector field {vx,vy,vz} as a function of xxx, yyy, and zzz VectorPlot3D[{x, y, z}, {x, -1, 1}, {y, -1, 1}, {z, -1, 1}] ","keywords":"","version":null},{"title":"ListVectorPlot","type":0,"sectionRef":"#","url":"/wljs-docs/frontend/Reference/Plotting/ListVectorPlot","content":"ListVectorPlot Wolfram Kernel Execution environment Plot the vector field interpolated from a specified set of vectors ListVectorPlot[Table[{y, -x}, {x, -3, 3, 0.2}, {y, -3, 3, 0.2}]] It provides the same options as VectorPlot","keywords":"","version":null},{"title":"Plotly","type":0,"sectionRef":"#","url":"/wljs-docs/frontend/Reference/Plotting/Plotly","content":"","keywords":"","version":null},{"title":"Dev notes​","type":1,"pageTitle":"Plotly","url":"/wljs-docs/frontend/Reference/Plotting/Plotly#dev-notes","content":" This is a wrapper of Plot, that translates kinda in hacky way the result to ListLinePlotly. Which is the only high-order plotting function that support dynamic updates out of the box.  Credits for this adaptation to @userrand ","version":null,"tagName":"h2"},{"title":"StackedListPlot","type":0,"sectionRef":"#","url":"/wljs-docs/frontend/Reference/Plotting/StackedListPlot","content":"","keywords":"","version":null},{"title":"Example​","type":1,"pageTitle":"StackedListPlot","url":"/wljs-docs/frontend/Reference/Plotting/StackedListPlot#example","content":" Plot a stacked list of yyy values  StackedListPlot[{{3, 2, 1, 6, 4, 7, 7, 2, 3, 1}, {7, 8, 8, 3, 5, 9, 10, 3, 10, 10}, {10, 2, 4, 8, 4, 10, 8, 4, 5, 3}}]    ","version":null,"tagName":"h2"},{"title":"VectorPlot","type":0,"sectionRef":"#","url":"/wljs-docs/frontend/Reference/Plotting/VectorPlot","content":"","keywords":"","version":null},{"title":"Options​","type":1,"pageTitle":"VectorPlot","url":"/wljs-docs/frontend/Reference/Plotting/VectorPlot#options","content":" Currently only partially supported ","version":null,"tagName":"h2"},{"title":"Export notebook","type":0,"sectionRef":"#","url":"/wljs-docs/frontend/Tutorial/Export notebook","content":"Export notebook Since all magic happens inside the browser using plain Javascript, it is extremely easy to export notebook to a standalone HTML file or even React component to embed it on website (blog). danger Due to the caching issues, please use hard reload on a webpage, when you open an HTML file. Usually Shift+Win+R note In theory since Wolfram Language interpreter also runs in browser, it is possible to implement sort of compiler to run some lightweight calculations on WLJS. To export you notebook using specific procedure - click on a top bar Share button. Basically this is how cells were embedded into the documentation you are reading right now (see React component).","keywords":"","version":null},{"title":"Troubleshooting","type":0,"sectionRef":"#","url":"/wljs-docs/frontend/Troubleshooting","content":"","keywords":"","version":null},{"title":"Browsers console​","type":1,"pageTitle":"Troubleshooting","url":"/wljs-docs/frontend/Troubleshooting#browsers-console","content":" Please locate the developer console (typically Window →\\rightarrow→ Toggle Developer Tools or using a right click with a mouse Inspect element) and copy the error messages and a few above it (5-10).  ","version":null,"tagName":"h2"},{"title":"Logs dump​","type":1,"pageTitle":"Troubleshooting","url":"/wljs-docs/frontend/Troubleshooting#logs-dump","content":" If it does not violate your privacy, there is a log-file, that records everything from the Wolfram Engine at the startup for 2 minutes.  You can locate it using File menu, then Locate AppData (installation directory), where in the root directory there is a file 2MinutesLog.txt and send to us.  ","version":null,"tagName":"h2"},{"title":"Hot line & general discussion chat​","type":1,"pageTitle":"Troubleshooting","url":"/wljs-docs/frontend/Troubleshooting#hot-line--general-discussion-chat","content":" Please feel free to join Telegram Group.  ","version":null,"tagName":"h2"},{"title":"Common cases​","type":1,"pageTitle":"Troubleshooting","url":"/wljs-docs/frontend/Troubleshooting#common-cases","content":" ","version":null,"tagName":"h2"},{"title":"UI was not loaded properly​","type":1,"pageTitle":"Troubleshooting","url":"/wljs-docs/frontend/Troubleshooting#ui-was-not-loaded-properly","content":" It might be an issue with sockets, try Window →\\rightarrow→ Force reload  ","version":null,"tagName":"h3"},{"title":"The output of a cell does not look correct​","type":1,"pageTitle":"Troubleshooting","url":"/wljs-docs/frontend/Troubleshooting#the-output-of-a-cell-does-not-look-correct","content":" This might be connected with InterpretationBox or some other decorations did work well, try to evaluate your expression with InputForm  % // InputForm   to prevent DisplayForm output.  tip Please, be forgiving to some flaws. We are the pioneers of an idea for real-world web-applications built using freeware Wolfram Language.  tip Feel free to contact us 🤗 ","version":null,"tagName":"h3"},{"title":"StreamPlot","type":0,"sectionRef":"#","url":"/wljs-docs/frontend/Reference/Plotting/StreamPlot","content":"StreamPlot Wolfram Kernel Execution environment Generates a stream plot of the vector field vx,vy{v_x,v_y}vx​,vy​ as a function of xxx and yyy StreamPlot[{-1 - x^2 + y, 1 + x - y^2}, {x, -3, 3}, {y, -3, 3}] ","keywords":"","version":null},{"title":"feinput.gif","type":0,"sectionRef":"#","url":"/wljs-docs/imgs/feinput.gif","content":"feinput.gif","keywords":"","version":null},{"title":"Containers","type":0,"sectionRef":"#","url":"/wljs-docs/interpreter/Advanced/containers","content":"","keywords":"","version":null},{"title":"Dynamic binding​","type":1,"pageTitle":"Containers","url":"/wljs-docs/interpreter/Advanced/containers#dynamic-binding","content":" second key feature, why we need containersThe ideas for WLJS Frontend were inspired by an amazing project Observable - JavaScript notebook interface working in the browser, where the dynamics was polished perfectly.  In Observable all expressions are Dynamic in terms of Mathematica by the default. Me, as a maintainer (@JerryI) I tried to bring it as close as possible to such behaviour, leaving out lags of Mathematica's frontend and functions overhead as mush as possible.  Therefore, all user's defined symbols are containers, all graphics objects should also be containers, and all containers are dynamic by default.    The change in one will cause the updates to ones, which depends on it. This behaviuor is achieved by collecting all calls of front-end functions and storing them to special handlers assigned to each object. In principle we do not even need WL Kernel to update the content, just WLJS interpreter is already enough.  info Update event propagates only to the first nearest parent  info Update event is fired on the instance on a container, not on the inner expressions. After that the container reevaluates itself with a method update applied to all nested expressions  We just scratched a top of the surface, the things you can do with it are quite bigger... ","version":null,"tagName":"h3"},{"title":"Overview","type":0,"sectionRef":"#","url":"/wljs-docs/frontend/Tutorial/Overview","content":"","keywords":"","version":null},{"title":"Cell control buttons​","type":1,"pageTitle":"Overview","url":"/wljs-docs/frontend/Tutorial/Overview#cell-control-buttons","content":" All cells are grouped by parent input cell, apart from that the structure of the notebook is flat. The controls are applied to the whole group    From left to right  add new cell belowhide an input cellevaluate (also Shift+Enter combo)more  The last options expands into    Project to a window is the most interesting feature here, that allows to evaluate a cell in a new window. It comes handy while demonstrating presentations.  ","version":null,"tagName":"h3"},{"title":"Wolfram Language​","type":1,"pageTitle":"Overview","url":"/wljs-docs/frontend/Tutorial/Overview#wolfram-language","content":" When you start typing the language you are using assumed to be WL. By pressing Shift-Enter you can start evaluation    Output cells are joined to the input and the last one can be hidden by clicking on the →\\rightarrow→ sign on the left side from the cell.  note Once you change something inside the output cell, it loses its parent and becomes new input cell, like in Mathematica.  Syntax sugar, fractions and other 2D input are supported    The most useful commands are listed below  Ctrl+/ fractionCtrl+^ powerCtrl+- subscriptCtrl+2 square root  Now let us move to some other gems  ","version":null,"tagName":"h2"},{"title":"Snippets​","type":1,"pageTitle":"Overview","url":"/wljs-docs/frontend/Tutorial/Overview#snippets","content":" To help in writing matrixes, colors, and some other useful stuff are accessible by the shortcut Super/Cmd+P    All snippets are just special kind of notebooks including all UI elements.  ","version":null,"tagName":"h2"},{"title":"Editor of Power​","type":1,"pageTitle":"Overview","url":"/wljs-docs/frontend/Tutorial/Overview#editor-of-power","content":" A single input cell can produce Wolfram Language output, HTML page, Javascript window or a slide of a presentation    ","version":null,"tagName":"h2"},{"title":"Graphics 2D & 3D​","type":1,"pageTitle":"Overview","url":"/wljs-docs/frontend/Tutorial/Overview#graphics-2d--3d","content":" Most Mathematica's plotting functions produces lower-level primitives. The major part of them are supported    info Try to drag and pan using your mouse!    note Graphics elements are not exported SVG. All primitives are recreated using d3.js and THREE.js from scratch  ","version":null,"tagName":"h2"},{"title":"Other languages​","type":1,"pageTitle":"Overview","url":"/wljs-docs/frontend/Tutorial/Overview#other-languages","content":" Of course the notebook interface is impossible to use without text annotation, here you do not need to switch to a different cell type. To use you favorite (or not) Markdown type in the first line of a cell .md and magic happens    By clicking on an arrow on the right, you can hide the source cell and only the output will be displayed. An editor is very flexible you can quite easily add your custom output cell support.  Or combine WL together with Javascript to visualize your data in incredible way   ","version":null,"tagName":"h2"},{"title":"Input elements","type":0,"sectionRef":"#","url":"/wljs-docs/frontend/Tutorial/Input elements","content":"","keywords":"","version":null},{"title":"Basic usage​","type":1,"pageTitle":"Input elements","url":"/wljs-docs/frontend/Tutorial/Input elements#basic-usage","content":" ","version":null,"tagName":"h2"},{"title":"Range input​","type":1,"pageTitle":"Input elements","url":"/wljs-docs/frontend/Tutorial/Input elements#range-input","content":" A basic combo of a slider and numerical input field  range = InputRange[0, 10, 1, &quot;Label&quot;-&gt;&quot;Range&quot;] (Print[#] &amp;) // range;     It sends numerical values to the handler function.  ","version":null,"tagName":"h3"},{"title":"Text input​","type":1,"pageTitle":"Input elements","url":"/wljs-docs/frontend/Tutorial/Input elements#text-input","content":" Text input, that sends as a string to the kernel  text = InputText[&quot;Hi&quot;] (Print[#] &amp;) // text;     ","version":null,"tagName":"h3"},{"title":"Select​","type":1,"pageTitle":"Input elements","url":"/wljs-docs/frontend/Tutorial/Input elements#select","content":" 🚧 in dev  ","version":null,"tagName":"h3"},{"title":"Wolfram Language Input​","type":1,"pageTitle":"Input elements","url":"/wljs-docs/frontend/Tutorial/Input elements#wolfram-language-input","content":" Please, use EditorView  ","version":null,"tagName":"h3"},{"title":"Input Matrix​","type":1,"pageTitle":"Input elements","url":"/wljs-docs/frontend/Tutorial/Input elements#input-matrix","content":" Please, use Snippets and type insert matrix...  ","version":null,"tagName":"h3"},{"title":"Button​","type":1,"pageTitle":"Input elements","url":"/wljs-docs/frontend/Tutorial/Input elements#button","content":" button = InputButton[&quot;Click me&quot;] (Print[#] &amp;) // button;     On press it sends True to the handler  ","version":null,"tagName":"h3"},{"title":"View components usage​","type":1,"pageTitle":"Input elements","url":"/wljs-docs/frontend/Tutorial/Input elements#view-components-usage","content":" This is a bit more advanced, since it requires the manual creation of frontend objects.  ","version":null,"tagName":"h2"},{"title":"TextView​","type":1,"pageTitle":"Input elements","url":"/wljs-docs/frontend/Tutorial/Input elements#textview","content":" The most practical thing to use it as text display  text = &quot;dude&quot;; TextView[text // Offload]   The dynamic binding works as usual, if you change the variable text, the output will be updated.  Try to evaluate in the next cell  text = RandomWord[];   ","version":null,"tagName":"h3"},{"title":"Grouping​","type":1,"pageTitle":"Input elements","url":"/wljs-docs/frontend/Tutorial/Input elements#grouping","content":" One can group different inputs into a single event-object, that maintains the original structure  ","version":null,"tagName":"h2"},{"title":"Associations​","type":1,"pageTitle":"Input elements","url":"/wljs-docs/frontend/Tutorial/Input elements#associations","content":" group = InputGroup[&lt;| &quot;left&quot;-&gt;InputRange[0, 10, 1, &quot;Label&quot;-&gt;&quot;Range 1&quot;], &quot;right&quot;-&gt;InputRange[0, 10, 1, &quot;Label&quot;-&gt;&quot;Range 2&quot;] |&gt;] (Print[#]&amp;) // group;     On each update it generates the data for the handler function in a form  &lt;|&quot;left&quot;-&gt;5, &quot;right&quot;-&gt;7|&gt;   ","version":null,"tagName":"h3"},{"title":"Arrays​","type":1,"pageTitle":"Input elements","url":"/wljs-docs/frontend/Tutorial/Input elements#arrays","content":" group = InputGroup[{ InputRange[0, 10, 1, &quot;Label&quot;-&gt;&quot;Range 1&quot;], InputRange[0, 10, 1, &quot;Label&quot;-&gt;&quot;Range 2&quot;], InputText[&quot;Hi&quot;] }] (Print[#]&amp;) // group;     On each update it generates the data for the handler function in a form  {5, 7, &quot;Hi&quot;}  ","version":null,"tagName":"h3"},{"title":"Dynamics","type":0,"sectionRef":"#","url":"/wljs-docs/frontend/Tutorial/Dynamics","content":"","keywords":"","version":null},{"title":"Architecture​","type":1,"pageTitle":"Dynamics","url":"/wljs-docs/frontend/Tutorial/Dynamics#architecture","content":" All dynamics in terms of what you expect from Mathematica's experience happens on the frontend's side, i.e. in your browser.  Some expressions are meant for to be executed on frontend, i.e. not defined on the Kernel, then a user do not need to specify explicitly what and when should happen. In other cases, a user can use Offload attribute or CreateFrontEndObject to tell explicitly Wolfram Kernel pass an expression without evaluation to the frontend. Therefore one can play around with a way of splitting your code-base to archive the maximum flexibility and performance.  tip More about it here  tip Always keep in mind, which part of code executes on Wolfram Kernel (server) and what is delegated to the frontend (browser). This is the only way to write predictable and good performing code  ","version":null,"tagName":"h2"},{"title":"Automatic tracking of held symbols​","type":1,"pageTitle":"Dynamics","url":"/wljs-docs/frontend/Tutorial/Dynamics#automatic-tracking-of-held-symbols","content":" It does not mean, that your Set statements will be reevaluated on change of a nested symbol, however, for most graphics primitives it works out of the box. Use Offload wrapper to hold symbols for the frontend  length = 1; Graphics[{Cyan, Rectangle[{-1,-1}, {length // Offload, 1}] }]   info Offload just does a simple trick - provides to a frontend an unknown symbol, which forces frontend to fetch it from the Kernel. Once it fetched, a dynamic link would be created.  The binding itself happens between Rectangle and length, but not Graphics, therefore only partial reevaluation occurs. To know more about details see WLJS.  danger Not all functions support dynamic binding or updates. Please check Reference section, if the argument or a function supports dynamic updates.  ","version":null,"tagName":"h2"},{"title":"Event-based approach​","type":1,"pageTitle":"Dynamics","url":"/wljs-docs/frontend/Tutorial/Dynamics#event-based-approach","content":" Working with GUI elements standing for input is done in more controllable way, where each button or slider is an event-generator  slider = InputRange[-1,1,0.1, &quot;Label&quot;-&gt;&quot;Length&quot;] EventHandler[slider, Function[l, length = l]];   note A library that provides UI elements used is wljs-input. See dedicated docs of it.  Once event was fired, the assigned handler function will be called.    slider symbol is actually a special object, that stores the representation of a slider and an ID for the event, that will be fired when a user drags a knob.  🍪 Example 1​  Let us demonstrate how a wave packet travels though space and time  cell 1 packet[x_, t_] := Sum[Sin[- w t + w x], {w, 0,3,0.05}] / 10; line = Table[{x, packet[x, 0]}, {x, 0, 10, 0.1}]; Graphics[Line[line // Offload], Frame-&gt;True, FrameLabel-&gt;{{&quot;amplitude&quot;}, {&quot;distance&quot;}}]   here line symbol is dynamic. Now we need a slider to control time  cell 2 EventHandler[InputRange[0,5,0.5, 0], Function[t, line = Table[{x, packet[x, t]}, {x, 0, 10, 0.1}]; ]]   The desired result looks line this    ","version":null,"tagName":"h2"},{"title":"Event handlers for graphics primitives​","type":1,"pageTitle":"Dynamics","url":"/wljs-docs/frontend/Tutorial/Dynamics#event-handlers-for-graphics-primitives","content":" It looks similar to Mathematica's implementation, where one can add an event handler to a random graphics primitive  p = {0,0}; Graphics[{ White, EventHandler[ Rectangle[{-2,-2}, {2,2}], {&quot;mousemove&quot;-&gt;Function[xy, p = xy]} ], PointSize[0.05], Cyan, Point[p // Offload] }, TransitionDuration-&gt;40, TransitionType-&gt;&quot;Linear&quot;]   The following event are available  drag - provides a list of two coordinateszoom - provides one relative scaling numberclick - provides coordinates, where the cursor clickedmousemove - provides coordinates of a mousemouseover - provides coordinates once, when a mouse appears at a div  for 3D graphics the following events are provided  transform - sends an association with a new position of a dragged object  note Event handlers wrapped around graphics primitives are parts of wljs-graphics-d3 library.  🍪 Example 2​  Let us show a fun example - implementation of FABRIK solver.  Define a random chain of segments with a random fixed lengths  cell 1 chain = {Cos[#[[1]]], Sin[#[[2]]]}&amp;/@ RandomReal[{-1,1}, {65, 2}] // Sort; lengths = Norm /@ (chain // Reverse // Differences) // Reverse;   The most stupid and simple implementation of FABRIK  cell 2 fabrik[lengths_, target_, origin_] := Module[{buffer, prev}, buffer = Table[With[{p = chain[[-i]]}, If[i === 1, prev = target; target , prev = prev - Normalize[(prev - p)] lengths[[1-i]]; prev ] ], {i, chain // Length}] // Reverse; Table[With[{p = buffer[[i]]}, If[i === 1, prev = origin; origin , prev = prev - Normalize[(prev - p)] lengths[[i-1]]; prev ] ], {i, chain // Length}] ]   To show the result will will use a simple Line primitive coupled to a chain symbol and an inline event-handler coupled to a target point of a chain  cell 3 Graphics[{ Line[chain // Offload], Red, PointSize[0.06], EventHandler[Point[{-1,-1}], {&quot;drag&quot;-&gt;Function[xy, chain = fabrik[lengths, xy, chain // First]]}], Blue, Point[origin // Offload] }, PlotRange-&gt;{{-2,2}, {-2,2}}, ImageSize-&gt;500, TransitionType-&gt;&quot;Linear&quot;, TransitionDuration-&gt;30]   By dragging the red point you update all positions joints    use wheel to zoom and a left click to pan  info All examples shown here are shipped together with a frontend. Locate ","version":null,"tagName":"h3"},{"title":"Working with graphics","type":0,"sectionRef":"#","url":"/wljs-docs/interpreter/Basics/graphics","content":"","keywords":"","version":null},{"title":"Easy animations​","type":1,"pageTitle":"Working with graphics","url":"/wljs-docs/interpreter/Basics/graphics#easy-animations","content":" Since wljs-graphics-d3 provides transitions on update, it is extremely easy to make some complicated animations  data = RandomReal[{-1,1}, {400,2}]; FrontEndVirtual[{ AttachDOM[&quot;canvas&quot;]; Graphics[{RGBColor[1.0,0.,0.5], Point[data]}, &quot;TransitionDuration&quot;-&gt;0]; }]; Table[ data = (1 - t) RandomReal[{-1,1}, {400,2}] + t Table[{Sin[3i], Cos[2i]}, {i, 0, 6.28, 6.28/400}]; Pause[0.1]; , {t, 0, 1, 0.025}];   Each time we update data variable, the transition between frames happends automatically based on selected TransitionDuration       ","version":null,"tagName":"h2"},{"title":"Plot","type":0,"sectionRef":"#","url":"/wljs-docs/frontend/Reference/Plotting/Plot","content":"","keywords":"","version":null},{"title":"Options​","type":1,"pageTitle":"Plot","url":"/wljs-docs/frontend/Reference/Plotting/Plot#options","content":" ","version":null,"tagName":"h2"},{"title":"PlotStyle​","type":1,"pageTitle":"Plot","url":"/wljs-docs/frontend/Reference/Plotting/Plot#plotstyle","content":" Works as in Mathematica, i.e. per element in expr array, supports color, opacity and etc  Plot[Table[x^y, {y, 6}]//Evaluate, {x, 0,1}, PlotStyle-&gt;Table[Blend[{Red, Blue}, i/6], {i, 6}]]     ","version":null,"tagName":"h3"},{"title":"AxesLabel​","type":1,"pageTitle":"Plot","url":"/wljs-docs/frontend/Reference/Plotting/Plot#axeslabel","content":" Place labels on your axes  Plot[Sinc[x], {x, 0, 10}, AxesLabel -&gt; {&quot;x&quot;, &quot;Sinc[x]&quot;}]     Labels accepts only strings or numbers unlike Mathematica, where you can put everything.  Since it is translated into Text, one can use sort of TeX math input  Plot[PDF[NormalDistribution[0, 1], x], {x, -10, 10}, AxesLabel -&gt; {&quot;wavenumber (cm^{-1})&quot;, &quot;absorption \\\\alpha&quot;}, PlotRange-&gt;Full]     It also supports Offset attribute  Plot[PDF[NormalDistribution[0, 1], x], {x, -10, 10}, AxesLabel -&gt; {Offset[&quot;wavenumber (cm^{-1})&quot;, {0,0.05}], &quot;absorption \\\\alpha&quot;}, PlotRange-&gt;Full]     ","version":null,"tagName":"h3"},{"title":"Ticks​","type":1,"pageTitle":"Plot","url":"/wljs-docs/frontend/Reference/Plotting/Plot#ticks","content":" Customize ticks by providing an array of numbers for both axes  Plot[x, {x, 0, 1}, Ticks-&gt;{{0, 0.5, 1}, {}}]     Or by providing as pairs {Number, String} one can specify the displayed text  Plot[x, {x, 0, 1}, Ticks-&gt;{{{0, &quot;Zero&quot;}, {0.5, &quot;Half&quot;}, {1,&quot;One&quot;}}, {}}]     ","version":null,"tagName":"h3"},{"title":"Controls 💛​","type":1,"pageTitle":"Plot","url":"/wljs-docs/frontend/Reference/Plotting/Plot#controls-","content":" This is more an option for Graphics, but with a bit of a hacking it can be used here as well. The features allows to pan and zoom your plots, that was never possible in Mathematica  Plot[Sin[1/x], {x, 0.001, 0.1}, MaxRecursion-&gt;1]; Insert[%, Controls-&gt;True, {2,-1}]     Try to use your mouse here  ","version":null,"tagName":"h3"},{"title":"Frame​","type":1,"pageTitle":"Plot","url":"/wljs-docs/frontend/Reference/Plotting/Plot#frame","content":" Turns plot into the journals-like styled graph. In general it has much more options to customize the look  Plot[x, {x, 0, 1}, Frame-&gt;True]     FrameTicks​  The same as Ticks, but for this regime.  FrameLabels​  The same as AxesLabel  Plot[x, {x, 0, 1}, Frame-&gt;True, FrameLabel-&gt;{&quot;x-axis&quot;, &quot;y-axis&quot;}]     FrameStyle​  Affects the style of FrameLabels. Use Directive for changing the style  Plot[x, {x, 0, 1}, Frame-&gt;True, FrameLabel-&gt;{&quot;x-axis&quot;, &quot;y-axis&quot;}, FrameStyle-&gt;Directive[FontSize-&gt;16]]     FrameTicksStyle​  Affects the style of FrameTicks  Plot[x, {x, 0, 1}, Frame-&gt;True, FrameLabel-&gt;{&quot;x-axis&quot;, &quot;y-axis&quot;}, FrameTicksStyle-&gt;Directive[FontSize-&gt;16]]     TickLabels​  info Since Plot options are hardcoded in WL core, we cannot add new options, however using trick with Insert any values can be provided to the resulting Graphics expression  To remove unnecessary ticks, use  Plot[x, {x, 0, 1}, Frame-&gt;True]; Insert[%, &quot;TickLabels&quot;-&gt;{{True, False}, {True, False}}, {2,-1}]     ","version":null,"tagName":"h3"},{"title":"ClippingStyle​","type":1,"pageTitle":"Plot","url":"/wljs-docs/frontend/Reference/Plotting/Plot#clippingstyle","content":" Show the clipped regions like the rest of the curve and colored  Plot[Sin[x]/x^2, {x, -10, 10}, ClippingStyle -&gt; Red]     ","version":null,"tagName":"h3"},{"title":"Filling​","type":1,"pageTitle":"Plot","url":"/wljs-docs/frontend/Reference/Plotting/Plot#filling","content":" Fill the area under, over of between curves  Plot[Evaluate[Table[BesselJ[n, x], {n, 4}]], {x, 0, 10}, Filling -&gt; Axis]     Possible options will be  BottomTop{1 -&gt; {2}} from curve 1 to 2  ","version":null,"tagName":"h3"},{"title":"Baseline​","type":1,"pageTitle":"Plot","url":"/wljs-docs/frontend/Reference/Plotting/Plot#baseline","content":" Align graphs by the xxx axis in each plot:  {Plot[Im[Zeta[1/2 + I t]], {t, -20, 20}, BaselinePosition -&gt; Axis], Plot[Re[Zeta[1/2 + I t]], {t, -20, 20}, BaselinePosition -&gt; Axis]} // Row   ","version":null,"tagName":"h3"},{"title":"Epilog​","type":1,"pageTitle":"Plot","url":"/wljs-docs/frontend/Reference/Plotting/Plot#epilog","content":" Puts any graphics object on top of the data plotted  Plot[Sin[x], {x, 0, 2 Pi}, Epilog -&gt; {PointSize[0.04], Point[{0, 0}], Point[{Pi, 0}], Point[{2 Pi, 0}]}]     It opens up many possibilities, since it provides low-level access to the Graphics canvas.  ","version":null,"tagName":"h3"},{"title":"Prolog​","type":1,"pageTitle":"Plot","url":"/wljs-docs/frontend/Reference/Plotting/Plot#prolog","content":" The same as Epilog, but acts before plotting the data.  ","version":null,"tagName":"h3"},{"title":"ExclusionsStyle​","type":1,"pageTitle":"Plot","url":"/wljs-docs/frontend/Reference/Plotting/Plot#exclusionsstyle","content":" Use red lines to indicate the vertical asymptotes  Plot[Tan[x], {x, 0, 10}, Exclusions -&gt; {Cos[x] == 0}, ExclusionsStyle -&gt; Red]     ","version":null,"tagName":"h3"},{"title":"ImageSize​","type":1,"pageTitle":"Plot","url":"/wljs-docs/frontend/Reference/Plotting/Plot#imagesize","content":" A common option for any graphics  ImageSize -&gt; Width   or  ImageSize -&gt; {Width, Height}   It uses pixels as units  ","version":null,"tagName":"h3"},{"title":"MaxReqursion​","type":1,"pageTitle":"Plot","url":"/wljs-docs/frontend/Reference/Plotting/Plot#maxreqursion","content":" Affects the accuracy of the plot when it comes to the sudden changes of a sampled function  Plot[Sin[1/x], {x, 0.001, 0.1}, MaxRecursion-&gt;1]     The lowest values is 0  ","version":null,"tagName":"h3"},{"title":"Mesh​","type":1,"pageTitle":"Plot","url":"/wljs-docs/frontend/Reference/Plotting/Plot#mesh","content":" Shows sampling points  Plot[Sin[1/x], {x, 0.001, 0.1}, Mesh -&gt; All]     ","version":null,"tagName":"h3"},{"title":"PeformanceGoal​","type":1,"pageTitle":"Plot","url":"/wljs-docs/frontend/Reference/Plotting/Plot#peformancegoal","content":" Affects the number of sampling points to reduce the load  &quot;Speed&quot;&quot;Quality&quot;  ","version":null,"tagName":"h3"},{"title":"PlotPoints​","type":1,"pageTitle":"Plot","url":"/wljs-docs/frontend/Reference/Plotting/Plot#plotpoints","content":" Change the initial sampling points  a number  ","version":null,"tagName":"h3"},{"title":"PlotRange​","type":1,"pageTitle":"Plot","url":"/wljs-docs/frontend/Reference/Plotting/Plot#plotrange","content":" Change the lot range to show the whole area  Plot[Sqrt[x], {x, -5, 5}, PlotRange -&gt; Full]     Or a custom range  Plot[Sqrt[x], {x, -5, 5}, PlotRange -&gt; {{-5,5}, {0,1}}]     ","version":null,"tagName":"h3"},{"title":"RegionFunction​","type":1,"pageTitle":"Plot","url":"/wljs-docs/frontend/Reference/Plotting/Plot#regionfunction","content":" Show the specific area only  Plot[Sin[x], {x, 0, 8 Pi}, RegionFunction -&gt; Function[{x, y}, Abs[y] &gt; 0.5]]     ","version":null,"tagName":"h3"},{"title":"Axes​","type":1,"pageTitle":"Plot","url":"/wljs-docs/frontend/Reference/Plotting/Plot#axes","content":" caution Currently is not supported by Graphics ;(  Show or hide axes of the plot  Plot[Sinc[x], {x, 0, 10}, Axes -&gt; False]  ","version":null,"tagName":"h3"},{"title":"Meta markers","type":0,"sectionRef":"#","url":"/wljs-docs/interpreter/Advanced/meta-markers","content":"","keywords":"","version":null},{"title":"🎡 Example​","type":1,"pageTitle":"Meta markers","url":"/wljs-docs/interpreter/Advanced/meta-markers#-example","content":" Lets draw some random lines, where each line has a dynamic variable, that specifies the beginning, while the end will be a random fixed value  Details (* to be able to animate we need a container *) FrontEndVirtual[{ (* attach a dom element to draw *) AttachDOM[&quot;canvas&quot;], (* mark this instance by uid *) Graphics[{PointSize[0.02], MetaMarker[&quot;plot&quot;]}] }]; j = 0; (* now we can directly inject new points into already existing object *) last = {0,0}; While[j &lt; 300, With[{try = RandomReal[{- 1,1}, 2]}, FrontSubmit[{ RGBColor[RandomSample[{{1,0,0}, {0,1,1}, {1,0,1}}]//First], Line[{last, try}] }, MetaMarker[&quot;plot&quot;]]; last = try; ]; Pause[0.5]; j = j + 1; ]; As one can see, an expression inside Placed will be evaluated inside the instance found by the meta-marker. last variable is global, therefore it causes a dynamic update of all added lines.  This will lead to the following results       ","version":null,"tagName":"h3"},{"title":"Architecture of symbols","type":0,"sectionRef":"#","url":"/wljs-docs/interpreter/Advanced/architecture","content":"","keywords":"","version":null},{"title":"Features​","type":1,"pageTitle":"Architecture of symbols","url":"/wljs-docs/interpreter/Advanced/architecture#features","content":" Let us show the most essential parts  ","version":null,"tagName":"h2"},{"title":"Symbol definition​","type":1,"pageTitle":"Architecture of symbols","url":"/wljs-docs/interpreter/Advanced/architecture#symbol-definition","content":" In general the rule is  context.Symbol = async (arguments, env) =&gt; { //evaluating arguments const a = await interpretate(arguments[0], env); //body some calculations //may return or not return result; }   ","version":null,"tagName":"h3"},{"title":"Contexts​","type":1,"pageTitle":"Architecture of symbols","url":"/wljs-docs/interpreter/Advanced/architecture#contexts","content":" To prevent the mess of duplicated function names and etc, you can specify the context or let's say library of symbols using  var library = {}; interpretate.extendContext(library); library.Symbol = async (args, env) =&gt; {/*...*/}   The interpreter will check all available contexts and find the first match. However, you can prioritize the context providing the information in env object  core.GrandSymbol = async (args, env) =&gt; { const data = await interpretate(args, {...env, context: library}); //... }   More about env object is here Meta Data.  In the same manner, the separation between Line[] used in Graphics3D and in Graphics functions was made.  ","version":null,"tagName":"h3"},{"title":"External functions​","type":1,"pageTitle":"Architecture of symbols","url":"/wljs-docs/interpreter/Advanced/architecture#external--functions","content":" caution This feature is still in development  If the called expression was not found in all available contexts, the interpreter will extend core with a server-call, i.e. will ask kernel to evaluate the unknown symbol and return back the result.  By the default, those special missing expressions becomes in the end virtual containers and can call update method on other containerized functions.  See executables and Sub symbols for more information about methods and etc.  ","version":null,"tagName":"h3"},{"title":"Metadata​","type":1,"pageTitle":"Architecture of symbols","url":"/wljs-docs/interpreter/Advanced/architecture#metadata","content":" To share some data between functions, to use local and global memory of the executable objects, specifying methods of evaluation and DOM access the following object is provided  env = { element: document.element, /* a Code Mirror widget */ context: core, /* default context */ /* subsymbol */ method: undefined | 'update' | 'destory', /* global and local memory of front-end objects*/ local: {}, global: {call: uid}, numerical: false, /* keep symbolic or not */ hold: false /* keep exps in a List and JS Objects */ unsafe: false /* allows to ask Wolfram Kernel for undefined symbols */ novirtual: false /* prevents creatation of virtual containers (all functions inside are executed normally) */ /* anything you want to share */ root: ExecutableObject/* a reference to the FrontEndObject container */ ... //anything else you want }   local and global cannot be deeply-copied, therefore they will be the same for all nested expressions if the expression is containerized (frontend object or virtual), then local will be overridden.  Ones, which ave the most influence to the process of interpreting, are  context - prioritizes the context to fetch, the symbol to evaluate. See section Contextsmethod - it is meant to specify a sub-symbol for the whole three of WL expression (or in practice so-called method of interpreting)  Methods | Sub-symbols​  undefined (leave empty)update - usually called when the sub-expression was updateddestroy - used only on the wolfram frontend, when the widget was removed  The following sub-symbols can be defined as  core.MySymbol = (args, env) =&gt; {} core.MySymbol.update = (args, env) =&gt; {} core.MySymbol.destory = (args, env) =&gt; {}   You can think about it if it was a class definition with a constructor and several methods.  tip It is good to declare update method for your function, even if you do not plan to use it explicitly, define core.MySymbol.update = core.MySymbol  For the sake of performance, when something changes with the data inside the plot, there is no need to reevaluate the whole tree of WL expressions. Therefore, we can specify the method of reevaluation  //to create a plot core.ListLinePlotly = (args, env) =&gt; { ... Plotly.newPlot(env.element, data) } //to update only the data core.ListLinePlotly.update = (args, env) =&gt; { ... Plotly.restyle(env.element, newdata) }   When a nested expression was changed, the nearest parent can be called using update method like on a picture    In principle, interpreter has no idea about what update and etc means, one can write any &quot;method&quot;, which is basically just a sub-symbol.  For Graphics3D object is crucial to use destroy method, when object has removed from the editor, since it is necessary to remove the animation cycle  core.Graphics3D.destroy = (args, env) =&gt; { cancelAnimationFrame(env.local.aid); //to cancel the animation }   DOM​  When the WL expressing is called via FrontEndVirtual on editor's side it creates local memory and unique identifier, where one can attach DOM element using  AttachDOM[&quot;dom-element-id&quot;]   which is accessible by env.element field  core.Canvas = (args, env) =&gt; { const canvas = document.createElement('canvas'); env.element.append(canvas); //.... }   Global and local memory​  env.global is visible to all containers and its inner WL expressions, where env.global.stack contains the call-treeenv.local is isolated memory related to individual executable functions, i.e. real or virtual containers.  core.MyFunction = (args, env) =&gt; { env.local = {} //pointer to the local memory of the instance env.global = {} //pointer to the global memory of the call tree env //sharable memory }  ","version":null,"tagName":"h3"},{"title":"Syntax","type":0,"sectionRef":"#","url":"/wljs-docs/interpreter/Basics/syntax","content":"","keywords":"","version":null},{"title":"Libraries​","type":1,"pageTitle":"Syntax","url":"/wljs-docs/interpreter/Basics/syntax#libraries","content":" The interpreter provides only the minimum-necessary set of functions, to bring Graphics and Graphics3D (or if you are using Wolfram JS Frontend you need set of sliders and other building blocks for GUI) you should consider to use it together with the following packages  wljs-graphics-d3 (see Docs here)wljs-graphics3d-threejs (see Docs here)  Just simply include dist/kernel.js file into the web-page as a module using CDN  &lt;script type=&quot;module&quot; src=&quot;https://cdn.statically.io/gh/JerryI/wljs-interpreter/main/src/interpreter.js&quot;&gt;&lt;/script&gt;  ","version":null,"tagName":"h2"},{"title":"Reference","type":0,"sectionRef":"#","url":"/wljs-docs/interpreter/Extras/reference","content":"Reference Please see interpretate and other pages there","keywords":"","version":null},{"title":"Promise","type":0,"sectionRef":"#","url":"/wljs-docs/Reference/Misc/Promise","content":"Promise","keywords":"","version":null},{"title":"Symbols and expressions","type":0,"sectionRef":"#","url":"/wljs-docs/interpreter/Basics/scripts","content":"","keywords":"","version":null},{"title":"Limitations​","type":1,"pageTitle":"Symbols and expressions","url":"/wljs-docs/interpreter/Basics/scripts#limitations","content":" no pattern matching possibleno symbolic computationsUpValue, DownValue are not supportedno WL function definition is possible (for now)most WL Kernel functions are not implemented  Despite the fact of those limitations, WLJS intepreter together with graphics extensions can interpret results produced by Wolfram Engine / Mathematica and also is feasible for some simple standalone calculations.  The biggest advantage compared to the original Wolfram Kernel is a native integration with Javascript ecosystem, since it is capable to read, write and execute Javascript functions and objects with no overhead complexity under the hood.  ","version":null,"tagName":"h2"},{"title":"Implicit data-binding​","type":1,"pageTitle":"Symbols and expressions","url":"/wljs-docs/interpreter/Basics/scripts#implicit-data-binding","content":" By the default all defined symbols can be considered as Dynamic in terms of Wolfram Mathematica. For example, when you define a variable  a = 1;   it extends the default context core with a corresponding symbol with a virtual attribute. It means, if this one enters the any other expressions that support updates  (* to be able to manipulate DOM elements, we need container *) FrontEndVirtual[{ (* attach a dom element to draw by ID *) AttachDOM[&quot;canvas&quot;], (* our graphics *) Graphics[{PointSize[0.1], RGBColor[{1.,1.,0}], Point[{a,0}]}] }];   It creates a special object called Virtual Container, that has its identity, local memory and can be connected to a chain to other functions. More about it you can read in the Advanced guide. As well as all functions, which use DOM elements to draw need to be executed inside FrontEndVirtual.  Then if one change the variable later  a = -1;   it will trigger the cascade of update in all expressions, where it is used.        ","version":null,"tagName":"h2"},{"title":"Containers and DOM structure​","type":1,"pageTitle":"Symbols and expressions","url":"/wljs-docs/interpreter/Basics/scripts#containers-and-dom-structure","content":" Manipulation with DOM is better to do using pure JS functions, however if one needs only to attach a specific graphical element generated by Wolfram Language a procedure AttachDOM[&quot;element-id&quot;] is provided.  Since Graphics or Graphics3D has its own local scope to store event handlers, which are necessary to manipulate with plots, you need to execute them inside so-called container (virtual container)  FrontEndVirtual[{ ... }]   For each call of FrontEndVirtual a local memory and id is created, therefore Graphics can use it to store its data and have an access to DOM elements attached by AttachDOM.  For example one can create an HTML structure  &lt;div id=&quot;left&quot; style=&quot;display:inline-block&quot;&gt;&lt;/div&gt; &lt;div id=&quot;right&quot; style=&quot;display:inline-block&quot;&gt;&lt;/div&gt;   and attach different graphics elements to is  a = 1; FrontEndVirtual[{ (* attach a dom element to draw *) AttachDOM[&quot;left&quot;], (* our graphics *) Graphics[{PointSize[0.1], RGBColor[{1.,1.,0}], Point[{a,0}]}, ImageSize-&gt;{200,100}] }]; FrontEndVirtual[{ (* attach a dom element to draw *) AttachDOM[&quot;right&quot;], (* our graphics *) Graphics[{PointSize[0.1], RGBColor[{1.,0.,1.}], Point[{-a,0}]}, ImageSize-&gt;{200,100}] }];   Both plots will be updated independently   ","version":null,"tagName":"h2"},{"title":"Minimal Wolfram Language Interpreter","type":0,"sectionRef":"#","url":"/wljs-docs/interpreter/intro","content":"","keywords":"","version":null},{"title":"Quick start​","type":1,"pageTitle":"Minimal Wolfram Language Interpreter","url":"/wljs-docs/interpreter/intro#quick-start","content":" To run a sandbox you need to have only wolframscript, nodejs and any modern browser installed  caution Wolfram Kernel only runs HTTP server and provides the transpiling from WL language syntax to JSON representation, since there is no freeware WL parser on the internet so far. All computations happens inside your browser  git clone https://github.com/JerryI/wolfram-js-frontend cd wljs-interpreter npm i npm start wolframscript -f transpile.wls   A page similar to one at the top will pop up (with a boat). Then you can freely edit the code and any changes will be shown on the right.  ","version":null,"tagName":"h2"},{"title":"Using as a standalone interpreter​","type":1,"pageTitle":"Minimal Wolfram Language Interpreter","url":"/wljs-docs/interpreter/intro#using-as-a-standalone-interpreter","content":" Load as a script to the HTML page using CDN. The core components is less than 10kb  &lt;script type=&quot;module&quot; src=&quot;https://cdn.statically.io/gh/JerryI/wljs-interpreter/main/src/interpreter.js&quot;&gt;&lt;/script&gt; &lt;script type=&quot;module&quot; src=&quot;https://cdn.statically.io/gh/JerryI/wljs-interpreter/main/src/core.js&quot;&gt;&lt;/script&gt;   To run the code it uses JSON format to represent WL expressions  interpretate([&quot;Print&quot;, &quot;'Hello World!'&quot;], {})   You have an access to global context using core object. The list of defined functions can be seen by calling core in the browser's console.  The core context can be expanded by simply putting this core in any place in the page. No class definition of imports are needed  window.onload = () =&gt; { core.MyFunction = async (args, env) { alert('Called! with ' + args[0]); } }   The wrapper onload is only needed to make sure that the page with all scripts was fully loaded. Then you can call it naturally  interpretate([&quot;MyFunction&quot;, &quot;'whatever'&quot;], {})   ","version":null,"tagName":"h3"},{"title":"Extensions​","type":1,"pageTitle":"Minimal Wolfram Language Interpreter","url":"/wljs-docs/interpreter/intro#extensions","content":" The interpreter provides only the minimum-necessary set of functions, to bring Graphics and Graphics3D (or if you are using Wolfram JS Frontend you need set of sliders and other building blocks for GUI) you should consider to use it together with the following packages  wljs-graphics-d3 (see Docs here)wljs-graphics3d-threejs (see Docs here)  Just simply include dist/kernel.js file into the web-page as a module using CDN (JSDelivr, StaticIO). Some of build-in examples already uses those packages. NO installation needed.  ","version":null,"tagName":"h2"},{"title":"Applications​","type":1,"pageTitle":"Minimal Wolfram Language Interpreter","url":"/wljs-docs/interpreter/intro#applications","content":" The animation running on Wolfram Conference St. Piter 2023 website was made using this interpreter. The overall overhead for Javascript engine is relatively small, since it relies on the plain JS objects as an internal data structure.  In a combination with web sockets a web platform for processing and storing experimental data from THz spectrometers was made in Augsburg University (link is not available, since this is internal application).    ","version":null,"tagName":"h3"},{"title":"Partial support of the native WL expressions​","type":1,"pageTitle":"Minimal Wolfram Language Interpreter","url":"/wljs-docs/interpreter/intro#partial-support-of-the-native-wl-expressions","content":" There is no aim to recreate all Wolfram Language functions, you can think about this interpreter more like as a bridge between Javascript ecosystem and Wolfram Language. The interpreter can easily be expanded via packages or explicitly defined functions inside the HTML page. One can write your own symbols based on the application you have.  To help maintain this project  kirill.vasin@uni-a.de PayPal  Thank you 🍺 ","version":null,"tagName":"h2"},{"title":"Javascript integration","type":0,"sectionRef":"#","url":"/wljs-docs/interpreter/Basics/js-access","content":"","keywords":"","version":null},{"title":"Reading objects​","type":1,"pageTitle":"Javascript integration","url":"/wljs-docs/interpreter/Basics/js-access#reading-objects","content":" Let us define some variable on the page  var variable = Array.apply(null, Array(100)).map(function (_, i) {return [i/100.0 - 1, Math.sin(i/6.28)];});   or if you want to isolate it as a module (it is better, since it execute the script in the right sequence and prevents the early evaluation of the next included file)  &lt;script type=&quot;module&quot;&gt; window.variable = ... &lt;/script&gt;   tip Always put your scripts into &lt;script type=&quot;module&quot;&gt; tag, since it guarantees that the sequence of executing of those scripts (as they appear in HTML document) will be preserved  All functions of WLJS intepreter must return a javascript primitive data type, therefore it is possible to assign it to a WL symbol directly using WindowScope  v = WindowScope[&quot;variable&quot;];   Then we can plot this array as if it was a List  FrontEndVirtual[{ (* attach a dom element to draw *) AttachDOM[&quot;canvas&quot;], (* our graphics *) Graphics[{RGBColor[1.0,1.0,0], Line[v]}, ImageSize-&gt;{400,200}] }]         ","version":null,"tagName":"h2"},{"title":"Calling functions​","type":1,"pageTitle":"Javascript integration","url":"/wljs-docs/interpreter/Basics/js-access#calling-functions","content":" In principle in the this manner the whole WLJS interpeter including all libraries was made. Anything even simple like List, Times are Javascript functions defined as  core.Function = async (args, env) =&gt; { //executing arguments const arg1 = await interpretate(args[0], copy); const arg2 = await interpretate(args[1], copy); //... //computing something //return the result return result; };   tip Please, see Advanced section for more information about it  🎡 Let us show you a fancy example.  Details This is an adaptation of @valnub animation. Here is a Javascript function, that creates a bunch of rectangles and animate them according to their speed and position const canvas = document.createElement('canvas'); canvas.width = 600; canvas.height = 400; const context = canvas.getContext('2d'); const particles = []; function random (min, max) { return Math.random() * (max - min) + min; } //function definition core.Draw = async (args, env) =&gt; { //position const c = await interpretate(args[0], env); //velocity const v = await interpretate(args[1], env); const particle = { x: c[0], y: c[1], xvel: v[0], yvel: v[1], color: `rgba(${random(0, 255)}, ${random(0, 255)}, ${random(0, 255)})`, size: 7, }; particles.push(particle); if (particles.length &gt; 200) { particles.shift(); } context.clearRect(0, 0, canvas.width, canvas.height); for (let i = 0; i &lt; particles.length; i += 1){ const p = particles[i]; context.fillStyle = p.color; context.fillRect(p.x, p.y, p.size, p.size); p.x += p.xvel; p.y -= p.yvel; } }; return canvas; This code is applicable for WLJS Playground (see Quick start), if you want to run it in a custom environment, you would need to put in inside a module and replace the last line with &lt;script type=&quot;module&quot;&gt; ... //return canvas; document.body.appendChild(canvas); &lt;/script&gt; Then we can run WL script and call it directly While[True, Draw[{RandomReal[{0,600}],RandomReal[{0,400}]}, RandomReal[{2,-2},2]]; Pause[0.05]; ] WLJS interpreter looks for the particular name Draw in the core context and pass evaluated arguments to it    🎡 One can go event further and plot something more interesting  Details x = 0; y = 0; While[True, Draw[{x, y}, RandomReal[{2,-2},2]]; y = 49 (1 + Sin[x/(10)]); x = x + 1; If[x &gt; 599, x = 0]; Pause[0.01]; ]     🎡 Or we can also change the way how it is drawn to  Details data = Table[{i, 15 + 30 (1 + Sin[i/(20)])}, {i, 1, 599,10}]; While[True, Table[ Draw[i, RandomReal[{0.1,-0.1},2]]; , {i, data}]; Pause[0.02]; ];     ","version":null,"tagName":"h2"},{"title":"Event-based approach​","type":1,"pageTitle":"Javascript integration","url":"/wljs-docs/interpreter/Basics/js-access#event-based-approach","content":" caution This section is in development ","version":null,"tagName":"h2"},{"title":"How it works","type":0,"sectionRef":"#","url":"/wljs-docs/interpreter/Extras/implementation","content":"","keywords":"","version":null},{"title":"The idea​","type":1,"pageTitle":"How it works","url":"/wljs-docs/interpreter/Extras/implementation#the-idea","content":" Originally it was done as a sort of utility to parse Graphics3D objects and recreate them as a set of commands of ThreeJS - a JS graphics library. Have a look at this example  SphericalPlot3D[1, {t, 0, Pi}, {p, 0, 2 Pi}] // InputForm   it produces the following output  Graphics3D[{ GraphicsComplex[{{1,0,0}, ...}, { ... Polygon[{{2, 1, 11, 12}, ...}}] }]   where, in principle it tells us that one should plot polygons using the set of 4 vertices indexed as 2,1,11,12 with absolute coordinates stored in an array located in the first argument of GraphicsComplex.  ","version":null,"tagName":"h2"},{"title":"Internal representaion​","type":1,"pageTitle":"How it works","url":"/wljs-docs/interpreter/Extras/implementation#internal-representaion","content":" A good hint how the internal data structure looks like can be seen in Compress. See also mma-uncompress.  ","version":null,"tagName":"h3"},{"title":"Parser​","type":1,"pageTitle":"How it works","url":"/wljs-docs/interpreter/Extras/implementation#parser","content":" Taking advantage of the standart library packed with Wolfram Kernel we can use directly a ExportString function  ExportString[%, &quot;ExpressionJSON&quot;]   [ &quot;Graphics3D&quot;, [ &quot;List&quot;, [ &quot;List&quot;, [ &quot;GraphicsComplex&quot;, [ &quot;List&quot;, [ &quot;List&quot;, 0.0, 0.0, 1.0 ] ,   In principle it can convert an arbitary WL expression without loosing any data. Which is acually much faster, than ToString method  test = SphericalPlot3D[Sin[t] Cos[p]^6, {t, 0, Pi}, {p, 0, 2 Pi}][[1]]; ((s = ExportString[test, &quot;ExpressionJSON&quot;]) // RepeatedTiming)[[1]] ((s = ToString[test]) // RepeatedTiming)[[1]] &gt; 0.03471 &gt; 0.16478   that gives us a clue, where the internal Mathematica's expressions representation might be a sort of ExpressionJSON like structure  (a+b)[[0]] === Plus   i.e., the structure is following  this.name = expr[0] this.args = expr.slice(1, expr.length)   Then it looks relatively easy to use it for calling a defined function  var core = {}; var interpretate = (d, env) =&gt; { if (typeof d === 'string') return d.slice(1, -1); if (typeof d === 'number') return d; this.name = d[0]; this.args = d.slice(1, d.length); return core[this.name](this.args, env); }   threfore one can define a minimal set of functions to serve WL expressions like lists, colors, and etc...  core.List = (args, env) =&gt; { const copy = {..env}; const list = []; for (let i = 0, len = args.length; i &lt; args.length; i++) { list.push(interpretate(args[i], copy)); } return list; };   core.RGBColor = (args, env) =&gt; { const r = interpretate(args[0], env); const g = interpretate(args[1], env); const b = interpretate(args[2], env); env.color = new three.Color(r, g, b); };   The second argument env is a mutable object, which stores information to be shared with other WL expressions, for example color  {Blue, {Red, Sphere[] (*RED*)}, Cuboid[] (*BLUE*)}   Here you can see, that env can be localized (a deep copy) inside List expression.  ","version":null,"tagName":"h3"},{"title":"Generalization​","type":1,"pageTitle":"How it works","url":"/wljs-docs/interpreter/Extras/implementation#generalization","content":" For me as a maintener of this project @JerryI, the idea of bridging JS and Wolfram Language was very insiprational. Especcially, when I discovered how flexible and easy was the writting static and dynamic web-pages using Wolfram Language - TinyWEB &amp; WSP.  The reasonsomewhere on HTML page  &lt;input type=&quot;text&quot; id=&quot;form&quot; value=&quot;Hello!&quot;&gt; &lt;script&gt; core.UpdateText = (args, env) =&gt; { const i = interpretate(args[0], env); document.getElementById('form').value = i; } &lt;/script&gt;   somewhere in WL  WebSocketBroadcast[server, UpdateText[RandomWord[]]]   using websockets to link Wolfram Kernel and a page in realtime the intergration looks seamless. In principle, the API and all UI functions are implemented in a such way on the present version of Wolfram JS Frontend.  In the present version the interpreter looks a bit more complex, however the ideas are the same. ","version":null,"tagName":"h2"},{"title":"Definitions","type":0,"sectionRef":"#","url":"/wljs-docs/interpreter/Advanced/symbols","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"Definitions","url":"/wljs-docs/interpreter/Advanced/symbols#functions","content":" Let's talk about how to define a function properly  note In wolfram language terms, there is no difference between function and a symbol. These are all expressions. However, here WLJS only mimics WL language paradigm, therefore here we distinguish function and a variable.  ","version":null,"tagName":"h2"},{"title":"Direct call​","type":1,"pageTitle":"Definitions","url":"/wljs-docs/interpreter/Advanced/symbols#direct-call","content":" The simplest way of calling a defined function  MyFunction[data]   note ❗️ no local memory, no identity ❗️ not possible to dynamically update ✅ the fastest and memory friendly way    A called function has no persistent memory except from the env variable, which can share the data with other functions from the sub-tree - see more in architecture (Meta Data).  Somewhere in Javascript code there will be  core.MyFunction = async (args, env) =&gt; {...}   An update method is good to define as well, therefore a function can be used together with updatable object called somewhere in the tree  core.MyFunction.update = core.MyFunction core.MyFunction.destroy = core.MyFunction   Since there is no identity of a function, there is no need to define a different function for update and destroy.  tip Any defined functions must return javascript object or nothing  While in the arguments args it is always Wolfram Expression, therefore interpretate is always called on them to convert anything into javascript data type.  🎡 Example 1​  Let us write some cellular automatic machine starting from Javascript code  Details //create js canvas const canvas = document.createElement(&quot;canvas&quot;); canvas.width = 400; canvas.height = 100; let context = canvas.getContext(&quot;2d&quot;); //a function to draw on it core.MyFunction = async (args, env) =&gt; { const data = await interpretate(args[0], env); //draw our boxes for(let i=0; i&lt;40; ++i) { for (let j=0; j&lt;10; ++j) { //new pixels if (data[i][j] &gt; 0) { context.fillStyle = &quot;rgba(255,0,0,0.4)&quot;; context.fillRect(i*10 + 1, j*10 + 1, 8, 8); } else { context.fillStyle = &quot;rgba(255,255,255,0.4)&quot;; context.fillRect(i*10 + 1, j*10 + 1, 8, 8); } } } } return canvas Now we can animate it in a loop using the simplest rule data = RandomReal[{-1,1}, {40,10}]; While[True, data = Table[ If[(data[[i]][[If[j+1&gt;10,1,j+1]]] + data[[If[i+1&gt;40,1,i+1]]][[j]] + data[[If[i-1&lt;1,40,i-1 ]]][[j]] + data[[i]][[If[j-1&lt;1,10,j-1 ]]]) &gt; 0.5, 1, RandomReal[{-1,0}]] , {i,1, 40}, {j,1,10}]; Pause[0.05]; MyFunction[data]; ];   The result will look like        ","version":null,"tagName":"h3"},{"title":"Virtual container​","type":1,"pageTitle":"Definitions","url":"/wljs-docs/interpreter/Advanced/symbols#virtual-container","content":" Things are getting interesting, if one need to store some additional information for the individual instance of the function and bind it to other objects for dynamics.  FrontEndVirtual[{ MyFunction[data] }]   note ✅ local memory and identity ✅ possible to dynamically update and bind ❗️ each time creates new instance  See an example on a picture    danger Do not put FrontEndVirtual into the loops like While, it will cause memory leakage!  Now an interpreter can bind the inner objects or outer to our function, can forms a chain, that will be used for updates. For example  data = 1; FrontEndVirtual[{ MyFunction[data] }]; Pause[1]; data = 10;   Here as one can see, we use defined symbol data, that by default has Auto-virtual container type, therefore on each call it also create an instance like FrontEndVirtual implicitly and binds to the parent container (no matter how far is it in the call tree).  Now let us write a simple function, that uses local memory and update method.  core.MyFunction = async (args, env) =&gt; { const data = await interpretate(args[0], env); console.log('created!'); console.log(data); //store the data into local storage env.local.data = data; }   core.MyFunction.update = async (args, env) =&gt; { const newdata = await interpretate(args[0], env); console.log('updated!'); console.log(newdata); //apply some math for fun env.local.data += newdata; console.log('result: '+env.local.data); }   On each update, this function will print the result of accumulated data.  ","version":null,"tagName":"h3"},{"title":"Auto-virtual container​","type":1,"pageTitle":"Definitions","url":"/wljs-docs/interpreter/Advanced/symbols#auto-virtual-container","content":" This process can be simplified if we use automatic detection  MyFunction[data]   where somewhere in Javascript it is defined as  core.MyFunction.virtual = true   note ✅ local memory and identity ✅ possible to dynamically update and bind ❗️ each time creates new instance  The result will be the same as in Virtual container, but it is implicitly done by the interpreter.  🎡 Example 2​  Let us simplify the code from the previous example. Firstly we need to define update method for the function we have  Details add a few lines core.MyFunction.update = core.MyFunction; core.MyFunction.virtual = true Now we can work with in a much prettier way data = RandomReal[{-1,1}, {40,10}]; MyFunction[data]; While[True, data = Table[ If[(data[[i]][[If[j+1&gt;10,1,j+1]]] + data[[If[i+1&gt;40,1,i+1]]][[j]] + data[[If[i-1&lt;1,40,i-1 ]]][[j]] + data[[i]][[If[j-1&lt;1,10,j-1 ]]]) &gt; 0.5, 1, RandomReal[{-1,0}]] , {i,1, 40}, {j,1,10}]; Pause[0.05]; ];   ","version":null,"tagName":"h3"},{"title":"Container with a storage​","type":1,"pageTitle":"Definitions","url":"/wljs-docs/interpreter/Advanced/symbols#container-with-a-storage","content":" This way is usually used for all objects in cells of Wolfram Frontend and is not really useful, when you use WLJS as a standalone thing. Firstly you need to create a container or object, populate it with data and execute it  CreateFrontEndObject[MyFunction[data], &quot;obj&quot;]; FrontEndExecutable[&quot;obj&quot;]   note ✅ local memory and identity ✅ possible to dynamically update and bind ✅ expression is stored inside the object's storage ❗️ each time creates new instance on FrontEndExecutable call, that has a reference to the same object  info All instances of obj refer to the same storage  An update can be caused in two scenarios  Storage was changed​  To mutate the container's storage, one can simple use  SetFrontEndObject[&quot;obj&quot;, MyFunction[data2]]   But this is not great implementation, since we basically send the same function, but with an arguments. However it will cause MyFunction.update method called on each instance, that we created using FrontEndExecutable expression.  Subexpressions was updated​  Sub-expression has to be also a container, in order to be able to bind updates to that. Let us show you an example  CreateFrontEndObject[{1,2,3}, &quot;var&quot;]; CreateFrontEndObject[MyFunction[FrontEndExecutable[&quot;var&quot;]], &quot;obj&quot;]; FrontEndExecutable[&quot;obj&quot;];   The last line will create an instance of our MyFunction container. To trigger an update, one can update this expression via  SetFrontEndObject[&quot;var&quot;, {3,4,5}];   It can be illustrated as following    Details Details on garbage collectorNormal containers are the only species, that can be destroyed properly. Because they are explicitly bounded to the corresponding widget. Since virtual functions and nested objects creates each time new identity, there is no way on how to clean them up using destory method on a tree. However, they are still presented in a stack call, stored in env.global.stack. Therefore, one can remove them by going through the stack and calling dispose method.  ","version":null,"tagName":"h3"},{"title":"Variables​","type":1,"pageTitle":"Definitions","url":"/wljs-docs/interpreter/Advanced/symbols#variables","content":" All variables or (expressions with only own-values) has virtual type by default, i.e.they are executed in a virtual containers  a = 4;   It extends core context with a symbol a, that has property  core.a.virtual = true //what actually happends   Therefore, if it enters any container as a sub-expression, it will bind to the container.  note ✅ local memory and identity ✅ possible to dynamically update and bind ❗️ each time creates new instance   Set operation scans this symbol in the core context, and if it exists, update method will be called with bubbling up to the nearest linked container  i.e,  a = 4; FrontEndVirtual[{ MyFunction[a] (* BINDED *) }] (*. ^ *) (* | *) a = 5; (* UPDATE | *)   The last line will cause an update of MyFunction.  ","version":null,"tagName":"h2"},{"title":"Conditions, when an instance will be created or not​","type":1,"pageTitle":"Definitions","url":"/wljs-docs/interpreter/Advanced/symbols#conditions-when-an-instance-will-be-created-or-not","content":" a = 4;   note ❗️ for the first time, there is no instance created, only core.a  a = a + 1;   note ❗️ set operation blocks instance creating for a symbol ✅ set operation causes update on the binded containers  While[True, MyFunction[a] (* NO DYNAMIC LINK CREATED *) ]   note ❗️ while operation blocks instance creating to prevent memory leakage  MyFunction[a] (* DYNAMIC LINK CREATED *)   note ✅ a now is possibly binded to MyFunction, if the last one is a virtual container  data = Table[b[[i]] + b[[i+1]], {i,1,Length[b]-1}];   note ❗️ Set blocks instance creating, no dynamic binding possible  For example, when we plot graphics, by default Line, Point and etc has virtual type  Graphics[ Table[Line[b[[i]]], {i, Length[b]}] ] //FrontEndVirtual   note ✅ multiple instances of b were created and binded to Line  So this binding happends only between Line and b[[i]], no Graphics function is involved.  🎡 Example 3​  Lines  Details a = Table[{{0,0}, RandomReal[{-1,1}, 2]}, {i, 100}]; FrontEndVirtual[{ AttachDOM[&quot;canvas&quot;]; Graphics[{RGBColor[0.0,1.0,1.0], Table[Line[a[[i]]], {i, Length[a]}]}]; }]; (* mix them up *) a = RandomSample[a];    ","version":null,"tagName":"h3"},{"title":"Text Elements","type":0,"sectionRef":"#","url":"/wljs-docs/imgs/manipulate-frontend-example.excalidraw","content":"==⚠ Switch to EXCALIDRAW VIEW in the MORE OPTIONS menu of this document. ⚠== Text Elements core.Panel ^8bS55RJK core.FrontEndExecutable ^VIjBeIiE core.FrontEndExecutable ^TmkPzj8K core.FrontEndExecutable ^60yunpoH core.WEBSlider ^d4rlJmzn core.ListLinePlotly ^NY5DqXU6 core.FrontEndExecutable ^a0WKvxZj DOM ^OhkZA8MM DOM ^CO0aOvLH DOM ^UrcTqLkp on-change ^p9p8vLUr Server/Client storage ^AffgwkDZ core.WEBSlider ^It7nVsB0 raw data ^DUmWkMn1 core.ListLinePlotly ^ZTlcBkhf core.Panel ^Bf50KwhU ref ^o3Op3sUd ref ^izQ9X8ro ref ^gsIZtc6Q ref ^VzutkUlD ref ^PSJJK3sL ref ^tNKddouz ref ^w8HOq8iI Enter Point ^D5KrzAAX CodeMirror Decorations ^FKOmrwK3 new ^0WLjRWTt new ^bhOAK4er new ^SV3jDjc1 Reactive link ^10Ix4C3t emitt ^atDn5LMb core.FireEvent ^DbsVOSuW WL Kernel ^DMyf6AUs core.SetFrontEndObject ^N1uZwhqp SendToFrontEnd ^2MLuTwha update value ^8gpechRF automatically created between two FrontEndExecutables ^fe7yX11l EmittedEvent[uid, data] ^R7bFVCI3 only nested. bubble-like connection ^UCs9wb4P %% Drawing { &quot;type&quot;: &quot;excalidraw&quot;, &quot;version&quot;: 2, &quot;source&quot;: &quot;https://excalidraw.com&quot;, &quot;elements&quot;: [ { &quot;type&quot;: &quot;rectangle&quot;, &quot;version&quot;: 202, &quot;versionNonce&quot;: 221485074, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;gBwy1ZC1BSlRVrwsrltpx&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: -158.94720023018965, &quot;y&quot;: -213.21268572126115, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;#ced4da&quot;, &quot;width&quot;: 293.7135503859746, &quot;height&quot;: 362.1932663690476, &quot;seed&quot;: 1526142674, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1678310769982, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;type&quot;: &quot;rectangle&quot;, &quot;version&quot;: 331, &quot;versionNonce&quot;: 1132407310, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;IpBIAaOgsaY3jTYeHXNey&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: -132.2182791573661, &quot;y&quot;: -149.98265584309894, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;#ffff&quot;, &quot;width&quot;: 232.96369280133928, &quot;height&quot;: 83.80490257626491, &quot;seed&quot;: 1990084946, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1678310769982, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;type&quot;: &quot;rectangle&quot;, &quot;version&quot;: 503, &quot;versionNonce&quot;: 384484818, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;p14toTySE1VSGpqGqEipT&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: -132.36078171502973, &quot;y&quot;: -33.38950747535347, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;#ffffffff&quot;, &quot;width&quot;: 232.96369280133928, &quot;height&quot;: 168.9795503162203, &quot;seed&quot;: 127433742, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1678310769982, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;type&quot;: &quot;rectangle&quot;, &quot;version&quot;: 582, &quot;versionNonce&quot;: 912963662, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;E-zVSmZAq8WCbgCjf5Xtt&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: -119.85949226646133, &quot;y&quot;: -118.19273739769352, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;#4c6ef5&quot;, &quot;width&quot;: 206.27442079011408, &quot;height&quot;: 40.83081726008624, &quot;seed&quot;: 236344082, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [ { &quot;id&quot;: &quot;havFoOi3aTF2CjAAHZ-cB&quot;, &quot;type&quot;: &quot;arrow&quot; } ], &quot;updated&quot;: 1678310769982, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;type&quot;: &quot;rectangle&quot;, &quot;version&quot;: 621, &quot;versionNonce&quot;: 1156987794, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;2gN03MI5YfWWTM5327ZCV&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: -120.10651942661826, &quot;y&quot;: 1.6207413628819722, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;#fa5252&quot;, &quot;width&quot;: 204.44948206434853, &quot;height&quot;: 124.85299462809655, &quot;seed&quot;: 1513514834, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [ { &quot;id&quot;: &quot;yF02CmPE5M8sMduQDltrX&quot;, &quot;type&quot;: &quot;arrow&quot; } ], &quot;updated&quot;: 1678310769982, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 144, &quot;versionNonce&quot;: 1498054286, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;8bS55RJK&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: -148.60889253162208, &quot;y&quot;: -204.45426868257064, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;#fa5252&quot;, &quot;width&quot;: 99, &quot;height&quot;: 25, &quot;seed&quot;: 1399625170, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1678310769982, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 20, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;core.Panel&quot;, &quot;rawText&quot;: &quot;core.Panel&quot;, &quot;baseline&quot;: 18, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;core.Panel&quot; }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 637, &quot;versionNonce&quot;: 361560402, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;VIjBeIiE&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: -121.89499046688985, &quot;y&quot;: -143.82272629510794, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;#fa5252&quot;, &quot;width&quot;: 193, &quot;height&quot;: 20, &quot;seed&quot;: 2094364114, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [ { &quot;id&quot;: &quot;z3XziM_UtaPNbANsUdN3g&quot;, &quot;type&quot;: &quot;arrow&quot; } ], &quot;updated&quot;: 1678310769982, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 16, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;core.FrontEndExecutable&quot;, &quot;rawText&quot;: &quot;core.FrontEndExecutable&quot;, &quot;baseline&quot;: 14, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;core.FrontEndExecutable&quot; }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 538, &quot;versionNonce&quot;: 282557646, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;TmkPzj8K&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: -165.83875674293165, &quot;y&quot;: -243.1761896042597, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;#fa5252&quot;, &quot;width&quot;: 193, &quot;height&quot;: 20, &quot;seed&quot;: 699818702, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [ { &quot;id&quot;: &quot;-nxsYynee_j51yZEp_XTQ&quot;, &quot;type&quot;: &quot;arrow&quot; } ], &quot;updated&quot;: 1678310769982, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 16, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;core.FrontEndExecutable&quot;, &quot;rawText&quot;: &quot;core.FrontEndExecutable&quot;, &quot;baseline&quot;: 14, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;core.FrontEndExecutable&quot; }, { &quot;type&quot;: &quot;rectangle&quot;, &quot;version&quot;: 407, &quot;versionNonce&quot;: 671481618, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;yfLd8LXbKN-3PVhmMl4Rf&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: -176.76060122535335, &quot;y&quot;: -252.79585920061382, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 323.59950183686726, &quot;height&quot;: 416.9439377557664, &quot;seed&quot;: 1432832850, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [ { &quot;id&quot;: &quot;jTBAqFeKklyINUNI5gZnp&quot;, &quot;type&quot;: &quot;arrow&quot; }, { &quot;id&quot;: &quot;-nxsYynee_j51yZEp_XTQ&quot;, &quot;type&quot;: &quot;arrow&quot; }, { &quot;id&quot;: &quot;z3XziM_UtaPNbANsUdN3g&quot;, &quot;type&quot;: &quot;arrow&quot; }, { &quot;id&quot;: &quot;yF02CmPE5M8sMduQDltrX&quot;, &quot;type&quot;: &quot;arrow&quot; }, { &quot;id&quot;: &quot;uQXdeupZh9l_UflT2iMXh&quot;, &quot;type&quot;: &quot;arrow&quot; } ], &quot;updated&quot;: 1678310769983, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 770, &quot;versionNonce&quot;: 1118483214, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;60yunpoH&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: -120.6744849795387, &quot;y&quot;: -26.241462344214995, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;#fa5252&quot;, &quot;width&quot;: 193, &quot;height&quot;: 20, &quot;seed&quot;: 1479191630, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1678310769983, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 16, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;core.FrontEndExecutable&quot;, &quot;rawText&quot;: &quot;core.FrontEndExecutable&quot;, &quot;baseline&quot;: 14, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;core.FrontEndExecutable&quot; }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 331, &quot;versionNonce&quot;: 416828626, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;d4rlJmzn&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: -111.52418736049094, &quot;y&quot;: -111.73369634719117, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;#fa5252&quot;, &quot;width&quot;: 114, &quot;height&quot;: 20, &quot;seed&quot;: 1349694414, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1678310769983, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 16, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;core.WEBSlider&quot;, &quot;rawText&quot;: &quot;core.WEBSlider&quot;, &quot;baseline&quot;: 14, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;core.WEBSlider&quot; }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 431, &quot;versionNonce&quot;: 960307534, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;NY5DqXU6&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: -111.75048246837804, &quot;y&quot;: 8.57639131091895, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;#fa5252&quot;, &quot;width&quot;: 143, &quot;height&quot;: 20, &quot;seed&quot;: 785652430, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1678310769983, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 16, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;core.ListLinePlotly&quot;, &quot;rawText&quot;: &quot;core.ListLinePlotly&quot;, &quot;baseline&quot;: 14, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;core.ListLinePlotly&quot; }, { &quot;type&quot;: &quot;rectangle&quot;, &quot;version&quot;: 423, &quot;versionNonce&quot;: 1570431634, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;Y2xWAJMcthHplyBNjWuY4&quot;, &quot;fillStyle&quot;: &quot;cross-hatch&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: -77.10812523251485, &quot;y&quot;: 96.14890688941597, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;#fab005&quot;, &quot;width&quot;: 152.8564453125002, &quot;height&quot;: 20.32596223090517, &quot;seed&quot;: 770831506, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1678310769983, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 1026, &quot;versionNonce&quot;: 132630414, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;a0WKvxZj&quot;, &quot;fillStyle&quot;: &quot;cross-hatch&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: -68.83401343936009, &quot;y&quot;: 98.277580624535, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;#fa5252&quot;, &quot;width&quot;: 136, &quot;height&quot;: 14, &quot;seed&quot;: 1520041490, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [ { &quot;id&quot;: &quot;06MN9H_C9uUBNQti5-jG_&quot;, &quot;type&quot;: &quot;arrow&quot; } ], &quot;updated&quot;: 1678310769983, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 11.251761812237842, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;core.FrontEndExecutable&quot;, &quot;rawText&quot;: &quot;core.FrontEndExecutable&quot;, &quot;baseline&quot;: 10, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;core.FrontEndExecutable&quot; }, { &quot;type&quot;: &quot;ellipse&quot;, &quot;version&quot;: 481, &quot;versionNonce&quot;: 1683076754, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;CBcVXg7NXa-Gw1xe4ND1Y&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 101.37951442173562, &quot;y&quot;: -267.44012015206476, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;#15aabf&quot;, &quot;width&quot;: 38, &quot;height&quot;: 25, &quot;seed&quot;: 1447921358, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [ { &quot;type&quot;: &quot;text&quot;, &quot;id&quot;: &quot;OhkZA8MM&quot; } ], &quot;updated&quot;: 1678316156012, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 493, &quot;versionNonce&quot;: 1371608146, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;OhkZA8MM&quot;, &quot;fillStyle&quot;: &quot;cross-hatch&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 109.87951442173562, &quot;y&quot;: -260.44012015206476, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;#fab005&quot;, &quot;width&quot;: 21, &quot;height&quot;: 11, &quot;seed&quot;: 1975252942, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1678316156013, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 8.55763600666906, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;DOM&quot;, &quot;rawText&quot;: &quot;DOM&quot;, &quot;baseline&quot;: 8, &quot;textAlign&quot;: &quot;center&quot;, &quot;verticalAlign&quot;: &quot;middle&quot;, &quot;containerId&quot;: &quot;CBcVXg7NXa-Gw1xe4ND1Y&quot;, &quot;originalText&quot;: &quot;DOM&quot; }, { &quot;type&quot;: &quot;ellipse&quot;, &quot;version&quot;: 514, &quot;versionNonce&quot;: 1975947726, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;_uSzvfQWBYp_NWkHGsu0S&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 59.774268740699455, &quot;y&quot;: -167.4762616838727, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;#15aabf&quot;, &quot;width&quot;: 38, &quot;height&quot;: 25, &quot;seed&quot;: 1117122578, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [ { &quot;type&quot;: &quot;text&quot;, &quot;id&quot;: &quot;CO0aOvLH&quot; } ], &quot;updated&quot;: 1678316156015, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 525, &quot;versionNonce&quot;: 1122969614, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;CO0aOvLH&quot;, &quot;fillStyle&quot;: &quot;cross-hatch&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 68.27426874069945, &quot;y&quot;: -160.4762616838727, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;#fab005&quot;, &quot;width&quot;: 21, &quot;height&quot;: 11, &quot;seed&quot;: 1309561358, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1678316156016, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 8.55763600666906, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;DOM&quot;, &quot;rawText&quot;: &quot;DOM&quot;, &quot;baseline&quot;: 8, &quot;textAlign&quot;: &quot;center&quot;, &quot;verticalAlign&quot;: &quot;middle&quot;, &quot;containerId&quot;: &quot;_uSzvfQWBYp_NWkHGsu0S&quot;, &quot;originalText&quot;: &quot;DOM&quot; }, { &quot;type&quot;: &quot;ellipse&quot;, &quot;version&quot;: 657, &quot;versionNonce&quot;: 83994578, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;almOTDsSRWy4k7m_lXrOT&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 58.84240722656253, &quot;y&quot;: -51.449534098307254, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;#15aabf&quot;, &quot;width&quot;: 38, &quot;height&quot;: 25, &quot;seed&quot;: 405906318, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [ { &quot;type&quot;: &quot;text&quot;, &quot;id&quot;: &quot;UrcTqLkp&quot; } ], &quot;updated&quot;: 1678316156017, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 668, &quot;versionNonce&quot;: 1373691282, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;UrcTqLkp&quot;, &quot;fillStyle&quot;: &quot;cross-hatch&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 67.34240722656253, &quot;y&quot;: -44.449534098307254, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;#fab005&quot;, &quot;width&quot;: 21, &quot;height&quot;: 11, &quot;seed&quot;: 2010555474, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1678316156018, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 8.55763600666906, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;DOM&quot;, &quot;rawText&quot;: &quot;DOM&quot;, &quot;baseline&quot;: 8, &quot;textAlign&quot;: &quot;center&quot;, &quot;verticalAlign&quot;: &quot;middle&quot;, &quot;containerId&quot;: &quot;almOTDsSRWy4k7m_lXrOT&quot;, &quot;originalText&quot;: &quot;DOM&quot; }, { &quot;type&quot;: &quot;line&quot;, &quot;version&quot;: 43, &quot;versionNonce&quot;: 926157202, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;IJGI6Gs-2N39Fo2DmtOEf&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 100.20510718936009, &quot;y&quot;: -14.843524751209088, &quot;strokeColor&quot;: &quot;#c92a2a&quot;, &quot;backgroundColor&quot;: &quot;#15aabf&quot;, &quot;width&quot;: 113.63048735119048, &quot;height&quot;: 0, &quot;seed&quot;: 349277838, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1678310769983, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;startBinding&quot;: null, &quot;endBinding&quot;: null, &quot;lastCommittedPoint&quot;: null, &quot;startArrowhead&quot;: null, &quot;endArrowhead&quot;: null, &quot;points&quot;: [ [ 0, 0 ], [ 113.63048735119048, 0 ] ] }, { &quot;type&quot;: &quot;line&quot;, &quot;version&quot;: 110, &quot;versionNonce&quot;: 219713678, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;5s5u914g15eziI19ZTxQa&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 73.08125813802076, &quot;y&quot;: 106.2039257231213, &quot;strokeColor&quot;: &quot;#c92a2a&quot;, &quot;backgroundColor&quot;: &quot;#15aabf&quot;, &quot;width&quot;: 145.59669131324404, &quot;height&quot;: 0, &quot;seed&quot;: 868864466, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1678310769983, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;startBinding&quot;: null, &quot;endBinding&quot;: null, &quot;lastCommittedPoint&quot;: null, &quot;startArrowhead&quot;: null, &quot;endArrowhead&quot;: null, &quot;points&quot;: [ [ 0, 0 ], [ 145.59669131324404, 0 ] ] }, { &quot;type&quot;: &quot;line&quot;, &quot;version&quot;: 50, &quot;versionNonce&quot;: 1524696914, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;gnxGIpsPOZlQZeicwkowB&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 219.65799967447913, &quot;y&quot;: 105.82864670526419, &quot;strokeColor&quot;: &quot;#c92a2a&quot;, &quot;backgroundColor&quot;: &quot;#15aabf&quot;, &quot;width&quot;: 4.201078869047592, &quot;height&quot;: 122.62584867931548, &quot;seed&quot;: 2081839694, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1678310769983, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;startBinding&quot;: null, &quot;endBinding&quot;: null, &quot;lastCommittedPoint&quot;: null, &quot;startArrowhead&quot;: null, &quot;endArrowhead&quot;: null, &quot;points&quot;: [ [ 0, 0 ], [ -4.201078869047592, -122.62584867931548 ] ] }, { &quot;type&quot;: &quot;arrow&quot;, &quot;version&quot;: 922, &quot;versionNonce&quot;: 1322403534, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;sulLI668-35ciYEMpJrqV&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 217.98497634893525, &quot;y&quot;: 54.75431582964701, &quot;strokeColor&quot;: &quot;#c92a2a&quot;, &quot;backgroundColor&quot;: &quot;#15aabf&quot;, &quot;width&quot;: 1.9121781791244814, &quot;height&quot;: 34.786452980997026, &quot;seed&quot;: 124819730, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1678316187433, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;startBinding&quot;: { &quot;elementId&quot;: &quot;fe7yX11l&quot;, &quot;focus&quot;: -1.1923424811141987, &quot;gap&quot;: 18.149803393609176 }, &quot;endBinding&quot;: { &quot;elementId&quot;: &quot;10Ix4C3t&quot;, &quot;focus&quot;: 1.2141515125338398, &quot;gap&quot;: 17.34078378520502 }, &quot;lastCommittedPoint&quot;: null, &quot;startArrowhead&quot;: null, &quot;endArrowhead&quot;: &quot;triangle&quot;, &quot;points&quot;: [ [ 0, 0 ], [ -1.9121781791244814, -34.786452980997026 ] ] }, { &quot;type&quot;: &quot;arrow&quot;, &quot;version&quot;: 660, &quot;versionNonce&quot;: 61361426, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;jTBAqFeKklyINUNI5gZnp&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 188.93878892799285, &quot;y&quot;: -15.999015443404003, &quot;strokeColor&quot;: &quot;#c92a2a&quot;, &quot;backgroundColor&quot;: &quot;#15aabf&quot;, &quot;width&quot;: 29.40524284354342, &quot;height&quot;: 0, &quot;seed&quot;: 1034944978, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1678310769983, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;startBinding&quot;: null, &quot;endBinding&quot;: { &quot;elementId&quot;: &quot;yfLd8LXbKN-3PVhmMl4Rf&quot;, &quot;focus&quot;: 0.1358689853210841, &quot;gap&quot;: 12.69464547293552 }, &quot;lastCommittedPoint&quot;: null, &quot;startArrowhead&quot;: null, &quot;endArrowhead&quot;: &quot;triangle&quot;, &quot;points&quot;: [ [ 0, 0 ], [ -29.40524284354342, 0 ] ] }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 511, &quot;versionNonce&quot;: 1768852750, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;p9p8vLUr&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 150.5148194436655, &quot;y&quot;: 108.0208802039545, &quot;strokeColor&quot;: &quot;#495057&quot;, &quot;backgroundColor&quot;: &quot;#15aabf&quot;, &quot;width&quot;: 75, &quot;height&quot;: 20, &quot;seed&quot;: 514911314, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1678310775003, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 16, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;on-change&quot;, &quot;rawText&quot;: &quot;on-change&quot;, &quot;baseline&quot;: 14, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;on-change&quot; }, { &quot;type&quot;: &quot;rectangle&quot;, &quot;version&quot;: 354, &quot;versionNonce&quot;: 654367442, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;PssP4sHA6Si1RusCbP1YZ&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;dashed&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: -455.2512032645092, &quot;y&quot;: -252.29925973074774, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 149.4259788876488, &quot;height&quot;: 416.998508998326, &quot;seed&quot;: 452763726, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [ { &quot;id&quot;: &quot;06MN9H_C9uUBNQti5-jG_&quot;, &quot;type&quot;: &quot;arrow&quot; } ], &quot;updated&quot;: 1678310769983, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 142, &quot;versionNonce&quot;: 1781297998, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;AffgwkDZ&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;dashed&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: -429.4947742280509, &quot;y&quot;: -306.2168535505022, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 101, &quot;height&quot;: 40, &quot;seed&quot;: 880888594, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1678310769983, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 16, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;Server/Client\\nstorage&quot;, &quot;rawText&quot;: &quot;Server/Client\\nstorage&quot;, &quot;baseline&quot;: 34, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;Server/Client\\nstorage&quot; }, { &quot;type&quot;: &quot;rectangle&quot;, &quot;version&quot;: 167, &quot;versionNonce&quot;: 1937879186, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;KNLCDlXf4i4Ajqxhv7_UF&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: -446.23735700334856, &quot;y&quot;: -239.90299043201261, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 124.34983026413693, &quot;height&quot;: 394.16562034970235, &quot;seed&quot;: 1646136146, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [ { &quot;id&quot;: &quot;-nxsYynee_j51yZEp_XTQ&quot;, &quot;type&quot;: &quot;arrow&quot; }, { &quot;id&quot;: &quot;z3XziM_UtaPNbANsUdN3g&quot;, &quot;type&quot;: &quot;arrow&quot; }, { &quot;id&quot;: &quot;yF02CmPE5M8sMduQDltrX&quot;, &quot;type&quot;: &quot;arrow&quot; }, { &quot;id&quot;: &quot;06MN9H_C9uUBNQti5-jG_&quot;, &quot;type&quot;: &quot;arrow&quot; } ], &quot;updated&quot;: 1678310769983, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;type&quot;: &quot;rectangle&quot;, &quot;version&quot;: 1334, &quot;versionNonce&quot;: 1125964174, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;sdkGA5lZc2_EmtTIvziC-&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: -438.5740214657487, &quot;y&quot;: 0.7771238639114983, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;#fa5252&quot;, &quot;width&quot;: 109.7371542596215, &quot;height&quot;: 31.601342511202247, &quot;seed&quot;: 524830606, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1678310769983, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;type&quot;: &quot;rectangle&quot;, &quot;version&quot;: 1490, &quot;versionNonce&quot;: 752995922, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;tImSWZ8-Ddf8Bnfp9IoNU&quot;, &quot;fillStyle&quot;: &quot;cross-hatch&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: -438.7158555431295, &quot;y&quot;: 91.47292464516144, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;#fd7e14&quot;, &quot;width&quot;: 109.7371542596215, &quot;height&quot;: 31.858416776455286, &quot;seed&quot;: 292769358, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [ { &quot;id&quot;: &quot;gvigzypU8DhO1yosrY79b&quot;, &quot;type&quot;: &quot;arrow&quot; } ], &quot;updated&quot;: 1678310769983, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 1160, &quot;versionNonce&quot;: 1705408462, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;DUmWkMn1&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: -419.3747216837584, &quot;y&quot;: 98.48196055575093, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;#fa5252&quot;, &quot;width&quot;: 63, &quot;height&quot;: 17, &quot;seed&quot;: 1827276178, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [ { &quot;id&quot;: &quot;7A2dQ6Ymq38BhcbGFyOhv&quot;, &quot;type&quot;: &quot;arrow&quot; } ], &quot;updated&quot;: 1678310769983, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 13.268654030798883, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;raw data&quot;, &quot;rawText&quot;: &quot;raw data&quot;, &quot;baseline&quot;: 12, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;raw data&quot; }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 502, &quot;versionNonce&quot;: 133706770, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;ZTlcBkhf&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: -433.7483317057295, &quot;y&quot;: 8.464231945219467, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;#fa5252&quot;, &quot;width&quot;: 100, &quot;height&quot;: 14, &quot;seed&quot;: 1076436814, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [ { &quot;id&quot;: &quot;OSeHY9V2ZPBdRgKqUfYHa&quot;, &quot;type&quot;: &quot;arrow&quot; }, { &quot;id&quot;: &quot;7A2dQ6Ymq38BhcbGFyOhv&quot;, &quot;type&quot;: &quot;arrow&quot; } ], &quot;updated&quot;: 1678310769983, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 11.221906999250749, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;core.ListLinePlotly&quot;, &quot;rawText&quot;: &quot;core.ListLinePlotly&quot;, &quot;baseline&quot;: 10, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;core.ListLinePlotly&quot; }, { &quot;type&quot;: &quot;rectangle&quot;, &quot;version&quot;: 1320, &quot;versionNonce&quot;: 971132430, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;LQMWv98mpgpnuIZ9ZXzsP&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: -439.0150378999259, &quot;y&quot;: -229.74428158714653, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;#868e96&quot;, &quot;width&quot;: 110, &quot;height&quot;: 32, &quot;seed&quot;: 1499109454, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [ { &quot;type&quot;: &quot;text&quot;, &quot;id&quot;: &quot;Bf50KwhU&quot; }, { &quot;id&quot;: &quot;yFTh0lqu2lxWHTb0eqX3G&quot;, &quot;type&quot;: &quot;arrow&quot; }, { &quot;id&quot;: &quot;OSeHY9V2ZPBdRgKqUfYHa&quot;, &quot;type&quot;: &quot;arrow&quot; } ], &quot;updated&quot;: 1678310769983, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 110, &quot;versionNonce&quot;: 112976338, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;Bf50KwhU&quot;, &quot;fillStyle&quot;: &quot;cross-hatch&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: -424.0150378999259, &quot;y&quot;: -223.74428158714653, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;#fa5252&quot;, &quot;width&quot;: 80, &quot;height&quot;: 20, &quot;seed&quot;: 957621842, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1678310769983, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 16, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;core.Panel&quot;, &quot;rawText&quot;: &quot;core.Panel&quot;, &quot;baseline&quot;: 14, &quot;textAlign&quot;: &quot;center&quot;, &quot;verticalAlign&quot;: &quot;middle&quot;, &quot;containerId&quot;: &quot;LQMWv98mpgpnuIZ9ZXzsP&quot;, &quot;originalText&quot;: &quot;core.Panel&quot; }, { &quot;type&quot;: &quot;arrow&quot;, &quot;version&quot;: 191, &quot;versionNonce&quot;: 1019829326, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;-nxsYynee_j51yZEp_XTQ&quot;, &quot;fillStyle&quot;: &quot;cross-hatch&quot;, &quot;strokeWidth&quot;: 0.5, &quot;strokeStyle&quot;: &quot;dashed&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: -177.19148181733658, &quot;y&quot;: -215.88078816731775, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 119.49480329241072, &quot;height&quot;: 1.3374837239583144, &quot;seed&quot;: 322697742, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1678310769983, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;startBinding&quot;: { &quot;elementId&quot;: &quot;yfLd8LXbKN-3PVhmMl4Rf&quot;, &quot;focus&quot;: 0.8244734260815543, &quot;gap&quot;: 1 }, &quot;endBinding&quot;: { &quot;elementId&quot;: &quot;KNLCDlXf4i4Ajqxhv7_UF&quot;, &quot;focus&quot;: -0.8633139919452419, &quot;gap&quot;: 25.201241629464334 }, &quot;lastCommittedPoint&quot;: null, &quot;startArrowhead&quot;: null, &quot;endArrowhead&quot;: &quot;arrow&quot;, &quot;points&quot;: [ [ 0, 0 ], [ -119.49480329241072, 1.3374837239583144 ] ] }, { &quot;type&quot;: &quot;arrow&quot;, &quot;version&quot;: 212, &quot;versionNonce&quot;: 1413732242, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;z3XziM_UtaPNbANsUdN3g&quot;, &quot;fillStyle&quot;: &quot;cross-hatch&quot;, &quot;strokeWidth&quot;: 0.5, &quot;strokeStyle&quot;: &quot;dashed&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: -132.88090354035688, &quot;y&quot;: -132.56707547885557, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 164.05877976190476, &quot;height&quot;: 0.05679175967259198, &quot;seed&quot;: 369985614, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1678310769983, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;startBinding&quot;: { &quot;elementId&quot;: &quot;VIjBeIiE&quot;, &quot;focus&quot;: -0.12143860520673415, &quot;gap&quot;: 10.985913073467032 }, &quot;endBinding&quot;: { &quot;elementId&quot;: &quot;KNLCDlXf4i4Ajqxhv7_UF&quot;, &quot;focus&quot;: -0.4548857096172192, &quot;gap&quot;: 24.947843436949995 }, &quot;lastCommittedPoint&quot;: null, &quot;startArrowhead&quot;: null, &quot;endArrowhead&quot;: &quot;arrow&quot;, &quot;points&quot;: [ [ 0, 0 ], [ -164.05877976190476, 0.05679175967259198 ] ] }, { &quot;type&quot;: &quot;arrow&quot;, &quot;version&quot;: 362, &quot;versionNonce&quot;: 1681171086, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;yF02CmPE5M8sMduQDltrX&quot;, &quot;fillStyle&quot;: &quot;cross-hatch&quot;, &quot;strokeWidth&quot;: 0.5, &quot;strokeStyle&quot;: &quot;dashed&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: -132.88094656808073, &quot;y&quot;: 15.018366552731663, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 164.40942730337736, &quot;height&quot;: 0, &quot;seed&quot;: 1544769166, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1678310769983, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;startBinding&quot;: { &quot;elementId&quot;: &quot;2gN03MI5YfWWTM5327ZCV&quot;, &quot;focus&quot;: 0.785385601206321, &quot;gap&quot;: 12.774427141462468 }, &quot;endBinding&quot;: { &quot;elementId&quot;: &quot;KNLCDlXf4i4Ajqxhv7_UF&quot;, &quot;focus&quot;: 0.2934733209790288, &quot;gap&quot;: 24.59715286775355 }, &quot;lastCommittedPoint&quot;: null, &quot;startArrowhead&quot;: null, &quot;endArrowhead&quot;: &quot;arrow&quot;, &quot;points&quot;: [ [ 0, 0 ], [ -164.40942730337736, 0 ] ] }, { &quot;type&quot;: &quot;arrow&quot;, &quot;version&quot;: 611, &quot;versionNonce&quot;: 549918034, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;06MN9H_C9uUBNQti5-jG_&quot;, &quot;fillStyle&quot;: &quot;cross-hatch&quot;, &quot;strokeWidth&quot;: 0.5, &quot;strokeStyle&quot;: &quot;dashed&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: -78.36228002222032, &quot;y&quot;: 105.38219338483513, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 218.28011790374728, &quot;height&quot;: 0, &quot;seed&quot;: 1644580046, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1678310769983, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;startBinding&quot;: { &quot;elementId&quot;: &quot;a0WKvxZj&quot;, &quot;focus&quot;: -0.014944680042875445, &quot;gap&quot;: 9.528266582860226 }, &quot;endBinding&quot;: { &quot;elementId&quot;: &quot;KNLCDlXf4i4Ajqxhv7_UF&quot;, &quot;focus&quot;: 0.7519802133454053, &quot;gap&quot;: 25.245128813244037 }, &quot;lastCommittedPoint&quot;: null, &quot;startArrowhead&quot;: null, &quot;endArrowhead&quot;: &quot;arrow&quot;, &quot;points&quot;: [ [ 0, 0 ], [ -218.28011790374728, 0 ] ] }, { &quot;type&quot;: &quot;arrow&quot;, &quot;version&quot;: 66, &quot;versionNonce&quot;: 819157842, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;yFTh0lqu2lxWHTb0eqX3G&quot;, &quot;fillStyle&quot;: &quot;cross-hatch&quot;, &quot;strokeWidth&quot;: 0.5, &quot;strokeStyle&quot;: &quot;dashed&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: -424.5413934616819, &quot;y&quot;: -196.74428158714653, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 0, &quot;height&quot;: 47.39307803199401, &quot;seed&quot;: 629113614, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1678316156019, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;startBinding&quot;: { &quot;elementId&quot;: &quot;LQMWv98mpgpnuIZ9ZXzsP&quot;, &quot;gap&quot;: 1, &quot;focus&quot;: 0.7368428283955629 }, &quot;endBinding&quot;: { &quot;elementId&quot;: &quot;It7nVsB0&quot;, &quot;gap&quot;: 8.562679549891556, &quot;focus&quot;: -0.8601867659153855 }, &quot;lastCommittedPoint&quot;: null, &quot;startArrowhead&quot;: null, &quot;endArrowhead&quot;: &quot;arrow&quot;, &quot;points&quot;: [ [ 0, 0 ], [ 0, 47.39307803199401 ] ] }, { &quot;type&quot;: &quot;arrow&quot;, &quot;version&quot;: 187, &quot;versionNonce&quot;: 271589650, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;OSeHY9V2ZPBdRgKqUfYHa&quot;, &quot;fillStyle&quot;: &quot;cross-hatch&quot;, &quot;strokeWidth&quot;: 0.5, &quot;strokeStyle&quot;: &quot;dashed&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: -400.88963528061765, &quot;y&quot;: -196.74428158714653, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 0, &quot;height&quot;: 192.00280180431542, &quot;seed&quot;: 150466894, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1678316156019, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;startBinding&quot;: { &quot;elementId&quot;: &quot;LQMWv98mpgpnuIZ9ZXzsP&quot;, &quot;gap&quot;: 1, &quot;focus&quot;: 0.30681086146712255 }, &quot;endBinding&quot;: { &quot;elementId&quot;: &quot;ZTlcBkhf&quot;, &quot;gap&quot;: 13.205711728050574, &quot;focus&quot;: -0.34282607149776245 }, &quot;lastCommittedPoint&quot;: null, &quot;startArrowhead&quot;: null, &quot;endArrowhead&quot;: &quot;arrow&quot;, &quot;points&quot;: [ [ 0, 0 ], [ 0, 192.00280180431542 ] ] }, { &quot;type&quot;: &quot;rectangle&quot;, &quot;version&quot;: 1164, &quot;versionNonce&quot;: 744216334, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;_iTEcORPzgjXSaQpsQ9wb&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: -439.1644320747448, &quot;y&quot;: -147.69566026927305, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;#4c6ef5&quot;, &quot;width&quot;: 109.7371542596215, &quot;height&quot;: 31.858416776455286, &quot;seed&quot;: 582850130, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [ { &quot;id&quot;: &quot;7A2dQ6Ymq38BhcbGFyOhv&quot;, &quot;type&quot;: &quot;arrow&quot; } ], &quot;updated&quot;: 1678310769983, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 817, &quot;versionNonce&quot;: 960194770, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;It7nVsB0&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: -431.18252208070106, &quot;y&quot;: -140.78852400526097, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;#fa5252&quot;, &quot;width&quot;: 95, &quot;height&quot;: 17, &quot;seed&quot;: 575352782, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [ { &quot;id&quot;: &quot;yFTh0lqu2lxWHTb0eqX3G&quot;, &quot;type&quot;: &quot;arrow&quot; }, { &quot;id&quot;: &quot;OSeHY9V2ZPBdRgKqUfYHa&quot;, &quot;type&quot;: &quot;arrow&quot; } ], &quot;updated&quot;: 1678310769983, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 13.268654030798883, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;core.WEBSlider&quot;, &quot;rawText&quot;: &quot;core.WEBSlider&quot;, &quot;baseline&quot;: 12, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;core.WEBSlider&quot; }, { &quot;type&quot;: &quot;arrow&quot;, &quot;version&quot;: 426, &quot;versionNonce&quot;: 422167886, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;7A2dQ6Ymq38BhcbGFyOhv&quot;, &quot;fillStyle&quot;: &quot;cross-hatch&quot;, &quot;strokeWidth&quot;: 0.5, &quot;strokeStyle&quot;: &quot;dashed&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: -402.13937258307993, &quot;y&quot;: 35.41482834588907, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 0, &quot;height&quot;: 53.872855050223286, &quot;seed&quot;: 935892878, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1678310769984, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;startBinding&quot;: { &quot;elementId&quot;: &quot;ZTlcBkhf&quot;, &quot;focus&quot;: 0.3678208175470081, &quot;gap&quot;: 12.950596400669603 }, &quot;endBinding&quot;: { &quot;elementId&quot;: &quot;DUmWkMn1&quot;, &quot;focus&quot;: -0.45284606029592095, &quot;gap&quot;: 9.194277159638574 }, &quot;lastCommittedPoint&quot;: null, &quot;startArrowhead&quot;: null, &quot;endArrowhead&quot;: &quot;arrow&quot;, &quot;points&quot;: [ [ 0, 0 ], [ 0, 53.872855050223286 ] ] }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 58, &quot;versionNonce&quot;: 993689234, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;o3Op3sUd&quot;, &quot;fillStyle&quot;: &quot;cross-hatch&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: -393.88732910156284, &quot;y&quot;: -181.09782046363466, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 24, &quot;height&quot;: 20, &quot;seed&quot;: 715692174, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1678310769984, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 16, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;ref&quot;, &quot;rawText&quot;: &quot;ref&quot;, &quot;baseline&quot;: 14, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;ref&quot; }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 106, &quot;versionNonce&quot;: 178252686, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;izQ9X8ro&quot;, &quot;fillStyle&quot;: &quot;cross-hatch&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: -393.10081263950923, &quot;y&quot;: -68.67513747442337, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 24, &quot;height&quot;: 20, &quot;seed&quot;: 255194574, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1678310769984, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 16, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;ref&quot;, &quot;rawText&quot;: &quot;ref&quot;, &quot;baseline&quot;: 14, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;ref&quot; }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 120, &quot;versionNonce&quot;: 1615912018, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;gsIZtc6Q&quot;, &quot;fillStyle&quot;: &quot;cross-hatch&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: -393.70732770647356, &quot;y&quot;: 38.233925955636096, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 24, &quot;height&quot;: 20, &quot;seed&quot;: 229223890, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1678310769984, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 16, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;ref&quot;, &quot;rawText&quot;: &quot;ref&quot;, &quot;baseline&quot;: 14, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;ref&quot; }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 118, &quot;versionNonce&quot;: 787958222, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;VzutkUlD&quot;, &quot;fillStyle&quot;: &quot;cross-hatch&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: -234.58710588727706, &quot;y&quot;: -238.69158790225072, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 24, &quot;height&quot;: 20, &quot;seed&quot;: 973314126, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1678310769984, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 16, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;ref&quot;, &quot;rawText&quot;: &quot;ref&quot;, &quot;baseline&quot;: 14, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;ref&quot; }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 96, &quot;versionNonce&quot;: 1448444434, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;PSJJK3sL&quot;, &quot;fillStyle&quot;: &quot;cross-hatch&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: -233.27560570126536, &quot;y&quot;: -157.76219685872397, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 24, &quot;height&quot;: 20, &quot;seed&quot;: 459152850, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1678310769984, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 16, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;ref&quot;, &quot;rawText&quot;: &quot;ref&quot;, &quot;baseline&quot;: 14, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;ref&quot; }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 119, &quot;versionNonce&quot;: 88662030, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;tNKddouz&quot;, &quot;fillStyle&quot;: &quot;cross-hatch&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: -236.91010393415218, &quot;y&quot;: -8.19371541341144, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 24, &quot;height&quot;: 20, &quot;seed&quot;: 278129998, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1678310769984, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 16, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;ref&quot;, &quot;rawText&quot;: &quot;ref&quot;, &quot;baseline&quot;: 14, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;ref&quot; }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 127, &quot;versionNonce&quot;: 2017423314, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;w8HOq8iI&quot;, &quot;fillStyle&quot;: &quot;cross-hatch&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: -234.89111909412236, &quot;y&quot;: 83.18655104864212, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 24, &quot;height&quot;: 20, &quot;seed&quot;: 1718957390, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1678310769984, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 16, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;ref&quot;, &quot;rawText&quot;: &quot;ref&quot;, &quot;baseline&quot;: 14, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;ref&quot; }, { &quot;type&quot;: &quot;arrow&quot;, &quot;version&quot;: 128, &quot;versionNonce&quot;: 1099804238, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;uQXdeupZh9l_UflT2iMXh&quot;, &quot;fillStyle&quot;: &quot;cross-hatch&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: -121.54174924152261, &quot;y&quot;: -366.1172703334267, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 0.8136057438247377, &quot;height&quot;: 112.32141113281281, &quot;seed&quot;: 895987986, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1678310769984, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;startBinding&quot;: { &quot;elementId&quot;: &quot;D5KrzAAX&quot;, &quot;focus&quot;: -0.043758036927407935, &quot;gap&quot;: 9.538859049479242 }, &quot;endBinding&quot;: { &quot;elementId&quot;: &quot;yfLd8LXbKN-3PVhmMl4Rf&quot;, &quot;focus&quot;: -0.6669030679374433, &quot;gap&quot;: 1 }, &quot;lastCommittedPoint&quot;: null, &quot;startArrowhead&quot;: null, &quot;endArrowhead&quot;: &quot;triangle&quot;, &quot;points&quot;: [ [ 0, 0 ], [ -0.8136057438247377, 112.32141113281281 ] ] }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 100, &quot;versionNonce&quot;: 707110290, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;D5KrzAAX&quot;, &quot;fillStyle&quot;: &quot;cross-hatch&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: -169.42705426897305, &quot;y&quot;: -398.15612938290593, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 114, &quot;height&quot;: 25, &quot;seed&quot;: 910738638, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [ { &quot;id&quot;: &quot;uQXdeupZh9l_UflT2iMXh&quot;, &quot;type&quot;: &quot;arrow&quot; } ], &quot;updated&quot;: 1678310769984, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 20, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;Enter Point&quot;, &quot;rawText&quot;: &quot;Enter Point&quot;, &quot;baseline&quot;: 18, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;Enter Point&quot; }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 69, &quot;versionNonce&quot;: 815707278, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;FKOmrwK3&quot;, &quot;fillStyle&quot;: &quot;cross-hatch&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: -108.88343447730625, &quot;y&quot;: -366.2460138230096, &quot;strokeColor&quot;: &quot;#495057&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 94, &quot;height&quot;: 40, &quot;seed&quot;: 1798167570, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1678310769984, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 16, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;CodeMirror\\nDecorations&quot;, &quot;rawText&quot;: &quot;CodeMirror\\nDecorations&quot;, &quot;baseline&quot;: 34, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;CodeMirror\\nDecorations&quot; }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 95, &quot;versionNonce&quot;: 893330258, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;0WLjRWTt&quot;, &quot;fillStyle&quot;: &quot;cross-hatch&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 107.70423525855637, &quot;y&quot;: -291.5826721191406, &quot;strokeColor&quot;: &quot;#495057&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 27, &quot;height&quot;: 20, &quot;seed&quot;: 497677650, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1678310769984, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 16, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;new&quot;, &quot;rawText&quot;: &quot;new&quot;, &quot;baseline&quot;: 14, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;new&quot; }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 157, &quot;versionNonce&quot;: 473232078, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;bhOAK4er&quot;, &quot;fillStyle&quot;: &quot;cross-hatch&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 64.99036807105637, &quot;y&quot;: -189.37680925641735, &quot;strokeColor&quot;: &quot;#495057&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 27, &quot;height&quot;: 20, &quot;seed&quot;: 1119574734, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1678310769984, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 16, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;new&quot;, &quot;rawText&quot;: &quot;new&quot;, &quot;baseline&quot;: 14, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;new&quot; }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 183, &quot;versionNonce&quot;: 602073362, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;SV3jDjc1&quot;, &quot;fillStyle&quot;: &quot;cross-hatch&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 65.10889253162196, &quot;y&quot;: -71.62092662992927, &quot;strokeColor&quot;: &quot;#495057&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 27, &quot;height&quot;: 20, &quot;seed&quot;: 1140868814, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1678310769984, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 16, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;new&quot;, &quot;rawText&quot;: &quot;new&quot;, &quot;baseline&quot;: 14, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;new&quot; }, { &quot;type&quot;: &quot;arrow&quot;, &quot;version&quot;: 68, &quot;versionNonce&quot;: 787048718, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;havFoOi3aTF2CjAAHZ-cB&quot;, &quot;fillStyle&quot;: &quot;cross-hatch&quot;, &quot;strokeWidth&quot;: 0.5, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 87.41492852365276, &quot;y&quot;: -95.15084739976818, &quot;strokeColor&quot;: &quot;#c92a2a&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 140.86414164934013, &quot;height&quot;: 0.15733225370723858, &quot;seed&quot;: 1567689426, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1678310769984, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;startBinding&quot;: { &quot;elementId&quot;: &quot;E-zVSmZAq8WCbgCjf5Xtt&quot;, &quot;focus&quot;: 0.12216842786534833, &quot;gap&quot;: 1 }, &quot;endBinding&quot;: { &quot;elementId&quot;: &quot;DbsVOSuW&quot;, &quot;focus&quot;: -0.06031087239583144, &quot;gap&quot;: 13.309384300595298 }, &quot;lastCommittedPoint&quot;: null, &quot;startArrowhead&quot;: null, &quot;endArrowhead&quot;: &quot;triangle&quot;, &quot;points&quot;: [ [ 0, 0 ], [ 140.86414164934013, 0.15733225370723858 ] ] }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 591, &quot;versionNonce&quot;: 1937036562, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;10Ix4C3t&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 225.94488447869492, &quot;y&quot;: -17.372920936555033, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;#15aabf&quot;, &quot;width&quot;: 100, &quot;height&quot;: 20, &quot;seed&quot;: 1222232846, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [ { &quot;id&quot;: &quot;sulLI668-35ciYEMpJrqV&quot;, &quot;type&quot;: &quot;arrow&quot; } ], &quot;updated&quot;: 1678316187433, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 16, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;Reactive link&quot;, &quot;rawText&quot;: &quot;Reactive link&quot;, &quot;baseline&quot;: 14, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;Reactive link&quot; }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 97, &quot;versionNonce&quot;: 1479874382, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;atDn5LMb&quot;, &quot;fillStyle&quot;: &quot;cross-hatch&quot;, &quot;strokeWidth&quot;: 0.5, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 70, &quot;angle&quot;: 0, &quot;x&quot;: 164.2598179408501, &quot;y&quot;: -120.11572120303134, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 42, &quot;height&quot;: 20, &quot;seed&quot;: 1349171858, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1678310769984, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 16, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;emitt&quot;, &quot;rawText&quot;: &quot;emitt&quot;, &quot;baseline&quot;: 14, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;emitt&quot; }, { &quot;type&quot;: &quot;rectangle&quot;, &quot;version&quot;: 218, &quot;versionNonce&quot;: 1120226450, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;W3Sv2SafuGE8udGaXpXaU&quot;, &quot;fillStyle&quot;: &quot;cross-hatch&quot;, &quot;strokeWidth&quot;: 0.5, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 233.39276994977877, &quot;y&quot;: -112.20756167457154, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;#ced4da&quot;, &quot;width&quot;: 126.47739955357144, &quot;height&quot;: 33.575294131324426, &quot;seed&quot;: 1063829650, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1678310769984, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 138, &quot;versionNonce&quot;: 812711310, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;DbsVOSuW&quot;, &quot;fillStyle&quot;: &quot;cross-hatch&quot;, &quot;strokeWidth&quot;: 0.5, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 241.58845447358817, &quot;y&quot;: -105.52350870768163, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 111, &quot;height&quot;: 20, &quot;seed&quot;: 2001755474, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [ { &quot;id&quot;: &quot;havFoOi3aTF2CjAAHZ-cB&quot;, &quot;type&quot;: &quot;arrow&quot; }, { &quot;id&quot;: &quot;9xYFgANgkj-04ApU_w_7U&quot;, &quot;type&quot;: &quot;arrow&quot; } ], &quot;updated&quot;: 1678310769984, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 16, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;core.FireEvent&quot;, &quot;rawText&quot;: &quot;core.FireEvent&quot;, &quot;baseline&quot;: 14, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;core.FireEvent&quot; }, { &quot;type&quot;: &quot;arrow&quot;, &quot;version&quot;: 122, &quot;versionNonce&quot;: 156363346, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;9xYFgANgkj-04ApU_w_7U&quot;, &quot;fillStyle&quot;: &quot;cross-hatch&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 70, &quot;angle&quot;: 0, &quot;x&quot;: 363.9716157459096, &quot;y&quot;: -95.58142525809086, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;#ced4da&quot;, &quot;width&quot;: 142.91492280505952, &quot;height&quot;: 0, &quot;seed&quot;: 605744082, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1678310769984, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;startBinding&quot;: { &quot;elementId&quot;: &quot;DbsVOSuW&quot;, &quot;focus&quot;: -0.005791655040923161, &quot;gap&quot;: 11.383161272321445 }, &quot;endBinding&quot;: null, &quot;lastCommittedPoint&quot;: null, &quot;startArrowhead&quot;: null, &quot;endArrowhead&quot;: &quot;triangle&quot;, &quot;points&quot;: [ [ 0, 0 ], [ 142.91492280505952, 0 ] ] }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 45, &quot;versionNonce&quot;: 1557535694, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;DMyf6AUs&quot;, &quot;fillStyle&quot;: &quot;cross-hatch&quot;, &quot;strokeWidth&quot;: 0.5, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 70, &quot;angle&quot;: 0, &quot;x&quot;: 524.1692533947191, &quot;y&quot;: -106.69198317754768, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;#ced4da&quot;, &quot;width&quot;: 77, &quot;height&quot;: 20, &quot;seed&quot;: 1823794574, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1678310769984, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 16, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;WL Kernel&quot;, &quot;rawText&quot;: &quot;WL Kernel&quot;, &quot;baseline&quot;: 14, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;WL Kernel&quot; }, { &quot;type&quot;: &quot;rectangle&quot;, &quot;version&quot;: 525, &quot;versionNonce&quot;: 402968594, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;bWELLjc2VTs7HNH8_WcrB&quot;, &quot;fillStyle&quot;: &quot;cross-hatch&quot;, &quot;strokeWidth&quot;: 0.5, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 235.78777785528456, &quot;y&quot;: 192.8651573544463, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;#ced4da&quot;, &quot;width&quot;: 204, &quot;height&quot;: 30, &quot;seed&quot;: 1630640270, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [ { &quot;type&quot;: &quot;text&quot;, &quot;id&quot;: &quot;N1uZwhqp&quot; }, { &quot;id&quot;: &quot;5VYHVpOhiDJXl--n22XQd&quot;, &quot;type&quot;: &quot;arrow&quot; } ], &quot;updated&quot;: 1678310769984, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 291, &quot;versionNonce&quot;: 1937601038, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;N1uZwhqp&quot;, &quot;fillStyle&quot;: &quot;cross-hatch&quot;, &quot;strokeWidth&quot;: 0.5, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 245.28777785528456, &quot;y&quot;: 197.8651573544463, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;#ced4da&quot;, &quot;width&quot;: 185, &quot;height&quot;: 20, &quot;seed&quot;: 1208907278, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1678310769984, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 16, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;core.SetFrontEndObject&quot;, &quot;rawText&quot;: &quot;core.SetFrontEndObject&quot;, &quot;baseline&quot;: 14, &quot;textAlign&quot;: &quot;center&quot;, &quot;verticalAlign&quot;: &quot;middle&quot;, &quot;containerId&quot;: &quot;bWELLjc2VTs7HNH8_WcrB&quot;, &quot;originalText&quot;: &quot;core.SetFrontEndObject&quot; }, { &quot;type&quot;: &quot;arrow&quot;, &quot;version&quot;: 495, &quot;versionNonce&quot;: 1663807758, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;5VYHVpOhiDJXl--n22XQd&quot;, &quot;fillStyle&quot;: &quot;cross-hatch&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 651.7496843702181, &quot;y&quot;: -43.593310738112734, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;#ced4da&quot;, &quot;width&quot;: 238.56017316479614, &quot;height&quot;: 228.19292316834893, &quot;seed&quot;: 1565081742, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1678316156020, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;startBinding&quot;: { &quot;elementId&quot;: &quot;R7bFVCI3&quot;, &quot;focus&quot;: -2.201631371327045, &quot;gap&quot;: 12.01631371327045 }, &quot;endBinding&quot;: { &quot;elementId&quot;: &quot;bWELLjc2VTs7HNH8_WcrB&quot;, &quot;gap&quot;: 8.265544924210104, &quot;focus&quot;: 0.6536098312724061 }, &quot;lastCommittedPoint&quot;: null, &quot;startArrowhead&quot;: null, &quot;endArrowhead&quot;: &quot;triangle&quot;, &quot;points&quot;: [ [ 0, 0 ], [ -178.29563110480348, 0 ], [ -238.56017316479614, 228.19292316834893 ] ] }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 202, &quot;versionNonce&quot;: 1600127054, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;2MLuTwha&quot;, &quot;fillStyle&quot;: &quot;cross-hatch&quot;, &quot;strokeWidth&quot;: 0.5, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 70, &quot;angle&quot;: 0, &quot;x&quot;: 492.5225881420196, &quot;y&quot;: -33.96373119790735, &quot;strokeColor&quot;: &quot;#495057&quot;, &quot;backgroundColor&quot;: &quot;#ced4da&quot;, &quot;width&quot;: 127, &quot;height&quot;: 20, &quot;seed&quot;: 67846158, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1678310769984, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 16, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;SendToFrontEnd&quot;, &quot;rawText&quot;: &quot;SendToFrontEnd&quot;, &quot;baseline&quot;: 14, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;SendToFrontEnd&quot; }, { &quot;type&quot;: &quot;arrow&quot;, &quot;version&quot;: 356, &quot;versionNonce&quot;: 1188656018, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;gvigzypU8DhO1yosrY79b&quot;, &quot;fillStyle&quot;: &quot;cross-hatch&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 235.92927478608829, &quot;y&quot;: 208.96303449358317, &quot;strokeColor&quot;: &quot;#c92a2a&quot;, &quot;backgroundColor&quot;: &quot;#ced4da&quot;, &quot;width&quot;: 597.6386369977679, &quot;height&quot;: 77.25661504836313, &quot;seed&quot;: 1719923154, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1678310769984, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;startBinding&quot;: null, &quot;endBinding&quot;: { &quot;elementId&quot;: &quot;tImSWZ8-Ddf8Bnfp9IoNU&quot;, &quot;focus&quot;: -0.3974453241154099, &quot;gap&quot;: 8.375078023603315 }, &quot;lastCommittedPoint&quot;: null, &quot;startArrowhead&quot;: null, &quot;endArrowhead&quot;: &quot;triangle&quot;, &quot;points&quot;: [ [ 0, 0 ], [ -596.8047805059523, 0 ], [ -597.6386369977679, -77.25661504836313 ] ] }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 592, &quot;versionNonce&quot;: 1146537614, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;8gpechRF&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: -85.63456217447703, &quot;y&quot;: 217.47389293852376, &quot;strokeColor&quot;: &quot;#495057&quot;, &quot;backgroundColor&quot;: &quot;#15aabf&quot;, &quot;width&quot;: 105, &quot;height&quot;: 20, &quot;seed&quot;: 1586081042, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1678310769984, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 16, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;update value&quot;, &quot;rawText&quot;: &quot;update value&quot;, &quot;baseline&quot;: 14, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;update value&quot; }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 183, &quot;versionNonce&quot;: 1885473422, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;fe7yX11l&quot;, &quot;fillStyle&quot;: &quot;cross-hatch&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 236.13477974254442, &quot;y&quot;: 8.566678887000705, &quot;strokeColor&quot;: &quot;#495057&quot;, &quot;backgroundColor&quot;: &quot;#ced4da&quot;, &quot;width&quot;: 165, &quot;height&quot;: 80, &quot;seed&quot;: 57555534, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [ { &quot;id&quot;: &quot;sulLI668-35ciYEMpJrqV&quot;, &quot;type&quot;: &quot;arrow&quot; } ], &quot;updated&quot;: 1678316181981, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 16, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;automatically\\ncreated\\nbetween two\\nFrontEndExecutables&quot;, &quot;rawText&quot;: &quot;automatically\\ncreated\\nbetween two\\nFrontEndExecutables&quot;, &quot;baseline&quot;: 74, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;automatically\\ncreated\\nbetween two\\nFrontEndExecutables&quot; }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 203, &quot;versionNonce&quot;: 1662698702, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;R7bFVCI3&quot;, &quot;fillStyle&quot;: &quot;cross-hatch&quot;, &quot;strokeWidth&quot;: 0.5, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 70, &quot;angle&quot;: 0, &quot;x&quot;: 493.92573211899503, &quot;y&quot;: -75.60962445138318, &quot;strokeColor&quot;: &quot;#495057&quot;, &quot;backgroundColor&quot;: &quot;#ced4da&quot;, &quot;width&quot;: 195, &quot;height&quot;: 20, &quot;seed&quot;: 2079898062, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [ { &quot;id&quot;: &quot;5VYHVpOhiDJXl--n22XQd&quot;, &quot;type&quot;: &quot;arrow&quot; } ], &quot;updated&quot;: 1678310769984, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 16, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;EmittedEvent[uid, data]&quot;, &quot;rawText&quot;: &quot;EmittedEvent[uid, data]&quot;, &quot;baseline&quot;: 14, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;EmittedEvent[uid, data]&quot; }, { &quot;id&quot;: &quot;UCs9wb4P&quot;, &quot;type&quot;: &quot;text&quot;, &quot;x&quot;: 235.6085624843975, &quot;y&quot;: 93.02746184308444, &quot;width&quot;: 178, &quot;height&quot;: 40, &quot;angle&quot;: 0, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;#ced4da&quot;, &quot;fillStyle&quot;: &quot;cross-hatch&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;seed&quot;: 445475662, &quot;version&quot;: 99, &quot;versionNonce&quot;: 1789312466, &quot;isDeleted&quot;: false, &quot;boundElements&quot;: null, &quot;updated&quot;: 1678316239803, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;text&quot;: &quot;only nested. bubble-like\\nconnection&quot;, &quot;rawText&quot;: &quot;only nested. bubble-like\\nconnection&quot;, &quot;fontSize&quot;: 16, &quot;fontFamily&quot;: 1, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;baseline&quot;: 34, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;only nested. bubble-like\\nconnection&quot; } ], &quot;appState&quot;: { &quot;theme&quot;: &quot;light&quot;, &quot;viewBackgroundColor&quot;: &quot;#ffffff&quot;, &quot;currentItemStrokeColor&quot;: &quot;#000000&quot;, &quot;currentItemBackgroundColor&quot;: &quot;#ced4da&quot;, &quot;currentItemFillStyle&quot;: &quot;cross-hatch&quot;, &quot;currentItemStrokeWidth&quot;: 1, &quot;currentItemStrokeStyle&quot;: &quot;solid&quot;, &quot;currentItemRoughness&quot;: 1, &quot;currentItemOpacity&quot;: 100, &quot;currentItemFontFamily&quot;: 1, &quot;currentItemFontSize&quot;: 16, &quot;currentItemTextAlign&quot;: &quot;left&quot;, &quot;currentItemStartArrowhead&quot;: null, &quot;currentItemEndArrowhead&quot;: &quot;triangle&quot;, &quot;scrollX&quot;: 507.64875530959915, &quot;scrollY&quot;: 440.6275658476022, &quot;zoom&quot;: { &quot;value&quot;: 0.9500000000000001 }, &quot;currentItemRoundness&quot;: &quot;sharp&quot;, &quot;gridSize&quot;: null, &quot;colorPalette&quot;: {} }, &quot;files&quot;: {} } %%","keywords":"","version":null},{"title":"Text Elements","type":0,"sectionRef":"#","url":"/wljs-docs/imgs/FE data binding.excalidraw 1","content":"==⚠ Switch to EXCALIDRAW VIEW in the MORE OPTIONS menu of this document. ⚠== Text Elements instance ^98kABRIO uid_1 ^PTVBXhgC Create container ^CnIbPfzS CALL ^NPYQscPv core.Function ^wudKg9Zn core.otherSymbol ^Nivwk3dT ... ^mN47U8os ... ^sjR3pZbV instance ^7VCLkKzy uid_4 ^vR7deZXW core.Function2 ^2DCysDy2 core.otherSymbol2 ^f6W1eL8c ... ^8clkL2jK ... ^evErsAw4 Create container ^mThHQxRF Create container ^9DQzK8c2 instance ^NdnGa8IM link ^1MYH20iQ link ^WSa4Hmf0 bubble up ^uQZFKKUG UPDATE ^eRAHCZgz update method ^8eEG3D1W Local memory ^aY13ZN8a Local memory ^YOuzKiYs Local memory ^NyALk65w Global memory ^zR3bRDDd %% Drawing { &quot;type&quot;: &quot;excalidraw&quot;, &quot;version&quot;: 2, &quot;source&quot;: &quot;https://github.com/zsviczian/obsidian-excalidraw-plugin/releases/tag/1.9.3&quot;, &quot;elements&quot;: [ { &quot;type&quot;: &quot;rectangle&quot;, &quot;version&quot;: 1007, &quot;versionNonce&quot;: 769756904, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;0_MhAvtUjG37RQYxiAXit&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 173.71231423707727, &quot;y&quot;: -1275.491845598057, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 223.2444806780134, &quot;height&quot;: 265.84989929199224, &quot;seed&quot;: 1192599411, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1686254622504, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;customData&quot;: { &quot;legacyTextWrap&quot;: true } }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 431, &quot;versionNonce&quot;: 1173435288, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;98kABRIO&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 180.37276258389645, &quot;y&quot;: -1270.6405070752821, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;#228be6&quot;, &quot;width&quot;: 71.63194274902344, &quot;height&quot;: 20, &quot;seed&quot;: 541250973, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [ { &quot;id&quot;: &quot;6zQkhk86lEDABNeVVrWc-&quot;, &quot;type&quot;: &quot;arrow&quot; } ], &quot;updated&quot;: 1686254622504, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;customData&quot;: { &quot;legacyTextWrap&quot;: true }, &quot;fontSize&quot;: 16, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;instance &quot;, &quot;rawText&quot;: &quot;instance &quot;, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;instance &quot;, &quot;lineHeight&quot;: 1.25, &quot;baseline&quot;: 14 }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 382, &quot;versionNonce&quot;: 866087400, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;PTVBXhgC&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;dashed&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 338.4868171568778, &quot;y&quot;: -1273.6680520187267, &quot;strokeColor&quot;: &quot;#495057&quot;, &quot;backgroundColor&quot;: &quot;#ced4da&quot;, &quot;width&quot;: 49.05995178222656, &quot;height&quot;: 25, &quot;seed&quot;: 641061469, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1686254622504, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;customData&quot;: { &quot;legacyTextWrap&quot;: true }, &quot;fontSize&quot;: 20, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;uid_1&quot;, &quot;rawText&quot;: &quot;uid_1&quot;, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;uid_1&quot;, &quot;lineHeight&quot;: 1.25, &quot;baseline&quot;: 17 }, { &quot;type&quot;: &quot;ellipse&quot;, &quot;version&quot;: 473, &quot;versionNonce&quot;: 1840709784, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;_m3jrTmu4n6qm-lCQ4xwP&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 200.32287151473804, &quot;y&quot;: -1338.6898047882698, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;#ced4da&quot;, &quot;width&quot;: 15.568679809570312, &quot;height&quot;: 15.568679809570312, &quot;seed&quot;: 846649619, &quot;groupIds&quot;: [], &quot;roundness&quot;: { &quot;type&quot;: 2 }, &quot;boundElements&quot;: [], &quot;updated&quot;: 1686254622504, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 372, &quot;versionNonce&quot;: 766047464, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;CnIbPfzS&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 223.8414142050259, &quot;y&quot;: -1341.0614888734533, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;#ced4da&quot;, &quot;width&quot;: 133.08790588378906, &quot;height&quot;: 20, &quot;seed&quot;: 1991605821, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1686254622504, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;customData&quot;: { &quot;legacyTextWrap&quot;: true }, &quot;fontSize&quot;: 16, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;Create container&quot;, &quot;rawText&quot;: &quot;Create container&quot;, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;Create container&quot;, &quot;lineHeight&quot;: 1.25, &quot;baseline&quot;: 14 }, { &quot;type&quot;: &quot;arrow&quot;, &quot;version&quot;: 772, &quot;versionNonce&quot;: 356199832, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;fvnqxt74aMDC18ZOjQkm_&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 278.1450811768814, &quot;y&quot;: -1196.8541175881517, &quot;strokeColor&quot;: &quot;#495057&quot;, &quot;backgroundColor&quot;: &quot;#ced4da&quot;, &quot;width&quot;: 2.221298256734485, &quot;height&quot;: 37.084271673950525, &quot;seed&quot;: 723451795, &quot;groupIds&quot;: [], &quot;roundness&quot;: { &quot;type&quot;: 2 }, &quot;boundElements&quot;: [], &quot;updated&quot;: 1686254622504, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;startBinding&quot;: { &quot;elementId&quot;: &quot;RhjM2O-JTBZTrSvwxRCk9&quot;, &quot;gap&quot;: 5.528654155452614, &quot;focus&quot;: -0.020826545524459786 }, &quot;endBinding&quot;: { &quot;elementId&quot;: &quot;t9dXhnzhHwwLUwertuswv&quot;, &quot;gap&quot;: 1, &quot;focus&quot;: 0.06165721801171414 }, &quot;lastCommittedPoint&quot;: null, &quot;startArrowhead&quot;: null, &quot;endArrowhead&quot;: &quot;arrow&quot;, &quot;points&quot;: [ [ 0, 0 ], [ 2.221298256734485, 37.084271673950525 ] ] }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 254, &quot;versionNonce&quot;: 1368004584, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;NPYQscPv&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 182.5262072107961, &quot;y&quot;: -1398.4489673327002, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;#fab005&quot;, &quot;width&quot;: 49.95997619628906, &quot;height&quot;: 25, &quot;seed&quot;: 1185996221, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [ { &quot;id&quot;: &quot;6zQkhk86lEDABNeVVrWc-&quot;, &quot;type&quot;: &quot;arrow&quot; } ], &quot;updated&quot;: 1686254622504, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;customData&quot;: { &quot;legacyTextWrap&quot;: true }, &quot;fontSize&quot;: 20, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;CALL&quot;, &quot;rawText&quot;: &quot;CALL&quot;, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;CALL&quot;, &quot;lineHeight&quot;: 1.25, &quot;baseline&quot;: 17 }, { &quot;type&quot;: &quot;freedraw&quot;, &quot;version&quot;: 539, &quot;versionNonce&quot;: 1974581912, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;LGaODbu7YTcL5g4PxWaQA&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0.3737697015058119, &quot;x&quot;: 377.1599868353288, &quot;y&quot;: -836.896801486759, &quot;strokeColor&quot;: &quot;#c2255c&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 209.82507314753468, &quot;height&quot;: 269.8801685779199, &quot;seed&quot;: 932963645, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1686254622504, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;points&quot;: [ [ -154.49262346540172, -116.8916413334279 ], [ -157.58251892865067, -116.8916413334279 ], [ -160.8078086077674, -116.8916413334279 ], [ -167.25821893452033, -118.35695787385349 ], [ -180.57899830128886, -121.69056452270333 ], [ -196.54224680246497, -126.82570006378256 ], [ -214.09092607484152, -133.14779268788558 ], [ -236.43612715317454, -141.39172774567362 ], [ -259.53901184277737, -151.53037069375432 ], [ -281.4394065802166, -163.32621748156944 ], [ -301.80622095309377, -176.83333240689637 ], [ -321.2751401016396, -193.3416302258939 ], [ -337.1765230809586, -210.26913114167377 ], [ -347.45376386800086, -225.00303461183407 ], [ -355.8846737937156, -241.42035491459055 ], [ -360.995763184853, -259.47992945958987 ], [ -364.3176966129364, -280.7409193495929 ], [ -364.3176966129364, -299.44076672414263 ], [ -358.34720891714795, -322.76940882062434 ], [ -349.982939652614, -337.92021151124123 ], [ -339.7745369359988, -350.8349742345932 ], [ -328.23349002724717, -361.4481645085258 ], [ -316.7661408439866, -370.37077033462674 ], [ -305.93354712781377, -376.93282447736897 ], [ -292.5537757743563, -383.64882875592275 ], [ -282.9323771315922, -386.2833369330383 ], [ -279.70717196821573, -386.77180991134776 ], [ -279.70717196821573, -386.77180991134776 ] ], &quot;lastCommittedPoint&quot;: null, &quot;simulatePressure&quot;: true, &quot;pressures&quot;: [] }, { &quot;type&quot;: &quot;freedraw&quot;, &quot;version&quot;: 95, &quot;versionNonce&quot;: 1129241320, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;5VWLd17WRHl4wRwo48_qa&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 135.75766206439266, &quot;y&quot;: -1233.1374542030744, &quot;strokeColor&quot;: &quot;#c2255c&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 25.449379357016596, &quot;height&quot;: 24.941865080080333, &quot;seed&quot;: 19950547, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1686254622504, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;points&quot;: [ [ 0, 0 ], [ 4.185213513188728, 1.1969177966839197 ], [ 7.045034818978593, 1.7689260810552696 ], [ 12.764970918646782, 2.8851346534179356 ], [ 18.484466786182338, 4.029077850138265 ], [ 23.299579109187334, 4.601012762487471 ], [ 24.899822911411093, 5.225995646822184 ], [ 25.449379357016596, 5.225995646822184 ], [ 25.449379357016596, 5.500773869624936 ], [ 25.449379357016596, 6.05033031523044 ], [ 24.899822911411093, 7.14951657846359 ], [ 22.483388735233348, 10.488016956500587 ], [ 19.789901803567318, 14.731047623112318 ], [ 16.607757204647214, 18.485273878425687 ], [ 14.44078790364415, 21.002374468938797 ], [ 12.424818224143905, 23.018344148438928 ], [ 11.325705332932785, 23.842678816847183 ], [ 10.226592441721778, 24.941865080080333 ], [ 10.226592441721778, 24.941865080080333 ] ], &quot;lastCommittedPoint&quot;: null, &quot;simulatePressure&quot;: true, &quot;pressures&quot;: [] }, { &quot;type&quot;: &quot;ellipse&quot;, &quot;version&quot;: 334, &quot;versionNonce&quot;: 30320536, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;bULQ2guIKlz86D33TrfiR&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 144.68802057676857, &quot;y&quot;: -924.5177986298521, &quot;strokeColor&quot;: &quot;#c2255c&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 10.291173992417612, &quot;height&quot;: 9.993235236837222, &quot;seed&quot;: 283325981, &quot;groupIds&quot;: [], &quot;roundness&quot;: { &quot;type&quot;: 2 }, &quot;boundElements&quot;: [], &quot;updated&quot;: 1686254622504, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;type&quot;: &quot;arrow&quot;, &quot;version&quot;: 1122, &quot;versionNonce&quot;: 1166228968, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;6zQkhk86lEDABNeVVrWc-&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 207.55565791052197, &quot;y&quot;: -1366.9410649278507, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 0.7682805065595062, &quot;height&quot;: 93.36160172812606, &quot;seed&quot;: 415163325, &quot;groupIds&quot;: [], &quot;roundness&quot;: { &quot;type&quot;: 2 }, &quot;boundElements&quot;: [], &quot;updated&quot;: 1686254622504, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;startBinding&quot;: { &quot;elementId&quot;: &quot;NPYQscPv&quot;, &quot;focus&quot;: 0.003978061814332476, &quot;gap&quot;: 6.507902404849574 }, &quot;endBinding&quot;: { &quot;elementId&quot;: &quot;98kABRIO&quot;, &quot;focus&quot;: -0.216119647550072, &quot;gap&quot;: 2.938956124442484 }, &quot;lastCommittedPoint&quot;: null, &quot;startArrowhead&quot;: null, &quot;endArrowhead&quot;: &quot;arrow&quot;, &quot;points&quot;: [ [ 0, 0 ], [ 0.7682805065595062, 93.36160172812606 ] ] }, { &quot;type&quot;: &quot;rectangle&quot;, &quot;version&quot;: 1144, &quot;versionNonce&quot;: 902165656, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;RhjM2O-JTBZTrSvwxRCk9&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 190.96386176902524, &quot;y&quot;: -1238.3827717436043, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;#ced4da&quot;, &quot;width&quot;: 168, &quot;height&quot;: 36, &quot;seed&quot;: 1699524584, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [ { &quot;type&quot;: &quot;text&quot;, &quot;id&quot;: &quot;wudKg9Zn&quot; }, { &quot;id&quot;: &quot;fvnqxt74aMDC18ZOjQkm_&quot;, &quot;type&quot;: &quot;arrow&quot; }, { &quot;id&quot;: &quot;JQ6nkdl6sxsma0Gmc0cNU&quot;, &quot;type&quot;: &quot;arrow&quot; } ], &quot;updated&quot;: 1686254622504, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;customData&quot;: { &quot;legacyTextWrap&quot;: true } }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 861, &quot;versionNonce&quot;: 1764966632, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;wudKg9Zn&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 225.17990333396665, &quot;y&quot;: -1230.3827717436043, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;#ced4da&quot;, &quot;width&quot;: 99.56791687011719, &quot;height&quot;: 20, &quot;seed&quot;: 1929278184, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1686254622504, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 16, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;core.Function&quot;, &quot;rawText&quot;: &quot;core.Function&quot;, &quot;textAlign&quot;: &quot;center&quot;, &quot;verticalAlign&quot;: &quot;middle&quot;, &quot;containerId&quot;: &quot;RhjM2O-JTBZTrSvwxRCk9&quot;, &quot;originalText&quot;: &quot;core.Function&quot;, &quot;lineHeight&quot;: 1.25, &quot;baseline&quot;: 14 }, { &quot;type&quot;: &quot;diamond&quot;, &quot;version&quot;: 682, &quot;versionNonce&quot;: 1733009816, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;t9dXhnzhHwwLUwertuswv&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 251.7506921261679, &quot;y&quot;: -1158.7698915817741, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;#ced4da&quot;, &quot;width&quot;: 57.25048828124997, &quot;height&quot;: 57.25048828124997, &quot;seed&quot;: 473988504, &quot;groupIds&quot;: [], &quot;roundness&quot;: { &quot;type&quot;: 2 }, &quot;boundElements&quot;: [ { &quot;id&quot;: &quot;fvnqxt74aMDC18ZOjQkm_&quot;, &quot;type&quot;: &quot;arrow&quot; }, { &quot;id&quot;: &quot;dkenj-OlXq1jcDOyOVYsH&quot;, &quot;type&quot;: &quot;arrow&quot; }, { &quot;id&quot;: &quot;JQ6nkdl6sxsma0Gmc0cNU&quot;, &quot;type&quot;: &quot;arrow&quot; }, { &quot;id&quot;: &quot;Px7LruMAXpfOqrv3rP85P&quot;, &quot;type&quot;: &quot;arrow&quot; }, { &quot;id&quot;: &quot;DtCeAS3N2cgN4YywH9sxn&quot;, &quot;type&quot;: &quot;arrow&quot; } ], &quot;updated&quot;: 1686254622504, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;customData&quot;: { &quot;legacyTextWrap&quot;: true } }, { &quot;type&quot;: &quot;rectangle&quot;, &quot;version&quot;: 1267, &quot;versionNonce&quot;: 1038803944, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;zu1TfzJPPcbc9ptORYGFf&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 201.13223160719485, &quot;y&quot;: -1063.7128411492963, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;#ced4da&quot;, &quot;width&quot;: 168, &quot;height&quot;: 36, &quot;seed&quot;: 1988456680, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [ { &quot;type&quot;: &quot;text&quot;, &quot;id&quot;: &quot;Nivwk3dT&quot; }, { &quot;id&quot;: &quot;ecb4xuC3CCTeAgN5Q6vL7&quot;, &quot;type&quot;: &quot;arrow&quot; }, { &quot;id&quot;: &quot;Qe1yPHS4T9EnpFHh6ONof&quot;, &quot;type&quot;: &quot;arrow&quot; }, { &quot;id&quot;: &quot;n2ARW2tHBHWiaVNG_UGCH&quot;, &quot;type&quot;: &quot;arrow&quot; }, { &quot;id&quot;: &quot;MOWREmtAKT0wHDsyhnrDL&quot;, &quot;type&quot;: &quot;arrow&quot; } ], &quot;updated&quot;: 1686254622504, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;customData&quot;: { &quot;legacyTextWrap&quot;: true } }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 990, &quot;versionNonce&quot;: 362000024, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;Nivwk3dT&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 221.67627610182376, &quot;y&quot;: -1055.7128411492963, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;#ced4da&quot;, &quot;width&quot;: 126.91191101074219, &quot;height&quot;: 20, &quot;seed&quot;: 1098322920, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1686254622504, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 16, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;core.otherSymbol&quot;, &quot;rawText&quot;: &quot;core.otherSymbol&quot;, &quot;textAlign&quot;: &quot;center&quot;, &quot;verticalAlign&quot;: &quot;middle&quot;, &quot;containerId&quot;: &quot;zu1TfzJPPcbc9ptORYGFf&quot;, &quot;originalText&quot;: &quot;core.otherSymbol&quot;, &quot;lineHeight&quot;: 1.25, &quot;baseline&quot;: 14 }, { &quot;type&quot;: &quot;arrow&quot;, &quot;version&quot;: 781, &quot;versionNonce&quot;: 28714728, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;ecb4xuC3CCTeAgN5Q6vL7&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 280.6324509710711, &quot;y&quot;: -1102.234831424688, &quot;strokeColor&quot;: &quot;#495057&quot;, &quot;backgroundColor&quot;: &quot;#ced4da&quot;, &quot;width&quot;: 2.221298256734485, &quot;height&quot;: 37.084271673950525, &quot;seed&quot;: 1157477864, &quot;groupIds&quot;: [], &quot;roundness&quot;: { &quot;type&quot;: 2 }, &quot;boundElements&quot;: [], &quot;updated&quot;: 1686254622504, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;startBinding&quot;: null, &quot;endBinding&quot;: { &quot;elementId&quot;: &quot;zu1TfzJPPcbc9ptORYGFf&quot;, &quot;gap&quot;: 1.4377186014412473, &quot;focus&quot;: -0.013096061706266553 }, &quot;lastCommittedPoint&quot;: null, &quot;startArrowhead&quot;: null, &quot;endArrowhead&quot;: &quot;arrow&quot;, &quot;points&quot;: [ [ 0, 0 ], [ 2.221298256734485, 37.084271673950525 ] ] }, { &quot;type&quot;: &quot;arrow&quot;, &quot;version&quot;: 954, &quot;versionNonce&quot;: 961682328, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;dkenj-OlXq1jcDOyOVYsH&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 310.1487834233367, &quot;y&quot;: -1127.3749159937752, &quot;strokeColor&quot;: &quot;#495057&quot;, &quot;backgroundColor&quot;: &quot;#ced4da&quot;, &quot;width&quot;: 24.737952135082764, &quot;height&quot;: 10.53343374844826, &quot;seed&quot;: 1509707672, &quot;groupIds&quot;: [], &quot;roundness&quot;: { &quot;type&quot;: 2 }, &quot;boundElements&quot;: [], &quot;updated&quot;: 1686254622504, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;startBinding&quot;: { &quot;elementId&quot;: &quot;t9dXhnzhHwwLUwertuswv&quot;, &quot;gap&quot;: 2.769973763170043, &quot;focus&quot;: -0.34611279983707877 }, &quot;endBinding&quot;: { &quot;elementId&quot;: &quot;ENpBunBgJANWWb9y5-KMh&quot;, &quot;gap&quot;: 2.5268681190880216, &quot;focus&quot;: -0.37154048866342143 }, &quot;lastCommittedPoint&quot;: null, &quot;startArrowhead&quot;: null, &quot;endArrowhead&quot;: &quot;arrow&quot;, &quot;points&quot;: [ [ 0, 0 ], [ 24.737952135082764, 10.53343374844826 ] ] }, { &quot;id&quot;: &quot;ENpBunBgJANWWb9y5-KMh&quot;, &quot;type&quot;: &quot;rectangle&quot;, &quot;x&quot;: 337.41360367750747, &quot;y&quot;: -1130.1838843273097, &quot;width&quot;: 46, &quot;height&quot;: 30, &quot;angle&quot;: 0, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;#ced4da&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;seed&quot;: 844656872, &quot;version&quot;: 212, &quot;versionNonce&quot;: 1361119720, &quot;isDeleted&quot;: false, &quot;boundElements&quot;: [ { &quot;type&quot;: &quot;text&quot;, &quot;id&quot;: &quot;mN47U8os&quot; }, { &quot;id&quot;: &quot;dkenj-OlXq1jcDOyOVYsH&quot;, &quot;type&quot;: &quot;arrow&quot; }, { &quot;id&quot;: &quot;Qe1yPHS4T9EnpFHh6ONof&quot;, &quot;type&quot;: &quot;arrow&quot; }, { &quot;id&quot;: &quot;Px7LruMAXpfOqrv3rP85P&quot;, &quot;type&quot;: &quot;arrow&quot; } ], &quot;updated&quot;: 1686254622504, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;id&quot;: &quot;mN47U8os&quot;, &quot;type&quot;: &quot;text&quot;, &quot;x&quot;: 353.83762253737075, &quot;y&quot;: -1125.1838843273097, &quot;width&quot;: 13.151962280273438, &quot;height&quot;: 20, &quot;angle&quot;: 0, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;#ced4da&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;seed&quot;: 928673176, &quot;version&quot;: 124, &quot;versionNonce&quot;: 347793560, &quot;isDeleted&quot;: false, &quot;boundElements&quot;: null, &quot;updated&quot;: 1686254622504, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;text&quot;: &quot;...&quot;, &quot;rawText&quot;: &quot;...&quot;, &quot;fontSize&quot;: 16, &quot;fontFamily&quot;: 1, &quot;textAlign&quot;: &quot;center&quot;, &quot;verticalAlign&quot;: &quot;middle&quot;, &quot;baseline&quot;: 14, &quot;containerId&quot;: &quot;ENpBunBgJANWWb9y5-KMh&quot;, &quot;originalText&quot;: &quot;...&quot;, &quot;lineHeight&quot;: 1.25 }, { &quot;type&quot;: &quot;rectangle&quot;, &quot;version&quot;: 310, &quot;versionNonce&quot;: 1463258344, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;s9jkxX9PBf4_X6c0M5oVF&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 187.99239134491802, &quot;y&quot;: -1115.436166606188, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;#ced4da&quot;, &quot;width&quot;: 46, &quot;height&quot;: 30, &quot;seed&quot;: 360422552, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [ { &quot;type&quot;: &quot;text&quot;, &quot;id&quot;: &quot;sjR3pZbV&quot; }, { &quot;id&quot;: &quot;a4Km7bhiivCQ7cHl-sjD8&quot;, &quot;type&quot;: &quot;arrow&quot; } ], &quot;updated&quot;: 1686254622504, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 219, &quot;versionNonce&quot;: 58856856, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;sjR3pZbV&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 204.4164102047813, &quot;y&quot;: -1110.436166606188, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;#ced4da&quot;, &quot;width&quot;: 13.151962280273438, &quot;height&quot;: 20, &quot;seed&quot;: 302795160, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1686254622504, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 16, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;...&quot;, &quot;rawText&quot;: &quot;...&quot;, &quot;textAlign&quot;: &quot;center&quot;, &quot;verticalAlign&quot;: &quot;middle&quot;, &quot;containerId&quot;: &quot;s9jkxX9PBf4_X6c0M5oVF&quot;, &quot;originalText&quot;: &quot;...&quot;, &quot;lineHeight&quot;: 1.25, &quot;baseline&quot;: 14 }, { &quot;type&quot;: &quot;arrow&quot;, &quot;version&quot;: 1103, &quot;versionNonce&quot;: 2105913320, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;a4Km7bhiivCQ7cHl-sjD8&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 253.67806187113473, &quot;y&quot;: -1130.4047528505143, &quot;strokeColor&quot;: &quot;#495057&quot;, &quot;backgroundColor&quot;: &quot;#ced4da&quot;, &quot;width&quot;: 24.89906307139057, &quot;height&quot;: 11.24165954364912, &quot;seed&quot;: 63574424, &quot;groupIds&quot;: [], &quot;roundness&quot;: { &quot;type&quot;: 2 }, &quot;boundElements&quot;: [], &quot;updated&quot;: 1686254622505, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;startBinding&quot;: null, &quot;endBinding&quot;: { &quot;elementId&quot;: &quot;s9jkxX9PBf4_X6c0M5oVF&quot;, &quot;gap&quot;: 3.726926700677268, &quot;focus&quot;: -0.42138188940747456 }, &quot;lastCommittedPoint&quot;: null, &quot;startArrowhead&quot;: null, &quot;endArrowhead&quot;: &quot;arrow&quot;, &quot;points&quot;: [ [ 0, 0 ], [ -24.89906307139057, 11.24165954364912 ] ] }, { &quot;id&quot;: &quot;Qe1yPHS4T9EnpFHh6ONof&quot;, &quot;type&quot;: &quot;arrow&quot;, &quot;x&quot;: 368.24694282371274, &quot;y&quot;: -1095.3177039073878, &quot;width&quot;: 24.38172171266831, &quot;height&quot;: 26.5699128446945, &quot;angle&quot;: 0, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;#ced4da&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;seed&quot;: 221058712, &quot;version&quot;: 70, &quot;versionNonce&quot;: 1255907992, &quot;isDeleted&quot;: false, &quot;boundElements&quot;: null, &quot;updated&quot;: 1686254622505, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;points&quot;: [ [ 0, 0 ], [ 24.38172171266831, 26.5699128446945 ] ], &quot;lastCommittedPoint&quot;: null, &quot;startBinding&quot;: { &quot;elementId&quot;: &quot;ENpBunBgJANWWb9y5-KMh&quot;, &quot;gap&quot;: 4.866180419921875, &quot;focus&quot;: 0.2827917483225825 }, &quot;endBinding&quot;: { &quot;elementId&quot;: &quot;zu1TfzJPPcbc9ptORYGFf&quot;, &quot;gap&quot;: 14.710113525390625, &quot;focus&quot;: 1.2797194396331688 }, &quot;startArrowhead&quot;: null, &quot;endArrowhead&quot;: &quot;arrow&quot; }, { &quot;type&quot;: &quot;rectangle&quot;, &quot;version&quot;: 1088, &quot;versionNonce&quot;: 471298792, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;VVYINp_-djTqY1WcdTEwi&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 175.59434185412567, &quot;y&quot;: -945.9809086454599, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 223.2444806780134, &quot;height&quot;: 265.84989929199224, &quot;seed&quot;: 1845302760, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [ { &quot;id&quot;: &quot;MOWREmtAKT0wHDsyhnrDL&quot;, &quot;type&quot;: &quot;arrow&quot; } ], &quot;updated&quot;: 1686254622505, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;customData&quot;: { &quot;legacyTextWrap&quot;: true } }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 511, &quot;versionNonce&quot;: 1769705368, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;7VCLkKzy&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 182.25479020094485, &quot;y&quot;: -941.1295701226846, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;#228be6&quot;, &quot;width&quot;: 71.63194274902344, &quot;height&quot;: 20, &quot;seed&quot;: 347216104, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1686254622505, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;customData&quot;: { &quot;legacyTextWrap&quot;: true }, &quot;fontSize&quot;: 16, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;instance &quot;, &quot;rawText&quot;: &quot;instance &quot;, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;instance &quot;, &quot;lineHeight&quot;: 1.25, &quot;baseline&quot;: 14 }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 464, &quot;versionNonce&quot;: 695784936, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;vR7deZXW&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;dashed&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 340.3688447739262, &quot;y&quot;: -944.1571150661294, &quot;strokeColor&quot;: &quot;#495057&quot;, &quot;backgroundColor&quot;: &quot;#ced4da&quot;, &quot;width&quot;: 56.43994140625, &quot;height&quot;: 25, &quot;seed&quot;: 1137621992, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1686254622505, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;customData&quot;: { &quot;legacyTextWrap&quot;: true }, &quot;fontSize&quot;: 20, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;uid_4&quot;, &quot;rawText&quot;: &quot;uid_4&quot;, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;uid_4&quot;, &quot;lineHeight&quot;: 1.25, &quot;baseline&quot;: 17 }, { &quot;type&quot;: &quot;arrow&quot;, &quot;version&quot;: 974, &quot;versionNonce&quot;: 1737874584, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;yzwIXI5Dt_cznnT6gWxUe&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 280.02710879392976, &quot;y&quot;: -867.3431806355546, &quot;strokeColor&quot;: &quot;#495057&quot;, &quot;backgroundColor&quot;: &quot;#ced4da&quot;, &quot;width&quot;: 2.221298256734599, &quot;height&quot;: 37.08427167395098, &quot;seed&quot;: 1298071272, &quot;groupIds&quot;: [], &quot;roundness&quot;: { &quot;type&quot;: 2 }, &quot;boundElements&quot;: [], &quot;updated&quot;: 1686254622505, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;startBinding&quot;: { &quot;elementId&quot;: &quot;qvH4LGky3TVPxHkhisNtx&quot;, &quot;gap&quot;: 5.528654155452614, &quot;focus&quot;: -0.020826545524459505 }, &quot;endBinding&quot;: { &quot;elementId&quot;: &quot;yPFZ0EFln3Vkn4VxuKkrG&quot;, &quot;gap&quot;: 1, &quot;focus&quot;: 0.06165721801171734 }, &quot;lastCommittedPoint&quot;: null, &quot;startArrowhead&quot;: null, &quot;endArrowhead&quot;: &quot;arrow&quot;, &quot;points&quot;: [ [ 0, 0 ], [ 2.221298256734599, 37.08427167395098 ] ] }, { &quot;type&quot;: &quot;rectangle&quot;, &quot;version&quot;: 1206, &quot;versionNonce&quot;: 1790302440, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;qvH4LGky3TVPxHkhisNtx&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 192.84588938607362, &quot;y&quot;: -908.8718347910072, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;#ced4da&quot;, &quot;width&quot;: 168, &quot;height&quot;: 36, &quot;seed&quot;: 1643045352, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [ { &quot;type&quot;: &quot;text&quot;, &quot;id&quot;: &quot;2DCysDy2&quot; }, { &quot;id&quot;: &quot;yzwIXI5Dt_cznnT6gWxUe&quot;, &quot;type&quot;: &quot;arrow&quot; }, { &quot;id&quot;: &quot;n2ARW2tHBHWiaVNG_UGCH&quot;, &quot;type&quot;: &quot;arrow&quot; }, { &quot;id&quot;: &quot;MOWREmtAKT0wHDsyhnrDL&quot;, &quot;type&quot;: &quot;arrow&quot; }, { &quot;id&quot;: &quot;R9iLKi9g_HCjEKCKy62Nl&quot;, &quot;type&quot;: &quot;arrow&quot; } ], &quot;updated&quot;: 1686254622505, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;customData&quot;: { &quot;legacyTextWrap&quot;: true } }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 922, &quot;versionNonce&quot;: 652118424, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;2DCysDy2&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 221.36593180550722, &quot;y&quot;: -900.8718347910072, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;#ced4da&quot;, &quot;width&quot;: 110.95991516113281, &quot;height&quot;: 20, &quot;seed&quot;: 1082811624, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1686254622505, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 16, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;core.Function2&quot;, &quot;rawText&quot;: &quot;core.Function2&quot;, &quot;textAlign&quot;: &quot;center&quot;, &quot;verticalAlign&quot;: &quot;middle&quot;, &quot;containerId&quot;: &quot;qvH4LGky3TVPxHkhisNtx&quot;, &quot;originalText&quot;: &quot;core.Function2&quot;, &quot;lineHeight&quot;: 1.25, &quot;baseline&quot;: 14 }, { &quot;type&quot;: &quot;diamond&quot;, &quot;version&quot;: 763, &quot;versionNonce&quot;: 593132520, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;yPFZ0EFln3Vkn4VxuKkrG&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 253.63271974321628, &quot;y&quot;: -829.2589546291766, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;#ced4da&quot;, &quot;width&quot;: 57.25048828124997, &quot;height&quot;: 57.25048828124997, &quot;seed&quot;: 1723697128, &quot;groupIds&quot;: [], &quot;roundness&quot;: { &quot;type&quot;: 2 }, &quot;boundElements&quot;: [ { &quot;id&quot;: &quot;yzwIXI5Dt_cznnT6gWxUe&quot;, &quot;type&quot;: &quot;arrow&quot; }, { &quot;id&quot;: &quot;ccJZrBb8ALWJFKRiGS3bz&quot;, &quot;type&quot;: &quot;arrow&quot; }, { &quot;id&quot;: &quot;R9iLKi9g_HCjEKCKy62Nl&quot;, &quot;type&quot;: &quot;arrow&quot; }, { &quot;id&quot;: &quot;re_Q1lYPSlrfoue9wh_Vw&quot;, &quot;type&quot;: &quot;arrow&quot; }, { &quot;id&quot;: &quot;qFnb4i7LFydl9ka9v7h-S&quot;, &quot;type&quot;: &quot;arrow&quot; }, { &quot;id&quot;: &quot;ooRWnrYkUvouFSLMeJOpM&quot;, &quot;type&quot;: &quot;arrow&quot; } ], &quot;updated&quot;: 1686254622505, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;customData&quot;: { &quot;legacyTextWrap&quot;: true } }, { &quot;type&quot;: &quot;rectangle&quot;, &quot;version&quot;: 1348, &quot;versionNonce&quot;: 847877784, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;3p-KL2oTLiv5itorYxAOV&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 203.01425922424323, &quot;y&quot;: -734.2019041966988, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;#ced4da&quot;, &quot;width&quot;: 168, &quot;height&quot;: 36, &quot;seed&quot;: 1083460328, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [ { &quot;type&quot;: &quot;text&quot;, &quot;id&quot;: &quot;f6W1eL8c&quot; }, { &quot;id&quot;: &quot;b4Ifyosb4pS6nKa034KdX&quot;, &quot;type&quot;: &quot;arrow&quot; } ], &quot;updated&quot;: 1686254622505, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;customData&quot;: { &quot;legacyTextWrap&quot;: true } }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 1079, &quot;versionNonce&quot;: 1165147880, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;f6W1eL8c&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 217.86230457336433, &quot;y&quot;: -726.2019041966988, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;#ced4da&quot;, &quot;width&quot;: 138.3039093017578, &quot;height&quot;: 20, &quot;seed&quot;: 1486532072, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1686254622505, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 16, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;core.otherSymbol2&quot;, &quot;rawText&quot;: &quot;core.otherSymbol2&quot;, &quot;textAlign&quot;: &quot;center&quot;, &quot;verticalAlign&quot;: &quot;middle&quot;, &quot;containerId&quot;: &quot;3p-KL2oTLiv5itorYxAOV&quot;, &quot;originalText&quot;: &quot;core.otherSymbol2&quot;, &quot;lineHeight&quot;: 1.25, &quot;baseline&quot;: 14 }, { &quot;type&quot;: &quot;arrow&quot;, &quot;version&quot;: 941, &quot;versionNonce&quot;: 256574360, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;b4Ifyosb4pS6nKa034KdX&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 282.51447858811946, &quot;y&quot;: -772.7238944720908, &quot;strokeColor&quot;: &quot;#495057&quot;, &quot;backgroundColor&quot;: &quot;#ced4da&quot;, &quot;width&quot;: 2.221298256734485, &quot;height&quot;: 37.08427167395075, &quot;seed&quot;: 131903720, &quot;groupIds&quot;: [], &quot;roundness&quot;: { &quot;type&quot;: 2 }, &quot;boundElements&quot;: [], &quot;updated&quot;: 1686254622505, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;startBinding&quot;: null, &quot;endBinding&quot;: { &quot;elementId&quot;: &quot;3p-KL2oTLiv5itorYxAOV&quot;, &quot;gap&quot;: 1.4377186014412473, &quot;focus&quot;: -0.013096061706266633 }, &quot;lastCommittedPoint&quot;: null, &quot;startArrowhead&quot;: null, &quot;endArrowhead&quot;: &quot;arrow&quot;, &quot;points&quot;: [ [ 0, 0 ], [ 2.221298256734485, 37.08427167395075 ] ] }, { &quot;type&quot;: &quot;arrow&quot;, &quot;version&quot;: 1192, &quot;versionNonce&quot;: 562733544, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;ccJZrBb8ALWJFKRiGS3bz&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 312.0308110403853, &quot;y&quot;: -797.8639790411779, &quot;strokeColor&quot;: &quot;#495057&quot;, &quot;backgroundColor&quot;: &quot;#ced4da&quot;, &quot;width&quot;: 24.737952135082537, &quot;height&quot;: 10.533433748448033, &quot;seed&quot;: 635851752, &quot;groupIds&quot;: [], &quot;roundness&quot;: { &quot;type&quot;: 2 }, &quot;boundElements&quot;: [], &quot;updated&quot;: 1686254622505, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;startBinding&quot;: { &quot;elementId&quot;: &quot;yPFZ0EFln3Vkn4VxuKkrG&quot;, &quot;gap&quot;: 2.7699737631700465, &quot;focus&quot;: -0.34611279983708465 }, &quot;endBinding&quot;: { &quot;elementId&quot;: &quot;eTl3n5x6y666GIMG0DL9B&quot;, &quot;gap&quot;: 2.5268681190880216, &quot;focus&quot;: -0.3715404886634086 }, &quot;lastCommittedPoint&quot;: null, &quot;startArrowhead&quot;: null, &quot;endArrowhead&quot;: &quot;arrow&quot;, &quot;points&quot;: [ [ 0, 0 ], [ 24.737952135082537, 10.533433748448033 ] ] }, { &quot;type&quot;: &quot;rectangle&quot;, &quot;version&quot;: 292, &quot;versionNonce&quot;: 190238872, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;eTl3n5x6y666GIMG0DL9B&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 339.29563129455585, &quot;y&quot;: -800.6729473747124, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;#ced4da&quot;, &quot;width&quot;: 46, &quot;height&quot;: 30, &quot;seed&quot;: 952342248, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [ { &quot;type&quot;: &quot;text&quot;, &quot;id&quot;: &quot;8clkL2jK&quot; }, { &quot;id&quot;: &quot;ccJZrBb8ALWJFKRiGS3bz&quot;, &quot;type&quot;: &quot;arrow&quot; }, { &quot;id&quot;: &quot;LHDRmIw_lKZPpSkeqnkFO&quot;, &quot;type&quot;: &quot;arrow&quot; }, { &quot;id&quot;: &quot;dDddZr8-uGpRD2ErkBAku&quot;, &quot;type&quot;: &quot;arrow&quot; } ], &quot;updated&quot;: 1686254622505, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 204, &quot;versionNonce&quot;: 380511464, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;8clkL2jK&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 355.7196501544191, &quot;y&quot;: -795.6729473747124, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;#ced4da&quot;, &quot;width&quot;: 13.151962280273438, &quot;height&quot;: 20, &quot;seed&quot;: 620788200, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1686254622505, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 16, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;...&quot;, &quot;rawText&quot;: &quot;...&quot;, &quot;textAlign&quot;: &quot;center&quot;, &quot;verticalAlign&quot;: &quot;middle&quot;, &quot;containerId&quot;: &quot;eTl3n5x6y666GIMG0DL9B&quot;, &quot;originalText&quot;: &quot;...&quot;, &quot;lineHeight&quot;: 1.25, &quot;baseline&quot;: 14 }, { &quot;type&quot;: &quot;rectangle&quot;, &quot;version&quot;: 387, &quot;versionNonce&quot;: 241237400, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;HN1toN_UmkMKcIL-pm8Tr&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 189.8744189619664, &quot;y&quot;: -785.9252296535907, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;#ced4da&quot;, &quot;width&quot;: 46, &quot;height&quot;: 30, &quot;seed&quot;: 1571355880, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [ { &quot;type&quot;: &quot;text&quot;, &quot;id&quot;: &quot;evErsAw4&quot; }, { &quot;id&quot;: &quot;0-M0dl-sHytkaCiQjQXP3&quot;, &quot;type&quot;: &quot;arrow&quot; }, { &quot;id&quot;: &quot;re_Q1lYPSlrfoue9wh_Vw&quot;, &quot;type&quot;: &quot;arrow&quot; } ], &quot;updated&quot;: 1686254622505, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 299, &quot;versionNonce&quot;: 1114195944, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;evErsAw4&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 206.29843782182968, &quot;y&quot;: -780.9252296535907, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;#ced4da&quot;, &quot;width&quot;: 13.151962280273438, &quot;height&quot;: 20, &quot;seed&quot;: 340336616, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1686254622505, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 16, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;...&quot;, &quot;rawText&quot;: &quot;...&quot;, &quot;textAlign&quot;: &quot;center&quot;, &quot;verticalAlign&quot;: &quot;middle&quot;, &quot;containerId&quot;: &quot;HN1toN_UmkMKcIL-pm8Tr&quot;, &quot;originalText&quot;: &quot;...&quot;, &quot;lineHeight&quot;: 1.25, &quot;baseline&quot;: 14 }, { &quot;type&quot;: &quot;arrow&quot;, &quot;version&quot;: 1262, &quot;versionNonce&quot;: 1771932312, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;0-M0dl-sHytkaCiQjQXP3&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 255.56008948818305, &quot;y&quot;: -800.8938158979173, &quot;strokeColor&quot;: &quot;#495057&quot;, &quot;backgroundColor&quot;: &quot;#ced4da&quot;, &quot;width&quot;: 24.899063071390657, &quot;height&quot;: 11.241659543649348, &quot;seed&quot;: 1760355048, &quot;groupIds&quot;: [], &quot;roundness&quot;: { &quot;type&quot;: 2 }, &quot;boundElements&quot;: [], &quot;updated&quot;: 1686254622505, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;startBinding&quot;: null, &quot;endBinding&quot;: { &quot;elementId&quot;: &quot;HN1toN_UmkMKcIL-pm8Tr&quot;, &quot;gap&quot;: 3.726926700677268, &quot;focus&quot;: -0.42138188940747207 }, &quot;lastCommittedPoint&quot;: null, &quot;startArrowhead&quot;: null, &quot;endArrowhead&quot;: &quot;arrow&quot;, &quot;points&quot;: [ [ 0, 0 ], [ -24.899063071390657, 11.241659543649348 ] ] }, { &quot;type&quot;: &quot;arrow&quot;, &quot;version&quot;: 355, &quot;versionNonce&quot;: 818416360, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;LHDRmIw_lKZPpSkeqnkFO&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 370.1289704407611, &quot;y&quot;: -765.8067669547905, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;#ced4da&quot;, &quot;width&quot;: 97.41787196378436, &quot;height&quot;: 74.42417833018578, &quot;seed&quot;: 438322664, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1686254622505, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;startBinding&quot;: { &quot;elementId&quot;: &quot;eTl3n5x6y666GIMG0DL9B&quot;, &quot;gap&quot;: 4.866180419921875, &quot;focus&quot;: 0.42619630795610003 }, &quot;endBinding&quot;: { &quot;elementId&quot;: &quot;NdnGa8IM&quot;, &quot;gap&quot;: 9.269069055816317, &quot;focus&quot;: -0.8391840292333933 }, &quot;lastCommittedPoint&quot;: null, &quot;startArrowhead&quot;: null, &quot;endArrowhead&quot;: &quot;arrow&quot;, &quot;points&quot;: [ [ 0, 0 ], [ 97.41787196378436, 74.42417833018578 ] ] }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 429, &quot;versionNonce&quot;: 666924952, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;mThHQxRF&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 310.73715213070227, &quot;y&quot;: -988.1621601713382, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;#ced4da&quot;, &quot;width&quot;: 133.08790588378906, &quot;height&quot;: 20, &quot;seed&quot;: 297045224, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1686254622505, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;customData&quot;: { &quot;legacyTextWrap&quot;: true }, &quot;fontSize&quot;: 16, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;Create container&quot;, &quot;rawText&quot;: &quot;Create container&quot;, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;Create container&quot;, &quot;lineHeight&quot;: 1.25, &quot;baseline&quot;: 14 }, { &quot;type&quot;: &quot;ellipse&quot;, &quot;version&quot;: 548, &quot;versionNonce&quot;: 206990824, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;QYfne8NQbkUpWJTOrmFsQ&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 273.2274954970527, &quot;y&quot;: -986.4272609229427, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;#ced4da&quot;, &quot;width&quot;: 15.568679809570312, &quot;height&quot;: 15.568679809570312, &quot;seed&quot;: 598016232, &quot;groupIds&quot;: [], &quot;roundness&quot;: { &quot;type&quot;: 2 }, &quot;boundElements&quot;: [], &quot;updated&quot;: 1686254622505, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;id&quot;: &quot;n2ARW2tHBHWiaVNG_UGCH&quot;, &quot;type&quot;: &quot;arrow&quot;, &quot;x&quot;: 282.4219218973734, &quot;y&quot;: -1023.8594868314947, &quot;width&quot;: 1.2572370256696104, &quot;height&quot;: 111.30780901227683, &quot;angle&quot;: 0, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;#ced4da&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;seed&quot;: 318336920, &quot;version&quot;: 77, &quot;versionNonce&quot;: 1560134808, &quot;isDeleted&quot;: false, &quot;boundElements&quot;: null, &quot;updated&quot;: 1686254622505, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;points&quot;: [ [ 0, 0 ], [ -1.2572370256696104, 111.30780901227683 ] ], &quot;lastCommittedPoint&quot;: null, &quot;startBinding&quot;: { &quot;elementId&quot;: &quot;zu1TfzJPPcbc9ptORYGFf&quot;, &quot;gap&quot;: 3.8533543178016316, &quot;focus&quot;: 0.02925624885680618 }, &quot;endBinding&quot;: { &quot;elementId&quot;: &quot;qvH4LGky3TVPxHkhisNtx&quot;, &quot;gap&quot;: 3.6798430282105983, &quot;focus&quot;: 0.048381928860581715 }, &quot;startArrowhead&quot;: null, &quot;endArrowhead&quot;: &quot;arrow&quot; }, { &quot;type&quot;: &quot;rectangle&quot;, &quot;version&quot;: 1126, &quot;versionNonce&quot;: 1310748904, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;Tvmw6g6k9SUwJNW1qanXv&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 451.537073438947, &quot;y&quot;: -708.3961133748124, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 200.7925240652902, &quot;height&quot;: 49.02717154366631, &quot;seed&quot;: 1269637784, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [ { &quot;id&quot;: &quot;dDddZr8-uGpRD2ErkBAku&quot;, &quot;type&quot;: &quot;arrow&quot; } ], &quot;updated&quot;: 1686254622505, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;customData&quot;: { &quot;legacyTextWrap&quot;: true } }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 544, &quot;versionNonce&quot;: 1997107608, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;9DQzK8c2&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 449.36059086212776, &quot;y&quot;: -763.6295814635383, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;#ced4da&quot;, &quot;width&quot;: 80.05410766601562, &quot;height&quot;: 45.312752259258616, &quot;seed&quot;: 183684328, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1686254622505, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;customData&quot;: { &quot;legacyTextWrap&quot;: true }, &quot;fontSize&quot;: 18.125100903703448, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;Create \\ncontainer&quot;, &quot;rawText&quot;: &quot;Create \\ncontainer&quot;, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;Create \\ncontainer&quot;, &quot;lineHeight&quot;: 1.25, &quot;baseline&quot;: 38 }, { &quot;id&quot;: &quot;trWxx5_1_OQPfARn44YDp&quot;, &quot;type&quot;: &quot;ellipse&quot;, &quot;x&quot;: 423.7642593694717, &quot;y&quot;: -726.0187798699992, &quot;width&quot;: 15.16060965401789, &quot;height&quot;: 16.45786830357156, &quot;angle&quot;: 0, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;#ced4da&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;seed&quot;: 1945371288, &quot;version&quot;: 147, &quot;versionNonce&quot;: 1840387048, &quot;isDeleted&quot;: false, &quot;boundElements&quot;: null, &quot;updated&quot;: 1686254622505, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 564, &quot;versionNonce&quot;: 219643544, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;NdnGa8IM&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 476.8159114603618, &quot;y&quot;: -698.2928625987936, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;#228be6&quot;, &quot;width&quot;: 71.63194274902344, &quot;height&quot;: 20, &quot;seed&quot;: 938683288, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [ { &quot;id&quot;: &quot;LHDRmIw_lKZPpSkeqnkFO&quot;, &quot;type&quot;: &quot;arrow&quot; } ], &quot;updated&quot;: 1686254622505, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;customData&quot;: { &quot;legacyTextWrap&quot;: true }, &quot;fontSize&quot;: 16, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;instance &quot;, &quot;rawText&quot;: &quot;instance &quot;, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;instance &quot;, &quot;lineHeight&quot;: 1.25, &quot;baseline&quot;: 14 }, { &quot;id&quot;: &quot;OAGfxCj8Q0HTyolXOPCFG&quot;, &quot;type&quot;: &quot;rectangle&quot;, &quot;x&quot;: 555.6965452232662, &quot;y&quot;: -695.9069547444411, &quot;width&quot;: 21.74412318638383, &quot;height&quot;: 20.16265869140625, &quot;angle&quot;: 0, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;#ced4da&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;seed&quot;: 785618920, &quot;version&quot;: 86, &quot;versionNonce&quot;: 286742248, &quot;isDeleted&quot;: false, &quot;boundElements&quot;: null, &quot;updated&quot;: 1686254622505, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;type&quot;: &quot;rectangle&quot;, &quot;version&quot;: 137, &quot;versionNonce&quot;: 802941848, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;OTwuXqebyYfvohbYK0AWt&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 586.6917234459224, &quot;y&quot;: -694.3317463529789, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;#ced4da&quot;, &quot;width&quot;: 21.74412318638383, &quot;height&quot;: 20.16265869140625, &quot;seed&quot;: 221817240, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1686254622506, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;type&quot;: &quot;rectangle&quot;, &quot;version&quot;: 124, &quot;versionNonce&quot;: 1021065704, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;HZmUIkytrGZ24saBIz41T&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 616.9342945954763, &quot;y&quot;: -694.469206244162, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;#ced4da&quot;, &quot;width&quot;: 21.74412318638383, &quot;height&quot;: 20.16265869140625, &quot;seed&quot;: 1130932376, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1686254622506, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;id&quot;: &quot;SsyPNhMCQaYvQeRKKHqNg&quot;, &quot;type&quot;: &quot;line&quot;, &quot;x&quot;: 496.92247993308774, &quot;y&quot;: -657.1123118872982, &quot;width&quot;: 120.32217843191961, &quot;height&quot;: 71.52605329241078, &quot;angle&quot;: 0, &quot;strokeColor&quot;: &quot;#1971c2&quot;, &quot;backgroundColor&quot;: &quot;#ced4da&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;dashed&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;seed&quot;: 1414229144, &quot;version&quot;: 238, &quot;versionNonce&quot;: 965392536, &quot;isDeleted&quot;: false, &quot;boundElements&quot;: null, &quot;updated&quot;: 1686254622506, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;points&quot;: [ [ 0, 0 ], [ 0.7408796037946104, 47.44105747767867 ], [ -116.95146833147328, 47.44105747767867 ], [ -119.581298828125, -24.08499581473211 ] ], &quot;lastCommittedPoint&quot;: [ -119.581298828125, -24.08499581473211 ], &quot;startBinding&quot;: null, &quot;endBinding&quot;: null, &quot;startArrowhead&quot;: null, &quot;endArrowhead&quot;: null }, { &quot;id&quot;: &quot;1MYH20iQ&quot;, &quot;type&quot;: &quot;text&quot;, &quot;x&quot;: 417.67861832594497, &quot;y&quot;: -636.3760535167625, &quot;width&quot;: 32.94178771972656, &quot;height&quot;: 28.68516568501886, &quot;angle&quot;: 0, &quot;strokeColor&quot;: &quot;#1971c2&quot;, &quot;backgroundColor&quot;: &quot;#ced4da&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;dashed&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;seed&quot;: 451292648, &quot;version&quot;: 132, &quot;versionNonce&quot;: 67943656, &quot;isDeleted&quot;: false, &quot;boundElements&quot;: null, &quot;updated&quot;: 1686254622506, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;text&quot;: &quot;link&quot;, &quot;rawText&quot;: &quot;link&quot;, &quot;fontSize&quot;: 22.94813254801509, &quot;fontFamily&quot;: 1, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;baseline&quot;: 20, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;link&quot;, &quot;lineHeight&quot;: 1.25 }, { &quot;id&quot;: &quot;2lyIisFx-VK-_LX14GImI&quot;, &quot;type&quot;: &quot;line&quot;, &quot;x&quot;: 400.89813562505196, &quot;y&quot;: -912.1845949509143, &quot;width&quot;: 90.09791782924106, &quot;height&quot;: 136.07914515904008, &quot;angle&quot;: 0, &quot;strokeColor&quot;: &quot;#1971c2&quot;, &quot;backgroundColor&quot;: &quot;#ced4da&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;dashed&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;seed&quot;: 1113144552, &quot;version&quot;: 188, &quot;versionNonce&quot;: 500688280, &quot;isDeleted&quot;: false, &quot;boundElements&quot;: null, &quot;updated&quot;: 1686254622506, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;points&quot;: [ [ 0, 0 ], [ 88.76499720982144, 1.0262625558036689 ], [ 86.24241420200894, -134.84662737165172 ], [ -1.3329206194196104, -135.0528826032364 ] ], &quot;lastCommittedPoint&quot;: [ -1.3329206194196104, -135.0528826032364 ], &quot;startBinding&quot;: null, &quot;endBinding&quot;: null, &quot;startArrowhead&quot;: null, &quot;endArrowhead&quot;: null }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 174, &quot;versionNonce&quot;: 942989288, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;WSa4Hmf0&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;dashed&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 449.24561857880485, &quot;y&quot;: -1076.6384797604996, &quot;strokeColor&quot;: &quot;#1971c2&quot;, &quot;backgroundColor&quot;: &quot;#ced4da&quot;, &quot;width&quot;: 32.94178771972656, &quot;height&quot;: 28.68516568501886, &quot;seed&quot;: 376772760, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1686254622506, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 22.94813254801509, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;link&quot;, &quot;rawText&quot;: &quot;link&quot;, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;link&quot;, &quot;lineHeight&quot;: 1.25, &quot;baseline&quot;: 20 }, { &quot;type&quot;: &quot;ellipse&quot;, &quot;version&quot;: 398, &quot;versionNonce&quot;: 972518040, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;vdK7bkpS1655PB_Vq6WYi&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 130.46873515228077, &quot;y&quot;: -944.5212132668771, &quot;strokeColor&quot;: &quot;#c2255c&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 10.291173992417612, &quot;height&quot;: 9.993235236837222, &quot;seed&quot;: 1761640168, &quot;groupIds&quot;: [], &quot;roundness&quot;: { &quot;type&quot;: 2 }, &quot;boundElements&quot;: [], &quot;updated&quot;: 1686254622506, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;type&quot;: &quot;ellipse&quot;, &quot;version&quot;: 396, &quot;versionNonce&quot;: 425763560, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;80Wx6LnagrUQmaUDMKxzf&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 144.7847926299592, &quot;y&quot;: -956.9504996787076, &quot;strokeColor&quot;: &quot;#c2255c&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 10.291173992417612, &quot;height&quot;: 9.993235236837222, &quot;seed&quot;: 1342365416, &quot;groupIds&quot;: [], &quot;roundness&quot;: { &quot;type&quot;: 2 }, &quot;boundElements&quot;: [], &quot;updated&quot;: 1686254622506, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;type&quot;: &quot;ellipse&quot;, &quot;version&quot;: 463, &quot;versionNonce&quot;: 614293400, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;NHZcPx5r874hWCAQdhi39&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 115.800068857638, &quot;y&quot;: -985.9307330073912, &quot;strokeColor&quot;: &quot;#c2255c&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 19.233870700006946, &quot;height&quot;: 17.147383883600575, &quot;seed&quot;: 897924840, &quot;groupIds&quot;: [], &quot;roundness&quot;: { &quot;type&quot;: 2 }, &quot;boundElements&quot;: [], &quot;updated&quot;: 1686254622506, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;type&quot;: &quot;ellipse&quot;, &quot;version&quot;: 688, &quot;versionNonce&quot;: 102499816, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;x8LAsNDtfzRFhoFTUeHoF&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 72.68849659201283, &quot;y&quot;: -1016.6718087956157, &quot;strokeColor&quot;: &quot;#c2255c&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 21.459648462283667, &quot;height&quot;: 24.355025485163083, &quot;seed&quot;: 1315207064, &quot;groupIds&quot;: [], &quot;roundness&quot;: { &quot;type&quot;: 2 }, &quot;boundElements&quot;: [], &quot;updated&quot;: 1686254622506, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;type&quot;: &quot;ellipse&quot;, &quot;version&quot;: 523, &quot;versionNonce&quot;: 2113776792, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;bB2n-hggePYPR0mWkyxXc&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 95.35634327170033, &quot;y&quot;: -1049.9716309217326, &quot;strokeColor&quot;: &quot;#c2255c&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 33.081526950006946, &quot;height&quot;: 32.055656763064796, &quot;seed&quot;: 1333595368, &quot;groupIds&quot;: [], &quot;roundness&quot;: { &quot;type&quot;: 2 }, &quot;boundElements&quot;: [], &quot;updated&quot;: 1686254622506, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;type&quot;: &quot;ellipse&quot;, &quot;version&quot;: 585, &quot;versionNonce&quot;: 728959208, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;qk8f5frSvAlt8zB-zphKj&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 26.92956802058427, &quot;y&quot;: -1088.6831787732947, &quot;strokeColor&quot;: &quot;#c2255c&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 44.39343403706061, &quot;height&quot;: 43.53118166540833, &quot;seed&quot;: 962606488, &quot;groupIds&quot;: [], &quot;roundness&quot;: { &quot;type&quot;: 2 }, &quot;boundElements&quot;: [], &quot;updated&quot;: 1686254622506, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;id&quot;: &quot;uQZFKKUG&quot;, &quot;type&quot;: &quot;text&quot;, &quot;x&quot;: 84.62729647884657, &quot;y&quot;: -1078.5071831903113, &quot;width&quot;: 71.40794372558594, &quot;height&quot;: 20, &quot;angle&quot;: 0, &quot;strokeColor&quot;: &quot;#c2255c&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;dashed&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;seed&quot;: 2130327448, &quot;version&quot;: 61, &quot;versionNonce&quot;: 1070356888, &quot;isDeleted&quot;: false, &quot;boundElements&quot;: null, &quot;updated&quot;: 1686254622506, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;text&quot;: &quot;bubble up&quot;, &quot;rawText&quot;: &quot;bubble up&quot;, &quot;fontSize&quot;: 16, &quot;fontFamily&quot;: 1, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;baseline&quot;: 14, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;bubble up&quot;, &quot;lineHeight&quot;: 1.25 }, { &quot;id&quot;: &quot;PkUjNio6F6ez60P1HG-t4&quot;, &quot;type&quot;: &quot;arrow&quot;, &quot;x&quot;: -53.0626100501712, &quot;y&quot;: -928.0837735920971, &quot;width&quot;: 171.6484723772321, &quot;height&quot;: 1.9759259905132467, &quot;angle&quot;: 0, &quot;strokeColor&quot;: &quot;#c2255c&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;seed&quot;: 419883672, &quot;version&quot;: 253, &quot;versionNonce&quot;: 888253416, &quot;isDeleted&quot;: false, &quot;boundElements&quot;: null, &quot;updated&quot;: 1686254622506, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;points&quot;: [ [ 0, 0 ], [ 171.6484723772321, 1.9759259905132467 ] ], &quot;lastCommittedPoint&quot;: null, &quot;startBinding&quot;: { &quot;elementId&quot;: &quot;eRAHCZgz&quot;, &quot;focus&quot;: -0.21957783875822026, &quot;gap&quot;: 10.260173252650645 }, &quot;endBinding&quot;: null, &quot;startArrowhead&quot;: null, &quot;endArrowhead&quot;: &quot;arrow&quot; }, { &quot;id&quot;: &quot;eRAHCZgz&quot;, &quot;type&quot;: &quot;text&quot;, &quot;x&quot;: -149.10273630575153, &quot;y&quot;: -938.3424754615168, &quot;width&quot;: 85.77995300292969, &quot;height&quot;: 25, &quot;angle&quot;: 0, &quot;strokeColor&quot;: &quot;#c2255c&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;seed&quot;: 1717322984, &quot;version&quot;: 66, &quot;versionNonce&quot;: 222127768, &quot;isDeleted&quot;: false, &quot;boundElements&quot;: [ { &quot;id&quot;: &quot;PkUjNio6F6ez60P1HG-t4&quot;, &quot;type&quot;: &quot;arrow&quot; } ], &quot;updated&quot;: 1686254622506, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;text&quot;: &quot;UPDATE&quot;, &quot;rawText&quot;: &quot;UPDATE&quot;, &quot;fontSize&quot;: 20, &quot;fontFamily&quot;: 1, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;baseline&quot;: 17, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;UPDATE&quot;, &quot;lineHeight&quot;: 1.25 }, { &quot;id&quot;: &quot;8eEG3D1W&quot;, &quot;type&quot;: &quot;text&quot;, &quot;x&quot;: 92.05989622773052, &quot;y&quot;: -1293.5680439604007, &quot;width&quot;: 78.179931640625, &quot;height&quot;: 50, &quot;angle&quot;: 0, &quot;strokeColor&quot;: &quot;#c2255c&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;seed&quot;: 733768856, &quot;version&quot;: 56, &quot;versionNonce&quot;: 2091118312, &quot;isDeleted&quot;: false, &quot;boundElements&quot;: null, &quot;updated&quot;: 1686254622506, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;text&quot;: &quot;update \\nmethod&quot;, &quot;rawText&quot;: &quot;update \\nmethod&quot;, &quot;fontSize&quot;: 20, &quot;fontFamily&quot;: 1, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;baseline&quot;: 42, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;update \\nmethod&quot;, &quot;lineHeight&quot;: 1.25 }, { &quot;id&quot;: &quot;JQ6nkdl6sxsma0Gmc0cNU&quot;, &quot;type&quot;: &quot;arrow&quot;, &quot;x&quot;: 260.3121109319717, &quot;y&quot;: -1194.962828070334, &quot;width&quot;: 1.0765729631696104, &quot;height&quot;: 39.81706891741078, &quot;angle&quot;: 0, &quot;strokeColor&quot;: &quot;#c2255c&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;seed&quot;: 1657036008, &quot;version&quot;: 104, &quot;versionNonce&quot;: 50647960, &quot;isDeleted&quot;: false, &quot;boundElements&quot;: null, &quot;updated&quot;: 1686254622506, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;points&quot;: [ [ 0, 0 ], [ 1.0765729631696104, 39.81706891741078 ] ], &quot;lastCommittedPoint&quot;: null, &quot;startBinding&quot;: { &quot;elementId&quot;: &quot;RhjM2O-JTBZTrSvwxRCk9&quot;, &quot;gap&quot;: 7.419943673270382, &quot;focus&quot;: 0.18155588574963089 }, &quot;endBinding&quot;: { &quot;elementId&quot;: &quot;t9dXhnzhHwwLUwertuswv&quot;, &quot;gap&quot;: 10.863366291736593, &quot;focus&quot;: -0.6396896675313168 }, &quot;startArrowhead&quot;: null, &quot;endArrowhead&quot;: &quot;arrow&quot; }, { &quot;type&quot;: &quot;arrow&quot;, &quot;version&quot;: 187, &quot;versionNonce&quot;: 991285736, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;ydysaiFD4kGe9rEm0AABg&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 241.52038774410266, &quot;y&quot;: -1146.5583190475018, &quot;strokeColor&quot;: &quot;#c2255c&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 27.66183035714289, &quot;height&quot;: 21.282784598214448, &quot;seed&quot;: 481656472, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1686254622506, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;startBinding&quot;: null, &quot;endBinding&quot;: null, &quot;lastCommittedPoint&quot;: null, &quot;startArrowhead&quot;: null, &quot;endArrowhead&quot;: &quot;arrow&quot;, &quot;points&quot;: [ [ 0, 0 ], [ -27.66183035714289, 21.282784598214448 ] ] }, { &quot;type&quot;: &quot;arrow&quot;, &quot;version&quot;: 627, &quot;versionNonce&quot;: 123117720, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;Px7LruMAXpfOqrv3rP85P&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 302.82804890642376, &quot;y&quot;: -1146.8644494928894, &quot;strokeColor&quot;: &quot;#c2255c&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 28.451924978461534, &quot;height&quot;: 14.42711588371776, &quot;seed&quot;: 950114712, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1686254622506, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;startBinding&quot;: { &quot;elementId&quot;: &quot;t9dXhnzhHwwLUwertuswv&quot;, &quot;gap&quot;: 7.457622265373118, &quot;focus&quot;: -0.9818114848703058 }, &quot;endBinding&quot;: { &quot;elementId&quot;: &quot;ENpBunBgJANWWb9y5-KMh&quot;, &quot;gap&quot;: 6.53448147130797, &quot;focus&quot;: 0.09303896010619397 }, &quot;lastCommittedPoint&quot;: null, &quot;startArrowhead&quot;: null, &quot;endArrowhead&quot;: &quot;arrow&quot;, &quot;points&quot;: [ [ 0, 0 ], [ 28.451924978461534, 14.42711588371776 ] ] }, { &quot;type&quot;: &quot;arrow&quot;, &quot;version&quot;: 285, &quot;versionNonce&quot;: 928208104, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;DtCeAS3N2cgN4YywH9sxn&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 291.53901643754386, &quot;y&quot;: -1104.3802450058542, &quot;strokeColor&quot;: &quot;#c2255c&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 0.4520089285717859, &quot;height&quot;: 36.09331403459828, &quot;seed&quot;: 835449064, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1686254622506, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;startBinding&quot;: { &quot;elementId&quot;: &quot;t9dXhnzhHwwLUwertuswv&quot;, &quot;focus&quot;: -0.4012450180941931, &quot;gap&quot;: 5.870569117926863 }, &quot;endBinding&quot;: null, &quot;lastCommittedPoint&quot;: null, &quot;startArrowhead&quot;: null, &quot;endArrowhead&quot;: &quot;arrow&quot;, &quot;points&quot;: [ [ 0, 0 ], [ -0.4520089285717859, 36.09331403459828 ] ] }, { &quot;type&quot;: &quot;arrow&quot;, &quot;version&quot;: 376, &quot;versionNonce&quot;: 434556312, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;MOWREmtAKT0wHDsyhnrDL&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 260.166771738883, &quot;y&quot;: -1023.0178531252744, &quot;strokeColor&quot;: &quot;#c2255c&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 0.6120082310267208, &quot;height&quot;: 111.10111781529031, &quot;seed&quot;: 374447256, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1686254622506, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;startBinding&quot;: { &quot;elementId&quot;: &quot;zu1TfzJPPcbc9ptORYGFf&quot;, &quot;gap&quot;: 4.694988024021882, &quot;focus&quot;: 0.2983439846799583 }, &quot;endBinding&quot;: { &quot;elementId&quot;: &quot;qvH4LGky3TVPxHkhisNtx&quot;, &quot;gap&quot;: 3.0449005189767604, &quot;focus&quot;: -0.1896711359425063 }, &quot;lastCommittedPoint&quot;: null, &quot;startArrowhead&quot;: null, &quot;endArrowhead&quot;: &quot;arrow&quot;, &quot;points&quot;: [ [ 0, 0 ], [ 0.6120082310267208, 111.10111781529031 ] ] }, { &quot;type&quot;: &quot;arrow&quot;, &quot;version&quot;: 281, &quot;versionNonce&quot;: 1994946536, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;R9iLKi9g_HCjEKCKy62Nl&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 265.0232519286151, &quot;y&quot;: -868.6140794087565, &quot;strokeColor&quot;: &quot;#c2255c&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 1.3368443080357792, &quot;height&quot;: 41.13191877092629, &quot;seed&quot;: 1590575768, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1686254622506, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;startBinding&quot;: { &quot;elementId&quot;: &quot;qvH4LGky3TVPxHkhisNtx&quot;, &quot;gap&quot;: 4.257755382250821, &quot;focus&quot;: 0.1483246630873649 }, &quot;endBinding&quot;: { &quot;elementId&quot;: &quot;yPFZ0EFln3Vkn4VxuKkrG&quot;, &quot;gap&quot;: 9.985106939681916, &quot;focus&quot;: -0.5248952907195681 }, &quot;lastCommittedPoint&quot;: null, &quot;startArrowhead&quot;: null, &quot;endArrowhead&quot;: &quot;arrow&quot;, &quot;points&quot;: [ [ 0, 0 ], [ 1.3368443080357792, 41.13191877092629 ] ] }, { &quot;type&quot;: &quot;arrow&quot;, &quot;version&quot;: 282, &quot;versionNonce&quot;: 602495640, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;re_Q1lYPSlrfoue9wh_Vw&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 253.7016664096419, &quot;y&quot;: -813.8689665809102, &quot;strokeColor&quot;: &quot;#c2255c&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 35.41216169084822, &quot;height&quot;: 20.38853236607156, &quot;seed&quot;: 322750696, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1686254622506, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;startBinding&quot;: { &quot;elementId&quot;: &quot;yPFZ0EFln3Vkn4VxuKkrG&quot;, &quot;gap&quot;: 9.309986678277529, &quot;focus&quot;: 1.036725776352337 }, &quot;endBinding&quot;: { &quot;elementId&quot;: &quot;HN1toN_UmkMKcIL-pm8Tr&quot;, &quot;gap&quot;: 7.555204561247933, &quot;focus&quot;: -0.6882412262384094 }, &quot;lastCommittedPoint&quot;: null, &quot;startArrowhead&quot;: null, &quot;endArrowhead&quot;: &quot;arrow&quot;, &quot;points&quot;: [ [ 0, 0 ], [ -35.41216169084822, 20.38853236607156 ] ] }, { &quot;type&quot;: &quot;arrow&quot;, &quot;version&quot;: 298, &quot;versionNonce&quot;: 1843477224, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;qFnb4i7LFydl9ka9v7h-S&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 296.99564659937414, &quot;y&quot;: -831.6415539483769, &quot;strokeColor&quot;: &quot;#c2255c&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 32.17912946428555, &quot;height&quot;: 23.779885428292573, &quot;seed&quot;: 11819240, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1686254622506, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;startBinding&quot;: { &quot;elementId&quot;: &quot;yPFZ0EFln3Vkn4VxuKkrG&quot;, &quot;focus&quot;: -1.4636998656033229, &quot;gap&quot;: 12.105867522586014 }, &quot;endBinding&quot;: { &quot;elementId&quot;: &quot;Mmu2aOAKLiOiGelyfp0oS&quot;, &quot;focus&quot;: -1.8840432883913676, &quot;gap&quot;: 15.132187067110445 }, &quot;lastCommittedPoint&quot;: null, &quot;startArrowhead&quot;: null, &quot;endArrowhead&quot;: &quot;arrow&quot;, &quot;points&quot;: [ [ 0, 0 ], [ 32.17912946428555, 23.779885428292573 ] ] }, { &quot;type&quot;: &quot;arrow&quot;, &quot;version&quot;: 296, &quot;versionNonce&quot;: 1209157528, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;ooRWnrYkUvouFSLMeJOpM&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 270.5144977433474, &quot;y&quot;: -774.7298238632767, &quot;strokeColor&quot;: &quot;#c2255c&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 0.16924176897316556, &quot;height&quot;: 37.18680245535745, &quot;seed&quot;: 1625049576, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1686254622506, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;startBinding&quot;: { &quot;elementId&quot;: &quot;yPFZ0EFln3Vkn4VxuKkrG&quot;, &quot;focus&quot;: 0.4061301370724105, &quot;gap&quot;: 6.3795941894408195 }, &quot;endBinding&quot;: null, &quot;lastCommittedPoint&quot;: null, &quot;startArrowhead&quot;: null, &quot;endArrowhead&quot;: &quot;arrow&quot;, &quot;points&quot;: [ [ 0, 0 ], [ -0.16924176897316556, 37.18680245535745 ] ] }, { &quot;type&quot;: &quot;arrow&quot;, &quot;version&quot;: 336, &quot;versionNonce&quot;: 784965096, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;dDddZr8-uGpRD2ErkBAku&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 366.62498881477586, &quot;y&quot;: -761.3069505025067, &quot;strokeColor&quot;: &quot;#c2255c&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 70.37231445312489, &quot;height&quot;: 71.51354108537964, &quot;seed&quot;: 1520124136, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1686254622506, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;startBinding&quot;: { &quot;elementId&quot;: &quot;eTl3n5x6y666GIMG0DL9B&quot;, &quot;gap&quot;: 9.365996872205756, &quot;focus&quot;: 0.520325101500323 }, &quot;endBinding&quot;: { &quot;elementId&quot;: &quot;Tvmw6g6k9SUwJNW1qanXv&quot;, &quot;gap&quot;: 14.5397701710462, &quot;focus&quot;: -0.8763303542372648 }, &quot;lastCommittedPoint&quot;: null, &quot;startArrowhead&quot;: null, &quot;endArrowhead&quot;: &quot;arrow&quot;, &quot;points&quot;: [ [ 0, 0 ], [ 70.37231445312489, 71.51354108537964 ] ] }, { &quot;type&quot;: &quot;ellipse&quot;, &quot;version&quot;: 962, &quot;versionNonce&quot;: 848663704, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;x1EIqtpz0IlGTt9lTR1Ax&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 10, &quot;angle&quot;: 0, &quot;x&quot;: 344.980078932847, &quot;y&quot;: -1208.1561874453341, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;#fab005&quot;, &quot;width&quot;: 42.446224416814395, &quot;height&quot;: 42.446224416814395, &quot;seed&quot;: 801798888, &quot;groupIds&quot;: [ &quot;vwOcLCdcOCrNQJiLZysnE&quot; ], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1686254622506, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;type&quot;: &quot;diamond&quot;, &quot;version&quot;: 1053, &quot;versionNonce&quot;: 447586536, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;COZ5Fjnl568QONKZ1rOBC&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 10, &quot;angle&quot;: 0, &quot;x&quot;: 314.6829523770235, &quot;y&quot;: -1197.973395973912, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;#12b886&quot;, &quot;width&quot;: 44.19874800960462, &quot;height&quot;: 44.19874800960462, &quot;seed&quot;: 1636490728, &quot;groupIds&quot;: [ &quot;vwOcLCdcOCrNQJiLZysnE&quot; ], &quot;roundness&quot;: null, &quot;boundElements&quot;: [ { &quot;id&quot;: &quot;Px7LruMAXpfOqrv3rP85P&quot;, &quot;type&quot;: &quot;arrow&quot; } ], &quot;updated&quot;: 1686254622506, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;type&quot;: &quot;ellipse&quot;, &quot;version&quot;: 1045, &quot;versionNonce&quot;: 1764180376, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;k--0NhRl5HN6wXxkUtJo4&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 10, &quot;angle&quot;: 0, &quot;x&quot;: 344.5113482737974, &quot;y&quot;: -876.5045325206688, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;#fab005&quot;, &quot;width&quot;: 42.446224416814395, &quot;height&quot;: 42.446224416814395, &quot;seed&quot;: 1760557720, &quot;groupIds&quot;: [ &quot;4v0SrycsR2akimDLhD_XZ&quot; ], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1686254622506, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;type&quot;: &quot;diamond&quot;, &quot;version&quot;: 1137, &quot;versionNonce&quot;: 286868456, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;Mmu2aOAKLiOiGelyfp0oS&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 10, &quot;angle&quot;: 0, &quot;x&quot;: 314.214221717974, &quot;y&quot;: -866.3217410492466, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;#12b886&quot;, &quot;width&quot;: 44.19874800960462, &quot;height&quot;: 44.19874800960462, &quot;seed&quot;: 1933895576, &quot;groupIds&quot;: [ &quot;4v0SrycsR2akimDLhD_XZ&quot; ], &quot;roundness&quot;: null, &quot;boundElements&quot;: [ { &quot;id&quot;: &quot;qFnb4i7LFydl9ka9v7h-S&quot;, &quot;type&quot;: &quot;arrow&quot; } ], &quot;updated&quot;: 1686254622506, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;id&quot;: &quot;1nBrlaBR0qoBQnNi1l1ni&quot;, &quot;type&quot;: &quot;rectangle&quot;, &quot;x&quot;: 443.78447386116295, &quot;y&quot;: -1240.1463714236402, &quot;width&quot;: 142, &quot;height&quot;: 35, &quot;angle&quot;: 0, &quot;strokeColor&quot;: &quot;#f08c00&quot;, &quot;backgroundColor&quot;: &quot;#ffec99&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;seed&quot;: 1750351512, &quot;version&quot;: 176, &quot;versionNonce&quot;: 452677272, &quot;isDeleted&quot;: false, &quot;boundElements&quot;: [ { &quot;type&quot;: &quot;text&quot;, &quot;id&quot;: &quot;aY13ZN8a&quot; } ], &quot;updated&quot;: 1686254622506, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;id&quot;: &quot;aY13ZN8a&quot;, &quot;type&quot;: &quot;text&quot;, &quot;x&quot;: 451.2745251306942, &quot;y&quot;: -1235.1463714236402, &quot;width&quot;: 127.0198974609375, &quot;height&quot;: 25, &quot;angle&quot;: 0, &quot;strokeColor&quot;: &quot;#f08c00&quot;, &quot;backgroundColor&quot;: &quot;#ffec99&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;seed&quot;: 1459078376, &quot;version&quot;: 183, &quot;versionNonce&quot;: 538478312, &quot;isDeleted&quot;: false, &quot;boundElements&quot;: null, &quot;updated&quot;: 1686254622506, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;text&quot;: &quot;Local memory&quot;, &quot;rawText&quot;: &quot;Local memory&quot;, &quot;fontSize&quot;: 20, &quot;fontFamily&quot;: 1, &quot;textAlign&quot;: &quot;center&quot;, &quot;verticalAlign&quot;: &quot;middle&quot;, &quot;baseline&quot;: 17, &quot;containerId&quot;: &quot;1nBrlaBR0qoBQnNi1l1ni&quot;, &quot;originalText&quot;: &quot;Local memory&quot;, &quot;lineHeight&quot;: 1.25 }, { &quot;type&quot;: &quot;rectangle&quot;, &quot;version&quot;: 286, &quot;versionNonce&quot;: 1892006808, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;3yBHjaiIAQt3ADZa6_zlt&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 442.545622489857, &quot;y&quot;: -883.6420202590635, &quot;strokeColor&quot;: &quot;#f08c00&quot;, &quot;backgroundColor&quot;: &quot;#ffec99&quot;, &quot;width&quot;: 142, &quot;height&quot;: 35, &quot;seed&quot;: 1546665704, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [ { &quot;type&quot;: &quot;text&quot;, &quot;id&quot;: &quot;YOuzKiYs&quot; } ], &quot;updated&quot;: 1686254622507, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 293, &quot;versionNonce&quot;: 876046824, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;YOuzKiYs&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 450.03567375938826, &quot;y&quot;: -878.6420202590635, &quot;strokeColor&quot;: &quot;#f08c00&quot;, &quot;backgroundColor&quot;: &quot;#ffec99&quot;, &quot;width&quot;: 127.0198974609375, &quot;height&quot;: 25, &quot;seed&quot;: 77079016, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1686254622507, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 20, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;Local memory&quot;, &quot;rawText&quot;: &quot;Local memory&quot;, &quot;textAlign&quot;: &quot;center&quot;, &quot;verticalAlign&quot;: &quot;middle&quot;, &quot;containerId&quot;: &quot;3yBHjaiIAQt3ADZa6_zlt&quot;, &quot;originalText&quot;: &quot;Local memory&quot;, &quot;lineHeight&quot;: 1.25, &quot;baseline&quot;: 17 }, { &quot;type&quot;: &quot;rectangle&quot;, &quot;version&quot;: 257, &quot;versionNonce&quot;: 1555728536, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;87LGGwKv_vMjDG58b_ixd&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 604.0499244331147, &quot;y&quot;: -779.2664419085684, &quot;strokeColor&quot;: &quot;#f08c00&quot;, &quot;backgroundColor&quot;: &quot;#ffec99&quot;, &quot;width&quot;: 142, &quot;height&quot;: 35, &quot;seed&quot;: 2125800680, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [ { &quot;type&quot;: &quot;text&quot;, &quot;id&quot;: &quot;NyALk65w&quot; } ], &quot;updated&quot;: 1686254622507, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 264, &quot;versionNonce&quot;: 1216474344, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;NyALk65w&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 611.539975702646, &quot;y&quot;: -774.2664419085684, &quot;strokeColor&quot;: &quot;#f08c00&quot;, &quot;backgroundColor&quot;: &quot;#ffec99&quot;, &quot;width&quot;: 127.0198974609375, &quot;height&quot;: 25, &quot;seed&quot;: 294668264, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1686254622507, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 20, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;Local memory&quot;, &quot;rawText&quot;: &quot;Local memory&quot;, &quot;textAlign&quot;: &quot;center&quot;, &quot;verticalAlign&quot;: &quot;middle&quot;, &quot;containerId&quot;: &quot;87LGGwKv_vMjDG58b_ixd&quot;, &quot;originalText&quot;: &quot;Local memory&quot;, &quot;lineHeight&quot;: 1.25, &quot;baseline&quot;: 17 }, { &quot;type&quot;: &quot;rectangle&quot;, &quot;version&quot;: 341, &quot;versionNonce&quot;: 1787671960, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;GEyq2XQS-HbYdHUSy3Skv&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 254.4779530208566, &quot;y&quot;: -1409.8327085699848, &quot;strokeColor&quot;: &quot;#9c36b5&quot;, &quot;backgroundColor&quot;: &quot;#eebefa&quot;, &quot;width&quot;: 150, &quot;height&quot;: 40, &quot;seed&quot;: 1918328472, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [ { &quot;type&quot;: &quot;text&quot;, &quot;id&quot;: &quot;zR3bRDDd&quot; } ], &quot;updated&quot;: 1686254622507, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 363, &quot;versionNonce&quot;: 377753576, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;zR3bRDDd&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 261.3780079524972, &quot;y&quot;: -1402.3327085699848, &quot;strokeColor&quot;: &quot;#9c36b5&quot;, &quot;backgroundColor&quot;: &quot;#ffec99&quot;, &quot;width&quot;: 136.19989013671875, &quot;height&quot;: 25, &quot;seed&quot;: 572509080, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1686254622507, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 20, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;Global memory&quot;, &quot;rawText&quot;: &quot;Global memory&quot;, &quot;textAlign&quot;: &quot;center&quot;, &quot;verticalAlign&quot;: &quot;middle&quot;, &quot;containerId&quot;: &quot;GEyq2XQS-HbYdHUSy3Skv&quot;, &quot;originalText&quot;: &quot;Global memory&quot;, &quot;lineHeight&quot;: 1.25, &quot;baseline&quot;: 17 }, { &quot;id&quot;: &quot;OxFZOahkcoS5vSoAuadpQ&quot;, &quot;type&quot;: &quot;line&quot;, &quot;x&quot;: 405.23598101794266, &quot;y&quot;: -1389.564993817371, &quot;width&quot;: 157.86773247228837, &quot;height&quot;: 680.8335384221614, &quot;angle&quot;: 0, &quot;strokeColor&quot;: &quot;#9c36b5&quot;, &quot;backgroundColor&quot;: &quot;#eebefa&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;seed&quot;: 546127848, &quot;version&quot;: 425, &quot;versionNonce&quot;: 259211928, &quot;isDeleted&quot;: false, &quot;boundElements&quot;: null, &quot;updated&quot;: 1686254622507, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;points&quot;: [ [ 0, 0 ], [ 19.508574353724157, 2.111668405819728 ], [ 22.771652458112726, 616.1000226418066 ], [ 157.4445275737827, 618.0652330137228 ], [ 157.86773247228837, 680.8335384221614 ] ], &quot;lastCommittedPoint&quot;: [ 157.86773247228837, 680.8335384221614 ], &quot;startBinding&quot;: null, &quot;endBinding&quot;: null, &quot;startArrowhead&quot;: null, &quot;endArrowhead&quot;: null }, { &quot;id&quot;: &quot;Jp7p5GYCLrXZKjOsGd-Pj&quot;, &quot;type&quot;: &quot;line&quot;, &quot;x&quot;: 398.02259675695154, &quot;y&quot;: -1223.685088912959, &quot;width&quot;: 47.622413419700365, &quot;height&quot;: 0.6577937036088315, &quot;angle&quot;: 0, &quot;strokeColor&quot;: &quot;#f08c00&quot;, &quot;backgroundColor&quot;: &quot;#eebefa&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;seed&quot;: 1617972376, &quot;version&quot;: 95, &quot;versionNonce&quot;: 1179243240, &quot;isDeleted&quot;: false, &quot;boundElements&quot;: null, &quot;updated&quot;: 1686254622507, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;points&quot;: [ [ 0, 0 ], [ 47.622413419700365, -0.6577937036088315 ] ], &quot;lastCommittedPoint&quot;: [ 47.622413419700365, -0.6577937036088315 ], &quot;startBinding&quot;: null, &quot;endBinding&quot;: null, &quot;startArrowhead&quot;: null, &quot;endArrowhead&quot;: null }, { &quot;type&quot;: &quot;line&quot;, &quot;version&quot;: 163, &quot;versionNonce&quot;: 2048864152, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;0PoXsQwlZYSp_zOMrByi0&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 396.9201880265359, &quot;y&quot;: -865.2224491283962, &quot;strokeColor&quot;: &quot;#f08c00&quot;, &quot;backgroundColor&quot;: &quot;#eebefa&quot;, &quot;width&quot;: 47.622413419700365, &quot;height&quot;: 0.6577937036088315, &quot;seed&quot;: 808741272, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1686254622507, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;startBinding&quot;: null, &quot;endBinding&quot;: null, &quot;lastCommittedPoint&quot;: null, &quot;startArrowhead&quot;: null, &quot;endArrowhead&quot;: null, &quot;points&quot;: [ [ 0, 0 ], [ 47.622413419700365, -0.6577937036088315 ] ] }, { &quot;type&quot;: &quot;line&quot;, &quot;version&quot;: 195, &quot;versionNonce&quot;: 509556200, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;j-L429b5lPmCLJDMpaHSj&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 623.9190657804688, &quot;y&quot;: -708.2324312118361, &quot;strokeColor&quot;: &quot;#f08c00&quot;, &quot;backgroundColor&quot;: &quot;#eebefa&quot;, &quot;width&quot;: 1.2633143667184186, &quot;height&quot;: 40.43132641609725, &quot;seed&quot;: 1678025960, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1686254622507, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;startBinding&quot;: null, &quot;endBinding&quot;: null, &quot;lastCommittedPoint&quot;: null, &quot;startArrowhead&quot;: null, &quot;endArrowhead&quot;: null, &quot;points&quot;: [ [ 0, 0 ], [ 1.2633143667184186, -40.43132641609725 ] ] }, { &quot;id&quot;: &quot;XvUKF-9D2EJGs6FFmFPz7&quot;, &quot;type&quot;: &quot;line&quot;, &quot;x&quot;: 427.7092538418682, &quot;y&quot;: -1191.2525713409482, &quot;width&quot;: 31.562087771455595, &quot;height&quot;: 1.2488432990098772, &quot;angle&quot;: 0, &quot;strokeColor&quot;: &quot;#9c36b5&quot;, &quot;backgroundColor&quot;: &quot;#eebefa&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;seed&quot;: 1639874792, &quot;version&quot;: 49, &quot;versionNonce&quot;: 1657109656, &quot;isDeleted&quot;: false, &quot;boundElements&quot;: null, &quot;updated&quot;: 1686254622507, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;points&quot;: [ [ 0, 0 ], [ -31.562087771455595, 1.2488432990098772 ] ], &quot;lastCommittedPoint&quot;: [ -31.562087771455595, 1.2488432990098772 ], &quot;startBinding&quot;: null, &quot;endBinding&quot;: null, &quot;startArrowhead&quot;: null, &quot;endArrowhead&quot;: null }, { &quot;type&quot;: &quot;line&quot;, &quot;version&quot;: 238, &quot;versionNonce&quot;: 1611753880, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;hUsFaeEeJS4Cp0rRJGKOa&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 426.8897351732619, &quot;y&quot;: -834.0076565373058, &quot;strokeColor&quot;: &quot;#9c36b5&quot;, &quot;backgroundColor&quot;: &quot;#eebefa&quot;, &quot;width&quot;: 27.803744757929508, &quot;height&quot;: 1.4766887834455247, &quot;seed&quot;: 1570713320, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1686254629786, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;startBinding&quot;: null, &quot;endBinding&quot;: null, &quot;lastCommittedPoint&quot;: null, &quot;startArrowhead&quot;: null, &quot;endArrowhead&quot;: null, &quot;points&quot;: [ [ 0, 0 ], [ -27.803744757929508, -1.4766887834455247 ] ] }, { &quot;id&quot;: &quot;BCxy9I0aMCu5jzwqBtWXQ&quot;, &quot;type&quot;: &quot;ellipse&quot;, &quot;x&quot;: 421.45824480483395, &quot;y&quot;: -1195.726690771556, &quot;width&quot;: 9.85272981433718, &quot;height&quot;: 9.236035911874296, &quot;angle&quot;: 0, &quot;strokeColor&quot;: &quot;#9c36b5&quot;, &quot;backgroundColor&quot;: &quot;#9c36b5&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;seed&quot;: 1785511912, &quot;version&quot;: 67, &quot;versionNonce&quot;: 46656488, &quot;isDeleted&quot;: false, &quot;boundElements&quot;: null, &quot;updated&quot;: 1686254652765, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;type&quot;: &quot;ellipse&quot;, &quot;version&quot;: 134, &quot;versionNonce&quot;: 1358689512, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;rsvrZ24ILfI_lUWAJ3tq0&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 421.41733204469926, &quot;y&quot;: -837.5216593683544, &quot;strokeColor&quot;: &quot;#9c36b5&quot;, &quot;backgroundColor&quot;: &quot;#9c36b5&quot;, &quot;width&quot;: 9.85272981433718, &quot;height&quot;: 9.236035911874296, &quot;seed&quot;: 1492816792, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1686254658621, &quot;link&quot;: null, &quot;locked&quot;: false } ], &quot;appState&quot;: { &quot;theme&quot;: &quot;light&quot;, &quot;viewBackgroundColor&quot;: &quot;#ffffff&quot;, &quot;currentItemStrokeColor&quot;: &quot;#9c36b5&quot;, &quot;currentItemBackgroundColor&quot;: &quot;#9c36b5&quot;, &quot;currentItemFillStyle&quot;: &quot;solid&quot;, &quot;currentItemStrokeWidth&quot;: 1, &quot;currentItemStrokeStyle&quot;: &quot;solid&quot;, &quot;currentItemRoughness&quot;: 1, &quot;currentItemOpacity&quot;: 100, &quot;currentItemFontFamily&quot;: 1, &quot;currentItemFontSize&quot;: 20, &quot;currentItemTextAlign&quot;: &quot;left&quot;, &quot;currentItemStartArrowhead&quot;: null, &quot;currentItemEndArrowhead&quot;: &quot;arrow&quot;, &quot;scrollX&quot;: 489.3311913157386, &quot;scrollY&quot;: 1552.0718478860053, &quot;zoom&quot;: { &quot;value&quot;: 0.6200073242187499 }, &quot;currentItemRoundness&quot;: &quot;sharp&quot;, &quot;gridSize&quot;: null, &quot;colorPalette&quot;: {}, &quot;currentStrokeOptions&quot;: null, &quot;previousGridSize&quot;: null }, &quot;files&quot;: {} } %%","keywords":"","version":null}],"options":{"disableVersioning":true,"id":"default"}}