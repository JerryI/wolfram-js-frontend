{"searchDocs":[{"title":"Inline event listeners","type":0,"sectionRef":"#","url":"/frontend/Advanced/Dynamics/Inline event listeners","content":"Inline event listeners","keywords":"","version":null},{"title":"broken links output","type":0,"sectionRef":"#","url":"/broken links output","content":"broken links output Don't forget that creating the file from here may create the file in the wrong directory! [[Reference/WLX/WLJS.md#WLJS]] in [[frontend/Advanced/Events system/event-generators]][[Reference/Misc/WLJSTransport]] in [[frontend/Advanced/Events system/event-generators]][[../../Reference/Events/EventClone]] in [[frontend/Advanced/Events system/routing]][[../../Reference/Events/EventObject]] in [[frontend/Advanced/Events system/routing]][[../../Reference/Tools/Notebook/EvaluationCell]] in [[frontend/Advanced/Events system/routing]][[../../Reference/Events/EventHandler]] in [[frontend/Advanced/Events system/routing]], [[frontend/Advanced/Slides/Slides]][[Cell types]] in [[frontend/Advanced/Frontend interpretation/WLJS Functions]][[../../Reference/Tools/Slides/SlideEventListener]] in [[frontend/Advanced/Slides/Slides]][[../../../../wlx/basics]] in [[frontend/Advanced/Slides/Slides]], [[frontend/Advanced/Slides/components]][[../../Reference/Tools/LeakyModule]] in [[frontend/Advanced/Slides/animations]][[../Development/Evaluation/Dynamic]] in [[frontend/Cell types/Javascript]][[../Development/Plugins/Known packages]] in [[frontend/Cell types/Many more]][[../Development/Evaluation/Static]] in [[frontend/Cell types/Wolfram Language]][[Outdated/Development/Decorations]] in [[frontend/Expressions representation]][[../../../Development/Decorations]] in [[frontend/Reference/Decorations/ViewBox]][[../../Javascript API/core]] in [[frontend/Reference/Decorations/ViewBox]][[../Events/EventObject]] in [[frontend/Reference/GUI/InputButton]], [[frontend/Reference/GUI/InputGroup]], [[frontend/Reference/GUI/InputRange]], [[frontend/Reference/GUI/InputText]][[ButtonView]] in [[frontend/Reference/GUI/InputButton]][[RangeView]] in [[frontend/Reference/GUI/InputRange]][[../Events/EventHandler]] in [[frontend/Reference/GUI/InputTable]][[../Dynamics/MetaMarker]] in [[frontend/Reference/Graphics/Graphics]][[../WLJS/RandomReal]] in [[frontend/Reference/Interpreter/Offload]][[../Dynamics/Manipulate]] in [[frontend/Reference/Plotting Functions/ManipulatePlot]][[Outdated/Reference/Decorations/InterpretationBox]] in [[frontend/Troubleshooting/Troubleshooting]][[Outdated/Reference/Decorations/InputForm]] in [[frontend/Troubleshooting/Troubleshooting]][[../../frontend/Outdated/Advanced/Frontend interpretation/executables]] in [[interpreter/Advanced/architecture]][[../Advanced]] in [[interpreter/Basics/js-access]][[../../frontend/Outdated/Reference/Javascript API/interpretate]] in [[interpreter/Extras/reference]]","keywords":"","version":null},{"title":"Dynamic symbols generation","type":0,"sectionRef":"#","url":"/frontend/Advanced/Events system/Dynamic symbols generation","content":"Dynamic symbols generation Using Offload`FromEventObject function","keywords":"","version":null},{"title":"Advanced animation","type":0,"sectionRef":"#","url":"/frontend/Advanced/Dynamics/Advanced animation","content":"","keywords":"","version":null},{"title":"Summary​","type":1,"pageTitle":"Advanced animation","url":"/frontend/Advanced/Dynamics/Advanced animation#summary","content":" ","version":null,"tagName":"h2"},{"title":"Way 1​","type":1,"pageTitle":"Advanced animation","url":"/frontend/Advanced/Dynamics/Advanced animation#way-1","content":" Consider to use to get the highest framerate and smooth animations  AnimationFrameListener for GraphicsAnimationFrameListener for Graphics3D  with TransitionType set to None if the calculation time does not exceed the 1/60 of the second. Otherwise consider to use &quot;Linear&quot; interpolation option and a small amount of TransitionDuration around 10-100 depending on how long it takes to update the data.  ","version":null,"tagName":"h3"},{"title":"Way 2​","type":1,"pageTitle":"Advanced animation","url":"/frontend/Advanced/Dynamics/Advanced animation#way-2","content":" Consider to use SetInterval for a slow animations and simple stuff. Set TransitionDuration and TransitionType to a proper value to interpolate the values.  Usually if your SetInterval is let's say 100 ms, then TransitionDuration should be around 100 ms as well to get the smoothest animation.  info See examples in each reference ","version":null,"tagName":"h3"},{"title":"Promises","type":0,"sectionRef":"#","url":"/frontend/Advanced/Events system/promises","content":"Promises warning This chapter is in development. Please see References Promise","keywords":"","version":null},{"title":"Parallel kernels","type":0,"sectionRef":"#","url":"/frontend/Advanced/Events system/Parallel kernels","content":"Parallel kernels","keywords":"","version":null},{"title":"Scoping","type":0,"sectionRef":"#","url":"/frontend/Advanced/Dynamics/Scoping","content":"Scoping Since Module adds Temporal attribute to your symbols, it is not clear when and how your dynamic symbols will be purged from the Kernel. Therefore use LeakyModule to scope all dynamic symbols.","keywords":"","version":null},{"title":"Offloading calculations","type":0,"sectionRef":"#","url":"/frontend/Advanced/Dynamics/Offloading calculations","content":"","keywords":"","version":null},{"title":"A side note​","type":1,"pageTitle":"Offloading calculations","url":"/frontend/Advanced/Dynamics/Offloading calculations#a-side-note","content":" Computations on the frontend side does not cost much. Since everything happens within a browser. One can put many more curves and it would still work perfectly, since all of them are recalculated independently and bounded to 3 symbols only   ","version":null,"tagName":"h3"},{"title":"Editor manipulation","type":0,"sectionRef":"#","url":"/frontend/Advanced/Frontend interpretation/Editor manipulation","content":"Editor manipulation One can manipulate the content of the current selection using FrontEditorSelected expression evaluated with FrontSubmit or FrontFetch info See examples of FrontEditorSelected","keywords":"","version":null},{"title":"Frontend Objects","type":0,"sectionRef":"#","url":"/frontend/Advanced/Frontend interpretation/Frontend Objects","content":"","keywords":"","version":null},{"title":"Motivation​","type":1,"pageTitle":"Frontend Objects","url":"/frontend/Advanced/Frontend interpretation/Frontend Objects#motivation","content":" ","version":null,"tagName":"h2"},{"title":"Compress and reuse large expressions​","type":1,"pageTitle":"Frontend Objects","url":"/frontend/Advanced/Frontend interpretation/Frontend Objects#compress-and-reuse-large-expressions","content":" Is intended to reduce the load to on the frontend by packing a large Wolfram Expressions like Graphics with all its data to a single line reference FrontEndExecutable or FrontEndRef, which can be interpreted later by the editor in the cell.  Such expressions like  Plot[x, {x,0,1}]   are evaluated automatically to just a pointer (using CreateFrontEndObject) in the output cell as a display value of a ViewBox  FrontEndExecutable[&quot;746fa2e0-24f7-4003-a7cc-4c77f8b4891d&quot;]   This expression will be interpreted by the editor.  This behavior is controlled by MakeBoxes and represents StandardForm of any Graphics, Image or other heavy expressions, that demand visual representation.  ","version":null,"tagName":"h3"},{"title":"Evaluate expressions on frontend​","type":1,"pageTitle":"Frontend Objects","url":"/frontend/Advanced/Frontend interpretation/Frontend Objects#evaluate-expressions-on-frontend","content":" Some expressions, such as ListPlay, or Graphics3D can be displayed only outside the Wolfram Kernel, i.e. on the frontend. The last one is browser with Javascript engine in our case.  For such reason the resulting expressions of interactive or graphical elements are evaluated on Javascript using a tiny Wolfram Language interpreter (WLJS). Every FrontEndExecutable is executed using WLJS Interpreter using data requested on demand from Wolfram Kernel and outputs to the DOM element in the output cell.  info See more about WLJS Functions  Let us have a loot at the example  cell 1 .js core.MyExpression = async (args, env) =&gt; { env.element.innerText = &quot;Hello World&quot; }   MyExpression[] // CreateFrontEndObject   will result    This entity behaves like a single symbol. Basically, thats how Graphics, Graphics3D, InputRange and others are made.  You can remove an extra step by defining a StandardForm for your symbol  MyExpression /: MakeBoxes[m_MyExpression, StandardForm] := With[{ o = CreateFrontEndObject[m] }, MakeBoxes[o, StandardForm] ]   and then evaluate it as a normal one  MyExpression[] (* no need in CreateFrontEndObject anymore *)   Remarks on containers​  By the default each FrontEndExecutable will be evaluated inside a so-called container, that provides al local memory to the function and allows them to be destroyed or updated based on changes of child element. See more in WLJS Functions  ","version":null,"tagName":"h3"},{"title":"Inner structure​","type":1,"pageTitle":"Frontend Objects","url":"/frontend/Advanced/Frontend interpretation/Frontend Objects#inner-structure","content":" Here is a diagram to see the underlying structure and how expressions are transformed    ","version":null,"tagName":"h2"},{"title":"Properties​","type":1,"pageTitle":"Frontend Objects","url":"/frontend/Advanced/Frontend interpretation/Frontend Objects#properties","content":" Despite the fact, that this is separate entity, it can still be evaluated again on Wolfram Kernel. FrontEndRef will be replaced back to its normal form once you submit a cell for evaluation.All working objects are synchronized between the notebook and a Kernel. Once you saved a notebook they are serialized to a file as well. So that even with no running Wolfram Kernel they can be displayed.All working objects are exported to HTML fileAll objects are embedded automatically to Slides or WLXStandardForm for all FrontEndExecutable is ViewBoxWLXForm for all FrontEndExecutable is a sort of view-box as well ","version":null,"tagName":"h2"},{"title":"Performance tips","type":0,"sectionRef":"#","url":"/frontend/Advanced/Dynamics/Performance tips","content":"","keywords":"","version":null},{"title":"Performance tips​","type":1,"pageTitle":"Performance tips","url":"/frontend/Advanced/Dynamics/Performance tips#performance-tips","content":" You can explicitly choose what will be interpreted on the frontend or backend. We have a few possibilities for our function inside Line expression  ","version":null,"tagName":"h2"},{"title":"All load to Kernel​","type":1,"pageTitle":"Performance tips","url":"/frontend/Advanced/Dynamics/Performance tips#all-load-to-kernel","content":" For this one need to change code to  EventHandler[InputRange[0,4,0.1], Function[data, lines = With[{y = data}, Table[{Cos[x], Sin[y x]}, {x,0,2Pi, 0.01}] ] ]]; % // EventFire (* just to initialize *)   The last line manually fires an event to initialize symbol lines. Then for the output we can write  Graphics[{Cyan, Line[lines // Offload]}]   One can illustrate this binding as on a picture below    ","version":null,"tagName":"h3"},{"title":"Using frontend​","type":1,"pageTitle":"Performance tips","url":"/frontend/Advanced/Dynamics/Performance tips#using-frontend","content":" One can move an entire Table to the browser's side. Let's discard our changes we made to  EventHandler[InputRange[0,4,0.1], Function[data, v = data ]]; % // EventFire   Naive approach 1​  The obvious solution for output could be  Graphics[{Cyan, Line[ Table[{Cos[x], Sin[Offload[v] x]}, {x,0,2$Pi$, 0.1}] ]}]   That will be a horrible solution 👎🏼    Imagine, each time Table iterator x goes through the range of values, it creates a sublist of Sin and Cos functions, that contains dynamic variable v. Then you end up with many instances of v.  danger Line[Table[Expression[Offload[symbol]], {i, 10}]] Creates 10 instances of symbol. Line function will be called 10 times on each update of symbol!  danger Do not put dynamic symbols inside large Table. Try to minimize the number of its copies made.  Naive approach 2​  Ok lets try to improve a bit  Graphics[{Cyan, Line[ Table[{Cos[x], Sin[v x]}, {x,0,2Pi, 0.1}] // Offload ]}]   This is also horrible 👎🏼 Symbol Table does the same thing being executed on browser's side as well    Optimized version​  One can minimize the number of instances to just 1 using With, as it was shown in the example above  Graphics[{Cyan, Line[ With[{y = v}, Table[{Cos[x], Sin[y x]}, {x,0,2Pi, 0.01}] ] // Offload ] }]   This will save up a lot of resources 👍🏼    tip Line[With[{y = symbol}, Table[AnyExpression[y], {i, 10}]]] Creates only 1 instance of symbol. A Line function will be called 1 time per update of a symbol.  tip Line[symbol//Offload], ... Line[symbol//Offload] This is ok, each Line is bounded to its own symbol instance. Therefore on update of symbol, each Line expression will be reevaluated once.  ","version":null,"tagName":"h3"},{"title":"If duplicating is unavoidable​","type":1,"pageTitle":"Performance tips","url":"/frontend/Advanced/Dynamics/Performance tips#if-duplicating-is-unavoidable","content":" If you have to update two properties of a dynamic expression such as GraphicsComplex which are VertexColors and list of vertices for this example, it is unavoidable to use two Offload s there  GraphicsComplex[vertices // Offload, {Polygon[triangles]}, &quot;VertexColors&quot;-&gt;Offload[colors]]   then if later in the code  vertices = ...; colors = ...;   will cause the reevaluation of GraphicsComplex two times for the same set of data. However, there is a way on how to suppress the second one using options of Offload  GraphicsComplex[vertices // Offload, {Polygon[triangles]}, &quot;VertexColors&quot;-&gt;Offload[colors, &quot;Static&quot;-&gt;True]]   Here colors will not be bounded to GraphicsComplex. That results in only a single reevaluation per updates of colors and vertices. However a new values is going to be read anyway once vertices has been updated.  ","version":null,"tagName":"h3"},{"title":"Possible pitfall with With​","type":1,"pageTitle":"Performance tips","url":"/frontend/Advanced/Dynamics/Performance tips#possible-pitfall-with-with","content":" There might be temptation to wrap Line expression inside With as well, like that  Graphics[{Cyan, With[{y = v}, Line[ Table[{Cos[x], Sin[y x]}, {x,0,2Pi, 0.01}] ] ] // Offload}]   This will not work at all 👎🏼 because the binding will occur between Graphics and v objects    Think about an onion from the Shrek movie  ","version":null,"tagName":"h3"},{"title":"Numeric arrays​","type":1,"pageTitle":"Performance tips","url":"/frontend/Advanced/Dynamics/Performance tips#numeric-arrays","content":" When it goes to transfer any points as nested lists, it is better to wrap them into NumericArray. It tells WLJS Interpreter on the browser, that we can expect only numbers or lists of numbers, there which reduces the load while parsing them.  For example - dynamic symbols  (* every update *) symbol = someFunctionThatReturnsList   20 FPS    then using NumericArray  (* every update *) symbol = NumericArray[someFunctionThatReturnsList]   ~40 FPS   ","version":null,"tagName":"h2"},{"title":"Event system","type":0,"sectionRef":"#","url":"/frontend/Advanced/Events system/event-generators","content":"","keywords":"","version":null},{"title":"Thumb rule​","type":1,"pageTitle":"Event system","url":"/frontend/Advanced/Events system/event-generators#thumb-rule","content":" One event-object - one handler function  ev = EventObject[&lt;|&quot;Id&quot;-&gt;&quot;evid&quot;|&gt;] EventHandler[ev, Print]   i.e.    And then to fire  EventFire[ev, &quot;Hello World!&quot;];   In order to remove handler from event object use  Delete[ev]   or more universal  EventRemove[ev]   where it deletes a handler function, but not an EventObject.  tip To assign more event handlers, you need to clone an event object or use different pattern on the same event object (see Pattern matching).  ","version":null,"tagName":"h2"},{"title":"String equivalent​","type":1,"pageTitle":"Event system","url":"/frontend/Advanced/Events system/event-generators#string-equivalent","content":" The actual binding is done only by &quot;Id&quot; field, therefore, one can omit EventObject head  ev = &quot;evid&quot;; EventHandler[ev, Print]   is the same as  ev = EventObject[&lt;|&quot;Id&quot;-&gt;&quot;evid&quot;|&gt;] EventHandler[ev, Print]   ","version":null,"tagName":"h3"},{"title":"Pattern matching​","type":1,"pageTitle":"Event system","url":"/frontend/Advanced/Events system/event-generators#pattern-matching","content":" In general an event entity can carry an additional information using Wolfram Language Patterns. It can distribute messages across different handler functions based on type of event fired (or its topic lets say). Using regular syntax for replacing patterns with Rule and RuleDelayed one can write a much more detailed handler function  EventHandler[&quot;evid&quot;, { &quot;Topic&quot; -&gt; Function[data, Echo[&quot;Topic::&quot;]; Echo[data]; ], any_String :&gt; Function[data, Echo[StringJoin[any, &quot;::&quot;]]; Echo[data]; ] }];   And to fire an event on a specific pattern - add extra argument to the middle of a sequence  EventFire[&quot;evid&quot;, &quot;Topic&quot;, &quot;Hi!&quot;]; EventFire[&quot;evid&quot;, &quot;Whatever&quot;, &quot;Hi!&quot;];   However, it is not limited to String  EventHandler[&quot;evid&quot;, { _Abrakadabra -&gt; Function[Null, Echo[&quot;Got it!&quot;]; ], _ -&gt; Function[Null, Echo[&quot;Wrong one&quot;]; ] }]; EventFire[&quot;evid&quot;, Abrakadabra[], Null]   One should note, that effectively those are the same records  EventHandler[ev, Print] EventHandler[ev, {_ -&gt; Print}]   while  EventFire[ev, data] EventFire[ev, &quot;Default&quot;, data]   are also the same.  ","version":null,"tagName":"h2"},{"title":"Cloning events​","type":1,"pageTitle":"Event system","url":"/frontend/Advanced/Events system/event-generators#cloning-events","content":" In the previous examples we had only one handler function per pattern. If you want more, there is a way to clone an EventObject or its string equivalent  ev = EventObject[&lt;|&quot;Id&quot;-&gt;&quot;evid&quot;|&gt;] (* first handler *) EventHandler[ev, Print]; (* second handler *) cloned = EventClone[ev]; EventHandler[cloned, Print];   What it does, it creates something like an event router subscribed to the original event-object, a router, then, is populated by the two new event-objects    Anything you do with cloned event will not affect the original entitiy  Delete[cloned] or EventRemove[cloned]   info Cloned object inherits all properties (i.e. initial data), that the original object has.  tip If you are sure, that two EventHandler function does not intersect with their patterns attached to the same event-object, there is no need in cloning, i.e. EventHandler[ev, { &quot;Pattern 1&quot; -&gt; func1 }]; EventHandler[ev, { &quot;Pattern 2&quot; -&gt; func2 }]; EventFire[ev, ..., data]; is valid. Patterns will be merged.  ","version":null,"tagName":"h2"},{"title":"Return value​","type":1,"pageTitle":"Event system","url":"/frontend/Advanced/Events system/event-generators#return-value","content":" Each handling function can return some value back, that again carries extra information  EventHandler[ev, Function[Null, Now ]]; EventFire[ev, Null] // Echo   an Echo from the last line will print current date. The same can be done with a chain of cloned events, i.e.  EventHandler[ev, Function[Null, Now ]]; EventHandler[ev // EventClone, Function[Null, Now ]]; EventHandler[ev // EventClone, Function[Null, Now ]]; EventFire[ev, Null] // Echo   The returned value will be a list of three semi-identical dates.  tip Use return values to provide Promise objects, when one or more of your chained handlers asks the side, which fired a chain, to wait for some deferred event be happen (see Then).  ","version":null,"tagName":"h2"},{"title":"Merging​","type":1,"pageTitle":"Event system","url":"/frontend/Advanced/Events system/event-generators#merging","content":" For example you want to update the state of something based on two events, that may happen independently, then use  ev1 = EventObject[&lt;|&quot;Id&quot;-&gt;&quot;evid1&quot;|&gt;] ev2 = EventObject[&lt;|&quot;Id&quot;-&gt;&quot;evid2&quot;|&gt;] joined = Join[ev1, ev2]   tip You do not have to clone your events before joining them, since it does it automatically keeping all other connections intact    ","version":null,"tagName":"h2"},{"title":"Properties​","type":1,"pageTitle":"Event system","url":"/frontend/Advanced/Events system/event-generators#properties","content":" There is a possibility to carry an additional keys wrapped inside EventObject. By its nature this is not a classical object in the sense of OOP, since the handler function has no access to the their properties and only Id field is stored in global a memory.  ","version":null,"tagName":"h2"},{"title":"Inheritable​","type":1,"pageTitle":"Event system","url":"/frontend/Advanced/Events system/event-generators#inheritable","content":" There is a property &quot;Initial&quot;, that specifies the initial value of the data shipped when the event is fired, when you apply Join or EventClone the final initial conditions will be merged from the different event objects or just copied  ev1 = EventObject[&lt;|&quot;Id&quot;-&gt;&quot;ev1&quot;, &quot;Initial&quot;-&gt;&lt;|&quot;x&quot;-&gt;1|&gt;|&gt;] ev2 = EventObject[&lt;|&quot;Id&quot;-&gt;&quot;ev1&quot;, &quot;Initial&quot;-&gt;&lt;|&quot;y&quot;-&gt;2|&gt;|&gt;] Join[ev1, ev2]   the result will be  EventObject[&lt;|&quot;Id&quot;-&gt;&quot;generatedId&quot;, &quot;Initial&quot;-&gt;&lt;|&quot;x&quot;-&gt;1, &quot;y&quot;-&gt;2|&gt;|&gt;]   What also makes field &quot;Initial&quot; so special is that it can be automatically substituted to EventFire method, when no other data is provided  EventFire[ev]   is effectively  EventFire[ev, ev[[1]][&quot;Initial&quot;]]   ","version":null,"tagName":"h3"},{"title":"Non-inheritable​","type":1,"pageTitle":"Event system","url":"/frontend/Advanced/Events system/event-generators#non-inheritable","content":" A very useful property, that comes handy when making GUI elements &quot;View&quot;  EventObject[&lt;|&quot;Id&quot;-&gt;&quot;evid&quot;, &quot;View&quot;-&gt;Graphics3D[Sphere[]]|&gt;]   it acts only when the object is printed to the output cell or displayed on a page, then, we will see Graphics3D output instead of EventObject.  ","version":null,"tagName":"h3"},{"title":"Integration with server / client via WebSockets​","type":1,"pageTitle":"Event system","url":"/frontend/Advanced/Events system/event-generators#integration-with-server--client-via-websockets","content":" A framework of WLJSTransport redirects calls from Javascript code to event system as well. A global server object provides a corresponding method  server.kernel.emitt('evid', 'message') //or server.kernel.emitt('evid', 'message', 'pattern')   and on server's side one can do as usual  EventHandler[&quot;evid&quot;, Print]  ","version":null,"tagName":"h3"},{"title":"Indicators","type":0,"sectionRef":"#","url":"/frontend/Advanced/Dynamics/Indicators","content":"","keywords":"","version":null},{"title":"Crossbar and coordinates field​","type":1,"pageTitle":"Indicators","url":"/frontend/Advanced/Dynamics/Indicators#crossbar-and-coordinates-field","content":" If you are an Origin Pro user, this one is an essential tool for picking data points from your graph.  Essentially we need two things Line and TextView  ","version":null,"tagName":"h2"},{"title":"Normal way​","type":1,"pageTitle":"Indicators","url":"/frontend/Advanced/Dynamics/Indicators#normal-way","content":" cell 1 point = {0.,0.}; (* plot some dummy function *) Plot[Sinc[x], {x,-10,10}, Epilog-&gt;{ Red, (* crossbar *) Line[With[{p = point[[1]]}, {{p, -10}, {p, 10}} ] // Offload], Line[With[{p = point[[2]]}, {{-10, p}, {10, p}} ] // Offload], (* draggable point *) PointSize[0.05], Blue, EventHandler[Point[point], { &quot;drag&quot; -&gt; Function[xy, point = xy] }] }]   It attaches an EventHandler to a Point object and makes it draggable. Every-time user drags it, an event handler is fired and point symbol is updated, that causes updates of all lines  tip You can reduce the lag by tuning TransitionDuration to a lower value.    Now the text field  cell 2 TextView[point // Offload]     An accuracy might be too large. We can output there separately by using another variable or a symbol  point = {0.,0.}; text = &quot; &quot;; (* plot some dummy function *) Plot[Sinc[x], {x,-10,10}, Epilog-&gt;{ Red, (* crossbar *) Line[With[{p = point[[1]]}, {{p, -10}, {p, 10}} ] // Offload], Line[With[{p = point[[2]]}, {{-10, p}, {10, p}} ] // Offload], (* draggable point *) PointSize[0.05], Blue, EventHandler[Point[point], { &quot;drag&quot; -&gt; Function[xy, point = xy; text = ToString[Round[xy, 0.01]]; ] }] }] TextView[text // Offload]   Now it is much better    ","version":null,"tagName":"h3"},{"title":"Dynamically append to a plot​","type":1,"pageTitle":"Indicators","url":"/frontend/Advanced/Dynamics/Indicators#dynamically-append-to-a-plot","content":" One can also append it to a plot dynamically afterwards using MetaMarker. Sometimes it is better, since all variables are scoped  placeCrossbar[meta_String, pos_:{0.,0.}] := LeakyModule[{point = pos, text = &quot;&quot;}, FrontSubmit[{ Red, (* crossbar *) Line[With[{p = point[[1]]}, {{p, -10}, {p, 10}} ] // Offload], Line[With[{p = point[[2]]}, {{-10, p}, {10, p}} ] // Offload], (* draggable point *) PointSize[0.05], Blue, EventHandler[Point[point], { &quot;drag&quot; -&gt; Function[xy, point = xy; text = ToString[Round[xy, 0.01]]; ] }] }, MetaMarker[meta]]; TextView[text // Offload] ]   Now the only thing we need is to scope  cell 1 (* plot some dummy function *) Plot[Sinc[x], {x,-10,10}, Epilog-&gt;{MetaMarker[&quot;plt&quot;]}]   and after evaluation we can append it  placeCrossbar[&quot;plt&quot;]   ","version":null,"tagName":"h3"},{"title":"Progress bar​","type":1,"pageTitle":"Indicators","url":"/frontend/Advanced/Dynamics/Indicators#progress-bar","content":" During a long evaluation process we need some sort of indication. For this thing we need a couple of ingredients: Rectangle, CellPrint  One can think about it if it was a typical OOP. We need a constructor that returns an instance for tracking the evaluation progress  progressBar[max_Real | max_Integer] := LeakyModule[{ progress = 0., bar, increment, timer = AbsoluteTime[] }, bar = CellPrint[ToString[ Graphics[{ LightBlue, Rectangle[{-1,-1}, {1,1}], Green, Rectangle[{-1,-1}, {Offload[2 progress - 1], 1}] }, ImagePadding-&gt;None, ImageSize-&gt;{400, 30}] , StandardForm], &quot;After&quot;-&gt;EvaluationCell[]]; (* throttling *) increment[value_Real | value_Integer] := If[AbsoluteTime[] - timer &gt; 0.1, timer = AbsoluteTime[]; progress = value / max // N; If[progress &gt;= 0.99, ClearAll[increment]; Delete[bar]; ]; ]; increment ]   here we also use sort of throttling not to overstress frontend if our progress tracking function is called too often. A progress bar itself is printed to another cell as basically a growing green rectangle.  Let us try to use it  bar = progressBar[10]; Table[bar[i]; Pause[0.5]; i, {i, 10}]    ","version":null,"tagName":"h2"},{"title":"1. Creating new type","type":0,"sectionRef":"#","url":"/frontend/Advanced/Objects/Creating new type","content":"","keywords":"","version":null},{"title":"Properties and methods​","type":1,"pageTitle":"1. Creating new type","url":"/frontend/Advanced/Objects/Creating new type#properties-and-methods","content":" Let it be an object with a single field default &quot;State&quot;  CreateType[StateMachine, init, {&quot;State&quot;-&gt;1}] init[o_] := o[&quot;UId&quot;] = CreateUUID[];   Here we also assigned a unique text ID to it for the future using constructor function init. By calling now StateMachine we create an instance of this type  machine = StateMachine[]     Think about it if it as an Association.  One can assign any properties, but just be aware that Set has HoldFirst attribute and set any properties using With  With[{o = machine}, o[&quot;State&quot;] = 33 ]   One can also see all properties using a special key  machine[&quot;Properties&quot;]   info See the full guide from Kirill Belov on Objects core package at Wolfam Community  note There is no need in installing Objects paclet. This is already a part of WLJS Notebook Kernel  Time to define sort of methods of created types. It is based solely on TagSet technique widely used in Wolfram Language  StateMachine /: StateMachineChange[s_StateMachine, state_Integer] := With[{}, s[&quot;State&quot;] = state; s ] StateMachine /: Delete[s_StateMachine] := With[{}, DeleteObject[s] ]   then to update the state we only need to call this on our object instance  StateMachineChange[machine, 1]; machine[&quot;State&quot;]   1   In a case if you want an experience close to traditional OOP, one can utilize contexts  StateMachine /: StateMachine`Change[s_StateMachine, state_Integer] := With[{}, s[&quot;State&quot;] = state; s ]   StateMachine`Change[machine, 1]; machine[&quot;State&quot;]   ","version":null,"tagName":"h2"},{"title":"Event system​","type":1,"pageTitle":"1. Creating new type","url":"/frontend/Advanced/Objects/Creating new type#event-system","content":" Subscription / published model is quite often applied to objects in OOP. Moreover this comes handy when we need to perform asynchronous tasks and needles to say it plays a great role in communicating between different objects. Here we will integrate it with Events system we built.  Firstly, since Events uses mostly text-strings as an identifiers for event objects, we rely on &quot;UId&quot; field generated in a constructor function  StateMachine /: EventFire[s_StateMachine, opts__] := EventFire[s[&quot;UId&quot;], opts] StateMachine /: EventHandler[s_StateMachine, opts__] := EventHandler[s[&quot;UId&quot;], opts] StateMachine /: EventClone[s_StateMachine] := EventClone[s[&quot;UId&quot;]] StateMachine /: EventRemove[s_StateMachine] := EventRemove[s[&quot;UId&quot;]]   To notify all subscribers we need to modify our method of settings the state  StateMachine /: StateMachineChange[s_StateMachine, state_Integer] := With[{}, s[&quot;State&quot;] = state; EventFire[s, &quot;State&quot;, state]; (* THIS LINE *) s ] StateMachine /: Delete[s_StateMachine] := With[{}, EventFire[s, &quot;Destroy&quot;, Null]; DeleteObject[s] ]   Let us check how it works!  machine = StateMachine[]; EventHandler[StateMachine, Beep]; (* make sound *)   StateMachineChange[machine, RandomInteger[{1,10}]];   Every time you change the state it will make sound.  info See more about event system here  One can also subscribe to a particular pattern or topic  EventHandler[StateMachine, { &quot;State&quot; -&gt; Function[state, Print[state]] }];   info This is a core mechanism in WLJS notebook interface ","version":null,"tagName":"h2"},{"title":"Communication","type":0,"sectionRef":"#","url":"/frontend/Advanced/Javascript/Communication","content":"","keywords":"","version":null},{"title":"Direct call​","type":1,"pageTitle":"Communication","url":"/frontend/Advanced/Javascript/Communication#direct-call","content":" Let us define our dummy function  cell 1 .js core.MyFunction = async (args, env) =&gt; { const data = await interpretate(args[0], env); alert(data); }   then the fastest and most direct way of calling it is using FrontSubmit  cell 2 FrontSubmit[MyFunction[&quot;Hello World!&quot;]]   or chaining it with some other WLJS function  FrontSubmit[MyFunction[ReadClipboard[]]]   ","version":null,"tagName":"h2"},{"title":"Execution in the container​","type":1,"pageTitle":"Communication","url":"/frontend/Advanced/Javascript/Communication#execution-in-the-container","content":" So-called containers gives a DOM element, local memory for our function (see more WLJS Functions)  cell 1 .js core.MyFunction2 = async (args, env) =&gt; { const data = await interpretate(args[0], env); env.element.innerHTML = `&lt;span style=&quot;color:red&quot;&gt;${data}&lt;/span&gt;`; }   Now we can call it from our cell  cell 2 CreateFrontEndObject[MyFunction2[&quot;Hello World!&quot;]]   it behaves like a symbol.  tip You don't have to always use CreateFrontEndObject. It is possible to force Wolfram Kernel to apply it automatically on output using MakeBoxes  This is basically how Graphics and others are implemented.  ","version":null,"tagName":"h2"},{"title":"Data fetching​","type":1,"pageTitle":"Communication","url":"/frontend/Advanced/Javascript/Communication#data-fetching","content":" A back communication is also possible  cell 1 .js core.MyFunction3 = async (args, env) =&gt; { return [1,2,3,4,5,6]; }   and to read it synchronously  cell 2 FrontFetch[MyFunction3[]]   or asynchronously  cell 2 Then[FrontFetchAsync[MyFunction3[]], Function[data, Print[data]]]   ","version":null,"tagName":"h2"},{"title":"Emitting events​","type":1,"pageTitle":"Communication","url":"/frontend/Advanced/Javascript/Communication#emitting-events","content":" We can call any WL function using Events system  cell 1 .js const button = document.createElement('button'); button.innerText = &quot;Press me&quot;; button.addEventListener('click', () =&gt; { server.kernel.emitt('eventUid', 'True'); }); return button;   Now we can capture it using  cell 2 EventHandler[&quot;eventUid&quot;, Print]   ","version":null,"tagName":"h2"},{"title":"Custom UI component​","type":1,"pageTitle":"Communication","url":"/frontend/Advanced/Javascript/Communication#custom-ui-component","content":" Using JS one can craft its own UI components. For example  cell 1 .js core.MyCustomComponent = async (args, env) =&gt; { const label = await interpretate(args[0], env); const ev = await interpretate(args[1], env); const button = document.createElement('button'); button.innerText = label; button.style.backgroundColor = &quot;lightblue&quot;; button.addEventListener('click', () =&gt; { server.kernel.emitt(ev, 'True'); }); env.element.appendChild(button); }   Now we can make boxes for it  cell 2 MyCustomComponent /: MakeBoxes[m_MyCustomComponent, StandardForm] := With[{ o = CreateFrontEndObject[m] }, MakeBoxes[o, StandardForm] ]   In action  cell 3 MyCustomComponent[&quot;Click me pls&quot;, &quot;event1&quot;] EventHandler[&quot;event1&quot;, Print];   ","version":null,"tagName":"h3"},{"title":"Integrating with standard inputs​","type":1,"pageTitle":"Communication","url":"/frontend/Advanced/Javascript/Communication#integrating-with-standard-inputs","content":" It is much easier to work with EventObject  cell 3 ClearAll[MyCustomComponent] MyCustomInput[label_String] := With[{uid = CreateUUID[]}, EventObject[&lt;|&quot;Id&quot;-&gt;uid, &quot;View&quot;-&gt;MyCustomComponent[label, uid]|&gt;] ]   in action it behaves similar to InputRange and etc  cell 4 EventHandler[MyCustomInput[&quot;Click me&quot;], Print]   ","version":null,"tagName":"h3"},{"title":"Using WLX​","type":1,"pageTitle":"Communication","url":"/frontend/Advanced/Javascript/Communication#using-wlx","content":" It is much easier to write markup in WLX compared to JS  cell 1 .wlx MyCustomComponent2[OptionsPattern[]] := With[{ Event = OptionValue[&quot;Event&quot;], Label = OptionValue[&quot;Label&quot;], Uid = CreateUUID[] }, &lt;div&gt; &lt;button id=&quot;{Uid}&quot; style=&quot;background: lightblue&quot; class=&quot;p-1&quot;&gt; &lt;Label/&gt; &lt;/button&gt; &lt;script type=&quot;module&quot;&gt; document.getElementById('&lt;Uid/&gt;').addEventListener('click', () =&gt; { server.kernel.emitt('&lt;Event/&gt;', 'True'); }) &lt;/script&gt; &lt;/div&gt; ] Options[MyCustomComponent2] = {&quot;Event&quot; -&gt; &quot;&quot;, &quot;Label&quot; -&gt; &quot;Click me&quot;};   In action  cell 2 MyCustomComponent2[&quot;Event&quot;-&gt;&quot;test&quot;, &quot;Label&quot;-&gt;&quot;Hello World!&quot;] // WLXEmbed EventHandler[&quot;test&quot;, Print];   or combining with a previous technic  cell 2 MyCustomInput2[label_String] := With[{uid = CreateUUID[]}, EventObject[&lt;|&quot;Id&quot;-&gt;uid, &quot;View&quot;-&gt; WLXEmbed[MyCustomComponent2[&quot;Label&quot;-&gt;label, &quot;Event&quot;-&gt;uid]]|&gt;] ]   You can use it as a normal input element  cell 3 EventHandler[MyCustomInput2[&quot;Click me&quot;], Print]   Side effects​  To call another function after an elements was drawn, use an options of WLXEmbed. This is used for dynamic updates in TextView and HTMLView implementations.  ","version":null,"tagName":"h3"},{"title":"Emit event from WLJS​","type":1,"pageTitle":"Communication","url":"/frontend/Advanced/Javascript/Communication#emit-event-from-wljs","content":" One can fire an event also using frontend's function EventFire, which is effectively acts like server.kernel.emitt being called from the WLJS Interpreter (i.e. using FrontSubmit or other and wrapped in Offload)  danger Not implemented!  EventHandler[&quot;internalEvent&quot;, Print]; FrontSubmit[EventFire[&quot;internalEvent&quot;, ReadClipboard[]] // Offload]   It will send an expression to be executed on the frontend, that reads a clipboard and fires back an event with a fetched data.  ","version":null,"tagName":"h3"},{"title":"Request evaluation​","type":1,"pageTitle":"Communication","url":"/frontend/Advanced/Javascript/Communication#request-evaluation","content":" It is also possible from Javascript to request an evaluation of any symbol using server object  .js const doc = document.createElement('span'); const run = async () =&gt; { const data = await server.kernel.ask('RandomReal[{-1,1}, 3]'); const result = await interpretate(data, {}); doc.innerText = result.join(', '); } run(); return doc;  ","version":null,"tagName":"h2"},{"title":"3. Dynamic decorations","type":0,"sectionRef":"#","url":"/frontend/Advanced/Objects/Dynamic decorations","content":"","keywords":"","version":null},{"title":"Dynamic summary item​","type":1,"pageTitle":"3. Dynamic decorations","url":"/frontend/Advanced/Objects/Dynamic decorations#dynamic-summary-item","content":" We have already explored the possibility of animated icons in Animated decoration in Summary Item, therefore there is no obstacles in doing the same in sync with state changes of our object.  StateMachine /: MakeBoxes[s: StateMachine[symbol_Symbol?AssociationQ], form: (StandardForm | TraditionalForm)] := Module[{ state = s[&quot;State&quot;] // ToString, instances = 0, eventObject, construct, destruct }, With[{ textField = EditorView[state // Offload], controller = CreateUUID[] }, construct := With[{}, (* subscribe to object events and update decoration *) eventObject = EventClone[s]; EventHandler[eventObject, { &quot;State&quot; -&gt; Function[new, state = new // ToString] }]; ]; destruct := With[{}, Echo[&quot;Removed&quot;]; EventRemove[eventObject]; ]; EventHandler[controller, { &quot;Mounted&quot; -&gt; Function[Null, If[instances === 0, construct]; instances = instances + 1; ], &quot;Destroy&quot; -&gt; Function[Null, instances = instances - 1; (* unsubscribe when there is no instances *) If[instances === 0, destruct]; ] }]; With[{ summary = {BoxForm`SummaryItem[{&quot;State: &quot;, textField}]} }, BoxForm`ArrangeSummaryBox[ StateMachine, s, None, summary, Null, &quot;Event&quot; -&gt; controller ] ] ] ]   The idea is the same, but instead of static value, we substituted to BoxForm`SummaryItem a dynamic element EditorView which is updated by the a handler function subscribed to updates of our instance.  Let us test it  instance = StateMachine[]   you can copy and paste instances with no issues, since it is tracked by a variable in the box decoration code  and change the state  StateMachineChange[instance, RandomInteger[{1,10}]];     ","version":null,"tagName":"h2"},{"title":"Controllers​","type":1,"pageTitle":"3. Dynamic decorations","url":"/frontend/Advanced/Objects/Dynamic decorations#controllers","content":" We can also mutate our object from the decoration by substituting InputRange or something like this to a widget. Right..?  StateMachine /: MakeBoxes[s: StateMachine[symbol_Symbol?AssociationQ], form: (StandardForm | TraditionalForm)] := Module[{ state = s[&quot;State&quot;] // ToString, instances = 0, eventObject, construct, destruct, slider }, With[{ textField = EditorView[state // Offload], controller = CreateUUID[] }, slider = InputRange[0, 10, 1, s[&quot;State&quot;]]; EventHandler[slider, Function[n, StateMachineChange[s, n] ]]; construct := With[{}, (* subscribe to object events and update decoration *) eventObject = EventClone[s]; EventHandler[eventObject, { &quot;State&quot; -&gt; Function[new, state = new // ToString] }]; ]; destruct := With[{}, Echo[&quot;Removed&quot;]; EventRemove[eventObject]; ]; EventHandler[controller, { &quot;Mounted&quot; -&gt; Function[Null, If[instances === 0, construct]; instances = instances + 1; ], &quot;Destroy&quot; -&gt; Function[Null, instances = instances - 1; (* unsubscribe when there is no instances *) If[instances === 0, destruct]; ] }]; With[{ summary = { BoxForm`SummaryItem[{&quot;State: &quot;, textField}], BoxForm`SummaryItem[{&quot;&quot;, slider}] } }, BoxForm`ArrangeSummaryBox[ StateMachine, s, None, summary, Null, &quot;Event&quot; -&gt; controller ] ] ] ]   We added only a few line for slider. The rest is the same    warning InputRange does not support multiple instances and might have a conflict with DOM ids if copied and pasted from the same generated output. To solve this issue, we your own slider, which is generated purely from Javascript on each run. See how in Communication  ","version":null,"tagName":"h2"},{"title":"Mutability​","type":1,"pageTitle":"3. Dynamic decorations","url":"/frontend/Advanced/Objects/Dynamic decorations#mutability","content":" Each decoration box based on ViewBox does support mutations of inner and outer content - see From Wolfram Kernel.  The easies example would be to remove all instances from all code editors, once our object does not exists anymore. We will start from writing the corresponding method  StateMachine /: Delete[s_StateMachine] := With[{}, EventFire[s, &quot;Destroy&quot;, Null]; DeleteObject[s] ]   Then we need to track all spawned instances of a widget in order to kill all of them. ViewBox provides pattern for events handling &quot;Mounted&quot; with an ID of a widget. Let us harvest it  \tEventHandler[controller, { &quot;Mounted&quot; -&gt; Function[uid, (* collect instances *) s[&quot;Instances&quot;] = If[ListQ[s[&quot;Instances&quot;]], Append[s[&quot;Instances&quot;], uid], {uid}]; If[instances === 0, construct]; instances = instances + 1; ], &quot;Destroy&quot; -&gt; Function[uid, s[&quot;Instances&quot;] = s[&quot;Instances&quot;] /. {uid -&gt; Nothing}; instances = instances - 1; If[instances === 0, destruct]; ] }];   The collected IDs are valid to use together with MetaMarker and FrontSubmit. To destroy them one by one we need to submit a command  FrontSubmit[ViewBox`OuterExpression[&quot;&quot;], MetaMarker[#]] &amp;/@ s[&quot;Instances&quot;]   Here is the full code  StateMachine /: MakeBoxes[s: StateMachine[symbol_Symbol?AssociationQ], form: (StandardForm | TraditionalForm)] := Module[{ state = s[&quot;State&quot;] // ToString, instances = 0, eventObject, construct, destruct }, With[{ textField = EditorView[state // Offload], controller = CreateUUID[], window = CurrentWindow[] }, construct := With[{}, (* subscribe to object events and update decoration *) eventObject = EventClone[s]; EventHandler[eventObject, { &quot;State&quot; -&gt; Function[new, state = new // ToString], &quot;Destroy&quot; -&gt; Function[Null, FrontSubmit[ViewBox`OuterExpression[&quot;&quot;], MetaMarker[#], &quot;Window&quot;-&gt;window] &amp;/@ s[&quot;Instances&quot;]; ] }]; ]; destruct := With[{}, Echo[&quot;Removed&quot;]; EventRemove[eventObject]; ]; EventHandler[controller, { &quot;Mounted&quot; -&gt; Function[uid, s[&quot;Instances&quot;] = If[ListQ[s[&quot;Instances&quot;]], Append[s[&quot;Instances&quot;], uid], {uid}]; If[instances === 0, construct]; instances = instances + 1; ], &quot;Destroy&quot; -&gt; Function[uid, s[&quot;Instances&quot;] = s[&quot;Instances&quot;] /. {uid -&gt; Nothing}; instances = instances - 1; (* unsubscribe when there is no instances *) If[instances === 0, destruct]; ] }]; With[{ summary = {BoxForm`SummaryItem[{&quot;State: &quot;, textField}]} }, BoxForm`ArrangeSummaryBox[ StateMachine, s, None, summary, Null, &quot;Event&quot; -&gt; controller ] ] ] ]    ","version":null,"tagName":"h2"},{"title":"Routing","type":0,"sectionRef":"#","url":"/frontend/Advanced/Events system/routing","content":"Routing warning Remember the number 1 rule: 1 pattern of an event object = 1 handlerTo assign more, you need to clone (EventClone) the original object and it will be rewired into a sort of splitter. Since the notebook is usually a playground, you need to have an opportunity to undo actions, when you reevaluate the cell. Therefore there is concept of explicit routing of one event to some other handlers. For example you have a generator of events (does not necessary has to be a button) generator[uid_String] := With[{btn = InputButton[&quot;Click&quot;]}, (* we use input button only for demonstration purposes *) (* one can fire any EventObject manually using EventFire[] *) EventHandler[btn, Function[Null, EventFire[uid, &quot;some data&quot;]; ]]; btn ] here we used the representation of events object as a string uid (it is also valid) and fire it using a button (which also returns EventObject). Now we need an arbitrary handler handler[uid_String, func_:Print] := With[{ev = EventClone[uid]}, (* clean up, if the cell has been destroyed *) EventHandler[ResultCell[], {&quot;Destroy&quot; -&gt; Function[Null, Delete[ev]]}]; (* assign Print for instance *) EventHandler[ev, func]; ] info You do not need to clone EvaluationCell or ResultCell to assign many handlers to it. it is cloned automatically once appeared in EventHandler The cool thing, that we can have many of those handlers attached to the same event, since it clones it every-time and removes handler function, when you reevaluate the cell. Let us see it on the following example generator[&quot;random-word-you-like&quot;] handler[&quot;random-word-you-like&quot;] and in some other cell, if you like you can add other handler to the same event handler[&quot;random-word-you-like&quot;, FrontSubmit[Alert[#]]&amp;] By pressing the button, it will call the whole list of attached handlers. This approach comes very handy, when you are constructing complex animation on Slides","keywords":"","version":null},{"title":"WLJS Functions","type":0,"sectionRef":"#","url":"/frontend/Advanced/Frontend interpretation/WLJS Functions","content":"","keywords":"","version":null},{"title":"Quick and Dirty​","type":1,"pageTitle":"WLJS Functions","url":"/frontend/Advanced/Frontend interpretation/WLJS Functions#quick-and-dirty","content":" Create a new cell, then, define a function inside core context  .js core.MyFunction = async (args, env) =&gt; { const data = await interpretate(args[0], env); alert(data); }   then, to call it directly from Wolfram Kernel use  MyFunction[&quot;Hello World!&quot;] // FrontSubmit;   or in the cell's output  CreateFrontEndObject[MyFunction[&quot;Hello World!&quot;]]   it should produce a pop-up message with a given text.  ","version":null,"tagName":"h2"},{"title":"Deeper look​","type":1,"pageTitle":"WLJS Functions","url":"/frontend/Advanced/Frontend interpretation/WLJS Functions#deeper-look","content":" Firstly one need to understand the way how it was called. There are a few different ways  direct calls as it isindirect using containers  The first one is rather straighforward, where basically most UI functions and core built-in functions are written.  ","version":null,"tagName":"h2"},{"title":"Simple direct call​","type":1,"pageTitle":"WLJS Functions","url":"/frontend/Advanced/Frontend interpretation/WLJS Functions#simple-direct-call","content":" As simple as that    A called function has no persistent memory (call and forget) except from the env variable, which can share the data with other functions from the subtree - see more in architecture (Meta Data).  Any defined functions must return javascript object or nothingWhile in the arguments args it is always Wolfram Expression, therefore use interpretate on them to convert anything into javascript data type.  For example, env comes very handy working with graphics  core.RGBColor = async (args, env) =&gt; { const r = await interpretate(args[0], env); const g = await interpretate(args[1], env); const b = await interpretate(args[2], env); //modify env env.color = new whatever.Color(r, g, b); //return for the case if it is used directly return env.color };   where core.RGBColor can be called somewhere in the list  {Blue[], {Red[], Sphere[] (*i am red*)}, Cuboid[] (*i am blue*)} // Graphics3D   Then in the parent function  core.Graphics3D = async (args, env) =&gt; { ... var scene = {}; await interpretate(args[0], {...env, scene: scene}); //go to subthree rendered.add(scene) //all objects are there! } core.Sphere = async (args, env) =&gt; { ... env.scene.add(new sphere(color: env.color)); }   Therefore the desired data will anyway ended up in the scene. This is a power of pointers.  🎡 Example 1: Game of Life​  To get more fun, let us firstly define some supporting structures  Create a new cell with the following code  cell 1 .js //create js canvas const canvas = document.createElement(&quot;canvas&quot;); canvas.width = 400; canvas.height = 400; let context = canvas.getContext(&quot;2d&quot;); context.fillStyle = &quot;lightgray&quot;; context.fillRect(0, 0, 500, 500); //an array to store the previous state let old = new Array(40); for (let i = 0; i &lt; old.length; i++) { old[i] = new Array(40).fill(0); } //a function to draw on it core.MyFunction = async (args, env) =&gt; { const data = await interpretate(args[0], env); //draw our boxes for(let i=0; i&lt;40; ++i) { for (let j=0; j&lt;40; ++j) { //old pixels will leave blue traces if (old[i][j] &gt; 0) { context.fillStyle = &quot;rgba(0,0,255,0.2)&quot;; context.fillRect(i*10 + 2, j*10 + 2, 6, 6); } //new pixels if (data[i][j] &gt; 0) { context.fillStyle = &quot;rgba(255,0,0,0.4)&quot;; context.fillRect(i*10 + 1, j*10 + 1, 8, 8); } else { context.fillStyle = &quot;rgba(255,255,255,0.4)&quot;; context.fillRect(i*10 + 1, j*10 + 1, 8, 8); } //store the previous frame old[i][j] = data[i][j]; } } } return canvas   This function will draw a 40x40 array of 1 and 0 pixels inside the page. Let us try to it out on some typical cellular automata like Game of Life  cell 2 gameOfLife = {224, {2, {{2, 2, 2}, {2, 1, 2}, {2, 2, 2}}}, {1, 1}}; board = RandomInteger[1, {40, 40}]; Do[ board = CellularAutomaton[gameOfLife, board, {{0, 1}}] // Last; MyFunction[board] // FrontSubmit; Pause[0.1]; , {i,1,100}]   What it does is shown on the gif below, however you can try it by yourself by openning GOL.wln from the examples folder.  note See more about JS cells in Cell types  Of course this is not the best example of making animations, better will be to let js run the animation on its own and wait for a new data or ask for a new data using system of events.  A remark about sub symbols | Methods​  Sometimes a function or a tree of them is called as a responce on some event. Then this information is stored in env.method - see also symbols  If there is an update of a data, i.e. env.method = 'update', then interpreter will try to find a sub-symbols or a function (read more about how interpreter handles them WLJS Interpreter).    Imagine if any defined function was a class declaration with a constructor and methods (subsymbols)  core.MyFunction = (args, env) =&gt; {} core.MyFunction.update = (args, env) =&gt; {} core.MyFunction.destroy = (args, env) =&gt; {} core.MyFunction.whatever = (args, env) =&gt; {}   Then, can we want to specify it during the evaluation of a symbol  core.OurParentFunction = (args, env) =&gt; { const data = interpetate(args[0], {...env, method:'update'); ... }   It is extremely useful, when it comes to the dynamic updates of some graph, plot. There is no need to redraw everything, but perform some lightweight operations  core.ListLinePlotly = (args, env) =&gt; { //create element...draw axes and etc...SLOW Plotly.newPlot(...); } core.ListLinePlotly.update = (args, env) =&gt; { //quickly redraw changed elements Plotly.animate(...) or extend... }   Destroy and update methods are usually features of Containers Executables  Contexts​  To prevent the mess of duplicated function names and etc, you can specify the context or let's say library of symbols using  var library = {}; library.name = &quot;It is important to write a name&quot; interpretate.extendContext(library); library.Symbol = (args, env) =&gt; {/*...*/}   The interpreter will check all available contexts and use the first match. However, you can prioritize the context providing the information in env object  core.GrantSymbol = (args, env) =&gt; { const data = interpretate(args, {...env, context: library}); //... //first match should be in `library` object }   ","version":null,"tagName":"h3"},{"title":"Containers | Executables​","type":1,"pageTitle":"WLJS Functions","url":"/frontend/Advanced/Frontend interpretation/WLJS Functions#containers--executables","content":" Each time interpreter faces a container it creates an unique object, that scopes env variable and provides local memory for all tree of Wolfram Expressions located inside the container.  Most importantly containers or executables can be destroyed or updated (see A remark about sub symbols Methods) unlike expressions under normal evaluation.  Another feature is that it automatically binds to other nested containers, which allows to reevaluate expressions from the parent container once a change was made to a child. The last one is a fundament for Dynamics  TLDR How to create?  CreateFrontEndObjectVirtual functions  Properties​  The expression inside the container is held in JSON format for possible reevaluation. Containerized execution provides much more flexibility since each call creates a separate instance with its local memory.  For the convenience all extra features are provided in env variable  core.MyFunction = (args, env) =&gt; { env.local = {} //pointer to the local memory of the instance env.global = {} //pointer to the global memory of the three env //sharable memory }   Global memory is created at each widget creating in the cell editor or scope of FrontSubmit. Local memory is scoped for each instance of a container.  Depending, where it is supposed to be executed, one can have an access to various page elements. For instance, if it is called from the editor it provides env.element - an access to DOM placeholder in the editor.  Let's make an example that can demonstrate local memory usage  Frontend objects​  One of the possible way on how to execute a given function inside a container is to create a frontend object CreateFrontEndObject. Read more about Frontend Objects  🎡 Example 2: Clocks​  .js core.PlaceholderClock = async (args, env) =&gt; { //store the handler object in the local memory env.local.start = new Date(); env.local.clock = setInterval(()=&gt;{ const d = (new Date() - env.local.start); env.element.innerHTML = d; }, 10); } //when our instance is about to be destoryed - clear timer core.PlaceholderClock.destroy = async (args, env) =&gt; { window.clearInterval(env.local.clock); const passed = (new Date() - env.local.start); alert(passed+' passed'); }   Then we can execute in inside the container like any piece of data (see CreateFrontEndObject)  CreateFrontEndObject[PlaceholderClock[]]   Try to copy and paste them into the same or different cells (from the output cell)    This examples intersects with the section Default methods, since it involves destroy subsymbol, which is fired when one deletes a widget from the editor.  It comes very handy, when, for example we are working with Graphics3D, where every 1/60 of a second a rendering function is called. Imagine, it would be a disaster if one deleted a widget, but the rendering function would still continue to work.  Therefore env.local helps a lot  core.Graphics3D.destroy = async (args, env) =&gt; { cancelAnimationFrame(env.local.aid); //to cancel the animation }   One can improve an example above by defining StandardForm for our clocks  PlaceholderClock /: MakeBoxes[m_PlaceholderClock, StandardForm] := With[{ o = CreateFrontEndObject[m] }, MakeBoxes[o, StandardForm] ]   PlaceholderClock[] (* no need in CreateFrontEndObject anymore *)   Default methods​  In principle user can define its own methods (or subsymbols) and provide them in env.method as a string. The general infromation was already mentioned before in A remark about sub symbols Methods.  For the containers you should define two most important methods for you functions  .destory - when a widget was destoryed. It acts from top to bottom.update - when the data was changed. It bubbles up and goes from the nearest parent of the call-tree  Otherwise if you even delete your widget from the editor (or just remove the cell) it wil cause an error. If you do not to mess with this, keep them empty  core.MyFunction.update = async (args, env) =&gt; {} core.MyFunction.destroy = async (args, env) =&gt; {}   🎡 Example 3: Game of Life (improvements)​  Let us define our constructor  .js //constructor core.MyFunction = async (args, env) =&gt; { //just to make second object to be aware of the previous one //and fetch initial data const data = await interpretate(args[0], env); //create js canvas const canvas = document.createElement(&quot;canvas&quot;); canvas.width = 400; canvas.height = 400; let context = canvas.getContext(&quot;2d&quot;); context.fillStyle = &quot;lightgray&quot;; context.fillRect(0, 0, 500, 500); //an array to store the previous state let old = new Array(40); for (let i = 0; i &lt; old.length; i++) { old[i] = new Array(40).fill(0); } env.element.appendChild(canvas); env.local.old = old; env.local.ctx = context; }   here this line  const data = await interpretate(args[0], env);   is very important, even if we wont use data variable, to make the call-tree aware of the presence of other symbols to which we need to call at least await interpretate(args[0], env);.  Now we can store all data in env.local, that belongs to our instance.  The next thing - a method, that allows us to update the canvas  .js core.MyFunction.update = async (args, env) =&gt; { //get a new data const data = await interpretate(args[0], env); //get the canvas from the local memeory const context = env.local.ctx; //draw our boxes for(let i=0; i&lt;40; ++i) { for (let j=0; j&lt;40; ++j) { //old pixels will leave blue traces if (env.local.old[i][j] &gt; 0) { context.fillStyle = &quot;rgba(0,0,255,0.2)&quot;; context.fillRect(i*10 + 2, j*10 + 2, 6, 6); } //new pixels if (data[i][j] &gt; 0) { context.fillStyle = &quot;rgba(255,0,0,0.4)&quot;; context.fillRect(i*10 + 1, j*10 + 1, 8, 8); } else { context.fillStyle = &quot;rgba(255,255,255,0.4)&quot;; context.fillRect(i*10 + 1, j*10 + 1, 8, 8); } } } //store the previous frame env.local.old = data; }   and the destructor  .js core.MyFunction.destroy = (args, env) =&gt; {}   Then we can use our function with some dynamic symbols using Offload wrapper  gameOfLife = {224, {2, {{2, 2, 2}, {2, 1, 2}, {2, 2, 2}}}, {1, 1}}; board = RandomInteger[1, {40, 40}]; MyFunction[board] // CreateFrontEndObject   The output will look like this    Now this is separate object, you can copy and paste it as a symbol!  By updating board symbol we cause .update method to be called  Do[ board = CellularAutomaton[gameOfLife, board, {{0, 1}}] // Last; Pause[0.1]; , {i,1,100}]   Then you will see a nice animation and each instance you copied will be updated as well    Virtual symbols​  An interpreter can automatically create a container for any WLJS symbols, when it sees a special property defined  core.MySymbol.virtual = true   then MySymbol takes all benefits of containers even if it was called anonymously from FrontSubmit.  For example Sphere, Line are virtual function or symbols, since for each instance of a Sphere we need to store its data, position in order to be able to update them correctly and couple to dynamic symbols.  Dynamic symbols​  Any defined Wolfram Language symbol with OwnValue like  radius = 1;   being wrapped into Offload automatically creates core.radius virtual symbol  Graphics[Disk[{0.,0.}, Offload[radius]]]     Wolfram Kernel tracks any changes of a symbol with own-values put inside Offload wrapper automatically. ::  Since Disk is also virtual symbol, then two containers created for Disk and radius will be coupled together, i.e.  EventHandler[InputRange[0,1,0.1], Function[r, radius = r]]   will cause .update method on Disk    ","version":null,"tagName":"h3"},{"title":"Injection into the container's instance/env​","type":1,"pageTitle":"WLJS Functions","url":"/frontend/Advanced/Frontend interpretation/WLJS Functions#injection-into-the-containers-instanceenv","content":" Can be very handy if one want to append new objects to a 2D or 3D scene without reevaluating anything. This is anyway a somewhat env.scene object, that it principle can be populated with new graphics in realtime.  For that one need to attach to some particular instance of Frontend Object and evaluate inside it the desired expression with new data. This can be done using MetaMarker and FrontSubmit  🎡 Example with lines​  Let us define some typical plot and apply a meta-marker on it  Plot[x, {x,0,1}, Epilog-&gt;{MetaMarker[&quot;label&quot;]}]   This will generate Graphics object and place an invisible marker on it, which will store the instance uid of this frontend object.  Now we can apply a selector query and place a new expression (or lets say - evaluate in-place) inside the given container  FrontSubmit[Line[{{0.2,0.6},{0.1,0.5}}], MetaMarker[&quot;label&quot;]]   tip Consider to read FrontSubmit and MetaMarker ","version":null,"tagName":"h3"},{"title":"Backgrounds","type":0,"sectionRef":"#","url":"/frontend/Advanced/Slides/Backgrounds","content":"","keywords":"","version":null},{"title":"Global settings​","type":1,"pageTitle":"Backgrounds","url":"/frontend/Advanced/Slides/Backgrounds#global-settings","content":" You can apply it for all slides by redefining .reveal class name  cell 1 .wlx &lt;style&gt; .reveal { background: black; color: white; } &lt;/style&gt;   now the default background is black  cell 2 .slide # Hey, I am Black!   warning It will not work to a projected output cell  ","version":null,"tagName":"h2"},{"title":"Local control​","type":1,"pageTitle":"Backgrounds","url":"/frontend/Advanced/Slides/Backgrounds#local-control","content":" Using RevealJS data attributes, one can specify the background for each slide individually  .slide &lt;!-- .slide: data-background-color=&quot;black&quot; --&gt; &lt;!-- .slide: style=&quot;color:white&quot; --&gt; # Hey, I am black     ","version":null,"tagName":"h2"},{"title":"Dynamic background​","type":1,"pageTitle":"Backgrounds","url":"/frontend/Advanced/Slides/Backgrounds#dynamic-background","content":" One can put a giant Graphics or Graphics3D or Image element to the background of your slide. For this reason you need to add some CSS in order to position them properly with a content  note The standard size of a slide is 960x700  Let us firstly make a draft  cell 1 BackImageDynamic := Graphics[{ Black, Rectangle[{0,0}, {1,1}], Red, curveDynamicGenerator[{0.5,0.5}, 0.8], Blue, curveDynamicGenerator[{0.5,0.5}, 0.3] }, Controls-&gt;False, ImagePadding-&gt;0, ImageSize-&gt;{960,700}, PlotRange-&gt;{{0,1}, {0,1}}];   here curveDynamicGenerator will be our animated fragment  cell 2 curveDynamicGenerator[center_, radius_] := With[{cell = ResultCell[]}, LeakyModule[{ pts = Table[Norm[center - radius] {Sin[i], Cos[i]} + center, {i, 0, 2 Pi + 0.1, 0.1}], disk = {10,10}, modulation = 0., phase = 0., initial = 12. RandomInteger[{0,10}], task }, task = SetInterval[ pts = Table[( Norm[center - radius] + 0.02 modulation Sin[50. i + 30 phase] ) {Sin[i], Cos[i]} + center , {i, 0, 2 Pi + 0.1, 0.01}]; disk = With[{i = 3. phase + initial}, (Norm[center - radius] + 0.01 modulation Sin[50. i + 30 phase] ) {Sin[i], Cos[i]} + center ]; phase = phase + 0.02; modulation = Sin[phase/2]; , 100]; (* remove task if cell has been destroyed *) EventHandler[cell, {&quot;Destroy&quot; -&gt; Function[Null, Print[&quot;Removed&quot;]; TaskRemove[task]]}]; {Line[pts // Offload], Disk[disk // Offload, 0.013]} ]]   Since our animation is quite simple, therefore we use SetInterval instead of frame-by-frame animation via AnimationFrameListener  tip To make sure that the slide heigh is 100% of the window, add the attribute .slide &lt;!-- .slide: style=&quot;height:100%&quot; --&gt;   In order to put it under the content, we need to use an absolute positioning  .slide &lt;!-- .element: data-background-color=&quot;black&quot; --&gt; &lt;!-- .slide: style=&quot;height:100%&quot; --&gt; &lt;div class=&quot;w-full h-full flex flex-col text-white&quot;&gt; &lt;div class=&quot;absolute w-full h-full&quot; style=&quot;scale: 1.1; left:-30px; z-index:-100&quot;&gt;&lt;BackImageDynamic/&gt;&lt;/div&gt; &lt;div class=&quot;mt-auto mb-auto&quot;&gt; # Title of a slide This is just an example &lt;/div&gt; &lt;/div&gt;   The demonstration   ","version":null,"tagName":"h2"},{"title":"Components","type":0,"sectionRef":"#","url":"/frontend/Advanced/Slides/components","content":"","keywords":"","version":null},{"title":"Layout helpers​","type":1,"pageTitle":"Components","url":"/frontend/Advanced/Slides/components#layout-helpers","content":" This is a common case, when components comes handy. Imagine a typical situation, when we need to organize columns in the presentation  .wlx Columns[cols__] := With[{width = 99 / (List[cols]//Length) // Floor}, With[{Layout = Table[ &lt;div style=&quot;width: {width}%&quot;&gt; &lt;Col/&gt; &lt;/div&gt; , {Col, List[cols]}] }, &lt;div style=&quot;display:flex&quot;&gt; &lt;Layout/&gt; &lt;/div&gt; ] ]   here we firstly calculated the width of each column based of their number, and then used a normal HTML with CSS to style them.  Since the input argument is not typed, one can use nested tags, or WL expressions as a content for each columns. Here is one of the slides of @JerryI's presentation on a recent talk in 2023  .slide # Different ways of calculating properties for magnetic materials &lt;br/&gt;&lt;br/&gt; &lt;Columns&gt; &lt;p style=&quot;text-align:left&quot;&gt; ## DFT+U DFT with Columb repulsion between sites allowing to model the localized magnetic moments - lack of $\\sim 1~cm^{-1}$ accuracy - slow and time-consuming - hard to control the intermediate steps - feeling of working with &quot;black box&quot; &lt;/p&gt; &lt;p style=&quot;text-align:left&quot;&gt; ## Effective Hamiltonians Spin Hamiltonian, Heisenberg, etc... randomly picked - non consistent (completely different from compound to compund) - overparametrized &lt;/p&gt; &lt;p style=&quot;text-align:left&quot;&gt; ## Microscopic theory &lt;!-- .element: class=&quot;fragment highlight-red&quot; data-fragment-index=&quot;1&quot; --&gt; Building the energy levels step by step from the isolated ion considering crystal structure and interactions &lt;!-- .element: class=&quot;fragment highlight-red&quot; data-fragment-index=&quot;1&quot; --&gt; - considered to be outdated - ~~requires a lot of calculations~~ - hard to threat collective excitations &lt;span style=&quot;color:red&quot;&gt;Use Computer Algebra!&lt;/span&gt; &lt;!-- .element: class=&quot;fragment&quot; data-fragment-index=&quot;1&quot; --&gt; &lt;/p&gt; &lt;/Columns&gt;   One can see, that this is again a mixture of HTML/XML and Markdown. Each tag entering into &lt;Columns&gt; is treated as a separate argument.  But nothing can stop you from using a plain text  .slide &lt;Columns&gt; # Title First column &lt;Identity&gt; # Other title Second one &lt;/Identity&gt; &lt;/Columns&gt;   info Identity or dummy or p or div helps WLX to differentiate between the first and second argument. It is similar to li tag used in ul HTML tag used for lists.  You can use the full power of modern CSS to style it in a way you like. ","version":null,"tagName":"h2"},{"title":"Large tables of data","type":0,"sectionRef":"#","url":"/frontend/Advanced/Slides/tables","content":"Large tables of data One can utilize component InputTable, that originally stands for editing table, but can be used just to view them as well. The good thing about it that it supports infinitely large tables since the actual content is loaded by parts (and unloads if no longer needed) statistics on CPU TB = TableView[ExampleData[{&quot;Statistics&quot;, &quot;CPUPerformance&quot;}], &quot;Height&quot;-&gt;600] // CreateFrontEndObject; slide .slide ## CPU Performance An example list &lt;br/&gt;&lt;br/&gt; &lt;TB/&gt; The expected result","keywords":"","version":null},{"title":"2. Static decorations","type":0,"sectionRef":"#","url":"/frontend/Advanced/Objects/Static decorations","content":"","keywords":"","version":null},{"title":"Summary Item​","type":1,"pageTitle":"2. Static decorations","url":"/frontend/Advanced/Objects/Static decorations#summary-item","content":" The easiest way of providing a bit more information, but still keeping the actual expression intact is to use ArrangeSummaryBox  StateMachine /: MakeBoxes[s: StateMachine[symbol_Symbol?AssociationQ], form: (StandardForm | TraditionalForm)] := Module[{}, With[{ summary = {BoxForm`SummaryItem[{&quot;State: &quot;, s[&quot;State&quot;]}]} }, BoxForm`ArrangeSummaryBox[ StateMachine, s, None, summary, Null ] ] ]   Here we redefined a standard output form to a decorated summary box, providing the visible state field  StateMachine[&quot;State&quot; -&gt; 3]     info Despite the fact of looking different, you can still work with it normally: setting and getting properties, i.e. is 100% valid  ","version":null,"tagName":"h2"},{"title":"Custom decorations​","type":1,"pageTitle":"2. Static decorations","url":"/frontend/Advanced/Objects/Static decorations#custom-decorations","content":" One can do all decorations from scratch using Graphics for instance  StateMachine /: MakeBoxes[s: StateMachine[symbol_Symbol?AssociationQ], form: (StandardForm | TraditionalForm)] := Module[{}, With[{ g = Graphics[{ Opacity[0.5], Table[ Rotate[{ Hue[i/12.0, 1.0, 0.5], Rectangle[{-1,-1}, {1,1}] }, i / (s[&quot;State&quot;]+1)] , {i, 0, 6Pi, Pi}] }, ImageSize-&gt;{100,100}, ImagePadding-&gt;None] }, ViewBox[s, g // CreateFrontEndObject] ] ]   The result will look like  machine = StateMachine[]     StateMachineChange[machine, 2]     ","version":null,"tagName":"h2"},{"title":"Summary Item and Custom decoration​","type":1,"pageTitle":"2. Static decorations","url":"/frontend/Advanced/Objects/Static decorations#summary-item-and-custom-decoration","content":" Why not to merge both leaving the graphics as an icon?  StateMachine /: MakeBoxes[s: StateMachine[symbol_Symbol?AssociationQ], form: (StandardForm | TraditionalForm)] := Module[{}, With[{ summary = {BoxForm`SummaryItem[{&quot;State: &quot;, s[&quot;State&quot;]}]}, icon = Graphics[{ Opacity[0.5], Table[ Rotate[{ Hue[i/12.0, 1.0, 0.5], Rectangle[{-1,-1}, {1,1}] }, i / (s[&quot;State&quot;]+1), {0.,0.}] , {i, 0, 6Pi, Pi}] }, ImageSize-&gt;{50,50}, AspectRatio-&gt;1, ImagePadding-&gt;None] }, BoxForm`ArrangeSummaryBox[ StateMachine, s, icon, summary, Null ] ] ]   machine = StateMachine[&quot;State&quot;-&gt;2]     ","version":null,"tagName":"h2"},{"title":"Javascript decoration​","type":1,"pageTitle":"2. Static decorations","url":"/frontend/Advanced/Objects/Static decorations#javascript-decoration","content":" There is also an option to use pure Javascript to render an object, let us make our layout much simpler starting with  StateMachine /: MakeBoxes[s: StateMachine[symbol_Symbol?AssociationQ], form: (StandardForm | TraditionalForm)] := Module[{}, ViewBox[s, CustomDecorator[s[&quot;State&quot;]]] ]   Here we mentioned CustomDecorator which is going to be our WLJS Function  Then, create a new cell  .js core.CustomDecorator = async (args, env) =&gt; { const state = await interpretate(args[0], env); const element = env.element; element.classList.add('flex', 'rounded-md', 'p-2'); element.style.border = &quot;1px solid #999&quot;; element.style.boxShadow = &quot;inset 0 2px 4px 0 rgb(0 0 0 / 0.05)&quot;; element.style.transitionDuration = '0.8s'; element.style.transitionProperty = 'transform'; setTimeout(() =&gt; { element.style.transform = &quot;rotate(360deg)&quot;; }, 100); element.innerText = state; }   The result will be following    ","version":null,"tagName":"h2"},{"title":"Animated decoration in Summary Item​","type":1,"pageTitle":"2. Static decorations","url":"/frontend/Advanced/Objects/Static decorations#animated-decoration-in-summary-item","content":" Why not also animate it using Wolfram Language?  Let it be many balls bouncing the walls. Firstly let us make proof of concept  test balls = RandomReal[{-1,1}, {4,2}]; velocities = RandomReal[{-1,1}, {4,2}]; EventHandler[&quot;animate&quot;, Function[Null, {balls, velocities} = Map[With[{ v = {If[Abs[#[[1,1]]] &gt;= 1, -1, 1], If[Abs[#[[1, 2]]] &gt;= 1, -1, 1]} #[[2]], p = #[[1]] }, {p + 0.2 v, v} ]&amp;, Transpose[{balls, velocities}]] // Transpose; ]] Graphics[{PointSize[0.03], Point[balls // Offload], AnimationFrameListener[balls // Offload, &quot;Event&quot;-&gt;&quot;animate&quot;]}, PlotRange-&gt;{{-1,1}, {-1,1}}, TransitionType-&gt;None]   Now we need only to scope our variables and embed it to summary item  StateMachine /: MakeBoxes[s: StateMachine[symbol_Symbol?AssociationQ], form: (StandardForm | TraditionalForm)] := Module[{ balls = RandomReal[{-1,1}, {s[&quot;State&quot;],2}], velocities = RandomReal[{-1,1}, {s[&quot;State&quot;],2}], animateEvent = CreateUUID[] }, EventHandler[animateEvent, Function[Null, {balls, velocities} = Map[With[{ v = {If[Abs[#[[1,1]]] &gt;= 1, -1, 1], If[Abs[#[[1, 2]]] &gt;= 1, -1, 1]} #[[2]], p = #[[1]] }, {p + 0.2 v, v} ]&amp;, Transpose[{balls, velocities}]] // Transpose; ]]; With[{ summary = {BoxForm`SummaryItem[{&quot;State: &quot;, s[&quot;State&quot;]}]}, icon = Graphics[{ PointSize[0.03], Point[balls // Offload], AnimationFrameListener[balls // Offload, &quot;Event&quot;-&gt;animateEvent] }, PlotRange-&gt;{{-1,1}, {-1,1}}, TransitionType-&gt;None, ImageSize-&gt;{50,50}, AspectRatio-&gt;1, ImagePadding-&gt;None ] }, BoxForm`ArrangeSummaryBox[ StateMachine, s, icon, summary, Null ] ] ]   Then let us see the result  machine = StateMachine[&quot;State&quot;-&gt;2]     If you want to see an optimized version, please, follow below  ","version":null,"tagName":"h2"},{"title":"Optimized version​","type":1,"pageTitle":"2. Static decorations","url":"/frontend/Advanced/Objects/Static decorations#optimized-version","content":" Since it relies on AnimationFrameListener, it runs as fast as possible, which might be an issue for a lot of those objects on the screen.  Just using SetInterval is not an options, since we need something to remove this timer, when there is no visible widgets.  note ArrangeSummaryBox is a wrapper over ViewBox, which has an event generator. A user can attach EventHandler to it and check if a widget was destroyed or created.  StateMachine /: MakeBoxes[s: StateMachine[symbol_Symbol?AssociationQ], form: (StandardForm | TraditionalForm)] := Module[{ balls = RandomReal[{-1,1}, {s[&quot;State&quot;],2}], velocities = RandomReal[{-1,1}, {s[&quot;State&quot;],2}], task, instances = 0, calculate, controller = CreateUUID[], construct, destruct }, (* if someone closed notebook *) With[{connection = EventClone[CurrentWindow[]]}, EventHandler[connection, {&quot;Closed&quot; -&gt; Function[Null, destruct; ]}]; ]; construct := With[{}, task = SetInterval[calculate[], 100]; ]; destruct := With[{}, TaskRemove[task]; ]; EventHandler[controller, { &quot;Mounted&quot; -&gt; Function[Null, If[instances === 0, construct]; instances = instances + 1; ], &quot;Destroy&quot; -&gt; Function[Null, instances = instances - 1; (* unsubscribe when there is no instances *) If[instances === 0, destruct]; ] }]; calculate = Function[Null, {balls, velocities} = Map[With[{ v = {If[Abs[#[[1,1]]] &gt;= 1, -1, 1], If[Abs[#[[1, 2]]] &gt;= 1, -1, 1]} #[[2]], p = #[[1]] }, {p + 0.2 v, v} ]&amp;, Transpose[{balls, velocities}]] // Transpose; ]; With[{ summary = {BoxForm`SummaryItem[{&quot;State: &quot;, s[&quot;State&quot;]}]}, icon = Graphics[{ PointSize[0.03], Point[balls // Offload] }, PlotRange-&gt;{{-1,1}, {-1,1}}, TransitionType-&gt;&quot;Linear&quot;, TransitionDuration -&gt; 100, ImageSize-&gt;{50,50}, AspectRatio-&gt;1, ImagePadding-&gt;None ] }, BoxForm`ArrangeSummaryBox[ StateMachine, s, icon, summary, Null, &quot;Event&quot; -&gt; controller ] ] ]   The following changes were made  SetInterval drives the calculations with 100 ms intervalTransitionDuration interpolates the results with 100 ms windowWe listen an events of creation and destruction of widgets using &quot;Event&quot; option of ArrangeSummaryBoxWe remove timers, when there is no visible instances on the screenWe remove timers, when the connection to the notebook was lost (a user closed notebook) ","version":null,"tagName":"h3"},{"title":"Slides","type":0,"sectionRef":"#","url":"/frontend/Advanced/Slides/","content":"","keywords":"","version":null},{"title":"Layout​","type":1,"pageTitle":"Slides","url":"/frontend/Advanced/Slides/#layout","content":" It is not opinionated on how you organize the content on the slide. By the default all titles marked as #, ## etc are centered and obtain standard h1, h2 ... HTML tags. All paragraphs are wrapped with p behind the scenes.  If you need two columns, use HTML and any available method to make columns. For instance using flex  .slide # Title &lt;div style=&quot;display: flex&quot;&gt; &lt;div style=&quot;width: 50%&quot;&gt; ## Subtitle 1 And some content &lt;/div&gt; &lt;div style=&quot;width: 50%&quot;&gt; ## Subtitle 2 And some content &lt;/div&gt; &lt;/div&gt;   tip To use Markdown in HTML, please, add line breaks before and after  The result looks like this    warning In order to mix Markdown with HTML or WLX correctly, remove white spaces from the beginning markdown, i.e. .slide &lt;div&gt; # It wont work &lt;/div&gt; but instead .slide &lt;div&gt; # It will work &lt;/div&gt;   ","version":null,"tagName":"h2"},{"title":"Using WLX​","type":1,"pageTitle":"Slides","url":"/frontend/Advanced/Slides/#using-wlx","content":" Of course one can make a helper function for it  .wlx Columns[Col1_, Col2_] := With[{}, &lt;div style=&quot;display: flex&quot;&gt; &lt;div style=&quot;width: 50%&quot;&gt;&lt;Col1/&gt;&lt;/div&gt; &lt;div style=&quot;width: 50%&quot;&gt;&lt;Col2/&gt;&lt;/div&gt; &lt;/div&gt; ]   and then  .slide # Title &lt;Columns&gt; &lt;div&gt; ## Subtitle 1 And some content &lt;/div&gt; &lt;div&gt; ## Subtitle 2 And some content &lt;/div&gt; &lt;/Columns&gt;   The result will be the same. Additional tags we used div are necessary to help WLX to differentiate between the first and the second arguments of Columns similar to how li and ul tags are used to make lists.  note See advanced guide on components by the link components  ","version":null,"tagName":"h3"},{"title":"Images​","type":1,"pageTitle":"Slides","url":"/frontend/Advanced/Slides/#images","content":" RevealJS uses standard Markdown notations for images  .slide # Title ![desc](https://upload.wikimedia.org/wikipedia/en/a/a9/Example.jpg)     You can drag and drop them from anywhere    Local files are also supported  .slide ![local](example.png)   info A web server will try to locate example.png in the directory where the notebook is located. If there is no file, it tries to use it as global path starting from the root folder of a system disk.  Regular HTML img tag is supported as well. It comes handy if you need to set the size  .slide &lt;img width=&quot;700&quot; src=&quot;https://upload.wikimedia.org/wikipedia/en/a/a9/Example.jpg&quot;/&gt;   ","version":null,"tagName":"h2"},{"title":"Equations​","type":1,"pageTitle":"Slides","url":"/frontend/Advanced/Slides/#equations","content":" This is provided by well-known KaTeX library. Use it as a normal LaTeX  .slide $m \\\\mathbf{a} = \\\\mathbf{F}$   warning A single slash notation is reserved originally by WL Kernel, therefore you have to stick to double slashes \\\\  or a multiline  .slide $$ \\\\begin{bmatrix} m \\\\mathbf{a} = \\\\mathbf{F} \\\\end{bmatrix} $$   If you need to highlight WL code, or JS, or HTML - see embed-wl.  ","version":null,"tagName":"h2"},{"title":"Embedding PDF or websites​","type":1,"pageTitle":"Slides","url":"/frontend/Advanced/Slides/#embedding-pdf-or-websites","content":" We have a full power of HTML. To embed a local PDF document from the folder of your notebook  .slide &lt;embed width=&quot;800&quot; height=&quot;500&quot; src=&quot;antisymmetry.pdf&quot;/&gt;     or the whole website  .slide &lt;iframe width=&quot;800&quot; height=&quot;500&quot; src=&quot;https://chat.openai.com&quot;/&gt;     and to make a nicer corners  .slide &lt;iframe style=&quot;border: none; border-radius: 4px&quot; width=&quot;800&quot; height=&quot;500&quot; src=&quot;https://chat.openai.com&quot;/&gt;   ","version":null,"tagName":"h2"},{"title":"Transitions and fragments​","type":1,"pageTitle":"Slides","url":"/frontend/Advanced/Slides/#transitions-and-fragments","content":" Revealing the content is an art. You can specify some fragments to appear later, or disappear or change the color. RevealJS uses HTML comments in the form  &lt;!-- .element: class=&quot;fragment ACTION&quot; data-fragment-index=&quot;INDEX&quot; --&gt;   For example to reveal 1 by 1 in order  .slide # Slide Fragment disapear &lt;!-- .element: class=&quot;fragment fade-out&quot; data-fragment-index=&quot;1&quot; --&gt; Fragment appear &lt;!-- .element: class=&quot;fragment&quot; data-fragment-index=&quot;2&quot; --&gt; Fragment changes the color &lt;!-- .element: class=&quot;fragment highlight-red&quot; data-fragment-index=&quot;3&quot; --&gt;     See more available transitions at RevealJS.  note Custom transitions are not supported, unless it is made using Graphics using animations approach  ","version":null,"tagName":"h2"},{"title":"Events​","type":1,"pageTitle":"Slides","url":"/frontend/Advanced/Slides/#events","content":" To capture the events from a slide (revealing the slide or revealing individual fragments) - use SlideEventListener  It attaches itself to the slide, where it has been placed  .slide # 1st Slide Nothing --- # 2nd Slide A message pops up Another message &lt;!-- .element: class=&quot;fragment&quot; data-fragment-index=&quot;1&quot; --&gt; &lt;SlideEventListener Id={&quot;myEvent&quot;}/&gt;   Before evaluation, you should attach an event handler (EventHandler) to it  EventHandler[&quot;myEvent&quot;, { &quot;Slide&quot; -&gt; (Print[&quot;Hey there!&quot;]&amp;), &quot;fragment-1&quot; -&gt; (Print[&quot;Hey there from fragment!&quot;]&amp;) }]   The identifier of SlideEventListener acts as an event object. There are two patterns on how you can capture certain event  &quot;Slide&quot; - is fired when a slide has been revealed&quot;fragment-INDEX&quot; - is fired when a fragment number INDEX has been revealed  info To learn more about on how to utilize it for animations and etc, please, read animations section.  ","version":null,"tagName":"h3"},{"title":"WL expressions and data-driven slides​","type":1,"pageTitle":"Slides","url":"/frontend/Advanced/Slides/#wl-expressions-and-data-driven-slides","content":" This is just a simple demonstration. Using WLX one can directly write and execute any WL expressions on a slide  GetTime := TextString[Now];   .slide # Using WLX Allow you to do some cool stuff Your local time is __&lt;GetTime/&gt;__     Or embed any graphics object  Figure = SphericalPlot3D[SphericalHarmonicY[2,0, t,p], {t, 0, Pi}, {p, 0, 2Pi}];   .slide # Embed some figures Even 3D &lt;div style=&quot;text-align: center; display: inline-flex;&quot;&gt; &lt;Figure/&gt; &lt;/div&gt; Try to move it using your mouse     as well as some figures plotted from a local CSV file. In the example below we use random list of points to do some simple computations  pts = RandomReal[10, {100, 2}]; Figure = ListLinePlot[pts[[Last@FindShortestTour[pts]]], Epilog-&gt;{Point[pts]}]   .slide Compute and plot the shortest tour through 100 random points: &lt;Figure/&gt;     For more advanced stuff see animations  ","version":null,"tagName":"h2"},{"title":"Pointer​","type":1,"pageTitle":"Slides","url":"/frontend/Advanced/Slides/#pointer","content":" Pointer is provided by a separate plugin used by RevealJS. To toggle it press q when the focus is on a slide   ","version":null,"tagName":"h2"},{"title":"Transitions","type":0,"sectionRef":"#","url":"/frontend/Advanced/Slides/Transitions","content":"","keywords":"","version":null},{"title":"Full list​","type":1,"pageTitle":"Transitions","url":"/frontend/Advanced/Slides/Transitions#full-list","content":" Name\tEffectnone\tSwitch backgrounds instantly fade\tCross fade — default for background transitions slide\tSlide between backgrounds — default for slide transitions convex\tSlide at a convex angle concave\tSlide at a concave angle zoom\tScale the incoming slide up so it grows in from the center of the screen ","version":null,"tagName":"h2"},{"title":"HTML","type":0,"sectionRef":"#","url":"/frontend/Cell types/HTML","content":"HTML Github repoYou can also write plain HTML together with embedded Wolfram Language expressions WSP template engine allows to use Wolfram Language to process the text like PHP (see more here).","keywords":"","version":null},{"title":"Fragments","type":0,"sectionRef":"#","url":"/frontend/Advanced/Slides/Fragments","content":"","keywords":"","version":null},{"title":"Animation types​","type":1,"pageTitle":"Fragments","url":"/frontend/Advanced/Slides/Fragments#animation-types","content":" Here is the list of available classes  Name\tEffectfade-out\tStart visible, fade out fade-up\tSlide up while fading in fade-down\tSlide down while fading in fade-left\tSlide left while fading in fade-right\tSlide right while fading in fade-in-then-out\tFades in, then out on the next step current-visible\tFades in, then out on the next step fade-in-then-semi-out\tFades in, then to 50% on the next step grow\tScale up semi-fade-out\tFade out to 50% shrink\tScale down strike\tStrike through highlight-red\tTurn text red highlight-green\tTurn text green highlight-blue\tTurn text blue highlight-current-red\tTurn text red, then back to original on next step highlight-current-green\tTurn text green, then back to original on next step highlight-current-blue\tTurn text blue, then back to original on next step  ","version":null,"tagName":"h2"},{"title":"Custom Fragments​","type":1,"pageTitle":"Fragments","url":"/frontend/Advanced/Slides/Fragments#custom-fragments","content":" Following the original guide we can craft our own effects. For example for blur effect one can do it in two cells  cell 1 .wlx &lt;style&gt; .fragment.blur { filter: blur(5px); } .fragment.blur.visible { filter: none; } &lt;/style&gt;   cell 2 .slide # Example A sample line &lt;!-- .element: class=&quot;fragment blur&quot; data-fragment-index=&quot;1&quot; --&gt;  ","version":null,"tagName":"h2"},{"title":"Styling","type":0,"sectionRef":"#","url":"/frontend/Advanced/Slides/Styling","content":"","keywords":"","version":null},{"title":"Global settings​","type":1,"pageTitle":"Styling","url":"/frontend/Advanced/Slides/Styling#global-settings","content":" One can set a global style applied for all slides in your notebook. You need to use HTML or WLX cels for it and redefine .reveal class  cell 1 .wlx &lt;style&gt; .reveal { font-family: Arial; } &lt;/style&gt;   now the default font will be Arial  cell 2 .slide # Hey, I am Arial!   ","version":null,"tagName":"h2"},{"title":"Local​","type":1,"pageTitle":"Styling","url":"/frontend/Advanced/Slides/Styling#local","content":" One can do the same with an individual slide by wrapping the text into HTML or WLX tags  .slide &lt;div style=&quot;font-family: Arial&quot;&gt; # Title, I am Arial &lt;/div&gt; I am not Arial   warning In order to mix Markdown with HTML or WLX correctly, remove white spaces from the beginning markdown, i.e. .slide &lt;div&gt; # It wont work &lt;/div&gt; but instead .slide &lt;div&gt; # It will work &lt;/div&gt;   Or one can define a class for it early  cell 1 .wlx &lt;style&gt; .specialClass { font-family: Arial; } &lt;/style&gt;   cell 2 .slide &lt;div class=&quot;specialClass&quot;&gt; # Title, I am Arial &lt;/div&gt; I am not Arial   ","version":null,"tagName":"h2"},{"title":"Using data attributes​","type":1,"pageTitle":"Styling","url":"/frontend/Advanced/Slides/Styling#using-data-attributes","content":" It might come handy to use RevealJS styling option for individual elements instead of writing plain XML  .slide &lt;!-- .slide: data-background-color=&quot;black&quot; --&gt; # Hey, I am white &lt;!-- .element: style=&quot;color:white&quot; --&gt; # Hey, I am red &lt;!-- .element: style=&quot;color:red&quot; --&gt;   Here slide is applied to an entire slide, while element is localized to the last markdown element. ","version":null,"tagName":"h3"},{"title":"Many more","type":0,"sectionRef":"#","url":"/frontend/Cell types/Many more","content":"Many more You can extend output cell types via a few lines of code and you favorite framework / package info Package system docs are still in development. Please request on Github issues to give it priority Mermaid​ Github repoDraw beautiful diagrams by code .mermaid pie title NETFLIX &quot;Time spent looking for movie&quot; : 90 &quot;Time spent watching it&quot; : 10 ","keywords":"","version":null},{"title":"Markdown","type":0,"sectionRef":"#","url":"/frontend/Cell types/Markdown","content":"","keywords":"","version":null},{"title":"Autoupload images​","type":1,"pageTitle":"Markdown","url":"/frontend/Cell types/Markdown#autoupload-images","content":" Drag and drop a file to the editor  Github repoTo switch to Markdown language with LaTeX support use .md prefix on the first line ","version":null,"tagName":"h2"},{"title":"Code highlighting","type":0,"sectionRef":"#","url":"/frontend/Advanced/Slides/embed-wl","content":"Code highlighting Since it support WLX syntax as well, one can combine the copied text from the normal Wolfram Language cell into a EditorView component prototype .wlx CodeInset[str_String] := With[{Fe = EditorView[str] // CreateFrontEndObject}, &lt;div style=&quot;text-align: left;&quot;&gt;&lt;Fe/&gt;&lt;/div&gt; ] Then somewhere on your slide .slide # Input cell inside a slide &lt;CodeInset&gt; (*SbB[*)Subscript[B(*|*),(*|*)k_, q_](*]SbB*)[coords_] := Sum[ With[{\\\\[Theta] = ToSphericalCoordinates[c][[2]], \\\\[Phi] = ToSphericalCoordinates[c][[3]]}, (*SpB[*)Power[(-1)(*|*),(*|*)q](*]SpB*) (*SbB[*)Subscript[a(*|*),(*|*)k](*]SbB*)[Norm[c]] (*SqB[*)Sqrt[(*FB[*)((4Pi)(*,*)/(*,*)(2k + 1))(*]FB*)](*]SqB*) SphericalHarmonicY[k,-q, \\\\[Theta], \\\\[Phi]] ] , {c, coords}] &lt;/CodeInset&gt; info There is no need in writing (*funny comments*) and etc. manually, this is a representation of cell's elements (Boxes) from a normal WL editor. Just copy the text from it (input/output cell) The result will look like this","keywords":"","version":null},{"title":"Files","type":0,"sectionRef":"#","url":"/frontend/Cell types/Files","content":"","keywords":"","version":null},{"title":"Image viewer​","type":1,"pageTitle":"Files","url":"/frontend/Cell types/Files#image-viewer","content":" You can drop any image available in the folder of your notebook and type in a new cell its filename  randompic.png     ","version":null,"tagName":"h2"},{"title":"Reading and writing files​","type":1,"pageTitle":"Files","url":"/frontend/Cell types/Files#reading-and-writing-files","content":" In principle you can print the content of any file located in the notebook's folder by typing its name without line breaks  filename.txt   For writing this is the same, but the actual content goes from the next line  filename.txt Hello World     Or, if you are writing a package, it will come handy  cell 1 IR.wl BeginPackage[&quot;JerryI`Mirage`IR`&quot;] (* utils *) MapHeld[f_, list_] := Table[Extract[Unevaluated[list], i, f], {i, 1, Length[Unevaluated[list]]}] SetAttributes[MapHeld, HoldAll] ClearAll[Lexer] SetAttributes[Lexer, HoldAll] ...     And then, it can be imported easily  cell 2 Get[&quot;IR.wl&quot;];   info Frontend detects the file extension and tries to find a proper syntax highlighting scheme. ","version":null,"tagName":"h2"},{"title":"Javascript","type":0,"sectionRef":"#","url":"/frontend/Cell types/Javascript","content":"","keywords":"","version":null},{"title":"Output cell​","type":1,"pageTitle":"Javascript","url":"/frontend/Cell types/Javascript#output-cell","content":" The returned value from the function can be a Javascript object or DOM element. The last one will be displayed in the output cell  .js const canvas = document.createElement('canvas'); var ctx = canvas.getContext('2d'); canvas.width = 500; canvas.height = 500; const ballRadius = 10; let x = canvas.width / 2; let y = canvas.height - 30; let dx = 2; let dy = -2; function drawBall() { ctx.beginPath(); ctx.arc(x, y, ballRadius, 0, Math.PI * 2); ctx.fillStyle = &quot;#0095DD&quot;; ctx.fill(); ctx.closePath(); } let uid; function draw() { ctx.clearRect(0, 0, canvas.width, canvas.height); drawBall(); if (x + dx &gt; canvas.width - ballRadius || x + dx &lt; ballRadius) { dx = -dx; } if (y + dy &gt; canvas.height - ballRadius || y + dy &lt; ballRadius) { dy = -dy; } x += dx; y += dy; uid = requestAnimationFrame(draw); } uid = requestAnimationFrame(draw); this.ondestroy = () =&gt; { cancelAnimationFrame(uid); } return canvas;     ","version":null,"tagName":"h2"},{"title":"Handlers​","type":1,"pageTitle":"Javascript","url":"/frontend/Cell types/Javascript#handlers","content":" There is a few quite useful built-in objects accesible from the cell.  ","version":null,"tagName":"h2"},{"title":"this.ondestroy​","type":1,"pageTitle":"Javascript","url":"/frontend/Cell types/Javascript#thisondestroy","content":" This object is called when a cell has been destroyed. Assign any clean-up function to the given object  this.ondestroy = () =&gt; { //clean up the stuff }   danger Always clean up any timers using this.ondestroy variable. Otherwise those timers and animation loops will continue to work even after reevaluating the cell.  ","version":null,"tagName":"h3"},{"title":"requestAnimationFrame​","type":1,"pageTitle":"Javascript","url":"/frontend/Cell types/Javascript#requestanimationframe","content":" It is well-common method used in Javascript to synchronize with a framerate of the browser and render some graphics  danger Do not forget to cancelAnimationFrame using this.ondestroy method  ","version":null,"tagName":"h3"},{"title":"Communication with Wolfram Kernel​","type":1,"pageTitle":"Javascript","url":"/frontend/Cell types/Javascript#communication-with-wolfram-kernel","content":" In general one can define any function for WLJS Interpreter using Javascript cells, please see guide here FrontSubmit and Integration with server / client via WebSockets  Also see Communication  For the most applications event-based system is used, see Dynamics ","version":null,"tagName":"h2"},{"title":"Slides","type":0,"sectionRef":"#","url":"/frontend/Cell types/Slides","content":"","keywords":"","version":null},{"title":"See slides tutorial​","type":1,"pageTitle":"Slides","url":"/frontend/Cell types/Slides#see-slides-tutorial","content":" tip To go fullscreen mode - press f key after focusing on the content of a slide  .slide # Title Paragraph   ","version":null,"tagName":"h2"},{"title":"Merge slides from different cells​","type":1,"pageTitle":"Slides","url":"/frontend/Cell types/Slides#merge-slides-from-different-cells","content":" To merge the all slides into a single fat presentation use  .slides   It will merge and print slides from all cells in the notebook into a single one.  tip Use projector feature to show slides in a separate window  ","version":null,"tagName":"h2"},{"title":"Autoupload images​","type":1,"pageTitle":"Slides","url":"/frontend/Cell types/Slides#autoupload-images","content":" Drag and drop a file to the editor  ","version":null,"tagName":"h2"},{"title":"Plugins​","type":1,"pageTitle":"Slides","url":"/frontend/Cell types/Slides#plugins","content":" The package uses also some external plugins  pointer (press Q to toggle) ","version":null,"tagName":"h2"},{"title":"AI Assistant","type":0,"sectionRef":"#","url":"/frontend/Advanced/Snippets/AI Assistant","content":"","keywords":"","version":null},{"title":"Tips​","type":1,"pageTitle":"AI Assistant","url":"/frontend/Advanced/Snippets/AI Assistant#tips","content":" ","version":null,"tagName":"h2"},{"title":"Ask to fix any errors​","type":1,"pageTitle":"AI Assistant","url":"/frontend/Advanced/Snippets/AI Assistant#ask-to-fix-any-errors","content":" When your cursor is inside a cell (no matter javascript, wolfram language or whatever), AI can have an access to it. Ask it to fix errors.  ","version":null,"tagName":"h3"},{"title":"Say \"do it\" in a single message​","type":1,"pageTitle":"AI Assistant","url":"/frontend/Advanced/Snippets/AI Assistant#say-do-it-in-a-single-message","content":" if assistant hesitates to apply changes to your cell and prints changes to a chat  ","version":null,"tagName":"h3"},{"title":"Mention \"current cell\" or \"in my cell\"​","type":1,"pageTitle":"AI Assistant","url":"/frontend/Advanced/Snippets/AI Assistant#mention-current-cell-or-in-my-cell","content":" to force AI assistant to check the current cell, where the cursor is located rather than a context of a chat  ","version":null,"tagName":"h3"},{"title":"Ask to print a new cell one​","type":1,"pageTitle":"AI Assistant","url":"/frontend/Advanced/Snippets/AI Assistant#ask-to-print-a-new-cell-one","content":" if your assistant shows a code example or solution in the chat, but not to the notebook  ","version":null,"tagName":"h3"},{"title":"Note on cell types​","type":1,"pageTitle":"AI Assistant","url":"/frontend/Advanced/Snippets/AI Assistant#note-on-cell-types","content":" An assistant is aware of being in a notebook environment. The following cell types are described well in the initial system prompt  Wolfram LanguageJavascriptHTMLSlidesMermaid diagrams  We also include the differences between Wolfram Mathematica and WLJS Notebook to the initial prompt including Dynamics, InputButton, InputRange, ManipulatePlot and some of the Events system features.  warning An initial prompt costs ∼3500\\sim 3500∼3500 tokens. You can disable it in the settings, but the quality of assistance will drop drastically.  ","version":null,"tagName":"h2"},{"title":"Prompt examples​","type":1,"pageTitle":"AI Assistant","url":"/frontend/Advanced/Snippets/AI Assistant#prompt-examples","content":" Here is a few typical examples  ","version":null,"tagName":"h2"},{"title":"Fixing errors​","type":1,"pageTitle":"AI Assistant","url":"/frontend/Advanced/Snippets/AI Assistant#fixing-errors","content":" For instance you typed something  cell Plot[x, {x,0,1,0.1}] ^^^   Then, keeping your cursor in the cell, open command palette by Cmd/Ctrl+P and typing  fix my errors   or if an assistant hesitates to make changes, write in addition apply changes or fix it in my cell  note Assistant can help you with any kind of used languages. Make sure that your cursor inside the correct cell  ","version":null,"tagName":"h3"},{"title":"Fixing grammar​","type":1,"pageTitle":"AI Assistant","url":"/frontend/Advanced/Snippets/AI Assistant#fixing-grammar","content":" Simply ask  fix my grammar in the current cell   and then if it does not apply changes to the current cell - ask as well  apply changes   ","version":null,"tagName":"h3"},{"title":"Helping with Dynamics​","type":1,"pageTitle":"AI Assistant","url":"/frontend/Advanced/Snippets/AI Assistant#helping-with-dynamics","content":" An assistant is aware of new libraries used here. For example  make an dynamic example, where a green ball follows your cursor on a 2d graph   sample output pt = {0.,0.}; Graphics[{ White, EventHandler[Rectangle[{-10,-10}, {10,10}], { &quot;mousemove&quot; -&gt; Function[pos, pt = pos ] }], Green, Disk[pt // Offload, 0.5] }, PlotRange -&gt; {{-10, 10}, {-10, 10}}]     ","version":null,"tagName":"h3"},{"title":"Make something​","type":1,"pageTitle":"AI Assistant","url":"/frontend/Advanced/Snippets/AI Assistant#make-something","content":" Ask directly from the command palette what you want  make an example slide   it will print a new Slides cell  sample output .slide # Welcome to the Presentation This slide introduces you to the world of presentations in notebooks. --- # The Power of Slides Slides can convey complex ideas succinctly and engagingly. --- # Thank You! We hope you found this introduction useful.     Or to write Javascript code example  write some javascript example with animation   sample output .js let canvas = document.createElement('canvas'); canvas.width = 200; canvas.height = 200; let ctx = canvas.getContext('2d'); let posX = 0; let speed = 2; function draw() { ctx.clearRect(0, 0, canvas.width, canvas.height); ctx.fillStyle = 'red'; ctx.fillRect(posX, 75, 50, 50); posX += speed; if (posX &gt; canvas.width || posX &lt; 0) speed *= -1; } let animFrame; function animate() { draw(); animFrame = requestAnimationFrame(animate); } animate(); this.ondestroy = () =&gt; { cancelAnimationFrame(animFrame); }; return canvas;     Or HTML  show me example with HTML language. Print it to a new cell   sample output .html &lt;div&gt; &lt;h1 class=&quot;text-2xl font-bold&quot;&gt;My First Heading&lt;/h1&gt; &lt;p&gt;This is a paragraph in a div element.&lt;/p&gt; &lt;/div&gt;     Or mermaid diagram  write a mermaid flow-type diagram with the following data: Frontend, which is connected to Backend using Websockets and on the backend Wolfram Language server is running     ","version":null,"tagName":"h3"},{"title":"Asking to write an entire program​","type":1,"pageTitle":"AI Assistant","url":"/frontend/Advanced/Snippets/AI Assistant#asking-to-write-an-entire-program","content":" Quite often it is quite risky, but with more popular languages like Javascript it can work very well. For example  how to capture data from webcam in Javascript and draw it to canvas. Print it to a new cell   which produces a fully working code  sample output .js // First, create elements for the video and canvas const video = document.createElement('video'); const canvas = document.createElement('canvas'); const context = canvas.getContext('2d'); // Set video constraints canvas.width = 640; canvas.height = 480; // Use getUserMedia to access the webcam if(navigator.mediaDevices &amp;&amp; navigator.mediaDevices.getUserMedia) { navigator.mediaDevices.getUserMedia({ video: true }) .then(function(stream) { video.srcObject = stream; video.play(); }) .catch(function(error) { console.log(&quot;Error accessing webcam: &quot;, error); }); } // Draw the video frame to the canvas document.body.appendChild(video); video.addEventListener('play', function() { (function draw() { context.drawImage(video, 0, 0, canvas.width, canvas.height); requestAnimationFrame(draw); })(); }); // Return the canvas element to be rendered return canvas;     warning This code does not stop even if you remove a cell. Please ask AI in addition please modify it so that when i remove a cell it will also stop streaming   ","version":null,"tagName":"h3"},{"title":"Describe the code​","type":1,"pageTitle":"AI Assistant","url":"/frontend/Advanced/Snippets/AI Assistant#describe-the-code","content":" For example asking  describe the code in the current cell   will give a rich description generated by AI, that you can also ask to print to a next cell in Markdown format.  ","version":null,"tagName":"h3"},{"title":"Restart session​","type":1,"pageTitle":"AI Assistant","url":"/frontend/Advanced/Snippets/AI Assistant#restart-session","content":" If you need to flush the session, simply type in the chat window  reset chat  ","version":null,"tagName":"h3"},{"title":"Crypto text","type":0,"sectionRef":"#","url":"/frontend/Advanced/Slides/crypto-text","content":"","keywords":"","version":null},{"title":"Handling text updates​","type":1,"pageTitle":"Crypto text","url":"/frontend/Advanced/Slides/crypto-text#handling-text-updates","content":" One could use TextView or something similar, that automatically binds to Wolfram Language. However, if we have a lot of text or big paragraph it might break the line breaks and in general is a bit heavy then a single span or div in HTML tree.  cell 1 .js //just to reduce getElementById requests const hashTable = {}; core.UpdateTextField = async (args, env) =&gt; { const uid = await interpretate(args[1], env); const data = await interpretate(args[0], env); if (uid in hashTable) { hashTable[uid].innerText = data; } else { hashTable[uid] = document.getElementById(uid); hashTable[uid].innerText = data; } }   here we defined a function, that changes the text-content of a given HTML element found by a given ID  UpdateTextField[text_String, Id_String]   One can test it using HTML or WLX cells  cell 1 .html &lt;span id=&quot;someId&quot;&gt;Text&lt;/span&gt;   cell 2 UpdateTextField[RandomWord[], &quot;someId&quot;] // FrontSubmit   ","version":null,"tagName":"h2"},{"title":"Crypto effect​","type":1,"pageTitle":"Crypto text","url":"/frontend/Advanced/Slides/crypto-text#crypto-effect","content":" The idea is to use Boltzmann weighted sampling function and pick up a letters from English alphabet. The original letter presented in the string will be &quot;energetically&quot; more favourable than the rest letters from the alphabet. The energy difference can be tuned by the statistical temperature T  cell 2 CT`prop[T_] := Join[{Exp[(*FB[*)((1)(*,*)/(*,*)(2 T))(*]FB*)]}, (Exp[(*FB[*)((-1)(*,*)/(*,*)(2 T))(*]FB*)])&amp;/@Range[26]]   and we need to match the uppercases and lowercases  cell 3 CT`variants[c_] := If[LowerCaseQ[c], Join[{c}, Alphabet[]], Join[{c}, ToUpperCase/@Alphabet[]]]   now let us test  RandomChoice[CT`prop[0.2] -&gt; CT`variants[#]] &amp;/@ StringSplit[&quot;Hello World&quot;, &quot;&quot;] // StringRiffle   &quot;H w l l o F o r l d&quot;   ","version":null,"tagName":"h2"},{"title":"Component approach​","type":1,"pageTitle":"Crypto text","url":"/frontend/Advanced/Slides/crypto-text#component-approach","content":" Now we can construct a sort of a wrapper function, that we can use at any text string  cell 4 .wlx CryptoText[TextX_String, OptionsPattern[]] := With[{ UId = CreateUUID[], cell = ResultCell[], win = CurrentWindow[], slide = EventClone[OptionValue[&quot;Slide&quot;]], onStartEvent = OptionValue[&quot;OnStart&quot;] }, Module[{ task, crypted, original, temperature = 1.0, mainTask, easeTask, finished = False }, original = StringSplit[TextX, &quot;&quot;]; crypted = original; EventHandler[slide, { &quot;Slide&quot; -&gt; Function[Null, (* show first time -&gt; start *) mainTask = SetInterval[ (crypted[[#]] = If[original[[#]] =!= &quot; &quot;, RandomChoice[CT`prop[temperature] -&gt; CT`variants[original[[#]]]], original[[#]]]) &amp;/@ RandomSample[Range[Length[original]]]; FrontSubmit[UpdateTextField[StringRiffle[crypted, &quot;&quot;], UId], &quot;Window&quot;-&gt;win]; , 100]; ], onStartEvent -&gt; Function[Null, (* slowly morph into the original text *) With[{easeTask = SetInterval[temperature = temperature + 0.1(0.05 - temperature), 200]}, SetTimeout[ TaskRemove[easeTask]; TaskRemove[mainTask]; , 6000]; ]; EventRemove[slide]; finished = True; ] }]; EventHandler[cell, {&quot;Destroy&quot;-&gt;Function[Null, (* if a cell was removed *) Print[&quot;Removed&quot;]; If[finished, Return[]]; TaskRemove[mainTask]; EventRemove[slide]; ]}]; &lt;span style=&quot;font-family:monospace&quot; id=&quot;{UId}&quot;&gt;&lt;TextX/&gt;&lt;/span&gt; ] ] Options[CryptoText] = {&quot;OnStart&quot;-&gt;&quot;&quot;, &quot;Slide&quot;-&gt;&quot;&quot;};   The final function looks like this  CryptoText[text_String, &quot;Slide&quot;-&gt;slideEvent_String, &quot;OnStart&quot;-&gt;onStart_String] _String   It returns a DOM element span with a unique Id.It assigns an event listener to slideEvent, which is typically generated by SlideEventListener and check if a slide was revealed.If the last thing is true it starts to regenerate text-string and update the DOM element using an Id generated previously.Once onStart pattern was captured (can be a fragment event - see animations), it reduces the statistical temperature to the minimum (easeTask) and then stops the animation after some time  We can see it in action on the slide here  cell 5 .slide Just an empty slide to trigger an event on the next one --- # &lt;CryptoText OnStart={&quot;fragment-1&quot;} Slide={&quot;slide-1&quot;}&gt;Heading&lt;/CryptoText&gt; This is a body of the slide &lt;CryptoText OnStart={&quot;fragment-1&quot;} Slide={&quot;slide-1&quot;}&gt;Housework could be everyone’s work, not just “women’s work”. Why do women enable men to act oblivious to cleaning, grocery shopping, pet feeding, etc? Somehow when men live alone they figure out how to do all of those things all on their own. My friend’s husband claimed he didn’t know that sheets should be washed more than once a season. He said he didn’t know one had to clean toilets. He assumed that since you flush toilets they clean themselves. She tried to get him to help but he did an awful job so she let him off the hook.&lt;/CryptoText&gt; &lt;br/&gt; &lt;CryptoText OnStart={&quot;fragment-1&quot;} Slide={&quot;slide-1&quot;}&gt;Wouldn’t it be better if she spent the time and energy to get him to do it right instead of letting him claim he is “just bad at it”. My sons were raised to clean toilets and change their own sheets. Hopefully, in their future homes, the housework will be equally divided.&lt;/CryptoText&gt; Stop &lt;!-- .element: class=&quot;fragment&quot; data-fragment-index=&quot;1&quot; --&gt; &lt;SlideEventListener Id={&quot;slide-1&quot;}/&gt;   warning This effect will not work if a cell output is projected to another window, since Javascript cells are local and belongs to the original Notebook's window. Press f on a slide to make it fullscreen ","version":null,"tagName":"h2"},{"title":"HTML file","type":0,"sectionRef":"#","url":"/frontend/Export/HTML file","content":"","keywords":"","version":null},{"title":"Portability​","type":1,"pageTitle":"HTML file","url":"/frontend/Export/HTML file#portability","content":" Once exported, an .html file can be unpacked back to a normal notebook once opened using WLJS Notebook app. There are some limitations  no dynamic symbols (used Offload or FrontSubmit) will be preservedno external files, except images will be packagediconized expressions to a file will be lost  However,  all static graphs, 2D, 3D graphics are keptall external images are kept and embedded to a document (including slides and md)NotebookStore data is embedded as wellslides as well as all cell are kept press f to go fullscreen ","version":null,"tagName":"h2"},{"title":"Wolfram Language","type":0,"sectionRef":"#","url":"/frontend/Cell types/Wolfram Language","content":"","keywords":"","version":null},{"title":"Syntax highlighting​","type":1,"pageTitle":"Wolfram Language","url":"/frontend/Cell types/Wolfram Language#syntax-highlighting","content":" Depending on the language you specify at the first line, it will highlight HTML, Markdown or Javascript. Wolfram Language autocomplete and highlighting can be extended using external packages.  Once you define something in Wolfram Kernel session, the corresponding symbol will appear in the autocomplete window.  ","version":null,"tagName":"h2"},{"title":"Syntax sugar​","type":1,"pageTitle":"Wolfram Language","url":"/frontend/Cell types/Wolfram Language#syntax-sugar","content":" All equations typed in the editor are compatible with any WL parser, i.e. can be used in wolframscript, since the syntax sugar and the structure is localized inside comments  For example  2π\\sqrt{2\\pi}2π​becomes  (*SqB[*)Sqrt[2\\[Pi]](*]SqB*)   which is safe for copying to anywhere outside the WLJS ecosystem  The following shortcuts are used for equations typing  Ctrl-2 - place a square root on the selected textCtrl-/ - make a fractionCtrl-- - make a subscriptCtrl-6 - make a superscript (power)  You can also make your own custom representation of your symbol like in Mathematica using MakeBoxes. Please see InterpretationBox, Interpretation and MakeBoxes and ArrangeSummaryBox, ViewBox, BoxBox  ","version":null,"tagName":"h2"},{"title":"Autoupload files​","type":1,"pageTitle":"Wolfram Language","url":"/frontend/Cell types/Wolfram Language#autoupload-files","content":" Drag and drop a file to the editor ","version":null,"tagName":"h2"},{"title":"Beep","type":0,"sectionRef":"#","url":"/frontend/Reference/Cells and Notebook/Beep","content":"","keywords":"","version":null},{"title":"Example​","type":1,"pageTitle":"Beep","url":"/frontend/Reference/Cells and Notebook/Beep#example","content":" Click on this button to make sound  EventHandler[InputButton[], Beep]  ","version":null,"tagName":"h2"},{"title":"WLX","type":0,"sectionRef":"#","url":"/frontend/Cell types/WLX","content":"","keywords":"","version":null},{"title":"Embed figures into a custom layout​","type":1,"pageTitle":"WLX","url":"/frontend/Cell types/WLX#embed-figures-into-a-custom-layout","content":" Plot a figure into a symbol starting from the capital letter  Figure = Plot[Sinc[5x], {x,-5,5}]   then type in a new cell  .wlx &lt;div&gt; &lt;style&gt; @keyframes tilt-shaking { 0% { transform: rotate(0deg); } 25% { transform: rotate(5deg); } 50% { transform: rotate(0eg); } 75% { transform: rotate(-5deg); } 100% { transform: rotate(0deg); } } &lt;/style&gt; &lt;div style=&quot;animation: tilt-shaking 0.35s infinite&quot;&gt; &lt;Figure/&gt; &lt;/div&gt; &lt;/div&gt;   Then you plot will shake infinitely ;)  ","version":null,"tagName":"h2"},{"title":"Making components​","type":1,"pageTitle":"WLX","url":"/frontend/Cell types/WLX#making-components","content":" Let us define some hybrid WL function  .wlx Heading[Text_, OptionPattern[]] := With[{color = OptionValue[&quot;Color&quot;]}, &lt;h2 style=&quot;color: {color}&quot;&gt;&lt;Text/&gt;&lt;/h2&gt;; ] Options[Heading] = {&quot;Color&quot;-&gt;&quot;black&quot;}   then we can use it in our layout  .wlx &lt;Heading Color={&quot;blue&quot;}&gt; Hello World! &lt;/Heading&gt;   tip Utilize the power of WLX while making Slides  All WL expressions are accessible from there as well  .wlx GetTime := TextString[Now] &lt;GetTime/&gt;   ","version":null,"tagName":"h2"},{"title":"Two-columns layout using Flexbox​","type":1,"pageTitle":"WLX","url":"/frontend/Cell types/WLX#two-columns-layout-using-flexbox","content":" You can fine-tune the layout, since you are dealing with pure HTML and CSS. For example, here we have a slider and a plot aligned to a row  .wlx Module[{Slider = InputRange[0.1,1,0.1,0.5], Figure, lines}, EventHandler[Slider, Function[data, lines = {#, Sinc[#/data]}&amp; /@ Range[-5,5,0.1]]]; Slider // EventFire; Figure = Graphics[Line[lines // Offload], ImageSize-&gt;350]; &lt;div style=&quot;display: flex&quot;&gt; &lt;div&gt;&lt;Slider/&gt;&lt;/div&gt; &lt;div&gt;&lt;Figure/&gt;&lt;/div&gt; &lt;/div&gt; ]    ","version":null,"tagName":"h2"},{"title":"Overview","type":0,"sectionRef":"#","url":"/frontend/Overview","content":"","keywords":"","version":null},{"title":"Cell control buttons​","type":1,"pageTitle":"Overview","url":"/frontend/Overview#cell-control-buttons","content":" All cells are grouped by parent input cell, apart from that the structure of the notebook is flat. The controls are applied to the whole group    From left to right  add new cell belowhide an input cellevaluate (also Shift+Enter combo)more  The last options expands into    Project to a window is the most interesting feature here, that allows to evaluate a cell in a new window. It comes handy while demonstrating presentations.  ","version":null,"tagName":"h3"},{"title":"Wolfram Language​","type":1,"pageTitle":"Overview","url":"/frontend/Overview#wolfram-language","content":" When you start typing the language you are using assumed to be WL. By pressing Shift-Enter you can start evaluation    Output cells are joined to the input and the last one can be hidden by clicking on the →\\rightarrow→ sign on the left side from the cell.  note Once you change something inside the output cell, it loses its parent and becomes new input cell, like in Mathematica.  Syntax sugar, fractions and other 2D input are supported    The most useful commands are listed below  Ctrl+/ fractionCtrl+^ powerCtrl+- subscriptCtrl+2 square root  Now let us move to some other gems  ","version":null,"tagName":"h2"},{"title":"Snippets​","type":1,"pageTitle":"Overview","url":"/frontend/Overview#snippets","content":" To help in writing matrixes, colors, and some other useful stuff are accessible by the shortcut Super/Cmd+P      All snippets are just special kind of notebooks including all UI elements.  ","version":null,"tagName":"h2"},{"title":"Editor of Power​","type":1,"pageTitle":"Overview","url":"/frontend/Overview#editor-of-power","content":" A single input cell can produce Wolfram Language output, HTML page, Javascript window or a slide of a presentation    ","version":null,"tagName":"h2"},{"title":"Graphics 2D & 3D​","type":1,"pageTitle":"Overview","url":"/frontend/Overview#graphics-2d--3d","content":" Most Mathematica's plotting functions produces lower-level primitives. The major part of them are supported    info Try to drag and pan using your mouse!    note Graphics elements are not exported SVG. All primitives are recreated using d3.js and THREE.js from scratch  ","version":null,"tagName":"h2"},{"title":"Realtime calculations​","type":1,"pageTitle":"Overview","url":"/frontend/Overview#realtime-calculations","content":" Dynamics? We have a lot of it      Or even with polygons in 3D    ","version":null,"tagName":"h2"},{"title":"Other languages​","type":1,"pageTitle":"Overview","url":"/frontend/Overview#other-languages","content":" Of course the notebook interface is impossible to use without text annotation, here you do not need to switch to a different cell type. To use you favorite (or not) Markdown type in the first line of a cell .md and magic happens    By clicking on an arrow on the right, you can hide the source cell and only the output will be displayed. An editor is very flexible you can quite easily add your custom output cell support.  Or combine WL together with Javascript to visualize your data in incredible way   ","version":null,"tagName":"h2"},{"title":"PDF","type":0,"sectionRef":"#","url":"/frontend/Export/PDF","content":"PDF danger Is in development Use native browser's PDF printer on exported file using HTML file","keywords":"","version":null},{"title":"EvaluationNotebook","type":0,"sectionRef":"#","url":"/frontend/Reference/Cells and Notebook/EvaluationNotebook","content":"EvaluationNotebook Wolfram Kernel Execution environment Notebook`CellOperations` Context wljs-editor Package returns a RemoteCellObj object of a current notebook from the evaluation context EvaluationNotebook[] _RemoteNotebook ","keywords":"","version":null},{"title":"ParentCell","type":0,"sectionRef":"#","url":"/frontend/Reference/Cells and Notebook/ParentCell","content":"ParentCell Wolfram Kernel Execution environment wljs-editor Package Notebook`CellOperations` Context fetches RemoteCellObj for a parent input cell of a given cell ParentCell[cell_RemoteCellObj] _CellObj danger It relies on a synchronous function WaitAll, which blocks the main event-loop, therefore it is not recommended to use it. Please, consider to use EvaluationCell if possible.","keywords":"","version":null},{"title":"EvaluationCell","type":0,"sectionRef":"#","url":"/frontend/Reference/Cells and Notebook/EvaluationCell","content":"EvaluationCell Wolfram Kernel Execution environment Notebook`CellOperations` Context wljs-editor Package returns a source input-cell as a RemoteCellObj from the evaluation context EvaluationCell[] _RemoteCellObj ","keywords":"","version":null},{"title":"NotebookStore","type":0,"sectionRef":"#","url":"/frontend/Reference/Cells and Notebook/NotebookStore","content":"","keywords":"","version":null},{"title":"Methods​","type":1,"pageTitle":"NotebookStore","url":"/frontend/Reference/Cells and Notebook/NotebookStore#methods","content":" ","version":null,"tagName":"h2"},{"title":"Set​","type":1,"pageTitle":"NotebookStore","url":"/frontend/Reference/Cells and Notebook/NotebookStore#set","content":" To assign any Wolfram Expression, use  NotebookStore[key_, opts___] = data_   ","version":null,"tagName":"h3"},{"title":"Unset​","type":1,"pageTitle":"NotebookStore","url":"/frontend/Reference/Cells and Notebook/NotebookStore#unset","content":" To remove the data and its key  NotebookStore[key_, opts___] = .   ","version":null,"tagName":"h3"},{"title":"Keys​","type":1,"pageTitle":"NotebookStore","url":"/frontend/Reference/Cells and Notebook/NotebookStore#keys","content":" Returns all keys  NotebookStore[opts___] // Keys   ","version":null,"tagName":"h3"},{"title":"Options​","type":1,"pageTitle":"NotebookStore","url":"/frontend/Reference/Cells and Notebook/NotebookStore#options","content":" ","version":null,"tagName":"h2"},{"title":"\"Notebook\"​","type":1,"pageTitle":"NotebookStore","url":"/frontend/Reference/Cells and Notebook/NotebookStore#notebook","content":" Specifies the notebook from which the storage will be operated  warning Be aware of a evaluation context loss, use EvaluationNotebook for such cases if it is called from an external handler, i.e. (* evaluation context is ok *) NotebookStore[&quot;key&quot;] = 123; With[{n = EvaluationNotebook[]}, (* evaluation context is ok *) EventHandler[InputButton[], Function[Null, (* evaluation context is lost!!! *) NotebookStore[&quot;key&quot;, &quot;Notebook&quot;-&gt;n] = 124; (* manually restore lost info *) ]] ]  ","version":null,"tagName":"h3"},{"title":"RemoteNotebook","type":0,"sectionRef":"#","url":"/frontend/Reference/Cells and Notebook/RemoteNotebook","content":"RemoteNotebook Wolfram Kernel Execution environment wljs-editor Package Notebook`CellOperations` Context represents notebook object for a evaluation Kernel RemoteNotebook[uid_String] _RemoteNotebook ","keywords":"","version":null},{"title":"Guidelines","type":0,"sectionRef":"#","url":"/frontend/Guidelines","content":"","keywords":"","version":null},{"title":"Use shortcuts​","type":1,"pageTitle":"Guidelines","url":"/frontend/Guidelines#use-shortcuts","content":" It improves user experience drastically  ","version":null,"tagName":"h2"},{"title":"UI Operations​","type":1,"pageTitle":"Guidelines","url":"/frontend/Guidelines#ui-operations","content":" New notebook Cmd+N, Ctrl+NOpen file Cmd+O, Ctrl+OSave Cmd+S, Ctrl+SEnter command palette Cmd+P, Ctrl+PHide/Unhide current cell Cmd+2, Ctrl+WClear outputs Cmd+U, Alt+U  ","version":null,"tagName":"h3"},{"title":"Evaluation​","type":1,"pageTitle":"Guidelines","url":"/frontend/Guidelines#evaluation","content":" Evaluate Shift+EnterAbort Cmd+., Alt+.Evaluate initialization cells Cmd+I, Alt+I  ","version":null,"tagName":"h3"},{"title":"Keep folders organized​","type":1,"pageTitle":"Guidelines","url":"/frontend/Guidelines#keep-folders-organized","content":" Various functions may produce Iconize objects, for storing large chunks of data, which are copied to ./.iconized/ folder in the notebook directory. Any dropped images or files will be uploaded to ./attachments/ directory. Therefore it is important to have a clear separation between your projects.  ","version":null,"tagName":"h2"},{"title":"Use NotebookStore for portability​","type":1,"pageTitle":"Guidelines","url":"/frontend/Guidelines#use-notebookstore-for-portability","content":" If you want your notebook to be exported to a single editable .html HTML file, use NotebookStore as a persistent storage for your raw data. In such case all images, graphs, and stored data will be kept.  ","version":null,"tagName":"h2"},{"title":"Install everything locally​","type":1,"pageTitle":"Guidelines","url":"/frontend/Guidelines#install-everything-locally","content":" We promote the idea of storing libraries or paclets for Wolfram Language locally for each project. There is no other way to provide the reliable way of computing, storing data, reproducibility and independence from any remote resources  example of a built-in package manager PacletRepositories[{ Github -&gt; &quot;https://github.com/KirillBelovTest/GPTLink&quot; }] &lt;&lt;KirillBelov`GPTLink`   this will create a folder with all used paclets and keep them up to date if needed  ","version":null,"tagName":"h2"},{"title":"Do not use Dynamic, Manipulate​","type":1,"pageTitle":"Guidelines","url":"/frontend/Guidelines#do-not-use-dynamic-manipulate","content":" We rely on a completely different architecture to handle interactivity and graphics updates compared to Wolfram Mathematica.  ","version":null,"tagName":"h2"},{"title":"Dynamic​","type":1,"pageTitle":"Guidelines","url":"/frontend/Guidelines#dynamic","content":" Buttons, sliders are event-driven, i.e. you need to subscribe to them using EventHandler. All dynamic updates are handled using Offload approach. For example  length = 1.0; EventHandler[InputRange[-1,1,0.1], Function[l, length = l]] Graphics[Rectangle[{-1,-1}, {length // Offload, 1}]]   ","version":null,"tagName":"h3"},{"title":"Manipulate​","type":1,"pageTitle":"Guidelines","url":"/frontend/Guidelines#manipulate","content":" In general there is built-in function for simple 2D plots - ManipulatePlot, however, for something more complicated - you need to craft it by yourself using building Offset and simple graphics primitives such as Line, Polygon and etc as building blocks. ","version":null,"tagName":"h3"},{"title":"ResultCell","type":0,"sectionRef":"#","url":"/frontend/Reference/Cells and Notebook/ResultCell","content":"ResultCell Wolfram Kernel Execution environment Notebook`CellOperations` Context wljs-editor Package returns an future output cell identifier as an RemoteCellObj even if it was not yet created from the evaluation context ResultCell[] _RemoteCellObj ","keywords":"","version":null},{"title":"Column","type":0,"sectionRef":"#","url":"/frontend/Reference/Decorations/Column","content":"Column Wolfram Kernel Execution environment Column[{object1, object2, ...}] shows the list of any Wolfram Expressions in a single column acting as a decoration spawns a normal WL editor for each row of a columneditable","keywords":"","version":null},{"title":"Bra","type":0,"sectionRef":"#","url":"/frontend/Reference/Decorations/Bra","content":"Bra the same as Ket","keywords":"","version":null},{"title":"BoxBox","type":0,"sectionRef":"#","url":"/frontend/Reference/Decorations/BoxBox","content":"","keywords":"","version":null},{"title":"Options​","type":1,"pageTitle":"BoxBox","url":"/frontend/Reference/Decorations/BoxBox#options","content":" ","version":null,"tagName":"h2"},{"title":"Head​","type":1,"pageTitle":"BoxBox","url":"/frontend/Reference/Decorations/BoxBox#head","content":" Provides a head symbol of the wrapper expression, that will be hidden from the inner editor. It comes handy when you need to preserve the original from of the expression during the editing  tip Use Head option to keep the wrapping expression  ","version":null,"tagName":"h3"},{"title":"Examples​","type":1,"pageTitle":"BoxBox","url":"/frontend/Reference/Decorations/BoxBox#examples","content":" ","version":null,"tagName":"h2"},{"title":"Change the display value and call arbitrary WLJS function​","type":1,"pageTitle":"BoxBox","url":"/frontend/Reference/Decorations/BoxBox#change-the-display-value-and-call-arbitrary-wljs-function","content":" This is a dummy example  special /: MakeBoxes[special, StandardForm] := BoxBox[&quot;1+1&quot;, Alert[&quot;Hi&quot;]] special   ","version":null,"tagName":"h3"},{"title":"Styling expression using JS​","type":1,"pageTitle":"BoxBox","url":"/frontend/Reference/Decorations/BoxBox#styling-expression-using-js","content":" One can define its own style of cells boxes  .js core.Styler = async (args, env) =&gt; { env.element.style.boxShadow = &quot;1px 1px 5px black&quot;; }   wrapper /: MakeBoxes[wrapper[expr_], StandardForm] := BoxBox[MakeBoxes[expr, StandardForm], Styler, Head-&gt;wrapper]   and then try  wrapper[1/2]   Result    The neat thing is you can edit the inner expression  note This is how Ket, Bra are implemented for instance ","version":null,"tagName":"h3"},{"title":"Grid","type":0,"sectionRef":"#","url":"/frontend/Reference/Decorations/Grid","content":"","keywords":"","version":null},{"title":"Options​","type":1,"pageTitle":"Grid","url":"/frontend/Reference/Decorations/Grid#options","content":" Temporary not supported ","version":null,"tagName":"h2"},{"title":"Framed","type":0,"sectionRef":"#","url":"/frontend/Reference/Decorations/Framed","content":"","keywords":"","version":null},{"title":"Example​","type":1,"pageTitle":"Framed","url":"/frontend/Reference/Decorations/Framed#example","content":" Highlight prime numbers in the list  Table[If[PrimeQ[i], Framed[i, Background-&gt;Yellow], i], {i, 1, 100}]     Or this neat example from Wolfram Research  NestList[Framed, x, 6]    ","version":null,"tagName":"h2"},{"title":"RemoteCellObj","type":0,"sectionRef":"#","url":"/frontend/Reference/Cells and Notebook/RemoteCellObj","content":"","keywords":"","version":null},{"title":"Methods​","type":1,"pageTitle":"RemoteCellObj","url":"/frontend/Reference/Cells and Notebook/RemoteCellObj#methods","content":" ","version":null,"tagName":"h2"},{"title":"Delete​","type":1,"pageTitle":"RemoteCellObj","url":"/frontend/Reference/Cells and Notebook/RemoteCellObj#delete","content":" Deletes a given cell in the notebook  Self destruction With[{cell = EvaluationCell[]}, EventHandler[InputButton[&quot;Bye&quot;], Function[Null, cell // Delete ]] ]   removes an input cell  ","version":null,"tagName":"h3"},{"title":"EventHandler​","type":1,"pageTitle":"RemoteCellObj","url":"/frontend/Reference/Cells and Notebook/RemoteCellObj#eventhandler","content":" There is an adapter for EventHandler method. You can listen a cell's events from the evaluation Kernel  With[{cell = EvaluationCell[]}, EventHandler[cell, {any_ :&gt; (Print[any, &quot;: &quot;, #]&amp;)}]; ]   listen all events from the input cell ","version":null,"tagName":"h3"},{"title":"Graphics animation & interaction","type":0,"sectionRef":"#","url":"/frontend/Advanced/Slides/animations","content":"","keywords":"","version":null},{"title":"Interactive plots​","type":1,"pageTitle":"Graphics animation & interaction","url":"/frontend/Advanced/Slides/animations#interactive-plots","content":" By the default, everything you plot using Plot or Graphics or Graphics3D can be dragged or panned or rotated. This behavior is controlled by the options and can be switched off if necessary. For example  Figure = Plot[{x, Sin[x], Sin[x]^2}, {x,0,2Pi}];   .slide # Simple plot &lt;Figure/&gt; Try to drag it using you mouse   The result will look like following    ","version":null,"tagName":"h2"},{"title":"Animation​","type":1,"pageTitle":"Graphics animation & interaction","url":"/frontend/Advanced/Slides/animations#animation","content":" In general all visuals can be done in the same way as in regular cells, since it uses the same components.  When a slide becomes visible or a fragment got revealed (see Transitions and fragments) it fires an event, where all information is encoded. To enable this - use SlideEventListener  info Put SlideEventListener anywhere on the slide to hook up WL Kernel to all events associated with it  tip Keep the dynamic variables scoped using LeakyModule and use explicit event routing like in routing. Later it will allow you to reuse your components for other slides much easier.  ","version":null,"tagName":"h2"},{"title":"Example 1​","type":1,"pageTitle":"Graphics animation & interaction","url":"/frontend/Advanced/Slides/animations#example-1","content":" Let us see the simples example  .slide # Animation example &lt;Figure Id={&quot;routed-event&quot;}/&gt; The figure will be changed, when the fragment below is revealed &lt;span style=&quot;color:red&quot;&gt;Magic&lt;/span&gt; &lt;!-- .element: class=&quot;fragment&quot; data-fragment-index=&quot;1&quot; --&gt; &lt;SlideEventListener Id={&quot;routed-event&quot;}/&gt;   SlideEventListener is attached only to the slide, where it has been placed.  Now let us make a simple figure  Figure[OptionsPattern[]] := With[{event = EventClone[OptionValue[&quot;Id&quot;]]}, EventHandler[ResultCell[], {&quot;Destroy&quot; -&gt; Function[Null, Delete[event]]}]; ... ] Options[Figure] = {&quot;Id&quot;-&gt;&quot;&quot;}   Here we clone a slide event (this is a safe way, if more than 1 handlers will be involved). Afterwards we need to make sure that if one reevaluate the cell, the handler will be removed automatically. That's how you can clean-up handlers after the evaluation.  Now the content  Figure[OptionsPattern[]] := With[{event = EventClone[OptionValue[&quot;Id&quot;]]}, EventHandler[ResultCell[], {&quot;Destroy&quot; -&gt; Function[Null, Delete[event]]}]; LeakyModule[{points}, (* initial state *) points = RandomReal[{-1,1}, {40,2}]; EventHandler[event, {&quot;fragment-1&quot; -&gt; Function[Null, (* act when the event happend *) points = {Sin[#], Cos[#]} &amp;/@ Range[40] ]}]; Graphics[ {Red, Line[points // Offload]}, PlotRange-&gt;{{-1,1}, {-1,1}}, TransitionType-&gt;&quot;CubicInOut&quot;, TransitionDuration-&gt;2000 ] ] ] Options[Figure] = {&quot;Id&quot;-&gt;&quot;&quot;}   This little script will plot randomly distributed points as lines for its initial state. When the event is fired, it changes the distribution of points to a circle. The animation is done by Graphics (i.e. it is a native feature of it and has nothing to do with slides).  note Consider options &quot;TransitionType&quot; and &quot;TransitionDuration&quot; of Graphics to control the transition animation.  The expected result will be    Sure the state is not reservable in this case. You need to manage it by your own considering more events generated by SlideEventListener.  However, in practice reports are usually linear and do not require to repeat all animations again.  ","version":null,"tagName":"h3"},{"title":"Example 2​","type":1,"pageTitle":"Graphics animation & interaction","url":"/frontend/Advanced/Slides/animations#example-2","content":" Animating transitions complex figures  cell 1 SpinStructure[OptionsPattern[]] := LeakyModule[{t2=0, t0=0, cloned = EventClone[OptionValue[&quot;Slide&quot;]]}, (* clone and remove for the case if one assigns other handlers to the same patterns *) EventHandler[ResultCell[], {&quot;Destroy&quot; -&gt; Function[Null, Print[&quot;Removed!&quot;]; EventRemove[cloned]; ]}]; EventHandler[cloned, { OptionValue[&quot;Stage1&quot;] -&gt; Function[Null, t0=1; ], OptionValue[&quot;Stage2&quot;]-&gt;Function[Null, t2=1; ], (* you need to go back to the previous slide to reset *) &quot;Slide&quot;-&gt;Function[Null, t0=0; t2=0; ] }]; Graphics[With[{ cSpins = ((*GB[*){{{1,-1}(*|*),(*|*){1,-1}(*|*),(*|*){1,1}(*|*),(*|*){1,-1}}(*||*),(*||*){{1,1}(*|*),(*|*){1,-1}(*|*),(*|*){1,1}(*|*),(*|*){1,-1}}(*||*),(*||*){{1,-1}(*|*),(*|*){1,1}(*|*),(*|*){1,-1}(*|*),(*|*){1,1}}(*||*),(*||*){{1,1}(*|*),(*|*){1,1}(*|*),(*|*){1,-1}(*|*),(*|*){1,1}}}(*]GB*)) }, { Table[{ With[{spinPos = (0.23 cSpins[[i,j]] - 0.23 {1,0}), i=i, j=j}, Arrow[{{i,j}, ( {i+0.23, j} + t0 spinPos) // Offload}] ], Circle[{i,j}, 0.18] }, {i,1,4}, {j,1,4}], Orange, Table[{ Circle[{i+0.5,j+0.5}, 0.2], Disk[{i+0.5,j+0.5}, 0.15], Black, Arrow[{{i+0.5,j+0.5}, {-0.3, -0.08 Offload[t2]} + {i+0.5,j+0.5}}] }, {i,1,3,2}, {j,1,3,2}], Disk[{1+1.5,1+1.5}, 0.2], Black, Arrow[{{1+1.5,1+1.5}, {-0.3, -0.08 Offload[t2]} + {1+1.5,1+1.5}}] } ], Axes-&gt;True, AxesLabel-&gt;{&quot;a&quot;, &quot;c-axis&quot;}, AxesStyle-&gt;Directive[FontSize-&gt;18], Ticks-&gt;{{-10}, {-10}}, PlotRange-&gt;{{0,5}, {0,5}}, ImageSize-&gt;550, TransitionType-&gt;&quot;CubicInOut&quot;, TransitionDuration-&gt;500 ] ] Options[SpinStructure] = {&quot;Stage1&quot;-&gt;&quot;&quot;, &quot;Stage2&quot;-&gt;&quot;&quot;, &quot;Slide&quot;-&gt;&quot;&quot;}   The whole animation consists two stages, on which the direction of arrows changes. We can assign each stage to a fragment on our slide  .slide # Animation Test --- # Spin structure &lt;SpinStructure Slide={&quot;sslide&quot;} Stage1={&quot;fragment-1&quot;} Stage2={&quot;fragment-2&quot;} /&gt; Reported spin configuration $T &lt; 35K$ &lt;!-- .element: class=&quot;fragment fade-in&quot; data-fragment-index=&quot;1&quot; --&gt; Expected low-temperature spin configuration &lt;!-- .element: class=&quot;fragment fade-in&quot; data-fragment-index=&quot;2&quot; --&gt; &lt;SlideEventListener Id={&quot;sslide&quot;}/&gt;     ","version":null,"tagName":"h3"},{"title":"Example 3​","type":1,"pageTitle":"Graphics animation & interaction","url":"/frontend/Advanced/Slides/animations#example-3","content":" Zoom in to the graph  cell 1 Plt[OptionsPattern[]] := With[{ev = OptionValue[&quot;Zoom&quot;], win = CurrentWindow[]}, EventHandler[ev, { &quot;Slide&quot; -&gt; Function[Null, FrontSubmit[ZoomAt[1], MetaMarker[&quot;marked&quot;], &quot;Window&quot;-&gt;win] ], &quot;fragment-1&quot; -&gt; Function[Null, FrontSubmit[ZoomAt[2], MetaMarker[&quot;marked&quot;], &quot;Window&quot;-&gt;win] ] }]; Plot[Sinc[x], {x,-10,10}, Epilog-&gt;{MetaMarker[&quot;marked&quot;]}] ] Options[Plt] = {&quot;Zoom&quot;-&gt;&quot;&quot;}   cell 2 .slide # Zoom in --- &lt;Plt Zoom={&quot;vslide&quot;}/&gt; Zoom &lt;!-- .element: class=&quot;fragment fade-in&quot; data-fragment-index=&quot;1&quot; --&gt; &lt;SlideEventListener Id={&quot;vslide&quot;}/&gt;     ","version":null,"tagName":"h3"},{"title":"Append graphics to a slide​","type":1,"pageTitle":"Graphics animation & interaction","url":"/frontend/Advanced/Slides/animations#append-graphics-to-a-slide","content":" MetaMarker can work well in a case if one wants to append some data on the existing graphics canvas  ","version":null,"tagName":"h2"},{"title":"Buttons, sliders etc​","type":1,"pageTitle":"Graphics animation & interaction","url":"/frontend/Advanced/Slides/animations#buttons-sliders-etc","content":" See built-in examples Examples/Slides. ","version":null,"tagName":"h2"},{"title":"InputForm","type":0,"sectionRef":"#","url":"/frontend/Reference/Decorations/InputForm","content":"InputForm Wolfram Kernel Execution environment Prevents decorations to be set InputForm[expr_] Typical example to reveal the InputForm Red Red // InputForm ","keywords":"","version":null},{"title":"Interpretation","type":0,"sectionRef":"#","url":"/frontend/Reference/Decorations/Interpretation","content":"","keywords":"","version":null},{"title":"Example​","type":1,"pageTitle":"Interpretation","url":"/frontend/Reference/Decorations/Interpretation#example","content":" Have a look at the following example  Interpretation[Red, 1]    ","version":null,"tagName":"h2"},{"title":"MatrixForm","type":0,"sectionRef":"#","url":"/frontend/Reference/Decorations/MatrixForm","content":"MatrixForm Wolfram Kernel Execution environment MatrixForm[matrix_List] shows the given matrix (list of lists) in a traditional form using Grid decoration","keywords":"","version":null},{"title":"MakeBoxes","type":0,"sectionRef":"#","url":"/frontend/Reference/Decorations/MakeBoxes","content":"","keywords":"","version":null},{"title":"Supported forms​","type":1,"pageTitle":"MakeBoxes","url":"/frontend/Reference/Decorations/MakeBoxes#supported-forms","content":" StandardFormWLXForm  ","version":null,"tagName":"h2"},{"title":"Used together with​","type":1,"pageTitle":"MakeBoxes","url":"/frontend/Reference/Decorations/MakeBoxes#used-together-with","content":" BoxBoxViewBoxInterpretationBox  ","version":null,"tagName":"h2"},{"title":"Applications​","type":1,"pageTitle":"MakeBoxes","url":"/frontend/Reference/Decorations/MakeBoxes#applications","content":" It is a core concept of the Notebook interface  ","version":null,"tagName":"h2"},{"title":"Creating interactive objects​","type":1,"pageTitle":"MakeBoxes","url":"/frontend/Reference/Decorations/MakeBoxes#creating-interactive-objects","content":" Used by​  GraphicsGraphics3DListLinePlotlyPlotlyEventObjectmany more  All graphics and interactive objects are running on WLJS interpreter, which is browser'a minimal Wolfram Language interpreter running on Javascript. It draws graphics, handles users interaction via JS. To explicitly run an expression on browser's side you need to apply CreateFrontEndObject. This is done automatically using MakeBoxes  for example  ... ListLinePlotly /: MakeBoxes[ListLinePlotly[args__], StandardForm] := With[{o = CreateFrontEndObject[ListLinePlotly[args]]}, MakeBoxes[o, StandardForm] ] ListPlotly /: MakeBoxes[ListPlotly[args__], StandardForm] := With[{o = CreateFrontEndObject[ListPlotly[args]]}, MakeBoxes[o, StandardForm] ] ...   ","version":null,"tagName":"h3"},{"title":"Styling symbols​","type":1,"pageTitle":"MakeBoxes","url":"/frontend/Reference/Decorations/MakeBoxes#styling-symbols","content":" Please consider to use StandardForm for form argument to achieve those effects.  See ViewBox and BoxBox  ","version":null,"tagName":"h3"},{"title":"Data preview​","type":1,"pageTitle":"MakeBoxes","url":"/frontend/Reference/Decorations/MakeBoxes#data-preview","content":" One can make a preview of the data for example  dataHolder /: MakeBoxes[dataHolder[data_], StandardForm] := With[{ display = ListPlot[data, ImageSize-&gt;200, Axes-&gt;False, ImagePadding-&gt;None] // CreateFrontEndObject }, InterpretationBox[MakeBoxes[display, StandardForm], data] ] dataHolder /: ListLinePlot[d_dataHolder, opts___] := ListLinePlot[d//First, opts] dataHolder[RandomReal[{-1,1}, 100]]   dataHolder[RandomReal[{-1,1}, 100]] // ListLinePLot     info ViewBox is more performant compared to InterpretationBox, when it comes to replacing symbols with Graphics or other interactive objects.  tip For just a one-time decoration - use Interpretation ","version":null,"tagName":"h3"},{"title":"Quantity","type":0,"sectionRef":"#","url":"/frontend/Reference/Decorations/Quantity","content":"Quantity Quantity[size_, unit_String] represents a quantity with size magnitude and unit specified by unit.","keywords":"","version":null},{"title":"ArrangeSummaryBox","type":0,"sectionRef":"#","url":"/frontend/Reference/Decorations/ArrangeSummaryBox","content":"","keywords":"","version":null},{"title":"Options​","type":1,"pageTitle":"ArrangeSummaryBox","url":"/frontend/Reference/Decorations/ArrangeSummaryBox#options","content":" ","version":null,"tagName":"h2"},{"title":"\"Event\"​","type":1,"pageTitle":"ArrangeSummaryBox","url":"/frontend/Reference/Decorations/ArrangeSummaryBox#event","content":" A string identifier used for attaching event listeners to a widget. Since this is a wrapper over ViewBox and RowBox, see more on its page. ","version":null,"tagName":"h3"},{"title":"StandardForm","type":0,"sectionRef":"#","url":"/frontend/Reference/Decorations/StandardForm","content":"","keywords":"","version":null},{"title":"Example​","type":1,"pageTitle":"StandardForm","url":"/frontend/Reference/Decorations/StandardForm#example","content":" Stylize an output form of a symbol  specialSymbol /: MakeBoxes[specialSymbol, StandardForm] := With[{ o = Graphics[Disk[], ImageSize-&gt;100, ImagePadding-&gt;None] }, ViewBox[specialSymbol, CreateFrontEndObject[o]] ]     An expression will not be revealed ","version":null,"tagName":"h2"},{"title":"Iconize","type":0,"sectionRef":"#","url":"/frontend/Reference/Decorations/Iconize","content":"","keywords":"","version":null},{"title":"Options​","type":1,"pageTitle":"Iconize","url":"/frontend/Reference/Decorations/Iconize#options","content":" ","version":null,"tagName":"h2"},{"title":"\"Label\"​","type":1,"pageTitle":"Iconize","url":"/frontend/Reference/Decorations/Iconize#label","content":" Specifies a label for an icon. Accepts only _String ","version":null,"tagName":"h3"},{"title":"Dynamics","type":0,"sectionRef":"#","url":"/frontend/Dynamics","content":"","keywords":"","version":null},{"title":"Architecture​","type":1,"pageTitle":"Dynamics","url":"/frontend/Dynamics#architecture","content":" All dynamics in terms of what you expect from Mathematica's experience happens on the frontend's side, i.e. in your browser.  The core engine for that is used from WLX Library (WLJSTransport package).  Some expressions are meant for to be executed on frontend, i.e. not defined on the Kernel, then a user do not need to specify explicitly what and when should happen. In other cases, a user can use Offload attribute or CreateFrontEndObject to tell explicitly Wolfram Kernel pass an expression without evaluation to the frontend. Therefore one can play around with a way of splitting your code-base to archive the maximum flexibility and performance.  tip More about it here  tip Always keep in mind, which part of code executes on Wolfram Kernel (server) and what is delegated to the frontend (browser). This is the only way to write predictable and good performing code  ","version":null,"tagName":"h2"},{"title":"If you are looking for just Manipulate​","type":1,"pageTitle":"Dynamics","url":"/frontend/Dynamics#if-you-are-looking-for-just-manipulate","content":" There is a short cut, if you need to see how your curves changes with different parameters - see ManipulatePlot    ","version":null,"tagName":"h2"},{"title":"Automatic tracking of held symbols​","type":1,"pageTitle":"Dynamics","url":"/frontend/Dynamics#automatic-tracking-of-held-symbols","content":" It does not mean, that your Set statements will be reevaluated on change of a nested symbol, however, for most graphics primitives it works out of the box. Use Offload wrapper to hold symbols for the frontend  length = 1; Graphics[{Cyan, Rectangle[{-1,-1}, {length // Offload, 1}] }]   info Offload just does a simple trick - provides to a frontend an unknown symbol, which forces frontend to fetch it from the Kernel. Once it has been fetched, a dynamic link is created.  The binding itself happens between Rectangle and length, but not Graphics, therefore only partial reevaluation occurs. To know more about details see WLJS.  danger Not all functions support dynamic binding or updates. Please check Reference section, if the argument or a function supports dynamic updates.  ","version":null,"tagName":"h2"},{"title":"Event-based approach​","type":1,"pageTitle":"Dynamics","url":"/frontend/Dynamics#event-based-approach","content":" Working with GUI elements standing for input is done in more controllable way, where each button or slider is an event-generator  slider = InputRange[-1,1,0.1, &quot;Label&quot;-&gt;&quot;Length&quot;] EventHandler[slider, Function[l, length = l]];   Once event was fired, the assigned handler function will be called.    slider symbol is actually a special object, that stores the representation of a slider and an ID for the event, that will be fired when a user drags a knob.  🍪 Example 0​  A simple rotation with a slider  EventHandler[InputRange[0, 2.0 Pi, 0.1], Function[a, angle = a ]] % // EventFire; Graphics[Rotate[Rectangle[{-1,-1}, {1,1}], angle // Offload]]     🍪 Example 1​  Let us demonstrate how a wave packet travels though space and time  cell 1 packet[x_, t_] := Sum[Sin[- w t + w x], {w, 0,3,0.05}] / 10; line = Table[{x, packet[x, 0]}, {x, 0, 10, 0.1}]; Graphics[Line[line // Offload], Frame-&gt;True, FrameLabel-&gt;{{&quot;amplitude&quot;}, {&quot;distance&quot;}}]   here line symbol is dynamic. Now we need a slider to control time  cell 2 EventHandler[InputRange[0,5,0.5, 0], Function[t, line = Table[{x, packet[x, t]}, {x, 0, 10, 0.1}]; ]]   The desired result looks line this    ","version":null,"tagName":"h2"},{"title":"Event handlers for graphics primitives​","type":1,"pageTitle":"Dynamics","url":"/frontend/Dynamics#event-handlers-for-graphics-primitives","content":" It looks similar to Mathematica's implementation, where one can add an event handler to a random graphics primitive  p = {0,0}; Graphics[{ White, EventHandler[ Rectangle[{-2,-2}, {2,2}], {&quot;mousemove&quot;-&gt;Function[xy, p = xy]} ], PointSize[0.05], Cyan, Point[p // Offload] }]   The following event are available  drag - provides a list of two coordinateszoom - provides one relative scaling numberclick - provides coordinates, where the cursor clickedmousemove - provides coordinates of a mousemouseover - provides coordinates once, when a mouse appears at a div  for 3D graphics the following events are provided  transform - sends an association with a new position of a dragged object  note Event handlers wrapped around graphics primitives are parts of wljs-graphics-d3 library.  ","version":null,"tagName":"h3"},{"title":"Autogeneration of dynamic symbols​","type":1,"pageTitle":"Dynamics","url":"/frontend/Dynamics#autogeneration-of-dynamic-symbols","content":" There is also an extension OffloadFromEventObject that allows to turn event objects into dynamic symbols    🍪 Example 2​  Let us show a fun example - implementation of FABRIK solver.  Define a random chain of segments with a random fixed lengths  cell 1 chain = {Cos[#[[1]]], Sin[#[[2]]]}&amp;/@ RandomReal[{-1,1}, {65, 2}] // Sort; lengths = Norm /@ (chain // Reverse // Differences) // Reverse;   The most stupid and simple implementation of FABRIK  cell 2 fabrik[lengths_, target_, origin_] := Module[{buffer, prev}, buffer = Table[With[{p = chain[[-i]]}, If[i === 1, prev = target; target , prev = prev - Normalize[(prev - p)] lengths[[1-i]]; prev ] ], {i, chain // Length}] // Reverse; Table[With[{p = buffer[[i]]}, If[i === 1, prev = origin; origin , prev = prev - Normalize[(prev - p)] lengths[[i-1]]; prev ] ], {i, chain // Length}] ]   To show the result will will use a simple Line primitive coupled to a chain symbol and an inline event-handler coupled to a target point of a chain  cell 3 Graphics[{ Line[chain // Offload], Red, PointSize[0.06], EventHandler[Point[{-1,-1}], {&quot;drag&quot;-&gt;Function[xy, chain = fabrik[lengths, xy, chain // First]]}], Blue, Point[origin // Offload] }, PlotRange-&gt;{{-2,2}, {-2,2}}, ImageSize-&gt;500, &quot;TransitionType&quot;-&gt;&quot;Linear&quot;, &quot;TransitionDuration&quot;-&gt;30]   By dragging the red point you update all positions joints    use wheel to zoom and a left click to pan  info All examples shown here are shipped together with a frontend. Locate ","version":null,"tagName":"h3"},{"title":"Style","type":0,"sectionRef":"#","url":"/frontend/Reference/Decorations/Style","content":"","keywords":"","version":null},{"title":"Options​","type":1,"pageTitle":"Style","url":"/frontend/Reference/Decorations/Style#options","content":" BackgroundFontFamilyFontSize  ","version":null,"tagName":"h2"},{"title":"Directives​","type":1,"pageTitle":"Style","url":"/frontend/Reference/Decorations/Style#directives","content":" _Integer font size_RGBColor font colorBoldItalic  ","version":null,"tagName":"h2"},{"title":"Example​","type":1,"pageTitle":"Style","url":"/frontend/Reference/Decorations/Style#example","content":" Style[1, Background-&gt;Yellow]     For pure string options are much richer  Style[&quot;ddd&quot;, Background-&gt;LightBlue, FontFamily-&gt;&quot;Monospace&quot;, Bold, Red, Italic, 20]     Hamlet's soliloquy, with repeated words successively has more contrast background  With[{data = ExampleData[{&quot;Text&quot;, &quot;ToBeOrNotToBe&quot;}, &quot;Words&quot;]}, Take[MapIndexed[Style[#, 4 Count[Take[data, First[#2]], #]] &amp;, data], 100] ]     Or for a regular expressions  Style[(*FB[*)((1)(*,*)/(*,*)((*SqB[*)Sqrt[2](*]SqB*)))(*]FB*), 18, Red]    ","version":null,"tagName":"h2"},{"title":"Ket","type":0,"sectionRef":"#","url":"/frontend/Reference/Decorations/Ket","content":"Ket represents ket-vector from Quantum Mechanics Ket[any__] which comes with built-in decoration note There is no predefined rules for such expressions.","keywords":"","version":null},{"title":"TableForm","type":0,"sectionRef":"#","url":"/frontend/Reference/Decorations/TableForm","content":"TableForm Wolfram Kernel Execution environment TableForm[table_List] shows the given table (list) in a traditional form using Grid decoration info For an editable formatted table, please see InputTable and TableView. It fits especially for a large datasets","keywords":"","version":null},{"title":"InterpretationBox","type":0,"sectionRef":"#","url":"/frontend/Reference/Decorations/InterpretationBox","content":"","keywords":"","version":null},{"title":"Applications​","type":1,"pageTitle":"InterpretationBox","url":"/frontend/Reference/Decorations/InterpretationBox#applications","content":" One of the examples is to make some definitions shorter by setting UpValues to MakeBoxes, since the last one is recursively applied to everything in the output cell  AVeryLongFunction /: MakeBoxes[AVeryLongFunction, StandardForm] := InterpretationBox[MakeBoxes[Ashort, StandardForm], AVeryLongFunction]   Now we can check the result by  AVeryLongFunction   if one define also this  AVeryLongFunction[expr__] := SpecialList[expr]   You can use it with the created alias Ashort  An expression will not be revealed  ","version":null,"tagName":"h2"},{"title":"Dev notes​","type":1,"pageTitle":"InterpretationBox","url":"/frontend/Reference/Decorations/InterpretationBox#dev-notes","content":" This is a wrapper for ViewBox with a read-only EditorView inside. ","version":null,"tagName":"h2"},{"title":"FrontFetchAsync","type":0,"sectionRef":"#","url":"/frontend/Reference/Frontend IO/FrontFetchAsync","content":"","keywords":"","version":null},{"title":"Options​","type":1,"pageTitle":"FrontFetchAsync","url":"/frontend/Reference/Frontend IO/FrontFetchAsync#options","content":" ","version":null,"tagName":"h2"},{"title":"\"Window\"​","type":1,"pageTitle":"FrontFetchAsync","url":"/frontend/Reference/Frontend IO/FrontFetchAsync#window","content":" specifies a window socket, to which an expression will be sent. Use CurrentWindow to fetch a window object from the evaluation context explicitly.  ","version":null,"tagName":"h3"},{"title":"\"Format\"​","type":1,"pageTitle":"FrontFetchAsync","url":"/frontend/Reference/Frontend IO/FrontFetchAsync#format","content":" The default expression form used to import raw data acquired from the frontend. It effectively applies ImportString on raw JSON data. The possible values  &quot;JSON&quot; (the default)&quot;ExpressionJSON&quot;&quot;Raw&quot; bypasses and returns a string  ","version":null,"tagName":"h3"},{"title":"Examples​","type":1,"pageTitle":"FrontFetchAsync","url":"/frontend/Reference/Frontend IO/FrontFetchAsync#examples","content":" To read the selected text from a cell and print it to another cell  With[{win = CurrentWindow[], cell = ResultCell[]}, EventHandler[InputButton[&quot;Read selected text&quot;], Function[Null, Then[FrontFetchAsync[FrontEditorSelected[&quot;Get&quot;], &quot;Window&quot;-&gt;win], Function[result, CellPrint[result , &quot;After&quot;-&gt;cell]; ] ] ]] ]   or to read a clipboard of a user  With[{win = CurrentWindow[], cell = ResultCell[]}, EventHandler[InputButton[&quot;Read clipboard&quot;], Function[Null, Then[FrontFetchAsync[ReadClipboard[], &quot;Window&quot;-&gt;win], Function[result, CellPrint[result , &quot;After&quot;-&gt;cell]; ] ] ]] ]  ","version":null,"tagName":"h2"},{"title":"CellPrint","type":0,"sectionRef":"#","url":"/frontend/Reference/Cells and Notebook/CellPrint","content":"","keywords":"","version":null},{"title":"Options​","type":1,"pageTitle":"CellPrint","url":"/frontend/Reference/Cells and Notebook/CellPrint#options","content":" By the default it prints an output Wolfram Language cell after a current parent input cell, but you can override it  ","version":null,"tagName":"h2"},{"title":"\"After\"​","type":1,"pageTitle":"CellPrint","url":"/frontend/Reference/Cells and Notebook/CellPrint#after","content":" Specifies a RemoteCellObj after which a new cell will be inserted. A sequence patterns are also supported  ","version":null,"tagName":"h3"},{"title":"\"Before\"​","type":1,"pageTitle":"CellPrint","url":"/frontend/Reference/Cells and Notebook/CellPrint#before","content":" The same as the previous one, but inserts before the given object  ","version":null,"tagName":"h3"},{"title":"\"Type\"​","type":1,"pageTitle":"CellPrint","url":"/frontend/Reference/Cells and Notebook/CellPrint#type","content":" The default value is &quot;Output&quot;  ","version":null,"tagName":"h3"},{"title":"Example​","type":1,"pageTitle":"CellPrint","url":"/frontend/Reference/Cells and Notebook/CellPrint#example","content":" Print a cell after the current one with a date  With[{cell = ResultCell[]}, EventHandler[InputButton[], Function[Null, CellPrint[ToString[Now, StandardForm], &quot;After&quot;-&gt;cell] ]] ]  ","version":null,"tagName":"h2"},{"title":"WLXForm","type":0,"sectionRef":"#","url":"/frontend/Reference/Decorations/WLXForm","content":"","keywords":"","version":null},{"title":"Example​","type":1,"pageTitle":"WLXForm","url":"/frontend/Reference/Decorations/WLXForm#example","content":" Depending on where an expression is displayed, one can change its visual representation using MakeBoxes tagset, i.e.  SpecialOne /: MakeBoxes[SpecialOne, StandardForm] := With[{ o = Graphics[{Red, Disk[]}] // CreateFrontEndObject }, ViewBox[SpecialOne, o] ] SpecialOne /: MakeBoxes[SpecialOne, WLXForm] := With[{ o = Graphics[{Blue, Disk[]}] // CreateFrontEndObject }, o ]   in the normal Wolfram cell an output looks like      while on a slide   ","version":null,"tagName":"h2"},{"title":"MetaMarker","type":0,"sectionRef":"#","url":"/frontend/Reference/Frontend IO/MetaMarker","content":"MetaMarker WLJS Wolfram Kernel Execution environment wljs-editor Package Notebook`Editor`Kernel`FrontSubmitService`MetaMarkers` Context MetaMarker[uid_String] _MetaMarker an object used to mark frontend instances and their contexts to be used later with FrontSubmit. One can think about if it assigns a given identifier to a group of expressions and saves their context of the evaluation. Please, see an examples on FrontSubmit.","keywords":"","version":null},{"title":"FrontSubmit","type":0,"sectionRef":"#","url":"/frontend/Reference/Frontend IO/FrontSubmit","content":"","keywords":"","version":null},{"title":"Options​","type":1,"pageTitle":"FrontSubmit","url":"/frontend/Reference/Frontend IO/FrontSubmit#options","content":" ","version":null,"tagName":"h2"},{"title":"\"Window\"​","type":1,"pageTitle":"FrontSubmit","url":"/frontend/Reference/Frontend IO/FrontSubmit#window","content":" specifies a window socket, to which an expression will be sent. Use CurrentWindow to fetch a window object from the evaluation context.  ","version":null,"tagName":"h3"},{"title":"Usage with Meta-Markers​","type":1,"pageTitle":"FrontSubmit","url":"/frontend/Reference/Frontend IO/FrontSubmit#usage-with-meta-markers","content":" Using an extension MetaMarker, one can execute an expression in the context of a specified container  FrontSubmit[expr_, m_MetaMarker, opts___]   warning Be aware of a context loss in a case of an handler function called from outside the cell. Therefore &quot;Window&quot; option comes to provide the missing information about a window. With[{win = CurrentWindow[]}, (* normal evaluation context *) EventHandler[InputButton[], Function[Null, (* NO evaluation context *) FrontSubmit[Alert[&quot;Hello World&quot;], &quot;Window&quot; -&gt; win] (* provided explicitly *) ]] ] or another example with a timer SetTimeout With[{win = CurrentWindow[]}, (* normal evaluation context *) SetTimeout[ (* NO evaluation context *) FrontSubmit[Alert[&quot;Boom&quot;], &quot;Window&quot;-&gt;win] , 3000]; &quot;Hi there!&quot; ]   ","version":null,"tagName":"h2"},{"title":"Examples​","type":1,"pageTitle":"FrontSubmit","url":"/frontend/Reference/Frontend IO/FrontSubmit#examples","content":" ","version":null,"tagName":"h2"},{"title":"Calling an WLJS (or Frontend) function​","type":1,"pageTitle":"FrontSubmit","url":"/frontend/Reference/Frontend IO/FrontSubmit#calling-an-wljs-or-frontend-function","content":" FrontSubmit[Alert[&quot;Hello World!&quot;]]   which will produce a pop-up modal window.  Or to call a custom-defined Javascript function  cell 1 core.ShowReversed = async (args, env) =&gt; { const text = await interpretate(args[0], env); alert(text..split(&quot;&quot;).reverse().join(&quot;&quot;)); }   cell 2 FrontSubmit[ShowReversed[&quot;Must be reversed...&quot;]];   ","version":null,"tagName":"h3"},{"title":"Controlling ViewBox​","type":1,"pageTitle":"FrontSubmit","url":"/frontend/Reference/Frontend IO/FrontSubmit#controlling-viewbox","content":" A typical graphics figure is usually a ViewBox. Here we mark its instance with a unique ID using MetaMarker  Plot[x, {x,0,1}, Epilog-&gt;{MetaMarker[&quot;pp&quot;]}]   and then we can destroy it and replace with some other text  FrontSubmit[ViewBox`OuterExpression[&quot;Hello World&quot;], MetaMarker[&quot;pp&quot;]]   ","version":null,"tagName":"h3"},{"title":"Append objects to a static graph​","type":1,"pageTitle":"FrontSubmit","url":"/frontend/Reference/Frontend IO/FrontSubmit#append-objects-to-a-static-graph","content":" We can append anything to a graphics canvas without reevaluation of a cell  cell 1 Plot[x, {x,0,1}, Epilog-&gt;{MetaMarker[&quot;pp&quot;]}]   and then  cell 2 FrontSubmit[Arrow[RandomReal[{0,1}, {2,2}]], MetaMarker[&quot;pp&quot;]]   to append an arrow to a marked graph   ","version":null,"tagName":"h3"},{"title":"FrontEndExecutable","type":0,"sectionRef":"#","url":"/frontend/Reference/Frontend Objects/FrontEndExecutable","content":"FrontEndExecutable WLJS Execution environment Notebook`Editor`FrontendObject` Context wljs-editor Package FrontEndExecutable[uid_String] A reference to a frontend object (see CreateFrontEndObject) similar to FrontEndRef, which is replaced on the output by a decorative widget - ViewBox with FrontEndRef as an inner expression","keywords":"","version":null},{"title":"ViewBox","type":0,"sectionRef":"#","url":"/frontend/Reference/Decorations/ViewBox","content":"","keywords":"","version":null},{"title":"Options​","type":1,"pageTitle":"ViewBox","url":"/frontend/Reference/Decorations/ViewBox#options","content":" ","version":null,"tagName":"h2"},{"title":"\"Event\"​","type":1,"pageTitle":"ViewBox","url":"/frontend/Reference/Decorations/ViewBox#event","content":" Manually enables events generation. Using the provided event object identifier (_String), it fires various events based on its state. You can attach a normal EventHandler to the given id  uid = CreateUUID[]; EventHandler[uid, {pattern_String :&gt; handler_, ..}] ViewBox[.., &quot;Event&quot;-&gt;uid]   There are following patterns available to be attached to  &quot;Mounted&quot; fires once a widget is visible. A unique identifier is provided as a payload&quot;Destroy&quot; fires once it was removed  Meta markers​  Once it has been mounted it provides a unique ID as a string in &quot;Mounted&quot; event, which can be used in MetaMarker. You can also apply ViewBox`InnerExpression and ViewBox`OuterExpression as well.  If there is no containers found inside ViewBox, it will copy just env variable, which is still fine for MetaMarkers to work  ","version":null,"tagName":"h3"},{"title":"Examples​","type":1,"pageTitle":"ViewBox","url":"/frontend/Reference/Decorations/ViewBox#examples","content":" tip This method is much faster than InterpretationBox or Interpretation, since it does not spawn EditorView inside for displaying regular boxes.  ","version":null,"tagName":"h2"},{"title":"Simple straight example​","type":1,"pageTitle":"ViewBox","url":"/frontend/Reference/Decorations/ViewBox#simple-straight-example","content":" Let us make a special symbol with a single property  boxObject /: MakeBoxes[boxObject[s_], StandardForm] := With[{ g = Graphics[{Blue, Disk[{0,0},1], Opacity[0.5], Red,Disk[{0,0},s]}, ImageSize-&gt;80, Controls-&gt;False, ImagePadding-&gt;None] }, ViewBox[boxObject[s], g // CreateFrontEndObject] ]   As you can see no JS required  Table[boxObject[i], {i,3}]     And you can still work with them as it was symbols  Event listeners​  We can make frontend beep, once widget has been destroyed  boxObject /: MakeBoxes[boxObject[s_], StandardForm] := With[{ g = Graphics[{Blue, Disk[{0,0},1], Opacity[0.5], Red,Disk[{0,0},s]}, ImageSize-&gt;80, Controls-&gt;False, ImagePadding-&gt;None], uid = CreateUUID[] }, EventHandler[uid, {&quot;Destroy&quot;-&gt;Beep}]; ViewBox[boxObject[s], g // CreateFrontEndObject, &quot;Event&quot;-&gt;uid] ]   ","version":null,"tagName":"h3"},{"title":"Replacing expression with custom JS​","type":1,"pageTitle":"ViewBox","url":"/frontend/Reference/Decorations/ViewBox#replacing-expression-with-custom-js","content":" One can define its own style of cells boxes  .js core.Replacer = async (args, env) =&gt; { env.element.style.background = &quot;red&quot;; env.element.style.width = &quot;2em&quot;; env.element.style.height = &quot;1em&quot;; }   wrapper /: MakeBoxes[wrapper[expr_], StandardForm] := ViewBox[wrapper[expr], Replacer]   and then try  wrapper[1/2]   note This is basically how RGBColor, DateObject are implemented  ","version":null,"tagName":"h3"},{"title":"Mutability​","type":1,"pageTitle":"ViewBox","url":"/frontend/Reference/Decorations/ViewBox#mutability","content":" In general it is possible to update the expression underneath indirectly. For this reason, there are multiple way of accessing this feature  ","version":null,"tagName":"h2"},{"title":"From Wolfram Kernel​","type":1,"pageTitle":"ViewBox","url":"/frontend/Reference/Decorations/ViewBox#from-wolfram-kernel","content":" Please see methods below  ViewBox`InnerExpression​  Is used to replace a covered expression by ViewBox with a given string.  warning It must be evaluated in the context of an instance of ViewBox, use MetaMarker and FrontSubmit in order to apply this to a specific box  ViewBox`OuterExpression​  Is used to replace or update the content string within the box (including the box as well)  warning It will destroy an instance of the ViewBox once applied.  Example  Plot[x, {x,0,1}, Epilog-&gt;{MetaMarker[&quot;pp&quot;]}]   and then we can destroy it and replace with our text  FrontSubmit[ViewBox`OuterExpression[&quot;Hello World&quot;], MetaMarker[&quot;pp&quot;]]   ","version":null,"tagName":"h3"},{"title":"From Javascript function​","type":1,"pageTitle":"ViewBox","url":"/frontend/Reference/Decorations/ViewBox#from-javascript-function","content":" An expression displayView is evaluated on WLJS Interpreter in the browser with special property provided (see tutorial WLJS Functions)  core.displayView = async (args, env) =&gt; { env.global.EditorWidget }   this object contains property to update the content  EditorWidget.applyChanges('&quot;new content&quot;')   Example​  Let us create a special object, that will act like a checkbox  CheckObject /: MakeBoxes[CheckObject[state_:(True | False)], StandardForm] := With[{}, ViewBox[CheckObject[state], CheckBoxDecorator[]] ]   now JS part  .js core.CheckBoxDecorator = async (args, env) =&gt; { let state = false; //check the raw data from the viewbox to determine the state if (env.global.EditorWidget.getDoc() == 'CheckObject[True]') state = true; //make a rectangle env.element.style.width = &quot;1em&quot;; env.element.style.height = &quot;1em&quot;; const update = (s) =&gt; env.element.style.background = s ? 'red' : 'blue'; //color it depending on state update(state); //logic for updates when a user click on it env.element.addEventListener(&quot;click&quot;, () =&gt; { state = !state; update(state); const stringState = state ? 'True' : 'False'; env.global.EditorWidget.applyChanges('CheckObject['+stringState+']'); }); }   Let's test it!  CheckObject[True]   then try to click on it, copy and paste it    whatever you do, it will keep its state synced. No communication with WL Kernel happens, everything is running within the code-editor in the browser.  Or even cooler  Table[CheckObject[True], {i, 3}, {j, 3}] // MatrixForm    ","version":null,"tagName":"h3"},{"title":"FrontEndRef","type":0,"sectionRef":"#","url":"/frontend/Reference/Frontend Objects/FrontEndRef","content":"FrontEndRef WLJS Wolfram Kernel Execution environment Notebook`Editor`FrontendObject` Context wljs-editor Package FrontEndRef[uid_String] An executable reference to a frontend object (see CreateFrontEndObject), that converts JSON expression back to Wolfram Language","keywords":"","version":null},{"title":"AbsoluteThickness","type":0,"sectionRef":"#","url":"/frontend/Reference/Graphics/AbsoluteThickness","content":"","keywords":"","version":null},{"title":"Example​","type":1,"pageTitle":"AbsoluteThickness","url":"/frontend/Reference/Graphics/AbsoluteThickness#example","content":" A styled Line object  Graphics[{ AbsoluteThickness[3], Cyan, Line[{{0,0}, {1,1}}] }]    ","version":null,"tagName":"h2"},{"title":"Row","type":0,"sectionRef":"#","url":"/frontend/Reference/Decorations/Row","content":"Row Wolfram Kernel Execution environment Row[{object1, object2, ...}] shows the list of any Wolfram Expressions in a row acting as a decoration","keywords":"","version":null},{"title":"CurrentWindow","type":0,"sectionRef":"#","url":"/frontend/Reference/Frontend IO/CurrentWindow","content":"","keywords":"","version":null},{"title":"Implementation​","type":1,"pageTitle":"CurrentWindow","url":"/frontend/Reference/Frontend IO/CurrentWindow#implementation","content":" CurrentWindow[] := Global`$EvaluationContext[&quot;KernelWebSocket&quot;]   It is used by FrontSubmit, FrontFetch and FrontFetchAsync ","version":null,"tagName":"h3"},{"title":"FrontFetch","type":0,"sectionRef":"#","url":"/frontend/Reference/Frontend IO/FrontFetch","content":"FrontFetch Wolfram Kernel Execution environment wljs-editor Package Notebook`Editor`Kernel`FrontSubmitService` Context is a synchronous version of FrontFetchAsync, that uses WaitAll to pause an execution while waiting for an incoming data danger It is not recommended to use synchronous version, since it blocks an event loop and can prevent receiving the data from external sources which affects the work of Promise module.","keywords":"","version":null},{"title":"Directive","type":0,"sectionRef":"#","url":"/frontend/Reference/Graphics/Directive","content":"","keywords":"","version":null},{"title":"Examples​","type":1,"pageTitle":"Directive","url":"/frontend/Reference/Graphics/Directive#examples","content":" ","version":null,"tagName":"h2"},{"title":"Ticks of a plot​","type":1,"pageTitle":"Directive","url":"/frontend/Reference/Graphics/Directive#ticks-of-a-plot","content":" One can provide a font-size parameters  Plot[Sin[x], {x,0,2Pi}, FrameTicksStyle-&gt;Directive[FontSize-&gt;16], Frame-&gt;True]     ","version":null,"tagName":"h3"},{"title":"FrameLabel style​","type":1,"pageTitle":"Directive","url":"/frontend/Reference/Graphics/Directive#framelabel-style","content":" The same is valid for the labels  Plot[Sin[x], {x,0,10 Pi}, FrameStyle-&gt;Directive[FontSize-&gt;16], Frame-&gt;True, FrameLabel-&gt;{&quot;x-axis&quot;, &quot;y-axis&quot;}]     ","version":null,"tagName":"h3"},{"title":"Transitions​","type":1,"pageTitle":"Directive","url":"/frontend/Reference/Graphics/Directive#transitions","content":" One can specify the local transitions parameters. For example  p1 = {0,0}; p2 = {0,0}; Graphics[{ Directive[TransitionDuration-&gt;500], Red, Disk[p1 // Offload, 0.2], {Directive[TransitionDuration-&gt;100], Blue, Disk[p2 // Offload, 0.2]}} , PlotRange-&gt;{{-1,1}, {-1,1}}]   then try  p1 = {1,1}; p2 = {-1,-1};   You will find that they are animated with a different duration. The same applies to TransitionType as well ","version":null,"tagName":"h3"},{"title":"Circle","type":0,"sectionRef":"#","url":"/frontend/Reference/Graphics/Circle","content":"","keywords":"","version":null},{"title":"Parameters​","type":1,"pageTitle":"Circle","url":"/frontend/Reference/Graphics/Circle#parameters","content":" See Disk  ","version":null,"tagName":"h2"},{"title":"Dynamics​","type":1,"pageTitle":"Circle","url":"/frontend/Reference/Graphics/Circle#dynamics","content":" Fully support for a radius and coordinates. Use Offload ","version":null,"tagName":"h2"},{"title":"Disk","type":0,"sectionRef":"#","url":"/frontend/Reference/Graphics/Disk","content":"","keywords":"","version":null},{"title":"Dynamics​","type":1,"pageTitle":"Disk","url":"/frontend/Reference/Graphics/Disk#dynamics","content":" Fully support for a radius and coordinates. Use Offload  ","version":null,"tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"Disk","url":"/frontend/Reference/Graphics/Disk#parameters","content":" ","version":null,"tagName":"h2"},{"title":"RGBColor​","type":1,"pageTitle":"Disk","url":"/frontend/Reference/Graphics/Disk#rgbcolor","content":" Color of the filling and stroke (if EdgeForm is not specified)  {Blue, Disk[{0,0}, 1]}     ","version":null,"tagName":"h3"},{"title":"EdgeForm​","type":1,"pageTitle":"Disk","url":"/frontend/Reference/Graphics/Disk#edgeform","content":" Specifies the color of a stroke  {EdgeForm[Red], Blue, Disk[{0,0}, 1]}     ","version":null,"tagName":"h3"},{"title":"Opacity​","type":1,"pageTitle":"Disk","url":"/frontend/Reference/Graphics/Disk#opacity","content":" Defines opacity for a primitive (see [[frontend/Reference/Graphics/Opacity]])  {Opacity[0.5], Red, Disk[{-0.5,0}, 1], Blue, Disk[{0.5,0}, 1]}     ","version":null,"tagName":"h3"},{"title":"Methods​","type":1,"pageTitle":"Disk","url":"/frontend/Reference/Graphics/Disk#methods","content":" ","version":null,"tagName":"h2"},{"title":"EventHandler​","type":1,"pageTitle":"Disk","url":"/frontend/Reference/Graphics/Disk#eventhandler","content":" One can listen to a several events produced by this primitive using EventHandler  EventHandler[t_Disk, {event_ -&gt; handler_, ...}]   where event can be  &quot;mousemove&quot; detects and sends coordinates of a mouse, when it is over this element&quot;drag&quot; makes primitive draggable and emits coordinates&quot;zoom&quot; detects zoom / mouse-wheel&quot;click&quot; detects mouse clicks ","version":null,"tagName":"h3"},{"title":"CreateFrontEndObject","type":0,"sectionRef":"#","url":"/frontend/Reference/Frontend Objects/CreateFrontEndObject","content":"","keywords":"","version":null},{"title":"Options​","type":1,"pageTitle":"CreateFrontEndObject","url":"/frontend/Reference/Frontend Objects/CreateFrontEndObject#options","content":" ","version":null,"tagName":"h2"},{"title":"\"Store\"​","type":1,"pageTitle":"CreateFrontEndObject","url":"/frontend/Reference/Frontend Objects/CreateFrontEndObject#store","content":" Specifies which to storage to use for an expression (&quot;Frontend&quot;, &quot;Kernel&quot;, or All). The default values is All.  Each time you create Graphics or any other frontend object, it makes two copies of it: the first one is shared with a browser (WLJS), while the second one is a private copy used by Wolfram Kernel once fetched by FrontEndRef or evaluated for a second time (see ViewBox).  ","version":null,"tagName":"h3"},{"title":"Applications​","type":1,"pageTitle":"CreateFrontEndObject","url":"/frontend/Reference/Frontend Objects/CreateFrontEndObject#applications","content":" info For Graphics, InputButton and etc CreateFrontEndObject is applied automatically, once it is converted to a StandardForm on output.  ","version":null,"tagName":"h2"},{"title":"Custom WLJS function inside a container​","type":1,"pageTitle":"CreateFrontEndObject","url":"/frontend/Reference/Frontend Objects/CreateFrontEndObject#custom-wljs-function-inside-a-container","content":" Use for custom defined WLJS functions i.e.  .js core.MyCustomStuff = async (args, env) =&gt; { env.element.innerText = &quot;Hi dude!&quot;; }   and then in the next cell  CreateFrontEndObject[MyCustomStuff[]]   tip Use TagSetDelayed on MakeBoxes to skip this procedure, i.e. MyCustomStuff /: MakeBoxes[m_MyCustomStuff, StandardForm] := With[{ o = CreateFrontEndObject[m] }, MakeBoxes[m, StandardForm] ] then you don't need to manually create a frontend object anymore. ","version":null,"tagName":"h3"},{"title":"Hue","type":0,"sectionRef":"#","url":"/frontend/Reference/Graphics/Hue","content":"Hue WLJS Execution environment Hue[h_, s_, l_] represents color as HUE, Saturation, Lightness. Use l=0.5 and s=1.0 to get fully saturated bright colors.","keywords":"","version":null},{"title":"GraphicsComplex","type":0,"sectionRef":"#","url":"/frontend/Reference/Graphics/GraphicsComplex","content":"","keywords":"","version":null},{"title":"Supported primitives​","type":1,"pageTitle":"GraphicsComplex","url":"/frontend/Reference/Graphics/GraphicsComplex#supported-primitives","content":" ","version":null,"tagName":"h2"},{"title":"Line​","type":1,"pageTitle":"GraphicsComplex","url":"/frontend/Reference/Graphics/GraphicsComplex#line","content":" GraphicsComplex[{{0,0}, {1,0}, {1,1}}, Line[{{1,2,3}}]] // Graphics   vertex colors are not supported  ","version":null,"tagName":"h3"},{"title":"Polygon​","type":1,"pageTitle":"GraphicsComplex","url":"/frontend/Reference/Graphics/GraphicsComplex#polygon","content":" GraphicsComplex[{{0,0}, {1,0}, {1,1}}, Polygon[{1,2,3}], &quot;VertexColors&quot;-&gt;{{1,1,0}, {0,1,1}, {0,1,1}}] // Graphics   vertex colors supports only the flat shading  ","version":null,"tagName":"h3"},{"title":"Point​","type":1,"pageTitle":"GraphicsComplex","url":"/frontend/Reference/Graphics/GraphicsComplex#point","content":" GraphicsComplex[{{0,0}, {1,0}, {1,1}}, Point[{{1,2,3}}]] // Graphics   or with colors  GraphicsComplex[{{0,0}, {1,0}, {1,1}}, Point[{{1,2,3}}], &quot;VertexColors&quot;-&gt;{{1,0,0}, {0,1,0}, {0,0,1}}] // Graphics  ","version":null,"tagName":"h3"},{"title":"GrayLevel","type":0,"sectionRef":"#","url":"/frontend/Reference/Graphics/GrayLevel","content":"GrayLevel WLJS Execution environment GrayLevel[n_Real] where n is in a range of 0-1 gives a corresponding gray color.","keywords":"","version":null},{"title":"LABColor","type":0,"sectionRef":"#","url":"/frontend/Reference/Graphics/LABColor","content":"LABColor LABColor[l_, a_, b_] represents a color in the CIELAB color space with lightness l and color components a and b. example Graphics[{LABColor[.5, .8, .8], Disk[]}] ","keywords":"","version":null},{"title":"AnimationFrameListener","type":0,"sectionRef":"#","url":"/frontend/Reference/Graphics/AnimationFrameListener","content":"","keywords":"","version":null},{"title":"Example​","type":1,"pageTitle":"AnimationFrameListener","url":"/frontend/Reference/Graphics/AnimationFrameListener#example","content":" There is a famous example of 1000 particles &quot;dancing&quot; with each other  cell 1 n = 1000; r := RandomInteger[{1, n}]; f := (#/(.01 + Sqrt[#.#])) &amp; /@ (x[[#]] - x) &amp;; s := With[{r1 = r}, p[[r1]] = r; q[[r1]] = r]; x = RandomReal[{-1, 1}, {n, 2}]; {p, q} = RandomInteger[{1, n}, {2, n}];   cell 2 EventHandler[&quot;frame&quot;, Function[Null, (* all calculations *) x = 0.995 x + 0.02 f[p] - 0.01 f[q]; If[r &lt; 100, s]; ]];   cell 3 Graphics[{ PointSize[0.007], Point[x // Offload], AnimationFrameListener[x // Offload, &quot;Event&quot;-&gt;&quot;frame&quot;] }, PlotRange -&gt; {{-2,2}, {-2,2}}, &quot;TransitionType&quot;-&gt;&quot;Linear&quot;, &quot;TransitionDuration&quot;-&gt;1]     Here we used the same symbol x used for drawing our points for triggering AnimationFrameListener. It does not cost anything, since it listens only for change of a symbol and does not read or decode an actual value.  to cancel animation - remove handler  EventRemove[&quot;frame&quot;]   and to restart - evaluate cell 2 and retrigger it using  EventFire[&quot;frame&quot;, True];  ","version":null,"tagName":"h2"},{"title":"Offset","type":0,"sectionRef":"#","url":"/frontend/Reference/Graphics/Offset","content":"Offset WLJS Execution environment wljs-graphics-d3 Package adds an offset to an inner graphics primitive Offset[{dx_,dy_}, position_] or acts as an offset to labels in Graphics Offset[label_String, offset_List] warning Limited or buggy functionality","keywords":"","version":null},{"title":"Inset","type":0,"sectionRef":"#","url":"/frontend/Reference/Graphics/Inset","content":"","keywords":"","version":null},{"title":"Dynamics​","type":1,"pageTitle":"Inset","url":"/frontend/Reference/Graphics/Inset#dynamics","content":" The second arguments pos that specifies the position of an inset does support dynamic updates, i.e. try  inset = Graphics[{ LightRed, Disk[{-1-0.13,0.9},0.1], Black, Directive[FontSize-&gt;16], Text[&quot;Test&quot;, {-1/16 - 1 - 0.13,-1/30 + 0.9}] }, PlotRange-&gt;{{-1,1}, {-1,1}}]; pts = {0,0}; Plot[x, {x,0,10}, Epilog-&gt;{Inset[inset, pts // Offload]}]   and then  Do[pts = {i,i}; Pause[0.1];, {i, 0, 10, 0.5}]  ","version":null,"tagName":"h2"},{"title":"EdgeForm","type":0,"sectionRef":"#","url":"/frontend/Reference/Graphics/EdgeForm","content":"EdgeForm WLJS Execution environment specifies stroke color for a primitive EdgeForm[col_RGBColor] ","keywords":"","version":null},{"title":"Opacity","type":0,"sectionRef":"#","url":"/frontend/Reference/Graphics/Opacity","content":"Opacity WLJS Execution environment wljs-graphics-d3 Package Opacity[i_Real] defines opacity for primitives {Opacity[0.5], Red, Disk[{-0.5,0}, 1], Blue, Disk[{0.5,0}, 1]} ","keywords":"","version":null},{"title":"Point","type":0,"sectionRef":"#","url":"/frontend/Reference/Graphics/Point","content":"","keywords":"","version":null},{"title":"Parameters​","type":1,"pageTitle":"Point","url":"/frontend/Reference/Graphics/Point#parameters","content":" ","version":null,"tagName":"h2"},{"title":"RGBColor​","type":1,"pageTitle":"Point","url":"/frontend/Reference/Graphics/Point#rgbcolor","content":" specifies colors of a points  ","version":null,"tagName":"h3"},{"title":"Opacity​","type":1,"pageTitle":"Point","url":"/frontend/Reference/Graphics/Point#opacity","content":" specifies opacity  ","version":null,"tagName":"h3"},{"title":"PointSize​","type":1,"pageTitle":"Point","url":"/frontend/Reference/Graphics/Point#pointsize","content":" absolute size of a point  ","version":null,"tagName":"h3"},{"title":"Methods​","type":1,"pageTitle":"Point","url":"/frontend/Reference/Graphics/Point#methods","content":" ","version":null,"tagName":"h2"},{"title":"EventHandler​","type":1,"pageTitle":"Point","url":"/frontend/Reference/Graphics/Point#eventhandler","content":" One can listen to a several events produced by this primitive using EventHandler  EventHandler[t_Point, {event_ -&gt; handler_, ...}]   where event can be  &quot;mousemove&quot; detects and sends coordinates of a mouse, when it is over this element&quot;drag&quot; makes primitive draggable and emits coordinates&quot;zoom&quot; detects zoom / mouse-wheel&quot;click&quot; detects mouse clicks  ","version":null,"tagName":"h3"},{"title":"Indexed geometry​","type":1,"pageTitle":"Point","url":"/frontend/Reference/Graphics/Point#indexed-geometry","content":" Using it inside GraphicsComplex allows to specify only the indexes of vertices as arguments similar to faces like in Indexed geometry  ","version":null,"tagName":"h2"},{"title":"Dynamics​","type":1,"pageTitle":"Point","url":"/frontend/Reference/Graphics/Point#dynamics","content":" Point primitive supports dynamic updates even if the number of points is not constant.  There is a famous example of 1000 particles &quot;dancing&quot; with each other  cell 1 n = 1000; r := RandomInteger[{1, n}]; f := (#/(.01 + Sqrt[#.#])) &amp; /@ (x[[#]] - x) &amp;; s := With[{r1 = r}, p[[r1]] = r; q[[r1]] = r]; x = RandomReal[{-1, 1}, {n, 2}]; {p, q} = RandomInteger[{1, n}, {2, n}];   cell 2 EventHandler[&quot;frame&quot;, Function[Null, (* all calculations *) x = 0.995 x + 0.02 f[p] - 0.01 f[q]; If[r &lt; 100, s]; ]];   cell 3 Graphics[{ PointSize[0.007], Point[x // Offload], AnimationFrameListener[x // Offload, &quot;Event&quot;-&gt;&quot;frame&quot;] }, PlotRange -&gt; {{-2,2}, {-2,2}}, &quot;TransitionType&quot;-&gt;&quot;Linear&quot;, &quot;TransitionDuration&quot;-&gt;1]    ","version":null,"tagName":"h2"},{"title":"Arrow","type":0,"sectionRef":"#","url":"/frontend/Reference/Graphics/Arrow","content":"","keywords":"","version":null},{"title":"Dynamics​","type":1,"pageTitle":"Arrow","url":"/frontend/Reference/Graphics/Arrow#dynamics","content":" Fully supports. Use Offload keyword for that  ","version":null,"tagName":"h2"},{"title":"Options​","type":1,"pageTitle":"Arrow","url":"/frontend/Reference/Graphics/Arrow#options","content":" Not available at the moment ","version":null,"tagName":"h2"},{"title":"RGBColor","type":0,"sectionRef":"#","url":"/frontend/Reference/Graphics/RGBColor","content":"RGBColor WLJS Wolfram Kernel Execution environment represents color RGBColor[r_Real, g_Real, b_Real] or RGBColor[{r_Real, g_Real, b_Real}] where r, g, b are from 0 to 1.","keywords":"","version":null},{"title":"Rotate","type":0,"sectionRef":"#","url":"/frontend/Reference/Graphics/Rotate","content":"","keywords":"","version":null},{"title":"Dynamics​","type":1,"pageTitle":"Rotate","url":"/frontend/Reference/Graphics/Rotate#dynamics","content":" It support dynamic updates for angle variable. Graphics primitives g can be updated separately. Rotate only applies transformation on g.  EventHandler[InputRange[0, 2.0 Pi, 0.1], Function[a, angle = a ]] % // EventFire; Graphics[Rotate[Rectangle[{-1,-1}, {1,1}], angle // Offload]]    ","version":null,"tagName":"h2"},{"title":"Raster","type":0,"sectionRef":"#","url":"/frontend/Reference/Graphics/Raster","content":"Raster WLJS Execution environment wljs-graphics-d3 Package warning Is not fully supported. Fallback to SVG rectangles","keywords":"","version":null},{"title":"Show","type":0,"sectionRef":"#","url":"/frontend/Reference/Graphics/Show","content":"Show WLJS Execution environment caution Is not supported in wljs-graphics-d3 for now","keywords":"","version":null},{"title":"Rectangle","type":0,"sectionRef":"#","url":"/frontend/Reference/Graphics/Rectangle","content":"","keywords":"","version":null},{"title":"Parameters​","type":1,"pageTitle":"Rectangle","url":"/frontend/Reference/Graphics/Rectangle#parameters","content":" ","version":null,"tagName":"h2"},{"title":"RGBColor​","type":1,"pageTitle":"Rectangle","url":"/frontend/Reference/Graphics/Rectangle#rgbcolor","content":" filling color  ","version":null,"tagName":"h3"},{"title":"EdgeForm​","type":1,"pageTitle":"Rectangle","url":"/frontend/Reference/Graphics/Rectangle#edgeform","content":" stroke color  ","version":null,"tagName":"h3"},{"title":"Opacity​","type":1,"pageTitle":"Rectangle","url":"/frontend/Reference/Graphics/Rectangle#opacity","content":" global opacity of an object  ","version":null,"tagName":"h3"},{"title":"Methods​","type":1,"pageTitle":"Rectangle","url":"/frontend/Reference/Graphics/Rectangle#methods","content":" ","version":null,"tagName":"h2"},{"title":"Area​","type":1,"pageTitle":"Rectangle","url":"/frontend/Reference/Graphics/Rectangle#area","content":" Calculates total area (symbolically as well)  Area[Rectangle[{x1, y1}, {x2, y2}]]   ","version":null,"tagName":"h3"},{"title":"RegionCentroid​","type":1,"pageTitle":"Rectangle","url":"/frontend/Reference/Graphics/Rectangle#regioncentroid","content":" RegionCentroid[Rectangle[{x1, y1}, {x2, y2}]]   ","version":null,"tagName":"h3"},{"title":"EventHandler​","type":1,"pageTitle":"Rectangle","url":"/frontend/Reference/Graphics/Rectangle#eventhandler","content":" One can listen to a several events produced by this primitive using EventHandler  EventHandler[t_Rectangle, {event_ -&gt; handler_, ...}]   where event can be  &quot;mousemove&quot; detects and sends coordinates of a mouse, when it is over this element&quot;drag&quot; makes primitive draggable and emits coordinates&quot;zoom&quot; detects zoom / mouse-wheel&quot;click&quot; detects mouse clicks  ","version":null,"tagName":"h3"},{"title":"Dynamics​","type":1,"pageTitle":"Rectangle","url":"/frontend/Reference/Graphics/Rectangle#dynamics","content":" It fully supports dynamics. Use Offload on coordinates.  ","version":null,"tagName":"h2"},{"title":"Example​","type":1,"pageTitle":"Rectangle","url":"/frontend/Reference/Graphics/Rectangle#example","content":" A simple bar chart  data = RandomReal[{3, 10}, {10, 2}]; Graphics[{ EdgeForm[Black], Blue, Table[{Blue, Rectangle[{i - .4, 0}, {i, data[[i, 1]]}], Red, Rectangle[{i + .4, 0}, {i, data[[i, 2]]}]}, {i, 10}] }, Frame -&gt; True]    ","version":null,"tagName":"h2"},{"title":"Style","type":0,"sectionRef":"#","url":"/frontend/Reference/Graphics/Style","content":"Style WLJS Execution environment wljs-graphics-d3 Package A wrapper that can be used for Text . The following options can be provided FontSize -&gt; _Integer - 10, 12, 14...FontFamily -&gt; _String - this is basically an SVG attribute, please see here. If you have imported any font using CSS, you can also use it. See more examples @ Text note See also Style as decoration","keywords":"","version":null},{"title":"Line","type":0,"sectionRef":"#","url":"/frontend/Reference/Graphics/Line","content":"","keywords":"","version":null},{"title":"General properties​","type":1,"pageTitle":"Line","url":"/frontend/Reference/Graphics/Line#general-properties","content":" Line itself does not depend on its interpretation, you can also think about it if it was an abstract object like  ArcLength[Line[{{0, 0}, {1, 1}}]]   gives  Sqrt[2]   without Graphics used here.  ","version":null,"tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"Line","url":"/frontend/Reference/Graphics/Line#parameters","content":" There are certain parameters, that can affect the style of a line  ","version":null,"tagName":"h2"},{"title":"AbsoluteThickness​","type":1,"pageTitle":"Line","url":"/frontend/Reference/Graphics/Line#absolutethickness","content":" The default is 1  {AbsoluteThickness[3], Line[{{0,0}, {1,1}}]} // Graphics   Absolute thickness is indifferent to scaling or zooming of a graphics object.  ","version":null,"tagName":"h3"},{"title":"RGBColor​","type":1,"pageTitle":"Line","url":"/frontend/Reference/Graphics/Line#rgbcolor","content":" Specifies the color of a stroke  {Red, Line[{{0,0}, {1,1}}]} // Graphics   ","version":null,"tagName":"h3"},{"title":"Indexed geometry​","type":1,"pageTitle":"Line","url":"/frontend/Reference/Graphics/Line#indexed-geometry","content":" Using it inside GraphicsComplex allows to specify only the indexes of vertices as arguments similar to faces like in Indexed geometry  ","version":null,"tagName":"h2"},{"title":"Examples​","type":1,"pageTitle":"Line","url":"/frontend/Reference/Graphics/Line#examples","content":" ","version":null,"tagName":"h2"},{"title":"Simple primitive​","type":1,"pageTitle":"Line","url":"/frontend/Reference/Graphics/Line#simple-primitive","content":" A line, that goes though list of points in 2D  Graphics[Line[{{1, 0}, {2, 4}, {3, 0}, {4, 4}}]]     or styled line  Graphics[{ AbsoluteThickness[3], Red, Line[{{1, 0}, {2, 1}, {3, 0}, {4, 1}}] }]     Tangent vectors along an elliptic curve  With[{f = {Cos[x] + Sin[x], Sin[x]}}, Graphics[ Table[{LABColor[t/(2 Pi), 1, .8], Line[{f, Normalize[D[f, x]] + f}]} /. x -&gt; t, {t, 0, 2 Pi, .1}]]]     ","version":null,"tagName":"h3"},{"title":"Dynamics​","type":1,"pageTitle":"Line","url":"/frontend/Reference/Graphics/Line#dynamics","content":" This is a main ingredient for displaying any dynamic plots, since Plot function works only for the static data.  Manipulation​  For example a live plot of traveling wave-packet  cell 1 packet[x_, t_] := Sum[Sin[- w t + w x], {w, 0,3,0.05}] / 10; line = Table[{x, packet[x, 0]}, {x, 0, 10, 0.1}]; Graphics[Line[line // Offload], Frame-&gt;True, FrameLabel-&gt;{{&quot;amplitude&quot;}, {&quot;distance&quot;}}]   and a InputRange to control a time variable  cell 2 EventHandler[InputRange[0,5,0.5, 0], Function[t, line = Table[{x, packet[x, t]}, {x, 0, 10, 0.1}]; ]]   The desired result should look like    Inverse kinematics (FABRIK)​  This is an example of implementation FABRIK algorithm  Define a bunch of points connect them into a segmented line with fixed length  chain = {Cos[#[[1]]], Sin[#[[2]]]}&amp;/@ RandomReal[{-1,1}, {65, 2}] // Sort; lengths = Norm /@ (chain // Reverse // Differences) // Reverse;   the actual implementation of FABRIK  fabrik[lengths_, target_, origin_] := Module[{buffer, prev}, buffer = Table[With[{p = chain[[-i]]}, If[i === 1, prev = target; target , prev = prev - Normalize[(prev - p)] lengths[[1-i]]; prev ] ], {i, chain // Length}] // Reverse; Table[With[{p = buffer[[i]]}, If[i === 1, prev = origin; origin , prev = prev - Normalize[(prev - p)] lengths[[i-1]]; prev ] ], {i, chain // Length}] ]   Dynamic visualization using lines and points  Graphics[{ Line[chain // Offload], Red, PointSize[0.06], EventHandler[Point[{-1,-1}], {&quot;drag&quot;-&gt;Function[xy, chain = fabrik[lengths, xy, chain // First]]}], Blue, Point[origin // Offload] }, PlotRange-&gt;{{-2,2}, {-2,2}}, ImageSize-&gt;500, TransitionType-&gt;&quot;Linear&quot;, TransitionDuration-&gt;30]   Try to drag a red dot using mouseThe result will look like    note Line interpolates missing segments of a line, if the dataset has been updated. No actions needed form the user ","version":null,"tagName":"h3"},{"title":"TransitionDuration","type":0,"sectionRef":"#","url":"/frontend/Reference/Graphics/TransitionDuration","content":"TransitionDuration WLJS Execution environment JerryI`Notebook`Graphics2D` Context wljs-graphics-d3 Package acts as an option and a context modifier for Graphics that tells the transition duration for graphics primitives (coordinate changes, and etc) once one of dependencies has been updated global Graphics[..., TransitionDuration-&gt;timems_Integer] local Graphics[{Directive[TransitionDuration-&gt;timems_Integer], ...}] Value timems is in milliseconds.","keywords":"","version":null},{"title":"TransitionType","type":0,"sectionRef":"#","url":"/frontend/Reference/Graphics/TransitionType","content":"","keywords":"","version":null},{"title":"Types​","type":1,"pageTitle":"TransitionType","url":"/frontend/Reference/Graphics/TransitionType#types","content":" ","version":null,"tagName":"h2"},{"title":"\"Linear\"​","type":1,"pageTitle":"TransitionType","url":"/frontend/Reference/Graphics/TransitionType#linear","content":" ","version":null,"tagName":"h3"},{"title":"\"CubicInOut\"​","type":1,"pageTitle":"TransitionType","url":"/frontend/Reference/Graphics/TransitionType#cubicinout","content":" ","version":null,"tagName":"h3"},{"title":"None​","type":1,"pageTitle":"TransitionType","url":"/frontend/Reference/Graphics/TransitionType#none","content":" No transition. Works best for fast animation  ","version":null,"tagName":"h3"},{"title":"Example​","type":1,"pageTitle":"TransitionType","url":"/frontend/Reference/Graphics/TransitionType#example","content":" Let us see how it works with a moving object  cell 1 object = {-1.,0.}; Graphics[{ {Directive[TransitionType -&gt; &quot;Linear&quot;], Disk[(object + {0,0.5}) // Offload, 0.2]}, {Directive[TransitionType -&gt; &quot;CubicInOut&quot;], Disk[(object - {0,0}) // Offload, 0.2]}, {Directive[TransitionType -&gt; None], Disk[(object - {0,0.5}) // Offload, 0.2]} }, PlotRange-&gt;{{-1,1}, {-1,1.5}}, &quot;TransitionDuration&quot;-&gt;500]   and then in the next cell  object = {1.,0};   the result is following   ","version":null,"tagName":"h2"},{"title":"Text","type":0,"sectionRef":"#","url":"/frontend/Reference/Graphics/Text","content":"","keywords":"","version":null},{"title":"Styling options​","type":1,"pageTitle":"Text","url":"/frontend/Reference/Graphics/Text#styling-options","content":" The following options can be provided to Style wrapper  FontSize-&gt;Number - 10, 12, 14...FontFamily-&gt;String - this is basically an SVG attribute, please see here. If you have imported any font using CSS, you can also use it.  To change the color, just put in somewhere to the list  Graphics[{ Red, Text[&quot;Hello World&quot;, {0,0}] }]     ","version":null,"tagName":"h3"},{"title":"Methods​","type":1,"pageTitle":"Text","url":"/frontend/Reference/Graphics/Text#methods","content":" ","version":null,"tagName":"h2"},{"title":"EventHandler​","type":1,"pageTitle":"Text","url":"/frontend/Reference/Graphics/Text#eventhandler","content":" One can listen to a several events produced by this primitive using EventHandler  EventHandler[t_Text, {event_ -&gt; handler_, ...}]   where event can be  &quot;mousemove&quot; detects and sends coordinates of a mouse, when it is over this element&quot;drag&quot; makes primitive draggable and emits coordinates&quot;zoom&quot; detects zoom / mouse-wheel&quot;click&quot; detects mouse clicks  ","version":null,"tagName":"h3"},{"title":"Dynamic updates​","type":1,"pageTitle":"Text","url":"/frontend/Reference/Graphics/Text#dynamic-updates","content":" For both the position and text content dynamic updates are supported  txt = RandomWord[]; pos = {0,0}; Graphics[{ Red, Text[txt // Offload, pos // Offload] }]   task = SetInterval[With[{}, txt = RandomWord[]; pos = RandomReal[{-1,1}, 2]; ], 500]; SetTimeout[TaskRemove[task], 5000];   use TaskRemove[task]; to stop an animation  ","version":null,"tagName":"h3"},{"title":"Math support​","type":1,"pageTitle":"Text","url":"/frontend/Reference/Graphics/Text#math-support","content":" You can use a limited Latex-math kinda mode, that I implemented instead of full Boxes support as it was done in Mathematica, since it might slow down the system a lot  Text[&quot;wavenumber (cm^{-1})&quot;, {0,0}] Text[&quot;\\\\alpha (cm^{-1})&quot;, {0,0}]     A list of features  most used Greek symbols like alpha and etc are supportedsubscript a_1 or a_{hi}superscript a^2 or a^{23}    In principle, it will anyway ends up in HTML, therefore one can use any special symbol  &quot;I will display &amp;#10060;&quot;    ","version":null,"tagName":"h3"},{"title":"SVGAttribute","type":0,"sectionRef":"#","url":"/frontend/Reference/Graphics/SVGAttribute","content":"","keywords":"","version":null},{"title":"Example​","type":1,"pageTitle":"SVGAttribute","url":"/frontend/Reference/Graphics/SVGAttribute#example","content":" If we want a dashed line  Graphics[ SVGAttribute[ Line[{{-1,-1}, {1,1}}] , &quot;stroke-dasharray&quot;-&gt;&quot;3&quot;] ]    ","version":null,"tagName":"h2"},{"title":"Translate","type":0,"sectionRef":"#","url":"/frontend/Reference/Graphics/Translate","content":"","keywords":"","version":null},{"title":"Dynamics​","type":1,"pageTitle":"Translate","url":"/frontend/Reference/Graphics/Translate#dynamics","content":" pos argument does support dynamic updates. Use Offload ","version":null,"tagName":"h2"},{"title":"ZoomAt","type":0,"sectionRef":"#","url":"/frontend/Reference/Graphics/ZoomAt","content":"","keywords":"","version":null},{"title":"Example​","type":1,"pageTitle":"ZoomAt","url":"/frontend/Reference/Graphics/ZoomAt#example","content":" Let us make a simple plot and mark it using MetaMarker  Plot[x, {x,0,1}, Epilog-&gt;{MetaMarker[&quot;plot&quot;]}]   now we can zoom it  FrontSubmit[ZoomAt[1.2, {-0.1,0.0}], MetaMarker[&quot;plot&quot;]]  ","version":null,"tagName":"h2"},{"title":"AbsoluteThickness","type":0,"sectionRef":"#","url":"/frontend/Reference/Graphics3D/AbsoluteThickness","content":"AbsoluteThickness AbsoluteThickness[thick_Real] defines an thickness or various 3D primitives such as Arrow, Line and etc","keywords":"","version":null},{"title":"Arrowheads","type":0,"sectionRef":"#","url":"/frontend/Reference/Graphics3D/Arrowheads","content":"Arrowheads WLJS Execution environment wljs-graphics3d-threejs Package Arrowheads[size_] or Arrowheads[size_, heightOffset_] defines the size of an arrow head and its position with respect to the parent line","keywords":"","version":null},{"title":"Arrow","type":0,"sectionRef":"#","url":"/frontend/Reference/Graphics3D/Arrow","content":"","keywords":"","version":null},{"title":"Parameters​","type":1,"pageTitle":"Arrow","url":"/frontend/Reference/Graphics3D/Arrow#parameters","content":" ","version":null,"tagName":"h2"},{"title":"Thickness or AbsoluteThickness​","type":1,"pageTitle":"Arrow","url":"/frontend/Reference/Graphics3D/Arrow#thickness-or-absolutethickness","content":" controls the width of a stroke  ","version":null,"tagName":"h3"},{"title":"RGBColor​","type":1,"pageTitle":"Arrow","url":"/frontend/Reference/Graphics3D/Arrow#rgbcolor","content":" controls color of a stroke  ","version":null,"tagName":"h3"},{"title":"Example​","type":1,"pageTitle":"Arrow","url":"/frontend/Reference/Graphics3D/Arrow#example","content":" Simple broken line with an arrow on the end  Graphics3D[Arrow[{{1, 1, -1}, {2, 2, 0}, {3, 3, -1}, {4, 4, 0}}]]     ","version":null,"tagName":"h2"},{"title":"Dynamic updates​","type":1,"pageTitle":"Arrow","url":"/frontend/Reference/Graphics3D/Arrow#dynamic-updates","content":" It does support updates. Use Offload  warning Changing the length of an array of points is not supported! ","version":null,"tagName":"h2"},{"title":"Image","type":0,"sectionRef":"#","url":"/frontend/Reference/Graphics/Image","content":"","keywords":"","version":null},{"title":"Examples​","type":1,"pageTitle":"Image","url":"/frontend/Reference/Graphics/Image#examples","content":" ","version":null,"tagName":"h2"},{"title":"Direct​","type":1,"pageTitle":"Image","url":"/frontend/Reference/Graphics/Image#direct","content":" Show multiple iterations of a cellular automaton as a binary image  Image[CellularAutomaton[30, {{1}, 0}, 40]]     A random noise  Image[Table[RandomInteger[{0,1}], {i, 200}, {j, 350}]]   adding a color  Image[Table[RandomInteger[{0,255}, 3], {i, 200}, {j, 350}]]     ","version":null,"tagName":"h3"},{"title":"Indirect​","type":1,"pageTitle":"Image","url":"/frontend/Reference/Graphics/Image#indirect","content":" One can also use Rasterize function to show any expressions as an image  x + y // Rasterize     ","version":null,"tagName":"h3"},{"title":"Dynamics​","type":1,"pageTitle":"Image","url":"/frontend/Reference/Graphics/Image#dynamics","content":" It does support dynamic variables. For example  Puffer = {{1, 4}, {2, 5}, {3, 1}, {3, 5}, {4, 2}, {4, 3}, {4, 4}, {4, 5}, {8, 1}, {9, 2}, {9, 3}, {10, 3}, {11, 3}, {12, 2}, {15, 1}, {15, 4}, {16, 5}, {17, 1}, {17, 5}, {18, 2}, {18, 3}, {18, 4}, {18, 5}}; board = CellularAutomaton[&quot;GameOfLife&quot;, {SparseArray[Puffer -&gt; 1], 0}, {{500}}] // First; Image[board // Offload]   and now we can run the simulation with a desired speed  task = SetInterval[board = CellularAutomaton[&quot;GameOfLife&quot;, board, {{1}}] // First, 50 ]; SetTimeout[TaskRemove[task], 5000];  ","version":null,"tagName":"h2"},{"title":"Cuboid","type":0,"sectionRef":"#","url":"/frontend/Reference/Graphics3D/Cuboid","content":"","keywords":"","version":null},{"title":"Dynamics​","type":1,"pageTitle":"Cuboid","url":"/frontend/Reference/Graphics3D/Cuboid#dynamics","content":" Fully supports.  An example using gizmo-snippet   ","version":null,"tagName":"h2"},{"title":"Graphics3D","type":0,"sectionRef":"#","url":"/frontend/Reference/Graphics3D/","content":"","keywords":"","version":null},{"title":"Options​","type":1,"pageTitle":"Graphics3D","url":"/frontend/Reference/Graphics3D/#options","content":" ","version":null,"tagName":"h2"},{"title":"ImageSize​","type":1,"pageTitle":"Graphics3D","url":"/frontend/Reference/Graphics3D/#imagesize","content":" Accepts _Integer or {width_Integer, height_Interger}  ","version":null,"tagName":"h3"},{"title":"\"Lighting\"​","type":1,"pageTitle":"Graphics3D","url":"/frontend/Reference/Graphics3D/#lighting","content":" Default is True. It sets the default ambient lighting  ","version":null,"tagName":"h3"},{"title":"ViewProjection​","type":1,"pageTitle":"Graphics3D","url":"/frontend/Reference/Graphics3D/#viewprojection","content":" Sets the default camera for the scene. Default value is &quot;Orthographic&quot;  &quot;Orthographic&quot;&quot;Perspective&quot;  ","version":null,"tagName":"h3"},{"title":"\"TransitionType\"​","type":1,"pageTitle":"Graphics3D","url":"/frontend/Reference/Graphics3D/#transitiontype","content":" Applies interpolation to time-dependent variables used in the scene like moving boxes, changing geometry. By the default it is None, a possible values is &quot;Linear&quot;  warning The support of linear interpolation is limited and probably will be removed in the future  ","version":null,"tagName":"h3"},{"title":"Boxed​","type":1,"pageTitle":"Graphics3D","url":"/frontend/Reference/Graphics3D/#boxed","content":" Draws a wireframe box around the objects in the scene. Default is False.  ","version":null,"tagName":"h3"},{"title":"BoxRatios​","type":1,"pageTitle":"Graphics3D","url":"/frontend/Reference/Graphics3D/#boxratios","content":" Sets the 3D aspect ratio of the whole scene. By the default Graphics3D does not rescale the scene. It accepts {sx_Real, sy_Real, sz_Real}, where sx are real positive numbers.  ","version":null,"tagName":"h3"},{"title":"\"Lightmap\"​","type":1,"pageTitle":"Graphics3D","url":"/frontend/Reference/Graphics3D/#lightmap","content":" Sets an URL to an HDR light-map. Currently only remote sources are supported.  ","version":null,"tagName":"h3"},{"title":"\"RTX\"​","type":1,"pageTitle":"Graphics3D","url":"/frontend/Reference/Graphics3D/#rtx","content":" Realtime path-tracing mode. Turned off by the default, i.e. False. It provides more photorealistic images and global illumination.  warning RTX feature requires a corresponding hardware to handle such heavy computations  ","version":null,"tagName":"h3"},{"title":"Dynamics​","type":1,"pageTitle":"Graphics3D","url":"/frontend/Reference/Graphics3D/#dynamics","content":" See primitives Sphere, Polygon and etc for it   ","version":null,"tagName":"h2"},{"title":"Emissive","type":0,"sectionRef":"#","url":"/frontend/Reference/Graphics3D/Emissive","content":"Emissive WLJS Execution environment wljs-graphics3d-threejs Package JerryI`Notebook`Graphics3DUtils` Context specifies weather the material emits light Emissive[color_RGBColor, intensity_:10] example Graphics3D[{ {Emissive[Red], Sphere[{0,0,2}]}, {White, Sphere[]} }] tip The best looking results can be achieved in a Path-tracing mode of Graphics3D. Emissive materials cannot cast light to other objects in a normal rasterization mode, use artificial light sources such as SpotLight and PointLight...","keywords":"","version":null},{"title":"GraphicsGroup","type":0,"sectionRef":"#","url":"/frontend/Reference/Graphics3D/GraphicsGroup","content":"GraphicsGroup makes a group for graphics primitives GraphicsGroup[p_] by creating a separate mesh","keywords":"","version":null},{"title":"Polygon","type":0,"sectionRef":"#","url":"/frontend/Reference/Graphics/Polygon","content":"","keywords":"","version":null},{"title":"Example​","type":1,"pageTitle":"Polygon","url":"/frontend/Reference/Graphics/Polygon#example","content":" pol = Polygon[{{1, 0}, {0, Sqrt[3]}, {-1, 0}}]; Graphics[pol]     h[x_, y_] := Polygon[Table[{Cos[2 Pi k/6] + x, Sin[2 Pi k/6] + y}, {k, 6}]]; Graphics[{EdgeForm[Blue], LightBlue, Table[h[3 i + 3 ((-1)^j + 1)/4, Sqrt[3]/2 j], {i, 5}, {j, 10}]}]     Digital petals  With[{d = 2 Pi/12}, Graphics[ Table[{EdgeForm[Black], Hue[(-11 + q + 10 r)/72., 1, 0.5], Polygon[{(8 - r) {Cos[d (q - 1)], Sin[d (q - 1)]}, (8 - r) {Cos[d (q + 1)], Sin[d (q + 1)]}, (10 - r) {Cos[d q], Sin[d q]}}]}, {r, 6}, {q, 12}]]]     ","version":null,"tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"Polygon","url":"/frontend/Reference/Graphics/Polygon#parameters","content":" ","version":null,"tagName":"h2"},{"title":"RGBColor​","type":1,"pageTitle":"Polygon","url":"/frontend/Reference/Graphics/Polygon#rgbcolor","content":" filling color  ","version":null,"tagName":"h3"},{"title":"Opacity​","type":1,"pageTitle":"Polygon","url":"/frontend/Reference/Graphics/Polygon#opacity","content":" global opacity of an object  ","version":null,"tagName":"h3"},{"title":"EdgeForm​","type":1,"pageTitle":"Polygon","url":"/frontend/Reference/Graphics/Polygon#edgeform","content":" stroke color  ","version":null,"tagName":"h3"},{"title":"Indexed geometry​","type":1,"pageTitle":"Polygon","url":"/frontend/Reference/Graphics/Polygon#indexed-geometry","content":" Using GraphicsComplex one can specify only faces with indexes for each polygon, while vertex data is stored in a separate array.  For example  GraphicsComplex[{{0,0}, {1,0}, {1,1}}, Polygon[{{1,2,3}}]] // Graphics   It is common use case, when vertices are colored and there are many polygons on the screen.  ","version":null,"tagName":"h2"},{"title":"Dynamics​","type":1,"pageTitle":"Polygon","url":"/frontend/Reference/Graphics/Polygon#dynamics","content":" It fully support dynamics when a Polygon represents 1 polygon (a set of animated polygon per 1 expression is not supported). ","version":null,"tagName":"h2"},{"title":"Hue","type":0,"sectionRef":"#","url":"/frontend/Reference/Graphics3D/Hue","content":"Hue same as Hue, but for Graphics3D primitives","keywords":"","version":null},{"title":"MeshMaterial","type":0,"sectionRef":"#","url":"/frontend/Reference/Graphics3D/MeshMaterial","content":"","keywords":"","version":null},{"title":"Materials​","type":1,"pageTitle":"MeshMaterial","url":"/frontend/Reference/Graphics3D/MeshMaterial#materials","content":" ","version":null,"tagName":"h2"},{"title":"MeshPhysicalMaterial​","type":1,"pageTitle":"MeshMaterial","url":"/frontend/Reference/Graphics3D/MeshMaterial#meshphysicalmaterial","content":" ","version":null,"tagName":"h3"},{"title":"MeshToonMaterial​","type":1,"pageTitle":"MeshMaterial","url":"/frontend/Reference/Graphics3D/MeshMaterial#meshtoonmaterial","content":"","version":null,"tagName":"h3"},{"title":"Line","type":0,"sectionRef":"#","url":"/frontend/Reference/Graphics3D/Line","content":"","keywords":"","version":null},{"title":"Parameters​","type":1,"pageTitle":"Line","url":"/frontend/Reference/Graphics3D/Line#parameters","content":" ","version":null,"tagName":"h2"},{"title":"RGBColor​","type":1,"pageTitle":"Line","url":"/frontend/Reference/Graphics3D/Line#rgbcolor","content":" ","version":null,"tagName":"h3"},{"title":"AbsoluteThickness​","type":1,"pageTitle":"Line","url":"/frontend/Reference/Graphics3D/Line#absolutethickness","content":" ","version":null,"tagName":"h3"},{"title":"Indexed geometry​","type":1,"pageTitle":"Line","url":"/frontend/Reference/Graphics3D/Line#indexed-geometry","content":" The most efficient way of using Line for many vertices is to wrap it into GraphicsComplex. It provides the list of vertices as a separate list, while Line contains only the indexes for a line  v = PolyhedronData[&quot;Dodecahedron&quot;, &quot;Vertices&quot;] // N; i = PolyhedronData[&quot;Dodecahedron&quot;, &quot;FaceIndices&quot;]; GraphicsComplex[v, {Black, Line[i]}] // Graphics3D   ","version":null,"tagName":"h2"},{"title":"Dynamic updates​","type":1,"pageTitle":"Line","url":"/frontend/Reference/Graphics3D/Line#dynamic-updates","content":" It does support updates. Use Offload  tip Updates of geometry using GraphicsComplex is more efficient for many vertices  warning Changing the length of an array of points is not supported! ","version":null,"tagName":"h2"},{"title":"Cylinder","type":0,"sectionRef":"#","url":"/frontend/Reference/Graphics3D/Cylinder","content":"","keywords":"","version":null},{"title":"Parameters​","type":1,"pageTitle":"Cylinder","url":"/frontend/Reference/Graphics3D/Cylinder#parameters","content":" ","version":null,"tagName":"h2"},{"title":"RGBColor​","type":1,"pageTitle":"Cylinder","url":"/frontend/Reference/Graphics3D/Cylinder#rgbcolor","content":" ","version":null,"tagName":"h3"},{"title":"Methods​","type":1,"pageTitle":"Cylinder","url":"/frontend/Reference/Graphics3D/Cylinder#methods","content":" Volume and centroid  ","version":null,"tagName":"h2"},{"title":"Volume​","type":1,"pageTitle":"Cylinder","url":"/frontend/Reference/Graphics3D/Cylinder#volume","content":" accepts symbolic values as well  Volume[Cylinder[{{Subscript[x, 1], Subscript[y, 1], Subscript[z, 1]}, {Subscript[x, 2], Subscript[y, 2], Subscript[z, 2]}}, r]]   ","version":null,"tagName":"h3"},{"title":"RegionCentroid​","type":1,"pageTitle":"Cylinder","url":"/frontend/Reference/Graphics3D/Cylinder#regioncentroid","content":" RegionCentroid[ Cylinder[{{Subscript[x, 1], Subscript[y, 1], Subscript[z, 1]}, {Subscript[x, 2], Subscript[y, 2], Subscript[z, 2]}}, r]]   ","version":null,"tagName":"h3"},{"title":"Dynamic updates​","type":1,"pageTitle":"Cylinder","url":"/frontend/Reference/Graphics3D/Cylinder#dynamic-updates","content":" It does support dynamics for coordinates. Radius changes are not implemented! ","version":null,"tagName":"h2"},{"title":"HemisphereLight","type":0,"sectionRef":"#","url":"/frontend/Reference/Graphics3D/HemisphereLight","content":"HemisphereLight WLJS Execution environment wljs-graphics3d-threejs Package JerryI`Notebook`Graphics3DUtils` Context HemisphereLight[skyColor_RGBColor, groundColor_RGBColor, intensity_] defines a fake hemisphere ambient light","keywords":"","version":null},{"title":"MeshPhysicalMaterial","type":0,"sectionRef":"#","url":"/frontend/Reference/Graphics3D/MeshPhysicalMaterial","content":"","keywords":"","version":null},{"title":"Roughness​","type":1,"pageTitle":"MeshPhysicalMaterial","url":"/frontend/Reference/Graphics3D/MeshPhysicalMaterial#roughness","content":" ","version":null,"tagName":"h3"},{"title":"Emissive​","type":1,"pageTitle":"MeshPhysicalMaterial","url":"/frontend/Reference/Graphics3D/MeshPhysicalMaterial#emissive","content":" ","version":null,"tagName":"h3"},{"title":"Metalness​","type":1,"pageTitle":"MeshPhysicalMaterial","url":"/frontend/Reference/Graphics3D/MeshPhysicalMaterial#metalness","content":" ","version":null,"tagName":"h3"},{"title":"Example​","type":1,"pageTitle":"MeshPhysicalMaterial","url":"/frontend/Reference/Graphics3D/MeshPhysicalMaterial#example","content":" Graphics3D[{MeshMaterial[MeshPhysicalMaterial[]], Roughness[0], Sphere[], PointLight[Red, {1.5075, 4.1557, 2.6129}, 50], PointLight[Cyan, {-2.268, -2.144, 3.1635}, 50]}, &quot;Lighting&quot;-&gt;None]    ","version":null,"tagName":"h2"},{"title":"MeshToonMaterial","type":0,"sectionRef":"#","url":"/frontend/Reference/Graphics3D/MeshToonMaterial","content":"MeshToonMaterial WLJS Execution environment wljs-graphics3d-threejs Package JerryI`Notebook`Graphics3DUtils` Context MeshToonMaterial[] uses lighting model for MeshMaterial to emulate cell-shading effect Graphics3D[{MeshMaterial[MeshToonMaterial[]], Roughness[0], Sphere[], PointLight[Red, {1.5075, 4.1557, 2.6129}, 50], PointLight[Cyan, {-2.268, -2.144, 3.1635}, 50]}, &quot;Lighting&quot;-&gt;None] tip An effect comes better when used together with SpotLight and minimal ambient lighting","keywords":"","version":null},{"title":"Opacity","type":0,"sectionRef":"#","url":"/frontend/Reference/Graphics3D/Opacity","content":"Opacity same as Opacity, but for Graphics3D","keywords":"","version":null},{"title":"PointLight","type":0,"sectionRef":"#","url":"/frontend/Reference/Graphics3D/PointLight","content":"","keywords":"","version":null},{"title":"Dynamics​","type":1,"pageTitle":"PointLight","url":"/frontend/Reference/Graphics3D/PointLight#dynamics","content":" Only position field supports dynamic updates. Use gizmo snippet to manipulate the light source position or Offload keyword. ","version":null,"tagName":"h2"},{"title":"Metalness","type":0,"sectionRef":"#","url":"/frontend/Reference/Graphics3D/Metalness","content":"Metalness WLJS Execution environment JerryI`Notebook`Graphics3DUtils` Context wljs-graphics3d-threejs Package specifies metallic property of a graphics primitive (see MeshPhysicalMaterial) Metalness[i_Real] where i can be between 0 and 1. In real world it either 1 or 0. An effect is more visible, when there is an HDR map is used non-metallic Graphics3D[{Metalness[0], Sphere[]}, &quot;Lighting&quot;-&gt;None, &quot;Lightmap&quot;-&gt;&quot;https://raw.githubusercontent.com/JerryI/Mathematica-ThreeJS-graphics-engine/master/assets/PureSky.hdr&quot;] metallic Graphics3D[{Metalness[1], Sphere[]}, &quot;Lighting&quot;-&gt;None, &quot;Lightmap&quot;-&gt;&quot;https://raw.githubusercontent.com/JerryI/Mathematica-ThreeJS-graphics-engine/master/assets/PureSky.hdr&quot;] metallic and polished Graphics3D[{Metalness[1], Roughness[0], Sphere[]}, &quot;Lighting&quot;-&gt;None, &quot;Lightmap&quot;-&gt;&quot;https://raw.githubusercontent.com/JerryI/Mathematica-ThreeJS-graphics-engine/master/assets/PureSky.hdr&quot;] ","keywords":"","version":null},{"title":"Roughness","type":0,"sectionRef":"#","url":"/frontend/Reference/Graphics3D/Roughness","content":"","keywords":"","version":null},{"title":"Examples​","type":1,"pageTitle":"Roughness","url":"/frontend/Reference/Graphics3D/Roughness#examples","content":" rough material  Graphics3D[{White, Roughness[1], Sphere[], PointLight[Red, {-1,-3,3}]}]     polished  Graphics3D[{White, Roughness[0], Sphere[], PointLight[Red, {-1,-3,3}]}]    ","version":null,"tagName":"h2"},{"title":"Graphics","type":0,"sectionRef":"#","url":"/frontend/Reference/Graphics/","content":"","keywords":"","version":null},{"title":"Graphics objects​","type":1,"pageTitle":"Graphics","url":"/frontend/Reference/Graphics/#graphics-objects","content":" Please see the corresponding section in Reference section for expression to be used with Graphics.  Mostly all primitives are generated by a high-order functions like Plot, ListLinePlot, ListVectorPlot, BubbleChart and etc    ","version":null,"tagName":"h2"},{"title":"Options​","type":1,"pageTitle":"Graphics","url":"/frontend/Reference/Graphics/#options","content":" ","version":null,"tagName":"h2"},{"title":"PlotRange​","type":1,"pageTitle":"Graphics","url":"/frontend/Reference/Graphics/#plotrange","content":" manually specifies, where the borders of the visible area (viewport) are  PlotRange-&gt;{{-1,1}, {-1,1}}   note If PlotRange is missing, WLJS Graphics will try to guess the dimensions in order to fit all objects to the screen  ","version":null,"tagName":"h3"},{"title":"ImageSize​","type":1,"pageTitle":"Graphics","url":"/frontend/Reference/Graphics/#imagesize","content":" specifies the actual size in pixels of a canvas  ImageSize-&gt;300 or ImageSize-&gt;{300,200}   ","version":null,"tagName":"h3"},{"title":"ImagePadding​","type":1,"pageTitle":"Graphics","url":"/frontend/Reference/Graphics/#imagepadding","content":" removes or adds the spacing between the plotted range and the canvas border  remove any padding ImagePadding-&gt;None     add to all sides ImagePadding-&gt;10     ","version":null,"tagName":"h3"},{"title":"Axes​","type":1,"pageTitle":"Graphics","url":"/frontend/Reference/Graphics/#axes","content":" Show or hide axes  Axes-&gt;True   Example​  Graphics[{EdgeForm[Black], Green, Rectangle[{0, -1}, {2, 1}], Red, Disk[], Blue, Circle[{2, 0}], Yellow, Polygon[{{2, 0}, {4, 1}, {4, -1}}], Purple, Arrow[{{4, 3/2}, {0, 3/2}, {0, 0}}], Black, SVGAttribute[Line[{{-1, 0}, {4, 0}}], &quot;stroke-dasharray&quot;-&gt;&quot;3&quot;]}, Axes-&gt;True ]     ","version":null,"tagName":"h3"},{"title":"AxesLabel​","type":1,"pageTitle":"Graphics","url":"/frontend/Reference/Graphics/#axeslabel","content":" Place labels on your axes  AxesLabel -&gt; {&quot;xxx&quot;, &quot;yyy&quot;}   note Activate Axes option first  for example    Labels accepts only strings or numbers unlike Mathematica, where you can put everything.  Since it is translated into Text, one can use sort of TeX math input  Graphics[Circle[], Axes-&gt;True, AxesLabel -&gt; {&quot;x-axis (cm^{-1})&quot;, &quot;y-axis \\\\alpha&quot;}]     It also supports Offset attribute  Graphics[Circle[], Axes-&gt;True, AxesLabel -&gt; {Offset[&quot;x-axis (cm^{-1})&quot;, {0,0.5}], &quot;y-axis \\\\alpha&quot;}]     ","version":null,"tagName":"h3"},{"title":"Ticks​","type":1,"pageTitle":"Graphics","url":"/frontend/Reference/Graphics/#ticks","content":" Customize ticks by providing an array of numbers for both axes  Graphics[Circle[], Axes-&gt;True, Ticks-&gt;{{0, 0.5, 1}, {}}]     Or by providing as pairs {Number, String} one can specify the displayed text  Graphics[Circle[], Axes-&gt;True, Ticks-&gt;{{{0, &quot;Zero&quot;}, {0.5, &quot;Half&quot;}, {1,&quot;One&quot;}}, {}}]     ","version":null,"tagName":"h3"},{"title":"Controls​","type":1,"pageTitle":"Graphics","url":"/frontend/Reference/Graphics/#controls","content":" The features allows to pan and zoom your plots, that was never possible in Mathematica  Controls-&gt;True     Try to use your mouse here  note from the latest update, this is True by the default  ","version":null,"tagName":"h3"},{"title":"Frame​","type":1,"pageTitle":"Graphics","url":"/frontend/Reference/Graphics/#frame","content":" Turns plot into the journals-like styled graph. In general it has much more options to customize the look  Graphics[Circle[], Axes-&gt;True, Frame-&gt;True]     FrameTicks​  The same as Ticks, but for this regime.  FrameLabels​  The same as AxesLabel  FrameLabel-&gt;{{&quot;yy&quot;, None}, {&quot;xx&quot;, None}}     FrameStyle​  Affects the style of FrameLabels. Use Directive for changing the style  FrameStyle-&gt;Directive[FontSize-&gt;16]     FrameTicksStyle​  Affects the style of FrameTicks  FrameTicksStyle-&gt;Directive[FontSize-&gt;16]     TickLabels​  To remove unnecessary ticks, use  TickLabels-&gt;{{True, False}, {True, False}}     ","version":null,"tagName":"h3"},{"title":"Epilog​","type":1,"pageTitle":"Graphics","url":"/frontend/Reference/Graphics/#epilog","content":" Puts any graphics object on top  Epilog-&gt;{Red, Line[{{-1,-1}, {1,1}}]}     It opens up many possibilities, since it provides low-level access to the Graphics canvas.  Example​  One can use it on a high-level function like Plot to add low-level primitives  Plot[Sin[x], {x,0,Pi}, Epilog-&gt;{Red, Line[{{-1,-1}, {1,1}}]}]     or together with MetaMarker  ","version":null,"tagName":"h3"},{"title":"Prolog​","type":1,"pageTitle":"Graphics","url":"/frontend/Reference/Graphics/#prolog","content":" The same as Epilog, but acts before plotting the data.  ","version":null,"tagName":"h3"},{"title":"TransitionType​","type":1,"pageTitle":"Graphics","url":"/frontend/Reference/Graphics/#transitiontype","content":" See Dynamics. The possible values  info It can also be applied locally, see TransitionType  &quot;Linear&quot;​  THE DEFAULT ONE  For example  cell 1 pt = {-1,0}; Graphics[{PointSize[0.3], Point[pt // Offload]}, ImageSize-&gt;350, PlotRange-&gt;{{-1,1}, {-1,1}}, &quot;TransitionType&quot;-&gt;&quot;Linear&quot;]   cell 2 pt = RandomReal[{-1,1}, 2];     &quot;CubicInOut&quot;​  This one is used by the default  cell 1 pt = {-1,0}; Graphics[{PointSize[0.3], Point[pt // Offload]}, ImageSize-&gt;350, PlotRange-&gt;{{-1,1}, {-1,1}}, &quot;TransitionType&quot;-&gt;&quot;CubicInOut&quot;]     ","version":null,"tagName":"h3"},{"title":"None​","type":1,"pageTitle":"Graphics","url":"/frontend/Reference/Graphics/#none","content":" No transition. Works great for fast animations  ","version":null,"tagName":"h3"},{"title":"TransitionDuration​","type":1,"pageTitle":"Graphics","url":"/frontend/Reference/Graphics/#transitionduration","content":" Sets the duration of any transitions of graphics objects on canvas in milliseconds. The default value is 300.  info It can also be applied locally, see TransitionDuration  ","version":null,"tagName":"h3"},{"title":"Combining two graphics plots​","type":1,"pageTitle":"Graphics","url":"/frontend/Reference/Graphics/#combining-two-graphics-plots","content":" One can put Graphics into another Graphics canvas using [[frontend/Reference/Graphics/Inset]]  ","version":null,"tagName":"h2"},{"title":"Dynamics​","type":1,"pageTitle":"Graphics","url":"/frontend/Reference/Graphics/#dynamics","content":" The time-dependent symbols (Dynamics) are supported on the level of graphics primitives such as Line, Point, Rectangle, Text and etc... Not all primitives do support dynamic updates, please, check individually.  The full reevaluation of Graphics does not happen, that allows to gain much more performance. However, since the dynamic binding is established between individual primitives and symbols, one can make nested constructions like this one  radius = 1.; angle = 0.; tpos = 0. group = { LightBlue, Disk[{0,0}, radius // Offload], LightBlue, AbsoluteThickness[25], Line[{{-1,1}, {1,-1}}], Red, Directive[FontSize-&gt;24], Text[&quot;Hello World&quot;, {Offload[-0.23 + tpos],0}] }; Graphics[Rotate[group, angle // Offload], TransitionType-&gt;&quot;Linear&quot;, TransitionDuration-&gt;100]   Here  an update of angle will not cause reevaluation of groupand update of radius will only update the radius of Diskand update of tpos will reevaluate an expression -0.23 + tpos and change the text position  Let us animate this example  evaluate in a separate cell Do[ radius = 1+0.5 Sin[x]; tpos = 0.5 Cos[4x]; angle = x; Pause[0.1]; , {x, 0. , 2Pi, 0.1}];   The result will look like   ","version":null,"tagName":"h2"},{"title":"RGBColor","type":0,"sectionRef":"#","url":"/frontend/Reference/Graphics3D/RGBColor","content":"RGBColor same as RGBColor but for Graphics3D","keywords":"","version":null},{"title":"Polygon","type":0,"sectionRef":"#","url":"/frontend/Reference/Graphics3D/Polygon","content":"","keywords":"","version":null},{"title":"Types​","type":1,"pageTitle":"Polygon","url":"/frontend/Reference/Graphics3D/Polygon#types","content":" ","version":null,"tagName":"h2"},{"title":"Triangle​","type":1,"pageTitle":"Polygon","url":"/frontend/Reference/Graphics3D/Polygon#triangle","content":" The most efficient one. It consists of 3 vertices  pol = Polygon[{{1, 0, 0}, {1, 1, 1}, {0, 0, 1}}]; pol // Graphics3D     ","version":null,"tagName":"h3"},{"title":"Quad​","type":1,"pageTitle":"Polygon","url":"/frontend/Reference/Graphics3D/Polygon#quad","content":" 4 vertices. It will be converted to the set of triangles on output  ","version":null,"tagName":"h3"},{"title":"Pentagon​","type":1,"pageTitle":"Polygon","url":"/frontend/Reference/Graphics3D/Polygon#pentagon","content":" 5 vertices. It will be converted to the set of triangles on output  ","version":null,"tagName":"h3"},{"title":"Parameters​","type":1,"pageTitle":"Polygon","url":"/frontend/Reference/Graphics3D/Polygon#parameters","content":" ","version":null,"tagName":"h2"},{"title":"RGBColor​","type":1,"pageTitle":"Polygon","url":"/frontend/Reference/Graphics3D/Polygon#rgbcolor","content":" ","version":null,"tagName":"h3"},{"title":"Opacity​","type":1,"pageTitle":"Polygon","url":"/frontend/Reference/Graphics3D/Polygon#opacity","content":" ","version":null,"tagName":"h3"},{"title":"Faces​","type":1,"pageTitle":"Polygon","url":"/frontend/Reference/Graphics3D/Polygon#faces","content":" The most efficient way of using Polygon for constructing complex objects is to wrap it into GraphicsComplex. It provides the list of faces and colors of each vertex as separate lists, while Polygon contains only the indexes, which forms each polygon  v = PolyhedronData[&quot;Dodecahedron&quot;, &quot;Vertices&quot;] // N; i = PolyhedronData[&quot;Dodecahedron&quot;, &quot;FaceIndices&quot;]; GraphicsComplex[v, Polygon[i]] // Graphics3D     ","version":null,"tagName":"h2"},{"title":"Dynamic updates​","type":1,"pageTitle":"Polygon","url":"/frontend/Reference/Graphics3D/Polygon#dynamic-updates","content":" It is possible only using GraphicsComplex and keeping faces unchanged. ","version":null,"tagName":"h2"},{"title":"Shadows","type":0,"sectionRef":"#","url":"/frontend/Reference/Graphics3D/Shadows","content":"Shadows WLJS Execution environment JerryI`Notebook`Graphics3DUtils` Context wljs-graphics3d-threejs Package Shadows[True | False] a scoped parameter like RGBColor or Opacity, that determines if a light source can cast shadows or a primitive can receive shadows as well. See Graphics3D[{Shadows[shadow], ExampleData[{&quot;Geometry3D&quot;,&quot;StanfordBunny&quot;}][[1]], SpotLight[White, {{0., -0.4473, 0.4291}, {0,0,0}}, Pi/4, 1], Polygon[ 0.01{{-20,20,-1}, {20,20,-1}, {20,-20,-1}, {-20,-20,-1}}]}, &quot;Lighting&quot;-&gt;None] /. {{shadow -&gt; True}, {shadow -&gt; False}} ","keywords":"","version":null},{"title":"AnimationFrameListener","type":0,"sectionRef":"#","url":"/frontend/Reference/Graphics3D/AnimationFrameListener","content":"AnimationFrameListener the same as for AnimationFrameListener, but in the context of 2D graphics","keywords":"","version":null},{"title":"Sphere","type":0,"sectionRef":"#","url":"/frontend/Reference/Graphics3D/Sphere","content":"","keywords":"","version":null},{"title":"Parameters​","type":1,"pageTitle":"Sphere","url":"/frontend/Reference/Graphics3D/Sphere#parameters","content":" ","version":null,"tagName":"h2"},{"title":"RGBColor​","type":1,"pageTitle":"Sphere","url":"/frontend/Reference/Graphics3D/Sphere#rgbcolor","content":" ","version":null,"tagName":"h3"},{"title":"Opacity​","type":1,"pageTitle":"Sphere","url":"/frontend/Reference/Graphics3D/Sphere#opacity","content":" ","version":null,"tagName":"h3"},{"title":"Roughness​","type":1,"pageTitle":"Sphere","url":"/frontend/Reference/Graphics3D/Sphere#roughness","content":" ","version":null,"tagName":"h3"},{"title":"Metalness​","type":1,"pageTitle":"Sphere","url":"/frontend/Reference/Graphics3D/Sphere#metalness","content":" ","version":null,"tagName":"h3"},{"title":"Emissive​","type":1,"pageTitle":"Sphere","url":"/frontend/Reference/Graphics3D/Sphere#emissive","content":" ","version":null,"tagName":"h3"},{"title":"Methods​","type":1,"pageTitle":"Sphere","url":"/frontend/Reference/Graphics3D/Sphere#methods","content":" ","version":null,"tagName":"h2"},{"title":"EventHandler​","type":1,"pageTitle":"Sphere","url":"/frontend/Reference/Graphics3D/Sphere#eventhandler","content":" One can listen to a several events produced by this primitive using EventHandler  EventHandler[t_Sphere, {event_ -&gt; handler_, ...}]   where event can be  &quot;transform&quot; makes primitive draggable and sends coordinates as association  ","version":null,"tagName":"h3"},{"title":"Dynamics​","type":1,"pageTitle":"Sphere","url":"/frontend/Reference/Graphics3D/Sphere#dynamics","content":" It supports dynamics even for multiple spheres  cell 1 test = RandomReal[{-10,10}, {10, 3}]; Graphics3D[{Black, Sphere[Offload[test], 1]}]   and then try to update them  test = RandomReal[{-10,10}, {10, 3}];   the result will be following   ","version":null,"tagName":"h2"},{"title":"GraphicsComplex","type":0,"sectionRef":"#","url":"/frontend/Reference/Graphics3D/GraphicsComplex","content":"","keywords":"","version":null},{"title":"Supported primitives​","type":1,"pageTitle":"GraphicsComplex","url":"/frontend/Reference/Graphics3D/GraphicsComplex#supported-primitives","content":" ","version":null,"tagName":"h2"},{"title":"Line​","type":1,"pageTitle":"GraphicsComplex","url":"/frontend/Reference/Graphics3D/GraphicsComplex#line","content":" No restrictions  v = PolyhedronData[&quot;Dodecahedron&quot;, &quot;Vertices&quot;] // N; i = PolyhedronData[&quot;Dodecahedron&quot;, &quot;FaceIndices&quot;];   GraphicsComplex[v, {Black, Line[i]}] // Graphics3D     ","version":null,"tagName":"h3"},{"title":"Polygon​","type":1,"pageTitle":"GraphicsComplex","url":"/frontend/Reference/Graphics3D/GraphicsComplex#polygon","content":" Triangles works faster than quads or pentagons  GraphicsComplex[v, Polygon[i]] // Graphics3D     ","version":null,"tagName":"h3"},{"title":"Options​","type":1,"pageTitle":"GraphicsComplex","url":"/frontend/Reference/Graphics3D/GraphicsComplex#options","content":" ","version":null,"tagName":"h2"},{"title":"\"VertexColors\"​","type":1,"pageTitle":"GraphicsComplex","url":"/frontend/Reference/Graphics3D/GraphicsComplex#vertexcolors","content":" Defines sets of colors used for shading vertices  info &quot;VertexColors&quot; is a plain list which must have the following form &quot;VertexColors&quot; -&gt;{{r1,g1,b1}, {r2,g2,b2}, ...}   ","version":null,"tagName":"h3"},{"title":"Dynamic updates​","type":1,"pageTitle":"GraphicsComplex","url":"/frontend/Reference/Graphics3D/GraphicsComplex#dynamic-updates","content":" It does support dynamic updates for vertices data and colors. Use Offload wrapper.  warning Number of points in a mesh cannot be changed  cell 1 (* generate mesh *) proc = HardcorePointProcess[50, 0.5, 2]; reg = Rectangle[{-10, -10}, {10, 10}]; samples = RandomPointConfiguration[proc, reg][&quot;Points&quot;]; (* triangulate *) Needs[&quot;ComputationalGeometry`&quot;]; triangles2[points_] := Module[{tr, triples}, tr = DelaunayTriangulation[points]; triples = Flatten[Function[{v, list}, Switch[Length[list], (* account for nodes with connectivity 2 or less *) 1, {}, 2, {Flatten[{v, list}]}, _, {v, ##} &amp; @@@ Partition[list, 2, 1, {1, 1}] ] ] @@@ tr, 1]; Cases[GatherBy[triples, Sort], a_ /; Length[a] == 3 :&gt; a[[1]]]] triangles = triangles2[samples]; (* sample function *) f[p_, {x_,y_,z_}] := z Exp[-(*FB[*)(((*SpB[*)Power[Norm[p - {x,y}](*|*),(*|*)2](*]SpB*))(*,*)/(*,*)(2.))(*]FB*)] (* initial data *) probe = {#[[1]], #[[2]], f[#, {10, 0, 0}]} &amp;/@ samples // Chop; colors = With[{mm = MinMax[probe[[All,3]]]}, (Blend[{{mm[[1]], Blue}, {mm[[2]], Red}}, #[[3]]] )&amp;/@ probe /. {RGBColor -&gt; List} // Chop];   cell 2 Graphics3D[{ GraphicsComplex[probe // Offload, {Polygon[triangles]}, &quot;VertexColors&quot;-&gt;Offload[colors]], EventHandler[Sphere[{0,0,0}, 0.1], {&quot;transform&quot;-&gt;Function[data, With[{pos = data[&quot;position&quot;]}, probe = {#[[1]], #[[2]], f[#, pos]} &amp;/@ samples // Chop; colors = With[{mm = MinMax[probe[[All,3]]]}, (Blend[{{mm[[1]], Blue}, {mm[[2]], Red}}, #[[3]]] )&amp;/@ probe /. {RGBColor -&gt; List} // Chop]; ]]}] }]   The result is interactive 3D plot    Or the variation of it, if we add a point light source  light = {0,0,0}; Graphics3D[{ GraphicsComplex[probe // Offload, {Polygon[triangles]}], PointLight[Red, light // Offload], EventHandler[Sphere[{0,0,0}, 0.1], {&quot;transform&quot;-&gt;Function[data, With[{pos = data[&quot;position&quot;]}, probe = {#[[1]], #[[2]], f[#, pos]} &amp;/@ samples // Chop; light = pos; ]]}] }]    ","version":null,"tagName":"h2"},{"title":"Tetrahedron","type":0,"sectionRef":"#","url":"/frontend/Reference/Graphics3D/Tetrahedron","content":"","keywords":"","version":null},{"title":"Parameters​","type":1,"pageTitle":"Tetrahedron","url":"/frontend/Reference/Graphics3D/Tetrahedron#parameters","content":" ","version":null,"tagName":"h2"},{"title":"RGBColor​","type":1,"pageTitle":"Tetrahedron","url":"/frontend/Reference/Graphics3D/Tetrahedron#rgbcolor","content":" ","version":null,"tagName":"h3"},{"title":"Methods​","type":1,"pageTitle":"Tetrahedron","url":"/frontend/Reference/Graphics3D/Tetrahedron#methods","content":" ","version":null,"tagName":"h2"},{"title":"Volume​","type":1,"pageTitle":"Tetrahedron","url":"/frontend/Reference/Graphics3D/Tetrahedron#volume","content":" ","version":null,"tagName":"h3"},{"title":"RegionCentroid​","type":1,"pageTitle":"Tetrahedron","url":"/frontend/Reference/Graphics3D/Tetrahedron#regioncentroid","content":"","version":null,"tagName":"h3"},{"title":"HTMLView","type":0,"sectionRef":"#","url":"/frontend/Reference/GUI/HTMLView","content":"","keywords":"","version":null},{"title":"Dynamic updates​","type":1,"pageTitle":"HTMLView","url":"/frontend/Reference/GUI/HTMLView#dynamic-updates","content":" It fully supports dynamic updates. Use Offload ","version":null,"tagName":"h2"},{"title":"EditorView","type":0,"sectionRef":"#","url":"/frontend/Reference/GUI/EditorView","content":"","keywords":"","version":null},{"title":"Event generation​","type":1,"pageTitle":"EditorView","url":"/frontend/Reference/GUI/EditorView#event-generation","content":" When &quot;Event&quot; option is provided, it will send a new data in a form of a string.  ","version":null,"tagName":"h2"},{"title":"Options​","type":1,"pageTitle":"EditorView","url":"/frontend/Reference/GUI/EditorView#options","content":" ","version":null,"tagName":"h2"},{"title":"\"Event\"​","type":1,"pageTitle":"EditorView","url":"/frontend/Reference/GUI/EditorView#event","content":" Specifies an uid of an event-object, that will be fired on-change.  ","version":null,"tagName":"h3"},{"title":"\"ReadOnly\"​","type":1,"pageTitle":"EditorView","url":"/frontend/Reference/GUI/EditorView#readonly","content":" Blocks the editing mode. The default value is False  ","version":null,"tagName":"h3"},{"title":"Application​","type":1,"pageTitle":"EditorView","url":"/frontend/Reference/GUI/EditorView#application","content":" If you want to show the dynamic symbols content, use it together with ToString[expr, StandardForm]  EventHandler[InputRange[1,10,1,1], Function[n, series = ToString[Series[Sin[x], {x,0,n}] // Normal, StandardForm]; ]] EventFire[%, 1]; EditorView[series // Offload]   ","version":null,"tagName":"h2"},{"title":"Dev notes​","type":1,"pageTitle":"EditorView","url":"/frontend/Reference/GUI/EditorView#dev-notes","content":" This is used in InterpretationBox implementation to replace a WL expression using a user-provided WL expression in a code editor. ","version":null,"tagName":"h2"},{"title":"InputCheckbox","type":0,"sectionRef":"#","url":"/frontend/Reference/GUI/InputCheckbox","content":"","keywords":"","version":null},{"title":"Event generation​","type":1,"pageTitle":"InputCheckbox","url":"/frontend/Reference/GUI/InputCheckbox#event-generation","content":" Emits True or False based on its state  ","version":null,"tagName":"h2"},{"title":"Options​","type":1,"pageTitle":"InputCheckbox","url":"/frontend/Reference/GUI/InputCheckbox#options","content":" ","version":null,"tagName":"h2"},{"title":"\"Label\"​","type":1,"pageTitle":"InputCheckbox","url":"/frontend/Reference/GUI/InputCheckbox#label","content":" A text label for an element  ","version":null,"tagName":"h3"},{"title":"\"Description\"​","type":1,"pageTitle":"InputCheckbox","url":"/frontend/Reference/GUI/InputCheckbox#description","content":" A description label for an element  ","version":null,"tagName":"h3"},{"title":"\"Topic\"​","type":1,"pageTitle":"InputCheckbox","url":"/frontend/Reference/GUI/InputCheckbox#topic","content":" The default topic/pattern is &quot;Default&quot;. Specifies an event-pattern used on emitting (see more on EventFire patterns topics)  ","version":null,"tagName":"h3"},{"title":"Application​","type":1,"pageTitle":"InputCheckbox","url":"/frontend/Reference/GUI/InputCheckbox#application","content":" A basic GUI element  tg = InputCheckbox[False]; EventHandler[tg, Print]   ","version":null,"tagName":"h2"},{"title":"TODO​","type":1,"pageTitle":"InputCheckbox","url":"/frontend/Reference/GUI/InputCheckbox#todo","content":" Developers notes   Use server.ask() method for restoring the original state ","version":null,"tagName":"h2"},{"title":"InputButton","type":0,"sectionRef":"#","url":"/frontend/Reference/GUI/InputButton","content":"","keywords":"","version":null},{"title":"Event generation​","type":1,"pageTitle":"InputButton","url":"/frontend/Reference/GUI/InputButton#event-generation","content":" On-click emits True to a handler function assigned  ","version":null,"tagName":"h2"},{"title":"Options​","type":1,"pageTitle":"InputButton","url":"/frontend/Reference/GUI/InputButton#options","content":" ","version":null,"tagName":"h2"},{"title":"\"Class\"​","type":1,"pageTitle":"InputButton","url":"/frontend/Reference/GUI/InputButton#class","content":" A text string of CSS classes used for customizing a button  ","version":null,"tagName":"h3"},{"title":"\"Style\"​","type":1,"pageTitle":"InputButton","url":"/frontend/Reference/GUI/InputButton#style","content":" A text string with CSS styles applied to an element  ","version":null,"tagName":"h3"},{"title":"\"Topic\"​","type":1,"pageTitle":"InputButton","url":"/frontend/Reference/GUI/InputButton#topic","content":" The default topic/pattern is &quot;Default&quot;. Specifies an event-pattern used on emitting (see more on EventFire patterns topics)  ","version":null,"tagName":"h3"},{"title":"Application​","type":1,"pageTitle":"InputButton","url":"/frontend/Reference/GUI/InputButton#application","content":" A basic GUI element  button = InputButton[&quot;Click me!&quot;]; EventHandler[button, Print]   or click to make sound  EventHandler[InputButton[], Beep]  ","version":null,"tagName":"h2"},{"title":"InputEditor","type":0,"sectionRef":"#","url":"/frontend/Reference/GUI/InputEditor","content":"","keywords":"","version":null},{"title":"Event generation​","type":1,"pageTitle":"InputEditor","url":"/frontend/Reference/GUI/InputEditor#event-generation","content":" It fires the following patterns/topics  ","version":null,"tagName":"h2"},{"title":"\"Input\"​","type":1,"pageTitle":"InputEditor","url":"/frontend/Reference/GUI/InputEditor#input","content":" Fires every time users changes the content with a content as a payload  ","version":null,"tagName":"h3"},{"title":"\"Evaluate\"​","type":1,"pageTitle":"InputEditor","url":"/frontend/Reference/GUI/InputEditor#evaluate","content":" Fires when a user presses a combination Shift+Enter ","version":null,"tagName":"h3"},{"title":"Tube","type":0,"sectionRef":"#","url":"/frontend/Reference/Graphics3D/Tube","content":"Tube danger Not implemented. Submit to Github issues","keywords":"","version":null},{"title":"InputSelect","type":0,"sectionRef":"#","url":"/frontend/Reference/GUI/InputSelect","content":"","keywords":"","version":null},{"title":"Event generation​","type":1,"pageTitle":"InputSelect","url":"/frontend/Reference/GUI/InputSelect#event-generation","content":" Emits corresponding expr based on user's choice.  ","version":null,"tagName":"h2"},{"title":"Options​","type":1,"pageTitle":"InputSelect","url":"/frontend/Reference/GUI/InputSelect#options","content":" ","version":null,"tagName":"h2"},{"title":"\"Label\"​","type":1,"pageTitle":"InputSelect","url":"/frontend/Reference/GUI/InputSelect#label","content":" Adds a label  ","version":null,"tagName":"h3"},{"title":"\"Topic\"​","type":1,"pageTitle":"InputSelect","url":"/frontend/Reference/GUI/InputSelect#topic","content":" Specifies which topic or pattern of an event is used ","version":null,"tagName":"h3"},{"title":"GeometricTransformation","type":0,"sectionRef":"#","url":"/frontend/Reference/Graphics3D/GeometricTransformation","content":"","keywords":"","version":null},{"title":"Examples​","type":1,"pageTitle":"GeometricTransformation","url":"/frontend/Reference/Graphics3D/GeometricTransformation#examples","content":" Graphics3D[ GeometricTransformation[Sphere[], N@ShearingMatrix[2, {1,1,1}, {1,1,0}]] ]     tip Numerical matrixes are usually faster. Use N to get pure numbers  Or more complicated one  Graphics3D[ GeometricTransformation[Cuboid[{0, 0, 0}, {1.5, 1.5, .2}], Table[{RotationMatrix[a, {0, 0, 1}], {Cos[a], Sin[a], a}}, {a, 0, 4 Pi, .2}]], Boxed -&gt; False]     ","version":null,"tagName":"h2"},{"title":"Dynamics​","type":1,"pageTitle":"GeometricTransformation","url":"/frontend/Reference/Graphics3D/GeometricTransformation#dynamics","content":" It fully supports dynamic updates. See example  cell 1 rot = RotationMatrix[45 Degree, {0, 0, 1}]; stair = GeometricTransformation[Cuboid[{0, 0, 0}, {1.5, 1.5, .2}], Table[{RotationMatrix[a, {0, 0, 1}], {Cos[a], Sin[a], a}}, {a, 0, 4 Pi, .2}]]; Graphics3D[GeometricTransformation[stair, rot // Offload], Boxed -&gt; False]   cell 2 EventHandler[InputRange[0, 180.0 Degree, 1.0 Degree], Function[angle, rot = RotationMatrix[angle,{0, 0, 1}]]]   The result is following   ","version":null,"tagName":"h2"},{"title":"InputGroup","type":0,"sectionRef":"#","url":"/frontend/Reference/GUI/InputGroup","content":"","keywords":"","version":null},{"title":"Options​","type":1,"pageTitle":"InputGroup","url":"/frontend/Reference/GUI/InputGroup#options","content":" ","version":null,"tagName":"h2"},{"title":"\"Label\"​","type":1,"pageTitle":"InputGroup","url":"/frontend/Reference/GUI/InputGroup#label","content":" A text label for an element  ","version":null,"tagName":"h3"},{"title":"\"Description\"​","type":1,"pageTitle":"InputGroup","url":"/frontend/Reference/GUI/InputGroup#description","content":" A description label for an element  ","version":null,"tagName":"h3"},{"title":"Event generation​","type":1,"pageTitle":"InputGroup","url":"/frontend/Reference/GUI/InputGroup#event-generation","content":" Every-time user acts on an inner event-view from a group events, it will fire an event and send the data from all event objects keeping the original structure  ","version":null,"tagName":"h2"},{"title":"Association​","type":1,"pageTitle":"InputGroup","url":"/frontend/Reference/GUI/InputGroup#association","content":" group = InputGroup[&lt;| &quot;left&quot;-&gt;InputRange[0, 10, 1, &quot;Label&quot;-&gt;&quot;Range 1&quot;], &quot;right&quot;-&gt;InputRange[0, 10, 1, &quot;Label&quot;-&gt;&quot;Range 2&quot;] |&gt;] EventHandler[group, Print];   On each update it generates the data for the handler function in a form  &lt;|&quot;left&quot;-&gt;5, &quot;right&quot;-&gt;7|&gt;   ","version":null,"tagName":"h3"},{"title":"Arrays​","type":1,"pageTitle":"InputGroup","url":"/frontend/Reference/GUI/InputGroup#arrays","content":" group = InputGroup[{ InputRange[0, 10, 1, &quot;Label&quot;-&gt;&quot;Range 1&quot;], InputRange[0, 10, 1, &quot;Label&quot;-&gt;&quot;Range 2&quot;], InputText[&quot;Hi&quot;] }] EventHandler[group, Print];   the data provided to a handler function Print will look like  {5, 7, &quot;Hi&quot;}  ","version":null,"tagName":"h3"},{"title":"InputJoystick","type":0,"sectionRef":"#","url":"/frontend/Reference/GUI/InputJoystick","content":"","keywords":"","version":null},{"title":"Event generation​","type":1,"pageTitle":"InputJoystick","url":"/frontend/Reference/GUI/InputJoystick#event-generation","content":" It fires an event with {x_, y_} coordinates of a joystick in a range of [-1,1] once it has been dragged by a user.  ","version":null,"tagName":"h2"},{"title":"Helpers​","type":1,"pageTitle":"InputJoystick","url":"/frontend/Reference/GUI/InputJoystick#helpers","content":" There is helper function to integrate the position, that joystick controls velocity instead of absolute position  InputJoystick`IntegrationHelper[initialValue_:{0,0}, delta_:0.01][callback_Function] _Function   for example  cell 1 pt = {0.,0.}; handler = InputJoystick`IntegrationHelper[][Function[xy, pt = xy ]]; EventHandler[InputJoystick[], handler]   cell 2 Graphics[ {Red, PointSize[0.05], Point[pt // Offload]} , PlotRange-&gt;{{-1,1}, {-1,1}} ]     ","version":null,"tagName":"h3"},{"title":"Options​","type":1,"pageTitle":"InputJoystick","url":"/frontend/Reference/GUI/InputJoystick#options","content":" No options are available ","version":null,"tagName":"h2"},{"title":"InputFile","type":0,"sectionRef":"#","url":"/frontend/Reference/GUI/InputFile","content":"","keywords":"","version":null},{"title":"Options​","type":1,"pageTitle":"InputFile","url":"/frontend/Reference/GUI/InputFile#options","content":" ","version":null,"tagName":"h2"},{"title":"\"Label\"​","type":1,"pageTitle":"InputFile","url":"/frontend/Reference/GUI/InputFile#label","content":" A text label for an element  ","version":null,"tagName":"h3"},{"title":"\"Description\"​","type":1,"pageTitle":"InputFile","url":"/frontend/Reference/GUI/InputFile#description","content":" A description label for an element  ","version":null,"tagName":"h3"},{"title":"Event generation​","type":1,"pageTitle":"InputFile","url":"/frontend/Reference/GUI/InputFile#event-generation","content":" It accepts single or multiple files. The whole pipeline is separated into two steps  Initiation of a transaction. Emits an event with a topic &quot;Transaction&quot;, which has the following structure  &lt;|&quot;Id&quot;-&gt;uid_String, &quot;Length&quot;-&gt;numberOfFiles_Integer|&gt;   Sending files one by one files emitting &quot;File&quot; event that follows the structure  &lt;|&quot;Transaction&quot;-&gt;uid_String, &quot;Name&quot;-&gt;filename_String, &quot;Data&quot;-&gt;base64_String|&gt;   ","version":null,"tagName":"h2"},{"title":"Example​","type":1,"pageTitle":"InputFile","url":"/frontend/Reference/GUI/InputFile#example","content":" A simple file-form to plot the data from the uploaded file  plot = Plotly[&lt;|&quot;type&quot;-&gt;&quot;line&quot;|&gt;] EventHandler[InputFile[], {&quot;File&quot; -&gt; Function[file, Module[{}, imported = Drop[ImportByteArray[file[&quot;Data&quot;]//BaseDecode, &quot;CSV&quot;], 3]; (* try different encoding *) If[!NumberQ[imported[[1,1]]], imported = Drop[ImportByteArray[file[&quot;Data&quot;]//BaseDecode, &quot;TSV&quot;], 3]]; Plotly`addTraces[plot, {&lt;|&quot;x&quot; -&gt; imported[[All,1]], &quot;y&quot; -&gt; imported[[All,2]]|&gt;}]; ] ]}]  ","version":null,"tagName":"h2"},{"title":"InputRange","type":0,"sectionRef":"#","url":"/frontend/Reference/GUI/InputRange","content":"","keywords":"","version":null},{"title":"Event generation​","type":1,"pageTitle":"InputRange","url":"/frontend/Reference/GUI/InputRange#event-generation","content":" Every-time user drags a slider, an event in a form of number will be generated  slider = InputRange[0,1,0.1]; EventHandler[slider, Function[data, Print[StringTemplate[&quot;`` is a number&quot;][data]] ]]; slider   ","version":null,"tagName":"h2"},{"title":"Options​","type":1,"pageTitle":"InputRange","url":"/frontend/Reference/GUI/InputRange#options","content":" ","version":null,"tagName":"h2"},{"title":"\"Label\"​","type":1,"pageTitle":"InputRange","url":"/frontend/Reference/GUI/InputRange#label","content":" Adds a label to a slider  slider = InputRange[0, 1, 0.1, &quot;Label&quot;-&gt;&quot;Slider&quot;]   ","version":null,"tagName":"h3"},{"title":"\"Topic\"​","type":1,"pageTitle":"InputRange","url":"/frontend/Reference/GUI/InputRange#topic","content":" Specifies which topic or pattern of an event is used  &quot;Topic&quot; -&gt; name_String   emits name for each time when user drags a slider  &quot;Topic&quot; -&gt; {oninput_String, onchange_String}   emits oninput when any changes occur, while onchange is emitted after the users action  ","version":null,"tagName":"h3"},{"title":"Applications​","type":1,"pageTitle":"InputRange","url":"/frontend/Reference/GUI/InputRange#applications","content":" Control properties using knob  EventHandler[InputRange[0,1,0.1], Function[data, pos = data]]; % % // EventFire; Graphics[Rectangle[{-1,0}, {1, Offload[pos]}]]  ","version":null,"tagName":"h2"},{"title":"InputText","type":0,"sectionRef":"#","url":"/frontend/Reference/GUI/InputText","content":"","keywords":"","version":null},{"title":"Event generation​","type":1,"pageTitle":"InputText","url":"/frontend/Reference/GUI/InputText#event-generation","content":" Every-time user changes the content, an event in a form of string will be generated  &quot;&lt;current string&gt;&quot;   ","version":null,"tagName":"h2"},{"title":"Options​","type":1,"pageTitle":"InputText","url":"/frontend/Reference/GUI/InputText#options","content":" ","version":null,"tagName":"h2"},{"title":"\"Label\"​","type":1,"pageTitle":"InputText","url":"/frontend/Reference/GUI/InputText#label","content":" adds a label at the left side to the input text field  ","version":null,"tagName":"h3"},{"title":"\"Placeholder\"​","type":1,"pageTitle":"InputText","url":"/frontend/Reference/GUI/InputText#placeholder","content":" Text placeholder  ","version":null,"tagName":"h3"},{"title":"\"Description\"​","type":1,"pageTitle":"InputText","url":"/frontend/Reference/GUI/InputText#description","content":" adds description field to a widget  ","version":null,"tagName":"h3"},{"title":"\"Topic\"​","type":1,"pageTitle":"InputText","url":"/frontend/Reference/GUI/InputText#topic","content":" Specifies which topic or pattern of an event is used  &quot;Topic&quot; -&gt; name_String   emits name for each time when user types  &quot;Topic&quot; -&gt; {oninput_String, onchange_String}   emits oninput when any changes occur, while onchange is emitted after the users leaves the field  ","version":null,"tagName":"h3"},{"title":"Example​","type":1,"pageTitle":"InputText","url":"/frontend/Reference/GUI/InputText#example","content":" A simple text input  text = InputText[&quot;Hi&quot;] EventHandler[text, Print];   ","version":null,"tagName":"h2"},{"title":"Dev notes​","type":1,"pageTitle":"InputText","url":"/frontend/Reference/GUI/InputText#dev-notes","content":" This is a wrapper for TextView view-component ","version":null,"tagName":"h2"},{"title":"InputTable","type":0,"sectionRef":"#","url":"/frontend/Reference/GUI/InputTable","content":"","keywords":"","version":null},{"title":"Event generation​","type":1,"pageTitle":"InputTable","url":"/frontend/Reference/GUI/InputTable#event-generation","content":" Every-time user changes the cell's data, the events comes as transactions in a form of  {&quot;Typeof&quot;, row, col, oldData, newData}   try this example  list = Table[i j, {i,5}, {j,5}]; EventHandler[InputTable[list], Print]   ","version":null,"tagName":"h2"},{"title":"Transaction helper​","type":1,"pageTitle":"InputTable","url":"/frontend/Reference/GUI/InputTable#transaction-helper","content":" if you don't want to mess with them, there is a helper function InputTable~EventHelper, that updates the list using those transitions  InputTable`EventHelper[list_List] _Function   It will mutate the given symbol list according to the transactions. One has to initialize it on the corresponding list and use the resulting generated symbol in your EventHandler function like in the example below  list = Table[i j, {i,5}, {j,5}]; handler = InputTable`EventHelper[list]; textstr = &quot;&quot;; EventHandler[InputTable[list, &quot;Height&quot;-&gt;150], Function[data, handler[data]; textstr = ToString[list // TableForm, StandardForm]; ]] EditorView[textstr // Offload] // CreateFrontEndObject   the result should look like this    tip If you want to just view your data, do not apply EventHandler list = Table[i j, {i,5}, {j,5}]; InputTable[list] your symbol list will not be affected.  ","version":null,"tagName":"h3"},{"title":"Options​","type":1,"pageTitle":"InputTable","url":"/frontend/Reference/GUI/InputTable#options","content":" ","version":null,"tagName":"h2"},{"title":"\"Height\"​","type":1,"pageTitle":"InputTable","url":"/frontend/Reference/GUI/InputTable#height","content":" specifies the max-height of the table widget. The default value is 400 px.  tip If you have a large list of rows, project the cell to a new window with a bigger &quot;Height&quot;value. It will bring similar experience to Excel-like programs.  ","version":null,"tagName":"h3"},{"title":"Dev notes​","type":1,"pageTitle":"InputTable","url":"/frontend/Reference/GUI/InputTable#dev-notes","content":" A handsontable engine is used as the cells manager. ","version":null,"tagName":"h2"},{"title":"TableView","type":0,"sectionRef":"#","url":"/frontend/Reference/GUI/TableView","content":"","keywords":"","version":null},{"title":"Options​","type":1,"pageTitle":"TableView","url":"/frontend/Reference/GUI/TableView#options","content":" ","version":null,"tagName":"h2"},{"title":"\"Height\"​","type":1,"pageTitle":"TableView","url":"/frontend/Reference/GUI/TableView#height","content":" specifies the maximum height in pixels  ","version":null,"tagName":"h3"},{"title":"TODO​","type":1,"pageTitle":"TableView","url":"/frontend/Reference/GUI/TableView#todo","content":" Developers notes   Allows dynamic updates ","version":null,"tagName":"h2"},{"title":"Slider","type":0,"sectionRef":"#","url":"/frontend/Reference/GUI/Slider","content":"Slider warning This is not supported. Please, use alternative way InputRange","keywords":"","version":null},{"title":"TextView","type":0,"sectionRef":"#","url":"/frontend/Reference/GUI/TextView","content":"","keywords":"","version":null},{"title":"Options​","type":1,"pageTitle":"TextView","url":"/frontend/Reference/GUI/TextView#options","content":" ","version":null,"tagName":"h2"},{"title":"\"Event\"​","type":1,"pageTitle":"TextView","url":"/frontend/Reference/GUI/TextView#event","content":" If specified it acts like an InputText.  ","version":null,"tagName":"h3"},{"title":"\"Description\"​","type":1,"pageTitle":"TextView","url":"/frontend/Reference/GUI/TextView#description","content":" adds description label  ","version":null,"tagName":"h2"},{"title":"\"Placeholder\"​","type":1,"pageTitle":"TextView","url":"/frontend/Reference/GUI/TextView#placeholder","content":" adds placeholder of the given string is empty  ","version":null,"tagName":"h2"},{"title":"\"Label\"​","type":1,"pageTitle":"TextView","url":"/frontend/Reference/GUI/TextView#label","content":" adds a label at the left side to the text field  ","version":null,"tagName":"h3"},{"title":"Application​","type":1,"pageTitle":"TextView","url":"/frontend/Reference/GUI/TextView#application","content":" ","version":null,"tagName":"h2"},{"title":"Dynamic indication​","type":1,"pageTitle":"TextView","url":"/frontend/Reference/GUI/TextView#dynamic-indication","content":" There are various of applications. For example to display the current coordinates on a graph  pointer = {0.,0.} // ToString; Plot[Sinc[x], {x,-10,10}, Prolog-&gt;{ White, EventHandler[Rectangle[{-10,-10}, {10,10}], {&quot;mousemove&quot; -&gt; Function[xy, pointer = xy // ToString]}] }] TextView[pointer // Offload]    ","version":null,"tagName":"h3"},{"title":"WLXEmbed","type":0,"sectionRef":"#","url":"/frontend/Reference/GUI/WLXEmbed","content":"","keywords":"","version":null},{"title":"Options​","type":1,"pageTitle":"WLXEmbed","url":"/frontend/Reference/GUI/WLXEmbed#options","content":" ","version":null,"tagName":"h2"},{"title":"\"SideEffect\"​","type":1,"pageTitle":"WLXEmbed","url":"/frontend/Reference/GUI/WLXEmbed#sideeffect","content":" Executes a given WL expression on the frontend (WLJS Interpreter) after HTML DOM element has been embedded. ","version":null,"tagName":"h3"},{"title":"Alert","type":0,"sectionRef":"#","url":"/frontend/Reference/Interpreter/Alert","content":"","keywords":"","version":null},{"title":"Example​","type":1,"pageTitle":"Alert","url":"/frontend/Reference/Interpreter/Alert#example","content":" This is purely WLJS function, which has to be called either using FrontSubmit or CreateFrontEndObject  FrontSubmit[Alert[&quot;Hello World&quot;]]  ","version":null,"tagName":"h2"},{"title":"AttachDOM","type":0,"sectionRef":"#","url":"/frontend/Reference/Interpreter/AttachDOM","content":"AttachDOM WLJS Execution environment Notebook`Interpreter` Context wljs-interpreter Package Explicitly attaches an DOM element to a container by its id AttachDOM[id_String] It is defined only as WLJS function, you need to use FrontSubmit or CreateFrontEndObject to use it","keywords":"","version":null},{"title":"FrontEndVirtual","type":0,"sectionRef":"#","url":"/frontend/Reference/Interpreter/FrontEndVirtual","content":"","keywords":"","version":null},{"title":"Examples​","type":1,"pageTitle":"FrontEndVirtual","url":"/frontend/Reference/Interpreter/FrontEndVirtual#examples","content":" Most use cases comes, when WLJS is used as a standalone interpreter, but you can simulate it from WLJS Frontend as well using FrontSubmit  cell 1  .html &lt;div id=&quot;container&quot;&gt;&lt;/div&gt;   cell 2  FrontSubmit[With[{}, a = Table[{{0,0}, RandomReal[{-1,1}, 2]}, {i, 100}]; FrontEndVirtual[{ AttachDOM[&quot;container&quot;]; Graphics[{RGBColor[0.0,1.0,1.0], Table[Line[a[[i]]], {i, Length[a]}] }]; }]; (* mix them up *) i = 0; While[i &lt; 30, Pause[0.1]; a = RandomSample[a]; i = i + 1; ]; ] // Offload]   Without a container Graphics just will not work properly.    Adapted from symbols  ","version":null,"tagName":"h2"},{"title":"Dev notes​","type":1,"pageTitle":"FrontEndVirtual","url":"/frontend/Reference/Interpreter/FrontEndVirtual#dev-notes","content":" Now you are reading this documentation pages and see examples with graphics and etc. Most of them are made using just  FrontEndVirtual[With[{}, AttachDOM[&quot;id&quot;]; Graphics[...] ]]   embedded as a script into the HTML tree. ","version":null,"tagName":"h2"},{"title":"ReadClipboard","type":0,"sectionRef":"#","url":"/frontend/Reference/Interpreter/ReadClipboard","content":"","keywords":"","version":null},{"title":"Example​","type":1,"pageTitle":"ReadClipboard","url":"/frontend/Reference/Interpreter/ReadClipboard#example","content":" It is pure WLJS function, which has to be executed using FrontFetch or FrontSubmit  ","version":null,"tagName":"h2"},{"title":"Read and alert​","type":1,"pageTitle":"ReadClipboard","url":"/frontend/Reference/Interpreter/ReadClipboard#read-and-alert","content":" We will read it and then make a pop-up message using Alert  FrontSubmit[Alert[ReadClipboard[]]]   ","version":null,"tagName":"h3"},{"title":"Read and get back to Wolfram Kernel​","type":1,"pageTitle":"ReadClipboard","url":"/frontend/Reference/Interpreter/ReadClipboard#read-and-get-back-to-wolfram-kernel","content":" Here we use FrontFetch to get the data back to Wolfram Kernel  FrontFetch[ReadClipboard[]]  ","version":null,"tagName":"h3"},{"title":"WindowScope","type":0,"sectionRef":"#","url":"/frontend/Reference/Interpreter/WindowScope","content":"","keywords":"","version":null},{"title":"Example​","type":1,"pageTitle":"WindowScope","url":"/frontend/Reference/Interpreter/WindowScope#example","content":" ","version":null,"tagName":"h2"},{"title":"Read JS variable​","type":1,"pageTitle":"WindowScope","url":"/frontend/Reference/Interpreter/WindowScope#read-js-variable","content":" Firstly let us create it  cell 1 .js window.variable = [0,1,2,3,4,5];   now read  FrontFetch[WindowScope[&quot;variable&quot;]]  ","version":null,"tagName":"h3"},{"title":"Async","type":0,"sectionRef":"#","url":"/frontend/Reference/Misc/Async","content":"","keywords":"","version":null},{"title":"SetTimeout​","type":1,"pageTitle":"Async","url":"/frontend/Reference/Misc/Async#settimeout","content":" Spawns an asynchronous task (a wrapper over SchelduleTask), that evaluates an expression once  SetTimeout[expr_, interval_Real] _TaskObject   A symbol has HoldFirst attribute. An interval is in milliseconds. To cancel it, use  CancelTimeout[_TaskObject]   ","version":null,"tagName":"h2"},{"title":"SetInterval​","type":1,"pageTitle":"Async","url":"/frontend/Reference/Misc/Async#setinterval","content":" Spawns an asynchronous task (a wrapper over SchelduleTask), that evaluates an expression every interval milliseconds  SetInterval[expr_, interval_Real] _TaskObject   A symbol has HoldFirst attribute. To cancel this task use  TaskRemove[_TaskObject]   or  CancelInterval[_TaskObject]  ","version":null,"tagName":"h2"},{"title":"OffloadFromEventObject","type":0,"sectionRef":"#","url":"/frontend/Reference/Interpreter/OffloadFromEventObject","content":"","keywords":"","version":null},{"title":"Example​","type":1,"pageTitle":"OffloadFromEventObject","url":"/frontend/Reference/Interpreter/OffloadFromEventObject#example","content":" It feels similar to what Mathematica's dynamic keyword produce  evaluate Offload`FromEventObject[InputRange[-1,1,0.1]]   cut and paste it into  Rectangle[{-1,-1}, {(*here*), 1}]     ","version":null,"tagName":"h2"},{"title":"Dev notes​","type":1,"pageTitle":"OffloadFromEventObject","url":"/frontend/Reference/Interpreter/OffloadFromEventObject#dev-notes","content":" This is a simple combination of Offload, EventHandler and Interpretation ","version":null,"tagName":"h2"},{"title":"Language","type":0,"sectionRef":"#","url":"/frontend/Reference/Misc/Language","content":"","keywords":"","version":null},{"title":"LeakyModule​","type":1,"pageTitle":"Language","url":"/frontend/Reference/Misc/Language#leakymodule","content":" a Module that cause memory leaks on purpose  A variation of Module, which comes with its own garbage collector, that prevents symbols from being purged by WL  LeakyModule[symbols_List, expr_, opts___] _   The only difference compared to traditional module-function is an optional argument  &quot;Garbage&quot; :&gt; _List a held symbol, that points to a list.  Then a user can manually purge them. ","version":null,"tagName":"h2"},{"title":"SpotLight","type":0,"sectionRef":"#","url":"/frontend/Reference/Graphics3D/SpotLight","content":"","keywords":"","version":null},{"title":"Dynamics​","type":1,"pageTitle":"SpotLight","url":"/frontend/Reference/Graphics3D/SpotLight#dynamics","content":" position and target do support dynamic updates  pos = {0,0,2}; handler = Function[data, pos = data[&quot;position&quot;]]; KnotData[{&quot;TorusKnot&quot;, {3, 5}}][[1]]; Graphics3D[{ Shadows[True], %, EventHandler[Sphere[pos, 0.1], {&quot;transform&quot; -&gt; handler}], SpotLight[White, {Offload[pos], {0,0,0}}], Polygon[5{{-1,1,-1}, {1,1,-1}, {1,-1,-1}, {-1,-1,-1}}] }, &quot;Lighting&quot;-&gt;None, ImageSize-&gt;600]    ","version":null,"tagName":"h2"},{"title":"FrontEditorSelected","type":0,"sectionRef":"#","url":"/frontend/Reference/Interpreter/FrontEditorSelected","content":"","keywords":"","version":null},{"title":"Methods​","type":1,"pageTitle":"FrontEditorSelected","url":"/frontend/Reference/Interpreter/FrontEditorSelected#methods","content":" There are following methods available  ","version":null,"tagName":"h2"},{"title":"Get selected content​","type":1,"pageTitle":"FrontEditorSelected","url":"/frontend/Reference/Interpreter/FrontEditorSelected#get-selected-content","content":" FrontEndEditorSelected[&quot;Get&quot;, opt___] _String   Returns selected string. For example  With[{win = CurrentWindow[]}, EventHandler[InputButton[], Function[Null, Then[FrontFetchAsync[FrontEditorSelected[&quot;Get&quot;], &quot;Window&quot;-&gt;win], Function[result, Print[result]; ] ] ]] ]   ","version":null,"tagName":"h3"},{"title":"Insert or replace selected content​","type":1,"pageTitle":"FrontEditorSelected","url":"/frontend/Reference/Interpreter/FrontEditorSelected#insert-or-replace-selected-content","content":" FrontEndEditorSelected[&quot;Set&quot;, data_String, opt___]   Inserts or replaces selected text with a provided string  With[{win = CurrentWindow[]}, EventHandler[InputButton[&quot;Replace&quot;], Function[Null, FrontSubmit[FrontEditorSelected[&quot;Set&quot;, &quot;Yo&quot;], &quot;Window&quot;-&gt;win]; ] ] ]   ","version":null,"tagName":"h3"},{"title":"Get cursor position​","type":1,"pageTitle":"FrontEditorSelected","url":"/frontend/Reference/Interpreter/FrontEditorSelected#get-cursor-position","content":" FrontEndEditorSelected[&quot;Cursor&quot;, opt___]   ","version":null,"tagName":"h3"},{"title":"Get all content from the editor​","type":1,"pageTitle":"FrontEditorSelected","url":"/frontend/Reference/Interpreter/FrontEditorSelected#get-all-content-from-the-editor","content":" FrontEndEditorSelected[&quot;GetDoc&quot;, opt___]   ","version":null,"tagName":"h3"},{"title":"Set content of the editor​","type":1,"pageTitle":"FrontEditorSelected","url":"/frontend/Reference/Interpreter/FrontEditorSelected#set-content-of-the-editor","content":" FrontEndEditorSelected[&quot;SetDoc&quot;, doc_String, opt___]   ","version":null,"tagName":"h3"},{"title":"Get UID of the last used editor​","type":1,"pageTitle":"FrontEditorSelected","url":"/frontend/Reference/Interpreter/FrontEditorSelected#get-uid-of-the-last-used-editor","content":" FrontEndEditorSelected[&quot;Editor&quot;] _String   See Options for applications.  ","version":null,"tagName":"h3"},{"title":"Evaluate​","type":1,"pageTitle":"FrontEditorSelected","url":"/frontend/Reference/Interpreter/FrontEditorSelected#evaluate","content":" danger Not implemented  ","version":null,"tagName":"h3"},{"title":"Options​","type":1,"pageTitle":"FrontEditorSelected","url":"/frontend/Reference/Interpreter/FrontEditorSelected#options","content":" ","version":null,"tagName":"h2"},{"title":"\"Editor\"​","type":1,"pageTitle":"FrontEditorSelected","url":"/frontend/Reference/Interpreter/FrontEditorSelected#editor","content":" Specify an editor, from which the all properties will be taken or modified. By the default it takes the last editor, that a user operated  You can get an id or an editor using Get UID of the last used editor ","version":null,"tagName":"h3"},{"title":"PlotlyAddTraces","type":0,"sectionRef":"#","url":"/frontend/Reference/Plotly/PlotlyAddTraces","content":"","keywords":"","version":null},{"title":"Example​","type":1,"pageTitle":"PlotlyAddTraces","url":"/frontend/Reference/Plotly/PlotlyAddTraces#example","content":" Plot an example data  p = Plotly[&lt;| &quot;x&quot; -&gt; Range[100], &quot;y&quot; -&gt; Table[Sin[2Pi x / 100.0], {x,100}], &quot;mode&quot; -&gt; &quot;line&quot; |&gt;]   To dynamically add new traces, we can call directly  PlotlyAddTraces[p, &lt;| &quot;x&quot; -&gt; Range[100], &quot;y&quot; -&gt; Table[Cos[4Pi x / 100.0], {x,100}] |&gt;]    ","version":null,"tagName":"h2"},{"title":"ListLinePlotly","type":0,"sectionRef":"#","url":"/frontend/Reference/Plotly/ListLinePlotly","content":"","keywords":"","version":null},{"title":"Dynamics​","type":1,"pageTitle":"ListLinePlotly","url":"/frontend/Reference/Plotly/ListLinePlotly#dynamics","content":" It fully supports dynamic updates. This is the first ever high order function, that does this unlike ListLinePlot.  tip To use full features of Plotly, please, use Plotly and PlotlyAnimate or PlotlyAddTraces  ","version":null,"tagName":"h2"},{"title":"Example​","type":1,"pageTitle":"ListLinePlotly","url":"/frontend/Reference/Plotly/ListLinePlotly#example","content":" ListLinePlotly[Accumulate[RandomReal[{-1, 1}, {250, 2}]]]     danger No styling possible for now  ","version":null,"tagName":"h2"},{"title":"Examples with dynamics​","type":1,"pageTitle":"ListLinePlotly","url":"/frontend/Reference/Plotly/ListLinePlotly#examples-with-dynamics","content":" As an advantage of it, you can directly feed it with offloaded variables  dirs = {{0,0}, {0,0}}; ListLinePlotly[dirs // Offload]   task = SetInterval[dirs = Append[dirs, Last[dirs] + RandomChoice[{{1,0}, {-1,0}, {0,1}, {0,-1}}]], 300]; SetTimeout[TaskRemove[task], 6000];  ","version":null,"tagName":"h2"},{"title":"PlotlyExtendTraces","type":0,"sectionRef":"#","url":"/frontend/Reference/Plotly/PlotlyExtendTraces","content":"","keywords":"","version":null},{"title":"Example​","type":1,"pageTitle":"PlotlyExtendTraces","url":"/frontend/Reference/Plotly/PlotlyExtendTraces#example","content":" Create a dummy plot  p = Plotly[&lt;| &quot;y&quot; -&gt; Table[Sin[2Pi x / 100.0], {x,100}], &quot;mode&quot; -&gt; &quot;line&quot; |&gt;]   now lets add data dynamically  task = SetInterval[ PlotlyExtendTraces[p, &lt;| &quot;y&quot; -&gt; {{RandomReal[]}} |&gt;, {0}] , 100]; SetTimeout[TaskRemove[task], 2000];    ","version":null,"tagName":"h2"},{"title":"PlotlyAnimate","type":0,"sectionRef":"#","url":"/frontend/Reference/Plotly/PlotlyAnimate","content":"","keywords":"","version":null},{"title":"Example​","type":1,"pageTitle":"PlotlyAnimate","url":"/frontend/Reference/Plotly/PlotlyAnimate#example","content":" An example  p = Plotly[&lt;| &quot;y&quot; -&gt; Table[Sin[2Pi x / 100.0], {x,100}], &quot;mode&quot;-&gt; &quot;markers&quot;, &quot;type&quot;-&gt; &quot;scatter&quot; |&gt;]   freq = 0.5; task = SetInterval[ PlotlyAnimate[p, &lt;| &quot;data&quot; -&gt; { &lt;|&quot;y&quot; -&gt; Table[Sin[freq Pi x / 100.0], {x,100}]|&gt; }, &quot;trace&quot; -&gt; {0}, &quot;layout&quot; -&gt; &lt;||&gt; |&gt;, &lt;| &quot;transition&quot; -&gt; &lt;| &quot;duration&quot;-&gt;30, &quot;easing&quot;-&gt;&quot;linear&quot; |&gt;, &quot;frame&quot; -&gt; &lt;| &quot;duration&quot;-&gt;30 |&gt; |&gt; ]; freq += 0.3; , 30]; SetTimeout[TaskRemove[task], 2000];    ","version":null,"tagName":"h2"},{"title":"PlotlyInstance","type":0,"sectionRef":"#","url":"/frontend/Reference/Plotly/PlotlyInstance","content":"PlotlyInstance an object generated by Plotly","keywords":"","version":null},{"title":"PlotlyPrependTraces","type":0,"sectionRef":"#","url":"/frontend/Reference/Plotly/PlotlyPrependTraces","content":"PlotlyPrependTraces the same as PlotlyExtendTraces, but adds to the beginning","keywords":"","version":null},{"title":"PlotlyDeleteTraces","type":0,"sectionRef":"#","url":"/frontend/Reference/Plotly/PlotlyDeleteTraces","content":"PlotlyDeleteTraces Wolfram Kernel Execution environment wljs-plotly Package Notebook`Kernel`PlotlyExtension` Context PlotlyDeleteTraces[p_PlotlyInstance, traces_List] removes traces listed in traces with indexes starting from 0 tip See the official reference","keywords":"","version":null},{"title":"ContourPlot","type":0,"sectionRef":"#","url":"/frontend/Reference/Plotting Functions/ContourPlot","content":"","keywords":"","version":null},{"title":"Options​","type":1,"pageTitle":"ContourPlot","url":"/frontend/Reference/Plotting Functions/ContourPlot#options","content":" Styling is limited to the current implementation of Graphics ","version":null,"tagName":"h2"},{"title":"Events","type":0,"sectionRef":"#","url":"/frontend/Reference/Misc/Events","content":"","keywords":"","version":null},{"title":"EventObject​","type":1,"pageTitle":"Events","url":"/frontend/Reference/Misc/Events#eventobject","content":" A complete representation of event-object with its initial data and possible decorative representation  EventObject[&lt;|&quot;Id&quot;-&gt;_String, &quot;Initial&quot;-&gt;_, &quot;View&quot;-&gt;_|&gt;]   Actual binding happens with only &quot;Id&quot; field, therefore a string equivalent is also valid to use  _String   ","version":null,"tagName":"h2"},{"title":"\"Initial\"​","type":1,"pageTitle":"Events","url":"/frontend/Reference/Misc/Events#initial","content":" Stores initial data, which makes sense if an event object was produced by some sliders, toggle switches or other UI elements.  If an event was joined with other event, &quot;Initial&quot; data will be merged as well depending on its original structure.  If an event object is used in EventFire with no data provided, &quot;Initial&quot; field will be used instead as a payload.  ","version":null,"tagName":"h3"},{"title":"\"View\"​","type":1,"pageTitle":"Events","url":"/frontend/Reference/Misc/Events#view","content":" An implementation depends on the executing environment. On WLX pages, or inside notebook this field will represent how an event object will be displayed. Usually if it has been generated by some UI component, a button or a slider is displayed on output, that fires this event remotely using a provided &quot;Id&quot;.  ","version":null,"tagName":"h3"},{"title":"Inheritable properties​","type":1,"pageTitle":"Events","url":"/frontend/Reference/Misc/Events#inheritable-properties","content":" There is only a single field &quot;Initial&quot; that can be merged or copied under EventClone and Join or EventJoin operations.  ","version":null,"tagName":"h3"},{"title":"Non-inheritable properties​","type":1,"pageTitle":"Events","url":"/frontend/Reference/Misc/Events#non-inheritable-properties","content":" &quot;Id&quot;, &quot;View&quot; cannot be copied under EventJoin, EventClone and Join operations.  ","version":null,"tagName":"h3"},{"title":"EventHandler​","type":1,"pageTitle":"Events","url":"/frontend/Reference/Misc/Events#eventhandler","content":" Binds an event object represented as a string or EventObject or anything compatible with this type to a single or multiple handling functions (multiple - only if patterns do not intersect)  EventHandler[ev_String | _EventObject, {handlers___Rule | handlers___RuleDelayed}]   where handlers is a sequence of rules (straight or delayed), which are applied to any incoming message. Each rule represents a normal WL pattern to mach a message generated by EventFire.  There is a simpler version as well, which is indifferent to patterns  EventHandler[ev_String | _EventObject, handler_]   which is effectively  EventHandler[ev_String | _EventObject, {_ -&gt; handler_}]   warning Only a single handler function can be assign to an event object per pattern. If you need multiple handlers (chain) to be assigned to the same event and pattern - clone your event firstly using EventClone  Return value​  It is optional, but any handler can return any non-Null expression, which will be presented as a return value of EventFire expression.  ","version":null,"tagName":"h2"},{"title":"Example​","type":1,"pageTitle":"Events","url":"/frontend/Reference/Misc/Events#example","content":" The simples case scenario  EventHandler[&quot;ev&quot;, Print]; EventFire[&quot;ev&quot;, &quot;Hello World!&quot;];   or using different patterns  EventHandler[&quot;ev&quot;, { &quot;Case 1&quot; -&gt; Print, &quot;Case 2&quot; -&gt; Echo, any_String :&gt; Function[data, Echo[StringJoin[&quot;Undefined case: &quot;, any]]] }]; EventFire[&quot;ev&quot;, &quot;Case 1&quot;, &quot;Hello World!&quot;]; EventFire[&quot;ev&quot;, &quot;Case 2&quot;, &quot;Hello World!&quot;]; EventFire[&quot;ev&quot;, &quot;Case 3&quot;, &quot;Hello World!&quot;];   note Patterns do not have to be strings only. Any Wolfram Expression is valid  ","version":null,"tagName":"h3"},{"title":"EventClone​","type":1,"pageTitle":"Events","url":"/frontend/Reference/Misc/Events#eventclone","content":" Clones event object and returns a new one, keeping all previous assigned handlers on another copy of it  EventClone[ev_String | _EventObject] _EventObject   Multiple calls on the same ev makes a chain of new event objects connected to it. Once EventFire is called on ev, it will sequentially fire all cloned events in a chain.  ","version":null,"tagName":"h2"},{"title":"EventRemove​","type":1,"pageTitle":"Events","url":"/frontend/Reference/Misc/Events#eventremove","content":" Removes all handlers from a given event object  EventRemove[ev_String | _EventObject]   or  Delete[ev_EventObject]   is also valid. Removing a cloned event only removes handlers from the cloned event object  ","version":null,"tagName":"h2"},{"title":"EventJoin​","type":1,"pageTitle":"Events","url":"/frontend/Reference/Misc/Events#eventjoin","content":" Joins two independent events into a new one merging their &quot;Initial&quot; values as well  EventJoin[ev__String | __EventObject] _EventObject   however  Join[ev__EventObject] _EventObject   is also valid.  ","version":null,"tagName":"h2"},{"title":"EventFire​","type":1,"pageTitle":"Events","url":"/frontend/Reference/Misc/Events#eventfire","content":" Fires an event with provided data and pattern  EventFire[ev_String | _EventObject, data_] _ EventFire[ev_String | _EventObject, pattern_, data_] _   or for a complete event object representation  EventFire[ev_EventObject] _   it takes &quot;Initial&quot; field as data. Effectively if pattern is not provided &quot;Default&quot; pattern is used instead. ","version":null,"tagName":"h2"},{"title":"BubbleChart","type":0,"sectionRef":"#","url":"/frontend/Reference/Plotting Functions/BubbleChart","content":"","keywords":"","version":null},{"title":"Examples​","type":1,"pageTitle":"BubbleChart","url":"/frontend/Reference/Plotting Functions/BubbleChart#examples","content":" Simple bubble plot of random triplets  BubbleChart[RandomReal[1, {10, 3}]]     multiple datasets  BubbleChart[RandomReal[1, {5, 7, 3}]]    ","version":null,"tagName":"h2"},{"title":"ArrayPlot","type":0,"sectionRef":"#","url":"/frontend/Reference/Plotting Functions/ArrayPlot","content":"ArrayPlot Wolfram Kernel Execution environment Generates a plot, where values are shown in a discrete array of blocks danger Since Graphics in this implementation cannot guess the plot range, you need to provide this explicitly. Use MatrixPlot if you want it to happen automatically. ArrayPlot[{{1, 0, 0, Pink}, {1, 1, 0, Pink}, {1, 0, 1, Red}}]; Insert[%, PlotRange-&gt;{{0,4}, {0,3}}, 2] Combining it with Controls option for Graphics, you can zoom and pan the plot using your mouse ArrayPlot[Table[Sin[x y], {x, -40, 40}, {y, -40, 40}]]; Insert[%, PlotRange-&gt;{{0,80}, {0,80}}, 2]; Insert[%, Controls-&gt;True, 2] ","keywords":"","version":null},{"title":"ContourPlot3D","type":0,"sectionRef":"#","url":"/frontend/Reference/Plotting Functions/ContourPlot3D","content":"","keywords":"","version":null},{"title":"Example​","type":1,"pageTitle":"ContourPlot3D","url":"/frontend/Reference/Plotting Functions/ContourPlot3D#example","content":" ContourPlot3D[x^3 + y^2 - z^2, {x, -2, 2}, {y, -2, 2}, {z, -2, 2}]    ","version":null,"tagName":"h2"},{"title":"DensityPlot","type":0,"sectionRef":"#","url":"/frontend/Reference/Plotting Functions/DensityPlot","content":"","keywords":"","version":null},{"title":"Options​","type":1,"pageTitle":"DensityPlot","url":"/frontend/Reference/Plotting Functions/DensityPlot#options","content":" ","version":null,"tagName":"h2"},{"title":"ColorFunction​","type":1,"pageTitle":"DensityPlot","url":"/frontend/Reference/Plotting Functions/DensityPlot#colorfunction","content":" CoolColor[ z_ ] := RGBColor[z, 1 - z, 1]; DensityPlot[Sin[x y], {x, -1, 1}, {y, -1, 1}, ColorFunction -&gt; CoolColor]     or using predefined   DensityPlot[Sin[x] Sin[y], {x, -2, 2}, {y, -2, 2}, ColorFunction -&gt; ColorData[&quot;SolarColors&quot;]]    ","version":null,"tagName":"h3"},{"title":"Promise","type":0,"sectionRef":"#","url":"/frontend/Reference/Misc/Promise","content":"","keywords":"","version":null},{"title":"Promise​","type":1,"pageTitle":"Promise","url":"/frontend/Reference/Misc/Promise#promise","content":" A constructor and also representation of EventObject which can be fired only once (aka resolved) and even before a corresponding handler is attached  Promise[] _Promise (* constructor *)   To resolve or reject a promise - use EventFire  EventFire[p_Promise, Resolve | Reject, data_]   ","version":null,"tagName":"h2"},{"title":"Then​","type":1,"pageTitle":"Promise","url":"/frontend/Reference/Misc/Promise#then","content":" An expression for asynchronous subscribing to promise resolution or rejection  Then[p_Promise | _List | _, resolve_] Then[p_Promise | _List | _, resolve_, reject_]   where resolve and reject are any arbitrary functions. This is non-blocking function.  info The key difference between EventHandler and Then is that Then can even be applied to already resolved Promise object (after it was fired), which will cause an immediate evaluation of resolve or reject functions.  Being applied to a List of _Promise objects it will wait until all of them are resolved before evaluating resolve function.  Any Wolfram Expressions, which is not a List or Promise counts as resolved.  ","version":null,"tagName":"h2"},{"title":"Example​","type":1,"pageTitle":"Promise","url":"/frontend/Reference/Misc/Promise#example","content":" Let's try with a multiple promise events  p1 = Promise[]; p2 = Promise[]; SetTimeout[EventFire[p1, Resolve, Null], 1000]; SetTimeout[EventFire[p2, Resolve, Null], 1500]; Then[{p1,p2,Null}, Function[Null, Echo[&quot;Resolved!&quot;]; ]];   Here Null as a last element of a list was used just for demonstration purposes. It can also be any non _Promise | _List expression.  ","version":null,"tagName":"h3"},{"title":"WaitAll​","type":1,"pageTitle":"Promise","url":"/frontend/Reference/Misc/Promise#waitall","content":" A synchronous blocking function to wait until a promise has resolved and returns the result  WaitAll[p_Promise] _   There is a timeout of 5 seconds, then $Failed is returned.  caution Be careful while using this. Avoid to use in SessionSubmit, BackgroundTask and other interrupting the main loop subroutines. If your promise resolution does depend on TCP socket message, it will never be resolved properly, since all subroutines blocks TCP sockets and other external services. ","version":null,"tagName":"h2"},{"title":"ListCurvePathPlot","type":0,"sectionRef":"#","url":"/frontend/Reference/Plotting Functions/ListCurvePathPlot","content":"","keywords":"","version":null},{"title":"Example​","type":1,"pageTitle":"ListCurvePathPlot","url":"/frontend/Reference/Plotting Functions/ListCurvePathPlot#example","content":" Randomly sampled points on a circle  data = Table[{t Cos[t], t Sin[t]}, {t, RandomReal[{0, 2 Pi}, 50]}]; ListCurvePathPlot[data, Epilog-&gt;{Opacity[0.5], Line[data]}]     where the gray lines represent what would a simple line plot show.  ","version":null,"tagName":"h2"},{"title":"Neat example​","type":1,"pageTitle":"ListCurvePathPlot","url":"/frontend/Reference/Plotting Functions/ListCurvePathPlot#neat-example","content":" ListCurvePathPlot[RandomReal[{0, 10}, {2000, 2}]]    ","version":null,"tagName":"h3"},{"title":"ListPlot3D","type":0,"sectionRef":"#","url":"/frontend/Reference/Plotting Functions/ListPlot3D","content":"","keywords":"","version":null},{"title":"Examples​","type":1,"pageTitle":"ListPlot3D","url":"/frontend/Reference/Plotting Functions/ListPlot3D#examples","content":" ListPlot3D[{{1, 1, 1, 1}, {1, 2, 1, 2}, {1, 1, 3, 1}, {1, 2, 1, 4}}, Mesh -&gt; All]     or an interpolated surface  data = Table[Sin[j^2 + i], {i, 0, Pi, Pi/5}, {j, 0, Pi, Pi/5}]; ListPlot3D[data, Mesh -&gt; None, InterpolationOrder -&gt; 3, ColorFunction -&gt; &quot;SouthwestColors&quot;, BoxRatios-&gt;{1,1,0.5}]    ","version":null,"tagName":"h2"},{"title":"ListLinePlot","type":0,"sectionRef":"#","url":"/frontend/Reference/Plotting Functions/ListLinePlot","content":"","keywords":"","version":null},{"title":"Options​","type":1,"pageTitle":"ListLinePlot","url":"/frontend/Reference/Plotting Functions/ListLinePlot#options","content":" The same as for Plot  ","version":null,"tagName":"h2"},{"title":"Examples​","type":1,"pageTitle":"ListLinePlot","url":"/frontend/Reference/Plotting Functions/ListLinePlot#examples","content":" Plot a list of yyy values  ListLinePlot[{1, 1, 2, 3, 5, 8}]     Add a filling under the line  ListLinePlot[Prime[Range[25]], Filling -&gt; Axis]     Random walk  ListLinePlot[Accumulate[RandomReal[{-1, 1}, {250, 2}]]]     ","version":null,"tagName":"h2"},{"title":"Dev notes​","type":1,"pageTitle":"ListLinePlot","url":"/frontend/Reference/Plotting Functions/ListLinePlot#dev-notes","content":" This function does not support dynamic updates, please use raw Graphics or alternative way - ListLinePlotly to animate your data. ","version":null,"tagName":"h2"},{"title":"MatrixPlot","type":0,"sectionRef":"#","url":"/frontend/Reference/Plotting Functions/MatrixPlot","content":"","keywords":"","version":null},{"title":"Options​","type":1,"pageTitle":"MatrixPlot","url":"/frontend/Reference/Plotting Functions/MatrixPlot#options","content":" warning ColorFunction is not supported option for now  ","version":null,"tagName":"h2"},{"title":"Dev notes​","type":1,"pageTitle":"MatrixPlot","url":"/frontend/Reference/Plotting Functions/MatrixPlot#dev-notes","content":" It produces Raster graphics object placed into Graphics ","version":null,"tagName":"h2"},{"title":"ListVectorPlot","type":0,"sectionRef":"#","url":"/frontend/Reference/Plotting Functions/ListVectorPlot","content":"ListVectorPlot Wolfram Kernel Execution environment Plot the vector field interpolated from a specified set of vectors ListVectorPlot[Table[{y, -x}, {x, -3, 3, 0.2}, {y, -3, 3, 0.2}]] It provides the same options as VectorPlot","keywords":"","version":null},{"title":"ManipulatePlot","type":0,"sectionRef":"#","url":"/frontend/Reference/Plotting Functions/ManipulatePlot","content":"","keywords":"","version":null},{"title":"Options​","type":1,"pageTitle":"ManipulatePlot","url":"/frontend/Reference/Plotting Functions/ManipulatePlot#options","content":" ","version":null,"tagName":"h2"},{"title":"\"SamplingPoints\"​","type":1,"pageTitle":"ManipulatePlot","url":"/frontend/Reference/Plotting Functions/ManipulatePlot#samplingpoints","content":" A number of points used in sampling. The default value is 200  It inherits some of Graphics options as well  ","version":null,"tagName":"h3"},{"title":"TransitionType​","type":1,"pageTitle":"ManipulatePlot","url":"/frontend/Reference/Plotting Functions/ManipulatePlot#transitiontype","content":" See TransitionType  ","version":null,"tagName":"h3"},{"title":"TransitionDuration​","type":1,"pageTitle":"ManipulatePlot","url":"/frontend/Reference/Plotting Functions/ManipulatePlot#transitionduration","content":" See TransitionDuration  ","version":null,"tagName":"h3"},{"title":"ImageSize​","type":1,"pageTitle":"ManipulatePlot","url":"/frontend/Reference/Plotting Functions/ManipulatePlot#imagesize","content":" Accepts {width, height}  ","version":null,"tagName":"h3"},{"title":"PlotStyle​","type":1,"pageTitle":"ManipulatePlot","url":"/frontend/Reference/Plotting Functions/ManipulatePlot#plotstyle","content":" Specifies colors for each curve  ","version":null,"tagName":"h3"},{"title":"Epilog​","type":1,"pageTitle":"ManipulatePlot","url":"/frontend/Reference/Plotting Functions/ManipulatePlot#epilog","content":" ","version":null,"tagName":"h3"},{"title":"Prolog​","type":1,"pageTitle":"ManipulatePlot","url":"/frontend/Reference/Plotting Functions/ManipulatePlot#prolog","content":" Appends graphics primitives to the plot. See Graphics  ","version":null,"tagName":"h3"},{"title":"Example​","type":1,"pageTitle":"ManipulatePlot","url":"/frontend/Reference/Plotting Functions/ManipulatePlot#example","content":" Plot the simplest sine function  ManipulatePlot[Sin[w z + p], {z,0,10}, {w, 0, 15.1, 1}, {p, 0, Pi, 0.1}]     ","version":null,"tagName":"h2"},{"title":"Issues​","type":1,"pageTitle":"ManipulatePlot","url":"/frontend/Reference/Plotting Functions/ManipulatePlot#issues","content":" danger Help needed! There is no adaptive sampling implemented. ","version":null,"tagName":"h2"},{"title":"Plotly","type":0,"sectionRef":"#","url":"/frontend/Reference/Plotting Functions/Plotly","content":"","keywords":"","version":null},{"title":"Dev notes​","type":1,"pageTitle":"Plotly","url":"/frontend/Reference/Plotting Functions/Plotly#dev-notes","content":" This is a wrapper of Plot, that translates kinda in hacky way the result to ListLinePlotly. Which is the only high-order plotting function that support dynamic updates out of the box.  Credits for this adaptation to @userrand ","version":null,"tagName":"h2"},{"title":"ListStepPlot","type":0,"sectionRef":"#","url":"/frontend/Reference/Plotting Functions/ListStepPlot","content":"","keywords":"","version":null},{"title":"Examples​","type":1,"pageTitle":"ListStepPlot","url":"/frontend/Reference/Plotting Functions/ListStepPlot#examples","content":" Using xxx and yyy coordinates  ListStepPlot[Table[{Prime[n], EulerPhi[n]}, {n, 50}]]    ","version":null,"tagName":"h2"},{"title":"RandomImage","type":0,"sectionRef":"#","url":"/frontend/Reference/Plotting Functions/RandomImage","content":"RandomImage Wolfram Kernel Execution environment Package Generates a raster Image with a given size and distribution. Only RGB space is supported. The maximum value is limited to 255 for each channel RandomImage[255, {100, 100}, ColorSpace -&gt; &quot;RGB&quot;] warning 3D features are not supported","keywords":"","version":null},{"title":"Offload","type":0,"sectionRef":"#","url":"/frontend/Reference/Interpreter/Offload","content":"","keywords":"","version":null},{"title":"Options​","type":1,"pageTitle":"Offload","url":"/frontend/Reference/Interpreter/Offload#options","content":" ","version":null,"tagName":"h2"},{"title":"\"Volatile\"​","type":1,"pageTitle":"Offload","url":"/frontend/Reference/Interpreter/Offload#volatile","content":" Blocks or allows dynamic updates. Only normal evaluation will be allowed if it is set to False. The default values is True  warning In such case an expression will not be evaluated during the updates and will return undefined value. Use it only in constructions like CompoundExpression  ","version":null,"tagName":"h3"},{"title":"\"Static\"​","type":1,"pageTitle":"Offload","url":"/frontend/Reference/Interpreter/Offload#static","content":" Prevents or allows a parent instance to listen changes of an inner expression. The default value is False.  tip The typical case scenario is you don't want to create extra bondings between an objects and other dynamic symbols. For example Line[{{0, a // Offload}, {1, a // Offload}}] Line will be reevalauted 2 times instead of 1. 🔔 Since each instance of a causes the bond creation and reevaluation, once a has been changed. Solution 1 👍🏼 Line[With[{p = a}, {{0, p}, {1, p}}] // Offload] Solution 2 👍🏼 Line[{{0, a // Offload}, {1, Offload[a, &quot;Static&quot;-&gt;True]}}]   ","version":null,"tagName":"h3"},{"title":"Related​","type":1,"pageTitle":"Offload","url":"/frontend/Reference/Interpreter/Offload#related","content":" See also OffloadFromEventObject  ","version":null,"tagName":"h2"},{"title":"Examples​","type":1,"pageTitle":"Offload","url":"/frontend/Reference/Interpreter/Offload#examples","content":" ","version":null,"tagName":"h2"},{"title":"Symbols tracking and deferred evaluation​","type":1,"pageTitle":"Offload","url":"/frontend/Reference/Interpreter/Offload#symbols-tracking-and-deferred-evaluation","content":" Typical example for the dynamic evaluation  pts = RandomReal[{-1,1}, {64, 2}]; Graphics[{PointSize[0.02], Point[pts // Offload]}, ImageSize-&gt;500]     note Try to update the page. Each time the distribution of points will be different  Now the symbol was actually evaluated on the frontend (browser/ client) using fetched data from the server.  And then, change the variable from the separate task  task = SetInterval[With[{}, pts = (# + 0.001 Sum[ (i - #)/(Norm[i - #]^3 + 0.1) - (i - #)/(Norm[i - #]^5 + 0.1) , {i, pts}]) &amp;/@ pts; ], 100]   Don't forget to remove it afterwards  TaskRemove[task]   ","version":null,"tagName":"h3"},{"title":"Force WL Kernel to offload an expression​","type":1,"pageTitle":"Offload","url":"/frontend/Reference/Interpreter/Offload#force-wl-kernel-to-offload-an-expression","content":" Looking back to the previous example, the function RandomReal implemented on both sides. If you offload it to the Point expression  Graphics[{PointSize[0.02], Point[RandomReal[{-1,1}, {64, 2}] // Offload]}]   Each time you load a notebook the distribution of the point will be different, since it reevaluate it on frontend's side each time.  ","version":null,"tagName":"h3"},{"title":"Dev notes​","type":1,"pageTitle":"Offload","url":"/frontend/Reference/Interpreter/Offload#dev-notes","content":" The actual implementation of the expression is extremely simple  SetAttributes[Offload, HoldFirst]   core.Offload = async (args, env) =&gt; { return await intepretate(args[0], env) } core.Offload.update = core.Offload core.Offload.destroy = core.Offload   The difference from Hold is that it will not be affected by ReleaseHold. ","version":null,"tagName":"h2"},{"title":"SphericalPlot3D","type":0,"sectionRef":"#","url":"/frontend/Reference/Plotting Functions/SphericalPlot3D","content":"SphericalPlot3D","keywords":"","version":null},{"title":"VectorPlot","type":0,"sectionRef":"#","url":"/frontend/Reference/Plotting Functions/VectorPlot","content":"","keywords":"","version":null},{"title":"Options​","type":1,"pageTitle":"VectorPlot","url":"/frontend/Reference/Plotting Functions/VectorPlot#options","content":" Currently only partially supported ","version":null,"tagName":"h2"},{"title":"StreamPlot","type":0,"sectionRef":"#","url":"/frontend/Reference/Plotting Functions/StreamPlot","content":"StreamPlot Wolfram Kernel Execution environment Generates a stream plot of the vector field vx,vy{v_x,v_y}vx​,vy​ as a function of xxx and yyy StreamPlot[{-1 - x^2 + y, 1 + x - y^2}, {x, -3, 3}, {y, -3, 3}] ","keywords":"","version":null},{"title":"VectorPlot3D","type":0,"sectionRef":"#","url":"/frontend/Reference/Plotting Functions/VectorPlot3D","content":"VectorPlot3D Wolfram Kernel Execution environment Generates a 3D vector plot of the vector field {vx,vy,vz} as a function of xxx, yyy, and zzz VectorPlot3D[{x, y, z}, {x, -1, 1}, {y, -1, 1}, {z, -1, 1}] ","keywords":"","version":null},{"title":"SlideEventListener","type":0,"sectionRef":"#","url":"/frontend/Reference/Slides/SlideEventListener","content":"","keywords":"","version":null},{"title":"Options​","type":1,"pageTitle":"SlideEventListener","url":"/frontend/Reference/Slides/SlideEventListener#options","content":" ","version":null,"tagName":"h2"},{"title":"\"Id\"​","type":1,"pageTitle":"SlideEventListener","url":"/frontend/Reference/Slides/SlideEventListener#id","content":" a string representation of an event identifier, that will be used  ","version":null,"tagName":"h3"},{"title":"Event generation​","type":1,"pageTitle":"SlideEventListener","url":"/frontend/Reference/Slides/SlideEventListener#event-generation","content":" It fires an event for a given slide (where it is placed) when it is revealed with a topic &quot;Slide&quot; and for each slide-fragment revealed &quot;fragment-x&quot; topic / pattern.  i.e.  ","version":null,"tagName":"h2"},{"title":"Patterns​","type":1,"pageTitle":"SlideEventListener","url":"/frontend/Reference/Slides/SlideEventListener#patterns","content":" &quot;Slide&quot;​  fires when a slide was revealed (even the first one)  &quot;fragment-_&quot;​  where _ is a number of a fragment revealed on a slide  &quot;Mounted&quot;​  fires, once an HTML content for a slide is ready  &quot;Left&quot;​  fires, once a user leaves the slide (goes to the next or previous one) with an integer as a payload, that gives the direction  &quot;Destroy&quot;​  fires, once a presentation was closed for some reason  Try  EventHandler[&quot;myEvent&quot;, {any_String :&gt; (Print[StringTemplate[&quot;::``:: ``&quot;][any, #]]&amp;)}];   .slide # 1st Slide Nothing --- # 2nd Slide A message pops up Another message &lt;!-- .element: class=&quot;fragment&quot; data-fragment-index=&quot;1&quot; --&gt; &lt;SlideEventListener Id={&quot;myEvent&quot;}/&gt;  ","version":null,"tagName":"h3"},{"title":"Slides","type":0,"sectionRef":"#","url":"/frontend/Reference/Slides/","content":"","keywords":"","version":null},{"title":"Constructor​","type":1,"pageTitle":"Slides","url":"/frontend/Reference/Slides/#constructor","content":" Once evaluated it returns Slides as an object with a current window connection (aka CurrentWindow) and other properties  tip Always call the constructor on the window, where the slides will be shown  ","version":null,"tagName":"h2"},{"title":"Methods​","type":1,"pageTitle":"Slides","url":"/frontend/Reference/Slides/#methods","content":" It provides a direct access to RevealJS engine  ","version":null,"tagName":"h2"},{"title":"EventFire​","type":1,"pageTitle":"Slides","url":"/frontend/Reference/Slides/#eventfire","content":" It extends EventFire acting like an event object  EventFire[o_Slides, APICommand_String, data_]   where APICommand is a RevealJS API  For example to navigate to the next slide  EventFire[o_Slides, &quot;navigateNext&quot;, 1]  ","version":null,"tagName":"h3"},{"title":"ListPlay","type":0,"sectionRef":"#","url":"/frontend/Reference/Sound/ListPlay","content":"","keywords":"","version":null},{"title":"Options​","type":1,"pageTitle":"ListPlay","url":"/frontend/Reference/Sound/ListPlay#options","content":" ","version":null,"tagName":"h2"},{"title":"SampleRate​","type":1,"pageTitle":"ListPlay","url":"/frontend/Reference/Sound/ListPlay#samplerate","content":" The default is 8000 ","version":null,"tagName":"h3"},{"title":"Snippets","type":0,"sectionRef":"#","url":"/frontend/Snippets","content":"","keywords":"","version":null},{"title":"AI Assistant​","type":1,"pageTitle":"Snippets","url":"/frontend/Snippets#ai-assistant","content":" If nothing is selected, the given text in the command palette is sent to ChatGPT that has an access to your notebook    See more detailed guide on our assistant.  note It will ask you for a OpenAI API Key. You need to issue it first on the official openAI website  warning An initial system prompt that given AI the knowledge of available cells, details of used libraries and etc costs 3500 tokens  In general AI can do the following  print new cells in any languageread the current cell you dropped a cursor onread the language used in a cellupdate the full content of a cell  ","version":null,"tagName":"h2"},{"title":"Uploading data​","type":1,"pageTitle":"Snippets","url":"/frontend/Snippets#uploading-data","content":" There are a few snippets used for uploading ASCII data or any arbitrary files to the folder of your notebook    This snippet was built using regular Wolfram Language.  ","version":null,"tagName":"h2"},{"title":"Matrix helper​","type":1,"pageTitle":"Snippets","url":"/frontend/Snippets#matrix-helper","content":" To make it easier for typing matrixes, one can use the following snippet    This snippet inserts the given matrix into the cell where your last cursor was. A snippet was made using WLX cells for better customized look.  ","version":null,"tagName":"h2"},{"title":"Show available options​","type":1,"pageTitle":"Snippets","url":"/frontend/Snippets#show-available-options","content":" This snippet analyses the content of your cell from the left of your cursor position and prints Options for a given symbol    tip Drop a cursor in the middle of a symbol of interest. You can select and edit option values inside the picker  warning Not all options are supported for a standard library symbol of Wolfram Mathematica  ","version":null,"tagName":"h2"},{"title":"Navigation gizmo​","type":1,"pageTitle":"Snippets","url":"/frontend/Snippets#navigation-gizmo","content":" This feature is aimed to slightly blur the line between code and traditional GUI interface approaches for 2D/3D graphics design    It utilizes the dynamic reevaluation features of WLJS Notebook as well as powerful syntax sugar of an input editor.  Select 2D or 3D list of coordinates {}Type gizmo... in the command paletteEvaluate the cellDrag gizmo to the desired position and click on a check mark  It can also work in principle for most primitives    Or for 3D primitives as well    ","version":null,"tagName":"h2"},{"title":"Format Wolfram Language code​","type":1,"pageTitle":"Snippets","url":"/frontend/Snippets#format-wolfram-language-code","content":" This is also a code formatter available    It acts on a selected text or on the entire cell if nothing is selected  ","version":null,"tagName":"h2"},{"title":"Text formatting​","type":1,"pageTitle":"Snippets","url":"/frontend/Snippets#text-formatting","content":" This snippet provides some basic tool for styling Wolfram expression, as well as text on slides, HTML and Markdown (it tries to guess the cell type and use a suitable method for each cell type)    warning This feature is quite primitive and still in development  ","version":null,"tagName":"h2"},{"title":"Take a picture​","type":1,"pageTitle":"Snippets","url":"/frontend/Snippets#take-a-picture","content":" It uses your active web camera pipes a picture to Wolfram Kernel as Image object   ","version":null,"tagName":"h2"},{"title":"BarChart","type":0,"sectionRef":"#","url":"/frontend/Reference/Plotting Functions/BarChart","content":"","keywords":"","version":null},{"title":"Examples​","type":1,"pageTitle":"BarChart","url":"/frontend/Reference/Plotting Functions/BarChart#examples","content":" Set the style for bars  BarChart[Range[8], ChartStyle -&gt; &quot;DarkRainbow&quot;]     chartwork with stacked bars  BarChart[RandomReal[1, {50, 50}], ChartLayout -&gt; &quot;Stacked&quot;, Axes -&gt; None, BarSpacing -&gt; {0, 0}, PerformanceGoal -&gt; &quot;Speed&quot;, ChartStyle -&gt; &quot;FallColors&quot;]    ","version":null,"tagName":"h2"},{"title":"Plot3D","type":0,"sectionRef":"#","url":"/frontend/Reference/Plotting Functions/Plot3D","content":"","keywords":"","version":null},{"title":"Example​","type":1,"pageTitle":"Plot3D","url":"/frontend/Reference/Plotting Functions/Plot3D#example","content":" Plot functions with branch cuts  Plot3D[Im[ArcSin[(x + I y)^4]], {x, -2, 2}, {y, -2, 2}, Mesh -&gt; None, PlotStyle -&gt; Directive[Yellow, Opacity[0.8]], ExclusionsStyle -&gt; {None, Red} ]     Other examples  NDSolve[{D[u[t, x], t] == D[u[t, x], x, x], u[0, x] == 0, u[t, 0] == Sin[t], u[t, 5] == 0}, u, {t, 0, 10}, {x, 0, 5}]; Plot3D[Evaluate[u[t, x] /. %], {t, 0, 10}, {x, 0, 5}, PlotRange -&gt; All, ColorFunction -&gt; &quot;SunsetColors&quot;]    ","version":null,"tagName":"h2"},{"title":"Troubleshooting","type":0,"sectionRef":"#","url":"/frontend/Troubleshooting/","content":"","keywords":"","version":null},{"title":"App is damaged​","type":1,"pageTitle":"Troubleshooting","url":"/frontend/Troubleshooting/#app-is-damaged","content":" Please see Apple Silicon  ","version":null,"tagName":"h2"},{"title":"Browsers console​","type":1,"pageTitle":"Troubleshooting","url":"/frontend/Troubleshooting/#browsers-console","content":" Please locate the developer console (typically Window →\\rightarrow→ Toggle Developer Tools or using a right click with a mouse Inspect element) and copy the error messages and a few above it (5-10).  ","version":null,"tagName":"h2"},{"title":"Logs dump​","type":1,"pageTitle":"Troubleshooting","url":"/frontend/Troubleshooting/#logs-dump","content":" If it does not violate your privacy, there is a log-file, that records everything from the Wolfram Engine at the startup for 2 minutes.  You can locate it using File menu, then Locate AppData (installation directory), where in the root directory there is a file 2MinutesLog.txt and send to us.  ","version":null,"tagName":"h2"},{"title":"Hot line & general discussion chat​","type":1,"pageTitle":"Troubleshooting","url":"/frontend/Troubleshooting/#hot-line--general-discussion-chat","content":" Please feel free to join Telegram Group.  ","version":null,"tagName":"h2"},{"title":"Common cases​","type":1,"pageTitle":"Troubleshooting","url":"/frontend/Troubleshooting/#common-cases","content":" ","version":null,"tagName":"h2"},{"title":"UI was not loaded properly​","type":1,"pageTitle":"Troubleshooting","url":"/frontend/Troubleshooting/#ui-was-not-loaded-properly","content":" It might be an issue with sockets, try Window or Top-Menu →\\rightarrow→ Force reload or Reload  ","version":null,"tagName":"h3"},{"title":"The output of a cell does not look correct​","type":1,"pageTitle":"Troubleshooting","url":"/frontend/Troubleshooting/#the-output-of-a-cell-does-not-look-correct","content":" This might be connected with Boxes or some other decorations did work well, try to evaluate your expression with InputForm  % // InputForm   to prevent DisplayForm output.  tip Send an issue to Github  tip Feel free to contact us 🤗 ","version":null,"tagName":"h3"},{"title":"Text Elements","type":0,"sectionRef":"#","url":"/imgs/Drawing 2024-03-29 18.01.17.excalidraw","content":"==⚠ Switch to EXCALIDRAW VIEW in the MORE OPTIONS menu of this document. ⚠== Text Elements %% Drawing { &quot;type&quot;: &quot;excalidraw&quot;, &quot;version&quot;: 2, &quot;source&quot;: &quot;https://github.com/zsviczian/obsidian-excalidraw-plugin/releases/tag/1.9.3&quot;, &quot;elements&quot;: [ { &quot;id&quot;: &quot;LOmsu2xJtuoAxq5VjAEB4&quot;, &quot;type&quot;: &quot;rectangle&quot;, &quot;x&quot;: -176.24609375, &quot;y&quot;: -76.99609375, &quot;width&quot;: 296.1640625, &quot;height&quot;: 135.1640625, &quot;angle&quot;: 0, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;seed&quot;: 680122225, &quot;version&quot;: 107, &quot;versionNonce&quot;: 974112945, &quot;isDeleted&quot;: true, &quot;boundElements&quot;: null, &quot;updated&quot;: 1711731697632, &quot;link&quot;: null, &quot;locked&quot;: false } ], &quot;appState&quot;: { &quot;theme&quot;: &quot;light&quot;, &quot;viewBackgroundColor&quot;: &quot;#ffffff&quot;, &quot;currentItemStrokeColor&quot;: &quot;#1e1e1e&quot;, &quot;currentItemBackgroundColor&quot;: &quot;transparent&quot;, &quot;currentItemFillStyle&quot;: &quot;hachure&quot;, &quot;currentItemStrokeWidth&quot;: 1, &quot;currentItemStrokeStyle&quot;: &quot;solid&quot;, &quot;currentItemRoughness&quot;: 1, &quot;currentItemOpacity&quot;: 100, &quot;currentItemFontFamily&quot;: 1, &quot;currentItemFontSize&quot;: 20, &quot;currentItemTextAlign&quot;: &quot;left&quot;, &quot;currentItemStartArrowhead&quot;: null, &quot;currentItemEndArrowhead&quot;: &quot;arrow&quot;, &quot;scrollX&quot;: 609.25, &quot;scrollY&quot;: 393.8984375, &quot;zoom&quot;: { &quot;value&quot;: 1 }, &quot;currentItemRoundness&quot;: &quot;sharp&quot;, &quot;gridSize&quot;: null, &quot;currentStrokeOptions&quot;: null, &quot;previousGridSize&quot;: null }, &quot;files&quot;: {} } %%","keywords":"","version":null},{"title":"Symbolic programming","type":0,"sectionRef":"#","url":"/frontend/Symbolic programming","content":"","keywords":"","version":null},{"title":"Introduction​","type":1,"pageTitle":"Symbolic programming","url":"/frontend/Symbolic programming#introduction","content":" Let us have a look at an example  {1,1,2,2,2,2} /. {2 -&gt; 1, 1 -&gt; 0}     Integer numbers are so-called atoms of the language on which we can apply any transformation rule. Or we can use more general pattern  {0,0,1,1,1,1} /. {any_Integer :&gt; any / 2}     Here what you see  12\\frac{1}{2}21​  is actually written in the code editor as  raw text (*FB[*)((1)(*,*)/(*,*)(2))(*]FB*)   Looking closely on it, we can se that the it is still a normal (1/2) expression like in any other programming language. However, it is wrapped with some special comment blocks, that tells an editor how to render it. One can go quite far with it    Any output expression is editable and can be reevaluated as well  One can go even further in exploring the idea of symbolics and syntax sugar of our editor by applying more complicated rule  {0,0,1/2,1/2,1/2,1/2} /. {any_?NumericQ :&gt; {RGBColor[any, 1-any, 1], any} }     As one can see, Wolfram Language does not differentiate what you are entering: a color, a function, a number. All of them are normal Wolfram Language expressions.  There are also built-in expression used for styling the output  % // Transpose // TableForm   here % means to use the previous output    Or something more complicated  Table[If[PrimeQ[i], Framed[i, Background-&gt;Yellow], i], {i, 1, 20}]   this expression will make an array of numbers and highlight primes    If you try to evaluate it, all decorations will be gone and you get a normal-looking Wolfram Language array with numbers up to 20.  The same symbolic features count for Graphics. For example  Plot[x, {x,0,1}, PlotStyle -&gt; RGBColor[1/2, 1/2, 1]]     One might think, that this is an image, but not      info Everything is a set of Wolfram Expressions covered with a decoration. Underneath there is still a working code than can be copied  info Most symbols are abstract objects that represent ideas, which, then can be interpreted in many ways.  This is also valid for 3D graphics  Graphics3D[Sphere[]]       This is all a question of interpretation  What you see is only one form, however, taking the same symbol of Cuboid, we can treat it as a an abstract object that represents a corresponding geometric object, i.e.  Cuboid[{a1,a2,a3}, {b1,b2,b3}] // Volume   Abs[(-a1+b1) (-a2+b2) (-a3+b3)]   Raster images are also expressions. Try to drag and drop your image to an editor    What can you do with it? Anything! For instance  i // ColorNegate     or analyze a color distribution in LAB space  BubbleChart[ Append @@@ Tally[Round[ Flatten[ImageData[ColorConvert[i, &quot;LAB&quot;]], 1][[All, {2, 3}]], 10^-1]], ColorFunction -&gt; (LABColor[.6, ##] &amp;), ColorFunctionScaling -&gt; False, BubbleSizes -&gt; {0.01, 0.1}]     If you like math like me, you will probably find it useful to work in MatrixForm  {{a,b}, {c,d}} // MatrixForm     And it is still fine to work with it like if it was a normal list of lists (matrix)    tip Use Snippets for easy matrix drawing  Or combining it with other syntax sugar, one can do quite weird things  Table[RGBColor[1,a,b], {a,0,1,0.25}, {b,0,1,0.25}]// MatrixForm     Syntax sugar and decorations also serves the purpose of abstracting classical OOP objects providing a short summary  NumericArray[{1,2,3,4,5,6}]     which is still a normal symbol, which can be copied somewhere else.  For instance DateObject is rendered as a date  Now     Time-series has also its own representation  v = {2, 1, 6, 5, 7, 4}; t = {1, 2, 5, 10, 12, 15}; ts = TimeSeries[v, {t}]     And the last example of a syntax sugar is ListPlay, which is quite experimental, but allows to play or generate sound right in the notebook  ListPlay[Table[Sin[2 π 50 t], {t, 0, 1, 1./2000}]]     If you have too much data, then turn it into an icon using Iconize  Table[i, {i, 100}] // Iconize     It uses zlib to compress it and store as BASE64 string inside the notebook. However, it the size does exceed a few kilobytes the data will be offloaded to a file and an icon will be turned into a short reference.  info Those are built-in features, there is no extra privilege for them compared to user's code. You may implement your own objects with beautiful syntax sugar and etc. ","version":null,"tagName":"h2"},{"title":"feinput.gif","type":0,"sectionRef":"#","url":"/imgs/feinput.gif","content":"feinput.gif","keywords":"","version":null},{"title":"Plotly","type":0,"sectionRef":"#","url":"/frontend/Reference/Plotly/","content":"","keywords":"","version":null},{"title":"Constructor​","type":1,"pageTitle":"Plotly","url":"/frontend/Reference/Plotly/#constructor","content":" Once called it returns PlotlyInstance  ","version":null,"tagName":"h2"},{"title":"Dynamics​","type":1,"pageTitle":"Plotly","url":"/frontend/Reference/Plotly/#dynamics","content":" It fully supports dynamics, but in a different way compared to other functions. Please see for that PlotlyAddTraces, PlotlyAnimate and etc.  ","version":null,"tagName":"h2"},{"title":"Examples​","type":1,"pageTitle":"Plotly","url":"/frontend/Reference/Plotly/#examples","content":" ","version":null,"tagName":"h2"},{"title":"Scatter plot​","type":1,"pageTitle":"Plotly","url":"/frontend/Reference/Plotly/#scatter-plot","content":" Adapted from Ref.  trace1 = &lt;| &quot;x&quot; -&gt; {1, 2, 3, 4}, &quot;y&quot; -&gt; {10, 15, 13, 17}, &quot;mode&quot; -&gt; &quot;markers&quot;, &quot;type&quot; -&gt; &quot;scatter&quot; |&gt;; Plotly[trace1]     or with colors  trace1 = &lt;| &quot;y&quot; -&gt; Table[5, {i, 1, 40}], &quot;mode&quot; -&gt; &quot;markers&quot;, &quot;marker&quot; -&gt; &lt;| &quot;size&quot; -&gt; 40, &quot;color&quot; -&gt; Range[40] |&gt; |&gt;; Plotly[trace1]     ","version":null,"tagName":"h3"},{"title":"Line charts​","type":1,"pageTitle":"Plotly","url":"/frontend/Reference/Plotly/#line-charts","content":" Adapted from Ref  trace1 = &lt;| &quot;x&quot; -&gt; {1, 2, 3, 4}, &quot;y&quot; -&gt; {10, 15, 13, 17}, &quot;type&quot; -&gt; &quot;line&quot; |&gt;; Plotly[trace1]     or an array of traces  trace := &lt;| &quot;y&quot; -&gt; RandomReal[{-1,1}, 10], &quot;type&quot; -&gt; &quot;line&quot; |&gt;; Plotly[{trace, trace, trace}]     ","version":null,"tagName":"h3"},{"title":"Bar plot​","type":1,"pageTitle":"Plotly","url":"/frontend/Reference/Plotly/#bar-plot","content":" Adapted from PlotlyJS  trace = &lt;| &quot;x&quot; -&gt; {&quot;giraffes&quot;, &quot;orangutans&quot;, &quot;monkeys&quot;}, &quot;y&quot; -&gt; {20, 14, 23}, &quot;type&quot; -&gt; &quot;bar&quot; |&gt;; Plotly[trace]     ","version":null,"tagName":"h3"},{"title":"Pie chart​","type":1,"pageTitle":"Plotly","url":"/frontend/Reference/Plotly/#pie-chart","content":" Adapted from PlotlyJS  trace = &lt;| &quot;values&quot; -&gt; {19, 26, 55}, &quot;labels&quot; -&gt; {&quot;Residential&quot;, &quot;Non-Residential&quot;, &quot;Utility&quot;}, &quot;type&quot; -&gt; &quot;pie&quot; |&gt;; Plotly[trace]     ","version":null,"tagName":"h3"},{"title":"Bubble chart​","type":1,"pageTitle":"Plotly","url":"/frontend/Reference/Plotly/#bubble-chart","content":" Adapted from PlotlyJS  data = &lt;| &quot;x&quot; -&gt; {1, 2, 3, 4}, &quot;y&quot; -&gt; {10, 11, 12, 13}, &quot;mode&quot; -&gt; &quot;markers&quot;, &quot;marker&quot; -&gt; &lt;| &quot;size&quot; -&gt; {40, 60, 80, 100} |&gt; |&gt;; Plotly[data]     ","version":null,"tagName":"h3"},{"title":"Heatmaps​","type":1,"pageTitle":"Plotly","url":"/frontend/Reference/Plotly/#heatmaps","content":" Adapted from PlotlyJS  data = &lt;| &quot;z&quot; -&gt; Table[x y, {x,-10,10}, {y,-10,10}], &quot;type&quot; -&gt; &quot;heatmap&quot; |&gt;; Plotly[data]     ","version":null,"tagName":"h3"},{"title":"Contour Plots​","type":1,"pageTitle":"Plotly","url":"/frontend/Reference/Plotly/#contour-plots","content":" Adapted from PlotlyJS  data = Flatten[Table[{x,y,x y}, {x,-10,10}, {y,-10,10}],1] // Transpose; data = &lt;| &quot;x&quot; -&gt; data[[1]], &quot;y&quot; -&gt; data[[2]], &quot;z&quot; -&gt; data[[3]], &quot;type&quot; -&gt; &quot;contour&quot; |&gt;; Plotly[data]     ","version":null,"tagName":"h3"},{"title":"Surface plot​","type":1,"pageTitle":"Plotly","url":"/frontend/Reference/Plotly/#surface-plot","content":" Adapted from PlotlyJS  data = &lt;| &quot;z&quot; -&gt; Table[x y, {x,-10,10}, {y,-10,10}], &quot;type&quot; -&gt; &quot;surface&quot; |&gt;; Plotly[data]     ","version":null,"tagName":"h3"},{"title":"WebGL Scatter​","type":1,"pageTitle":"Plotly","url":"/frontend/Reference/Plotly/#webgl-scatter","content":" A GPU accelerated scatter plot used for displaying many points  data = RandomReal[{-1,1}, {2,100000}]; Plotly[&lt;| &quot;y&quot; -&gt; data[[2]], &quot;x&quot; -&gt; data[[1]], &quot;mode&quot;-&gt; &quot;markers&quot;, &quot;type&quot;-&gt; &quot;scattergl&quot; |&gt;]     50x zoom  ","version":null,"tagName":"h3"},{"title":"Many more!​","type":1,"pageTitle":"Plotly","url":"/frontend/Reference/Plotly/#many-more","content":" Please visit PlotlyJS website  ","version":null,"tagName":"h3"},{"title":"TODO​","type":1,"pageTitle":"Plotly","url":"/frontend/Reference/Plotly/#todo","content":" Developers notes   Integrate events system with click events and others... ","version":null,"tagName":"h2"},{"title":"Apple Silicon","type":0,"sectionRef":"#","url":"/frontend/Troubleshooting/Apple Silicon","content":"","keywords":"","version":null},{"title":"Running from the browser​","type":1,"pageTitle":"Apple Silicon","url":"/frontend/Troubleshooting/Apple Silicon#running-from-the-browser","content":" In principle, once you have Wolfram Engine installed and activated, it is possible to run WLJS Notebook from the terminal like Jupyter Notebook  Clone repository using git or download zip archive. Here is a direct linkUnzip the file and open your Terminal app in this folderRun the command  wolframscript -f Scripts/start.wls   Once a message has popped up  Open http://127.0.0.1:20560 in your browser   open your browser using the corresponding link  ","version":null,"tagName":"h2"},{"title":"Bypassing Gatekeeper​","type":1,"pageTitle":"Apple Silicon","url":"/frontend/Troubleshooting/Apple Silicon#bypassing-gatekeeper","content":" This is a common solution among most Electron developers, who do not have a paid license form Apple.  Install a Desktop app normally from instructionOpen your terminal app and run the command  xattr -cr &quot;&lt;installation location of WLJS Notebook&gt;.app&quot;   Then it should work like normal Desktop app  ","version":null,"tagName":"h2"},{"title":"Building from source​","type":1,"pageTitle":"Apple Silicon","url":"/frontend/Troubleshooting/Apple Silicon#building-from-source","content":" You can also build a copy of an application by yourself. You will need to install  Node JSXcode Command Line Tools (possible, may be not necessary)  Clone repository using git or download zip archive. Here is a direct linkUnzip the file and open your Terminal app in this folderRun the command  npm i   Build the binary  npm run dist   Locate .dmg file in the directory ./dist/ and install it from there like a normal App ","version":null,"tagName":"h2"},{"title":"Containers","type":0,"sectionRef":"#","url":"/interpreter/Advanced/containers","content":"","keywords":"","version":null},{"title":"Dynamic binding​","type":1,"pageTitle":"Containers","url":"/interpreter/Advanced/containers#dynamic-binding","content":" second key feature, why we need containersThe ideas for WLJS Frontend were inspired by an amazing project Observable - JavaScript notebook interface working in the browser, where the dynamics was polished perfectly.  In Observable all expressions are Dynamic in terms of Mathematica by the default. Me, as a maintainer (@JerryI) I tried to bring it as close as possible to such behaviour, leaving out lags of Mathematica's frontend and functions overhead as mush as possible.  Therefore, all user's defined symbols are containers, all graphics objects should also be containers, and all containers are dynamic by default.    The change in one will cause the updates to ones, which depends on it. This behaviuor is achieved by collecting all calls of front-end functions and storing them to special handlers assigned to each object. In principle we do not even need WL Kernel to update the content, just WLJS interpreter is already enough.  info Update event propagates only to the first nearest parent  info Update event is fired on the instance on a container, not on the inner expressions. After that the container reevaluates itself with a method update applied to all nested expressions  We just scratched a top of the surface, the things you can do with it are quite bigger... ","version":null,"tagName":"h3"},{"title":"Meta markers","type":0,"sectionRef":"#","url":"/interpreter/Advanced/meta-markers","content":"","keywords":"","version":null},{"title":"🎡 Example​","type":1,"pageTitle":"Meta markers","url":"/interpreter/Advanced/meta-markers#-example","content":" Lets draw some random lines, where each line has a dynamic variable, that specifies the beginning, while the end will be a random fixed value  Details (* to be able to animate we need a container *) FrontEndVirtual[{ (* attach a dom element to draw *) AttachDOM[&quot;canvas&quot;], (* mark this instance by uid *) Graphics[{PointSize[0.02], MetaMarker[&quot;plot&quot;]}] }]; j = 0; (* now we can directly inject new points into already existing object *) last = {0,0}; While[j &lt; 300, With[{try = RandomReal[{- 1,1}, 2]}, FrontSubmit[{ RGBColor[RandomSample[{{1,0,0}, {0,1,1}, {1,0,1}}]//First], Line[{last, try}] }, MetaMarker[&quot;plot&quot;]]; last = try; ]; Pause[0.5]; j = j + 1; ]; As one can see, an expression inside Placed will be evaluated inside the instance found by the meta-marker. last variable is global, therefore it causes a dynamic update of all added lines.  This will lead to the following results       ","version":null,"tagName":"h3"},{"title":"ListContourPlot","type":0,"sectionRef":"#","url":"/frontend/Reference/Plotting Functions/ListContourPlot","content":"","keywords":"","version":null},{"title":"Example​","type":1,"pageTitle":"ListContourPlot","url":"/frontend/Reference/Plotting Functions/ListContourPlot#example","content":" Generate contours from an array of heights  ListContourPlot[Table[Sin[i + j^2], {i, 0, 3, 0.1}, {j, 0, 3, 0.1}]]     Or give explicit x,y,zx,y,zx,y,z coordinates for the data  data = Table[{x = RandomReal[{-2, 2}], y = RandomReal[{-2, 2}], Sin[x y]}, {1000}]; ListContourPlot[data]    ","version":null,"tagName":"h2"},{"title":"Working with graphics","type":0,"sectionRef":"#","url":"/interpreter/Basics/graphics","content":"","keywords":"","version":null},{"title":"Easy animations​","type":1,"pageTitle":"Working with graphics","url":"/interpreter/Basics/graphics#easy-animations","content":" Since wljs-graphics-d3 provides transitions on update, it is extremely easy to make some complicated animations  data = RandomReal[{-1,1}, {400,2}]; FrontEndVirtual[{ AttachDOM[&quot;canvas&quot;]; Graphics[{RGBColor[1.0,0.,0.5], Point[data]}, &quot;TransitionDuration&quot;-&gt;0]; }]; Table[ data = (1 - t) RandomReal[{-1,1}, {400,2}] + t Table[{Sin[3i], Cos[2i]}, {i, 0, 6.28, 6.28/400}]; Pause[0.1]; , {t, 0, 1, 0.025}];   Each time we update data variable, the transition between frames happends automatically based on selected TransitionDuration       ","version":null,"tagName":"h2"},{"title":"StackedListPlot","type":0,"sectionRef":"#","url":"/frontend/Reference/Plotting Functions/StackedListPlot","content":"","keywords":"","version":null},{"title":"Example​","type":1,"pageTitle":"StackedListPlot","url":"/frontend/Reference/Plotting Functions/StackedListPlot#example","content":" Plot a stacked list of yyy values  StackedListPlot[{{3, 2, 1, 6, 4, 7, 7, 2, 3, 1}, {7, 8, 8, 3, 5, 9, 10, 3, 10, 10}, {10, 2, 4, 8, 4, 10, 8, 4, 5, 3}}]    ","version":null,"tagName":"h2"},{"title":"Architecture of symbols","type":0,"sectionRef":"#","url":"/interpreter/Advanced/architecture","content":"","keywords":"","version":null},{"title":"Features​","type":1,"pageTitle":"Architecture of symbols","url":"/interpreter/Advanced/architecture#features","content":" Let us show the most essential parts  ","version":null,"tagName":"h2"},{"title":"Symbol definition​","type":1,"pageTitle":"Architecture of symbols","url":"/interpreter/Advanced/architecture#symbol-definition","content":" In general the rule is  context.Symbol = async (arguments, env) =&gt; { //evaluating arguments const a = await interpretate(arguments[0], env); //body some calculations //may return or not return result; }   ","version":null,"tagName":"h3"},{"title":"Contexts​","type":1,"pageTitle":"Architecture of symbols","url":"/interpreter/Advanced/architecture#contexts","content":" To prevent the mess of duplicated function names and etc, you can specify the context or let's say library of symbols using  var library = {}; interpretate.extendContext(library); library.Symbol = async (args, env) =&gt; {/*...*/}   The interpreter will check all available contexts and find the first match. However, you can prioritize the context providing the information in env object  core.GrandSymbol = async (args, env) =&gt; { const data = await interpretate(args, {...env, context: library}); //... }   More about env object is here Meta Data.  In the same manner, the separation between Line[] used in Graphics3D and in Graphics functions was made.  ","version":null,"tagName":"h3"},{"title":"External functions​","type":1,"pageTitle":"Architecture of symbols","url":"/interpreter/Advanced/architecture#external--functions","content":" caution This feature is still in development  If the called expression was not found in all available contexts, the interpreter will extend core with a server-call, i.e. will ask kernel to evaluate the unknown symbol and return back the result.  By the default, those special missing expressions becomes in the end virtual containers and can call update method on other containerized functions.  See executables and Sub symbols for more information about methods and etc.  ","version":null,"tagName":"h3"},{"title":"Metadata​","type":1,"pageTitle":"Architecture of symbols","url":"/interpreter/Advanced/architecture#metadata","content":" To share some data between functions, to use local and global memory of the executable objects, specifying methods of evaluation and DOM access the following object is provided  env = { element: document.element, /* a Code Mirror widget */ context: core, /* default context */ /* subsymbol */ method: undefined | 'update' | 'destory', /* global and local memory of front-end objects*/ local: {}, global: {call: uid}, numerical: false, /* keep symbolic or not */ hold: false /* keep exps in a List and JS Objects */ unsafe: false /* allows to ask Wolfram Kernel for undefined symbols */ novirtual: false /* prevents creatation of virtual containers (all functions inside are executed normally) */ /* anything you want to share */ root: ExecutableObject/* a reference to the FrontEndObject container */ ... //anything else you want }   local and global cannot be deeply-copied, therefore they will be the same for all nested expressions if the expression is containerized (frontend object or virtual), then local will be overridden.  Ones, which ave the most influence to the process of interpreting, are  context - prioritizes the context to fetch, the symbol to evaluate. See section Contextsmethod - it is meant to specify a sub-symbol for the whole three of WL expression (or in practice so-called method of interpreting)  Methods | Sub-symbols​  undefined (leave empty)update - usually called when the sub-expression was updateddestroy - used only on the wolfram frontend, when the widget was removed  The following sub-symbols can be defined as  core.MySymbol = (args, env) =&gt; {} core.MySymbol.update = (args, env) =&gt; {} core.MySymbol.destory = (args, env) =&gt; {}   You can think about it if it was a class definition with a constructor and several methods.  tip It is good to declare update method for your function, even if you do not plan to use it explicitly, define core.MySymbol.update = core.MySymbol  For the sake of performance, when something changes with the data inside the plot, there is no need to reevaluate the whole tree of WL expressions. Therefore, we can specify the method of reevaluation  //to create a plot core.ListLinePlotly = (args, env) =&gt; { ... Plotly.newPlot(env.element, data) } //to update only the data core.ListLinePlotly.update = (args, env) =&gt; { ... Plotly.restyle(env.element, newdata) }   When a nested expression was changed, the nearest parent can be called using update method like on a picture    In principle, interpreter has no idea about what update and etc means, one can write any &quot;method&quot;, which is basically just a sub-symbol.  For Graphics3D object is crucial to use destroy method, when object has removed from the editor, since it is necessary to remove the animation cycle  core.Graphics3D.destroy = (args, env) =&gt; { cancelAnimationFrame(env.local.aid); //to cancel the animation }   DOM​  When the WL expressing is called via FrontEndVirtual on editor's side it creates local memory and unique identifier, where one can attach DOM element using  AttachDOM[&quot;dom-element-id&quot;]   which is accessible by env.element field  core.Canvas = (args, env) =&gt; { const canvas = document.createElement('canvas'); env.element.append(canvas); //.... }   Global and local memory​  env.global is visible to all containers and its inner WL expressions, where env.global.stack contains the call-treeenv.local is isolated memory related to individual executable functions, i.e. real or virtual containers.  core.MyFunction = (args, env) =&gt; { env.local = {} //pointer to the local memory of the instance env.global = {} //pointer to the global memory of the call tree env //sharable memory }  ","version":null,"tagName":"h3"},{"title":"Plot","type":0,"sectionRef":"#","url":"/frontend/Reference/Plotting Functions/Plot","content":"","keywords":"","version":null},{"title":"Options​","type":1,"pageTitle":"Plot","url":"/frontend/Reference/Plotting Functions/Plot#options","content":" ","version":null,"tagName":"h2"},{"title":"PlotStyle​","type":1,"pageTitle":"Plot","url":"/frontend/Reference/Plotting Functions/Plot#plotstyle","content":" Works as in Mathematica, i.e. per element in expr array, supports color, opacity and etc  Plot[Table[x^y, {y, 6}]//Evaluate, {x, 0,1}, PlotStyle-&gt;Table[Blend[{Red, Blue}, i/6], {i, 6}]]     ","version":null,"tagName":"h3"},{"title":"AxesLabel​","type":1,"pageTitle":"Plot","url":"/frontend/Reference/Plotting Functions/Plot#axeslabel","content":" Place labels on your axes  Plot[Sinc[x], {x, 0, 10}, AxesLabel -&gt; {&quot;x&quot;, &quot;Sinc[x]&quot;}]     Labels accepts only strings or numbers unlike Mathematica, where you can put everything.  Since it is translated into Text, one can use sort of TeX math input  Plot[PDF[NormalDistribution[0, 1], x], {x, -10, 10}, AxesLabel -&gt; {&quot;wavenumber (cm^{-1})&quot;, &quot;absorption \\\\alpha&quot;}, PlotRange-&gt;Full]     It also supports Offset attribute  Plot[PDF[NormalDistribution[0, 1], x], {x, -10, 10}, AxesLabel -&gt; {Offset[&quot;wavenumber (cm^{-1})&quot;, {0,0.05}], &quot;absorption \\\\alpha&quot;}, PlotRange-&gt;Full]     ","version":null,"tagName":"h3"},{"title":"Ticks​","type":1,"pageTitle":"Plot","url":"/frontend/Reference/Plotting Functions/Plot#ticks","content":" Customize ticks by providing an array of numbers for both axes  Plot[x, {x, 0, 1}, Ticks-&gt;{{0, 0.5, 1}, {}}]     Or by providing as pairs {Number, String} one can specify the displayed text  Plot[x, {x, 0, 1}, Ticks-&gt;{{{0, &quot;Zero&quot;}, {0.5, &quot;Half&quot;}, {1,&quot;One&quot;}}, {}}]     ","version":null,"tagName":"h3"},{"title":"Controls 💛​","type":1,"pageTitle":"Plot","url":"/frontend/Reference/Plotting Functions/Plot#controls-","content":" This is more an option for Graphics, but with a bit of a hacking it can be used here as well. The features allows to pan and zoom your plots, that was never possible in Mathematica  Plot[Sin[1/x], {x, 0.001, 0.1}, MaxRecursion-&gt;1]; Insert[%, Controls-&gt;True, {2,-1}]     Try to use your mouse here  ","version":null,"tagName":"h3"},{"title":"Frame​","type":1,"pageTitle":"Plot","url":"/frontend/Reference/Plotting Functions/Plot#frame","content":" Turns plot into the journals-like styled graph. In general it has much more options to customize the look  Plot[x, {x, 0, 1}, Frame-&gt;True]     FrameTicks​  The same as Ticks, but for this regime.  FrameLabels​  The same as AxesLabel  Plot[x, {x, 0, 1}, Frame-&gt;True, FrameLabel-&gt;{&quot;x-axis&quot;, &quot;y-axis&quot;}]     FrameStyle​  Affects the style of FrameLabels. Use Directive for changing the style  Plot[x, {x, 0, 1}, Frame-&gt;True, FrameLabel-&gt;{&quot;x-axis&quot;, &quot;y-axis&quot;}, FrameStyle-&gt;Directive[FontSize-&gt;16]]     FrameTicksStyle​  Affects the style of FrameTicks  Plot[x, {x, 0, 1}, Frame-&gt;True, FrameLabel-&gt;{&quot;x-axis&quot;, &quot;y-axis&quot;}, FrameTicksStyle-&gt;Directive[FontSize-&gt;16]]     TickLabels​  info Since Plot options are hardcoded in WL core, we cannot add new options, however using trick with Insert any values can be provided to the resulting Graphics expression  To remove unnecessary ticks, use  Plot[x, {x, 0, 1}, Frame-&gt;True]; Insert[%, &quot;TickLabels&quot;-&gt;{{True, False}, {True, False}}, {2,-1}]     ","version":null,"tagName":"h3"},{"title":"ClippingStyle​","type":1,"pageTitle":"Plot","url":"/frontend/Reference/Plotting Functions/Plot#clippingstyle","content":" Show the clipped regions like the rest of the curve and colored  Plot[Sin[x]/x^2, {x, -10, 10}, ClippingStyle -&gt; Red]     ","version":null,"tagName":"h3"},{"title":"Filling​","type":1,"pageTitle":"Plot","url":"/frontend/Reference/Plotting Functions/Plot#filling","content":" Fill the area under, over of between curves  Plot[Evaluate[Table[BesselJ[n, x], {n, 4}]], {x, 0, 10}, Filling -&gt; Axis]     Possible options will be  BottomTop{1 -&gt; {2}} from curve 1 to 2  ","version":null,"tagName":"h3"},{"title":"Baseline​","type":1,"pageTitle":"Plot","url":"/frontend/Reference/Plotting Functions/Plot#baseline","content":" Align graphs by the xxx axis in each plot:  {Plot[Im[Zeta[1/2 + I t]], {t, -20, 20}, BaselinePosition -&gt; Axis], Plot[Re[Zeta[1/2 + I t]], {t, -20, 20}, BaselinePosition -&gt; Axis]} // Row   ","version":null,"tagName":"h3"},{"title":"Epilog​","type":1,"pageTitle":"Plot","url":"/frontend/Reference/Plotting Functions/Plot#epilog","content":" Puts any graphics object on top of the data plotted  Plot[Sin[x], {x, 0, 2 Pi}, Epilog -&gt; {PointSize[0.04], Point[{0, 0}], Point[{Pi, 0}], Point[{2 Pi, 0}]}]     It opens up many possibilities, since it provides low-level access to the Graphics canvas.  ","version":null,"tagName":"h3"},{"title":"Prolog​","type":1,"pageTitle":"Plot","url":"/frontend/Reference/Plotting Functions/Plot#prolog","content":" The same as Epilog, but acts before plotting the data.  ","version":null,"tagName":"h3"},{"title":"ExclusionsStyle​","type":1,"pageTitle":"Plot","url":"/frontend/Reference/Plotting Functions/Plot#exclusionsstyle","content":" Use red lines to indicate the vertical asymptotes  Plot[Tan[x], {x, 0, 10}, Exclusions -&gt; {Cos[x] == 0}, ExclusionsStyle -&gt; Red]     ","version":null,"tagName":"h3"},{"title":"ImageSize​","type":1,"pageTitle":"Plot","url":"/frontend/Reference/Plotting Functions/Plot#imagesize","content":" A common option for any graphics  ImageSize -&gt; Width   or  ImageSize -&gt; {Width, Height}   It uses pixels as units  ","version":null,"tagName":"h3"},{"title":"MaxReqursion​","type":1,"pageTitle":"Plot","url":"/frontend/Reference/Plotting Functions/Plot#maxreqursion","content":" Affects the accuracy of the plot when it comes to the sudden changes of a sampled function  Plot[Sin[1/x], {x, 0.001, 0.1}, MaxRecursion-&gt;1]     The lowest values is 0  ","version":null,"tagName":"h3"},{"title":"Mesh​","type":1,"pageTitle":"Plot","url":"/frontend/Reference/Plotting Functions/Plot#mesh","content":" Shows sampling points  Plot[Sin[1/x], {x, 0.001, 0.1}, Mesh -&gt; All]     ","version":null,"tagName":"h3"},{"title":"PeformanceGoal​","type":1,"pageTitle":"Plot","url":"/frontend/Reference/Plotting Functions/Plot#peformancegoal","content":" Affects the number of sampling points to reduce the load  &quot;Speed&quot;&quot;Quality&quot;  ","version":null,"tagName":"h3"},{"title":"PlotPoints​","type":1,"pageTitle":"Plot","url":"/frontend/Reference/Plotting Functions/Plot#plotpoints","content":" Change the initial sampling points  a number  ","version":null,"tagName":"h3"},{"title":"PlotLegends​","type":1,"pageTitle":"Plot","url":"/frontend/Reference/Plotting Functions/Plot#plotlegends","content":" Is quite limited. Accepts Automatic, &quot;Expressions&quot; or List of expressions to show  ","version":null,"tagName":"h3"},{"title":"PlotRange​","type":1,"pageTitle":"Plot","url":"/frontend/Reference/Plotting Functions/Plot#plotrange","content":" Change the lot range to show the whole area  Plot[Sqrt[x], {x, -5, 5}, PlotRange -&gt; Full]     Or a custom range  Plot[Sqrt[x], {x, -5, 5}, PlotRange -&gt; {{-5,5}, {0,1}}]     ","version":null,"tagName":"h3"},{"title":"RegionFunction​","type":1,"pageTitle":"Plot","url":"/frontend/Reference/Plotting Functions/Plot#regionfunction","content":" Show the specific area only  Plot[Sin[x], {x, 0, 8 Pi}, RegionFunction -&gt; Function[{x, y}, Abs[y] &gt; 0.5]]     ","version":null,"tagName":"h3"},{"title":"Axes​","type":1,"pageTitle":"Plot","url":"/frontend/Reference/Plotting Functions/Plot#axes","content":" caution Currently is not supported by Graphics ;(  Show or hide axes of the plot  Plot[Sinc[x], {x, 0, 10}, Axes -&gt; False]  ","version":null,"tagName":"h3"},{"title":"Syntax","type":0,"sectionRef":"#","url":"/interpreter/Basics/syntax","content":"","keywords":"","version":null},{"title":"Libraries​","type":1,"pageTitle":"Syntax","url":"/interpreter/Basics/syntax#libraries","content":" The interpreter provides only the minimum-necessary set of functions, to bring Graphics and Graphics3D (or if you are using Wolfram JS Frontend you need set of sliders and other building blocks for GUI) you should consider to use it together with the following packages  wljs-graphics-d3 (see Docs here)wljs-graphics3d-threejs (see Docs here)  Just simply include dist/kernel.js file into the web-page as a module using CDN  &lt;script type=&quot;module&quot; src=&quot;https://cdn.statically.io/gh/JerryI/wljs-interpreter/main/src/interpreter.js&quot;&gt;&lt;/script&gt;  ","version":null,"tagName":"h2"},{"title":"Reference","type":0,"sectionRef":"#","url":"/interpreter/Extras/reference","content":"Reference Please see interpretate and other pages there","keywords":"","version":null},{"title":"Minimal Wolfram Language Interpreter","type":0,"sectionRef":"#","url":"/interpreter/intro","content":"","keywords":"","version":null},{"title":"Quick start​","type":1,"pageTitle":"Minimal Wolfram Language Interpreter","url":"/interpreter/intro#quick-start","content":" To run a sandbox you need to have only wolframscript, nodejs and any modern browser installed  caution Wolfram Kernel only runs HTTP server and provides the transpiling from WL language syntax to JSON representation, since there is no freeware WL parser on the internet so far. All computations happens inside your browser  git clone https://github.com/JerryI/wolfram-js-frontend cd wljs-interpreter npm i npm start wolframscript -f transpile.wls   A page similar to one at the top will pop up (with a boat). Then you can freely edit the code and any changes will be shown on the right.  ","version":null,"tagName":"h2"},{"title":"Using as a standalone interpreter​","type":1,"pageTitle":"Minimal Wolfram Language Interpreter","url":"/interpreter/intro#using-as-a-standalone-interpreter","content":" Load as a script to the HTML page using CDN. The core components is less than 10kb  &lt;script type=&quot;module&quot; src=&quot;https://cdn.statically.io/gh/JerryI/wljs-interpreter/main/src/interpreter.js&quot;&gt;&lt;/script&gt; &lt;script type=&quot;module&quot; src=&quot;https://cdn.statically.io/gh/JerryI/wljs-interpreter/main/src/core.js&quot;&gt;&lt;/script&gt;   To run the code it uses JSON format to represent WL expressions  interpretate([&quot;Print&quot;, &quot;'Hello World!'&quot;], {})   You have an access to global context using core object. The list of defined functions can be seen by calling core in the browser's console.  The core context can be expanded by simply putting this core in any place in the page. No class definition of imports are needed  window.onload = () =&gt; { core.MyFunction = async (args, env) { alert('Called! with ' + args[0]); } }   The wrapper onload is only needed to make sure that the page with all scripts was fully loaded. Then you can call it naturally  interpretate([&quot;MyFunction&quot;, &quot;'whatever'&quot;], {})   ","version":null,"tagName":"h3"},{"title":"Extensions​","type":1,"pageTitle":"Minimal Wolfram Language Interpreter","url":"/interpreter/intro#extensions","content":" The interpreter provides only the minimum-necessary set of functions, to bring Graphics and Graphics3D (or if you are using Wolfram JS Frontend you need set of sliders and other building blocks for GUI) you should consider to use it together with the following packages  wljs-graphics-d3 (see Docs here)wljs-graphics3d-threejs (see Docs here)  Just simply include dist/kernel.js file into the web-page as a module using CDN (JSDelivr, StaticIO). Some of build-in examples already uses those packages. NO installation needed.  ","version":null,"tagName":"h2"},{"title":"Applications​","type":1,"pageTitle":"Minimal Wolfram Language Interpreter","url":"/interpreter/intro#applications","content":" The animation running on Wolfram Conference St. Piter 2023 website was made using this interpreter. The overall overhead for Javascript engine is relatively small, since it relies on the plain JS objects as an internal data structure.  In a combination with web sockets a web platform for processing and storing experimental data from THz spectrometers was made in Augsburg University (link is not available, since this is internal application).    ","version":null,"tagName":"h3"},{"title":"Partial support of the native WL expressions​","type":1,"pageTitle":"Minimal Wolfram Language Interpreter","url":"/interpreter/intro#partial-support-of-the-native-wl-expressions","content":" There is no aim to recreate all Wolfram Language functions, you can think about this interpreter more like as a bridge between Javascript ecosystem and Wolfram Language. The interpreter can easily be expanded via packages or explicitly defined functions inside the HTML page. One can write your own symbols based on the application you have.  To help maintain this project  kirill.vasin@uni-a.de PayPal  Thank you 🍺 ","version":null,"tagName":"h2"},{"title":"Symbols and expressions","type":0,"sectionRef":"#","url":"/interpreter/Basics/scripts","content":"","keywords":"","version":null},{"title":"Limitations​","type":1,"pageTitle":"Symbols and expressions","url":"/interpreter/Basics/scripts#limitations","content":" no pattern matching possibleno symbolic computationsUpValue, DownValue are not supportedno WL function definition is possible (for now)most WL Kernel functions are not implemented  Despite the fact of those limitations, WLJS intepreter together with graphics extensions can interpret results produced by Wolfram Engine / Mathematica and also is feasible for some simple standalone calculations.  The biggest advantage compared to the original Wolfram Kernel is a native integration with Javascript ecosystem, since it is capable to read, write and execute Javascript functions and objects with no overhead complexity under the hood.  ","version":null,"tagName":"h2"},{"title":"Implicit data-binding​","type":1,"pageTitle":"Symbols and expressions","url":"/interpreter/Basics/scripts#implicit-data-binding","content":" By the default all defined symbols can be considered as Dynamic in terms of Wolfram Mathematica. For example, when you define a variable  a = 1;   it extends the default context core with a corresponding symbol with a virtual attribute. It means, if this one enters the any other expressions that support updates  (* to be able to manipulate DOM elements, we need container *) FrontEndVirtual[{ (* attach a dom element to draw by ID *) AttachDOM[&quot;canvas&quot;], (* our graphics *) Graphics[{PointSize[0.1], RGBColor[{1.,1.,0}], Point[{a,0}]}] }];   It creates a special object called Virtual Container, that has its identity, local memory and can be connected to a chain to other functions. More about it you can read in the Advanced guide. As well as all functions, which use DOM elements to draw need to be executed inside FrontEndVirtual.  Then if one change the variable later  a = -1;   it will trigger the cascade of update in all expressions, where it is used.        ","version":null,"tagName":"h2"},{"title":"Containers and DOM structure​","type":1,"pageTitle":"Symbols and expressions","url":"/interpreter/Basics/scripts#containers-and-dom-structure","content":" Manipulation with DOM is better to do using pure JS functions, however if one needs only to attach a specific graphical element generated by Wolfram Language a procedure AttachDOM[&quot;element-id&quot;] is provided.  Since Graphics or Graphics3D has its own local scope to store event handlers, which are necessary to manipulate with plots, you need to execute them inside so-called container (virtual container)  FrontEndVirtual[{ ... }]   For each call of FrontEndVirtual a local memory and id is created, therefore Graphics can use it to store its data and have an access to DOM elements attached by AttachDOM.  For example one can create an HTML structure  &lt;div id=&quot;left&quot; style=&quot;display:inline-block&quot;&gt;&lt;/div&gt; &lt;div id=&quot;right&quot; style=&quot;display:inline-block&quot;&gt;&lt;/div&gt;   and attach different graphics elements to is  a = 1; FrontEndVirtual[{ (* attach a dom element to draw *) AttachDOM[&quot;left&quot;], (* our graphics *) Graphics[{PointSize[0.1], RGBColor[{1.,1.,0}], Point[{a,0}]}, ImageSize-&gt;{200,100}] }]; FrontEndVirtual[{ (* attach a dom element to draw *) AttachDOM[&quot;right&quot;], (* our graphics *) Graphics[{PointSize[0.1], RGBColor[{1.,0.,1.}], Point[{-a,0}]}, ImageSize-&gt;{200,100}] }];   Both plots will be updated independently   ","version":null,"tagName":"h2"},{"title":"Javascript integration","type":0,"sectionRef":"#","url":"/interpreter/Basics/js-access","content":"","keywords":"","version":null},{"title":"Reading objects​","type":1,"pageTitle":"Javascript integration","url":"/interpreter/Basics/js-access#reading-objects","content":" Let us define some variable on the page  var variable = Array.apply(null, Array(100)).map(function (_, i) {return [i/100.0 - 1, Math.sin(i/6.28)];});   or if you want to isolate it as a module (it is better, since it execute the script in the right sequence and prevents the early evaluation of the next included file)  &lt;script type=&quot;module&quot;&gt; window.variable = ... &lt;/script&gt;   tip Always put your scripts into &lt;script type=&quot;module&quot;&gt; tag, since it guarantees that the sequence of executing of those scripts (as they appear in HTML document) will be preserved  All functions of WLJS intepreter must return a javascript primitive data type, therefore it is possible to assign it to a WL symbol directly using WindowScope  v = WindowScope[&quot;variable&quot;];   Then we can plot this array as if it was a List  FrontEndVirtual[{ (* attach a dom element to draw *) AttachDOM[&quot;canvas&quot;], (* our graphics *) Graphics[{RGBColor[1.0,1.0,0], Line[v]}, ImageSize-&gt;{400,200}] }]         ","version":null,"tagName":"h2"},{"title":"Calling functions​","type":1,"pageTitle":"Javascript integration","url":"/interpreter/Basics/js-access#calling-functions","content":" In principle in the this manner the whole WLJS interpeter including all libraries was made. Anything even simple like List, Times are Javascript functions defined as  core.Function = async (args, env) =&gt; { //executing arguments const arg1 = await interpretate(args[0], copy); const arg2 = await interpretate(args[1], copy); //... //computing something //return the result return result; };   tip Please, see Advanced section for more information about it  🎡 Let us show you a fancy example.  Details This is an adaptation of @valnub animation. Here is a Javascript function, that creates a bunch of rectangles and animate them according to their speed and position const canvas = document.createElement('canvas'); canvas.width = 600; canvas.height = 400; const context = canvas.getContext('2d'); const particles = []; function random (min, max) { return Math.random() * (max - min) + min; } //function definition core.Draw = async (args, env) =&gt; { //position const c = await interpretate(args[0], env); //velocity const v = await interpretate(args[1], env); const particle = { x: c[0], y: c[1], xvel: v[0], yvel: v[1], color: `rgba(${random(0, 255)}, ${random(0, 255)}, ${random(0, 255)})`, size: 7, }; particles.push(particle); if (particles.length &gt; 200) { particles.shift(); } context.clearRect(0, 0, canvas.width, canvas.height); for (let i = 0; i &lt; particles.length; i += 1){ const p = particles[i]; context.fillStyle = p.color; context.fillRect(p.x, p.y, p.size, p.size); p.x += p.xvel; p.y -= p.yvel; } }; return canvas; This code is applicable for WLJS Playground (see Quick start), if you want to run it in a custom environment, you would need to put in inside a module and replace the last line with &lt;script type=&quot;module&quot;&gt; ... //return canvas; document.body.appendChild(canvas); &lt;/script&gt; Then we can run WL script and call it directly While[True, Draw[{RandomReal[{0,600}],RandomReal[{0,400}]}, RandomReal[{2,-2},2]]; Pause[0.05]; ] WLJS interpreter looks for the particular name Draw in the core context and pass evaluated arguments to it    🎡 One can go event further and plot something more interesting  Details x = 0; y = 0; While[True, Draw[{x, y}, RandomReal[{2,-2},2]]; y = 49 (1 + Sin[x/(10)]); x = x + 1; If[x &gt; 599, x = 0]; Pause[0.01]; ]     🎡 Or we can also change the way how it is drawn to  Details data = Table[{i, 15 + 30 (1 + Sin[i/(20)])}, {i, 1, 599,10}]; While[True, Table[ Draw[i, RandomReal[{0.1,-0.1},2]]; , {i, data}]; Pause[0.02]; ];     ","version":null,"tagName":"h2"},{"title":"Event-based approach​","type":1,"pageTitle":"Javascript integration","url":"/interpreter/Basics/js-access#event-based-approach","content":" caution This section is in development ","version":null,"tagName":"h2"},{"title":"How it works","type":0,"sectionRef":"#","url":"/interpreter/Extras/implementation","content":"","keywords":"","version":null},{"title":"The idea​","type":1,"pageTitle":"How it works","url":"/interpreter/Extras/implementation#the-idea","content":" Originally it was done as a sort of utility to parse Graphics3D objects and recreate them as a set of commands of ThreeJS - a JS graphics library. Have a look at this example  SphericalPlot3D[1, {t, 0, Pi}, {p, 0, 2 Pi}] // InputForm   it produces the following output  Graphics3D[{ GraphicsComplex[{{1,0,0}, ...}, { ... Polygon[{{2, 1, 11, 12}, ...}}] }]   where, in principle it tells us that one should plot polygons using the set of 4 vertices indexed as 2,1,11,12 with absolute coordinates stored in an array located in the first argument of GraphicsComplex.  ","version":null,"tagName":"h2"},{"title":"Internal representaion​","type":1,"pageTitle":"How it works","url":"/interpreter/Extras/implementation#internal-representaion","content":" A good hint how the internal data structure looks like can be seen in Compress. See also mma-uncompress.  ","version":null,"tagName":"h3"},{"title":"Parser​","type":1,"pageTitle":"How it works","url":"/interpreter/Extras/implementation#parser","content":" Taking advantage of the standart library packed with Wolfram Kernel we can use directly a ExportString function  ExportString[%, &quot;ExpressionJSON&quot;]   [ &quot;Graphics3D&quot;, [ &quot;List&quot;, [ &quot;List&quot;, [ &quot;GraphicsComplex&quot;, [ &quot;List&quot;, [ &quot;List&quot;, 0.0, 0.0, 1.0 ] ,   In principle it can convert an arbitary WL expression without loosing any data. Which is acually much faster, than ToString method  test = SphericalPlot3D[Sin[t] Cos[p]^6, {t, 0, Pi}, {p, 0, 2 Pi}][[1]]; ((s = ExportString[test, &quot;ExpressionJSON&quot;]) // RepeatedTiming)[[1]] ((s = ToString[test]) // RepeatedTiming)[[1]] &gt; 0.03471 &gt; 0.16478   that gives us a clue, where the internal Mathematica's expressions representation might be a sort of ExpressionJSON like structure  (a+b)[[0]] === Plus   i.e., the structure is following  this.name = expr[0] this.args = expr.slice(1, expr.length)   Then it looks relatively easy to use it for calling a defined function  var core = {}; var interpretate = (d, env) =&gt; { if (typeof d === 'string') return d.slice(1, -1); if (typeof d === 'number') return d; this.name = d[0]; this.args = d.slice(1, d.length); return core[this.name](this.args, env); }   threfore one can define a minimal set of functions to serve WL expressions like lists, colors, and etc...  core.List = (args, env) =&gt; { const copy = {..env}; const list = []; for (let i = 0, len = args.length; i &lt; args.length; i++) { list.push(interpretate(args[i], copy)); } return list; };   core.RGBColor = (args, env) =&gt; { const r = interpretate(args[0], env); const g = interpretate(args[1], env); const b = interpretate(args[2], env); env.color = new three.Color(r, g, b); };   The second argument env is a mutable object, which stores information to be shared with other WL expressions, for example color  {Blue, {Red, Sphere[] (*RED*)}, Cuboid[] (*BLUE*)}   Here you can see, that env can be localized (a deep copy) inside List expression.  ","version":null,"tagName":"h3"},{"title":"Generalization​","type":1,"pageTitle":"How it works","url":"/interpreter/Extras/implementation#generalization","content":" For me as a maintener of this project @JerryI, the idea of bridging JS and Wolfram Language was very insiprational. Especcially, when I discovered how flexible and easy was the writting static and dynamic web-pages using Wolfram Language - TinyWEB &amp; WSP.  The reasonsomewhere on HTML page  &lt;input type=&quot;text&quot; id=&quot;form&quot; value=&quot;Hello!&quot;&gt; &lt;script&gt; core.UpdateText = (args, env) =&gt; { const i = interpretate(args[0], env); document.getElementById('form').value = i; } &lt;/script&gt;   somewhere in WL  WebSocketBroadcast[server, UpdateText[RandomWord[]]]   using websockets to link Wolfram Kernel and a page in realtime the intergration looks seamless. In principle, the API and all UI functions are implemented in a such way on the present version of Wolfram JS Frontend.  In the present version the interpreter looks a bit more complex, however the ideas are the same. ","version":null,"tagName":"h2"},{"title":"Definitions","type":0,"sectionRef":"#","url":"/interpreter/Advanced/symbols","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"Definitions","url":"/interpreter/Advanced/symbols#functions","content":" Let's talk about how to define a function properly  note In wolfram language terms, there is no difference between function and a symbol. These are all expressions. However, here WLJS only mimics WL language paradigm, therefore here we distinguish function and a variable.  ","version":null,"tagName":"h2"},{"title":"Direct call​","type":1,"pageTitle":"Definitions","url":"/interpreter/Advanced/symbols#direct-call","content":" The simplest way of calling a defined function  MyFunction[data]   note ❗️ no local memory, no identity ❗️ not possible to dynamically update ✅ the fastest and memory friendly way    A called function has no persistent memory except from the env variable, which can share the data with other functions from the sub-tree - see more in architecture (Meta Data).  Somewhere in Javascript code there will be  core.MyFunction = async (args, env) =&gt; {...}   An update method is good to define as well, therefore a function can be used together with updatable object called somewhere in the tree  core.MyFunction.update = core.MyFunction core.MyFunction.destroy = core.MyFunction   Since there is no identity of a function, there is no need to define a different function for update and destroy.  tip Any defined functions must return javascript object or nothing  While in the arguments args it is always Wolfram Expression, therefore interpretate is always called on them to convert anything into javascript data type.  🎡 Example 1​  Let us write some cellular automatic machine starting from Javascript code  Details //create js canvas const canvas = document.createElement(&quot;canvas&quot;); canvas.width = 400; canvas.height = 100; let context = canvas.getContext(&quot;2d&quot;); //a function to draw on it core.MyFunction = async (args, env) =&gt; { const data = await interpretate(args[0], env); //draw our boxes for(let i=0; i&lt;40; ++i) { for (let j=0; j&lt;10; ++j) { //new pixels if (data[i][j] &gt; 0) { context.fillStyle = &quot;rgba(255,0,0,0.4)&quot;; context.fillRect(i*10 + 1, j*10 + 1, 8, 8); } else { context.fillStyle = &quot;rgba(255,255,255,0.4)&quot;; context.fillRect(i*10 + 1, j*10 + 1, 8, 8); } } } } return canvas Now we can animate it in a loop using the simplest rule data = RandomReal[{-1,1}, {40,10}]; While[True, data = Table[ If[(data[[i]][[If[j+1&gt;10,1,j+1]]] + data[[If[i+1&gt;40,1,i+1]]][[j]] + data[[If[i-1&lt;1,40,i-1 ]]][[j]] + data[[i]][[If[j-1&lt;1,10,j-1 ]]]) &gt; 0.5, 1, RandomReal[{-1,0}]] , {i,1, 40}, {j,1,10}]; Pause[0.05]; MyFunction[data]; ];   The result will look like        ","version":null,"tagName":"h3"},{"title":"Virtual container​","type":1,"pageTitle":"Definitions","url":"/interpreter/Advanced/symbols#virtual-container","content":" Things are getting interesting, if one need to store some additional information for the individual instance of the function and bind it to other objects for dynamics.  FrontEndVirtual[{ MyFunction[data] }]   note ✅ local memory and identity ✅ possible to dynamically update and bind ❗️ each time creates new instance  See an example on a picture    danger Do not put FrontEndVirtual into the loops like While, it will cause memory leakage!  Now an interpreter can bind the inner objects or outer to our function, can forms a chain, that will be used for updates. For example  data = 1; FrontEndVirtual[{ MyFunction[data] }]; Pause[1]; data = 10;   Here as one can see, we use defined symbol data, that by default has Auto-virtual container type, therefore on each call it also create an instance like FrontEndVirtual implicitly and binds to the parent container (no matter how far is it in the call tree).  Now let us write a simple function, that uses local memory and update method.  core.MyFunction = async (args, env) =&gt; { const data = await interpretate(args[0], env); console.log('created!'); console.log(data); //store the data into local storage env.local.data = data; }   core.MyFunction.update = async (args, env) =&gt; { const newdata = await interpretate(args[0], env); console.log('updated!'); console.log(newdata); //apply some math for fun env.local.data += newdata; console.log('result: '+env.local.data); }   On each update, this function will print the result of accumulated data.  ","version":null,"tagName":"h3"},{"title":"Auto-virtual container​","type":1,"pageTitle":"Definitions","url":"/interpreter/Advanced/symbols#auto-virtual-container","content":" This process can be simplified if we use automatic detection  MyFunction[data]   where somewhere in Javascript it is defined as  core.MyFunction.virtual = true   note ✅ local memory and identity ✅ possible to dynamically update and bind ❗️ each time creates new instance  The result will be the same as in Virtual container, but it is implicitly done by the interpreter.  🎡 Example 2​  Let us simplify the code from the previous example. Firstly we need to define update method for the function we have  Details add a few lines core.MyFunction.update = core.MyFunction; core.MyFunction.virtual = true Now we can work with in a much prettier way data = RandomReal[{-1,1}, {40,10}]; MyFunction[data]; While[True, data = Table[ If[(data[[i]][[If[j+1&gt;10,1,j+1]]] + data[[If[i+1&gt;40,1,i+1]]][[j]] + data[[If[i-1&lt;1,40,i-1 ]]][[j]] + data[[i]][[If[j-1&lt;1,10,j-1 ]]]) &gt; 0.5, 1, RandomReal[{-1,0}]] , {i,1, 40}, {j,1,10}]; Pause[0.05]; ];   ","version":null,"tagName":"h3"},{"title":"Container with a storage​","type":1,"pageTitle":"Definitions","url":"/interpreter/Advanced/symbols#container-with-a-storage","content":" This way is usually used for all objects in cells of Wolfram Frontend and is not really useful, when you use WLJS as a standalone thing. Firstly you need to create a container or object, populate it with data and execute it  CreateFrontEndObject[MyFunction[data], &quot;obj&quot;]; FrontEndExecutable[&quot;obj&quot;]   note ✅ local memory and identity ✅ possible to dynamically update and bind ✅ expression is stored inside the object's storage ❗️ each time creates new instance on FrontEndExecutable call, that has a reference to the same object  info All instances of obj refer to the same storage  An update can be caused in two scenarios  Storage was changed​  To mutate the container's storage, one can simple use  SetFrontEndObject[&quot;obj&quot;, MyFunction[data2]]   But this is not great implementation, since we basically send the same function, but with an arguments. However it will cause MyFunction.update method called on each instance, that we created using FrontEndExecutable expression.  Subexpressions was updated​  Sub-expression has to be also a container, in order to be able to bind updates to that. Let us show you an example  CreateFrontEndObject[{1,2,3}, &quot;var&quot;]; CreateFrontEndObject[MyFunction[FrontEndExecutable[&quot;var&quot;]], &quot;obj&quot;]; FrontEndExecutable[&quot;obj&quot;];   The last line will create an instance of our MyFunction container. To trigger an update, one can update this expression via  SetFrontEndObject[&quot;var&quot;, {3,4,5}];   It can be illustrated as following    Details Details on garbage collectorNormal containers are the only species, that can be destroyed properly. Because they are explicitly bounded to the corresponding widget. Since virtual functions and nested objects creates each time new identity, there is no way on how to clean them up using destory method on a tree. However, they are still presented in a stack call, stored in env.global.stack. Therefore, one can remove them by going through the stack and calling dispose method.  ","version":null,"tagName":"h3"},{"title":"Variables​","type":1,"pageTitle":"Definitions","url":"/interpreter/Advanced/symbols#variables","content":" All variables or (expressions with only own-values) has virtual type by default, i.e.they are executed in a virtual containers  a = 4;   It extends core context with a symbol a, that has property  core.a.virtual = true //what actually happends   Therefore, if it enters any container as a sub-expression, it will bind to the container.  note ✅ local memory and identity ✅ possible to dynamically update and bind ❗️ each time creates new instance   Set operation scans this symbol in the core context, and if it exists, update method will be called with bubbling up to the nearest linked container  i.e,  a = 4; FrontEndVirtual[{ MyFunction[a] (* BINDED *) }] (*. ^ *) (* | *) a = 5; (* UPDATE | *)   The last line will cause an update of MyFunction.  ","version":null,"tagName":"h2"},{"title":"Conditions, when an instance will be created or not​","type":1,"pageTitle":"Definitions","url":"/interpreter/Advanced/symbols#conditions-when-an-instance-will-be-created-or-not","content":" a = 4;   note ❗️ for the first time, there is no instance created, only core.a  a = a + 1;   note ❗️ set operation blocks instance creating for a symbol ✅ set operation causes update on the binded containers  While[True, MyFunction[a] (* NO DYNAMIC LINK CREATED *) ]   note ❗️ while operation blocks instance creating to prevent memory leakage  MyFunction[a] (* DYNAMIC LINK CREATED *)   note ✅ a now is possibly binded to MyFunction, if the last one is a virtual container  data = Table[b[[i]] + b[[i+1]], {i,1,Length[b]-1}];   note ❗️ Set blocks instance creating, no dynamic binding possible  For example, when we plot graphics, by default Line, Point and etc has virtual type  Graphics[ Table[Line[b[[i]]], {i, Length[b]}] ] //FrontEndVirtual   note ✅ multiple instances of b were created and binded to Line  So this binding happends only between Line and b[[i]], no Graphics function is involved.  🎡 Example 3​  Lines  Details a = Table[{{0,0}, RandomReal[{-1,1}, 2]}, {i, 100}]; FrontEndVirtual[{ AttachDOM[&quot;canvas&quot;]; Graphics[{RGBColor[0.0,1.0,1.0], Table[Line[a[[i]]], {i, Length[a]}]}]; }]; (* mix them up *) a = RandomSample[a];    ","version":null,"tagName":"h3"},{"title":"Text Elements","type":0,"sectionRef":"#","url":"/imgs/manipulate-frontend-example.excalidraw","content":"==⚠ Switch to EXCALIDRAW VIEW in the MORE OPTIONS menu of this document. ⚠== Text Elements core.Panel ^8bS55RJK core.FrontEndExecutable ^VIjBeIiE core.FrontEndExecutable ^TmkPzj8K core.FrontEndExecutable ^60yunpoH core.WEBSlider ^d4rlJmzn core.ListLinePlotly ^NY5DqXU6 core.FrontEndExecutable ^a0WKvxZj DOM ^OhkZA8MM DOM ^CO0aOvLH DOM ^UrcTqLkp on-change ^p9p8vLUr Server/Client storage ^AffgwkDZ core.WEBSlider ^It7nVsB0 raw data ^DUmWkMn1 core.ListLinePlotly ^ZTlcBkhf core.Panel ^Bf50KwhU ref ^o3Op3sUd ref ^izQ9X8ro ref ^gsIZtc6Q ref ^VzutkUlD ref ^PSJJK3sL ref ^tNKddouz ref ^w8HOq8iI Enter Point ^D5KrzAAX CodeMirror Decorations ^FKOmrwK3 new ^0WLjRWTt new ^bhOAK4er new ^SV3jDjc1 Reactive link ^10Ix4C3t emitt ^atDn5LMb core.FireEvent ^DbsVOSuW WL Kernel ^DMyf6AUs core.SetFrontEndObject ^N1uZwhqp SendToFrontEnd ^2MLuTwha update value ^8gpechRF automatically created between two FrontEndExecutables ^fe7yX11l EmittedEvent[uid, data] ^R7bFVCI3 only nested. bubble-like connection ^UCs9wb4P %% Drawing { &quot;type&quot;: &quot;excalidraw&quot;, &quot;version&quot;: 2, &quot;source&quot;: &quot;https://excalidraw.com&quot;, &quot;elements&quot;: [ { &quot;type&quot;: &quot;rectangle&quot;, &quot;version&quot;: 202, &quot;versionNonce&quot;: 221485074, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;gBwy1ZC1BSlRVrwsrltpx&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: -158.94720023018965, &quot;y&quot;: -213.21268572126115, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;#ced4da&quot;, &quot;width&quot;: 293.7135503859746, &quot;height&quot;: 362.1932663690476, &quot;seed&quot;: 1526142674, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1678310769982, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;type&quot;: &quot;rectangle&quot;, &quot;version&quot;: 331, &quot;versionNonce&quot;: 1132407310, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;IpBIAaOgsaY3jTYeHXNey&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: -132.2182791573661, &quot;y&quot;: -149.98265584309894, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;#ffff&quot;, &quot;width&quot;: 232.96369280133928, &quot;height&quot;: 83.80490257626491, &quot;seed&quot;: 1990084946, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1678310769982, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;type&quot;: &quot;rectangle&quot;, &quot;version&quot;: 503, &quot;versionNonce&quot;: 384484818, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;p14toTySE1VSGpqGqEipT&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: -132.36078171502973, &quot;y&quot;: -33.38950747535347, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;#ffffffff&quot;, &quot;width&quot;: 232.96369280133928, &quot;height&quot;: 168.9795503162203, &quot;seed&quot;: 127433742, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1678310769982, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;type&quot;: &quot;rectangle&quot;, &quot;version&quot;: 582, &quot;versionNonce&quot;: 912963662, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;E-zVSmZAq8WCbgCjf5Xtt&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: -119.85949226646133, &quot;y&quot;: -118.19273739769352, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;#4c6ef5&quot;, &quot;width&quot;: 206.27442079011408, &quot;height&quot;: 40.83081726008624, &quot;seed&quot;: 236344082, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [ { &quot;id&quot;: &quot;havFoOi3aTF2CjAAHZ-cB&quot;, &quot;type&quot;: &quot;arrow&quot; } ], &quot;updated&quot;: 1678310769982, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;type&quot;: &quot;rectangle&quot;, &quot;version&quot;: 621, &quot;versionNonce&quot;: 1156987794, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;2gN03MI5YfWWTM5327ZCV&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: -120.10651942661826, &quot;y&quot;: 1.6207413628819722, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;#fa5252&quot;, &quot;width&quot;: 204.44948206434853, &quot;height&quot;: 124.85299462809655, &quot;seed&quot;: 1513514834, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [ { &quot;id&quot;: &quot;yF02CmPE5M8sMduQDltrX&quot;, &quot;type&quot;: &quot;arrow&quot; } ], &quot;updated&quot;: 1678310769982, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 144, &quot;versionNonce&quot;: 1498054286, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;8bS55RJK&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: -148.60889253162208, &quot;y&quot;: -204.45426868257064, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;#fa5252&quot;, &quot;width&quot;: 99, &quot;height&quot;: 25, &quot;seed&quot;: 1399625170, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1678310769982, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 20, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;core.Panel&quot;, &quot;rawText&quot;: &quot;core.Panel&quot;, &quot;baseline&quot;: 18, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;core.Panel&quot; }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 637, &quot;versionNonce&quot;: 361560402, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;VIjBeIiE&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: -121.89499046688985, &quot;y&quot;: -143.82272629510794, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;#fa5252&quot;, &quot;width&quot;: 193, &quot;height&quot;: 20, &quot;seed&quot;: 2094364114, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [ { &quot;id&quot;: &quot;z3XziM_UtaPNbANsUdN3g&quot;, &quot;type&quot;: &quot;arrow&quot; } ], &quot;updated&quot;: 1678310769982, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 16, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;core.FrontEndExecutable&quot;, &quot;rawText&quot;: &quot;core.FrontEndExecutable&quot;, &quot;baseline&quot;: 14, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;core.FrontEndExecutable&quot; }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 538, &quot;versionNonce&quot;: 282557646, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;TmkPzj8K&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: -165.83875674293165, &quot;y&quot;: -243.1761896042597, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;#fa5252&quot;, &quot;width&quot;: 193, &quot;height&quot;: 20, &quot;seed&quot;: 699818702, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [ { &quot;id&quot;: &quot;-nxsYynee_j51yZEp_XTQ&quot;, &quot;type&quot;: &quot;arrow&quot; } ], &quot;updated&quot;: 1678310769982, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 16, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;core.FrontEndExecutable&quot;, &quot;rawText&quot;: &quot;core.FrontEndExecutable&quot;, &quot;baseline&quot;: 14, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;core.FrontEndExecutable&quot; }, { &quot;type&quot;: &quot;rectangle&quot;, &quot;version&quot;: 407, &quot;versionNonce&quot;: 671481618, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;yfLd8LXbKN-3PVhmMl4Rf&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: -176.76060122535335, &quot;y&quot;: -252.79585920061382, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 323.59950183686726, &quot;height&quot;: 416.9439377557664, &quot;seed&quot;: 1432832850, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [ { &quot;id&quot;: &quot;jTBAqFeKklyINUNI5gZnp&quot;, &quot;type&quot;: &quot;arrow&quot; }, { &quot;id&quot;: &quot;-nxsYynee_j51yZEp_XTQ&quot;, &quot;type&quot;: &quot;arrow&quot; }, { &quot;id&quot;: &quot;z3XziM_UtaPNbANsUdN3g&quot;, &quot;type&quot;: &quot;arrow&quot; }, { &quot;id&quot;: &quot;yF02CmPE5M8sMduQDltrX&quot;, &quot;type&quot;: &quot;arrow&quot; }, { &quot;id&quot;: &quot;uQXdeupZh9l_UflT2iMXh&quot;, &quot;type&quot;: &quot;arrow&quot; } ], &quot;updated&quot;: 1678310769983, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 770, &quot;versionNonce&quot;: 1118483214, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;60yunpoH&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: -120.6744849795387, &quot;y&quot;: -26.241462344214995, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;#fa5252&quot;, &quot;width&quot;: 193, &quot;height&quot;: 20, &quot;seed&quot;: 1479191630, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1678310769983, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 16, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;core.FrontEndExecutable&quot;, &quot;rawText&quot;: &quot;core.FrontEndExecutable&quot;, &quot;baseline&quot;: 14, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;core.FrontEndExecutable&quot; }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 331, &quot;versionNonce&quot;: 416828626, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;d4rlJmzn&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: -111.52418736049094, &quot;y&quot;: -111.73369634719117, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;#fa5252&quot;, &quot;width&quot;: 114, &quot;height&quot;: 20, &quot;seed&quot;: 1349694414, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1678310769983, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 16, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;core.WEBSlider&quot;, &quot;rawText&quot;: &quot;core.WEBSlider&quot;, &quot;baseline&quot;: 14, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;core.WEBSlider&quot; }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 431, &quot;versionNonce&quot;: 960307534, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;NY5DqXU6&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: -111.75048246837804, &quot;y&quot;: 8.57639131091895, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;#fa5252&quot;, &quot;width&quot;: 143, &quot;height&quot;: 20, &quot;seed&quot;: 785652430, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1678310769983, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 16, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;core.ListLinePlotly&quot;, &quot;rawText&quot;: &quot;core.ListLinePlotly&quot;, &quot;baseline&quot;: 14, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;core.ListLinePlotly&quot; }, { &quot;type&quot;: &quot;rectangle&quot;, &quot;version&quot;: 423, &quot;versionNonce&quot;: 1570431634, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;Y2xWAJMcthHplyBNjWuY4&quot;, &quot;fillStyle&quot;: &quot;cross-hatch&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: -77.10812523251485, &quot;y&quot;: 96.14890688941597, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;#fab005&quot;, &quot;width&quot;: 152.8564453125002, &quot;height&quot;: 20.32596223090517, &quot;seed&quot;: 770831506, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1678310769983, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 1026, &quot;versionNonce&quot;: 132630414, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;a0WKvxZj&quot;, &quot;fillStyle&quot;: &quot;cross-hatch&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: -68.83401343936009, &quot;y&quot;: 98.277580624535, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;#fa5252&quot;, &quot;width&quot;: 136, &quot;height&quot;: 14, &quot;seed&quot;: 1520041490, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [ { &quot;id&quot;: &quot;06MN9H_C9uUBNQti5-jG_&quot;, &quot;type&quot;: &quot;arrow&quot; } ], &quot;updated&quot;: 1678310769983, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 11.251761812237842, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;core.FrontEndExecutable&quot;, &quot;rawText&quot;: &quot;core.FrontEndExecutable&quot;, &quot;baseline&quot;: 10, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;core.FrontEndExecutable&quot; }, { &quot;type&quot;: &quot;ellipse&quot;, &quot;version&quot;: 481, &quot;versionNonce&quot;: 1683076754, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;CBcVXg7NXa-Gw1xe4ND1Y&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 101.37951442173562, &quot;y&quot;: -267.44012015206476, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;#15aabf&quot;, &quot;width&quot;: 38, &quot;height&quot;: 25, &quot;seed&quot;: 1447921358, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [ { &quot;type&quot;: &quot;text&quot;, &quot;id&quot;: &quot;OhkZA8MM&quot; } ], &quot;updated&quot;: 1678316156012, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 493, &quot;versionNonce&quot;: 1371608146, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;OhkZA8MM&quot;, &quot;fillStyle&quot;: &quot;cross-hatch&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 109.87951442173562, &quot;y&quot;: -260.44012015206476, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;#fab005&quot;, &quot;width&quot;: 21, &quot;height&quot;: 11, &quot;seed&quot;: 1975252942, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1678316156013, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 8.55763600666906, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;DOM&quot;, &quot;rawText&quot;: &quot;DOM&quot;, &quot;baseline&quot;: 8, &quot;textAlign&quot;: &quot;center&quot;, &quot;verticalAlign&quot;: &quot;middle&quot;, &quot;containerId&quot;: &quot;CBcVXg7NXa-Gw1xe4ND1Y&quot;, &quot;originalText&quot;: &quot;DOM&quot; }, { &quot;type&quot;: &quot;ellipse&quot;, &quot;version&quot;: 514, &quot;versionNonce&quot;: 1975947726, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;_uSzvfQWBYp_NWkHGsu0S&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 59.774268740699455, &quot;y&quot;: -167.4762616838727, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;#15aabf&quot;, &quot;width&quot;: 38, &quot;height&quot;: 25, &quot;seed&quot;: 1117122578, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [ { &quot;type&quot;: &quot;text&quot;, &quot;id&quot;: &quot;CO0aOvLH&quot; } ], &quot;updated&quot;: 1678316156015, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 525, &quot;versionNonce&quot;: 1122969614, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;CO0aOvLH&quot;, &quot;fillStyle&quot;: &quot;cross-hatch&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 68.27426874069945, &quot;y&quot;: -160.4762616838727, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;#fab005&quot;, &quot;width&quot;: 21, &quot;height&quot;: 11, &quot;seed&quot;: 1309561358, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1678316156016, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 8.55763600666906, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;DOM&quot;, &quot;rawText&quot;: &quot;DOM&quot;, &quot;baseline&quot;: 8, &quot;textAlign&quot;: &quot;center&quot;, &quot;verticalAlign&quot;: &quot;middle&quot;, &quot;containerId&quot;: &quot;_uSzvfQWBYp_NWkHGsu0S&quot;, &quot;originalText&quot;: &quot;DOM&quot; }, { &quot;type&quot;: &quot;ellipse&quot;, &quot;version&quot;: 657, &quot;versionNonce&quot;: 83994578, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;almOTDsSRWy4k7m_lXrOT&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 58.84240722656253, &quot;y&quot;: -51.449534098307254, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;#15aabf&quot;, &quot;width&quot;: 38, &quot;height&quot;: 25, &quot;seed&quot;: 405906318, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [ { &quot;type&quot;: &quot;text&quot;, &quot;id&quot;: &quot;UrcTqLkp&quot; } ], &quot;updated&quot;: 1678316156017, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 668, &quot;versionNonce&quot;: 1373691282, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;UrcTqLkp&quot;, &quot;fillStyle&quot;: &quot;cross-hatch&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 67.34240722656253, &quot;y&quot;: -44.449534098307254, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;#fab005&quot;, &quot;width&quot;: 21, &quot;height&quot;: 11, &quot;seed&quot;: 2010555474, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1678316156018, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 8.55763600666906, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;DOM&quot;, &quot;rawText&quot;: &quot;DOM&quot;, &quot;baseline&quot;: 8, &quot;textAlign&quot;: &quot;center&quot;, &quot;verticalAlign&quot;: &quot;middle&quot;, &quot;containerId&quot;: &quot;almOTDsSRWy4k7m_lXrOT&quot;, &quot;originalText&quot;: &quot;DOM&quot; }, { &quot;type&quot;: &quot;line&quot;, &quot;version&quot;: 43, &quot;versionNonce&quot;: 926157202, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;IJGI6Gs-2N39Fo2DmtOEf&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 100.20510718936009, &quot;y&quot;: -14.843524751209088, &quot;strokeColor&quot;: &quot;#c92a2a&quot;, &quot;backgroundColor&quot;: &quot;#15aabf&quot;, &quot;width&quot;: 113.63048735119048, &quot;height&quot;: 0, &quot;seed&quot;: 349277838, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1678310769983, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;startBinding&quot;: null, &quot;endBinding&quot;: null, &quot;lastCommittedPoint&quot;: null, &quot;startArrowhead&quot;: null, &quot;endArrowhead&quot;: null, &quot;points&quot;: [ [ 0, 0 ], [ 113.63048735119048, 0 ] ] }, { &quot;type&quot;: &quot;line&quot;, &quot;version&quot;: 110, &quot;versionNonce&quot;: 219713678, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;5s5u914g15eziI19ZTxQa&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 73.08125813802076, &quot;y&quot;: 106.2039257231213, &quot;strokeColor&quot;: &quot;#c92a2a&quot;, &quot;backgroundColor&quot;: &quot;#15aabf&quot;, &quot;width&quot;: 145.59669131324404, &quot;height&quot;: 0, &quot;seed&quot;: 868864466, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1678310769983, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;startBinding&quot;: null, &quot;endBinding&quot;: null, &quot;lastCommittedPoint&quot;: null, &quot;startArrowhead&quot;: null, &quot;endArrowhead&quot;: null, &quot;points&quot;: [ [ 0, 0 ], [ 145.59669131324404, 0 ] ] }, { &quot;type&quot;: &quot;line&quot;, &quot;version&quot;: 50, &quot;versionNonce&quot;: 1524696914, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;gnxGIpsPOZlQZeicwkowB&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 219.65799967447913, &quot;y&quot;: 105.82864670526419, &quot;strokeColor&quot;: &quot;#c92a2a&quot;, &quot;backgroundColor&quot;: &quot;#15aabf&quot;, &quot;width&quot;: 4.201078869047592, &quot;height&quot;: 122.62584867931548, &quot;seed&quot;: 2081839694, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1678310769983, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;startBinding&quot;: null, &quot;endBinding&quot;: null, &quot;lastCommittedPoint&quot;: null, &quot;startArrowhead&quot;: null, &quot;endArrowhead&quot;: null, &quot;points&quot;: [ [ 0, 0 ], [ -4.201078869047592, -122.62584867931548 ] ] }, { &quot;type&quot;: &quot;arrow&quot;, &quot;version&quot;: 922, &quot;versionNonce&quot;: 1322403534, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;sulLI668-35ciYEMpJrqV&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 217.98497634893525, &quot;y&quot;: 54.75431582964701, &quot;strokeColor&quot;: &quot;#c92a2a&quot;, &quot;backgroundColor&quot;: &quot;#15aabf&quot;, &quot;width&quot;: 1.9121781791244814, &quot;height&quot;: 34.786452980997026, &quot;seed&quot;: 124819730, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1678316187433, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;startBinding&quot;: { &quot;elementId&quot;: &quot;fe7yX11l&quot;, &quot;focus&quot;: -1.1923424811141987, &quot;gap&quot;: 18.149803393609176 }, &quot;endBinding&quot;: { &quot;elementId&quot;: &quot;10Ix4C3t&quot;, &quot;focus&quot;: 1.2141515125338398, &quot;gap&quot;: 17.34078378520502 }, &quot;lastCommittedPoint&quot;: null, &quot;startArrowhead&quot;: null, &quot;endArrowhead&quot;: &quot;triangle&quot;, &quot;points&quot;: [ [ 0, 0 ], [ -1.9121781791244814, -34.786452980997026 ] ] }, { &quot;type&quot;: &quot;arrow&quot;, &quot;version&quot;: 660, &quot;versionNonce&quot;: 61361426, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;jTBAqFeKklyINUNI5gZnp&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 188.93878892799285, &quot;y&quot;: -15.999015443404003, &quot;strokeColor&quot;: &quot;#c92a2a&quot;, &quot;backgroundColor&quot;: &quot;#15aabf&quot;, &quot;width&quot;: 29.40524284354342, &quot;height&quot;: 0, &quot;seed&quot;: 1034944978, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1678310769983, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;startBinding&quot;: null, &quot;endBinding&quot;: { &quot;elementId&quot;: &quot;yfLd8LXbKN-3PVhmMl4Rf&quot;, &quot;focus&quot;: 0.1358689853210841, &quot;gap&quot;: 12.69464547293552 }, &quot;lastCommittedPoint&quot;: null, &quot;startArrowhead&quot;: null, &quot;endArrowhead&quot;: &quot;triangle&quot;, &quot;points&quot;: [ [ 0, 0 ], [ -29.40524284354342, 0 ] ] }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 511, &quot;versionNonce&quot;: 1768852750, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;p9p8vLUr&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 150.5148194436655, &quot;y&quot;: 108.0208802039545, &quot;strokeColor&quot;: &quot;#495057&quot;, &quot;backgroundColor&quot;: &quot;#15aabf&quot;, &quot;width&quot;: 75, &quot;height&quot;: 20, &quot;seed&quot;: 514911314, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1678310775003, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 16, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;on-change&quot;, &quot;rawText&quot;: &quot;on-change&quot;, &quot;baseline&quot;: 14, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;on-change&quot; }, { &quot;type&quot;: &quot;rectangle&quot;, &quot;version&quot;: 354, &quot;versionNonce&quot;: 654367442, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;PssP4sHA6Si1RusCbP1YZ&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;dashed&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: -455.2512032645092, &quot;y&quot;: -252.29925973074774, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 149.4259788876488, &quot;height&quot;: 416.998508998326, &quot;seed&quot;: 452763726, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [ { &quot;id&quot;: &quot;06MN9H_C9uUBNQti5-jG_&quot;, &quot;type&quot;: &quot;arrow&quot; } ], &quot;updated&quot;: 1678310769983, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 142, &quot;versionNonce&quot;: 1781297998, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;AffgwkDZ&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;dashed&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: -429.4947742280509, &quot;y&quot;: -306.2168535505022, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 101, &quot;height&quot;: 40, &quot;seed&quot;: 880888594, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1678310769983, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 16, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;Server/Client\\nstorage&quot;, &quot;rawText&quot;: &quot;Server/Client\\nstorage&quot;, &quot;baseline&quot;: 34, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;Server/Client\\nstorage&quot; }, { &quot;type&quot;: &quot;rectangle&quot;, &quot;version&quot;: 167, &quot;versionNonce&quot;: 1937879186, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;KNLCDlXf4i4Ajqxhv7_UF&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: -446.23735700334856, &quot;y&quot;: -239.90299043201261, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 124.34983026413693, &quot;height&quot;: 394.16562034970235, &quot;seed&quot;: 1646136146, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [ { &quot;id&quot;: &quot;-nxsYynee_j51yZEp_XTQ&quot;, &quot;type&quot;: &quot;arrow&quot; }, { &quot;id&quot;: &quot;z3XziM_UtaPNbANsUdN3g&quot;, &quot;type&quot;: &quot;arrow&quot; }, { &quot;id&quot;: &quot;yF02CmPE5M8sMduQDltrX&quot;, &quot;type&quot;: &quot;arrow&quot; }, { &quot;id&quot;: &quot;06MN9H_C9uUBNQti5-jG_&quot;, &quot;type&quot;: &quot;arrow&quot; } ], &quot;updated&quot;: 1678310769983, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;type&quot;: &quot;rectangle&quot;, &quot;version&quot;: 1334, &quot;versionNonce&quot;: 1125964174, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;sdkGA5lZc2_EmtTIvziC-&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: -438.5740214657487, &quot;y&quot;: 0.7771238639114983, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;#fa5252&quot;, &quot;width&quot;: 109.7371542596215, &quot;height&quot;: 31.601342511202247, &quot;seed&quot;: 524830606, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1678310769983, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;type&quot;: &quot;rectangle&quot;, &quot;version&quot;: 1490, &quot;versionNonce&quot;: 752995922, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;tImSWZ8-Ddf8Bnfp9IoNU&quot;, &quot;fillStyle&quot;: &quot;cross-hatch&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: -438.7158555431295, &quot;y&quot;: 91.47292464516144, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;#fd7e14&quot;, &quot;width&quot;: 109.7371542596215, &quot;height&quot;: 31.858416776455286, &quot;seed&quot;: 292769358, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [ { &quot;id&quot;: &quot;gvigzypU8DhO1yosrY79b&quot;, &quot;type&quot;: &quot;arrow&quot; } ], &quot;updated&quot;: 1678310769983, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 1160, &quot;versionNonce&quot;: 1705408462, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;DUmWkMn1&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: -419.3747216837584, &quot;y&quot;: 98.48196055575093, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;#fa5252&quot;, &quot;width&quot;: 63, &quot;height&quot;: 17, &quot;seed&quot;: 1827276178, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [ { &quot;id&quot;: &quot;7A2dQ6Ymq38BhcbGFyOhv&quot;, &quot;type&quot;: &quot;arrow&quot; } ], &quot;updated&quot;: 1678310769983, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 13.268654030798883, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;raw data&quot;, &quot;rawText&quot;: &quot;raw data&quot;, &quot;baseline&quot;: 12, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;raw data&quot; }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 502, &quot;versionNonce&quot;: 133706770, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;ZTlcBkhf&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: -433.7483317057295, &quot;y&quot;: 8.464231945219467, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;#fa5252&quot;, &quot;width&quot;: 100, &quot;height&quot;: 14, &quot;seed&quot;: 1076436814, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [ { &quot;id&quot;: &quot;OSeHY9V2ZPBdRgKqUfYHa&quot;, &quot;type&quot;: &quot;arrow&quot; }, { &quot;id&quot;: &quot;7A2dQ6Ymq38BhcbGFyOhv&quot;, &quot;type&quot;: &quot;arrow&quot; } ], &quot;updated&quot;: 1678310769983, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 11.221906999250749, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;core.ListLinePlotly&quot;, &quot;rawText&quot;: &quot;core.ListLinePlotly&quot;, &quot;baseline&quot;: 10, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;core.ListLinePlotly&quot; }, { &quot;type&quot;: &quot;rectangle&quot;, &quot;version&quot;: 1320, &quot;versionNonce&quot;: 971132430, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;LQMWv98mpgpnuIZ9ZXzsP&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: -439.0150378999259, &quot;y&quot;: -229.74428158714653, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;#868e96&quot;, &quot;width&quot;: 110, &quot;height&quot;: 32, &quot;seed&quot;: 1499109454, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [ { &quot;type&quot;: &quot;text&quot;, &quot;id&quot;: &quot;Bf50KwhU&quot; }, { &quot;id&quot;: &quot;yFTh0lqu2lxWHTb0eqX3G&quot;, &quot;type&quot;: &quot;arrow&quot; }, { &quot;id&quot;: &quot;OSeHY9V2ZPBdRgKqUfYHa&quot;, &quot;type&quot;: &quot;arrow&quot; } ], &quot;updated&quot;: 1678310769983, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 110, &quot;versionNonce&quot;: 112976338, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;Bf50KwhU&quot;, &quot;fillStyle&quot;: &quot;cross-hatch&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: -424.0150378999259, &quot;y&quot;: -223.74428158714653, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;#fa5252&quot;, &quot;width&quot;: 80, &quot;height&quot;: 20, &quot;seed&quot;: 957621842, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1678310769983, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 16, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;core.Panel&quot;, &quot;rawText&quot;: &quot;core.Panel&quot;, &quot;baseline&quot;: 14, &quot;textAlign&quot;: &quot;center&quot;, &quot;verticalAlign&quot;: &quot;middle&quot;, &quot;containerId&quot;: &quot;LQMWv98mpgpnuIZ9ZXzsP&quot;, &quot;originalText&quot;: &quot;core.Panel&quot; }, { &quot;type&quot;: &quot;arrow&quot;, &quot;version&quot;: 191, &quot;versionNonce&quot;: 1019829326, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;-nxsYynee_j51yZEp_XTQ&quot;, &quot;fillStyle&quot;: &quot;cross-hatch&quot;, &quot;strokeWidth&quot;: 0.5, &quot;strokeStyle&quot;: &quot;dashed&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: -177.19148181733658, &quot;y&quot;: -215.88078816731775, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 119.49480329241072, &quot;height&quot;: 1.3374837239583144, &quot;seed&quot;: 322697742, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1678310769983, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;startBinding&quot;: { &quot;elementId&quot;: &quot;yfLd8LXbKN-3PVhmMl4Rf&quot;, &quot;focus&quot;: 0.8244734260815543, &quot;gap&quot;: 1 }, &quot;endBinding&quot;: { &quot;elementId&quot;: &quot;KNLCDlXf4i4Ajqxhv7_UF&quot;, &quot;focus&quot;: -0.8633139919452419, &quot;gap&quot;: 25.201241629464334 }, &quot;lastCommittedPoint&quot;: null, &quot;startArrowhead&quot;: null, &quot;endArrowhead&quot;: &quot;arrow&quot;, &quot;points&quot;: [ [ 0, 0 ], [ -119.49480329241072, 1.3374837239583144 ] ] }, { &quot;type&quot;: &quot;arrow&quot;, &quot;version&quot;: 212, &quot;versionNonce&quot;: 1413732242, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;z3XziM_UtaPNbANsUdN3g&quot;, &quot;fillStyle&quot;: &quot;cross-hatch&quot;, &quot;strokeWidth&quot;: 0.5, &quot;strokeStyle&quot;: &quot;dashed&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: -132.88090354035688, &quot;y&quot;: -132.56707547885557, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 164.05877976190476, &quot;height&quot;: 0.05679175967259198, &quot;seed&quot;: 369985614, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1678310769983, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;startBinding&quot;: { &quot;elementId&quot;: &quot;VIjBeIiE&quot;, &quot;focus&quot;: -0.12143860520673415, &quot;gap&quot;: 10.985913073467032 }, &quot;endBinding&quot;: { &quot;elementId&quot;: &quot;KNLCDlXf4i4Ajqxhv7_UF&quot;, &quot;focus&quot;: -0.4548857096172192, &quot;gap&quot;: 24.947843436949995 }, &quot;lastCommittedPoint&quot;: null, &quot;startArrowhead&quot;: null, &quot;endArrowhead&quot;: &quot;arrow&quot;, &quot;points&quot;: [ [ 0, 0 ], [ -164.05877976190476, 0.05679175967259198 ] ] }, { &quot;type&quot;: &quot;arrow&quot;, &quot;version&quot;: 362, &quot;versionNonce&quot;: 1681171086, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;yF02CmPE5M8sMduQDltrX&quot;, &quot;fillStyle&quot;: &quot;cross-hatch&quot;, &quot;strokeWidth&quot;: 0.5, &quot;strokeStyle&quot;: &quot;dashed&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: -132.88094656808073, &quot;y&quot;: 15.018366552731663, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 164.40942730337736, &quot;height&quot;: 0, &quot;seed&quot;: 1544769166, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1678310769983, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;startBinding&quot;: { &quot;elementId&quot;: &quot;2gN03MI5YfWWTM5327ZCV&quot;, &quot;focus&quot;: 0.785385601206321, &quot;gap&quot;: 12.774427141462468 }, &quot;endBinding&quot;: { &quot;elementId&quot;: &quot;KNLCDlXf4i4Ajqxhv7_UF&quot;, &quot;focus&quot;: 0.2934733209790288, &quot;gap&quot;: 24.59715286775355 }, &quot;lastCommittedPoint&quot;: null, &quot;startArrowhead&quot;: null, &quot;endArrowhead&quot;: &quot;arrow&quot;, &quot;points&quot;: [ [ 0, 0 ], [ -164.40942730337736, 0 ] ] }, { &quot;type&quot;: &quot;arrow&quot;, &quot;version&quot;: 611, &quot;versionNonce&quot;: 549918034, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;06MN9H_C9uUBNQti5-jG_&quot;, &quot;fillStyle&quot;: &quot;cross-hatch&quot;, &quot;strokeWidth&quot;: 0.5, &quot;strokeStyle&quot;: &quot;dashed&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: -78.36228002222032, &quot;y&quot;: 105.38219338483513, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 218.28011790374728, &quot;height&quot;: 0, &quot;seed&quot;: 1644580046, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1678310769983, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;startBinding&quot;: { &quot;elementId&quot;: &quot;a0WKvxZj&quot;, &quot;focus&quot;: -0.014944680042875445, &quot;gap&quot;: 9.528266582860226 }, &quot;endBinding&quot;: { &quot;elementId&quot;: &quot;KNLCDlXf4i4Ajqxhv7_UF&quot;, &quot;focus&quot;: 0.7519802133454053, &quot;gap&quot;: 25.245128813244037 }, &quot;lastCommittedPoint&quot;: null, &quot;startArrowhead&quot;: null, &quot;endArrowhead&quot;: &quot;arrow&quot;, &quot;points&quot;: [ [ 0, 0 ], [ -218.28011790374728, 0 ] ] }, { &quot;type&quot;: &quot;arrow&quot;, &quot;version&quot;: 66, &quot;versionNonce&quot;: 819157842, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;yFTh0lqu2lxWHTb0eqX3G&quot;, &quot;fillStyle&quot;: &quot;cross-hatch&quot;, &quot;strokeWidth&quot;: 0.5, &quot;strokeStyle&quot;: &quot;dashed&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: -424.5413934616819, &quot;y&quot;: -196.74428158714653, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 0, &quot;height&quot;: 47.39307803199401, &quot;seed&quot;: 629113614, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1678316156019, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;startBinding&quot;: { &quot;elementId&quot;: &quot;LQMWv98mpgpnuIZ9ZXzsP&quot;, &quot;gap&quot;: 1, &quot;focus&quot;: 0.7368428283955629 }, &quot;endBinding&quot;: { &quot;elementId&quot;: &quot;It7nVsB0&quot;, &quot;gap&quot;: 8.562679549891556, &quot;focus&quot;: -0.8601867659153855 }, &quot;lastCommittedPoint&quot;: null, &quot;startArrowhead&quot;: null, &quot;endArrowhead&quot;: &quot;arrow&quot;, &quot;points&quot;: [ [ 0, 0 ], [ 0, 47.39307803199401 ] ] }, { &quot;type&quot;: &quot;arrow&quot;, &quot;version&quot;: 187, &quot;versionNonce&quot;: 271589650, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;OSeHY9V2ZPBdRgKqUfYHa&quot;, &quot;fillStyle&quot;: &quot;cross-hatch&quot;, &quot;strokeWidth&quot;: 0.5, &quot;strokeStyle&quot;: &quot;dashed&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: -400.88963528061765, &quot;y&quot;: -196.74428158714653, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 0, &quot;height&quot;: 192.00280180431542, &quot;seed&quot;: 150466894, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1678316156019, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;startBinding&quot;: { &quot;elementId&quot;: &quot;LQMWv98mpgpnuIZ9ZXzsP&quot;, &quot;gap&quot;: 1, &quot;focus&quot;: 0.30681086146712255 }, &quot;endBinding&quot;: { &quot;elementId&quot;: &quot;ZTlcBkhf&quot;, &quot;gap&quot;: 13.205711728050574, &quot;focus&quot;: -0.34282607149776245 }, &quot;lastCommittedPoint&quot;: null, &quot;startArrowhead&quot;: null, &quot;endArrowhead&quot;: &quot;arrow&quot;, &quot;points&quot;: [ [ 0, 0 ], [ 0, 192.00280180431542 ] ] }, { &quot;type&quot;: &quot;rectangle&quot;, &quot;version&quot;: 1164, &quot;versionNonce&quot;: 744216334, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;_iTEcORPzgjXSaQpsQ9wb&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: -439.1644320747448, &quot;y&quot;: -147.69566026927305, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;#4c6ef5&quot;, &quot;width&quot;: 109.7371542596215, &quot;height&quot;: 31.858416776455286, &quot;seed&quot;: 582850130, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [ { &quot;id&quot;: &quot;7A2dQ6Ymq38BhcbGFyOhv&quot;, &quot;type&quot;: &quot;arrow&quot; } ], &quot;updated&quot;: 1678310769983, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 817, &quot;versionNonce&quot;: 960194770, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;It7nVsB0&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: -431.18252208070106, &quot;y&quot;: -140.78852400526097, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;#fa5252&quot;, &quot;width&quot;: 95, &quot;height&quot;: 17, &quot;seed&quot;: 575352782, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [ { &quot;id&quot;: &quot;yFTh0lqu2lxWHTb0eqX3G&quot;, &quot;type&quot;: &quot;arrow&quot; }, { &quot;id&quot;: &quot;OSeHY9V2ZPBdRgKqUfYHa&quot;, &quot;type&quot;: &quot;arrow&quot; } ], &quot;updated&quot;: 1678310769983, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 13.268654030798883, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;core.WEBSlider&quot;, &quot;rawText&quot;: &quot;core.WEBSlider&quot;, &quot;baseline&quot;: 12, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;core.WEBSlider&quot; }, { &quot;type&quot;: &quot;arrow&quot;, &quot;version&quot;: 426, &quot;versionNonce&quot;: 422167886, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;7A2dQ6Ymq38BhcbGFyOhv&quot;, &quot;fillStyle&quot;: &quot;cross-hatch&quot;, &quot;strokeWidth&quot;: 0.5, &quot;strokeStyle&quot;: &quot;dashed&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: -402.13937258307993, &quot;y&quot;: 35.41482834588907, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 0, &quot;height&quot;: 53.872855050223286, &quot;seed&quot;: 935892878, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1678310769984, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;startBinding&quot;: { &quot;elementId&quot;: &quot;ZTlcBkhf&quot;, &quot;focus&quot;: 0.3678208175470081, &quot;gap&quot;: 12.950596400669603 }, &quot;endBinding&quot;: { &quot;elementId&quot;: &quot;DUmWkMn1&quot;, &quot;focus&quot;: -0.45284606029592095, &quot;gap&quot;: 9.194277159638574 }, &quot;lastCommittedPoint&quot;: null, &quot;startArrowhead&quot;: null, &quot;endArrowhead&quot;: &quot;arrow&quot;, &quot;points&quot;: [ [ 0, 0 ], [ 0, 53.872855050223286 ] ] }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 58, &quot;versionNonce&quot;: 993689234, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;o3Op3sUd&quot;, &quot;fillStyle&quot;: &quot;cross-hatch&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: -393.88732910156284, &quot;y&quot;: -181.09782046363466, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 24, &quot;height&quot;: 20, &quot;seed&quot;: 715692174, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1678310769984, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 16, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;ref&quot;, &quot;rawText&quot;: &quot;ref&quot;, &quot;baseline&quot;: 14, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;ref&quot; }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 106, &quot;versionNonce&quot;: 178252686, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;izQ9X8ro&quot;, &quot;fillStyle&quot;: &quot;cross-hatch&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: -393.10081263950923, &quot;y&quot;: -68.67513747442337, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 24, &quot;height&quot;: 20, &quot;seed&quot;: 255194574, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1678310769984, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 16, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;ref&quot;, &quot;rawText&quot;: &quot;ref&quot;, &quot;baseline&quot;: 14, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;ref&quot; }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 120, &quot;versionNonce&quot;: 1615912018, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;gsIZtc6Q&quot;, &quot;fillStyle&quot;: &quot;cross-hatch&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: -393.70732770647356, &quot;y&quot;: 38.233925955636096, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 24, &quot;height&quot;: 20, &quot;seed&quot;: 229223890, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1678310769984, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 16, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;ref&quot;, &quot;rawText&quot;: &quot;ref&quot;, &quot;baseline&quot;: 14, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;ref&quot; }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 118, &quot;versionNonce&quot;: 787958222, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;VzutkUlD&quot;, &quot;fillStyle&quot;: &quot;cross-hatch&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: -234.58710588727706, &quot;y&quot;: -238.69158790225072, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 24, &quot;height&quot;: 20, &quot;seed&quot;: 973314126, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1678310769984, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 16, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;ref&quot;, &quot;rawText&quot;: &quot;ref&quot;, &quot;baseline&quot;: 14, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;ref&quot; }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 96, &quot;versionNonce&quot;: 1448444434, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;PSJJK3sL&quot;, &quot;fillStyle&quot;: &quot;cross-hatch&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: -233.27560570126536, &quot;y&quot;: -157.76219685872397, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 24, &quot;height&quot;: 20, &quot;seed&quot;: 459152850, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1678310769984, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 16, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;ref&quot;, &quot;rawText&quot;: &quot;ref&quot;, &quot;baseline&quot;: 14, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;ref&quot; }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 119, &quot;versionNonce&quot;: 88662030, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;tNKddouz&quot;, &quot;fillStyle&quot;: &quot;cross-hatch&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: -236.91010393415218, &quot;y&quot;: -8.19371541341144, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 24, &quot;height&quot;: 20, &quot;seed&quot;: 278129998, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1678310769984, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 16, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;ref&quot;, &quot;rawText&quot;: &quot;ref&quot;, &quot;baseline&quot;: 14, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;ref&quot; }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 127, &quot;versionNonce&quot;: 2017423314, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;w8HOq8iI&quot;, &quot;fillStyle&quot;: &quot;cross-hatch&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: -234.89111909412236, &quot;y&quot;: 83.18655104864212, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 24, &quot;height&quot;: 20, &quot;seed&quot;: 1718957390, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1678310769984, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 16, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;ref&quot;, &quot;rawText&quot;: &quot;ref&quot;, &quot;baseline&quot;: 14, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;ref&quot; }, { &quot;type&quot;: &quot;arrow&quot;, &quot;version&quot;: 128, &quot;versionNonce&quot;: 1099804238, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;uQXdeupZh9l_UflT2iMXh&quot;, &quot;fillStyle&quot;: &quot;cross-hatch&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: -121.54174924152261, &quot;y&quot;: -366.1172703334267, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 0.8136057438247377, &quot;height&quot;: 112.32141113281281, &quot;seed&quot;: 895987986, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1678310769984, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;startBinding&quot;: { &quot;elementId&quot;: &quot;D5KrzAAX&quot;, &quot;focus&quot;: -0.043758036927407935, &quot;gap&quot;: 9.538859049479242 }, &quot;endBinding&quot;: { &quot;elementId&quot;: &quot;yfLd8LXbKN-3PVhmMl4Rf&quot;, &quot;focus&quot;: -0.6669030679374433, &quot;gap&quot;: 1 }, &quot;lastCommittedPoint&quot;: null, &quot;startArrowhead&quot;: null, &quot;endArrowhead&quot;: &quot;triangle&quot;, &quot;points&quot;: [ [ 0, 0 ], [ -0.8136057438247377, 112.32141113281281 ] ] }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 100, &quot;versionNonce&quot;: 707110290, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;D5KrzAAX&quot;, &quot;fillStyle&quot;: &quot;cross-hatch&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: -169.42705426897305, &quot;y&quot;: -398.15612938290593, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 114, &quot;height&quot;: 25, &quot;seed&quot;: 910738638, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [ { &quot;id&quot;: &quot;uQXdeupZh9l_UflT2iMXh&quot;, &quot;type&quot;: &quot;arrow&quot; } ], &quot;updated&quot;: 1678310769984, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 20, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;Enter Point&quot;, &quot;rawText&quot;: &quot;Enter Point&quot;, &quot;baseline&quot;: 18, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;Enter Point&quot; }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 69, &quot;versionNonce&quot;: 815707278, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;FKOmrwK3&quot;, &quot;fillStyle&quot;: &quot;cross-hatch&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: -108.88343447730625, &quot;y&quot;: -366.2460138230096, &quot;strokeColor&quot;: &quot;#495057&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 94, &quot;height&quot;: 40, &quot;seed&quot;: 1798167570, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1678310769984, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 16, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;CodeMirror\\nDecorations&quot;, &quot;rawText&quot;: &quot;CodeMirror\\nDecorations&quot;, &quot;baseline&quot;: 34, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;CodeMirror\\nDecorations&quot; }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 95, &quot;versionNonce&quot;: 893330258, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;0WLjRWTt&quot;, &quot;fillStyle&quot;: &quot;cross-hatch&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 107.70423525855637, &quot;y&quot;: -291.5826721191406, &quot;strokeColor&quot;: &quot;#495057&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 27, &quot;height&quot;: 20, &quot;seed&quot;: 497677650, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1678310769984, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 16, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;new&quot;, &quot;rawText&quot;: &quot;new&quot;, &quot;baseline&quot;: 14, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;new&quot; }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 157, &quot;versionNonce&quot;: 473232078, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;bhOAK4er&quot;, &quot;fillStyle&quot;: &quot;cross-hatch&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 64.99036807105637, &quot;y&quot;: -189.37680925641735, &quot;strokeColor&quot;: &quot;#495057&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 27, &quot;height&quot;: 20, &quot;seed&quot;: 1119574734, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1678310769984, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 16, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;new&quot;, &quot;rawText&quot;: &quot;new&quot;, &quot;baseline&quot;: 14, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;new&quot; }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 183, &quot;versionNonce&quot;: 602073362, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;SV3jDjc1&quot;, &quot;fillStyle&quot;: &quot;cross-hatch&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 65.10889253162196, &quot;y&quot;: -71.62092662992927, &quot;strokeColor&quot;: &quot;#495057&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 27, &quot;height&quot;: 20, &quot;seed&quot;: 1140868814, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1678310769984, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 16, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;new&quot;, &quot;rawText&quot;: &quot;new&quot;, &quot;baseline&quot;: 14, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;new&quot; }, { &quot;type&quot;: &quot;arrow&quot;, &quot;version&quot;: 68, &quot;versionNonce&quot;: 787048718, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;havFoOi3aTF2CjAAHZ-cB&quot;, &quot;fillStyle&quot;: &quot;cross-hatch&quot;, &quot;strokeWidth&quot;: 0.5, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 87.41492852365276, &quot;y&quot;: -95.15084739976818, &quot;strokeColor&quot;: &quot;#c92a2a&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 140.86414164934013, &quot;height&quot;: 0.15733225370723858, &quot;seed&quot;: 1567689426, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1678310769984, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;startBinding&quot;: { &quot;elementId&quot;: &quot;E-zVSmZAq8WCbgCjf5Xtt&quot;, &quot;focus&quot;: 0.12216842786534833, &quot;gap&quot;: 1 }, &quot;endBinding&quot;: { &quot;elementId&quot;: &quot;DbsVOSuW&quot;, &quot;focus&quot;: -0.06031087239583144, &quot;gap&quot;: 13.309384300595298 }, &quot;lastCommittedPoint&quot;: null, &quot;startArrowhead&quot;: null, &quot;endArrowhead&quot;: &quot;triangle&quot;, &quot;points&quot;: [ [ 0, 0 ], [ 140.86414164934013, 0.15733225370723858 ] ] }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 591, &quot;versionNonce&quot;: 1937036562, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;10Ix4C3t&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 225.94488447869492, &quot;y&quot;: -17.372920936555033, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;#15aabf&quot;, &quot;width&quot;: 100, &quot;height&quot;: 20, &quot;seed&quot;: 1222232846, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [ { &quot;id&quot;: &quot;sulLI668-35ciYEMpJrqV&quot;, &quot;type&quot;: &quot;arrow&quot; } ], &quot;updated&quot;: 1678316187433, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 16, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;Reactive link&quot;, &quot;rawText&quot;: &quot;Reactive link&quot;, &quot;baseline&quot;: 14, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;Reactive link&quot; }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 97, &quot;versionNonce&quot;: 1479874382, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;atDn5LMb&quot;, &quot;fillStyle&quot;: &quot;cross-hatch&quot;, &quot;strokeWidth&quot;: 0.5, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 70, &quot;angle&quot;: 0, &quot;x&quot;: 164.2598179408501, &quot;y&quot;: -120.11572120303134, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 42, &quot;height&quot;: 20, &quot;seed&quot;: 1349171858, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1678310769984, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 16, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;emitt&quot;, &quot;rawText&quot;: &quot;emitt&quot;, &quot;baseline&quot;: 14, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;emitt&quot; }, { &quot;type&quot;: &quot;rectangle&quot;, &quot;version&quot;: 218, &quot;versionNonce&quot;: 1120226450, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;W3Sv2SafuGE8udGaXpXaU&quot;, &quot;fillStyle&quot;: &quot;cross-hatch&quot;, &quot;strokeWidth&quot;: 0.5, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 233.39276994977877, &quot;y&quot;: -112.20756167457154, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;#ced4da&quot;, &quot;width&quot;: 126.47739955357144, &quot;height&quot;: 33.575294131324426, &quot;seed&quot;: 1063829650, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1678310769984, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 138, &quot;versionNonce&quot;: 812711310, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;DbsVOSuW&quot;, &quot;fillStyle&quot;: &quot;cross-hatch&quot;, &quot;strokeWidth&quot;: 0.5, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 241.58845447358817, &quot;y&quot;: -105.52350870768163, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 111, &quot;height&quot;: 20, &quot;seed&quot;: 2001755474, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [ { &quot;id&quot;: &quot;havFoOi3aTF2CjAAHZ-cB&quot;, &quot;type&quot;: &quot;arrow&quot; }, { &quot;id&quot;: &quot;9xYFgANgkj-04ApU_w_7U&quot;, &quot;type&quot;: &quot;arrow&quot; } ], &quot;updated&quot;: 1678310769984, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 16, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;core.FireEvent&quot;, &quot;rawText&quot;: &quot;core.FireEvent&quot;, &quot;baseline&quot;: 14, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;core.FireEvent&quot; }, { &quot;type&quot;: &quot;arrow&quot;, &quot;version&quot;: 122, &quot;versionNonce&quot;: 156363346, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;9xYFgANgkj-04ApU_w_7U&quot;, &quot;fillStyle&quot;: &quot;cross-hatch&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 70, &quot;angle&quot;: 0, &quot;x&quot;: 363.9716157459096, &quot;y&quot;: -95.58142525809086, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;#ced4da&quot;, &quot;width&quot;: 142.91492280505952, &quot;height&quot;: 0, &quot;seed&quot;: 605744082, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1678310769984, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;startBinding&quot;: { &quot;elementId&quot;: &quot;DbsVOSuW&quot;, &quot;focus&quot;: -0.005791655040923161, &quot;gap&quot;: 11.383161272321445 }, &quot;endBinding&quot;: null, &quot;lastCommittedPoint&quot;: null, &quot;startArrowhead&quot;: null, &quot;endArrowhead&quot;: &quot;triangle&quot;, &quot;points&quot;: [ [ 0, 0 ], [ 142.91492280505952, 0 ] ] }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 45, &quot;versionNonce&quot;: 1557535694, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;DMyf6AUs&quot;, &quot;fillStyle&quot;: &quot;cross-hatch&quot;, &quot;strokeWidth&quot;: 0.5, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 70, &quot;angle&quot;: 0, &quot;x&quot;: 524.1692533947191, &quot;y&quot;: -106.69198317754768, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;#ced4da&quot;, &quot;width&quot;: 77, &quot;height&quot;: 20, &quot;seed&quot;: 1823794574, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1678310769984, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 16, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;WL Kernel&quot;, &quot;rawText&quot;: &quot;WL Kernel&quot;, &quot;baseline&quot;: 14, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;WL Kernel&quot; }, { &quot;type&quot;: &quot;rectangle&quot;, &quot;version&quot;: 525, &quot;versionNonce&quot;: 402968594, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;bWELLjc2VTs7HNH8_WcrB&quot;, &quot;fillStyle&quot;: &quot;cross-hatch&quot;, &quot;strokeWidth&quot;: 0.5, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 235.78777785528456, &quot;y&quot;: 192.8651573544463, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;#ced4da&quot;, &quot;width&quot;: 204, &quot;height&quot;: 30, &quot;seed&quot;: 1630640270, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [ { &quot;type&quot;: &quot;text&quot;, &quot;id&quot;: &quot;N1uZwhqp&quot; }, { &quot;id&quot;: &quot;5VYHVpOhiDJXl--n22XQd&quot;, &quot;type&quot;: &quot;arrow&quot; } ], &quot;updated&quot;: 1678310769984, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 291, &quot;versionNonce&quot;: 1937601038, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;N1uZwhqp&quot;, &quot;fillStyle&quot;: &quot;cross-hatch&quot;, &quot;strokeWidth&quot;: 0.5, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 245.28777785528456, &quot;y&quot;: 197.8651573544463, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;#ced4da&quot;, &quot;width&quot;: 185, &quot;height&quot;: 20, &quot;seed&quot;: 1208907278, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1678310769984, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 16, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;core.SetFrontEndObject&quot;, &quot;rawText&quot;: &quot;core.SetFrontEndObject&quot;, &quot;baseline&quot;: 14, &quot;textAlign&quot;: &quot;center&quot;, &quot;verticalAlign&quot;: &quot;middle&quot;, &quot;containerId&quot;: &quot;bWELLjc2VTs7HNH8_WcrB&quot;, &quot;originalText&quot;: &quot;core.SetFrontEndObject&quot; }, { &quot;type&quot;: &quot;arrow&quot;, &quot;version&quot;: 495, &quot;versionNonce&quot;: 1663807758, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;5VYHVpOhiDJXl--n22XQd&quot;, &quot;fillStyle&quot;: &quot;cross-hatch&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 651.7496843702181, &quot;y&quot;: -43.593310738112734, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;#ced4da&quot;, &quot;width&quot;: 238.56017316479614, &quot;height&quot;: 228.19292316834893, &quot;seed&quot;: 1565081742, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1678316156020, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;startBinding&quot;: { &quot;elementId&quot;: &quot;R7bFVCI3&quot;, &quot;focus&quot;: -2.201631371327045, &quot;gap&quot;: 12.01631371327045 }, &quot;endBinding&quot;: { &quot;elementId&quot;: &quot;bWELLjc2VTs7HNH8_WcrB&quot;, &quot;gap&quot;: 8.265544924210104, &quot;focus&quot;: 0.6536098312724061 }, &quot;lastCommittedPoint&quot;: null, &quot;startArrowhead&quot;: null, &quot;endArrowhead&quot;: &quot;triangle&quot;, &quot;points&quot;: [ [ 0, 0 ], [ -178.29563110480348, 0 ], [ -238.56017316479614, 228.19292316834893 ] ] }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 202, &quot;versionNonce&quot;: 1600127054, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;2MLuTwha&quot;, &quot;fillStyle&quot;: &quot;cross-hatch&quot;, &quot;strokeWidth&quot;: 0.5, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 70, &quot;angle&quot;: 0, &quot;x&quot;: 492.5225881420196, &quot;y&quot;: -33.96373119790735, &quot;strokeColor&quot;: &quot;#495057&quot;, &quot;backgroundColor&quot;: &quot;#ced4da&quot;, &quot;width&quot;: 127, &quot;height&quot;: 20, &quot;seed&quot;: 67846158, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1678310769984, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 16, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;SendToFrontEnd&quot;, &quot;rawText&quot;: &quot;SendToFrontEnd&quot;, &quot;baseline&quot;: 14, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;SendToFrontEnd&quot; }, { &quot;type&quot;: &quot;arrow&quot;, &quot;version&quot;: 356, &quot;versionNonce&quot;: 1188656018, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;gvigzypU8DhO1yosrY79b&quot;, &quot;fillStyle&quot;: &quot;cross-hatch&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 235.92927478608829, &quot;y&quot;: 208.96303449358317, &quot;strokeColor&quot;: &quot;#c92a2a&quot;, &quot;backgroundColor&quot;: &quot;#ced4da&quot;, &quot;width&quot;: 597.6386369977679, &quot;height&quot;: 77.25661504836313, &quot;seed&quot;: 1719923154, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1678310769984, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;startBinding&quot;: null, &quot;endBinding&quot;: { &quot;elementId&quot;: &quot;tImSWZ8-Ddf8Bnfp9IoNU&quot;, &quot;focus&quot;: -0.3974453241154099, &quot;gap&quot;: 8.375078023603315 }, &quot;lastCommittedPoint&quot;: null, &quot;startArrowhead&quot;: null, &quot;endArrowhead&quot;: &quot;triangle&quot;, &quot;points&quot;: [ [ 0, 0 ], [ -596.8047805059523, 0 ], [ -597.6386369977679, -77.25661504836313 ] ] }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 592, &quot;versionNonce&quot;: 1146537614, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;8gpechRF&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: -85.63456217447703, &quot;y&quot;: 217.47389293852376, &quot;strokeColor&quot;: &quot;#495057&quot;, &quot;backgroundColor&quot;: &quot;#15aabf&quot;, &quot;width&quot;: 105, &quot;height&quot;: 20, &quot;seed&quot;: 1586081042, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1678310769984, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 16, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;update value&quot;, &quot;rawText&quot;: &quot;update value&quot;, &quot;baseline&quot;: 14, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;update value&quot; }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 183, &quot;versionNonce&quot;: 1885473422, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;fe7yX11l&quot;, &quot;fillStyle&quot;: &quot;cross-hatch&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 236.13477974254442, &quot;y&quot;: 8.566678887000705, &quot;strokeColor&quot;: &quot;#495057&quot;, &quot;backgroundColor&quot;: &quot;#ced4da&quot;, &quot;width&quot;: 165, &quot;height&quot;: 80, &quot;seed&quot;: 57555534, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [ { &quot;id&quot;: &quot;sulLI668-35ciYEMpJrqV&quot;, &quot;type&quot;: &quot;arrow&quot; } ], &quot;updated&quot;: 1678316181981, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 16, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;automatically\\ncreated\\nbetween two\\nFrontEndExecutables&quot;, &quot;rawText&quot;: &quot;automatically\\ncreated\\nbetween two\\nFrontEndExecutables&quot;, &quot;baseline&quot;: 74, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;automatically\\ncreated\\nbetween two\\nFrontEndExecutables&quot; }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 203, &quot;versionNonce&quot;: 1662698702, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;R7bFVCI3&quot;, &quot;fillStyle&quot;: &quot;cross-hatch&quot;, &quot;strokeWidth&quot;: 0.5, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 70, &quot;angle&quot;: 0, &quot;x&quot;: 493.92573211899503, &quot;y&quot;: -75.60962445138318, &quot;strokeColor&quot;: &quot;#495057&quot;, &quot;backgroundColor&quot;: &quot;#ced4da&quot;, &quot;width&quot;: 195, &quot;height&quot;: 20, &quot;seed&quot;: 2079898062, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [ { &quot;id&quot;: &quot;5VYHVpOhiDJXl--n22XQd&quot;, &quot;type&quot;: &quot;arrow&quot; } ], &quot;updated&quot;: 1678310769984, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 16, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;EmittedEvent[uid, data]&quot;, &quot;rawText&quot;: &quot;EmittedEvent[uid, data]&quot;, &quot;baseline&quot;: 14, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;EmittedEvent[uid, data]&quot; }, { &quot;id&quot;: &quot;UCs9wb4P&quot;, &quot;type&quot;: &quot;text&quot;, &quot;x&quot;: 235.6085624843975, &quot;y&quot;: 93.02746184308444, &quot;width&quot;: 178, &quot;height&quot;: 40, &quot;angle&quot;: 0, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;#ced4da&quot;, &quot;fillStyle&quot;: &quot;cross-hatch&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;seed&quot;: 445475662, &quot;version&quot;: 99, &quot;versionNonce&quot;: 1789312466, &quot;isDeleted&quot;: false, &quot;boundElements&quot;: null, &quot;updated&quot;: 1678316239803, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;text&quot;: &quot;only nested. bubble-like\\nconnection&quot;, &quot;rawText&quot;: &quot;only nested. bubble-like\\nconnection&quot;, &quot;fontSize&quot;: 16, &quot;fontFamily&quot;: 1, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;baseline&quot;: 34, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;only nested. bubble-like\\nconnection&quot; } ], &quot;appState&quot;: { &quot;theme&quot;: &quot;light&quot;, &quot;viewBackgroundColor&quot;: &quot;#ffffff&quot;, &quot;currentItemStrokeColor&quot;: &quot;#000000&quot;, &quot;currentItemBackgroundColor&quot;: &quot;#ced4da&quot;, &quot;currentItemFillStyle&quot;: &quot;cross-hatch&quot;, &quot;currentItemStrokeWidth&quot;: 1, &quot;currentItemStrokeStyle&quot;: &quot;solid&quot;, &quot;currentItemRoughness&quot;: 1, &quot;currentItemOpacity&quot;: 100, &quot;currentItemFontFamily&quot;: 1, &quot;currentItemFontSize&quot;: 16, &quot;currentItemTextAlign&quot;: &quot;left&quot;, &quot;currentItemStartArrowhead&quot;: null, &quot;currentItemEndArrowhead&quot;: &quot;triangle&quot;, &quot;scrollX&quot;: 507.64875530959915, &quot;scrollY&quot;: 440.6275658476022, &quot;zoom&quot;: { &quot;value&quot;: 0.9500000000000001 }, &quot;currentItemRoundness&quot;: &quot;sharp&quot;, &quot;gridSize&quot;: null, &quot;colorPalette&quot;: {} }, &quot;files&quot;: {} } %%","keywords":"","version":null},{"title":"Text Elements","type":0,"sectionRef":"#","url":"/imgs/FE data binding.excalidraw 1","content":"==⚠ Switch to EXCALIDRAW VIEW in the MORE OPTIONS menu of this document. ⚠== Text Elements instance ^98kABRIO uid_1 ^PTVBXhgC Create container ^CnIbPfzS CALL ^NPYQscPv core.Function ^wudKg9Zn core.otherSymbol ^Nivwk3dT ... ^mN47U8os ... ^sjR3pZbV instance ^7VCLkKzy uid_4 ^vR7deZXW core.Function2 ^2DCysDy2 core.otherSymbol2 ^f6W1eL8c ... ^8clkL2jK ... ^evErsAw4 Create container ^mThHQxRF Create container ^9DQzK8c2 instance ^NdnGa8IM link ^1MYH20iQ link ^WSa4Hmf0 bubble up ^uQZFKKUG UPDATE ^eRAHCZgz update method ^8eEG3D1W Local memory ^aY13ZN8a Local memory ^YOuzKiYs Local memory ^NyALk65w Global memory ^zR3bRDDd %% Drawing { &quot;type&quot;: &quot;excalidraw&quot;, &quot;version&quot;: 2, &quot;source&quot;: &quot;https://github.com/zsviczian/obsidian-excalidraw-plugin/releases/tag/1.9.3&quot;, &quot;elements&quot;: [ { &quot;type&quot;: &quot;rectangle&quot;, &quot;version&quot;: 1007, &quot;versionNonce&quot;: 769756904, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;0_MhAvtUjG37RQYxiAXit&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 173.71231423707727, &quot;y&quot;: -1275.491845598057, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 223.2444806780134, &quot;height&quot;: 265.84989929199224, &quot;seed&quot;: 1192599411, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1686254622504, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;customData&quot;: { &quot;legacyTextWrap&quot;: true } }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 431, &quot;versionNonce&quot;: 1173435288, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;98kABRIO&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 180.37276258389645, &quot;y&quot;: -1270.6405070752821, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;#228be6&quot;, &quot;width&quot;: 71.63194274902344, &quot;height&quot;: 20, &quot;seed&quot;: 541250973, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [ { &quot;id&quot;: &quot;6zQkhk86lEDABNeVVrWc-&quot;, &quot;type&quot;: &quot;arrow&quot; } ], &quot;updated&quot;: 1686254622504, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;customData&quot;: { &quot;legacyTextWrap&quot;: true }, &quot;fontSize&quot;: 16, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;instance &quot;, &quot;rawText&quot;: &quot;instance &quot;, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;instance &quot;, &quot;lineHeight&quot;: 1.25, &quot;baseline&quot;: 14 }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 382, &quot;versionNonce&quot;: 866087400, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;PTVBXhgC&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;dashed&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 338.4868171568778, &quot;y&quot;: -1273.6680520187267, &quot;strokeColor&quot;: &quot;#495057&quot;, &quot;backgroundColor&quot;: &quot;#ced4da&quot;, &quot;width&quot;: 49.05995178222656, &quot;height&quot;: 25, &quot;seed&quot;: 641061469, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1686254622504, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;customData&quot;: { &quot;legacyTextWrap&quot;: true }, &quot;fontSize&quot;: 20, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;uid_1&quot;, &quot;rawText&quot;: &quot;uid_1&quot;, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;uid_1&quot;, &quot;lineHeight&quot;: 1.25, &quot;baseline&quot;: 17 }, { &quot;type&quot;: &quot;ellipse&quot;, &quot;version&quot;: 473, &quot;versionNonce&quot;: 1840709784, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;_m3jrTmu4n6qm-lCQ4xwP&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 200.32287151473804, &quot;y&quot;: -1338.6898047882698, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;#ced4da&quot;, &quot;width&quot;: 15.568679809570312, &quot;height&quot;: 15.568679809570312, &quot;seed&quot;: 846649619, &quot;groupIds&quot;: [], &quot;roundness&quot;: { &quot;type&quot;: 2 }, &quot;boundElements&quot;: [], &quot;updated&quot;: 1686254622504, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 372, &quot;versionNonce&quot;: 766047464, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;CnIbPfzS&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 223.8414142050259, &quot;y&quot;: -1341.0614888734533, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;#ced4da&quot;, &quot;width&quot;: 133.08790588378906, &quot;height&quot;: 20, &quot;seed&quot;: 1991605821, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1686254622504, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;customData&quot;: { &quot;legacyTextWrap&quot;: true }, &quot;fontSize&quot;: 16, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;Create container&quot;, &quot;rawText&quot;: &quot;Create container&quot;, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;Create container&quot;, &quot;lineHeight&quot;: 1.25, &quot;baseline&quot;: 14 }, { &quot;type&quot;: &quot;arrow&quot;, &quot;version&quot;: 772, &quot;versionNonce&quot;: 356199832, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;fvnqxt74aMDC18ZOjQkm_&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 278.1450811768814, &quot;y&quot;: -1196.8541175881517, &quot;strokeColor&quot;: &quot;#495057&quot;, &quot;backgroundColor&quot;: &quot;#ced4da&quot;, &quot;width&quot;: 2.221298256734485, &quot;height&quot;: 37.084271673950525, &quot;seed&quot;: 723451795, &quot;groupIds&quot;: [], &quot;roundness&quot;: { &quot;type&quot;: 2 }, &quot;boundElements&quot;: [], &quot;updated&quot;: 1686254622504, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;startBinding&quot;: { &quot;elementId&quot;: &quot;RhjM2O-JTBZTrSvwxRCk9&quot;, &quot;gap&quot;: 5.528654155452614, &quot;focus&quot;: -0.020826545524459786 }, &quot;endBinding&quot;: { &quot;elementId&quot;: &quot;t9dXhnzhHwwLUwertuswv&quot;, &quot;gap&quot;: 1, &quot;focus&quot;: 0.06165721801171414 }, &quot;lastCommittedPoint&quot;: null, &quot;startArrowhead&quot;: null, &quot;endArrowhead&quot;: &quot;arrow&quot;, &quot;points&quot;: [ [ 0, 0 ], [ 2.221298256734485, 37.084271673950525 ] ] }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 254, &quot;versionNonce&quot;: 1368004584, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;NPYQscPv&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 182.5262072107961, &quot;y&quot;: -1398.4489673327002, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;#fab005&quot;, &quot;width&quot;: 49.95997619628906, &quot;height&quot;: 25, &quot;seed&quot;: 1185996221, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [ { &quot;id&quot;: &quot;6zQkhk86lEDABNeVVrWc-&quot;, &quot;type&quot;: &quot;arrow&quot; } ], &quot;updated&quot;: 1686254622504, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;customData&quot;: { &quot;legacyTextWrap&quot;: true }, &quot;fontSize&quot;: 20, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;CALL&quot;, &quot;rawText&quot;: &quot;CALL&quot;, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;CALL&quot;, &quot;lineHeight&quot;: 1.25, &quot;baseline&quot;: 17 }, { &quot;type&quot;: &quot;freedraw&quot;, &quot;version&quot;: 539, &quot;versionNonce&quot;: 1974581912, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;LGaODbu7YTcL5g4PxWaQA&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0.3737697015058119, &quot;x&quot;: 377.1599868353288, &quot;y&quot;: -836.896801486759, &quot;strokeColor&quot;: &quot;#c2255c&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 209.82507314753468, &quot;height&quot;: 269.8801685779199, &quot;seed&quot;: 932963645, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1686254622504, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;points&quot;: [ [ -154.49262346540172, -116.8916413334279 ], [ -157.58251892865067, -116.8916413334279 ], [ -160.8078086077674, -116.8916413334279 ], [ -167.25821893452033, -118.35695787385349 ], [ -180.57899830128886, -121.69056452270333 ], [ -196.54224680246497, -126.82570006378256 ], [ -214.09092607484152, -133.14779268788558 ], [ -236.43612715317454, -141.39172774567362 ], [ -259.53901184277737, -151.53037069375432 ], [ -281.4394065802166, -163.32621748156944 ], [ -301.80622095309377, -176.83333240689637 ], [ -321.2751401016396, -193.3416302258939 ], [ -337.1765230809586, -210.26913114167377 ], [ -347.45376386800086, -225.00303461183407 ], [ -355.8846737937156, -241.42035491459055 ], [ -360.995763184853, -259.47992945958987 ], [ -364.3176966129364, -280.7409193495929 ], [ -364.3176966129364, -299.44076672414263 ], [ -358.34720891714795, -322.76940882062434 ], [ -349.982939652614, -337.92021151124123 ], [ -339.7745369359988, -350.8349742345932 ], [ -328.23349002724717, -361.4481645085258 ], [ -316.7661408439866, -370.37077033462674 ], [ -305.93354712781377, -376.93282447736897 ], [ -292.5537757743563, -383.64882875592275 ], [ -282.9323771315922, -386.2833369330383 ], [ -279.70717196821573, -386.77180991134776 ], [ -279.70717196821573, -386.77180991134776 ] ], &quot;lastCommittedPoint&quot;: null, &quot;simulatePressure&quot;: true, &quot;pressures&quot;: [] }, { &quot;type&quot;: &quot;freedraw&quot;, &quot;version&quot;: 95, &quot;versionNonce&quot;: 1129241320, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;5VWLd17WRHl4wRwo48_qa&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 135.75766206439266, &quot;y&quot;: -1233.1374542030744, &quot;strokeColor&quot;: &quot;#c2255c&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 25.449379357016596, &quot;height&quot;: 24.941865080080333, &quot;seed&quot;: 19950547, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1686254622504, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;points&quot;: [ [ 0, 0 ], [ 4.185213513188728, 1.1969177966839197 ], [ 7.045034818978593, 1.7689260810552696 ], [ 12.764970918646782, 2.8851346534179356 ], [ 18.484466786182338, 4.029077850138265 ], [ 23.299579109187334, 4.601012762487471 ], [ 24.899822911411093, 5.225995646822184 ], [ 25.449379357016596, 5.225995646822184 ], [ 25.449379357016596, 5.500773869624936 ], [ 25.449379357016596, 6.05033031523044 ], [ 24.899822911411093, 7.14951657846359 ], [ 22.483388735233348, 10.488016956500587 ], [ 19.789901803567318, 14.731047623112318 ], [ 16.607757204647214, 18.485273878425687 ], [ 14.44078790364415, 21.002374468938797 ], [ 12.424818224143905, 23.018344148438928 ], [ 11.325705332932785, 23.842678816847183 ], [ 10.226592441721778, 24.941865080080333 ], [ 10.226592441721778, 24.941865080080333 ] ], &quot;lastCommittedPoint&quot;: null, &quot;simulatePressure&quot;: true, &quot;pressures&quot;: [] }, { &quot;type&quot;: &quot;ellipse&quot;, &quot;version&quot;: 334, &quot;versionNonce&quot;: 30320536, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;bULQ2guIKlz86D33TrfiR&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 144.68802057676857, &quot;y&quot;: -924.5177986298521, &quot;strokeColor&quot;: &quot;#c2255c&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 10.291173992417612, &quot;height&quot;: 9.993235236837222, &quot;seed&quot;: 283325981, &quot;groupIds&quot;: [], &quot;roundness&quot;: { &quot;type&quot;: 2 }, &quot;boundElements&quot;: [], &quot;updated&quot;: 1686254622504, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;type&quot;: &quot;arrow&quot;, &quot;version&quot;: 1122, &quot;versionNonce&quot;: 1166228968, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;6zQkhk86lEDABNeVVrWc-&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 207.55565791052197, &quot;y&quot;: -1366.9410649278507, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 0.7682805065595062, &quot;height&quot;: 93.36160172812606, &quot;seed&quot;: 415163325, &quot;groupIds&quot;: [], &quot;roundness&quot;: { &quot;type&quot;: 2 }, &quot;boundElements&quot;: [], &quot;updated&quot;: 1686254622504, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;startBinding&quot;: { &quot;elementId&quot;: &quot;NPYQscPv&quot;, &quot;focus&quot;: 0.003978061814332476, &quot;gap&quot;: 6.507902404849574 }, &quot;endBinding&quot;: { &quot;elementId&quot;: &quot;98kABRIO&quot;, &quot;focus&quot;: -0.216119647550072, &quot;gap&quot;: 2.938956124442484 }, &quot;lastCommittedPoint&quot;: null, &quot;startArrowhead&quot;: null, &quot;endArrowhead&quot;: &quot;arrow&quot;, &quot;points&quot;: [ [ 0, 0 ], [ 0.7682805065595062, 93.36160172812606 ] ] }, { &quot;type&quot;: &quot;rectangle&quot;, &quot;version&quot;: 1144, &quot;versionNonce&quot;: 902165656, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;RhjM2O-JTBZTrSvwxRCk9&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 190.96386176902524, &quot;y&quot;: -1238.3827717436043, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;#ced4da&quot;, &quot;width&quot;: 168, &quot;height&quot;: 36, &quot;seed&quot;: 1699524584, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [ { &quot;type&quot;: &quot;text&quot;, &quot;id&quot;: &quot;wudKg9Zn&quot; }, { &quot;id&quot;: &quot;fvnqxt74aMDC18ZOjQkm_&quot;, &quot;type&quot;: &quot;arrow&quot; }, { &quot;id&quot;: &quot;JQ6nkdl6sxsma0Gmc0cNU&quot;, &quot;type&quot;: &quot;arrow&quot; } ], &quot;updated&quot;: 1686254622504, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;customData&quot;: { &quot;legacyTextWrap&quot;: true } }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 861, &quot;versionNonce&quot;: 1764966632, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;wudKg9Zn&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 225.17990333396665, &quot;y&quot;: -1230.3827717436043, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;#ced4da&quot;, &quot;width&quot;: 99.56791687011719, &quot;height&quot;: 20, &quot;seed&quot;: 1929278184, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1686254622504, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 16, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;core.Function&quot;, &quot;rawText&quot;: &quot;core.Function&quot;, &quot;textAlign&quot;: &quot;center&quot;, &quot;verticalAlign&quot;: &quot;middle&quot;, &quot;containerId&quot;: &quot;RhjM2O-JTBZTrSvwxRCk9&quot;, &quot;originalText&quot;: &quot;core.Function&quot;, &quot;lineHeight&quot;: 1.25, &quot;baseline&quot;: 14 }, { &quot;type&quot;: &quot;diamond&quot;, &quot;version&quot;: 682, &quot;versionNonce&quot;: 1733009816, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;t9dXhnzhHwwLUwertuswv&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 251.7506921261679, &quot;y&quot;: -1158.7698915817741, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;#ced4da&quot;, &quot;width&quot;: 57.25048828124997, &quot;height&quot;: 57.25048828124997, &quot;seed&quot;: 473988504, &quot;groupIds&quot;: [], &quot;roundness&quot;: { &quot;type&quot;: 2 }, &quot;boundElements&quot;: [ { &quot;id&quot;: &quot;fvnqxt74aMDC18ZOjQkm_&quot;, &quot;type&quot;: &quot;arrow&quot; }, { &quot;id&quot;: &quot;dkenj-OlXq1jcDOyOVYsH&quot;, &quot;type&quot;: &quot;arrow&quot; }, { &quot;id&quot;: &quot;JQ6nkdl6sxsma0Gmc0cNU&quot;, &quot;type&quot;: &quot;arrow&quot; }, { &quot;id&quot;: &quot;Px7LruMAXpfOqrv3rP85P&quot;, &quot;type&quot;: &quot;arrow&quot; }, { &quot;id&quot;: &quot;DtCeAS3N2cgN4YywH9sxn&quot;, &quot;type&quot;: &quot;arrow&quot; } ], &quot;updated&quot;: 1686254622504, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;customData&quot;: { &quot;legacyTextWrap&quot;: true } }, { &quot;type&quot;: &quot;rectangle&quot;, &quot;version&quot;: 1267, &quot;versionNonce&quot;: 1038803944, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;zu1TfzJPPcbc9ptORYGFf&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 201.13223160719485, &quot;y&quot;: -1063.7128411492963, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;#ced4da&quot;, &quot;width&quot;: 168, &quot;height&quot;: 36, &quot;seed&quot;: 1988456680, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [ { &quot;type&quot;: &quot;text&quot;, &quot;id&quot;: &quot;Nivwk3dT&quot; }, { &quot;id&quot;: &quot;ecb4xuC3CCTeAgN5Q6vL7&quot;, &quot;type&quot;: &quot;arrow&quot; }, { &quot;id&quot;: &quot;Qe1yPHS4T9EnpFHh6ONof&quot;, &quot;type&quot;: &quot;arrow&quot; }, { &quot;id&quot;: &quot;n2ARW2tHBHWiaVNG_UGCH&quot;, &quot;type&quot;: &quot;arrow&quot; }, { &quot;id&quot;: &quot;MOWREmtAKT0wHDsyhnrDL&quot;, &quot;type&quot;: &quot;arrow&quot; } ], &quot;updated&quot;: 1686254622504, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;customData&quot;: { &quot;legacyTextWrap&quot;: true } }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 990, &quot;versionNonce&quot;: 362000024, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;Nivwk3dT&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 221.67627610182376, &quot;y&quot;: -1055.7128411492963, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;#ced4da&quot;, &quot;width&quot;: 126.91191101074219, &quot;height&quot;: 20, &quot;seed&quot;: 1098322920, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1686254622504, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 16, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;core.otherSymbol&quot;, &quot;rawText&quot;: &quot;core.otherSymbol&quot;, &quot;textAlign&quot;: &quot;center&quot;, &quot;verticalAlign&quot;: &quot;middle&quot;, &quot;containerId&quot;: &quot;zu1TfzJPPcbc9ptORYGFf&quot;, &quot;originalText&quot;: &quot;core.otherSymbol&quot;, &quot;lineHeight&quot;: 1.25, &quot;baseline&quot;: 14 }, { &quot;type&quot;: &quot;arrow&quot;, &quot;version&quot;: 781, &quot;versionNonce&quot;: 28714728, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;ecb4xuC3CCTeAgN5Q6vL7&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 280.6324509710711, &quot;y&quot;: -1102.234831424688, &quot;strokeColor&quot;: &quot;#495057&quot;, &quot;backgroundColor&quot;: &quot;#ced4da&quot;, &quot;width&quot;: 2.221298256734485, &quot;height&quot;: 37.084271673950525, &quot;seed&quot;: 1157477864, &quot;groupIds&quot;: [], &quot;roundness&quot;: { &quot;type&quot;: 2 }, &quot;boundElements&quot;: [], &quot;updated&quot;: 1686254622504, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;startBinding&quot;: null, &quot;endBinding&quot;: { &quot;elementId&quot;: &quot;zu1TfzJPPcbc9ptORYGFf&quot;, &quot;gap&quot;: 1.4377186014412473, &quot;focus&quot;: -0.013096061706266553 }, &quot;lastCommittedPoint&quot;: null, &quot;startArrowhead&quot;: null, &quot;endArrowhead&quot;: &quot;arrow&quot;, &quot;points&quot;: [ [ 0, 0 ], [ 2.221298256734485, 37.084271673950525 ] ] }, { &quot;type&quot;: &quot;arrow&quot;, &quot;version&quot;: 954, &quot;versionNonce&quot;: 961682328, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;dkenj-OlXq1jcDOyOVYsH&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 310.1487834233367, &quot;y&quot;: -1127.3749159937752, &quot;strokeColor&quot;: &quot;#495057&quot;, &quot;backgroundColor&quot;: &quot;#ced4da&quot;, &quot;width&quot;: 24.737952135082764, &quot;height&quot;: 10.53343374844826, &quot;seed&quot;: 1509707672, &quot;groupIds&quot;: [], &quot;roundness&quot;: { &quot;type&quot;: 2 }, &quot;boundElements&quot;: [], &quot;updated&quot;: 1686254622504, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;startBinding&quot;: { &quot;elementId&quot;: &quot;t9dXhnzhHwwLUwertuswv&quot;, &quot;gap&quot;: 2.769973763170043, &quot;focus&quot;: -0.34611279983707877 }, &quot;endBinding&quot;: { &quot;elementId&quot;: &quot;ENpBunBgJANWWb9y5-KMh&quot;, &quot;gap&quot;: 2.5268681190880216, &quot;focus&quot;: -0.37154048866342143 }, &quot;lastCommittedPoint&quot;: null, &quot;startArrowhead&quot;: null, &quot;endArrowhead&quot;: &quot;arrow&quot;, &quot;points&quot;: [ [ 0, 0 ], [ 24.737952135082764, 10.53343374844826 ] ] }, { &quot;id&quot;: &quot;ENpBunBgJANWWb9y5-KMh&quot;, &quot;type&quot;: &quot;rectangle&quot;, &quot;x&quot;: 337.41360367750747, &quot;y&quot;: -1130.1838843273097, &quot;width&quot;: 46, &quot;height&quot;: 30, &quot;angle&quot;: 0, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;#ced4da&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;seed&quot;: 844656872, &quot;version&quot;: 212, &quot;versionNonce&quot;: 1361119720, &quot;isDeleted&quot;: false, &quot;boundElements&quot;: [ { &quot;type&quot;: &quot;text&quot;, &quot;id&quot;: &quot;mN47U8os&quot; }, { &quot;id&quot;: &quot;dkenj-OlXq1jcDOyOVYsH&quot;, &quot;type&quot;: &quot;arrow&quot; }, { &quot;id&quot;: &quot;Qe1yPHS4T9EnpFHh6ONof&quot;, &quot;type&quot;: &quot;arrow&quot; }, { &quot;id&quot;: &quot;Px7LruMAXpfOqrv3rP85P&quot;, &quot;type&quot;: &quot;arrow&quot; } ], &quot;updated&quot;: 1686254622504, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;id&quot;: &quot;mN47U8os&quot;, &quot;type&quot;: &quot;text&quot;, &quot;x&quot;: 353.83762253737075, &quot;y&quot;: -1125.1838843273097, &quot;width&quot;: 13.151962280273438, &quot;height&quot;: 20, &quot;angle&quot;: 0, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;#ced4da&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;seed&quot;: 928673176, &quot;version&quot;: 124, &quot;versionNonce&quot;: 347793560, &quot;isDeleted&quot;: false, &quot;boundElements&quot;: null, &quot;updated&quot;: 1686254622504, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;text&quot;: &quot;...&quot;, &quot;rawText&quot;: &quot;...&quot;, &quot;fontSize&quot;: 16, &quot;fontFamily&quot;: 1, &quot;textAlign&quot;: &quot;center&quot;, &quot;verticalAlign&quot;: &quot;middle&quot;, &quot;baseline&quot;: 14, &quot;containerId&quot;: &quot;ENpBunBgJANWWb9y5-KMh&quot;, &quot;originalText&quot;: &quot;...&quot;, &quot;lineHeight&quot;: 1.25 }, { &quot;type&quot;: &quot;rectangle&quot;, &quot;version&quot;: 310, &quot;versionNonce&quot;: 1463258344, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;s9jkxX9PBf4_X6c0M5oVF&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 187.99239134491802, &quot;y&quot;: -1115.436166606188, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;#ced4da&quot;, &quot;width&quot;: 46, &quot;height&quot;: 30, &quot;seed&quot;: 360422552, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [ { &quot;type&quot;: &quot;text&quot;, &quot;id&quot;: &quot;sjR3pZbV&quot; }, { &quot;id&quot;: &quot;a4Km7bhiivCQ7cHl-sjD8&quot;, &quot;type&quot;: &quot;arrow&quot; } ], &quot;updated&quot;: 1686254622504, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 219, &quot;versionNonce&quot;: 58856856, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;sjR3pZbV&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 204.4164102047813, &quot;y&quot;: -1110.436166606188, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;#ced4da&quot;, &quot;width&quot;: 13.151962280273438, &quot;height&quot;: 20, &quot;seed&quot;: 302795160, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1686254622504, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 16, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;...&quot;, &quot;rawText&quot;: &quot;...&quot;, &quot;textAlign&quot;: &quot;center&quot;, &quot;verticalAlign&quot;: &quot;middle&quot;, &quot;containerId&quot;: &quot;s9jkxX9PBf4_X6c0M5oVF&quot;, &quot;originalText&quot;: &quot;...&quot;, &quot;lineHeight&quot;: 1.25, &quot;baseline&quot;: 14 }, { &quot;type&quot;: &quot;arrow&quot;, &quot;version&quot;: 1103, &quot;versionNonce&quot;: 2105913320, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;a4Km7bhiivCQ7cHl-sjD8&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 253.67806187113473, &quot;y&quot;: -1130.4047528505143, &quot;strokeColor&quot;: &quot;#495057&quot;, &quot;backgroundColor&quot;: &quot;#ced4da&quot;, &quot;width&quot;: 24.89906307139057, &quot;height&quot;: 11.24165954364912, &quot;seed&quot;: 63574424, &quot;groupIds&quot;: [], &quot;roundness&quot;: { &quot;type&quot;: 2 }, &quot;boundElements&quot;: [], &quot;updated&quot;: 1686254622505, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;startBinding&quot;: null, &quot;endBinding&quot;: { &quot;elementId&quot;: &quot;s9jkxX9PBf4_X6c0M5oVF&quot;, &quot;gap&quot;: 3.726926700677268, &quot;focus&quot;: -0.42138188940747456 }, &quot;lastCommittedPoint&quot;: null, &quot;startArrowhead&quot;: null, &quot;endArrowhead&quot;: &quot;arrow&quot;, &quot;points&quot;: [ [ 0, 0 ], [ -24.89906307139057, 11.24165954364912 ] ] }, { &quot;id&quot;: &quot;Qe1yPHS4T9EnpFHh6ONof&quot;, &quot;type&quot;: &quot;arrow&quot;, &quot;x&quot;: 368.24694282371274, &quot;y&quot;: -1095.3177039073878, &quot;width&quot;: 24.38172171266831, &quot;height&quot;: 26.5699128446945, &quot;angle&quot;: 0, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;#ced4da&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;seed&quot;: 221058712, &quot;version&quot;: 70, &quot;versionNonce&quot;: 1255907992, &quot;isDeleted&quot;: false, &quot;boundElements&quot;: null, &quot;updated&quot;: 1686254622505, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;points&quot;: [ [ 0, 0 ], [ 24.38172171266831, 26.5699128446945 ] ], &quot;lastCommittedPoint&quot;: null, &quot;startBinding&quot;: { &quot;elementId&quot;: &quot;ENpBunBgJANWWb9y5-KMh&quot;, &quot;gap&quot;: 4.866180419921875, &quot;focus&quot;: 0.2827917483225825 }, &quot;endBinding&quot;: { &quot;elementId&quot;: &quot;zu1TfzJPPcbc9ptORYGFf&quot;, &quot;gap&quot;: 14.710113525390625, &quot;focus&quot;: 1.2797194396331688 }, &quot;startArrowhead&quot;: null, &quot;endArrowhead&quot;: &quot;arrow&quot; }, { &quot;type&quot;: &quot;rectangle&quot;, &quot;version&quot;: 1088, &quot;versionNonce&quot;: 471298792, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;VVYINp_-djTqY1WcdTEwi&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 175.59434185412567, &quot;y&quot;: -945.9809086454599, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 223.2444806780134, &quot;height&quot;: 265.84989929199224, &quot;seed&quot;: 1845302760, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [ { &quot;id&quot;: &quot;MOWREmtAKT0wHDsyhnrDL&quot;, &quot;type&quot;: &quot;arrow&quot; } ], &quot;updated&quot;: 1686254622505, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;customData&quot;: { &quot;legacyTextWrap&quot;: true } }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 511, &quot;versionNonce&quot;: 1769705368, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;7VCLkKzy&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 182.25479020094485, &quot;y&quot;: -941.1295701226846, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;#228be6&quot;, &quot;width&quot;: 71.63194274902344, &quot;height&quot;: 20, &quot;seed&quot;: 347216104, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1686254622505, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;customData&quot;: { &quot;legacyTextWrap&quot;: true }, &quot;fontSize&quot;: 16, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;instance &quot;, &quot;rawText&quot;: &quot;instance &quot;, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;instance &quot;, &quot;lineHeight&quot;: 1.25, &quot;baseline&quot;: 14 }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 464, &quot;versionNonce&quot;: 695784936, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;vR7deZXW&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;dashed&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 340.3688447739262, &quot;y&quot;: -944.1571150661294, &quot;strokeColor&quot;: &quot;#495057&quot;, &quot;backgroundColor&quot;: &quot;#ced4da&quot;, &quot;width&quot;: 56.43994140625, &quot;height&quot;: 25, &quot;seed&quot;: 1137621992, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1686254622505, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;customData&quot;: { &quot;legacyTextWrap&quot;: true }, &quot;fontSize&quot;: 20, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;uid_4&quot;, &quot;rawText&quot;: &quot;uid_4&quot;, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;uid_4&quot;, &quot;lineHeight&quot;: 1.25, &quot;baseline&quot;: 17 }, { &quot;type&quot;: &quot;arrow&quot;, &quot;version&quot;: 974, &quot;versionNonce&quot;: 1737874584, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;yzwIXI5Dt_cznnT6gWxUe&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 280.02710879392976, &quot;y&quot;: -867.3431806355546, &quot;strokeColor&quot;: &quot;#495057&quot;, &quot;backgroundColor&quot;: &quot;#ced4da&quot;, &quot;width&quot;: 2.221298256734599, &quot;height&quot;: 37.08427167395098, &quot;seed&quot;: 1298071272, &quot;groupIds&quot;: [], &quot;roundness&quot;: { &quot;type&quot;: 2 }, &quot;boundElements&quot;: [], &quot;updated&quot;: 1686254622505, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;startBinding&quot;: { &quot;elementId&quot;: &quot;qvH4LGky3TVPxHkhisNtx&quot;, &quot;gap&quot;: 5.528654155452614, &quot;focus&quot;: -0.020826545524459505 }, &quot;endBinding&quot;: { &quot;elementId&quot;: &quot;yPFZ0EFln3Vkn4VxuKkrG&quot;, &quot;gap&quot;: 1, &quot;focus&quot;: 0.06165721801171734 }, &quot;lastCommittedPoint&quot;: null, &quot;startArrowhead&quot;: null, &quot;endArrowhead&quot;: &quot;arrow&quot;, &quot;points&quot;: [ [ 0, 0 ], [ 2.221298256734599, 37.08427167395098 ] ] }, { &quot;type&quot;: &quot;rectangle&quot;, &quot;version&quot;: 1206, &quot;versionNonce&quot;: 1790302440, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;qvH4LGky3TVPxHkhisNtx&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 192.84588938607362, &quot;y&quot;: -908.8718347910072, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;#ced4da&quot;, &quot;width&quot;: 168, &quot;height&quot;: 36, &quot;seed&quot;: 1643045352, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [ { &quot;type&quot;: &quot;text&quot;, &quot;id&quot;: &quot;2DCysDy2&quot; }, { &quot;id&quot;: &quot;yzwIXI5Dt_cznnT6gWxUe&quot;, &quot;type&quot;: &quot;arrow&quot; }, { &quot;id&quot;: &quot;n2ARW2tHBHWiaVNG_UGCH&quot;, &quot;type&quot;: &quot;arrow&quot; }, { &quot;id&quot;: &quot;MOWREmtAKT0wHDsyhnrDL&quot;, &quot;type&quot;: &quot;arrow&quot; }, { &quot;id&quot;: &quot;R9iLKi9g_HCjEKCKy62Nl&quot;, &quot;type&quot;: &quot;arrow&quot; } ], &quot;updated&quot;: 1686254622505, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;customData&quot;: { &quot;legacyTextWrap&quot;: true } }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 922, &quot;versionNonce&quot;: 652118424, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;2DCysDy2&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 221.36593180550722, &quot;y&quot;: -900.8718347910072, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;#ced4da&quot;, &quot;width&quot;: 110.95991516113281, &quot;height&quot;: 20, &quot;seed&quot;: 1082811624, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1686254622505, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 16, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;core.Function2&quot;, &quot;rawText&quot;: &quot;core.Function2&quot;, &quot;textAlign&quot;: &quot;center&quot;, &quot;verticalAlign&quot;: &quot;middle&quot;, &quot;containerId&quot;: &quot;qvH4LGky3TVPxHkhisNtx&quot;, &quot;originalText&quot;: &quot;core.Function2&quot;, &quot;lineHeight&quot;: 1.25, &quot;baseline&quot;: 14 }, { &quot;type&quot;: &quot;diamond&quot;, &quot;version&quot;: 763, &quot;versionNonce&quot;: 593132520, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;yPFZ0EFln3Vkn4VxuKkrG&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 253.63271974321628, &quot;y&quot;: -829.2589546291766, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;#ced4da&quot;, &quot;width&quot;: 57.25048828124997, &quot;height&quot;: 57.25048828124997, &quot;seed&quot;: 1723697128, &quot;groupIds&quot;: [], &quot;roundness&quot;: { &quot;type&quot;: 2 }, &quot;boundElements&quot;: [ { &quot;id&quot;: &quot;yzwIXI5Dt_cznnT6gWxUe&quot;, &quot;type&quot;: &quot;arrow&quot; }, { &quot;id&quot;: &quot;ccJZrBb8ALWJFKRiGS3bz&quot;, &quot;type&quot;: &quot;arrow&quot; }, { &quot;id&quot;: &quot;R9iLKi9g_HCjEKCKy62Nl&quot;, &quot;type&quot;: &quot;arrow&quot; }, { &quot;id&quot;: &quot;re_Q1lYPSlrfoue9wh_Vw&quot;, &quot;type&quot;: &quot;arrow&quot; }, { &quot;id&quot;: &quot;qFnb4i7LFydl9ka9v7h-S&quot;, &quot;type&quot;: &quot;arrow&quot; }, { &quot;id&quot;: &quot;ooRWnrYkUvouFSLMeJOpM&quot;, &quot;type&quot;: &quot;arrow&quot; } ], &quot;updated&quot;: 1686254622505, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;customData&quot;: { &quot;legacyTextWrap&quot;: true } }, { &quot;type&quot;: &quot;rectangle&quot;, &quot;version&quot;: 1348, &quot;versionNonce&quot;: 847877784, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;3p-KL2oTLiv5itorYxAOV&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 203.01425922424323, &quot;y&quot;: -734.2019041966988, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;#ced4da&quot;, &quot;width&quot;: 168, &quot;height&quot;: 36, &quot;seed&quot;: 1083460328, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [ { &quot;type&quot;: &quot;text&quot;, &quot;id&quot;: &quot;f6W1eL8c&quot; }, { &quot;id&quot;: &quot;b4Ifyosb4pS6nKa034KdX&quot;, &quot;type&quot;: &quot;arrow&quot; } ], &quot;updated&quot;: 1686254622505, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;customData&quot;: { &quot;legacyTextWrap&quot;: true } }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 1079, &quot;versionNonce&quot;: 1165147880, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;f6W1eL8c&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 217.86230457336433, &quot;y&quot;: -726.2019041966988, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;#ced4da&quot;, &quot;width&quot;: 138.3039093017578, &quot;height&quot;: 20, &quot;seed&quot;: 1486532072, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1686254622505, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 16, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;core.otherSymbol2&quot;, &quot;rawText&quot;: &quot;core.otherSymbol2&quot;, &quot;textAlign&quot;: &quot;center&quot;, &quot;verticalAlign&quot;: &quot;middle&quot;, &quot;containerId&quot;: &quot;3p-KL2oTLiv5itorYxAOV&quot;, &quot;originalText&quot;: &quot;core.otherSymbol2&quot;, &quot;lineHeight&quot;: 1.25, &quot;baseline&quot;: 14 }, { &quot;type&quot;: &quot;arrow&quot;, &quot;version&quot;: 941, &quot;versionNonce&quot;: 256574360, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;b4Ifyosb4pS6nKa034KdX&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 282.51447858811946, &quot;y&quot;: -772.7238944720908, &quot;strokeColor&quot;: &quot;#495057&quot;, &quot;backgroundColor&quot;: &quot;#ced4da&quot;, &quot;width&quot;: 2.221298256734485, &quot;height&quot;: 37.08427167395075, &quot;seed&quot;: 131903720, &quot;groupIds&quot;: [], &quot;roundness&quot;: { &quot;type&quot;: 2 }, &quot;boundElements&quot;: [], &quot;updated&quot;: 1686254622505, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;startBinding&quot;: null, &quot;endBinding&quot;: { &quot;elementId&quot;: &quot;3p-KL2oTLiv5itorYxAOV&quot;, &quot;gap&quot;: 1.4377186014412473, &quot;focus&quot;: -0.013096061706266633 }, &quot;lastCommittedPoint&quot;: null, &quot;startArrowhead&quot;: null, &quot;endArrowhead&quot;: &quot;arrow&quot;, &quot;points&quot;: [ [ 0, 0 ], [ 2.221298256734485, 37.08427167395075 ] ] }, { &quot;type&quot;: &quot;arrow&quot;, &quot;version&quot;: 1192, &quot;versionNonce&quot;: 562733544, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;ccJZrBb8ALWJFKRiGS3bz&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 312.0308110403853, &quot;y&quot;: -797.8639790411779, &quot;strokeColor&quot;: &quot;#495057&quot;, &quot;backgroundColor&quot;: &quot;#ced4da&quot;, &quot;width&quot;: 24.737952135082537, &quot;height&quot;: 10.533433748448033, &quot;seed&quot;: 635851752, &quot;groupIds&quot;: [], &quot;roundness&quot;: { &quot;type&quot;: 2 }, &quot;boundElements&quot;: [], &quot;updated&quot;: 1686254622505, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;startBinding&quot;: { &quot;elementId&quot;: &quot;yPFZ0EFln3Vkn4VxuKkrG&quot;, &quot;gap&quot;: 2.7699737631700465, &quot;focus&quot;: -0.34611279983708465 }, &quot;endBinding&quot;: { &quot;elementId&quot;: &quot;eTl3n5x6y666GIMG0DL9B&quot;, &quot;gap&quot;: 2.5268681190880216, &quot;focus&quot;: -0.3715404886634086 }, &quot;lastCommittedPoint&quot;: null, &quot;startArrowhead&quot;: null, &quot;endArrowhead&quot;: &quot;arrow&quot;, &quot;points&quot;: [ [ 0, 0 ], [ 24.737952135082537, 10.533433748448033 ] ] }, { &quot;type&quot;: &quot;rectangle&quot;, &quot;version&quot;: 292, &quot;versionNonce&quot;: 190238872, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;eTl3n5x6y666GIMG0DL9B&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 339.29563129455585, &quot;y&quot;: -800.6729473747124, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;#ced4da&quot;, &quot;width&quot;: 46, &quot;height&quot;: 30, &quot;seed&quot;: 952342248, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [ { &quot;type&quot;: &quot;text&quot;, &quot;id&quot;: &quot;8clkL2jK&quot; }, { &quot;id&quot;: &quot;ccJZrBb8ALWJFKRiGS3bz&quot;, &quot;type&quot;: &quot;arrow&quot; }, { &quot;id&quot;: &quot;LHDRmIw_lKZPpSkeqnkFO&quot;, &quot;type&quot;: &quot;arrow&quot; }, { &quot;id&quot;: &quot;dDddZr8-uGpRD2ErkBAku&quot;, &quot;type&quot;: &quot;arrow&quot; } ], &quot;updated&quot;: 1686254622505, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 204, &quot;versionNonce&quot;: 380511464, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;8clkL2jK&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 355.7196501544191, &quot;y&quot;: -795.6729473747124, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;#ced4da&quot;, &quot;width&quot;: 13.151962280273438, &quot;height&quot;: 20, &quot;seed&quot;: 620788200, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1686254622505, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 16, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;...&quot;, &quot;rawText&quot;: &quot;...&quot;, &quot;textAlign&quot;: &quot;center&quot;, &quot;verticalAlign&quot;: &quot;middle&quot;, &quot;containerId&quot;: &quot;eTl3n5x6y666GIMG0DL9B&quot;, &quot;originalText&quot;: &quot;...&quot;, &quot;lineHeight&quot;: 1.25, &quot;baseline&quot;: 14 }, { &quot;type&quot;: &quot;rectangle&quot;, &quot;version&quot;: 387, &quot;versionNonce&quot;: 241237400, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;HN1toN_UmkMKcIL-pm8Tr&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 189.8744189619664, &quot;y&quot;: -785.9252296535907, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;#ced4da&quot;, &quot;width&quot;: 46, &quot;height&quot;: 30, &quot;seed&quot;: 1571355880, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [ { &quot;type&quot;: &quot;text&quot;, &quot;id&quot;: &quot;evErsAw4&quot; }, { &quot;id&quot;: &quot;0-M0dl-sHytkaCiQjQXP3&quot;, &quot;type&quot;: &quot;arrow&quot; }, { &quot;id&quot;: &quot;re_Q1lYPSlrfoue9wh_Vw&quot;, &quot;type&quot;: &quot;arrow&quot; } ], &quot;updated&quot;: 1686254622505, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 299, &quot;versionNonce&quot;: 1114195944, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;evErsAw4&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 206.29843782182968, &quot;y&quot;: -780.9252296535907, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;#ced4da&quot;, &quot;width&quot;: 13.151962280273438, &quot;height&quot;: 20, &quot;seed&quot;: 340336616, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1686254622505, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 16, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;...&quot;, &quot;rawText&quot;: &quot;...&quot;, &quot;textAlign&quot;: &quot;center&quot;, &quot;verticalAlign&quot;: &quot;middle&quot;, &quot;containerId&quot;: &quot;HN1toN_UmkMKcIL-pm8Tr&quot;, &quot;originalText&quot;: &quot;...&quot;, &quot;lineHeight&quot;: 1.25, &quot;baseline&quot;: 14 }, { &quot;type&quot;: &quot;arrow&quot;, &quot;version&quot;: 1262, &quot;versionNonce&quot;: 1771932312, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;0-M0dl-sHytkaCiQjQXP3&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 255.56008948818305, &quot;y&quot;: -800.8938158979173, &quot;strokeColor&quot;: &quot;#495057&quot;, &quot;backgroundColor&quot;: &quot;#ced4da&quot;, &quot;width&quot;: 24.899063071390657, &quot;height&quot;: 11.241659543649348, &quot;seed&quot;: 1760355048, &quot;groupIds&quot;: [], &quot;roundness&quot;: { &quot;type&quot;: 2 }, &quot;boundElements&quot;: [], &quot;updated&quot;: 1686254622505, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;startBinding&quot;: null, &quot;endBinding&quot;: { &quot;elementId&quot;: &quot;HN1toN_UmkMKcIL-pm8Tr&quot;, &quot;gap&quot;: 3.726926700677268, &quot;focus&quot;: -0.42138188940747207 }, &quot;lastCommittedPoint&quot;: null, &quot;startArrowhead&quot;: null, &quot;endArrowhead&quot;: &quot;arrow&quot;, &quot;points&quot;: [ [ 0, 0 ], [ -24.899063071390657, 11.241659543649348 ] ] }, { &quot;type&quot;: &quot;arrow&quot;, &quot;version&quot;: 355, &quot;versionNonce&quot;: 818416360, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;LHDRmIw_lKZPpSkeqnkFO&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 370.1289704407611, &quot;y&quot;: -765.8067669547905, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;#ced4da&quot;, &quot;width&quot;: 97.41787196378436, &quot;height&quot;: 74.42417833018578, &quot;seed&quot;: 438322664, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1686254622505, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;startBinding&quot;: { &quot;elementId&quot;: &quot;eTl3n5x6y666GIMG0DL9B&quot;, &quot;gap&quot;: 4.866180419921875, &quot;focus&quot;: 0.42619630795610003 }, &quot;endBinding&quot;: { &quot;elementId&quot;: &quot;NdnGa8IM&quot;, &quot;gap&quot;: 9.269069055816317, &quot;focus&quot;: -0.8391840292333933 }, &quot;lastCommittedPoint&quot;: null, &quot;startArrowhead&quot;: null, &quot;endArrowhead&quot;: &quot;arrow&quot;, &quot;points&quot;: [ [ 0, 0 ], [ 97.41787196378436, 74.42417833018578 ] ] }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 429, &quot;versionNonce&quot;: 666924952, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;mThHQxRF&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 310.73715213070227, &quot;y&quot;: -988.1621601713382, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;#ced4da&quot;, &quot;width&quot;: 133.08790588378906, &quot;height&quot;: 20, &quot;seed&quot;: 297045224, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1686254622505, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;customData&quot;: { &quot;legacyTextWrap&quot;: true }, &quot;fontSize&quot;: 16, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;Create container&quot;, &quot;rawText&quot;: &quot;Create container&quot;, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;Create container&quot;, &quot;lineHeight&quot;: 1.25, &quot;baseline&quot;: 14 }, { &quot;type&quot;: &quot;ellipse&quot;, &quot;version&quot;: 548, &quot;versionNonce&quot;: 206990824, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;QYfne8NQbkUpWJTOrmFsQ&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 273.2274954970527, &quot;y&quot;: -986.4272609229427, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;#ced4da&quot;, &quot;width&quot;: 15.568679809570312, &quot;height&quot;: 15.568679809570312, &quot;seed&quot;: 598016232, &quot;groupIds&quot;: [], &quot;roundness&quot;: { &quot;type&quot;: 2 }, &quot;boundElements&quot;: [], &quot;updated&quot;: 1686254622505, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;id&quot;: &quot;n2ARW2tHBHWiaVNG_UGCH&quot;, &quot;type&quot;: &quot;arrow&quot;, &quot;x&quot;: 282.4219218973734, &quot;y&quot;: -1023.8594868314947, &quot;width&quot;: 1.2572370256696104, &quot;height&quot;: 111.30780901227683, &quot;angle&quot;: 0, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;#ced4da&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;seed&quot;: 318336920, &quot;version&quot;: 77, &quot;versionNonce&quot;: 1560134808, &quot;isDeleted&quot;: false, &quot;boundElements&quot;: null, &quot;updated&quot;: 1686254622505, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;points&quot;: [ [ 0, 0 ], [ -1.2572370256696104, 111.30780901227683 ] ], &quot;lastCommittedPoint&quot;: null, &quot;startBinding&quot;: { &quot;elementId&quot;: &quot;zu1TfzJPPcbc9ptORYGFf&quot;, &quot;gap&quot;: 3.8533543178016316, &quot;focus&quot;: 0.02925624885680618 }, &quot;endBinding&quot;: { &quot;elementId&quot;: &quot;qvH4LGky3TVPxHkhisNtx&quot;, &quot;gap&quot;: 3.6798430282105983, &quot;focus&quot;: 0.048381928860581715 }, &quot;startArrowhead&quot;: null, &quot;endArrowhead&quot;: &quot;arrow&quot; }, { &quot;type&quot;: &quot;rectangle&quot;, &quot;version&quot;: 1126, &quot;versionNonce&quot;: 1310748904, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;Tvmw6g6k9SUwJNW1qanXv&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 451.537073438947, &quot;y&quot;: -708.3961133748124, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 200.7925240652902, &quot;height&quot;: 49.02717154366631, &quot;seed&quot;: 1269637784, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [ { &quot;id&quot;: &quot;dDddZr8-uGpRD2ErkBAku&quot;, &quot;type&quot;: &quot;arrow&quot; } ], &quot;updated&quot;: 1686254622505, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;customData&quot;: { &quot;legacyTextWrap&quot;: true } }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 544, &quot;versionNonce&quot;: 1997107608, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;9DQzK8c2&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 449.36059086212776, &quot;y&quot;: -763.6295814635383, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;#ced4da&quot;, &quot;width&quot;: 80.05410766601562, &quot;height&quot;: 45.312752259258616, &quot;seed&quot;: 183684328, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1686254622505, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;customData&quot;: { &quot;legacyTextWrap&quot;: true }, &quot;fontSize&quot;: 18.125100903703448, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;Create \\ncontainer&quot;, &quot;rawText&quot;: &quot;Create \\ncontainer&quot;, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;Create \\ncontainer&quot;, &quot;lineHeight&quot;: 1.25, &quot;baseline&quot;: 38 }, { &quot;id&quot;: &quot;trWxx5_1_OQPfARn44YDp&quot;, &quot;type&quot;: &quot;ellipse&quot;, &quot;x&quot;: 423.7642593694717, &quot;y&quot;: -726.0187798699992, &quot;width&quot;: 15.16060965401789, &quot;height&quot;: 16.45786830357156, &quot;angle&quot;: 0, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;#ced4da&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;seed&quot;: 1945371288, &quot;version&quot;: 147, &quot;versionNonce&quot;: 1840387048, &quot;isDeleted&quot;: false, &quot;boundElements&quot;: null, &quot;updated&quot;: 1686254622505, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 564, &quot;versionNonce&quot;: 219643544, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;NdnGa8IM&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 476.8159114603618, &quot;y&quot;: -698.2928625987936, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;#228be6&quot;, &quot;width&quot;: 71.63194274902344, &quot;height&quot;: 20, &quot;seed&quot;: 938683288, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [ { &quot;id&quot;: &quot;LHDRmIw_lKZPpSkeqnkFO&quot;, &quot;type&quot;: &quot;arrow&quot; } ], &quot;updated&quot;: 1686254622505, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;customData&quot;: { &quot;legacyTextWrap&quot;: true }, &quot;fontSize&quot;: 16, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;instance &quot;, &quot;rawText&quot;: &quot;instance &quot;, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;instance &quot;, &quot;lineHeight&quot;: 1.25, &quot;baseline&quot;: 14 }, { &quot;id&quot;: &quot;OAGfxCj8Q0HTyolXOPCFG&quot;, &quot;type&quot;: &quot;rectangle&quot;, &quot;x&quot;: 555.6965452232662, &quot;y&quot;: -695.9069547444411, &quot;width&quot;: 21.74412318638383, &quot;height&quot;: 20.16265869140625, &quot;angle&quot;: 0, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;#ced4da&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;seed&quot;: 785618920, &quot;version&quot;: 86, &quot;versionNonce&quot;: 286742248, &quot;isDeleted&quot;: false, &quot;boundElements&quot;: null, &quot;updated&quot;: 1686254622505, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;type&quot;: &quot;rectangle&quot;, &quot;version&quot;: 137, &quot;versionNonce&quot;: 802941848, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;OTwuXqebyYfvohbYK0AWt&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 586.6917234459224, &quot;y&quot;: -694.3317463529789, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;#ced4da&quot;, &quot;width&quot;: 21.74412318638383, &quot;height&quot;: 20.16265869140625, &quot;seed&quot;: 221817240, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1686254622506, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;type&quot;: &quot;rectangle&quot;, &quot;version&quot;: 124, &quot;versionNonce&quot;: 1021065704, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;HZmUIkytrGZ24saBIz41T&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 616.9342945954763, &quot;y&quot;: -694.469206244162, &quot;strokeColor&quot;: &quot;#1e1e1e&quot;, &quot;backgroundColor&quot;: &quot;#ced4da&quot;, &quot;width&quot;: 21.74412318638383, &quot;height&quot;: 20.16265869140625, &quot;seed&quot;: 1130932376, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1686254622506, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;id&quot;: &quot;SsyPNhMCQaYvQeRKKHqNg&quot;, &quot;type&quot;: &quot;line&quot;, &quot;x&quot;: 496.92247993308774, &quot;y&quot;: -657.1123118872982, &quot;width&quot;: 120.32217843191961, &quot;height&quot;: 71.52605329241078, &quot;angle&quot;: 0, &quot;strokeColor&quot;: &quot;#1971c2&quot;, &quot;backgroundColor&quot;: &quot;#ced4da&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;dashed&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;seed&quot;: 1414229144, &quot;version&quot;: 238, &quot;versionNonce&quot;: 965392536, &quot;isDeleted&quot;: false, &quot;boundElements&quot;: null, &quot;updated&quot;: 1686254622506, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;points&quot;: [ [ 0, 0 ], [ 0.7408796037946104, 47.44105747767867 ], [ -116.95146833147328, 47.44105747767867 ], [ -119.581298828125, -24.08499581473211 ] ], &quot;lastCommittedPoint&quot;: [ -119.581298828125, -24.08499581473211 ], &quot;startBinding&quot;: null, &quot;endBinding&quot;: null, &quot;startArrowhead&quot;: null, &quot;endArrowhead&quot;: null }, { &quot;id&quot;: &quot;1MYH20iQ&quot;, &quot;type&quot;: &quot;text&quot;, &quot;x&quot;: 417.67861832594497, &quot;y&quot;: -636.3760535167625, &quot;width&quot;: 32.94178771972656, &quot;height&quot;: 28.68516568501886, &quot;angle&quot;: 0, &quot;strokeColor&quot;: &quot;#1971c2&quot;, &quot;backgroundColor&quot;: &quot;#ced4da&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;dashed&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;seed&quot;: 451292648, &quot;version&quot;: 132, &quot;versionNonce&quot;: 67943656, &quot;isDeleted&quot;: false, &quot;boundElements&quot;: null, &quot;updated&quot;: 1686254622506, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;text&quot;: &quot;link&quot;, &quot;rawText&quot;: &quot;link&quot;, &quot;fontSize&quot;: 22.94813254801509, &quot;fontFamily&quot;: 1, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;baseline&quot;: 20, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;link&quot;, &quot;lineHeight&quot;: 1.25 }, { &quot;id&quot;: &quot;2lyIisFx-VK-_LX14GImI&quot;, &quot;type&quot;: &quot;line&quot;, &quot;x&quot;: 400.89813562505196, &quot;y&quot;: -912.1845949509143, &quot;width&quot;: 90.09791782924106, &quot;height&quot;: 136.07914515904008, &quot;angle&quot;: 0, &quot;strokeColor&quot;: &quot;#1971c2&quot;, &quot;backgroundColor&quot;: &quot;#ced4da&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;dashed&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;seed&quot;: 1113144552, &quot;version&quot;: 188, &quot;versionNonce&quot;: 500688280, &quot;isDeleted&quot;: false, &quot;boundElements&quot;: null, &quot;updated&quot;: 1686254622506, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;points&quot;: [ [ 0, 0 ], [ 88.76499720982144, 1.0262625558036689 ], [ 86.24241420200894, -134.84662737165172 ], [ -1.3329206194196104, -135.0528826032364 ] ], &quot;lastCommittedPoint&quot;: [ -1.3329206194196104, -135.0528826032364 ], &quot;startBinding&quot;: null, &quot;endBinding&quot;: null, &quot;startArrowhead&quot;: null, &quot;endArrowhead&quot;: null }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 174, &quot;versionNonce&quot;: 942989288, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;WSa4Hmf0&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;dashed&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 449.24561857880485, &quot;y&quot;: -1076.6384797604996, &quot;strokeColor&quot;: &quot;#1971c2&quot;, &quot;backgroundColor&quot;: &quot;#ced4da&quot;, &quot;width&quot;: 32.94178771972656, &quot;height&quot;: 28.68516568501886, &quot;seed&quot;: 376772760, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1686254622506, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 22.94813254801509, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;link&quot;, &quot;rawText&quot;: &quot;link&quot;, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;link&quot;, &quot;lineHeight&quot;: 1.25, &quot;baseline&quot;: 20 }, { &quot;type&quot;: &quot;ellipse&quot;, &quot;version&quot;: 398, &quot;versionNonce&quot;: 972518040, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;vdK7bkpS1655PB_Vq6WYi&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 130.46873515228077, &quot;y&quot;: -944.5212132668771, &quot;strokeColor&quot;: &quot;#c2255c&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 10.291173992417612, &quot;height&quot;: 9.993235236837222, &quot;seed&quot;: 1761640168, &quot;groupIds&quot;: [], &quot;roundness&quot;: { &quot;type&quot;: 2 }, &quot;boundElements&quot;: [], &quot;updated&quot;: 1686254622506, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;type&quot;: &quot;ellipse&quot;, &quot;version&quot;: 396, &quot;versionNonce&quot;: 425763560, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;80Wx6LnagrUQmaUDMKxzf&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 144.7847926299592, &quot;y&quot;: -956.9504996787076, &quot;strokeColor&quot;: &quot;#c2255c&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 10.291173992417612, &quot;height&quot;: 9.993235236837222, &quot;seed&quot;: 1342365416, &quot;groupIds&quot;: [], &quot;roundness&quot;: { &quot;type&quot;: 2 }, &quot;boundElements&quot;: [], &quot;updated&quot;: 1686254622506, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;type&quot;: &quot;ellipse&quot;, &quot;version&quot;: 463, &quot;versionNonce&quot;: 614293400, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;NHZcPx5r874hWCAQdhi39&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 115.800068857638, &quot;y&quot;: -985.9307330073912, &quot;strokeColor&quot;: &quot;#c2255c&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 19.233870700006946, &quot;height&quot;: 17.147383883600575, &quot;seed&quot;: 897924840, &quot;groupIds&quot;: [], &quot;roundness&quot;: { &quot;type&quot;: 2 }, &quot;boundElements&quot;: [], &quot;updated&quot;: 1686254622506, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;type&quot;: &quot;ellipse&quot;, &quot;version&quot;: 688, &quot;versionNonce&quot;: 102499816, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;x8LAsNDtfzRFhoFTUeHoF&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 72.68849659201283, &quot;y&quot;: -1016.6718087956157, &quot;strokeColor&quot;: &quot;#c2255c&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 21.459648462283667, &quot;height&quot;: 24.355025485163083, &quot;seed&quot;: 1315207064, &quot;groupIds&quot;: [], &quot;roundness&quot;: { &quot;type&quot;: 2 }, &quot;boundElements&quot;: [], &quot;updated&quot;: 1686254622506, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;type&quot;: &quot;ellipse&quot;, &quot;version&quot;: 523, &quot;versionNonce&quot;: 2113776792, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;bB2n-hggePYPR0mWkyxXc&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 95.35634327170033, &quot;y&quot;: -1049.9716309217326, &quot;strokeColor&quot;: &quot;#c2255c&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 33.081526950006946, &quot;height&quot;: 32.055656763064796, &quot;seed&quot;: 1333595368, &quot;groupIds&quot;: [], &quot;roundness&quot;: { &quot;type&quot;: 2 }, &quot;boundElements&quot;: [], &quot;updated&quot;: 1686254622506, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;type&quot;: &quot;ellipse&quot;, &quot;version&quot;: 585, &quot;versionNonce&quot;: 728959208, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;qk8f5frSvAlt8zB-zphKj&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 26.92956802058427, &quot;y&quot;: -1088.6831787732947, &quot;strokeColor&quot;: &quot;#c2255c&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 44.39343403706061, &quot;height&quot;: 43.53118166540833, &quot;seed&quot;: 962606488, &quot;groupIds&quot;: [], &quot;roundness&quot;: { &quot;type&quot;: 2 }, &quot;boundElements&quot;: [], &quot;updated&quot;: 1686254622506, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;id&quot;: &quot;uQZFKKUG&quot;, &quot;type&quot;: &quot;text&quot;, &quot;x&quot;: 84.62729647884657, &quot;y&quot;: -1078.5071831903113, &quot;width&quot;: 71.40794372558594, &quot;height&quot;: 20, &quot;angle&quot;: 0, &quot;strokeColor&quot;: &quot;#c2255c&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;dashed&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;seed&quot;: 2130327448, &quot;version&quot;: 61, &quot;versionNonce&quot;: 1070356888, &quot;isDeleted&quot;: false, &quot;boundElements&quot;: null, &quot;updated&quot;: 1686254622506, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;text&quot;: &quot;bubble up&quot;, &quot;rawText&quot;: &quot;bubble up&quot;, &quot;fontSize&quot;: 16, &quot;fontFamily&quot;: 1, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;baseline&quot;: 14, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;bubble up&quot;, &quot;lineHeight&quot;: 1.25 }, { &quot;id&quot;: &quot;PkUjNio6F6ez60P1HG-t4&quot;, &quot;type&quot;: &quot;arrow&quot;, &quot;x&quot;: -53.0626100501712, &quot;y&quot;: -928.0837735920971, &quot;width&quot;: 171.6484723772321, &quot;height&quot;: 1.9759259905132467, &quot;angle&quot;: 0, &quot;strokeColor&quot;: &quot;#c2255c&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;seed&quot;: 419883672, &quot;version&quot;: 253, &quot;versionNonce&quot;: 888253416, &quot;isDeleted&quot;: false, &quot;boundElements&quot;: null, &quot;updated&quot;: 1686254622506, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;points&quot;: [ [ 0, 0 ], [ 171.6484723772321, 1.9759259905132467 ] ], &quot;lastCommittedPoint&quot;: null, &quot;startBinding&quot;: { &quot;elementId&quot;: &quot;eRAHCZgz&quot;, &quot;focus&quot;: -0.21957783875822026, &quot;gap&quot;: 10.260173252650645 }, &quot;endBinding&quot;: null, &quot;startArrowhead&quot;: null, &quot;endArrowhead&quot;: &quot;arrow&quot; }, { &quot;id&quot;: &quot;eRAHCZgz&quot;, &quot;type&quot;: &quot;text&quot;, &quot;x&quot;: -149.10273630575153, &quot;y&quot;: -938.3424754615168, &quot;width&quot;: 85.77995300292969, &quot;height&quot;: 25, &quot;angle&quot;: 0, &quot;strokeColor&quot;: &quot;#c2255c&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;seed&quot;: 1717322984, &quot;version&quot;: 66, &quot;versionNonce&quot;: 222127768, &quot;isDeleted&quot;: false, &quot;boundElements&quot;: [ { &quot;id&quot;: &quot;PkUjNio6F6ez60P1HG-t4&quot;, &quot;type&quot;: &quot;arrow&quot; } ], &quot;updated&quot;: 1686254622506, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;text&quot;: &quot;UPDATE&quot;, &quot;rawText&quot;: &quot;UPDATE&quot;, &quot;fontSize&quot;: 20, &quot;fontFamily&quot;: 1, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;baseline&quot;: 17, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;UPDATE&quot;, &quot;lineHeight&quot;: 1.25 }, { &quot;id&quot;: &quot;8eEG3D1W&quot;, &quot;type&quot;: &quot;text&quot;, &quot;x&quot;: 92.05989622773052, &quot;y&quot;: -1293.5680439604007, &quot;width&quot;: 78.179931640625, &quot;height&quot;: 50, &quot;angle&quot;: 0, &quot;strokeColor&quot;: &quot;#c2255c&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 2, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;seed&quot;: 733768856, &quot;version&quot;: 56, &quot;versionNonce&quot;: 2091118312, &quot;isDeleted&quot;: false, &quot;boundElements&quot;: null, &quot;updated&quot;: 1686254622506, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;text&quot;: &quot;update \\nmethod&quot;, &quot;rawText&quot;: &quot;update \\nmethod&quot;, &quot;fontSize&quot;: 20, &quot;fontFamily&quot;: 1, &quot;textAlign&quot;: &quot;left&quot;, &quot;verticalAlign&quot;: &quot;top&quot;, &quot;baseline&quot;: 42, &quot;containerId&quot;: null, &quot;originalText&quot;: &quot;update \\nmethod&quot;, &quot;lineHeight&quot;: 1.25 }, { &quot;id&quot;: &quot;JQ6nkdl6sxsma0Gmc0cNU&quot;, &quot;type&quot;: &quot;arrow&quot;, &quot;x&quot;: 260.3121109319717, &quot;y&quot;: -1194.962828070334, &quot;width&quot;: 1.0765729631696104, &quot;height&quot;: 39.81706891741078, &quot;angle&quot;: 0, &quot;strokeColor&quot;: &quot;#c2255c&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;seed&quot;: 1657036008, &quot;version&quot;: 104, &quot;versionNonce&quot;: 50647960, &quot;isDeleted&quot;: false, &quot;boundElements&quot;: null, &quot;updated&quot;: 1686254622506, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;points&quot;: [ [ 0, 0 ], [ 1.0765729631696104, 39.81706891741078 ] ], &quot;lastCommittedPoint&quot;: null, &quot;startBinding&quot;: { &quot;elementId&quot;: &quot;RhjM2O-JTBZTrSvwxRCk9&quot;, &quot;gap&quot;: 7.419943673270382, &quot;focus&quot;: 0.18155588574963089 }, &quot;endBinding&quot;: { &quot;elementId&quot;: &quot;t9dXhnzhHwwLUwertuswv&quot;, &quot;gap&quot;: 10.863366291736593, &quot;focus&quot;: -0.6396896675313168 }, &quot;startArrowhead&quot;: null, &quot;endArrowhead&quot;: &quot;arrow&quot; }, { &quot;type&quot;: &quot;arrow&quot;, &quot;version&quot;: 187, &quot;versionNonce&quot;: 991285736, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;ydysaiFD4kGe9rEm0AABg&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 241.52038774410266, &quot;y&quot;: -1146.5583190475018, &quot;strokeColor&quot;: &quot;#c2255c&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 27.66183035714289, &quot;height&quot;: 21.282784598214448, &quot;seed&quot;: 481656472, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1686254622506, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;startBinding&quot;: null, &quot;endBinding&quot;: null, &quot;lastCommittedPoint&quot;: null, &quot;startArrowhead&quot;: null, &quot;endArrowhead&quot;: &quot;arrow&quot;, &quot;points&quot;: [ [ 0, 0 ], [ -27.66183035714289, 21.282784598214448 ] ] }, { &quot;type&quot;: &quot;arrow&quot;, &quot;version&quot;: 627, &quot;versionNonce&quot;: 123117720, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;Px7LruMAXpfOqrv3rP85P&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 302.82804890642376, &quot;y&quot;: -1146.8644494928894, &quot;strokeColor&quot;: &quot;#c2255c&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 28.451924978461534, &quot;height&quot;: 14.42711588371776, &quot;seed&quot;: 950114712, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1686254622506, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;startBinding&quot;: { &quot;elementId&quot;: &quot;t9dXhnzhHwwLUwertuswv&quot;, &quot;gap&quot;: 7.457622265373118, &quot;focus&quot;: -0.9818114848703058 }, &quot;endBinding&quot;: { &quot;elementId&quot;: &quot;ENpBunBgJANWWb9y5-KMh&quot;, &quot;gap&quot;: 6.53448147130797, &quot;focus&quot;: 0.09303896010619397 }, &quot;lastCommittedPoint&quot;: null, &quot;startArrowhead&quot;: null, &quot;endArrowhead&quot;: &quot;arrow&quot;, &quot;points&quot;: [ [ 0, 0 ], [ 28.451924978461534, 14.42711588371776 ] ] }, { &quot;type&quot;: &quot;arrow&quot;, &quot;version&quot;: 285, &quot;versionNonce&quot;: 928208104, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;DtCeAS3N2cgN4YywH9sxn&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 291.53901643754386, &quot;y&quot;: -1104.3802450058542, &quot;strokeColor&quot;: &quot;#c2255c&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 0.4520089285717859, &quot;height&quot;: 36.09331403459828, &quot;seed&quot;: 835449064, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1686254622506, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;startBinding&quot;: { &quot;elementId&quot;: &quot;t9dXhnzhHwwLUwertuswv&quot;, &quot;focus&quot;: -0.4012450180941931, &quot;gap&quot;: 5.870569117926863 }, &quot;endBinding&quot;: null, &quot;lastCommittedPoint&quot;: null, &quot;startArrowhead&quot;: null, &quot;endArrowhead&quot;: &quot;arrow&quot;, &quot;points&quot;: [ [ 0, 0 ], [ -0.4520089285717859, 36.09331403459828 ] ] }, { &quot;type&quot;: &quot;arrow&quot;, &quot;version&quot;: 376, &quot;versionNonce&quot;: 434556312, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;MOWREmtAKT0wHDsyhnrDL&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 260.166771738883, &quot;y&quot;: -1023.0178531252744, &quot;strokeColor&quot;: &quot;#c2255c&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 0.6120082310267208, &quot;height&quot;: 111.10111781529031, &quot;seed&quot;: 374447256, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1686254622506, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;startBinding&quot;: { &quot;elementId&quot;: &quot;zu1TfzJPPcbc9ptORYGFf&quot;, &quot;gap&quot;: 4.694988024021882, &quot;focus&quot;: 0.2983439846799583 }, &quot;endBinding&quot;: { &quot;elementId&quot;: &quot;qvH4LGky3TVPxHkhisNtx&quot;, &quot;gap&quot;: 3.0449005189767604, &quot;focus&quot;: -0.1896711359425063 }, &quot;lastCommittedPoint&quot;: null, &quot;startArrowhead&quot;: null, &quot;endArrowhead&quot;: &quot;arrow&quot;, &quot;points&quot;: [ [ 0, 0 ], [ 0.6120082310267208, 111.10111781529031 ] ] }, { &quot;type&quot;: &quot;arrow&quot;, &quot;version&quot;: 281, &quot;versionNonce&quot;: 1994946536, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;R9iLKi9g_HCjEKCKy62Nl&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 265.0232519286151, &quot;y&quot;: -868.6140794087565, &quot;strokeColor&quot;: &quot;#c2255c&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 1.3368443080357792, &quot;height&quot;: 41.13191877092629, &quot;seed&quot;: 1590575768, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1686254622506, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;startBinding&quot;: { &quot;elementId&quot;: &quot;qvH4LGky3TVPxHkhisNtx&quot;, &quot;gap&quot;: 4.257755382250821, &quot;focus&quot;: 0.1483246630873649 }, &quot;endBinding&quot;: { &quot;elementId&quot;: &quot;yPFZ0EFln3Vkn4VxuKkrG&quot;, &quot;gap&quot;: 9.985106939681916, &quot;focus&quot;: -0.5248952907195681 }, &quot;lastCommittedPoint&quot;: null, &quot;startArrowhead&quot;: null, &quot;endArrowhead&quot;: &quot;arrow&quot;, &quot;points&quot;: [ [ 0, 0 ], [ 1.3368443080357792, 41.13191877092629 ] ] }, { &quot;type&quot;: &quot;arrow&quot;, &quot;version&quot;: 282, &quot;versionNonce&quot;: 602495640, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;re_Q1lYPSlrfoue9wh_Vw&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 253.7016664096419, &quot;y&quot;: -813.8689665809102, &quot;strokeColor&quot;: &quot;#c2255c&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 35.41216169084822, &quot;height&quot;: 20.38853236607156, &quot;seed&quot;: 322750696, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1686254622506, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;startBinding&quot;: { &quot;elementId&quot;: &quot;yPFZ0EFln3Vkn4VxuKkrG&quot;, &quot;gap&quot;: 9.309986678277529, &quot;focus&quot;: 1.036725776352337 }, &quot;endBinding&quot;: { &quot;elementId&quot;: &quot;HN1toN_UmkMKcIL-pm8Tr&quot;, &quot;gap&quot;: 7.555204561247933, &quot;focus&quot;: -0.6882412262384094 }, &quot;lastCommittedPoint&quot;: null, &quot;startArrowhead&quot;: null, &quot;endArrowhead&quot;: &quot;arrow&quot;, &quot;points&quot;: [ [ 0, 0 ], [ -35.41216169084822, 20.38853236607156 ] ] }, { &quot;type&quot;: &quot;arrow&quot;, &quot;version&quot;: 298, &quot;versionNonce&quot;: 1843477224, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;qFnb4i7LFydl9ka9v7h-S&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 296.99564659937414, &quot;y&quot;: -831.6415539483769, &quot;strokeColor&quot;: &quot;#c2255c&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 32.17912946428555, &quot;height&quot;: 23.779885428292573, &quot;seed&quot;: 11819240, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1686254622506, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;startBinding&quot;: { &quot;elementId&quot;: &quot;yPFZ0EFln3Vkn4VxuKkrG&quot;, &quot;focus&quot;: -1.4636998656033229, &quot;gap&quot;: 12.105867522586014 }, &quot;endBinding&quot;: { &quot;elementId&quot;: &quot;Mmu2aOAKLiOiGelyfp0oS&quot;, &quot;focus&quot;: -1.8840432883913676, &quot;gap&quot;: 15.132187067110445 }, &quot;lastCommittedPoint&quot;: null, &quot;startArrowhead&quot;: null, &quot;endArrowhead&quot;: &quot;arrow&quot;, &quot;points&quot;: [ [ 0, 0 ], [ 32.17912946428555, 23.779885428292573 ] ] }, { &quot;type&quot;: &quot;arrow&quot;, &quot;version&quot;: 296, &quot;versionNonce&quot;: 1209157528, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;ooRWnrYkUvouFSLMeJOpM&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 270.5144977433474, &quot;y&quot;: -774.7298238632767, &quot;strokeColor&quot;: &quot;#c2255c&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 0.16924176897316556, &quot;height&quot;: 37.18680245535745, &quot;seed&quot;: 1625049576, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1686254622506, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;startBinding&quot;: { &quot;elementId&quot;: &quot;yPFZ0EFln3Vkn4VxuKkrG&quot;, &quot;focus&quot;: 0.4061301370724105, &quot;gap&quot;: 6.3795941894408195 }, &quot;endBinding&quot;: null, &quot;lastCommittedPoint&quot;: null, &quot;startArrowhead&quot;: null, &quot;endArrowhead&quot;: &quot;arrow&quot;, &quot;points&quot;: [ [ 0, 0 ], [ -0.16924176897316556, 37.18680245535745 ] ] }, { &quot;type&quot;: &quot;arrow&quot;, &quot;version&quot;: 336, &quot;versionNonce&quot;: 784965096, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;dDddZr8-uGpRD2ErkBAku&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 366.62498881477586, &quot;y&quot;: -761.3069505025067, &quot;strokeColor&quot;: &quot;#c2255c&quot;, &quot;backgroundColor&quot;: &quot;transparent&quot;, &quot;width&quot;: 70.37231445312489, &quot;height&quot;: 71.51354108537964, &quot;seed&quot;: 1520124136, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1686254622506, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;startBinding&quot;: { &quot;elementId&quot;: &quot;eTl3n5x6y666GIMG0DL9B&quot;, &quot;gap&quot;: 9.365996872205756, &quot;focus&quot;: 0.520325101500323 }, &quot;endBinding&quot;: { &quot;elementId&quot;: &quot;Tvmw6g6k9SUwJNW1qanXv&quot;, &quot;gap&quot;: 14.5397701710462, &quot;focus&quot;: -0.8763303542372648 }, &quot;lastCommittedPoint&quot;: null, &quot;startArrowhead&quot;: null, &quot;endArrowhead&quot;: &quot;arrow&quot;, &quot;points&quot;: [ [ 0, 0 ], [ 70.37231445312489, 71.51354108537964 ] ] }, { &quot;type&quot;: &quot;ellipse&quot;, &quot;version&quot;: 962, &quot;versionNonce&quot;: 848663704, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;x1EIqtpz0IlGTt9lTR1Ax&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 10, &quot;angle&quot;: 0, &quot;x&quot;: 344.980078932847, &quot;y&quot;: -1208.1561874453341, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;#fab005&quot;, &quot;width&quot;: 42.446224416814395, &quot;height&quot;: 42.446224416814395, &quot;seed&quot;: 801798888, &quot;groupIds&quot;: [ &quot;vwOcLCdcOCrNQJiLZysnE&quot; ], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1686254622506, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;type&quot;: &quot;diamond&quot;, &quot;version&quot;: 1053, &quot;versionNonce&quot;: 447586536, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;COZ5Fjnl568QONKZ1rOBC&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 10, &quot;angle&quot;: 0, &quot;x&quot;: 314.6829523770235, &quot;y&quot;: -1197.973395973912, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;#12b886&quot;, &quot;width&quot;: 44.19874800960462, &quot;height&quot;: 44.19874800960462, &quot;seed&quot;: 1636490728, &quot;groupIds&quot;: [ &quot;vwOcLCdcOCrNQJiLZysnE&quot; ], &quot;roundness&quot;: null, &quot;boundElements&quot;: [ { &quot;id&quot;: &quot;Px7LruMAXpfOqrv3rP85P&quot;, &quot;type&quot;: &quot;arrow&quot; } ], &quot;updated&quot;: 1686254622506, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;type&quot;: &quot;ellipse&quot;, &quot;version&quot;: 1045, &quot;versionNonce&quot;: 1764180376, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;k--0NhRl5HN6wXxkUtJo4&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 10, &quot;angle&quot;: 0, &quot;x&quot;: 344.5113482737974, &quot;y&quot;: -876.5045325206688, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;#fab005&quot;, &quot;width&quot;: 42.446224416814395, &quot;height&quot;: 42.446224416814395, &quot;seed&quot;: 1760557720, &quot;groupIds&quot;: [ &quot;4v0SrycsR2akimDLhD_XZ&quot; ], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1686254622506, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;type&quot;: &quot;diamond&quot;, &quot;version&quot;: 1137, &quot;versionNonce&quot;: 286868456, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;Mmu2aOAKLiOiGelyfp0oS&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 10, &quot;angle&quot;: 0, &quot;x&quot;: 314.214221717974, &quot;y&quot;: -866.3217410492466, &quot;strokeColor&quot;: &quot;#000000&quot;, &quot;backgroundColor&quot;: &quot;#12b886&quot;, &quot;width&quot;: 44.19874800960462, &quot;height&quot;: 44.19874800960462, &quot;seed&quot;: 1933895576, &quot;groupIds&quot;: [ &quot;4v0SrycsR2akimDLhD_XZ&quot; ], &quot;roundness&quot;: null, &quot;boundElements&quot;: [ { &quot;id&quot;: &quot;qFnb4i7LFydl9ka9v7h-S&quot;, &quot;type&quot;: &quot;arrow&quot; } ], &quot;updated&quot;: 1686254622506, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;id&quot;: &quot;1nBrlaBR0qoBQnNi1l1ni&quot;, &quot;type&quot;: &quot;rectangle&quot;, &quot;x&quot;: 443.78447386116295, &quot;y&quot;: -1240.1463714236402, &quot;width&quot;: 142, &quot;height&quot;: 35, &quot;angle&quot;: 0, &quot;strokeColor&quot;: &quot;#f08c00&quot;, &quot;backgroundColor&quot;: &quot;#ffec99&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;seed&quot;: 1750351512, &quot;version&quot;: 176, &quot;versionNonce&quot;: 452677272, &quot;isDeleted&quot;: false, &quot;boundElements&quot;: [ { &quot;type&quot;: &quot;text&quot;, &quot;id&quot;: &quot;aY13ZN8a&quot; } ], &quot;updated&quot;: 1686254622506, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;id&quot;: &quot;aY13ZN8a&quot;, &quot;type&quot;: &quot;text&quot;, &quot;x&quot;: 451.2745251306942, &quot;y&quot;: -1235.1463714236402, &quot;width&quot;: 127.0198974609375, &quot;height&quot;: 25, &quot;angle&quot;: 0, &quot;strokeColor&quot;: &quot;#f08c00&quot;, &quot;backgroundColor&quot;: &quot;#ffec99&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;seed&quot;: 1459078376, &quot;version&quot;: 183, &quot;versionNonce&quot;: 538478312, &quot;isDeleted&quot;: false, &quot;boundElements&quot;: null, &quot;updated&quot;: 1686254622506, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;text&quot;: &quot;Local memory&quot;, &quot;rawText&quot;: &quot;Local memory&quot;, &quot;fontSize&quot;: 20, &quot;fontFamily&quot;: 1, &quot;textAlign&quot;: &quot;center&quot;, &quot;verticalAlign&quot;: &quot;middle&quot;, &quot;baseline&quot;: 17, &quot;containerId&quot;: &quot;1nBrlaBR0qoBQnNi1l1ni&quot;, &quot;originalText&quot;: &quot;Local memory&quot;, &quot;lineHeight&quot;: 1.25 }, { &quot;type&quot;: &quot;rectangle&quot;, &quot;version&quot;: 286, &quot;versionNonce&quot;: 1892006808, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;3yBHjaiIAQt3ADZa6_zlt&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 442.545622489857, &quot;y&quot;: -883.6420202590635, &quot;strokeColor&quot;: &quot;#f08c00&quot;, &quot;backgroundColor&quot;: &quot;#ffec99&quot;, &quot;width&quot;: 142, &quot;height&quot;: 35, &quot;seed&quot;: 1546665704, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [ { &quot;type&quot;: &quot;text&quot;, &quot;id&quot;: &quot;YOuzKiYs&quot; } ], &quot;updated&quot;: 1686254622507, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 293, &quot;versionNonce&quot;: 876046824, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;YOuzKiYs&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 450.03567375938826, &quot;y&quot;: -878.6420202590635, &quot;strokeColor&quot;: &quot;#f08c00&quot;, &quot;backgroundColor&quot;: &quot;#ffec99&quot;, &quot;width&quot;: 127.0198974609375, &quot;height&quot;: 25, &quot;seed&quot;: 77079016, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1686254622507, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 20, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;Local memory&quot;, &quot;rawText&quot;: &quot;Local memory&quot;, &quot;textAlign&quot;: &quot;center&quot;, &quot;verticalAlign&quot;: &quot;middle&quot;, &quot;containerId&quot;: &quot;3yBHjaiIAQt3ADZa6_zlt&quot;, &quot;originalText&quot;: &quot;Local memory&quot;, &quot;lineHeight&quot;: 1.25, &quot;baseline&quot;: 17 }, { &quot;type&quot;: &quot;rectangle&quot;, &quot;version&quot;: 257, &quot;versionNonce&quot;: 1555728536, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;87LGGwKv_vMjDG58b_ixd&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 604.0499244331147, &quot;y&quot;: -779.2664419085684, &quot;strokeColor&quot;: &quot;#f08c00&quot;, &quot;backgroundColor&quot;: &quot;#ffec99&quot;, &quot;width&quot;: 142, &quot;height&quot;: 35, &quot;seed&quot;: 2125800680, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [ { &quot;type&quot;: &quot;text&quot;, &quot;id&quot;: &quot;NyALk65w&quot; } ], &quot;updated&quot;: 1686254622507, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 264, &quot;versionNonce&quot;: 1216474344, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;NyALk65w&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 611.539975702646, &quot;y&quot;: -774.2664419085684, &quot;strokeColor&quot;: &quot;#f08c00&quot;, &quot;backgroundColor&quot;: &quot;#ffec99&quot;, &quot;width&quot;: 127.0198974609375, &quot;height&quot;: 25, &quot;seed&quot;: 294668264, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1686254622507, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 20, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;Local memory&quot;, &quot;rawText&quot;: &quot;Local memory&quot;, &quot;textAlign&quot;: &quot;center&quot;, &quot;verticalAlign&quot;: &quot;middle&quot;, &quot;containerId&quot;: &quot;87LGGwKv_vMjDG58b_ixd&quot;, &quot;originalText&quot;: &quot;Local memory&quot;, &quot;lineHeight&quot;: 1.25, &quot;baseline&quot;: 17 }, { &quot;type&quot;: &quot;rectangle&quot;, &quot;version&quot;: 341, &quot;versionNonce&quot;: 1787671960, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;GEyq2XQS-HbYdHUSy3Skv&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 254.4779530208566, &quot;y&quot;: -1409.8327085699848, &quot;strokeColor&quot;: &quot;#9c36b5&quot;, &quot;backgroundColor&quot;: &quot;#eebefa&quot;, &quot;width&quot;: 150, &quot;height&quot;: 40, &quot;seed&quot;: 1918328472, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [ { &quot;type&quot;: &quot;text&quot;, &quot;id&quot;: &quot;zR3bRDDd&quot; } ], &quot;updated&quot;: 1686254622507, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;type&quot;: &quot;text&quot;, &quot;version&quot;: 363, &quot;versionNonce&quot;: 377753576, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;zR3bRDDd&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 261.3780079524972, &quot;y&quot;: -1402.3327085699848, &quot;strokeColor&quot;: &quot;#9c36b5&quot;, &quot;backgroundColor&quot;: &quot;#ffec99&quot;, &quot;width&quot;: 136.19989013671875, &quot;height&quot;: 25, &quot;seed&quot;: 572509080, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1686254622507, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;fontSize&quot;: 20, &quot;fontFamily&quot;: 1, &quot;text&quot;: &quot;Global memory&quot;, &quot;rawText&quot;: &quot;Global memory&quot;, &quot;textAlign&quot;: &quot;center&quot;, &quot;verticalAlign&quot;: &quot;middle&quot;, &quot;containerId&quot;: &quot;GEyq2XQS-HbYdHUSy3Skv&quot;, &quot;originalText&quot;: &quot;Global memory&quot;, &quot;lineHeight&quot;: 1.25, &quot;baseline&quot;: 17 }, { &quot;id&quot;: &quot;OxFZOahkcoS5vSoAuadpQ&quot;, &quot;type&quot;: &quot;line&quot;, &quot;x&quot;: 405.23598101794266, &quot;y&quot;: -1389.564993817371, &quot;width&quot;: 157.86773247228837, &quot;height&quot;: 680.8335384221614, &quot;angle&quot;: 0, &quot;strokeColor&quot;: &quot;#9c36b5&quot;, &quot;backgroundColor&quot;: &quot;#eebefa&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;seed&quot;: 546127848, &quot;version&quot;: 425, &quot;versionNonce&quot;: 259211928, &quot;isDeleted&quot;: false, &quot;boundElements&quot;: null, &quot;updated&quot;: 1686254622507, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;points&quot;: [ [ 0, 0 ], [ 19.508574353724157, 2.111668405819728 ], [ 22.771652458112726, 616.1000226418066 ], [ 157.4445275737827, 618.0652330137228 ], [ 157.86773247228837, 680.8335384221614 ] ], &quot;lastCommittedPoint&quot;: [ 157.86773247228837, 680.8335384221614 ], &quot;startBinding&quot;: null, &quot;endBinding&quot;: null, &quot;startArrowhead&quot;: null, &quot;endArrowhead&quot;: null }, { &quot;id&quot;: &quot;Jp7p5GYCLrXZKjOsGd-Pj&quot;, &quot;type&quot;: &quot;line&quot;, &quot;x&quot;: 398.02259675695154, &quot;y&quot;: -1223.685088912959, &quot;width&quot;: 47.622413419700365, &quot;height&quot;: 0.6577937036088315, &quot;angle&quot;: 0, &quot;strokeColor&quot;: &quot;#f08c00&quot;, &quot;backgroundColor&quot;: &quot;#eebefa&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;seed&quot;: 1617972376, &quot;version&quot;: 95, &quot;versionNonce&quot;: 1179243240, &quot;isDeleted&quot;: false, &quot;boundElements&quot;: null, &quot;updated&quot;: 1686254622507, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;points&quot;: [ [ 0, 0 ], [ 47.622413419700365, -0.6577937036088315 ] ], &quot;lastCommittedPoint&quot;: [ 47.622413419700365, -0.6577937036088315 ], &quot;startBinding&quot;: null, &quot;endBinding&quot;: null, &quot;startArrowhead&quot;: null, &quot;endArrowhead&quot;: null }, { &quot;type&quot;: &quot;line&quot;, &quot;version&quot;: 163, &quot;versionNonce&quot;: 2048864152, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;0PoXsQwlZYSp_zOMrByi0&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 396.9201880265359, &quot;y&quot;: -865.2224491283962, &quot;strokeColor&quot;: &quot;#f08c00&quot;, &quot;backgroundColor&quot;: &quot;#eebefa&quot;, &quot;width&quot;: 47.622413419700365, &quot;height&quot;: 0.6577937036088315, &quot;seed&quot;: 808741272, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1686254622507, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;startBinding&quot;: null, &quot;endBinding&quot;: null, &quot;lastCommittedPoint&quot;: null, &quot;startArrowhead&quot;: null, &quot;endArrowhead&quot;: null, &quot;points&quot;: [ [ 0, 0 ], [ 47.622413419700365, -0.6577937036088315 ] ] }, { &quot;type&quot;: &quot;line&quot;, &quot;version&quot;: 195, &quot;versionNonce&quot;: 509556200, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;j-L429b5lPmCLJDMpaHSj&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 623.9190657804688, &quot;y&quot;: -708.2324312118361, &quot;strokeColor&quot;: &quot;#f08c00&quot;, &quot;backgroundColor&quot;: &quot;#eebefa&quot;, &quot;width&quot;: 1.2633143667184186, &quot;height&quot;: 40.43132641609725, &quot;seed&quot;: 1678025960, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1686254622507, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;startBinding&quot;: null, &quot;endBinding&quot;: null, &quot;lastCommittedPoint&quot;: null, &quot;startArrowhead&quot;: null, &quot;endArrowhead&quot;: null, &quot;points&quot;: [ [ 0, 0 ], [ 1.2633143667184186, -40.43132641609725 ] ] }, { &quot;id&quot;: &quot;XvUKF-9D2EJGs6FFmFPz7&quot;, &quot;type&quot;: &quot;line&quot;, &quot;x&quot;: 427.7092538418682, &quot;y&quot;: -1191.2525713409482, &quot;width&quot;: 31.562087771455595, &quot;height&quot;: 1.2488432990098772, &quot;angle&quot;: 0, &quot;strokeColor&quot;: &quot;#9c36b5&quot;, &quot;backgroundColor&quot;: &quot;#eebefa&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;seed&quot;: 1639874792, &quot;version&quot;: 49, &quot;versionNonce&quot;: 1657109656, &quot;isDeleted&quot;: false, &quot;boundElements&quot;: null, &quot;updated&quot;: 1686254622507, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;points&quot;: [ [ 0, 0 ], [ -31.562087771455595, 1.2488432990098772 ] ], &quot;lastCommittedPoint&quot;: [ -31.562087771455595, 1.2488432990098772 ], &quot;startBinding&quot;: null, &quot;endBinding&quot;: null, &quot;startArrowhead&quot;: null, &quot;endArrowhead&quot;: null }, { &quot;type&quot;: &quot;line&quot;, &quot;version&quot;: 238, &quot;versionNonce&quot;: 1611753880, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;hUsFaeEeJS4Cp0rRJGKOa&quot;, &quot;fillStyle&quot;: &quot;hachure&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 426.8897351732619, &quot;y&quot;: -834.0076565373058, &quot;strokeColor&quot;: &quot;#9c36b5&quot;, &quot;backgroundColor&quot;: &quot;#eebefa&quot;, &quot;width&quot;: 27.803744757929508, &quot;height&quot;: 1.4766887834455247, &quot;seed&quot;: 1570713320, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1686254629786, &quot;link&quot;: null, &quot;locked&quot;: false, &quot;startBinding&quot;: null, &quot;endBinding&quot;: null, &quot;lastCommittedPoint&quot;: null, &quot;startArrowhead&quot;: null, &quot;endArrowhead&quot;: null, &quot;points&quot;: [ [ 0, 0 ], [ -27.803744757929508, -1.4766887834455247 ] ] }, { &quot;id&quot;: &quot;BCxy9I0aMCu5jzwqBtWXQ&quot;, &quot;type&quot;: &quot;ellipse&quot;, &quot;x&quot;: 421.45824480483395, &quot;y&quot;: -1195.726690771556, &quot;width&quot;: 9.85272981433718, &quot;height&quot;: 9.236035911874296, &quot;angle&quot;: 0, &quot;strokeColor&quot;: &quot;#9c36b5&quot;, &quot;backgroundColor&quot;: &quot;#9c36b5&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;seed&quot;: 1785511912, &quot;version&quot;: 67, &quot;versionNonce&quot;: 46656488, &quot;isDeleted&quot;: false, &quot;boundElements&quot;: null, &quot;updated&quot;: 1686254652765, &quot;link&quot;: null, &quot;locked&quot;: false }, { &quot;type&quot;: &quot;ellipse&quot;, &quot;version&quot;: 134, &quot;versionNonce&quot;: 1358689512, &quot;isDeleted&quot;: false, &quot;id&quot;: &quot;rsvrZ24ILfI_lUWAJ3tq0&quot;, &quot;fillStyle&quot;: &quot;solid&quot;, &quot;strokeWidth&quot;: 1, &quot;strokeStyle&quot;: &quot;solid&quot;, &quot;roughness&quot;: 1, &quot;opacity&quot;: 100, &quot;angle&quot;: 0, &quot;x&quot;: 421.41733204469926, &quot;y&quot;: -837.5216593683544, &quot;strokeColor&quot;: &quot;#9c36b5&quot;, &quot;backgroundColor&quot;: &quot;#9c36b5&quot;, &quot;width&quot;: 9.85272981433718, &quot;height&quot;: 9.236035911874296, &quot;seed&quot;: 1492816792, &quot;groupIds&quot;: [], &quot;roundness&quot;: null, &quot;boundElements&quot;: [], &quot;updated&quot;: 1686254658621, &quot;link&quot;: null, &quot;locked&quot;: false } ], &quot;appState&quot;: { &quot;theme&quot;: &quot;light&quot;, &quot;viewBackgroundColor&quot;: &quot;#ffffff&quot;, &quot;currentItemStrokeColor&quot;: &quot;#9c36b5&quot;, &quot;currentItemBackgroundColor&quot;: &quot;#9c36b5&quot;, &quot;currentItemFillStyle&quot;: &quot;solid&quot;, &quot;currentItemStrokeWidth&quot;: 1, &quot;currentItemStrokeStyle&quot;: &quot;solid&quot;, &quot;currentItemRoughness&quot;: 1, &quot;currentItemOpacity&quot;: 100, &quot;currentItemFontFamily&quot;: 1, &quot;currentItemFontSize&quot;: 20, &quot;currentItemTextAlign&quot;: &quot;left&quot;, &quot;currentItemStartArrowhead&quot;: null, &quot;currentItemEndArrowhead&quot;: &quot;arrow&quot;, &quot;scrollX&quot;: 489.3311913157386, &quot;scrollY&quot;: 1552.0718478860053, &quot;zoom&quot;: { &quot;value&quot;: 0.6200073242187499 }, &quot;currentItemRoundness&quot;: &quot;sharp&quot;, &quot;gridSize&quot;: null, &quot;colorPalette&quot;: {}, &quot;currentStrokeOptions&quot;: null, &quot;previousGridSize&quot;: null }, &quot;files&quot;: {} } %%","keywords":"","version":null}],"options":{"disableVersioning":true,"id":"default"}}